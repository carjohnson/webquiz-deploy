{"version":3,"file":"extensions_cornerstone-dicom-seg_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAMA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AAEA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3PA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5CcommandsModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5CgetHangingProtocolModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5CgetSopClassHandlerModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5CgetToolbarModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5Cindex.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dicom-seg%5Csrc%5Cutils%5CdicomlabToRGB.ts"],"sourcesContent":["import dcmjs from 'dcmjs';\r\nimport { classes, Types } from '@ohif/core';\r\nimport { cache, metaData } from '@cornerstonejs/core';\r\nimport { segmentation as cornerstoneToolsSegmentation } from '@cornerstonejs/tools';\r\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\r\nimport { createReportDialogPrompt } from '@ohif/extension-default';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\n\r\nimport PROMPT_RESPONSES from '../../default/src/utils/_shared/PROMPT_RESPONSES';\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\n\r\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\r\n  const { viewports, activeViewportId } = viewportGridService.getState();\r\n  const targetViewportId = viewportId || activeViewportId;\r\n\r\n  const viewport = viewports.get(targetViewportId);\r\n\r\n  return viewport;\r\n};\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    Segmentation: { generateSegmentation },\r\n  },\r\n} = adaptersSEG;\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    RTSS: { generateRTSSFromSegmentations },\r\n  },\r\n} = adaptersRT;\r\n\r\nconst { downloadDICOMData } = helpers;\r\n\r\nconst commandsModule = ({\r\n  servicesManager,\r\n  extensionManager,\r\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\r\n  const { segmentationService, displaySetService, viewportGridService, toolGroupService } =\r\n    servicesManager.services as AppTypes.Services;\r\n\r\n  const actions = {\r\n    /**\r\n     * Loads segmentations for a specified viewport.\r\n     * The function prepares the viewport for rendering, then loads the segmentation details.\r\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentations - Array of segmentations to be loaded.\r\n     * @param params.viewportId - the target viewport ID.\r\n     *\r\n     */\r\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\r\n      // Todo: handle adding more than one segmentation\r\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\r\n\r\n      const segmentation = segmentations[0];\r\n      const segmentationId = segmentation.segmentationId;\r\n      const label = segmentation.config.label;\r\n      const segments = segmentation.config.segments;\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      await segmentationService.createLabelmapForDisplaySet(displaySet, {\r\n        segmentationId,\r\n        segments,\r\n        label,\r\n      });\r\n\r\n      segmentationService.addOrUpdateSegmentation(segmentation);\r\n\r\n      await segmentationService.addSegmentationRepresentation(viewport.viewportId, {\r\n        segmentationId,\r\n      });\r\n\r\n      return segmentationId;\r\n    },\r\n    /**\r\n     * Generates a segmentation from a given segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * its referenced volume, extracts label maps from the\r\n     * segmentation volume, and produces segmentation data\r\n     * alongside associated metadata.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be generated.\r\n     * @param params.options - Optional configuration for the generation process.\r\n     *\r\n     * @returns Returns the generated segmentation data.\r\n     */\r\n    generateSegmentation: ({ segmentationId, options = {} }) => {\r\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { imageIds } = segmentation.representationData.Labelmap;\r\n\r\n      const segImages = imageIds.map(imageId => cache.getImage(imageId));\r\n      const referencedImages = segImages.map(image => cache.getImage(image.referencedImageId));\r\n\r\n      const labelmaps2D = [];\r\n\r\n      let z = 0;\r\n\r\n      for (const segImage of segImages) {\r\n        const segmentsOnLabelmap = new Set();\r\n        const pixelData = segImage.getPixelData();\r\n        const { rows, columns } = segImage;\r\n\r\n        // Use a single pass through the pixel data\r\n        for (let i = 0; i < pixelData.length; i++) {\r\n          const segment = pixelData[i];\r\n          if (segment !== 0) {\r\n            segmentsOnLabelmap.add(segment);\r\n          }\r\n        }\r\n\r\n        labelmaps2D[z++] = {\r\n          segmentsOnLabelmap: Array.from(segmentsOnLabelmap),\r\n          pixelData,\r\n          rows,\r\n          columns,\r\n        };\r\n      }\r\n\r\n      const allSegmentsOnLabelmap = labelmaps2D.map(labelmap => labelmap.segmentsOnLabelmap);\r\n\r\n      const labelmap3D = {\r\n        segmentsOnLabelmap: Array.from(new Set(allSegmentsOnLabelmap.flat())),\r\n        metadata: [],\r\n        labelmaps2D,\r\n      };\r\n\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      const representations = segmentationService.getRepresentationsForSegmentation(segmentationId);\r\n\r\n      Object.entries(segmentationInOHIF.segments).forEach(([segmentIndex, segment]) => {\r\n        // segmentation service already has a color for each segment\r\n        if (!segment) {\r\n          return;\r\n        }\r\n\r\n        const { label } = segment;\r\n\r\n        const firstRepresentation = representations[0];\r\n        const color = segmentationService.getSegmentColor(\r\n          firstRepresentation.viewportId,\r\n          segmentationId,\r\n          segment.segmentIndex\r\n        );\r\n\r\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\r\n          color.slice(0, 3).map(value => value / 255)\r\n        ).map(value => Math.round(value));\r\n\r\n        const segmentMetadata = {\r\n          SegmentNumber: segmentIndex.toString(),\r\n          SegmentLabel: label,\r\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\r\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\r\n          RecommendedDisplayCIELabValue,\r\n          SegmentedPropertyCategoryCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n          SegmentedPropertyTypeCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n        };\r\n        labelmap3D.metadata[segmentIndex] = segmentMetadata;\r\n      });\r\n\r\n      const generatedSegmentation = generateSegmentation(\r\n        referencedImages,\r\n        labelmap3D,\r\n        metaData,\r\n        options\r\n      );\r\n\r\n      return generatedSegmentation;\r\n    },\r\n    /**\r\n     * Downloads a segmentation based on the provided segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * uses it to generate the corresponding DICOM dataset, which\r\n     * is then downloaded with an appropriate filename.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\r\n     *\r\n     */\r\n    downloadSegmentation: ({ segmentationId }) => {\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      const generatedSegmentation = actions.generateSegmentation({\r\n        segmentationId,\r\n      });\r\n\r\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\r\n    },\r\n    /**\r\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\r\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\r\n     * and in its absence, defaults to 'Research Derived Series'.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be stored.\r\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\r\n     *\r\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\r\n     * otherwise throws an error.\r\n     */\r\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      if (!segmentation) {\r\n        throw new Error('No segmentation found');\r\n      }\r\n\r\n      const { label } = segmentation;\r\n      const defaultDataSource = dataSource ?? extensionManager.getActiveDataSource()[0];\r\n\r\n      const {\r\n        value: reportName,\r\n        dataSourceName: selectedDataSource,\r\n        action,\r\n      } = await createReportDialogPrompt({\r\n        servicesManager,\r\n        extensionManager,\r\n        title: 'Store Segmentation',\r\n      });\r\n\r\n      if (action === PROMPT_RESPONSES.CREATE_REPORT) {\r\n        try {\r\n          const selectedDataSourceConfig = selectedDataSource\r\n            ? extensionManager.getDataSources(selectedDataSource)[0]\r\n            : defaultDataSource;\r\n\r\n          const generatedData = actions.generateSegmentation({\r\n            segmentationId,\r\n            options: {\r\n              SeriesDescription: reportName || label || 'Research Derived Series',\r\n            },\r\n          });\r\n\r\n          if (!generatedData || !generatedData.dataset) {\r\n            throw new Error('Error during segmentation generation');\r\n          }\r\n\r\n          const { dataset: naturalizedReport } = generatedData;\r\n\r\n          // DCMJS assigns a dummy study id during creation, and this can cause problems, so clearing it out\r\n          if (naturalizedReport.StudyID === 'No Study ID') {\r\n            naturalizedReport.StudyID = '';\r\n          }\r\n\r\n          await selectedDataSourceConfig.store.dicom(naturalizedReport);\r\n\r\n          // add the information for where we stored it to the instance as well\r\n          naturalizedReport.wadoRoot = selectedDataSourceConfig.getConfig().wadoRoot;\r\n\r\n          DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n          return naturalizedReport;\r\n        } catch (error) {\r\n          console.debug('Error storing segmentation:', error);\r\n          throw error;\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * Converts segmentations into RTSS for download.\r\n     * This sample function retrieves all segentations and passes to\r\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\r\n     * converts dataset to downloadable blob.\r\n     *\r\n     */\r\n    downloadRTSS: async ({ segmentationId }) => {\r\n      const segmentations = segmentationService.getSegmentation(segmentationId);\r\n\r\n      // inject colors to the segmentIndex\r\n      const firstRepresentation =\r\n        segmentationService.getRepresentationsForSegmentation(segmentationId)[0];\r\n      Object.entries(segmentations.segments).forEach(([segmentIndex, segment]) => {\r\n        segment.color = segmentationService.getSegmentColor(\r\n          firstRepresentation.viewportId,\r\n          segmentationId,\r\n          segmentIndex\r\n        );\r\n      });\r\n\r\n      const RTSS = await generateRTSSFromSegmentations(\r\n        segmentations,\r\n        classes.MetadataProvider,\r\n        DicomMetadataStore\r\n      );\r\n\r\n      try {\r\n        const reportBlob = datasetToBlob(RTSS);\r\n\r\n        //Create a URL for the binary.\r\n        const objectUrl = URL.createObjectURL(reportBlob);\r\n        window.location.assign(objectUrl);\r\n      } catch (e) {\r\n        console.warn(e);\r\n      }\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    loadSegmentationsForViewport: {\r\n      commandFn: actions.loadSegmentationsForViewport,\r\n    },\r\n\r\n    generateSegmentation: {\r\n      commandFn: actions.generateSegmentation,\r\n    },\r\n    downloadSegmentation: {\r\n      commandFn: actions.downloadSegmentation,\r\n    },\r\n    storeSegmentation: {\r\n      commandFn: actions.storeSegmentation,\r\n    },\r\n    downloadRTSS: {\r\n      commandFn: actions.downloadRTSS,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'SEGMENTATION',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import { Types } from '@ohif/core';\r\n\r\nconst segProtocol: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/seg',\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  name: 'Segmentations',\r\n  // Just apply this one when specifically listed\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n      syncGroups: [\r\n        {\r\n          type: 'hydrateseg',\r\n          id: 'sameFORId',\r\n          source: true,\r\n          target: true,\r\n          // options: {\r\n          //   matchingRules: ['sameFOR'],\r\n          // },\r\n        },\r\n      ],\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'segDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    segDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'SEG',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'Segmentations',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            allowUnmatchedView: true,\r\n            syncGroups: [\r\n              {\r\n                type: 'hydrateseg',\r\n                id: 'sameFORId',\r\n                source: true,\r\n                target: true,\r\n                // options: {\r\n                //   matchingRules: ['sameFOR'],\r\n                // },\r\n              },\r\n            ],\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'segDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: segProtocol.id,\r\n      protocol: segProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\nexport { segProtocol };\r\n","import { utils, Types as OhifTypes } from '@ohif/core';\r\nimport i18n from '@ohif/i18n';\r\nimport { metaData, eventTarget } from '@cornerstonejs/core';\r\nimport { CONSTANTS, segmentation as cstSegmentation } from '@cornerstonejs/tools';\r\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\r\n\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\r\n\r\nconst loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'SEG',\r\n    loading: false,\r\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    segments: {},\r\n    sopClassUids,\r\n    instance,\r\n    instances: [instance],\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('SEG')}`,\r\n  };\r\n\r\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n\r\n  if (!referencedSeriesSequence) {\r\n    console.error('ReferencedSeriesSequence is missing for the SEG');\r\n    return;\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\r\n\r\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n  const { displaySetService } = servicesManager.services;\r\n  const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n    displaySet.referencedSeriesInstanceUID\r\n  );\r\n\r\n  const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n  if (!referencedDisplaySet) {\r\n    // subscribe to display sets added which means at some point it will be available\r\n    const { unsubscribe } = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      ({ displaySetsAdded }) => {\r\n        // here we can also do a little bit of search, since sometimes DICOM SEG\r\n        // does not contain the referenced display set uid , and we can just\r\n        // see which of the display sets added is more similar and assign it\r\n        // to the referencedDisplaySet\r\n        const addedDisplaySet = displaySetsAdded[0];\r\n        if (addedDisplaySet.SeriesInstanceUID === displaySet.referencedSeriesInstanceUID) {\r\n          displaySet.referencedDisplaySetInstanceUID = addedDisplaySet.displaySetInstanceUID;\r\n          unsubscribe();\r\n        }\r\n      }\r\n    );\r\n  } else {\r\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\r\n  }\r\n\r\n  displaySet.load = async ({ headers }) =>\r\n    await _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(\r\n  segDisplaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager,\r\n  headers\r\n) {\r\n  const { SOPInstanceUID } = segDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n\r\n  if (\r\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    _segmentationExists(segDisplaySet)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  segDisplaySet.loading = true;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\r\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\r\n      try {\r\n        await _loadSegments({\r\n          extensionManager,\r\n          servicesManager,\r\n          segDisplaySet,\r\n          headers,\r\n        });\r\n      } catch (e) {\r\n        segDisplaySet.loading = false;\r\n        return reject(e);\r\n      }\r\n    }\r\n\r\n    segmentationService\r\n      .createSegmentationForSEGDisplaySet(segDisplaySet)\r\n      .then(() => {\r\n        segDisplaySet.loading = false;\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        segDisplaySet.loading = false;\r\n        reject(error);\r\n      });\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nasync function _loadSegments({\r\n  extensionManager,\r\n  servicesManager,\r\n  segDisplaySet,\r\n  headers,\r\n}: withAppTypes) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { segmentationService, uiNotificationService } = servicesManager.services;\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\r\n\r\n  const referencedDisplaySet = servicesManager.services.displaySetService.getDisplaySetByUID(\r\n    segDisplaySet.referencedDisplaySetInstanceUID\r\n  );\r\n\r\n  if (!referencedDisplaySet) {\r\n    throw new Error('referencedDisplaySet is missing for SEG');\r\n  }\r\n\r\n  let { imageIds } = referencedDisplaySet;\r\n\r\n  if (!imageIds) {\r\n    // try images\r\n    const { images } = referencedDisplaySet;\r\n    imageIds = images.map(image => image.imageId);\r\n  }\r\n\r\n  // Todo: what should be defaults here\r\n  const tolerance = 0.001;\r\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\r\n    const { percentComplete } = evt.detail;\r\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\r\n      percentComplete,\r\n    });\r\n  });\r\n\r\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.createFromDICOMSegBuffer(\r\n    imageIds,\r\n    arrayBuffer,\r\n    { metadataProvider: metaData, tolerance }\r\n  );\r\n\r\n  let usedRecommendedDisplayCIELabValue = true;\r\n  results.segMetadata.data.forEach((data, i) => {\r\n    if (i > 0) {\r\n      data.rgba = data.RecommendedDisplayCIELabValue;\r\n\r\n      if (data.rgba) {\r\n        data.rgba = dicomlabToRGB(data.rgba);\r\n      } else {\r\n        usedRecommendedDisplayCIELabValue = false;\r\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!usedRecommendedDisplayCIELabValue) {\r\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\r\n    uiNotificationService.show({\r\n      title: 'DICOM SEG import',\r\n      message:\r\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\r\n      type: 'warning',\r\n      duration: 5000,\r\n    });\r\n  }\r\n\r\n  Object.assign(segDisplaySet, results);\r\n}\r\n\r\nfunction _segmentationExists(segDisplaySet) {\r\n  return cstSegmentation.state.getSegmentation(segDisplaySet.displaySetInstanceUID);\r\n}\r\n\r\nfunction getSopClassHandlerModule(params: OhifTypes.Extensions.ExtensionParams) {\r\n  const { servicesManager, extensionManager } = params;\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-seg',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\r\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\r\n  return [\r\n    {\r\n      name: 'evaluate.cornerstone.hasSegmentation',\r\n      evaluate: ({ viewportId }) => {\r\n        const segmentations = segmentationService.getSegmentationRepresentations(viewportId);\r\n        return {\r\n          disabled: !segmentations?.length,\r\n        };\r\n      },\r\n    },\r\n    {\r\n      name: 'evaluate.cornerstone.segmentation',\r\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\r\n        // Todo: we need to pass in the button section Id since we are kind of\r\n        // forcing the button to have black background since initially\r\n        // it is designed for the toolbox not the toolbar on top\r\n        // we should then branch the buttonSectionId to have different styles\r\n        const segmentations = segmentationService.getSegmentationRepresentations(viewportId);\r\n        if (!segmentations?.length) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: disabledText ?? 'No segmentations available',\r\n          };\r\n        }\r\n\r\n        const activeSegmentation = segmentationService.getActiveSegmentation(viewportId);\r\n        if (!Object.keys(activeSegmentation.segments).length) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: 'Add segment to enable this tool',\r\n          };\r\n        }\r\n\r\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\r\n\r\n        if (!toolGroup) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        if (!toolNames) {\r\n          return {\r\n            disabled: false,\r\n            // isActive: false,\r\n          };\r\n        }\r\n\r\n        const toolName = toolbarService.getToolNameForButton(button);\r\n\r\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        const isPrimaryActive = toolNames\r\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\r\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\r\n\r\n        return {\r\n          disabled: false,\r\n          isActive: isPrimaryActive,\r\n        };\r\n      },\r\n    },\r\n  ];\r\n}\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-seg';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import { id } from './id';\r\nimport React from 'react';\r\n\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getCommandsModule from './commandsModule';\r\nimport { getToolbarModule } from './getToolbarModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\r\n});\r\n\r\nconst OHIFCornerstoneSEGViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n  getCommandsModule,\r\n  getToolbarModule,\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneSEGViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n  getHangingProtocolModule,\r\n};\r\n\r\nexport default extension;\r\n","import dcmjs from 'dcmjs';\r\n\r\n/**\r\n * Converts a CIELAB color to an RGB color using the dcmjs library.\r\n * @param cielab - The CIELAB color to convert.\r\n * @returns The RGB color as an array of three integers between 0 and 255.\r\n */\r\nfunction dicomlabToRGB(cielab: number[]): number[] {\r\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\r\n\r\n  return rgb;\r\n}\r\n\r\nexport { dicomlabToRGB };\r\n"],"names":[],"sourceRoot":""}