{"version":3,"file":"extensions_dicom-pdf_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cdicom-pdf%5Csrc%5CgetSopClassHandlerModule.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cdicom-pdf%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cdicom-pdf%5Csrc%5Cindex.tsx"],"sourcesContent":["import { SOPClassHandlerId } from './id';\r\nimport { utils, Types as OhifTypes } from '@ohif/core';\r\nimport i18n from '@ohif/i18n';\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  ENCAPSULATED_PDF: '1.2.840.10008.5.1.4.1.1.104.1',\r\n};\r\n\r\nconst sopClassUids = Object.values(SOP_CLASS_UIDS);\r\n\r\nconst _getDisplaySetsFromSeries = (instances, servicesManager, extensionManager) => {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n  return instances.map(instance => {\r\n    const { Modality, SOPInstanceUID } = instance;\r\n    const { SeriesDescription = 'PDF', MIMETypeOfEncapsulatedDocument } = instance;\r\n    const { SeriesNumber, SeriesDate, SeriesInstanceUID, StudyInstanceUID, SOPClassUID } = instance;\r\n    const renderedUrl = dataSource.retrieve.directURL({\r\n      instance,\r\n      tag: 'EncapsulatedDocument',\r\n      defaultType: MIMETypeOfEncapsulatedDocument || 'application/pdf',\r\n      singlepart: 'pdf',\r\n    });\r\n\r\n    const displaySet = {\r\n      //plugin: id,\r\n      Modality,\r\n      displaySetInstanceUID: utils.guid(),\r\n      SeriesDescription,\r\n      SeriesNumber,\r\n      SeriesDate,\r\n      SOPInstanceUID,\r\n      SeriesInstanceUID,\r\n      StudyInstanceUID,\r\n      SOPClassHandlerId,\r\n      SOPClassUID,\r\n      referencedImages: null,\r\n      measurements: null,\r\n      renderedUrl: renderedUrl,\r\n      instances: [instance],\r\n      thumbnailSrc: null,\r\n      isDerivedDisplaySet: true,\r\n      isLoaded: false,\r\n      sopClassUids,\r\n      numImageFrames: 0,\r\n      numInstances: 1,\r\n      instance,\r\n      supportsWindowLevel: true,\r\n      label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t(Modality)}`,\r\n    };\r\n    return displaySet;\r\n  });\r\n};\r\n\r\nexport default function getSopClassHandlerModule(params) {\r\n  const { servicesManager, extensionManager } = params;\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-pdf',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.dicom-pdf`;\r\n\r\nexport { id, SOPClassHandlerId };\r\n","import React from 'react';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport { id } from './id.js';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstonePdfViewport');\r\n});\r\n\r\nconst OHIFCornerstonePdfViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n */\r\nconst dicomPDFExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n  /**\r\n   *\r\n   *\r\n   * @param {object} [configuration={}]\r\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\r\n   */\r\n  getViewportModule({ servicesManager, extensionManager }) {\r\n    const ExtendedOHIFCornerstonePdfViewport = props => {\r\n      return (\r\n        <OHIFCornerstonePdfViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-pdf', component: ExtendedOHIFCornerstonePdfViewport }];\r\n  },\r\n  getSopClassHandlerModule,\r\n};\r\n\r\nexport default dicomPDFExtension;\r\n"],"names":[],"sourceRoot":""}