{"version":3,"file":"extensions_measurement-tracking_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAIA;AACA;AACA;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAKA;AAAA;AAnWA;AAsPA;AAAA;AA+GA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvYA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAMA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/hBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AASA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAMA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AA/FA;AAKA;AAAA;AA4FA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAMA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AA/HA;AASA;AAAA;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAzBA;AACA;AAAA;AAiCA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAQA;AAAA;AAxBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtJA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAiJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CTrackedMeasurementsContext.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5ChydrateStructuredReport.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CmeasurementTrackingMachine.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CpromptBeginTracking.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CpromptHasDirtyAnnotations.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CpromptHydrateStructuredReport.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CpromptTrackNewSeries.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CpromptTrackNewStudy.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5CTrackedMeasurementsContext%5CpromptWrapperFunctions.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccontexts%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccustomizations%5CmeasurementTrackingPrompts.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ccustomizations%5CstudyBrowserCustomization.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5CgetContextModule.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5CgetCustomizationModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5CgetPanelModule.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5CgetViewportModule.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cindex.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cpanels%5CPanelMeasurementTableTracking.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cpanels%5CPanelStudyBrowserTracking%5CPanelStudyBrowserTracking.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cpanels%5CPanelStudyBrowserTracking%5CgetImageSrcFromImageId.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cpanels%5CPanelStudyBrowserTracking%5Cindex.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cpanels%5CPanelStudyBrowserTracking%5CuntrackSeriesModal.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cpanels%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cservices%5CTrackedMeasurementsService%5CTrackedMeasurementsService.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cservices%5CTrackedMeasurementsService%5Cindex.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cservices%5Cindex.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Ctypes%5Cindex.ts"],"sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\nimport { useAppConfig } from '@state';\r\nimport {\r\n  promptBeginTrackingWrapper,\r\n  promptHydrateStructuredReportWrapper,\r\n  promptTrackNewSeriesWrapper,\r\n  promptTrackNewStudyWrapper,\r\n  promptLabelAnnotationWrapper,\r\n  promptSaveReportWrapper,\r\n  promptHasDirtyAnnotationsWrapper,\r\n} from './promptWrapperFunctions';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    customizationService,\r\n    trackedMeasurementsService,\r\n  } = servicesManager.services as AppTypes.Services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const { viewportId: activeViewportId } = evt.data;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        activeViewportId,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn('Could not find image index for tracked measurement, using 0');\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const { viewportId: activeViewportId } = evt.data;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      // Jump to the last tracked measurement - most recent\r\n      if (!trackedMeasurements?.length) {\r\n        console.warn(\r\n          \"Didn't find any tracked measurements\",\r\n          measurements,\r\n          trackedStudy,\r\n          trackedSeries\r\n        );\r\n        return;\r\n      }\r\n      const trackedMeasurement = trackedMeasurements[trackedMeasurements.length - 1];\r\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\r\n\r\n      // update the previously stored positionPresentation with the new viewportId\r\n      // presentation so that when we put the referencedDisplaySet back in the viewport\r\n      // it will be in the correct position zoom and pan\r\n      commandsManager.runCommand('updateStoredPositionPresentation', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        referencedImageId: trackedMeasurement.referencedImageId,\r\n      });\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportId: evt.data.viewportId,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n      measurementService.setIsMeasurementDeletedIndividually(false);\r\n    },\r\n    clearDisplaySetHydratedState: (ctx, evt) => {\r\n      const { displaySetInstanceUID } = evt.data ?? evt;\r\n\r\n      const displaysets = displaySetService.getActiveDisplaySets();\r\n      displaysets?.forEach(displayset => {\r\n        if (\r\n          displayset.Modality === 'SR' &&\r\n          displayset.displaySetInstanceUID !== displaySetInstanceUID &&\r\n          displayset.isHydrated\r\n        ) {\r\n          displayset.isHydrated = false;\r\n          displayset.isLoaded = false;\r\n        }\r\n      });\r\n    },\r\n    updatedViewports: (ctx, evt) => {\r\n      const { hangingProtocolService } = servicesManager.services;\r\n      const { displaySetInstanceUID, viewportId } = evt.data ?? evt;\r\n\r\n      const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTrackingWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeriesWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudyWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptSaveReport: promptSaveReportWrapper.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReportWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    promptHasDirtyAnnotations: promptHasDirtyAnnotationsWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    promptLabelAnnotation: promptLabelAnnotationWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n    }),\r\n  });\r\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\r\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.getCustomization('measurementLabels');\r\n      return labelConfig?.labelOnMeasure;\r\n    },\r\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.getCustomization('measurementLabels');\r\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\r\n    },\r\n    isSimplifiedConfig: (ctx, evt, condMeta) => {\r\n      return appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n    },\r\n    simplifiedAndLoadSR: (ctx, evt, condMeta) => {\r\n      return (\r\n        appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED &&\r\n        evt.data.isBackupSave === false\r\n      );\r\n    },\r\n    hasDirtyAndSimplified: (ctx, evt, condMeta) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const hasDirtyMeasurements =\r\n        measurements.some(measurement => measurement.isDirty) ||\r\n        (measurements.length && measurementService.getIsMeasurementDeletedIndividually());\r\n      return (\r\n        appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED &&\r\n        hasDirtyMeasurements\r\n      );\r\n    },\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = useMemo(() => {\r\n    return Machine(machineConfiguration, machineOptions);\r\n  }, []); // Empty dependency array ensures this is only created once\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\r\n    measurementTrackingMachine\r\n  );\r\n\r\n  // Update TrackedMeasurementsService when trackedSeries changes in context\r\n  useEffect(() => {\r\n    if (trackedMeasurements?.context?.trackedSeries && trackedMeasurementsService) {\r\n      trackedMeasurementsService.updateTrackedSeries(trackedMeasurements.context.trackedSeries);\r\n    }\r\n  }, [trackedMeasurements?.context?.trackedSeries, trackedMeasurementsService]);\r\n\r\n  useEffect(() => {\r\n    // Update the state machine with the active viewport ID\r\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\r\n      activeViewportId,\r\n    });\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    const triggerPromptHydrateFlow = async () => {\r\n      if (viewports.size > 0) {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n\r\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n          return;\r\n        }\r\n\r\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n        // tracking fusion viewports yet. This should change when we do.\r\n        const { displaySetService } = servicesManager.services;\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          activeViewport.displaySetInstanceUIDs[0]\r\n        );\r\n\r\n        if (!displaySet) {\r\n          return;\r\n        }\r\n\r\n        // If this is an SR produced by our SR SOPClassHandler,\r\n        // and it hasn't been loaded yet, do that now so we\r\n        // can check if it can be rehydrated or not.\r\n        //\r\n        // Note: This happens:\r\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n        // - If the displaySet has never been hung\r\n        //\r\n        // Otherwise, the displaySet will be loaded by the useEffect handler\r\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n        // The issue here is that this handler in TrackedMeasurementsContext\r\n        // ends up occurring before the Viewport is created, so the displaySet\r\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          !displaySet.isLoaded &&\r\n          displaySet.load\r\n        ) {\r\n          await displaySet.load();\r\n        }\r\n\r\n        // Magic string\r\n        // load function added by our sopClassHandler module\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          displaySet.isRehydratable === true &&\r\n          !displaySet.isHydrated\r\n        ) {\r\n          const params = {\r\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n            viewportId: activeViewportId,\r\n          };\r\n\r\n          // Check if we should bypass the confirmation prompt\r\n          const disableConfirmationPrompts = appConfig?.disableConfirmationPrompts;\r\n\r\n          if (disableConfirmationPrompts) {\r\n            sendTrackedMeasurementsEvent('HYDRATE_SR', params);\r\n          } else {\r\n            sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', params);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    triggerPromptHydrateFlow();\r\n  }, [\r\n    trackedMeasurements,\r\n    activeViewportId,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n    appConfig,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // The command needs to be bound to the context's sendTrackedMeasurementsEvent\r\n    // so the command has to be registered in a React component.\r\n    commandsManager.registerCommand('DEFAULT', 'loadTrackedSRMeasurements', {\r\n      commandFn: props => sendTrackedMeasurementsEvent('HYDRATE_SR', props),\r\n    });\r\n  }, [commandsManager, sendTrackedMeasurementsEvent]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  appConfig: PropTypes.object,\r\n};\r\n\r\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager, commandsManager, appConfig }: withAppTypes,\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager, commandsManager, appConfig },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","export {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './TrackedMeasurementsContext.tsx';\r\n","import { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    activeViewportId: null,\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    labellingOnly: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            actions: ['setPreviousState'],\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n        UPDATE_ACTIVE_VIEWPORT_ID: {\r\n          actions: assign({\r\n            activeViewportId: (_, event) => event.activeViewportId,\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty', 'clearDisplaySetHydratedState'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        UNTRACK_ALL: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearContext',\r\n              'setIsDirtyToClean',\r\n              'clearDisplaySetHydratedState',\r\n              'clearAllMeasurements',\r\n            ],\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        CHECK_DIRTY: {\r\n          target: 'promptHasDirtyAnnotations',\r\n          cond: 'hasDirtyAndSimplified',\r\n        },\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'isSimplifiedConfig',\r\n          actions: ['clearAllMeasurements', 'clearDisplaySetHydratedState'],\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'clearDisplaySetHydratedState',\r\n              'setIsDirty',\r\n              'updatedViewports',\r\n            ],\r\n            cond: 'simplifiedAndLoadSR',\r\n          },\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptLabelAnnotation: {\r\n      invoke: {\r\n        src: 'promptLabelAnnotation',\r\n        onDone: [\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'wasLabellingOnly',\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            cond: 'wasIdle',\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'wasTrackingAndIsNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'wasTrackingAndIsNewSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            cond: 'wasTracking',\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptHasDirtyAnnotations: {\r\n      invoke: {\r\n        src: 'promptHasDirtyAnnotations',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'clearDisplaySetHydratedState',\r\n              'setIsDirty',\r\n              'updatedViewports',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          { target: 'tracking' },\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n    setPreviousState: assign((ctx, evt, meta) => {\r\n      return {\r\n        prevState: meta.state.value,\r\n      };\r\n    }),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    wasLabellingOnly: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'labellingOnly';\r\n    },\r\n    wasIdle: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'idle';\r\n    },\r\n    wasTracking: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'tracking';\r\n    },\r\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\r\n      );\r\n    },\r\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\r\n      );\r\n    },\r\n\r\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration, RESPONSE };\r\n","import i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nexport const measurementTrackingMode = {\r\n  STANDARD: 'standard',\r\n  SIMPLIFIED: 'simplified',\r\n  NONE: 'none',\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n  const appConfig = extensionManager._appConfig;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    const noTrackingMode = appConfig?.measurementTrackingMode === measurementTrackingMode.NONE;\r\n    let promptResult;\r\n\r\n    promptResult = noTrackingMode\r\n      ? RESPONSE.NO_NEVER\r\n      : standardMode\r\n        ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.beginTrackingMessage'\r\n    );\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: 'secondary',\r\n        text: i18n.t('Common:No'),\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: 'primary',\r\n        text: i18n.t('Common:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptHasDirtyAnnotations({ servicesManager }: withAppTypes, ctx, evt) {\r\n  const { viewportId, displaySetInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n\r\n    const promptResult = await _askSaveDiscardOrCancel(\r\n      uiViewportDialogService,\r\n      customizationService,\r\n      viewportId\r\n    );\r\n\r\n    resolve({\r\n      displaySetInstanceUID,\r\n      userResponse: promptResult,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardDirtyMessage'\r\n    );\r\n    const actions = [\r\n      { id: 'cancel', type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        id: 'discard-existing',\r\n        type: 'secondary',\r\n        text: 'No, discard existing',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        id: 'save-existing',\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-dirty-measurement',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'save-existing');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHasDirtyAnnotations;\r\n","import { utils } from '@ohif/extension-cornerstone';\r\n\r\nfunction promptHydrateStructuredReport({ servicesManager, commandsManager }, ctx, evt) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  const hydrateCallback = async () => {\r\n    return commandsManager.runCommand('hydrateSecondaryDisplaySet', {\r\n      displaySet: srDisplaySet,\r\n      viewportId,\r\n    });\r\n  };\r\n\r\n  // For SR we need to use the whole context\r\n  const enhancedSrDisplaySet = {\r\n    ...srDisplaySet,\r\n    displaySetInstanceUID,\r\n  };\r\n\r\n  return utils.promptHydrationDialog({\r\n    servicesManager,\r\n    viewportId,\r\n    displaySet: enhancedSrDisplaySet,\r\n    hydrateCallback,\r\n    type: 'SR',\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService, customizationService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const appConfig = extensionManager._appConfig;\r\n\r\n    const showPrompt = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    let promptResult = showPrompt\r\n      ? await _askShouldAddMeasurements(UIViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.ADD_SERIES;\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, customizationService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.trackNewSeriesMessage'\r\n    );\r\n    const actions = [\r\n      {\r\n        type: 'secondary',\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardSeriesMessage'\r\n    );\r\n\r\n    const actions = [\r\n      { type: 'secondary', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","import i18n from 'i18next';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\r\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const appConfig = extensionManager._appConfig;\r\n\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    const simplifiedMode =\r\n      appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n    let promptResult = standardMode\r\n      ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.SET_STUDY_AND_SERIES;\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult =\r\n        ctx.isDirty && (standardMode || simplifiedMode)\r\n          ? await _askSaveDiscardOrCancel(uiViewportDialogService, customizationService, viewportId)\r\n          : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.trackNewStudyMessage'\r\n    );\r\n    const actions = [\r\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: i18n.t('MeasurementTable:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardStudyMessage'\r\n    );\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","const promptBeginTrackingWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptBeginTracking = customizationService.getCustomization(\r\n    'measurement.promptBeginTracking'\r\n  );\r\n  return promptBeginTracking({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptHydrateStructuredReportWrapper = (\r\n  { servicesManager, extensionManager, commandsManager, appConfig },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptHydrateStructuredReport = customizationService.getCustomization(\r\n    'measurement.promptHydrateStructuredReport'\r\n  );\r\n  return promptHydrateStructuredReport(\r\n    { servicesManager, extensionManager, commandsManager, appConfig },\r\n    ctx,\r\n    evt\r\n  );\r\n};\r\n\r\nconst promptTrackNewSeriesWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptTrackNewSeries = customizationService.getCustomization(\r\n    'measurement.promptTrackNewSeries'\r\n  );\r\n  return promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptTrackNewStudyWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptTrackNewStudy = customizationService.getCustomization(\r\n    'measurement.promptTrackNewStudy'\r\n  );\r\n  return promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptLabelAnnotationWrapper = ({ servicesManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptLabelAnnotation = customizationService.getCustomization(\r\n    'measurement.promptLabelAnnotation'\r\n  );\r\n  return promptLabelAnnotation({ servicesManager }, ctx, evt);\r\n};\r\n\r\nconst promptSaveReportWrapper = (\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptSaveReport = customizationService.getCustomization('measurement.promptSaveReport');\r\n  return promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptHasDirtyAnnotationsWrapper = (\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptHasDirtyAnnotations = customizationService.getCustomization(\r\n    'measurement.promptHasDirtyAnnotations'\r\n  );\r\n  return promptHasDirtyAnnotations(\r\n    { servicesManager, commandsManager, extensionManager },\r\n    ctx,\r\n    evt\r\n  );\r\n};\r\n\r\nexport {\r\n  promptBeginTrackingWrapper,\r\n  promptHydrateStructuredReportWrapper,\r\n  promptTrackNewSeriesWrapper,\r\n  promptTrackNewStudyWrapper,\r\n  promptLabelAnnotationWrapper,\r\n  promptSaveReportWrapper,\r\n  promptHasDirtyAnnotationsWrapper,\r\n};\r\n","export {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './TrackedMeasurementsContext';\r\n","import promptBeginTracking from '../contexts/TrackedMeasurementsContext/promptBeginTracking';\r\nimport promptHasDirtyAnnotations from '../contexts/TrackedMeasurementsContext/promptHasDirtyAnnotations';\r\nimport promptHydrateStructuredReport from '../contexts/TrackedMeasurementsContext/promptHydrateStructuredReport';\r\nimport promptTrackNewSeries from '../contexts/TrackedMeasurementsContext/promptTrackNewSeries';\r\nimport promptTrackNewStudy from '../contexts/TrackedMeasurementsContext/promptTrackNewStudy';\r\nimport { promptLabelAnnotation, promptSaveReport } from '@ohif/extension-default';\r\n\r\nexport default {\r\n  'measurement.promptBeginTracking': promptBeginTracking,\r\n  'measurement.promptHydrateStructuredReport': promptHydrateStructuredReport,\r\n  'measurement.promptTrackNewSeries': promptTrackNewSeries,\r\n  'measurement.promptTrackNewStudy': promptTrackNewStudy,\r\n  'measurement.promptLabelAnnotation': promptLabelAnnotation,\r\n  'measurement.promptSaveReport': promptSaveReport,\r\n  'measurement.promptHasDirtyAnnotations': promptHasDirtyAnnotations,\r\n};\r\n","import { measurementTrackingMode } from '../contexts/TrackedMeasurementsContext/promptBeginTracking';\r\n\r\ntype CheckHasDirtyAndSimplifiedModeProps = {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  appConfig: AppTypes.Config;\r\n  displaySetInstanceUID: string;\r\n};\r\n\r\nconst onDoubleClickHandler = {\r\n  callbacks: [\r\n    ({ activeViewportId, servicesManager, isHangingProtocolLayout, appConfig }) =>\r\n      async displaySetInstanceUID => {\r\n        const { hangingProtocolService, viewportGridService, uiNotificationService } =\r\n          servicesManager.services;\r\n        let updatedViewports = [];\r\n        const viewportId = activeViewportId;\r\n        const haveDirtyMeasurementsInSimplifiedMode = checkHasDirtyAndSimplifiedMode({\r\n          servicesManager,\r\n          appConfig,\r\n          displaySetInstanceUID,\r\n        });\r\n\r\n        try {\r\n          if (!haveDirtyMeasurementsInSimplifiedMode) {\r\n            updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n              viewportId,\r\n              displaySetInstanceUID,\r\n              isHangingProtocolLayout\r\n            );\r\n            viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n          }\r\n        } catch (error) {\r\n          console.warn(error);\r\n          uiNotificationService.show({\r\n            title: 'Thumbnail Double Click',\r\n            message: 'The selected display sets could not be added to the viewport.',\r\n            type: 'error',\r\n            duration: 3000,\r\n          });\r\n        }\r\n      },\r\n  ],\r\n};\r\n\r\nconst customOnDropHandlerCallback = async props => {\r\n  const handled = checkHasDirtyAndSimplifiedMode(props);\r\n  return Promise.resolve({ handled });\r\n};\r\n\r\nconst checkHasDirtyAndSimplifiedMode = (props: CheckHasDirtyAndSimplifiedModeProps) => {\r\n  const { servicesManager, appConfig, displaySetInstanceUID } = props;\r\n  const simplifiedMode = appConfig.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n  const { measurementService, displaySetService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n  const haveDirtyMeasurements =\r\n    measurements.some(m => m.isDirty) ||\r\n    (measurements.length && measurementService.getIsMeasurementDeletedIndividually());\r\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  const hasDirtyAndSimplifiedMode =\r\n    displaySet.Modality === 'SR' && simplifiedMode && haveDirtyMeasurements;\r\n  return hasDirtyAndSimplifiedMode;\r\n};\r\n\r\nexport { onDoubleClickHandler, customOnDropHandlerCallback };\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  });\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import measurementTrackingPrompts from './customizations/measurementTrackingPrompts';\r\n\r\nexport default function getCustomizationModule() {\r\n  return [\r\n    {\r\n      name: 'default',\r\n      value: { ...measurementTrackingPrompts },\r\n    },\r\n  ];\r\n}\r\n","import { Types } from '@ohif/core';\r\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\r\nimport i18n from 'i18next';\r\nimport React from 'react';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: i18n.t('SidePanel:Studies'),\r\n      component: props => <PanelStudyBrowserTracking {...props} />,\r\n    },\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: i18n.t('SidePanel:Measurements'),\r\n      component: props => (\r\n        <PanelMeasurementTableTracking\r\n          {...props}\r\n          key=\"trackedMeasurements-panel\"\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\nimport { utils } from '@ohif/extension-cornerstone';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n      isReferenceViewable: props => utils.isReferenceViewable({ ...props, servicesManager }),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\nimport { measurementTrackingMode } from './contexts/TrackedMeasurementsContext/promptBeginTracking';\r\nimport getCustomizationModule from './getCustomizationModule';\r\nimport {\r\n  onDoubleClickHandler,\r\n  customOnDropHandlerCallback,\r\n} from './customizations/studyBrowserCustomization';\r\nimport { TrackedMeasurementsService } from './services';\r\n// Import types to ensure they're included in the build\r\nimport './types';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n\r\n  /**\r\n   * Service configuration\r\n   */\r\n  preRegistration({ servicesManager }) {\r\n    servicesManager.registerService(TrackedMeasurementsService.REGISTRATION);\r\n  },\r\n\r\n  onModeEnter({ servicesManager }) {\r\n    const { customizationService, toolbarService, trackedMeasurementsService } =\r\n      servicesManager.services;\r\n\r\n    toolbarService.registerEventForToolbarUpdate(trackedMeasurementsService, [\r\n      trackedMeasurementsService.EVENTS.TRACKED_SERIES_CHANGED,\r\n      trackedMeasurementsService.EVENTS.SERIES_ADDED,\r\n      trackedMeasurementsService.EVENTS.SERIES_REMOVED,\r\n      trackedMeasurementsService.EVENTS.TRACKING_ENABLED,\r\n      trackedMeasurementsService.EVENTS.TRACKING_DISABLED,\r\n    ]);\r\n\r\n    customizationService.setCustomizations({\r\n      'studyBrowser.thumbnailDoubleClickCallback': {\r\n        $set: onDoubleClickHandler,\r\n      },\r\n      customOnDropHandler: {\r\n        $set: customOnDropHandlerCallback,\r\n      },\r\n    });\r\n  },\r\n  getCustomizationModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n\r\nexport { measurementTrackingMode };\r\n","import React from 'react';\r\nimport { useSystem, utils } from '@ohif/core';\r\nimport { AccordionTrigger, MeasurementTable, ScrollArea, useViewportGrid } from '@ohif/ui-next';\r\nimport {\r\n  PanelMeasurement,\r\n  StudyMeasurements,\r\n  StudySummaryFromMetadata,\r\n  AccordionGroup,\r\n  StudyMeasurementsActions,\r\n  MeasurementsOrAdditionalFindings,\r\n} from '@ohif/extension-cornerstone';\r\n\r\nimport { useTrackedMeasurements } from '../getContextModule';\r\nimport { UntrackSeriesModal } from './PanelStudyBrowserTracking/untrackSeriesModal';\r\n\r\nconst { filterAnd, filterPlanarMeasurement, filterMeasurementsBySeriesUID } =\r\n  utils.MeasurementFilters;\r\n\r\nfunction PanelMeasurementTableTracking(props) {\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { servicesManager } = useSystem();\r\n  const { measurementService, uiModalService } = servicesManager.services;\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const measurementFilter = trackedStudy\r\n    ? filterAnd(filterPlanarMeasurement, filterMeasurementsBySeriesUID(trackedSeries))\r\n    : filterPlanarMeasurement;\r\n\r\n  const onUntrackConfirm = () => {\r\n    sendTrackedMeasurementsEvent('UNTRACK_ALL', {});\r\n  };\r\n\r\n  const onDelete = () => {\r\n    const hasDirtyMeasurements = measurementService\r\n      .getMeasurements()\r\n      .some(measurement => measurement.isDirty);\r\n    hasDirtyMeasurements\r\n      ? uiModalService.show({\r\n          title: 'Untrack Study',\r\n          content: UntrackSeriesModal,\r\n          contentProps: {\r\n            onConfirm: onUntrackConfirm,\r\n            message: 'Are you sure you want to untrack study and delete all measurements?',\r\n          },\r\n        })\r\n      : onUntrackConfirm();\r\n  };\r\n\r\n  const EmptyComponent = () => (\r\n    <div data-cy=\"trackedMeasurements-panel\">\r\n      <MeasurementTable\r\n        title=\"Measurements\"\r\n        isExpanded={false}\r\n      >\r\n        <MeasurementTable.Body />\r\n      </MeasurementTable>\r\n    </div>\r\n  );\r\n\r\n  const actions = {\r\n    createSR: ({ StudyInstanceUID }) => {\r\n      sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n        viewportId: viewportGrid.activeViewportId,\r\n        isBackupSave: true,\r\n        StudyInstanceUID,\r\n        measurementFilter,\r\n      });\r\n    },\r\n    onDelete,\r\n  };\r\n\r\n  const Header = props => (\r\n    <AccordionTrigger\r\n      asChild={true}\r\n      className=\"px-0\"\r\n    >\r\n      <div data-cy=\"TrackingHeader\">\r\n        <StudySummaryFromMetadata\r\n          {...props}\r\n          actions={actions}\r\n        />\r\n      </div>\r\n    </AccordionTrigger>\r\n  );\r\n\r\n  return (\r\n    <ScrollArea>\r\n      <div data-cy=\"trackedMeasurements-panel\">\r\n        <PanelMeasurement\r\n          measurementFilter={measurementFilter}\r\n          emptyComponent={EmptyComponent}\r\n          sourceChildren={props.children}\r\n        >\r\n          <StudyMeasurements grouping={props.grouping}>\r\n            <AccordionGroup.Trigger\r\n              key=\"trackingMeasurementsHeader\"\r\n              asChild={true}\r\n            >\r\n              <Header key=\"trackingHeadChild\" />\r\n            </AccordionGroup.Trigger>\r\n            <MeasurementsOrAdditionalFindings\r\n              key=\"measurementsOrAdditionalFindings\"\r\n              activeStudyUID={trackedStudy}\r\n              customHeader={StudyMeasurementsActions}\r\n              measurementFilter={measurementFilter}\r\n              actions={actions}\r\n            />\r\n          </StudyMeasurements>\r\n        </PanelMeasurement>\r\n      </div>\r\n    </ScrollArea>\r\n  );\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSystem } from '@ohif/core';\r\nimport PanelStudyBrowser from '@ohif/extension-default/src/Panels/StudyBrowser/PanelStudyBrowser';\r\nimport { UntrackSeriesModal } from './untrackSeriesModal';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'RTSTRUCT', 'RTPLAN', 'RTDOSE', 'PMAP'];\r\n\r\n/**\r\n * Panel component for the Study Browser with tracking capabilities\r\n */\r\nexport default function PanelStudyBrowserTracking({\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const { servicesManager } = useSystem();\r\n  const { displaySetService, uiModalService, measurementService, viewportGridService } =\r\n    servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const checkDirtyMeasurements = displaySetInstanceUID => {\r\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n    if (displaySet.Modality === 'SR') {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      sendTrackedMeasurementsEvent('CHECK_DIRTY', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUID: displaySetInstanceUID,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const subscriptionOndropFired = viewportGridService.subscribe(\r\n      viewportGridService.EVENTS.VIEWPORT_ONDROP_HANDLED,\r\n      ({ eventData }) => {\r\n        checkDirtyMeasurements(eventData.displaySetInstanceUID);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      subscriptionOndropFired.unsubscribe();\r\n    };\r\n  }, []);\r\n  const onClickUntrack = displaySetInstanceUID => {\r\n    const onConfirm = () => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n      });\r\n      const measurements = measurementService.getMeasurements();\r\n      measurements.forEach(m => {\r\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\r\n          measurementService.remove(m.uid);\r\n        }\r\n      });\r\n    };\r\n\r\n    uiModalService.show({\r\n      title: 'Untrack Series',\r\n      content: UntrackSeriesModal,\r\n      contentProps: {\r\n        onConfirm,\r\n        message: 'Are you sure you want to untrack this series?',\r\n      },\r\n    });\r\n  };\r\n\r\n  // Custom mapping function to add tracking data to display sets\r\n  const mapDisplaySetsWithTracking = (\r\n    displaySets,\r\n    displaySetLoadingState,\r\n    thumbnailImageSrcMap,\r\n    viewports\r\n  ) => {\r\n    const thumbnailDisplaySets = [];\r\n    const thumbnailNoImageDisplaySets = [];\r\n    displaySets\r\n      .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n      .forEach(ds => {\r\n        const { thumbnailSrc, displaySetInstanceUID } = ds;\r\n        const componentType = getComponentType(ds);\r\n\r\n        const array =\r\n          componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n        const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\r\n\r\n        array.push({\r\n          displaySetInstanceUID,\r\n          description: ds.SeriesDescription || '',\r\n          seriesNumber: ds.SeriesNumber,\r\n          modality: ds.Modality,\r\n          seriesDate: ds.SeriesDate ? new Date(ds.SeriesDate).toLocaleDateString() : '',\r\n          numInstances: ds.numImageFrames,\r\n          loadingProgress,\r\n          countIcon: ds.countIcon,\r\n          messages: ds.messages,\r\n          StudyInstanceUID: ds.StudyInstanceUID,\r\n          componentType,\r\n          imageSrc: thumbnailSrc || thumbnailImageSrcMap[displaySetInstanceUID],\r\n          dragData: {\r\n            type: 'displayset',\r\n            displaySetInstanceUID,\r\n          },\r\n          isTracked: trackedSeries.includes(ds.SeriesInstanceUID),\r\n          isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n        });\r\n      });\r\n\r\n    return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n  };\r\n\r\n  // Override component type to use tracking specific components\r\n  const getComponentType = ds => {\r\n    if (\r\n      thumbnailNoImageModalities.includes(ds.Modality) ||\r\n      ds.unsupported ||\r\n      ds.thumbnailSrc === null\r\n    ) {\r\n      return 'thumbnailNoImage';\r\n    }\r\n    return 'thumbnailTracked';\r\n  };\r\n\r\n  return (\r\n    <PanelStudyBrowser\r\n      getImageSrc={getImageSrc}\r\n      getStudiesForPatientByMRN={getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={requestDisplaySetCreationForStudy}\r\n      dataSource={dataSource}\r\n      customMapDisplaySets={mapDisplaySetsWithTracking}\r\n      onClickUntrack={onClickUntrack}\r\n      onDoubleClickThumbnailHandlerCallBack={checkDirtyMeasurements}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","import React, { useCallback } from 'react';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport { requestDisplaySetCreationForStudy } from '@ohif/extension-default';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking() {\r\n  const { extensionManager } = useSystem();\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = useCallback(\r\n    _createGetImageSrcFromImageIdFn(extensionManager),\r\n    []\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React from 'react';\r\nimport { FooterAction } from '@ohif/ui-next';\r\n\r\nexport function UntrackSeriesModal({ hide, onConfirm, message }) {\r\n  return (\r\n    <div className=\"text-foreground text-[13px]\">\r\n      <div>\r\n        <p>{message}</p>\r\n        <p className=\"mt-2\">\r\n          This action cannot be undone and will delete all your existing measurements.\r\n        </p>\r\n      </div>\r\n      <FooterAction className=\"mt-4\">\r\n        <FooterAction.Right>\r\n          <FooterAction.Secondary onClick={hide}>Cancel</FooterAction.Secondary>\r\n          <FooterAction.Primary\r\n            onClick={() => {\r\n              onConfirm();\r\n              hide();\r\n            }}\r\n          >\r\n            Untrack\r\n          </FooterAction.Primary>\r\n        </FooterAction.Right>\r\n      </FooterAction>\r\n    </div>\r\n  );\r\n}\r\n","import PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport PanelMeasurementTableTracking from './PanelMeasurementTableTracking';\r\n\r\nexport { PanelMeasurementTableTracking, PanelStudyBrowserTracking };\r\n","import { PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  TRACKED_SERIES_CHANGED: 'event::trackedmeasurements:trackedserieschanged',\r\n  SERIES_ADDED: 'event::trackedmeasurements:seriesadded',\r\n  SERIES_REMOVED: 'event::trackedmeasurements:seriesremoved',\r\n  TRACKING_ENABLED: 'event::trackedmeasurements:trackingenabled',\r\n  TRACKING_DISABLED: 'event::trackedmeasurements:trackingdisabled',\r\n};\r\n\r\n/**\r\n * Service class for accessing tracked measurements data.\r\n * This service provides a robust way to access tracked series information\r\n * from anywhere in the application, including outside of React components.\r\n */\r\nexport class TrackedMeasurementsService extends PubSubService {\r\n  public static readonly REGISTRATION = {\r\n    name: 'trackedMeasurementsService',\r\n    altName: 'TrackedMeasurementsService',\r\n    create: ({ configuration = {} }) => {\r\n      return new TrackedMeasurementsService();\r\n    },\r\n  };\r\n\r\n  private _trackedSeries: string[] = [];\r\n\r\n  constructor() {\r\n    super(EVENTS);\r\n  }\r\n\r\n  /**\r\n   * Updates the tracked series and notifies subscribers\r\n   * @param trackedSeries Array of series UIDs being tracked\r\n   */\r\n  public updateTrackedSeries(trackedSeries: string[]): void {\r\n    if (!trackedSeries) {\r\n      trackedSeries = [];\r\n    }\r\n\r\n    const hasChanged =\r\n      this._trackedSeries.length !== trackedSeries.length ||\r\n      this._trackedSeries.some((seriesUID, index) => seriesUID !== trackedSeries[index]);\r\n\r\n    if (hasChanged) {\r\n      const oldSeries = [...this._trackedSeries];\r\n      this._trackedSeries = [...trackedSeries];\r\n\r\n      const wasEmpty = oldSeries.length === 0;\r\n      const isEmpty = trackedSeries.length === 0;\r\n\r\n      if (wasEmpty && !isEmpty) {\r\n        this._broadcastEvent(EVENTS.TRACKING_ENABLED, {\r\n          trackedSeries: this.getTrackedSeries(),\r\n        });\r\n      } else if (!wasEmpty && isEmpty) {\r\n        this._broadcastEvent(EVENTS.TRACKING_DISABLED, {\r\n          trackedSeries: this.getTrackedSeries(),\r\n        });\r\n      }\r\n\r\n      this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n        trackedSeries: this.getTrackedSeries(),\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a single series to tracking\r\n   * @param seriesInstanceUID Series instance UID to add to tracking\r\n   */\r\n  public addTrackedSeries(seriesInstanceUID: string): void {\r\n    if (!seriesInstanceUID || this.isSeriesTracked(seriesInstanceUID)) {\r\n      return;\r\n    }\r\n\r\n    const wasEmpty = this._trackedSeries.length === 0;\r\n    this._trackedSeries = [...this._trackedSeries, seriesInstanceUID];\r\n\r\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\r\n      seriesInstanceUID,\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n\r\n    if (wasEmpty) {\r\n      this._broadcastEvent(EVENTS.TRACKING_ENABLED, {\r\n        trackedSeries: this.getTrackedSeries(),\r\n      });\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes a single series from tracking\r\n   * @param seriesInstanceUID Series instance UID to remove from tracking\r\n   */\r\n  public removeTrackedSeries(seriesInstanceUID: string): void {\r\n    if (!seriesInstanceUID || !this.isSeriesTracked(seriesInstanceUID)) {\r\n      return;\r\n    }\r\n\r\n    this._trackedSeries = this._trackedSeries.filter(uid => uid !== seriesInstanceUID);\r\n\r\n    this._broadcastEvent(EVENTS.SERIES_REMOVED, {\r\n      seriesInstanceUID,\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n\r\n    if (this._trackedSeries.length === 0) {\r\n      this._broadcastEvent(EVENTS.TRACKING_DISABLED, {\r\n        trackedSeries: this.getTrackedSeries(),\r\n      });\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the currently tracked series\r\n   * @returns Array of series UIDs being tracked\r\n   */\r\n  public getTrackedSeries(): string[] {\r\n    return [...this._trackedSeries];\r\n  }\r\n\r\n  /**\r\n   * Checks if a specific series is being tracked\r\n   * @param seriesInstanceUID Series instance UID to check\r\n   * @returns boolean indicating if series is tracked\r\n   */\r\n  public isSeriesTracked(seriesInstanceUID: string): boolean {\r\n    return this._trackedSeries.includes(seriesInstanceUID);\r\n  }\r\n\r\n  /**\r\n   * Resets the service state\r\n   */\r\n  public reset(): void {\r\n    const wasTracking = this._trackedSeries.length > 0;\r\n    this._trackedSeries = [];\r\n\r\n    if (wasTracking) {\r\n      this._broadcastEvent(EVENTS.TRACKING_DISABLED, {\r\n        trackedSeries: [],\r\n      });\r\n\r\n      this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n        trackedSeries: [],\r\n      });\r\n    }\r\n\r\n    super.reset();\r\n  }\r\n\r\n  /**\r\n   * Checks if any series are being tracked\r\n   * @returns boolean indicating if tracking is active\r\n   */\r\n  public isTrackingEnabled(): boolean {\r\n    return this._trackedSeries.length > 0;\r\n  }\r\n}\r\n\r\nexport default TrackedMeasurementsService;\r\n","export * from './TrackedMeasurementsService';\r\n","export * from './TrackedMeasurementsService';\r\n","export * from './AppTypes';\r\n"],"names":[],"sourceRoot":""}