{"version":3,"file":"extensions_measurement-tracking_src_viewports_TrackedCornerstoneViewport_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAIA;AAAA;AAtMA;AAeA;AAAA;AAyLA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AAEA;AAAA;AAAA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Cmeasurement-tracking%5Csrc%5Cviewports%5CTrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ViewportActionArrows } from '@ohif/ui-next';\r\nimport { OHIFCornerstoneViewport } from '@ohif/extension-cornerstone';\r\n\r\nimport { annotation } from '@cornerstonejs/tools';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\nimport { BaseVolumeViewport, Enums } from '@cornerstonejs/core';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nfunction TrackedCornerstoneViewport(\r\n  props: withAppTypes<{ viewportId: string; displaySets: AppTypes.DisplaySet[] }>\r\n) {\r\n  const { servicesManager } = useSystem();\r\n  const { displaySets, viewportId } = props as {\r\n    displaySets: AppTypes.DisplaySet[];\r\n    viewportId: string;\r\n    servicesManager: AppTypes.Services;\r\n  };\r\n\r\n  const { measurementService, cornerstoneViewportService, viewportGridService, toolbarService } =\r\n    servicesManager.services;\r\n\r\n  // Todo: handling more than one displaySet on the same viewport\r\n  const displaySet = displaySets[0];\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\r\n  const [viewportElem, setViewportElem] = useState(null);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const { SeriesInstanceUID } = displaySet;\r\n\r\n  const updateIsTracked = useCallback(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (viewport instanceof BaseVolumeViewport) {\r\n      // A current image id will only exist for volume viewports that can have measurements tracked.\r\n      // Typically these are those volume viewports for the series of acquisition.\r\n      const currentImageId = viewport?.getCurrentImageId();\r\n\r\n      if (!currentImageId) {\r\n        if (isTracked) {\r\n          setIsTracked(false);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n      setIsTracked(!isTracked);\r\n    }\r\n  }, [isTracked, trackedMeasurements, viewportId, SeriesInstanceUID]);\r\n\r\n  const onElementEnabled = useCallback(\r\n    evt => {\r\n      if (evt.detail.element !== viewportElem) {\r\n        // The VOLUME_VIEWPORT_NEW_VOLUME event allows updateIsTracked to reliably fetch the image id for a volume viewport.\r\n        evt.detail.element?.addEventListener(\r\n          Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n          updateIsTracked\r\n        );\r\n        setViewportElem(evt.detail.element);\r\n      }\r\n    },\r\n    [updateIsTracked, viewportElem]\r\n  );\r\n\r\n  const onElementDisabled = useCallback(() => {\r\n    viewportElem?.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, updateIsTracked);\r\n  }, [updateIsTracked, viewportElem]);\r\n\r\n  useEffect(updateIsTracked, [updateIsTracked]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        updateIsTracked();\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [updateIsTracked, viewportId]);\r\n\r\n  useEffect(() => {\r\n    if (isTracked) {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {\r\n        ReferenceLines: {\r\n          lineDash: '4,4',\r\n        },\r\n        global: {\r\n          lineDash: '',\r\n        },\r\n      });\r\n\r\n      cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n      return;\r\n    }\r\n\r\n    annotation.config.style.setViewportToolStyles(viewportId, {\r\n      global: {\r\n        lineDash: '4,4',\r\n      },\r\n    });\r\n\r\n    cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n    return () => {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {});\r\n    };\r\n  }, [isTracked]);\r\n\r\n  /**\r\n   * The effect for listening to measurement service measurement added events\r\n   * and in turn firing an event to update the measurement tracking state machine.\r\n   * The TrackedCornerstoneViewport is the best place for this because when\r\n   * a measurement is added, at least one TrackedCornerstoneViewport will be in\r\n   * the DOM and thus can react to the events fired.\r\n   */\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, ({ source, measurement }) => {\r\n          const { activeViewportId } = viewportGridService.getState();\r\n\r\n          // Each TrackedCornerstoneViewport receives the MeasurementService's events.\r\n          // Only send the tracked measurements event for the active viewport to avoid\r\n          // sending it more than once.\r\n          if (viewportId === activeViewportId) {\r\n            const {\r\n              referenceStudyUID: StudyInstanceUID,\r\n              referenceSeriesUID: SeriesInstanceUID,\r\n              uid: measurementId,\r\n              toolName,\r\n            } = measurement;\r\n\r\n            sendTrackedMeasurementsEvent('SET_DIRTY', { SeriesInstanceUID });\r\n            sendTrackedMeasurementsEvent('TRACK_SERIES', {\r\n              viewportId,\r\n              StudyInstanceUID,\r\n              SeriesInstanceUID,\r\n              measurementId,\r\n              toolName,\r\n            });\r\n          }\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, sendTrackedMeasurementsEvent, viewportId, viewportGridService]);\r\n\r\n  const switchMeasurement = useCallback(\r\n    direction => {\r\n      const newTrackedMeasurementUID = _getNextMeasurementUID(\r\n        direction,\r\n        servicesManager,\r\n        trackedMeasurementUID,\r\n        trackedMeasurements\r\n      );\r\n\r\n      if (!newTrackedMeasurementUID) {\r\n        return;\r\n      }\r\n\r\n      setTrackedMeasurementUID(newTrackedMeasurementUID);\r\n\r\n      measurementService.jumpToMeasurement(viewportId, newTrackedMeasurementUID);\r\n    },\r\n    [measurementService, servicesManager, trackedMeasurementUID, trackedMeasurements, viewportId]\r\n  );\r\n\r\n  const getCornerstoneViewport = () => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        {...props}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n          onElementEnabled(evt);\r\n        }}\r\n        onElementDisabled={onElementDisabled}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n      {getCornerstoneViewport()}\r\n    </div>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getNextMeasurementUID(\r\n  direction,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { measurementService, viewportGridService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n\r\n  const { activeViewportId, viewports } = viewportGridService.getState();\r\n  const { displaySetInstanceUIDs: activeViewportDisplaySetInstanceUIDs } =\r\n    viewports.get(activeViewportId);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for the series of the\r\n  // active viewport.\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(\r\n    m =>\r\n      trackedSeries.includes(m.referenceSeriesUID) &&\r\n      activeViewportDisplaySetInstanceUIDs.includes(m.displaySetInstanceUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const uids = filteredMeasurements.map(fm => fm.uid);\r\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    measurementIndex += direction;\r\n    if (measurementIndex < 0) {\r\n      measurementIndex = measurementCount - 1;\r\n    } else if (measurementIndex === measurementCount) {\r\n      measurementIndex = 0;\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = uids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nconst _getArrowsComponent = (isTracked, switchMeasurement, isActiveViewport) => {\r\n  if (!isTracked) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ViewportActionArrows\r\n      onArrowsClick={direction => switchMeasurement(direction)}\r\n      className={isActiveViewport ? 'visible' : 'invisible group-hover/pane:visible'}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TrackedCornerstoneViewport;\r\n"],"names":[],"sourceRoot":""}