{"version":3,"file":"modes_microscopy_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AASA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzsources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cmodes%5Cmicroscopy%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cmodes%5Cmicroscopy%5Csrc%5Cindex.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cmodes%5Cmicroscopy%5Csrc%5CtoolbarButtons.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import i18n from 'i18next';\r\n\r\nimport { id } from './id';\r\nimport toolbarButtons from './toolbarButtons';\r\n\r\nconst ohif = {\r\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\r\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\r\n  hangingProtocols: '@ohif/extension-default.hangingProtocolModule.default',\r\n  leftPanel: '@ohif/extension-default.panelModule.seriesList',\r\n  rightPanel: '@ohif/extension-dicom-microscopy.panelModule.measure',\r\n};\r\n\r\nexport const cornerstone = {\r\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\r\n};\r\n\r\nconst dicomvideo = {\r\n  sopClassHandler: '@ohif/extension-dicom-video.sopClassHandlerModule.dicom-video',\r\n  viewport: '@ohif/extension-dicom-video.viewportModule.dicom-video',\r\n};\r\n\r\nconst dicompdf = {\r\n  sopClassHandler: '@ohif/extension-dicom-pdf.sopClassHandlerModule.dicom-pdf',\r\n  viewport: '@ohif/extension-dicom-pdf.viewportModule.dicom-pdf',\r\n};\r\n\r\nconst extensionDependencies = {\r\n  // Can derive the versions at least process.env.from npm_package_version\r\n  '@ohif/extension-default': '^3.0.0',\r\n  '@ohif/extension-cornerstone': '^3.0.0',\r\n  '@ohif/extension-cornerstone-dicom-sr': '^3.0.0',\r\n  '@ohif/extension-dicom-pdf': '^3.0.1',\r\n  '@ohif/extension-dicom-video': '^3.0.1',\r\n  '@ohif/extension-dicom-microscopy': '^3.0.0',\r\n};\r\n\r\nfunction modeFactory({ modeConfiguration }) {\r\n  return {\r\n    id,\r\n    routeName: 'microscopy',\r\n    displayName: i18n.t('Modes:Microscopy'),\r\n\r\n    /**\r\n     * Lifecycle hooks\r\n     */\r\n    onModeEnter: ({ servicesManager }: withAppTypes) => {\r\n      const { toolbarService } = servicesManager.services;\r\n\r\n      toolbarService.register(toolbarButtons);\r\n      toolbarService.updateSection('primary', ['MeasurementTools', 'dragPan', 'TagBrowser']);\r\n\r\n      toolbarService.updateSection('MeasurementTools', [\r\n        'line',\r\n        'point',\r\n        'polygon',\r\n        'circle',\r\n        'box',\r\n        'freehandpolygon',\r\n        'freehandline',\r\n      ]);\r\n    },\r\n\r\n    onModeExit: ({ servicesManager }: withAppTypes) => {\r\n      const { toolbarService, uiDialogService, uiModalService } = servicesManager.services;\r\n\r\n      uiDialogService.hideAll();\r\n      uiModalService.hide();\r\n      toolbarService.reset();\r\n    },\r\n\r\n    validationTags: {\r\n      study: [],\r\n      series: [],\r\n    },\r\n\r\n    isValidMode: ({ modalities }) => {\r\n      const modalities_list = modalities.split('\\\\');\r\n\r\n      return {\r\n        valid: modalities_list.includes('SM'),\r\n        description: 'Microscopy mode only supports the SM modality',\r\n      };\r\n    },\r\n\r\n    routes: [\r\n      {\r\n        path: 'microscopy',\r\n        layoutTemplate: ({ location, servicesManager }) => {\r\n          return {\r\n            id: ohif.layout,\r\n            props: {\r\n              leftPanels: [ohif.leftPanel],\r\n              leftPanelResizable: true,\r\n              leftPanelClosed: true, // we have problem with rendering thumbnails for microscopy images\r\n              // rightPanelClosed: true, // we do not have the save microscopy measurements yet\r\n              rightPanels: [ohif.rightPanel],\r\n              rightPanelResizable: true,\r\n              viewports: [\r\n                {\r\n                  namespace: '@ohif/extension-dicom-microscopy.viewportModule.microscopy-dicom',\r\n                  displaySetsToDisplay: [\r\n                    // Share the sop class handler with cornerstone version of it\r\n                    '@ohif/extension-cornerstone.sopClassHandlerModule.DicomMicroscopySopClassHandler',\r\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\r\n                  ],\r\n                },\r\n                {\r\n                  namespace: dicomvideo.viewport,\r\n                  displaySetsToDisplay: [dicomvideo.sopClassHandler],\r\n                },\r\n                {\r\n                  namespace: dicompdf.viewport,\r\n                  displaySetsToDisplay: [dicompdf.sopClassHandler],\r\n                },\r\n              ],\r\n            },\r\n          };\r\n        },\r\n      },\r\n    ],\r\n    extensions: extensionDependencies,\r\n    hangingProtocol: 'default',\r\n    sopClassHandlers: [\r\n      '@ohif/extension-cornerstone.sopClassHandlerModule.DicomMicroscopySopClassHandler',\r\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\r\n      dicomvideo.sopClassHandler,\r\n      dicompdf.sopClassHandler,\r\n    ],\r\n    ...modeConfiguration,\r\n  };\r\n}\r\n\r\nconst mode = {\r\n  id,\r\n  modeFactory,\r\n  extensionDependencies,\r\n};\r\n\r\nexport default mode;\r\n","import type { Button } from '@ohif/core/types';\r\n\r\nexport const setToolActiveToolbar = {\r\n  commandName: 'setToolActive',\r\n  commandOptions: {\r\n    toolName: 'line',\r\n  },\r\n  context: 'MICROSCOPY',\r\n};\r\n\r\nconst toolbarButtons: Button[] = [\r\n  {\r\n    id: 'MeasurementTools',\r\n    uiType: 'ohif.toolButtonList',\r\n    props: {\r\n      buttonSection: true,\r\n    },\r\n  },\r\n  {\r\n    id: 'line',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-length',\r\n      label: 'Line',\r\n      tooltip: 'Line',\r\n      commands: setToolActiveToolbar,\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'point',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-point',\r\n      label: 'Point',\r\n      tooltip: 'Point Tool',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'point' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'polygon',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-polygon',\r\n      label: 'Polygon',\r\n      tooltip: 'Polygon Tool',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'polygon' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'circle',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-circle',\r\n      label: 'Circle',\r\n      tooltip: 'Circle Tool',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'circle' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'box',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-rectangle',\r\n      label: 'Box',\r\n      tooltip: 'Box Tool',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'box' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'freehandpolygon',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-freehand-polygon',\r\n      label: 'Freehand Polygon',\r\n      tooltip: 'Freehand Polygon Tool',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'freehandpolygon' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'freehandline',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-freehand-line',\r\n      label: 'Freehand Line',\r\n      tooltip: 'Freehand Line Tool',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'freehandline' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'dragPan',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'tool-move',\r\n      label: 'Pan',\r\n      commands: {\r\n        ...setToolActiveToolbar,\r\n        commandOptions: { toolName: 'dragPan' },\r\n      },\r\n      evaluate: 'evaluate.microscopyTool',\r\n    },\r\n  },\r\n  {\r\n    id: 'TagBrowser',\r\n    uiType: 'ohif.toolButton',\r\n    props: {\r\n      icon: 'dicom-tag-browser',\r\n      label: 'Dicom Tag Browser',\r\n      tooltip: 'Dicom Tag Browser',\r\n      commands: 'openDICOMTagViewer',\r\n      evaluate: 'evaluate.action',\r\n    },\r\n  },\r\n];\r\n\r\nexport default toolbarButtons;\r\n"],"names":[],"sourceRoot":""}