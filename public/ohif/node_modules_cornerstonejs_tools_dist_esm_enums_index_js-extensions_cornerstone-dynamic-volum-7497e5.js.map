{"version":3,"file":"node_modules_cornerstonejs_tools_dist_esm_enums_index_js-extensions_cornerstone-dynamic-volum-7497e5.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACTA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpRA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3ZA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxqBA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AAhDA;AACA;AAAA;AAiDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAKA;AACA;AAAA;AAKA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAKA;AACA;AAAA;AASA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAKA;AACA;AAAA;AAKA;AACA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AASA;AAAA;AA3JA;AA6JA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAOA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAMA;AAAA;AAjFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5MA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAxNA;AAKA;AAAA;AALA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAGA;AAAA;AAAA;AACA;AAKA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AAEA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CAnnotationStyleStates.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CChangeTypes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CEvents.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CSegmentationRepresentations.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CStrategyCallbacks.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CToolBindings.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CToolModes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CTouch.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5CWorkerTypes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ctools%5Cdist%5Cesm%5Cenums%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cactions%5Cindex.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cactions%5CupdateSegmentationsChartDisplaySet.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5CcommandsModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5CgetHangingProtocolModule.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5CgetPanelModule.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cindex.ts","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cpanels%5CDynamicDataPanel.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cpanels%5CDynamicExport.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cpanels%5CDynamicVolumeControls.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cpanels%5CPanelGenerateImage.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cpanels%5CWorkflowPanel.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cextensions%5Ccornerstone-dynamic-volume%5Csrc%5Cpanels%5Cindex.js"],"sourcesContent":["var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"CROSSHAIR_TOOL_CENTER_CHANGED\"] = \"CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"HISTORY_UNDO\"] = \"CORNERSTONE_TOOLS_HISTORY_UNDO\";\n    Events[\"HISTORY_REDO\"] = \"CORNERSTONE_TOOLS_HISTORY_REDO\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"Interpolate\"] = \"interpolate\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"AddPreview\"] = \"addPreview\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n    StrategyCallbacks[\"GetStatistics\"] = \"getStatistics\";\n    StrategyCallbacks[\"EnsureImageVolumeFor3DManipulation\"] = \"ensureImageVolumeFor3DManipulation\";\n    StrategyCallbacks[\"EnsureSegmentationVolumeFor3DManipulation\"] = \"ensureSegmentationVolumeFor3DManipulation\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n    ChangeTypes[\"COMPUTE_STATISTICS\"] = \"Computing Statistics\";\n    ChangeTypes[\"INTERPOLATE_LABELMAP\"] = \"Interpolating Labelmap\";\n    ChangeTypes[\"COMPUTE_LARGEST_BIDIRECTIONAL\"] = \"Computing Largest Bidirectional\";\n    ChangeTypes[\"GENERATE_CONTOUR_SETS\"] = \"Generating Contour Sets\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import { MouseBindings, KeyboardBindings } from './ToolBindings';\nimport ToolModes from './ToolModes';\nimport AnnotationStyleStates from './AnnotationStyleStates';\nimport Events from './Events';\nimport SegmentationRepresentations from './SegmentationRepresentations';\nimport { Swipe } from './Touch';\nimport StrategyCallbacks from './StrategyCallbacks';\nimport ChangeTypes from './ChangeTypes';\nimport WorkerTypes from './WorkerTypes';\nexport { MouseBindings, KeyboardBindings, ToolModes, AnnotationStyleStates, Events, SegmentationRepresentations, Swipe, StrategyCallbacks, ChangeTypes, WorkerTypes, };\n","import updateSegmentationsChartDisplaySet from './updateSegmentationsChartDisplaySet';\r\n\r\nexport { updateSegmentationsChartDisplaySet };\r\n","import { DicomMetadataStore, utils } from '@ohif/core';\r\n\r\nimport * as cs from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\n\r\nconst CHART_MODALITY = 'CHT';\r\nconst SEG_CHART_INSTANCE_UID = utils.guid();\r\n\r\n// Private SOPClassUid for chart data\r\nconst ChartDataSOPClassUid = '1.9.451.13215.7.3.2.7.6.1';\r\n\r\nconst { utilities: csToolsUtils } = csTools;\r\n\r\nfunction _getDateTimeStr() {\r\n  const now = new Date();\r\n  const date =\r\n    now.getFullYear() + ('0' + now.getUTCMonth()).slice(-2) + ('0' + now.getUTCDate()).slice(-2);\r\n  const time =\r\n    ('0' + now.getUTCHours()).slice(-2) +\r\n    ('0' + now.getUTCMinutes()).slice(-2) +\r\n    ('0' + now.getUTCSeconds()).slice(-2);\r\n\r\n  return { date, time };\r\n}\r\n\r\nfunction _getTimePointsDataByTagName(volume, timePointsTag) {\r\n  const uniqueTimePoints = volume.imageIds.reduce((timePoints, imageId) => {\r\n    const instance = DicomMetadataStore.getInstanceByImageId(imageId);\r\n    const timePointValue = instance[timePointsTag];\r\n\r\n    if (timePointValue !== undefined) {\r\n      timePoints.add(timePointValue);\r\n    }\r\n\r\n    return timePoints;\r\n  }, new Set());\r\n\r\n  return Array.from(uniqueTimePoints).sort((a: number, b: number) => a - b);\r\n}\r\n\r\nfunction _convertTimePointsUnit(timePoints, timePointsUnit) {\r\n  const validUnits = ['ms', 's', 'm', 'h'];\r\n  const divisors = [1000, 60, 60];\r\n  const currentUnitIndex = validUnits.indexOf(timePointsUnit);\r\n  let divisor = 1;\r\n\r\n  if (currentUnitIndex !== -1) {\r\n    for (let i = currentUnitIndex; i < validUnits.length - 1; i++) {\r\n      const newDivisor = divisor * divisors[i];\r\n      const greaterThanDivisorCount = timePoints.filter(timePoint => timePoint > newDivisor).length;\r\n\r\n      // Change the scale only if more than 50% of the time points are\r\n      // greater than the new divisor.\r\n      if (greaterThanDivisorCount <= timePoints.length / 2) {\r\n        break;\r\n      }\r\n\r\n      divisor = newDivisor;\r\n      timePointsUnit = validUnits[i + 1];\r\n    }\r\n\r\n    if (divisor > 1) {\r\n      timePoints = timePoints.map(timePoint => timePoint / divisor);\r\n    }\r\n  }\r\n\r\n  return { timePoints, timePointsUnit };\r\n}\r\n\r\n// It currently supports only one tag but a few other will be added soon\r\n// Supported 4D Tags\r\n//   (0018,1060) Trigger Time                   [NOK]\r\n//   (0018,0081) Echo Time                      [NOK]\r\n//   (0018,0086) Echo Number                    [NOK]\r\n//   (0020,0100) Temporal Position Identifier   [NOK]\r\n//   (0054,1300) FrameReferenceTime             [OK]\r\nfunction _getTimePointsData(volume) {\r\n  const timePointsTags = {\r\n    FrameReferenceTime: {\r\n      unit: 'ms',\r\n    },\r\n  };\r\n\r\n  const timePointsTagNames = Object.keys(timePointsTags);\r\n  let timePoints;\r\n  let timePointsUnit;\r\n\r\n  for (let i = 0; i < timePointsTagNames.length; i++) {\r\n    const tagName = timePointsTagNames[i];\r\n    const curTimePoints = _getTimePointsDataByTagName(volume, tagName);\r\n\r\n    if (curTimePoints.length) {\r\n      timePoints = curTimePoints;\r\n      timePointsUnit = timePointsTags[tagName].unit;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!timePoints.length) {\r\n    const concatTagNames = timePointsTagNames.join(', ');\r\n\r\n    throw new Error(`Could not extract time points data for the following tags: ${concatTagNames}`);\r\n  }\r\n\r\n  const convertedTimePoints = _convertTimePointsUnit(timePoints, timePointsUnit);\r\n\r\n  timePoints = convertedTimePoints.timePoints;\r\n  timePointsUnit = convertedTimePoints.timePointsUnit;\r\n\r\n  return { timePoints, timePointsUnit };\r\n}\r\n\r\nfunction _getSegmentationData(\r\n  segmentation,\r\n  volumesTimePointsCache,\r\n  { servicesManager }: { servicesManager: AppTypes.ServicesManager }\r\n) {\r\n  const { displaySetService, segmentationService, viewportGridService } = servicesManager.services;\r\n  const displaySets = displaySetService.getActiveDisplaySets();\r\n\r\n  const dynamic4DDisplaySet = displaySets.find(displaySet => {\r\n    const anInstance = displaySet.instances?.[0];\r\n\r\n    if (anInstance) {\r\n      return (\r\n        anInstance.FrameReferenceTime !== undefined || anInstance.NumberOfTimeSlices !== undefined\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // const referencedDynamicVolume = cs.cache.getVolume(dynamic4DDisplaySet.displaySetInstanceUID);\r\n  let volumeCacheKey: string | undefined;\r\n  const volumeId = dynamic4DDisplaySet.displaySetInstanceUID;\r\n\r\n  for (const [key] of cs.cache._volumeCache) {\r\n    if (key.includes(volumeId)) {\r\n      volumeCacheKey = key;\r\n      break;\r\n    }\r\n  }\r\n\r\n  let referencedDynamicVolume;\r\n  if (volumeCacheKey) {\r\n    referencedDynamicVolume = cs.cache.getVolume(volumeCacheKey);\r\n  }\r\n\r\n  const { StudyInstanceUID, StudyDescription } = DicomMetadataStore.getInstanceByImageId(\r\n    referencedDynamicVolume.imageIds[0]\r\n  );\r\n\r\n  const segmentationVolume = segmentationService.getLabelmapVolume(segmentation.segmentationId);\r\n  const maskVolumeId = segmentationVolume?.volumeId;\r\n\r\n  const [timeData, _] = csToolsUtils.dynamicVolume.getDataInTime(referencedDynamicVolume, {\r\n    maskVolumeId,\r\n  }) as number[][];\r\n\r\n  const pixelCount = timeData.length;\r\n\r\n  if (pixelCount === 0) {\r\n    return [];\r\n  }\r\n\r\n  // Todo: this is useless we should be able to grab color with just segRepUID and segmentIndex\r\n  // const color = csTools.segmentation.config.color.getSegmentIndexColor(\r\n  //   segmentationRepresentationUID,\r\n  //   1 // segmentIndex\r\n  // );\r\n  const viewportId = viewportGridService.getActiveViewportId();\r\n  const color = segmentationService.getSegmentColor(viewportId, segmentation.segmentationId, 1);\r\n\r\n  const hexColor = cs.utilities.color.rgbToHex(color[0], color[1], color[2]);\r\n  let timePointsData = volumesTimePointsCache.get(referencedDynamicVolume);\r\n\r\n  if (!timePointsData) {\r\n    timePointsData = _getTimePointsData(referencedDynamicVolume);\r\n    volumesTimePointsCache.set(referencedDynamicVolume, timePointsData);\r\n  }\r\n\r\n  const { timePoints, timePointsUnit } = timePointsData;\r\n\r\n  if (timePoints.length !== timeData[0].length) {\r\n    throw new Error('Invalid number of time points returned');\r\n  }\r\n\r\n  const timepointsCount = timePoints.length;\r\n  const chartSeriesData = new Array(timepointsCount);\r\n\r\n  for (let i = 0; i < timepointsCount; i++) {\r\n    const average = timeData.reduce((acc, cur) => acc + cur[i] / pixelCount, 0);\r\n\r\n    chartSeriesData[i] = [timePoints[i], average];\r\n  }\r\n\r\n  return {\r\n    StudyInstanceUID,\r\n    StudyDescription,\r\n    chartData: {\r\n      series: {\r\n        label: segmentation.label,\r\n        points: chartSeriesData,\r\n        color: hexColor,\r\n      },\r\n      axis: {\r\n        x: {\r\n          label: `Time (${timePointsUnit})`,\r\n        },\r\n        y: {\r\n          label: `Vl (Bq/ml)`,\r\n        },\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nfunction _getInstanceFromSegmentations(segmentations, { servicesManager }) {\r\n  if (!segmentations.length) {\r\n    return;\r\n  }\r\n\r\n  const volumesTimePointsCache = new WeakMap();\r\n  const segmentationsData = segmentations.map(segmentation =>\r\n    _getSegmentationData(segmentation, volumesTimePointsCache, { servicesManager })\r\n  );\r\n\r\n  const { date: seriesDate, time: seriesTime } = _getDateTimeStr();\r\n  const series = segmentationsData.reduce((allSeries, curSegData) => {\r\n    return [...allSeries, curSegData.chartData.series];\r\n  }, []);\r\n\r\n  const instance = {\r\n    SOPClassUID: ChartDataSOPClassUid,\r\n    Modality: CHART_MODALITY,\r\n    SOPInstanceUID: utils.guid(),\r\n    SeriesDate: seriesDate,\r\n    SeriesTime: seriesTime,\r\n    SeriesInstanceUID: SEG_CHART_INSTANCE_UID,\r\n    StudyInstanceUID: segmentationsData[0].StudyInstanceUID,\r\n    StudyDescription: segmentationsData[0].StudyDescription,\r\n    SeriesNumber: 100,\r\n    SeriesDescription: 'Segmentation chart series data',\r\n    chartData: {\r\n      series,\r\n      axis: { ...segmentationsData[0].chartData.axis },\r\n    },\r\n  };\r\n\r\n  const seriesMetadata = {\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    StudyDescription: instance.StudyDescription,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    SeriesDescription: instance.SeriesDescription,\r\n    SeriesNumber: instance.SeriesNumber,\r\n    SeriesTime: instance.SeriesTime,\r\n    SOPClassUID: instance.SOPClassUID,\r\n    Modality: instance.Modality,\r\n  };\r\n\r\n  return { seriesMetadata, instance };\r\n}\r\n\r\nfunction updateSegmentationsChartDisplaySet({ servicesManager }: withAppTypes): void {\r\n  const { segmentationService } = servicesManager.services;\r\n  const segmentations = segmentationService.getSegmentations();\r\n  const { seriesMetadata, instance } =\r\n    _getInstanceFromSegmentations(segmentations, { servicesManager }) ?? {};\r\n\r\n  if (seriesMetadata && instance) {\r\n    // An event is triggered after adding the instance and the displaySet is created\r\n    DicomMetadataStore.addSeriesMetadata([seriesMetadata], true);\r\n    DicomMetadataStore.addInstances([instance], true);\r\n  }\r\n}\r\n\r\nexport { updateSegmentationsChartDisplaySet as default };\r\n","import * as importedActions from './actions';\r\nimport { utilities, Enums } from '@cornerstonejs/tools';\r\nimport { cache } from '@cornerstonejs/core';\r\n\r\nconst LABELMAP = Enums.SegmentationRepresentations.Labelmap;\r\n\r\nconst commandsModule = ({ commandsManager, servicesManager }: withAppTypes) => {\r\n  const services = servicesManager.services;\r\n  const { displaySetService, viewportGridService, segmentationService } = services;\r\n\r\n  const actions = {\r\n    ...importedActions,\r\n    getDynamic4DDisplaySet: () => {\r\n      const displaySets = displaySetService.getActiveDisplaySets();\r\n\r\n      const dynamic4DDisplaySet = displaySets.find(displaySet => {\r\n        const anInstance = displaySet.instances?.[0];\r\n\r\n        if (anInstance) {\r\n          return (\r\n            anInstance.FrameReferenceTime !== undefined ||\r\n            anInstance.NumberOfTimeSlices !== undefined ||\r\n            anInstance.TemporalPositionIdentifier !== undefined\r\n          );\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      return dynamic4DDisplaySet;\r\n    },\r\n    getComputedDisplaySets: () => {\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySets = [...displaySetCache.values()];\r\n      const computedDisplaySets = cachedDisplaySets.filter(displaySet => {\r\n        return displaySet.isDerived;\r\n      });\r\n      return computedDisplaySets;\r\n    },\r\n    exportTimeReportCSV: ({ segmentations, config, options, summaryStats }) => {\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const volumeId = dynamic4DDisplaySet?.displaySetInstanceUID;\r\n\r\n      // cache._volumeCache is a map that has a key that includes the volumeId\r\n      // it is not exactly the volumeId, but it is the key that includes the volumeId\r\n      // so we can't do cache._volumeCache.get(volumeId) we should iterate\r\n      // over the keys and find the one that includes the volumeId\r\n      let volumeCacheKey: string | undefined;\r\n\r\n      for (const [key] of cache._volumeCache) {\r\n        if (key.includes(volumeId)) {\r\n          volumeCacheKey = key;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let dynamicVolume;\r\n      if (volumeCacheKey) {\r\n        dynamicVolume = cache.getVolume(volumeCacheKey);\r\n      }\r\n\r\n      const instance = dynamic4DDisplaySet.instances[0];\r\n\r\n      const csv = [];\r\n\r\n      // CSV header information with placeholder empty values for the metadata lines\r\n      csv.push(`Patient ID,${instance.PatientID},`);\r\n      csv.push(`Study Date,${instance.StudyDate},`);\r\n      csv.push(`StudyInstanceUID,${instance.StudyInstanceUID},`);\r\n      csv.push(`StudyDescription,${instance.StudyDescription},`);\r\n      csv.push(`SeriesInstanceUID,${instance.SeriesInstanceUID},`);\r\n\r\n      // empty line\r\n      csv.push('');\r\n      csv.push('');\r\n\r\n      // Helper function to calculate standard deviation\r\n      function calculateStandardDeviation(data) {\r\n        const n = data.length;\r\n        const mean = data.reduce((acc, value) => acc + value, 0) / n;\r\n        const squaredDifferences = data.map(value => (value - mean) ** 2);\r\n        const variance = squaredDifferences.reduce((acc, value) => acc + value, 0) / n;\r\n        const stdDeviation = Math.sqrt(variance);\r\n        return stdDeviation;\r\n      }\r\n      // Iterate through each segmentation to get the timeData and ijkCoords\r\n      segmentations.forEach(segmentation => {\r\n        const volume = segmentationService.getLabelmapVolume(segmentation.segmentationId);\r\n        const [timeData, ijkCoords] = utilities.dynamicVolume.getDataInTime(dynamicVolume, {\r\n          maskVolumeId: volume.volumeId,\r\n        }) as number[][];\r\n\r\n        if (summaryStats) {\r\n          // Adding column headers for pixel identifier and segmentation label ids\r\n          let headers = 'Operation,Segmentation Label ID';\r\n          const maxLength = dynamicVolume.numTimePoints;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            headers += `,Time Point ${t}`;\r\n          }\r\n          csv.push(headers);\r\n          // // perform summary statistics on the timeData including for each time point, mean, median, min, max, and standard deviation for\r\n          // // all the voxels in the ROI\r\n          const mean = [];\r\n          const min = [];\r\n          const minIJK = [];\r\n          const max = [];\r\n          const maxIJK = [];\r\n          const std = [];\r\n\r\n          const numVoxels = timeData.length;\r\n          // Helper function to calculate standard deviation\r\n          for (let timeIndex = 0; timeIndex < maxLength; timeIndex++) {\r\n            // for each voxel in the ROI, get the value at the current time point\r\n            const voxelValues = [];\r\n            let sum = 0;\r\n            let minValue = Infinity;\r\n            let maxValue = -Infinity;\r\n            let minIndex = 0;\r\n            let maxIndex = 0;\r\n\r\n            // Single pass through the data to collect all needed values\r\n            for (let voxelIndex = 0; voxelIndex < numVoxels; voxelIndex++) {\r\n              const value = timeData[voxelIndex][timeIndex];\r\n              voxelValues.push(value);\r\n              sum += value;\r\n\r\n              if (value < minValue) {\r\n                minValue = value;\r\n                minIndex = voxelIndex;\r\n              }\r\n              if (value > maxValue) {\r\n                maxValue = value;\r\n                maxIndex = voxelIndex;\r\n              }\r\n            }\r\n\r\n            mean.push(sum / numVoxels);\r\n            min.push(minValue);\r\n            minIJK.push(ijkCoords[minIndex]);\r\n            max.push(maxValue);\r\n            maxIJK.push(ijkCoords[maxIndex]);\r\n            std.push(calculateStandardDeviation(voxelValues));\r\n          }\r\n\r\n          let row = `Mean,${segmentation.label}`;\r\n          // Generate separate rows for each statistic\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${mean[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Standard Deviation,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${std[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Min,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${min[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Max,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${max[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n        } else {\r\n          // Adding column headers for pixel identifier and segmentation label ids\r\n          let headers = 'Pixel Identifier (IJK),Segmentation Label ID';\r\n          const maxLength = dynamicVolume.numTimePoints;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            headers += `,Time Point ${t}`;\r\n          }\r\n          csv.push(headers);\r\n          // Assuming timeData and ijkCoords are of the same length\r\n          for (let i = 0; i < timeData.length; i++) {\r\n            // Generate the pixel identifier\r\n            const pixelIdentifier = `${ijkCoords[i][0]}_${ijkCoords[i][1]}_${ijkCoords[i][2]}`;\r\n\r\n            // Start a new row for the current pixel\r\n            let row = `${pixelIdentifier},${segmentation.label}`;\r\n\r\n            // Add time data points for this pixel\r\n            for (let t = 0; t < timeData[i].length; t++) {\r\n              row += `,${timeData[i][t]}`;\r\n            }\r\n\r\n            // Append the row to the CSV array\r\n            csv.push(row);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Convert to CSV string\r\n      const csvContent = csv.join('\\n');\r\n\r\n      // Generate filename and trigger download\r\n      const filename = `${instance.PatientID}.csv`;\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', filename);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    },\r\n    swapDynamicWithComputedDisplaySet: ({ displaySet }) => {\r\n      const computedDisplaySet = displaySet;\r\n\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySetKeys = [displaySetCache.keys()];\r\n      const { displaySetInstanceUID } = computedDisplaySet;\r\n      // Check to see if computed display set is already in cache\r\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\r\n        displaySetCache.set(displaySetInstanceUID, computedDisplaySet);\r\n      }\r\n\r\n      // Get all viewports and their corresponding indices\r\n      const { viewports } = viewportGridService.getState();\r\n\r\n      // get the viewports in the grid\r\n      // iterate over them and find the ones that are showing a dynamic\r\n      // volume (displaySet), and replace that exact displaySet with the\r\n      // computed displaySet\r\n\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const viewportsToUpdate = [];\r\n\r\n      for (const [key, value] of viewports) {\r\n        const viewport = value;\r\n        const viewportOptions = viewport.viewportOptions;\r\n        const { displaySetInstanceUIDs } = viewport;\r\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\r\n          dynamic4DDisplaySet.displaySetInstanceUID\r\n        );\r\n        if (displaySetInstanceUIDIndex !== -1) {\r\n          const newViewport = {\r\n            viewportId: viewport.viewportId,\r\n            // merge the other displaySetInstanceUIDs with the new one\r\n            displaySetInstanceUIDs: [\r\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\r\n              displaySetInstanceUID,\r\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\r\n            ],\r\n            viewportOptions: {\r\n              initialImageOptions: viewportOptions.initialImageOptions,\r\n              viewportType: 'volume',\r\n              orientation: viewportOptions.orientation,\r\n              background: viewportOptions.background,\r\n            },\r\n          };\r\n          viewportsToUpdate.push(newViewport);\r\n        }\r\n      }\r\n\r\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate });\r\n    },\r\n    swapComputedWithDynamicDisplaySet: () => {\r\n      // Todo: this assumes there is only one dynamic display set in the viewer\r\n      const dynamicDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySetKeys = [...displaySetCache.keys()]; // Fix: Spread to get the array\r\n      const { displaySetInstanceUID } = dynamicDisplaySet;\r\n\r\n      // Check to see if dynamic display set is already in cache\r\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\r\n        displaySetCache.set(displaySetInstanceUID, dynamicDisplaySet);\r\n      }\r\n\r\n      // Get all viewports and their corresponding indices\r\n      const { viewports } = viewportGridService.getState();\r\n\r\n      // Get the computed 4D display set\r\n      const computed4DDisplaySet = actions.getComputedDisplaySets()[0];\r\n\r\n      const viewportsToUpdate = [];\r\n\r\n      for (const [key, value] of viewports) {\r\n        const viewport = value;\r\n        const viewportOptions = viewport.viewportOptions;\r\n        const { displaySetInstanceUIDs } = viewport;\r\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\r\n          computed4DDisplaySet.displaySetInstanceUID\r\n        );\r\n        if (displaySetInstanceUIDIndex !== -1) {\r\n          const newViewport = {\r\n            viewportId: viewport.viewportId,\r\n            // merge the other displaySetInstanceUIDs with the new one\r\n            displaySetInstanceUIDs: [\r\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\r\n              displaySetInstanceUID,\r\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\r\n            ],\r\n            viewportOptions: {\r\n              initialImageOptions: viewportOptions.initialImageOptions,\r\n              viewportType: 'volume',\r\n              orientation: viewportOptions.orientation,\r\n              background: viewportOptions.background,\r\n            },\r\n          };\r\n          viewportsToUpdate.push(newViewport);\r\n        }\r\n      }\r\n\r\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate });\r\n    },\r\n    createNewLabelMapForDynamicVolume: async ({ label }) => {\r\n      const { viewports, activeViewportId } = viewportGridService.getState();\r\n\r\n      // get the dynamic 4D display set\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n      const dynamic4DDisplaySetInstanceUID = dynamic4DDisplaySet.displaySetInstanceUID;\r\n\r\n      // check if the dynamic 4D display set is in the display, if not we might have\r\n      // the computed volumes and we should choose them for the segmentation\r\n      // creation\r\n\r\n      let referenceDisplaySet;\r\n\r\n      const activeViewport = viewports.get(activeViewportId);\r\n      const activeDisplaySetInstanceUIDs = activeViewport.displaySetInstanceUIDs;\r\n      const dynamicIsInActiveViewport = activeDisplaySetInstanceUIDs.includes(\r\n        dynamic4DDisplaySetInstanceUID\r\n      );\r\n\r\n      if (dynamicIsInActiveViewport) {\r\n        referenceDisplaySet = dynamic4DDisplaySet;\r\n      }\r\n\r\n      if (!referenceDisplaySet) {\r\n        // try to see if there is any derived displaySet in the active viewport\r\n        // which is referencing the dynamic 4D display set\r\n\r\n        // Todo: this is wrong but I don't have time to fix it now\r\n        const cachedDisplaySets = displaySetService.getDisplaySetCache();\r\n        for (const [key, displaySet] of cachedDisplaySets) {\r\n          if (displaySet.referenceDisplaySetUID === dynamic4DDisplaySetInstanceUID) {\r\n            referenceDisplaySet = displaySet;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!referenceDisplaySet) {\r\n        throw new Error('No reference display set found based on the dynamic data');\r\n      }\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        referenceDisplaySet.displaySetInstanceUID\r\n      );\r\n\r\n      const segmentationId = await segmentationService.createLabelmapForDisplaySet(displaySet, {\r\n        label,\r\n      });\r\n\r\n      const firstViewport = viewports.values().next().value;\r\n\r\n      await segmentationService.addSegmentationRepresentation(firstViewport.viewportId, {\r\n        segmentationId,\r\n      });\r\n\r\n      return segmentationId;\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    updateSegmentationsChartDisplaySet: {\r\n      commandFn: actions.updateSegmentationsChartDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    exportTimeReportCSV: {\r\n      commandFn: actions.exportTimeReportCSV,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    swapDynamicWithComputedDisplaySet: {\r\n      commandFn: actions.swapDynamicWithComputedDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    createNewLabelMapForDynamicVolume: {\r\n      commandFn: actions.createNewLabelMapForDynamicVolume,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    swapComputedWithDynamicDisplaySet: {\r\n      commandFn: actions.swapComputedWithDynamicDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'DYNAMIC-VOLUME:CORNERSTONE',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","const DEFAULT_COLORMAP = '2hot';\r\nconst toolGroupIds = {\r\n  pt: 'dynamic4D-pt',\r\n  fusion: 'dynamic4D-fusion',\r\n  ct: 'dynamic4D-ct',\r\n};\r\n\r\nfunction getPTOptions({\r\n  colormap,\r\n  voiInverted,\r\n}: {\r\n  colormap?: {\r\n    name: string;\r\n    opacity:\r\n      | number\r\n      | {\r\n          value: number;\r\n          opacity: number;\r\n        }[];\r\n  };\r\n  voiInverted?: boolean;\r\n} = {}) {\r\n  return {\r\n    blendMode: 'MIP',\r\n    colormap,\r\n    voi: {\r\n      windowWidth: 5,\r\n      windowCenter: 2.5,\r\n    },\r\n    voiInverted,\r\n  };\r\n}\r\n\r\nfunction getPTViewports() {\r\n  const ptOptionsParams = {\r\n    colormap: {\r\n      name: DEFAULT_COLORMAP,\r\n      opacity: [\r\n        { value: 0, opacity: 0 },\r\n        { value: 0.1, opacity: 1 },\r\n        { value: 1, opacity: 1 },\r\n      ],\r\n    },\r\n    voiInverted: false,\r\n  };\r\n\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction getFusionViewports() {\r\n  const ptOptionsParams = {\r\n    colormap: {\r\n      name: DEFAULT_COLORMAP,\r\n      opacity: [\r\n        { value: 0, opacity: 0 },\r\n        { value: 0.1, opacity: 0.8 },\r\n        { value: 1, opacity: 0.8 },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n          {\r\n            type: 'hydrateseg',\r\n            id: 'sameFORId',\r\n            source: true,\r\n            target: true,\r\n            options: {\r\n              matchingRules: ['sameFOR'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n          {\r\n            type: 'hydrateseg',\r\n            id: 'sameFORId',\r\n            source: true,\r\n            target: true,\r\n            options: {\r\n              matchingRules: ['sameFOR'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n          {\r\n            type: 'hydrateseg',\r\n            id: 'sameFORId',\r\n            source: true,\r\n            target: true,\r\n            options: {\r\n              matchingRules: ['sameFOR'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction getSeriesChartViewport() {\r\n  return {\r\n    viewportOptions: {\r\n      viewportId: 'seriesChart',\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'chartDisplaySet',\r\n        options: {\r\n          // This dataset does not require the download of any instance since it is pre-computed locally,\r\n          // but interleaveTopToBottom.ts was not loading any series because it consider that all viewports\r\n          // are a Cornerstone viewport which is not true in this case and it waits for all viewports to\r\n          // have called interleaveTopToBottom(...).\r\n          skipLoading: true,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction getCTViewports() {\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle',\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle',\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nconst defaultProtocol = {\r\n  id: 'default4D',\r\n  locked: true,\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  hasUpdatedPriorsInformation: false,\r\n  name: 'Default',\r\n  createdDate: '2023-01-01T00:00:00.000Z',\r\n  modifiedDate: '2023-01-01T00:00:00.000Z',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  imageLoadStrategy: 'default', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\r\n  protocolMatchingRules: [\r\n    {\r\n      attribute: 'ModalitiesInStudy',\r\n      constraint: {\r\n        contains: ['CT', 'PT'],\r\n      },\r\n    },\r\n  ],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: -1,\r\n  displaySetSelectors: {\r\n    defaultDisplaySetId: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        // Try to match series with images by default, to prevent weird display\r\n        // on SEG/SR containing studies\r\n        {\r\n          attribute: 'numImageFrames',\r\n          constraint: {\r\n            greaterThan: { value: 0 },\r\n          },\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    ctDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    ptDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'PT',\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'Corrected',\r\n          },\r\n        },\r\n        {\r\n          weight: 2,\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            doesNotContain: {\r\n              value: 'Uncorrected',\r\n            },\r\n          },\r\n        },\r\n\r\n        // Should we check if CorrectedImage contains ATTN?\r\n        // (0028,0051) (CorrectedImage): NORM\\DTIM\\ATTN\\SCAT\\RADL\\DECY\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    chartDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CHT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      id: 'dataPreparation',\r\n      name: 'Data Preparation',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getPTViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'registration',\r\n      name: 'Registration',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 3,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports(), ...getCTViewports(), ...getPTViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'roiQuantification',\r\n      name: 'ROI Quantification',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'kineticAnalysis',\r\n      name: 'Kinetic Analysis',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 2,\r\n          columns: 3,\r\n          layoutOptions: [\r\n            {\r\n              x: 0,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 1 / 3,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 2 / 3,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 0,\r\n              y: 1 / 2,\r\n              width: 1,\r\n              height: 1 / 2,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports(), getSeriesChartViewport()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n  ],\r\n};\r\n\r\n/**\r\n * HangingProtocolModule should provide a list of hanging protocols that will be\r\n * available in OHIF for Modes to use to decide on the structure of the viewports\r\n * and also the series that hung in the viewports. Each hanging protocol is defined by\r\n * { name, protocols}. Examples include the default hanging protocol provided by\r\n * the default extension that shows 2x2 viewports.\r\n */\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: defaultProtocol.id,\r\n      protocol: defaultProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import React from 'react';\r\nimport { DynamicDataPanel } from './panels';\r\nimport { Toolbox } from '@ohif/extension-default';\r\nimport { PanelSegmentation } from '@ohif/extension-cornerstone';\r\nimport DynamicExport from './panels/DynamicExport';\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager, configuration }) {\r\n  const { toolbarService } = servicesManager.services;\r\n\r\n  const wrappedDynamicDataPanel = () => {\r\n    return (\r\n      <DynamicDataPanel\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedDynamicSegmentation = () => {\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          buttonSectionId={toolbarService.sections.dynamicToolbox}\r\n          title=\"Threshold Tools\"\r\n        />\r\n        <PanelSegmentation\r\n          servicesManager={servicesManager}\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          configuration={configuration}\r\n        >\r\n          <DynamicExport\r\n            servicesManager={servicesManager}\r\n            commandsManager={commandsManager}\r\n          />\r\n        </PanelSegmentation>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dynamic-volume',\r\n      iconName: 'tab-4d',\r\n      iconLabel: '4D Workflow',\r\n      label: '4D Workflow',\r\n      component: wrappedDynamicDataPanel,\r\n    },\r\n    {\r\n      name: 'dynamic-segmentation',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation',\r\n      component: wrappedDynamicSegmentation,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dynamic-volume';\r\n\r\nexport { id, SOPClassHandlerName };\r\n","import { id } from './id';\r\nimport commandsModule from './commandsModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport { cache } from '@cornerstonejs/core';\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst dynamicVolumeExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * Perform any pre-registration tasks here. This is called before the extension\r\n   * is registered. Usually we run tasks such as: configuring the libraries\r\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\r\n   * this extension is providing.\r\n   */\r\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {\r\n    // TODO: look for the right fix\r\n    cache.setMaxCacheSize(5 * 1024 * 1024 * 1024);\r\n  },\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule,\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getHangingProtocolModule,\r\n  /**\r\n   * CommandsModule should provide a list of commands that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each command is defined by\r\n   * an object of { actions, definitions, defaultContext } where actions is an\r\n   * object of functions, definitions is an object of available commands, their\r\n   * options, and defaultContext is the default context for the command to run against.\r\n   */\r\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {\r\n    return commandsModule({\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    });\r\n  },\r\n};\r\n\r\nexport { dynamicVolumeExtension as default };\r\n","import React from 'react';\r\nimport PanelGenerateImage from './PanelGenerateImage';\r\n\r\nfunction DynamicDataPanel({ servicesManager, commandsManager, tab }: withAppTypes) {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"flex flex-col text-white\"\r\n        data-cy={'dynamic-volume-panel'}\r\n      >\r\n        <PanelGenerateImage\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n        ></PanelGenerateImage>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DynamicDataPanel;\r\n","import React from 'react';\r\nimport { Button, Icons } from '@ohif/ui-next';\r\nimport { useSegmentations } from '@ohif/extension-cornerstone';\r\n\r\nfunction DynamicExport({ commandsManager, servicesManager }: withAppTypes) {\r\n  const segmentations = useSegmentations({ servicesManager });\r\n\r\n  if (!segmentations?.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          className=\"pl-1.5\"\r\n          onClick={() => {\r\n            commandsManager.runCommand('exportTimeReportCSV', {\r\n              segmentations,\r\n              options: {\r\n                filename: 'TimeData.csv',\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          <Icons.Export />\r\n          <span className=\"pl-1\">Time Data</span>\r\n        </Button>\r\n      </div>\r\n      <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          className=\"pl-1.5\"\r\n          onClick={() => {\r\n            commandsManager.runCommand('exportTimeReportCSV', {\r\n              segmentations,\r\n              summaryStats: true,\r\n              options: {\r\n                filename: 'ROIStats.csv',\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          <Icons.Export />\r\n          <span className=\"pl-1\">ROI Stats</span>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicExport;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Tabs,\r\n  TabsList,\r\n  TabsTrigger,\r\n  Button,\r\n  PanelSection,\r\n  Icons,\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  Numeric,\r\n} from '@ohif/ui-next';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\n// Helper function to safely convert any value to uppercase string\r\nconst toUpperCaseString = value => {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n  return String(value).toUpperCase();\r\n};\r\n\r\nconst Header = ({ title, tooltip }) => (\r\n  <div className=\"flex items-center space-x-1\">\r\n    <Tooltip>\r\n      <TooltipTrigger asChild>\r\n        <span>\r\n          <Icons.ByName\r\n            name=\"info-link\"\r\n            className=\"text-primary h-3 w-3\"\r\n          />\r\n        </span>\r\n      </TooltipTrigger>\r\n      <TooltipContent\r\n        sideOffset={4}\r\n        className=\"max-w-xs\"\r\n      >\r\n        <div>{tooltip}</div>\r\n      </TooltipContent>\r\n    </Tooltip>\r\n    <span className=\"text-muted-foreground text-xs uppercase tracking-wide\">{title}</span>\r\n  </div>\r\n);\r\n\r\nconst DynamicVolumeControls = ({\r\n  isPlaying,\r\n  onPlayPauseChange,\r\n  // fps\r\n  fps,\r\n  onFpsChange,\r\n  minFps,\r\n  maxFps,\r\n  // Frames\r\n  currentDimensionGroupNumber,\r\n  onDimensionGroupChange,\r\n  numDimensionGroups,\r\n  onGenerate,\r\n  onDoubleRangeChange,\r\n  rangeValues,\r\n  onDynamicClick,\r\n}) => {\r\n  const [computedView, setComputedView] = useState(false);\r\n  const [computeViewMode, setComputeViewMode] = useState(Enums.DynamicOperatorType.SUM);\r\n\r\n  // Wrapper for onGenerate to handle potential errors\r\n  const handleGenerate = () => {\r\n    try {\r\n      if (typeof onGenerate === 'function') {\r\n        onGenerate(computeViewMode);\r\n      } else {\r\n        console.error('onGenerate is not a function', onGenerate);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in onGenerate:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex select-none flex-col\">\r\n      <PanelSection defaultOpen={true}>\r\n        <PanelSection.Header>Controls</PanelSection.Header>\r\n        <PanelSection.Content className=\"bg-muted space-y-4 px-5 pt-2 pb-4\">\r\n          <div className=\"mb-4\">\r\n            <Header\r\n              title=\"View\"\r\n              tooltip={\r\n                'Select the view mode, 4D to view the dynamic volume or Computed to view the computed volume'\r\n              }\r\n            />\r\n            <Tabs\r\n              value={computedView ? 'computed' : '4d'}\r\n              onValueChange={value => {\r\n                const isComputed = value === 'computed';\r\n                setComputedView(isComputed);\r\n                if (!isComputed && typeof onDynamicClick === 'function') {\r\n                  onDynamicClick();\r\n                }\r\n              }}\r\n              className=\"my-2 w-full\"\r\n            >\r\n              <TabsList className=\"w-full\">\r\n                <TabsTrigger\r\n                  value=\"4d\"\r\n                  className=\"w-1/2\"\r\n                >\r\n                  4D\r\n                </TabsTrigger>\r\n                <TabsTrigger\r\n                  value=\"computed\"\r\n                  className=\"w-1/2\"\r\n                >\r\n                  Computed\r\n                </TabsTrigger>\r\n              </TabsList>\r\n            </Tabs>\r\n          </div>\r\n          <div>\r\n            <DimensionGroupControls\r\n              onPlayPauseChange={onPlayPauseChange}\r\n              isPlaying={isPlaying}\r\n              computedView={computedView}\r\n              // fps\r\n              fps={fps}\r\n              onFpsChange={onFpsChange}\r\n              minFps={minFps}\r\n              maxFps={maxFps}\r\n              //\r\n              numDimensionGroups={numDimensionGroups}\r\n              onDimensionGroupChange={onDimensionGroupChange}\r\n              currentDimensionGroupNumber={currentDimensionGroupNumber}\r\n            />\r\n          </div>\r\n          <div className={`mt-3 flex flex-col ${computedView ? '' : 'ohif-disabled'}`}>\r\n            <Header\r\n              title=\"Computed Operation\"\r\n              tooltip={\r\n                <div>\r\n                  Operation Buttons (SUM, AVERAGE, SUBTRACT): Select the mathematical operation to\r\n                  be applied to the data set.\r\n                  <br /> Range Slider: Choose the numeric range of dimension groups within which the\r\n                  operation will be performed.\r\n                  <br />\r\n                  Generate Button: Execute the chosen operation on the specified range of data.\r\n                </div>\r\n              }\r\n            />\r\n            <Tabs\r\n              value={String(computeViewMode)}\r\n              onValueChange={value => {\r\n                setComputeViewMode(value);\r\n              }}\r\n              className=\"mt-2 w-full\"\r\n            >\r\n              <TabsList className=\"w-full gap-1\">\r\n                {' '}\r\n                <TabsTrigger\r\n                  value={String(Enums.DynamicOperatorType.SUM)}\r\n                  className=\"w-1/3\"\r\n                >\r\n                  {toUpperCaseString(Enums.DynamicOperatorType.SUM)}\r\n                </TabsTrigger>\r\n                <TabsTrigger\r\n                  value={String(Enums.DynamicOperatorType.AVERAGE)}\r\n                  className=\"w-1/3\"\r\n                >\r\n                  {toUpperCaseString(Enums.DynamicOperatorType.AVERAGE)}\r\n                </TabsTrigger>\r\n                <TabsTrigger\r\n                  value={String(Enums.DynamicOperatorType.SUBTRACT)}\r\n                  className=\"w-1/3\"\r\n                >\r\n                  {toUpperCaseString(Enums.DynamicOperatorType.SUBTRACT)}\r\n                </TabsTrigger>\r\n              </TabsList>\r\n            </Tabs>\r\n            <div className=\"mt-2 w-full\">\r\n              <Numeric.Container\r\n                mode=\"doubleRange\"\r\n                min={1}\r\n                max={numDimensionGroups || 1}\r\n                values={rangeValues || [1, numDimensionGroups || 1]}\r\n                onChange={onDoubleRangeChange || (() => {})}\r\n              >\r\n                <Numeric.DoubleRange showNumberInputs />\r\n              </Numeric.Container>\r\n            </div>\r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              className=\"mt-2 h-[26px] w-[115px] self-start p-0\"\r\n              onClick={handleGenerate}\r\n            >\r\n              Generate\r\n            </Button>\r\n          </div>\r\n        </PanelSection.Content>\r\n      </PanelSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicVolumeControls;\r\n\r\nfunction DimensionGroupControls({\r\n  isPlaying,\r\n  onPlayPauseChange,\r\n  fps,\r\n  minFps,\r\n  maxFps,\r\n  onFpsChange,\r\n  numDimensionGroups,\r\n  onDimensionGroupChange,\r\n  currentDimensionGroupNumber,\r\n  computedView,\r\n}) {\r\n  const getPlayPauseIconName = () => (isPlaying ? 'icon-pause' : 'icon-play');\r\n\r\n  return (\r\n    <div className={computedView ? 'ohif-disabled' : ''}>\r\n      <Header\r\n        title=\"4D Controls\"\r\n        tooltip={\r\n          <div>\r\n            Play/Pause Button: Begin or pause the animation of the 4D visualization. <br />\r\n            Dimension Group Selector: Navigate through individual dimension groups of the 4D data.{' '}\r\n            <br />\r\n            FPS (Frames Per Second) Selector: Adjust the playback speed of the animation.\r\n          </div>\r\n        }\r\n      />\r\n      <div className=\"mt-3 flex justify-between\">\r\n        <Button\r\n          id=\"play-pause-button\"\r\n          variant=\"secondary\"\r\n          size=\"default\"\r\n          className=\"w-[58px]\"\r\n          onClick={() => {\r\n            if (typeof onPlayPauseChange === 'function') {\r\n              onPlayPauseChange(!isPlaying);\r\n            }\r\n          }}\r\n        >\r\n          <Icons.ByName\r\n            name={getPlayPauseIconName()}\r\n            className=\"text-foreground h-[24px] w-[24px]\"\r\n          />\r\n        </Button>\r\n\r\n        <Numeric.Container\r\n          mode=\"stepper\"\r\n          value={currentDimensionGroupNumber || 1}\r\n          onChange={onDimensionGroupChange || (() => {})}\r\n          min={1}\r\n          max={numDimensionGroups || 1}\r\n          step={1}\r\n        >\r\n          <div className=\"flex flex-col items-center\">\r\n            <Numeric.NumberStepper\r\n              className=\"h-[28px] w-[58px]\"\r\n              direction=\"horizontal\"\r\n            />\r\n            <Numeric.Label className=\"text-muted-foreground mt-1 text-sm\">Frame</Numeric.Label>\r\n          </div>\r\n        </Numeric.Container>\r\n\r\n        <Numeric.Container\r\n          mode=\"stepper\"\r\n          value={fps || 1}\r\n          onChange={onFpsChange || (() => {})}\r\n          min={minFps || 1}\r\n          max={maxFps || 30}\r\n          step={1}\r\n        >\r\n          <div className=\"flex flex-col items-center\">\r\n            <Numeric.NumberStepper\r\n              className=\"h-[28px] w-[58px]\"\r\n              direction=\"horizontal\"\r\n            />\r\n            <Numeric.Label className=\"text-muted-foreground mt-1 text-sm\">FPS</Numeric.Label>\r\n          </div>\r\n        </Numeric.Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useCine } from '@ohif/ui-next';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport { utilities as csUtils, volumeLoader, eventTarget, Enums, cache } from '@cornerstonejs/core';\r\nimport { utilities as cstUtils } from '@cornerstonejs/tools';\r\nimport DynamicVolumeControls from './DynamicVolumeControls';\r\n\r\nconst SOPClassHandlerId = '@ohif/extension-default.sopClassHandlerModule.stack';\r\n\r\nexport default function PanelGenerateImage({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { cornerstoneViewportService, viewportGridService, displaySetService } =\r\n    servicesManager.services;\r\n\r\n  const [{ isCineEnabled }, cineService] = useCine();\r\n  const [{ activeViewportId }] = useViewportGrid();\r\n\r\n  //\r\n  const [dimensionGroupRange, setDimensionGroupRange] = useState([1, 1]);\r\n  const [computedDisplaySet, setComputedDisplaySet] = useState(null);\r\n  const [dynamicVolume, setDynamicVolume] = useState(null);\r\n  const [frameRate, setFrameRate] = useState(20);\r\n  const [isPlaying, setIsPlaying] = useState(isCineEnabled);\r\n  const [dimensionGroupNumberRendered, setDimensionGroupNumberRendered] = useState(null);\r\n  const [displayingComputed, setDisplayingComputed] = useState(false);\r\n\r\n  //\r\n  const uuidComputedVolume = useRef(csUtils.uuidv4());\r\n  const uuidDynamicVolume = useRef(null);\r\n  const computedVolumeId = `cornerstoneStreamingImageVolume:${uuidComputedVolume.current}`;\r\n\r\n  useEffect(() => {\r\n    const viewportDataChangedEvt = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\r\n    const cineStateChangedEvt = servicesManager.services.cineService.EVENTS.CINE_STATE_CHANGED;\r\n\r\n    const viewportDataChangedCallback = evtDetails => {\r\n      evtDetails.viewportData.data.forEach(volumeData => {\r\n        if (volumeData.volume?.isDynamicVolume()) {\r\n          setDynamicVolume(volumeData.volume);\r\n          uuidDynamicVolume.current = volumeData.displaySetInstanceUID;\r\n          const newRange = [1, volumeData.volume.numDimensionGroups];\r\n          setDimensionGroupRange(newRange);\r\n        }\r\n      });\r\n    };\r\n\r\n    const cineStateChangedCallback = evt => {\r\n      setIsPlaying(evt.isPlaying);\r\n    };\r\n\r\n    const { unsubscribe: unsubscribeViewportData } = cornerstoneViewportService.subscribe(\r\n      viewportDataChangedEvt,\r\n      viewportDataChangedCallback\r\n    );\r\n    const { unsubscribe: unsubscribeCineState } = servicesManager.services.cineService.subscribe(\r\n      cineStateChangedEvt,\r\n      cineStateChangedCallback\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeViewportData();\r\n      unsubscribeCineState();\r\n    };\r\n  }, [cornerstoneViewportService, cineService, servicesManager.services.cineService]);\r\n\r\n  useEffect(() => {\r\n    const evt = Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED;\r\n\r\n    const callback = evt => {\r\n      setDimensionGroupNumberRendered(evt.detail.dimensionGroupNumber);\r\n    };\r\n\r\n    eventTarget.addEventListener(evt, callback);\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(evt, callback);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\r\n\r\n    if (!displaySetUIDs?.length) {\r\n      return;\r\n    }\r\n\r\n    const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\r\n    const dynamicVolumeDisplaySet = displaySets.find(displaySet => displaySet.isDynamicVolume);\r\n\r\n    if (!dynamicVolumeDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const dynamicVolume = cache\r\n      .getVolumes()\r\n      .find(volume => volume.volumeId.includes(dynamicVolumeDisplaySet.displaySetInstanceUID));\r\n\r\n    if (!dynamicVolume) {\r\n      return;\r\n    }\r\n\r\n    setDynamicVolume(dynamicVolume);\r\n    uuidDynamicVolume.current = dynamicVolumeDisplaySet.displaySetInstanceUID;\r\n    setDimensionGroupRange([1, dynamicVolume.numDimensionGroups]);\r\n  }, [\r\n    activeViewportId,\r\n    viewportGridService,\r\n    displaySetService,\r\n    cornerstoneViewportService,\r\n    cineService,\r\n  ]);\r\n\r\n  function renderGeneratedImage(displaySet) {\r\n    commandsManager.runCommand('swapDynamicWithComputedDisplaySet', {\r\n      displaySet,\r\n    });\r\n\r\n    setDisplayingComputed(true);\r\n  }\r\n\r\n  function renderDynamicImage(displaySet) {\r\n    commandsManager.runCommand('swapComputedWithDynamicDisplaySet');\r\n  }\r\n\r\n  // Get computed volume from cache, calculate the data across the time frames,\r\n  // set the scalar data to the computedVolume, and create displaySet\r\n  async function onGenerateImage(operationName) {\r\n    const dynamicVolumeId = dynamicVolume.volumeId;\r\n\r\n    if (!dynamicVolumeId) {\r\n      return;\r\n    }\r\n\r\n    let computedVolume = cache.getVolume(computedVolumeId);\r\n\r\n    if (!computedVolume) {\r\n      computedVolume = await volumeLoader.createAndCacheDerivedVolume(dynamicVolumeId, {\r\n        volumeId: computedVolumeId,\r\n      });\r\n    }\r\n    const [start, end] = dimensionGroupRange;\r\n    // from start to end, with steps of 1\r\n    const frameNumbers = Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n\r\n    const options = {\r\n      dimensionGroupNumbers: operationName === 'SUBTRACT' ? [start, end] : frameNumbers,\r\n      targetVolume: computedVolume,\r\n    };\r\n\r\n    cstUtils.dynamicVolume.updateVolumeFromTimeData(dynamicVolume, operationName, options);\r\n\r\n    // If computed display set does not exist, create an object to be used as\r\n    // the displaySet. If it does exist, update the image data and vtkTexture\r\n    if (!computedDisplaySet) {\r\n      const displaySet = {\r\n        volumeLoaderSchema: computedVolume.volumeId.split(':')[0],\r\n        displaySetInstanceUID: uuidComputedVolume.current,\r\n        SOPClassHandlerId: SOPClassHandlerId,\r\n        Modality: dynamicVolume.metadata.Modality,\r\n        isMultiFrame: false,\r\n        numImageFrames: 1,\r\n        uid: uuidComputedVolume.current,\r\n        referenceDisplaySetUID: dynamicVolume.volumeId.split(':')[1],\r\n        madeInClient: true,\r\n        FrameOfReferenceUID: dynamicVolume.metadata.FrameOfReferenceUID,\r\n        isDerived: true,\r\n        imageIds: computedVolume.imageIds,\r\n      };\r\n      setComputedDisplaySet(displaySet);\r\n      renderGeneratedImage(displaySet);\r\n    } else {\r\n      commandsManager.runCommand('updateVolumeData', {\r\n        volume: computedVolume,\r\n      });\r\n      cornerstoneViewportService.getRenderingEngine().render();\r\n      renderGeneratedImage(computedDisplaySet);\r\n    }\r\n  }\r\n\r\n  const onPlayPauseChange = isPlaying => {\r\n    isPlaying ? handlePlay() : handleStop();\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    setIsPlaying(true);\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(activeViewportId);\r\n\r\n    if (!viewportInfo) {\r\n      return;\r\n    }\r\n\r\n    const { element } = viewportInfo;\r\n    cineService.playClip(element, { framesPerSecond: frameRate, viewportId: activeViewportId });\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setIsPlaying(false);\r\n    const { element } = cornerstoneViewportService.getViewportInfo(activeViewportId);\r\n    cineService.stopClip(element);\r\n  };\r\n\r\n  const handleSetFrameRate = newFrameRate => {\r\n    setFrameRate(newFrameRate);\r\n    handleStop();\r\n    handlePlay();\r\n  };\r\n\r\n  return (\r\n    <DynamicVolumeControls\r\n      fps={frameRate}\r\n      isPlaying={isPlaying}\r\n      onPlayPauseChange={onPlayPauseChange}\r\n      minFps={1}\r\n      maxFps={50}\r\n      onFpsChange={handleSetFrameRate}\r\n      currentDimensionGroupNumber={dimensionGroupNumberRendered}\r\n      numDimensionGroups={dynamicVolume?.numDimensionGroups || 1}\r\n      onDimensionGroupChange={dimensionGroupNumber => {\r\n        dynamicVolume.dimensionGroupNumber = dimensionGroupNumber;\r\n      }}\r\n      onGenerate={onGenerateImage}\r\n      onDynamicClick={displayingComputed ? () => renderDynamicImage(computedDisplaySet) : null}\r\n      onDoubleRangeChange={setDimensionGroupRange}\r\n      rangeValues={dimensionGroupRange}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport type { ServicesManager } from '@ohif/core';\r\n\r\nfunction WorkflowPanel({ servicesManager }: { servicesManager: ServicesManager }) {\r\n  const ProgressDropdownWithService =\r\n    servicesManager.services.customizationService.getCustomization(\r\n      'progressDropdownWithServiceComponent'\r\n    );\r\n\r\n  return (\r\n    <div\r\n      data-cy={'workflow-panel'}\r\n      className=\"bg-secondary-dark mb-1 px-3 py-4\"\r\n    >\r\n      <div className=\"mb-1\">Workflow</div>\r\n      <div>\r\n        <ProgressDropdownWithService servicesManager={servicesManager} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkflowPanel;\r\n","import DynamicDataPanel from './DynamicDataPanel';\r\nimport WorkflowPanel from './WorkflowPanel';\r\nimport PanelGenerateImage from './PanelGenerateImage';\r\n\r\nexport { DynamicDataPanel, WorkflowPanel, PanelGenerateImage };\r\n"],"names":[],"sourceRoot":""}