{"version":3,"file":"node_modules_itk-wasm_morphological-contour-interpolation_dist_index_js.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnBA;AACA;AACA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cdefault-web-worker.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cindex-common.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cindex-only.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cmorphological-contour-interpolation.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cpipeline-worker-url.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cpipelines-base-url.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@itk-wasm%5Cmorphological-contour-interpolation%5Cdist%5Cversion.js"],"sourcesContent":["// Generated file. To retain edits, remove this comment.\nimport { getDefaultWebWorker as itkWasmGetDefaultWebWorker, createWebWorker } from 'itk-wasm';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\nlet defaultWebWorker = null;\nasync function createNewWorker() {\n    const pipelineWorkerUrl = getPipelineWorkerUrl();\n    const pipelineWorkerUrlString = typeof pipelineWorkerUrl !== 'string' && typeof pipelineWorkerUrl?.href !== 'undefined' ? pipelineWorkerUrl.href : pipelineWorkerUrl;\n    defaultWebWorker = await createWebWorker(pipelineWorkerUrlString);\n}\nexport function setDefaultWebWorker(webWorker) {\n    defaultWebWorker = webWorker;\n}\nexport async function getDefaultWebWorker() {\n    if (defaultWebWorker !== null) {\n        if (defaultWebWorker.terminated) {\n            await createNewWorker();\n        }\n        return defaultWebWorker;\n    }\n    const itkWasmDefaultWebWorker = itkWasmGetDefaultWebWorker();\n    if (itkWasmDefaultWebWorker !== null) {\n        return itkWasmDefaultWebWorker;\n    }\n    await createNewWorker();\n    return defaultWebWorker;\n}\n//# sourceMappingURL=default-web-worker.js.map","// Generated file. To retain edits, remove this comment.\nexport { default as version } from './version.js';\n//# sourceMappingURL=index-common.js.map","// Generated file. To retain edits, remove this comment.\nexport * from './pipelines-base-url.js';\nexport * from './pipeline-worker-url.js';\nexport * from './default-web-worker.js';\nimport morphologicalContourInterpolation from './morphological-contour-interpolation.js';\nexport { morphologicalContourInterpolation };\n//# sourceMappingURL=index-only.js.map","// Generated file. To retain edits, remove this comment.\nexport * from './index-common.js';\nexport * from './index-only.js';\n//# sourceMappingURL=index.js.map","// Generated file. To retain edits, remove this comment.\nimport { InterfaceTypes, runPipeline } from 'itk-wasm';\nimport { getPipelinesBaseUrl } from './pipelines-base-url.js';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\nimport { getDefaultWebWorker } from './default-web-worker.js';\n/**\n * Interpolates contours between slices.\n *\n * @param {Image} inputImage - The input image\n * @param {MorphologicalContourInterpolationOptions} options - options object\n *\n * @returns {Promise<MorphologicalContourInterpolationResult>} - result object\n */\nasync function morphologicalContourInterpolation(inputImage, options = {}) {\n    const desiredOutputs = [\n        { type: InterfaceTypes.Image },\n    ];\n    const inputs = [\n        { type: InterfaceTypes.Image, data: inputImage },\n    ];\n    const args = [];\n    // Inputs\n    const inputImageName = '0';\n    args.push(inputImageName);\n    // Outputs\n    const outputImageName = '0';\n    args.push(outputImageName);\n    // Options\n    args.push('--memory-io');\n    if (options.label) {\n        args.push('--label', options.label.toString());\n    }\n    if (options.axis) {\n        args.push('--axis', options.axis.toString());\n    }\n    if (options.noHeuristicAlignment) {\n        options.noHeuristicAlignment && args.push('--no-heuristic-alignment');\n    }\n    if (options.noUseDistanceTransform) {\n        options.noUseDistanceTransform && args.push('--no-use-distance-transform');\n    }\n    if (options.useCustomSlicePositions) {\n        options.useCustomSlicePositions && args.push('--use-custom-slice-positions');\n    }\n    if (options.noUseExtrapolation) {\n        options.noUseExtrapolation && args.push('--no-use-extrapolation');\n    }\n    if (options.useBallStructuringElement) {\n        options.useBallStructuringElement && args.push('--use-ball-structuring-element');\n    }\n    if (options.labeledSliceIndicesAxis) {\n        args.push('--labeled-slice-indices-axis', options.labeledSliceIndicesAxis.toString());\n    }\n    if (options.labeledSliceIndicesLabel) {\n        args.push('--labeled-slice-indices-label', options.labeledSliceIndicesLabel.toString());\n    }\n    if (options.labeledSliceIndices) {\n        if (options.labeledSliceIndices.length < 1) {\n            throw new Error('\"labeled-slice-indices\" option must have a length > 1');\n        }\n        args.push('--labeled-slice-indices');\n        await Promise.all(options.labeledSliceIndices.map(async (value) => {\n            args.push(value.toString());\n        }));\n    }\n    const pipelinePath = 'morphological-contour-interpolation';\n    let workerToUse = options?.webWorker;\n    if (workerToUse === undefined) {\n        workerToUse = await getDefaultWebWorker();\n    }\n    const { webWorker: usedWebWorker, returnValue, stderr, outputs } = await runPipeline(pipelinePath, args, desiredOutputs, inputs, { pipelineBaseUrl: getPipelinesBaseUrl(), pipelineWorkerUrl: getPipelineWorkerUrl(), webWorker: workerToUse, noCopy: options?.noCopy });\n    if (returnValue !== 0 && stderr !== \"\") {\n        throw new Error(stderr);\n    }\n    const result = {\n        webWorker: usedWebWorker,\n        outputImage: outputs[0]?.data,\n    };\n    return result;\n}\nexport default morphologicalContourInterpolation;\n//# sourceMappingURL=morphological-contour-interpolation.js.map","// Generated file. To retain edits, remove this comment.\n// Generated file. To retain edits, remove this comment.\nimport { getPipelineWorkerUrl as itkWasmGetPipelineWorkerUrl } from 'itk-wasm';\nlet pipelineWorkerUrl;\n// Use the version shipped with an app's bundler\nconst defaultPipelineWorkerUrl = null;\nexport function setPipelineWorkerUrl(workerUrl) {\n    pipelineWorkerUrl = workerUrl;\n}\nexport function getPipelineWorkerUrl() {\n    if (typeof pipelineWorkerUrl !== 'undefined') {\n        return pipelineWorkerUrl;\n    }\n    const itkWasmPipelineWorkerUrl = itkWasmGetPipelineWorkerUrl();\n    if (typeof itkWasmPipelineWorkerUrl !== 'undefined') {\n        return itkWasmPipelineWorkerUrl;\n    }\n    return defaultPipelineWorkerUrl;\n}\n//# sourceMappingURL=pipeline-worker-url.js.map","// Generated file. To retain edits, remove this comment.\n// Generated file. To retain edits, remove this comment.\nimport { getPipelinesBaseUrl as itkWasmGetPipelinesBaseUrl } from 'itk-wasm';\nimport version from './version.js';\nlet pipelinesBaseUrl;\nlet defaultPipelinesBaseUrl = `https://cdn.jsdelivr.net/npm/@itk-wasm/morphological-contour-interpolation@${version}/dist/pipelines`;\nexport function setPipelinesBaseUrl(baseUrl) {\n    pipelinesBaseUrl = baseUrl;\n}\nexport function getPipelinesBaseUrl() {\n    if (typeof pipelinesBaseUrl !== 'undefined') {\n        return pipelinesBaseUrl;\n    }\n    const itkWasmPipelinesBaseUrl = itkWasmGetPipelinesBaseUrl();\n    if (typeof itkWasmPipelinesBaseUrl !== 'undefined') {\n        return itkWasmPipelinesBaseUrl;\n    }\n    return defaultPipelinesBaseUrl;\n}\n//# sourceMappingURL=pipelines-base-url.js.map","const version = \"1.1.0\";\nexport default version;\n//# sourceMappingURL=version.js.map"],"names":[],"sourceRoot":""}