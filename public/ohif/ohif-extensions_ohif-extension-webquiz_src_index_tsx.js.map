{"version":3,"file":"ohif-extensions_ohif-extension-webquiz_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5CQuestions%5CbtnComponent.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5CWebQuizSidePanelComponent.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5Cindex.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from '@ohif/ui';\r\n\r\nfunction BtnComponent( { annotationData }) {\r\n\r\n  const handleButtonClick = () => {\r\n    console.log('Number of annotations: ', annotationData.length);\r\n    window.parent.postMessage({ type: 'annotation', annotationdata: annotationData }, '*');\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <div>\r\n          <Button onClick={handleButtonClick}>Post</Button>\r\n        </div>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default BtnComponent\r\n","import React from 'react';\r\nimport { sqrt } from 'math.js'\r\nimport BtnComponent from './Questions/btnComponent';\r\n// import ReadFile from './utils/ReadFile';\r\n\r\nimport * as cornerstone from '@cornerstonejs/core';\r\nimport * as cornerstoneTools from '@cornerstonejs/tools';\r\n\r\nconst l_annotationdata = [];\r\n\r\n/**\r\n *  Creating a React component to be used as a side panel in OHIF.\r\n *  Also performs a simple div that uses Math.js to output the square root.\r\n */\r\nfunction WebQuizSidePanelComponent() {\r\n\r\n    cornerstone.eventTarget.addEventListener(cornerstoneTools.Enums.Events.ANNOTATION_COMPLETED, (o_annotationdata) => {\r\n        console.log(\"boom\");\r\n        const bIsNotIncluded = l_annotationdata.findIndex(item => item === o_annotationdata.detail) === -1;\r\n        if (bIsNotIncluded) {\r\n            l_annotationdata.push(o_annotationdata.detail);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"text-white w-full text-center\">\r\n            {`Web Quiz version : ${sqrt(9)}`}\r\n            <BtnComponent annotationData = {l_annotationdata} />\r\n        </div>\r\n    );\r\n}\r\nexport default WebQuizSidePanelComponent;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { id } from './id';\r\nimport WebQuizSidePanelComponent from './WebQuizSidePanelComponent';\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nexport default {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * Perform any pre-registration tasks here. This is called before the extension\r\n   * is registered. Usually we run tasks such as: configuring the libraries\r\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\r\n   * this extension is providing.\r\n   */\r\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {},\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule: ({ servicesManager, commandsManager, extensionManager }) => {\r\n    return [\r\n      {\r\n        name: \"webquiz\",\r\n        iconname: \"BainesLogo\",\r\n        iconlabel: \"\",\r\n        label: \"Web Quiz\",\r\n        component: WebQuizSidePanelComponent\r\n      }\r\n    ]\r\n  },\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getViewportModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * ToolbarModule should provide a list of tool buttons that will be available in OHIF\r\n   * for Modes to consume and use in the toolbar. Each tool button is defined by\r\n   * {name, defaultComponent, clickHandler }. Examples include radioGroupIcons and\r\n   * splitButton toolButton that the default extension is providing.\r\n   */\r\n  getToolbarModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * LayoutTemplateMOdule should provide a list of layout templates that will be\r\n   * available in OHIF for Modes to consume and use to layout the viewer.\r\n   * Each layout template is defined by a { name, id, component}. Examples include\r\n   * the default layout template provided by the default extension which renders\r\n   * a Header, left and right sidebars, and a viewport section in the middle\r\n   * of the viewer.\r\n   */\r\n  getLayoutTemplateModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * HangingProtocolModule should provide a list of hanging protocols that will be\r\n   * available in OHIF for Modes to use to decide on the structure of the viewports\r\n   * and also the series that hung in the viewports. Each hanging protocol is defined by\r\n   * { name, protocols}. Examples include the default hanging protocol provided by\r\n   * the default extension that shows 2x2 viewports.\r\n   */\r\n  getHangingProtocolModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * CommandsModule should provide a list of commands that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each command is defined by\r\n   * an object of { actions, definitions, defaultContext } where actions is an\r\n   * object of functions, definitions is an object of available commands, their\r\n   * options, and defaultContext is the default context for the command to run against.\r\n   */\r\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * ContextModule should provide a list of context that will be available in OHIF\r\n   * and will be provided to the Modes. A context is a state that is shared OHIF.\r\n   * Context is defined by an object of { name, context, provider }. Examples include\r\n   * the measurementTracking context provided by the measurementTracking extension.\r\n   */\r\n  getContextModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * DataSourceModule should provide a list of data sources to be used in OHIF.\r\n   * DataSources can be used to map the external data formats to the OHIF's\r\n   * native format. DataSources are defined by an object of { name, type, createDataSource }.\r\n   */\r\n  getDataSourcesModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n};\r\n"],"names":[],"sourceRoot":""}