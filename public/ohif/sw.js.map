{"version":3,"sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cplatform%5Capp%5Csrc%5Cservice-worker.js"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;;AAGA;AACA;AAGA;AACA;;AAGA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"sw.js","sourceRoot":"","sourcesContent":["navigator.serviceWorker.getRegistrations().then(function (registrations) {\r\n  for (let registration of registrations) {\r\n    registration.unregister();\r\n  }\r\n});\r\n\r\n// https://developers.google.com/web/tools/workbox/guides/troubleshoot-and-debug\r\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/5.0.0-beta.1/workbox-sw.js');\r\n\r\n// Install newest\r\n// https://developers.google.com/web/tools/workbox/modules/workbox-core\r\nworkbox.core.skipWaiting();\r\nworkbox.core.clientsClaim();\r\n\r\n// Cache static assets that aren't precached\r\nworkbox.routing.registerRoute(\r\n  /\\.(?:js|css|json5)$/,\r\n  new workbox.strategies.StaleWhileRevalidate({\r\n    cacheName: 'static-resources',\r\n  })\r\n);\r\n\r\n// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.\r\nworkbox.routing.registerRoute(\r\n  /^https:\\/\\/fonts\\.googleapis\\.com/,\r\n  new workbox.strategies.StaleWhileRevalidate({\r\n    cacheName: 'google-fonts-stylesheets',\r\n  })\r\n);\r\n\r\n// Cache the underlying font files with a cache-first strategy for 1 year.\r\nworkbox.routing.registerRoute(\r\n  /^https:\\/\\/fonts\\.gstatic\\.com/,\r\n  new workbox.strategies.CacheFirst({\r\n    cacheName: 'google-fonts-webfonts',\r\n    plugins: [\r\n      new workbox.cacheableResponse.CacheableResponsePlugin({\r\n        statuses: [0, 200],\r\n      }),\r\n      new workbox.expiration.ExpirationPlugin({\r\n        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 Year\r\n        maxEntries: 30,\r\n      }),\r\n    ],\r\n  })\r\n);\r\n\r\n// MESSAGE HANDLER\r\nself.addEventListener('message', event => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    switch (event.data.type) {\r\n      case 'SKIP_WAITING':\r\n        // TODO: We'll eventually want this to be user prompted\r\n        // workbox.core.skipWaiting();\r\n        // workbox.core.clientsClaim();\r\n        // TODO: Global notification to indicate incoming reload\r\n        break;\r\n\r\n      default:\r\n        console.warn(`SW: Invalid message type: ${event.data.type}`);\r\n    }\r\n  }\r\n});\r\n\r\nworkbox.precaching.precacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// TODO: Cache API\r\n// https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api\r\n// Store DICOMs?\r\n// Clear Service Worker cache?\r\n// navigator.storage.estimate().then(est => console.log(est)); (2GB?)\r\n"]}