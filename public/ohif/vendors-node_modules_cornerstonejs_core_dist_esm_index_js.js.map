{"version":3,"file":"vendors-node_modules_cornerstonejs_core_dist_esm_index_js.js","mappingsl9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpojjwgxbrfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnjpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACdnpjqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzxzpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnp/CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnhDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpnrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACblnhtbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjIA;AACA;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACddA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACflGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChthHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClhpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxjnhxjgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChvjvnnkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtlPA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnjjtvjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClzhjtlplBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzrmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5sCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClvocA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/vBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACbrtrqvvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChjlkjxvzxnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACphrrrllexshrhqdbpvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxitnlglhlh1CA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACdjPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACtrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvxjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClvjlrgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACzjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC3OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxrlbltLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClrlpWA;AACA;AACA;AACA;AACA;AAeuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACHA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvlHA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxjBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACflBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnJA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAIA;AACA;AAIA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAOA;AACA;AAGA;AACA;AAOA;AACA;AAGA;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrjBA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACttEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAQA;AACA;AAkCA;AACA;AAMA;AACA;AAMA;AACA;AAMA;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CBaseVolumeViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CCanvasActor%5CCanvasMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CCanvasActor%5CCanvasProperties.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CCanvasActor%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CRenderingEngine.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CStackViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CVideoViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CVolumeViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CVolumeViewport3D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CWSIViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CgetRenderingEngine.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CaddImageSlicesToViewports.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CaddVolumesToViewports.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Ccolors%5Ccolormap.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Ccolors%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Ccolors%5ClookupTable.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5CdrawImageSync.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CcalculateTransform.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CcanvasToPixel.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CcomputeAutoVoi.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CcorrectShift.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CcreateViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CdoesImageNeedToBeRendered.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CfitToWindow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgenerateColorLUT.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgenerateLut.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetDefaultViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetImageFitScale.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetImageSize.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetLut.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetModalityLut.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetTransform.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CgetVOILut.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CinitializeRenderCanvas.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5ClutMatches.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5Cnow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CpixelToCanvas.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CrenderColorImage.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CrenderGrayscaleImage.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CrenderPseudoColorImage.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CresetCamera.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5Cresize.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CsaveLastRendered.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CsetDefaultViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CsetToPixelCoordinateSystem.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredColorPixelDataToCanvasImageData.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredPixelDataToCanvasImageData.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredPixelDataToCanvasImageDataPET.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredPixelDataToCanvasImageDataPseudocolorLUT.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredPixelDataToCanvasImageDataPseudocolorLUTPET.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredPixelDataToCanvasImageDataRGBA.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5CstoredRGBAPixelDataToCanvasImageData.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5Ctransform.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcpuFallback%5Crendering%5Cvalidator.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcreateVolumeActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CcreateVolumeMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CgetOrCreateCanvas.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CsetDefaultVolumeVOI.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CsetVolumesForViewports.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CviewportTypeToViewportClass.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CviewportTypeUsesCustomRenderingPipeline.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Chelpers%5CvolumeNewImageEventDispatcher.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CrenderingEngineCache.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkOffscreenMultiRenderWindow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkSharedVolumeMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkSlabCamera.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkStreamingOpenGLRenderWindow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkStreamingOpenGLTexture.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkStreamingOpenGLViewNodeFactory.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CRenderingEngine%5CvtkClasses%5CvtkStreamingOpenGLVolumeMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CSettings.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Ccache.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CBaseStreamingImageVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CContour.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CContourSet.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CImageVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CMesh.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CStreamingDynamicImageVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CStreamingImageVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cclasses%5CSurface.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Ccache%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5CbackgroundColors.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5CcpuColormaps.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5Cepsilon.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5CmicroscopyViewportCss.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5CmprCameraValues.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5Crendering.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cconstants%5CviewportPresets.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CBlendModes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CCalibrationTypes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CContourType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CDynamicOperatorType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CEvents.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CGenerateImageType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CGeometryType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CImageQualityStatus.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CInterpolationType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CMeshType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CMetadataModules.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5COrientationAxis.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CRequestType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CVOILUTFunctionType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CVideoEnums.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CViewportStatus.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CViewportType.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5CVoxelManagerEnum.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cenums%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CeventTarget.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CgetEnabledElement.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cinit.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CProgressiveRetrieveImages.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cconfiguration%5CinterleavedRetrieve.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cconfiguration%5CsequentialRetrieve.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cconfiguration%5CsingleRetrieve.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CcornerstoneMeshLoader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CcornerstoneStreamingDynamicImageVolumeLoader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CcornerstoneStreamingImageVolumeLoader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CfillNearbyFrames.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CgeometryLoader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CimageLoader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cutils%5CcontourSet%5CcreateContourSet.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cutils%5CcontourSet%5CvalidateContourSet.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cutils%5Cmesh%5CcreateMesh.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cutils%5Cmesh%5CvalidateMesh.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cutils%5Csurface%5CcreateSurface.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5Cutils%5Csurface%5CvalidateSurface.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cloaders%5CvolumeLoader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CmetaData.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CrequestPool%5CimageLoadPoolManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CrequestPool%5CimageRetrievalPoolManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CrequestPool%5CrequestPoolManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CFrameRange.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CPointsManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CProgressiveIterator.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CRLEVoxelMap.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CVoxelManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CactorCheck.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CadjustInitialViewUp.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CapplyPreset.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CautoLoad.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CbuildMetadata.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcalculateNeighborhoodStats.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcalculateSpacingBetweenImageIds.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcalculateViewportsSpatialRegistration.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcalibratedPixelSpacingMetadataProvider.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cclamp.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cclip.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Ccolor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Ccolormap.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CconvertStackToVolumeViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CconvertToGrayscale.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CconvertVolumeToStackViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcreateLinearRGBTransferFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcreatePositionCallback.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcreateSigmoidRGBTransferFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CcreateSubVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cdecimate.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CdeepClone.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CdeepEqual.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CdeepFreeze.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CdeepMerge.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CeventListener%5CMultiTargetEventListenerManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CeventListener%5CTargetEventListeners.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CeventListener%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cfnv1aHash.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgenerateVolumePropsFromImageIds.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgenericMetadataProvider.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetBufferConfiguration.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetClosestImageId.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetClosestStackImageIndexForPoint.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetCurrentVolumeViewportSlice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetDynamicVolumeInfo.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetImageDataMetadata.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetImageLegacy.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetImageSliceDataForVolumeViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetMinMax.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetPixelSpacingInformation.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetRandomSampleFromArray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetRuntimeId.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetScalingParameters.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetSliceRange.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetSpacingInNormalDirection.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetTargetVolumeAndSpacingInNormalDir.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetViewportImageCornersInWorld.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetViewportImageIds.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetViewportModality.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetViewportsWithImageURI.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetViewportsWithVolumeId.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVoiFromSigmoidRGBTransferFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVolumeActorCorners.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVolumeDirectionVectors.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVolumeId.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVolumeSliceRangeInfo.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVolumeViewportScrollInfo.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CgetVolumeViewportsContainingSameVolumes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5ChasFloatScalingParameters.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5ChasNaNValues.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5ChistoryMemo%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CimageIdToURI.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CimageRetrieveMetadataProvider.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CimageToWorldCoords.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CindexWithinDimensions.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CinvertRgbTransferFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CisEqual.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CisOpposite.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CisPTPrescaledWithSUV.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CisValidVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CisVideoTransferSyntax.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CjumpToSlice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CloadImageToCanvas.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Clogger.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Clogit.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CmakeVolumeMetadata.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cplanar.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CpointInShapeCallback.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CreflectVector.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CrenderToCanvasCPU.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CrenderToCanvasGPU.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CroundNumber.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CscaleArray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CscaleRgbTransferFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cscroll.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CsnapFocalPointToSlice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CsortImageIdsAndGetSpacing.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CspatialRegistrationMetadataProvider.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CsplitImageIdsBy4DTags.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtextureSupport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtransferFunctionUtils.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtransformCanvasToIJK.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtransformIJKToCanvas.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtransformIndexToWorld.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtransformWorldToIndex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CtriggerEvent.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CupdateVTKImageDataWithCornerstoneImage.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5Cuuidv4.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CwindowLevel.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cutilities%5CworldToImageCoords.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5Cversion.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@cornerstonejs%5Ccore%5Cdist%5Cesm%5CwebWorkerManager%5CwebWorkerManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CBase64.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CCellArray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CEndian.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CHalfFloat.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CLookupTable.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CMath.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CMatrixBuilder.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CPoints.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CScalarsToColors.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CScalarsToColors%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CCore%5CStringArray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CCell.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CCellLinks.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CCellTypes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CCellTypes%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CLine.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CLine%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CPiecewiseFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CPointSet.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CPolyData.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CPolyData%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CSelectionNode.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CSelectionNode%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CDataModel%5CTriangle.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CCommon%5CTransform%5CTransform.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CFilters%5CCore%5CCutter.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CFilters%5CCore%5CPolyDataNormals.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CFilters%5CGeneral%5CClosedPolyLineToSurfaceFilter.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CFilters%5CGeneral%5CImageDataOutlineFilter.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CFilters%5CSources%5CCubeSource.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CCore%5CBinaryHelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CCore%5CDataAccessHelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CCore%5CDataAccessHelper%5CLiteHttpDataAccessHelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CGeometry%5CPLYReader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CGeometry%5CSTLReader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CMisc%5CMTLReader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CMisc%5COBJReader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CXML%5CXMLPolyDataReader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CIO%5CXML%5CXMLReader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CAbstractImageMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CAbstractImageMapper%5Chelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CAbstractMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CAbstractMapper3D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CCamera.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CColorTransferFunction.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CColorTransferFunction%5CColorMaps.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CColorTransferFunction%5CColorMaps.json.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CColorTransferFunction%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CCubeAxesActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CHardwareSelector.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CImageCPRMapper%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CImageMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CImageMapper%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CImageProperty.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CImageProperty%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CImageSlice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CLight.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CMapper2D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CMapper%5CCoincidentTopologyHelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CMapper%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CMapper%5CStatic.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProp.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProp3D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProp%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProperty.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProperty2D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProperty2D%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CProperty%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CRenderWindow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CRenderWindowInteractor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CRenderWindowInteractor%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CRenderer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CScalarBarActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CTexture.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CViewport.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CVolumeMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CVolumeMapper%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CVolumeProperty.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CCore%5CVolumeProperty%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CActor2D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CBufferObject.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CBufferObject%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CCamera.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CCellArrayBufferObject.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CCubeAxesActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CForwardPass.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CFramebuffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CGlyph3DMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CHardwareSelector.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CHardwareSelector%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CHelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CImageCPRMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CImageMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CImageResliceMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CImageSlice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5COrderIndependentTranslucentPass.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CPixelSpaceCallbackMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CPolyDataMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CPolyDataMapper2D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CRenderWindow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CRenderWindow%5CContextProxy.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CRenderWindow%5CresourceSharingHelper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CRenderer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CReplacementShaderMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CScalarBarActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CShader.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CShaderCache.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CShaderProgram.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CSkybox.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CSphereMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CStickMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CTexture.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CTextureUnitManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CTexture%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CTexture%5CsupportsNorm16Linear.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CVertexArrayObject.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CViewNodeFactory.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5CVolumeMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkImageResliceMapperFS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkImageResliceMapperVS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkPolyData2DFS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkPolyData2DVS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkPolyDataFS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkPolyDataVS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkSphereMapperVS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkStickMapperVS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkVolumeFS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5COpenGL%5Cglsl%5CvtkVolumeVS.glsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CProfiles%5CGeometry.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CProfiles%5CVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CSceneGraph%5CRenderPass.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CSceneGraph%5CRenderWindowViewNode.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CSceneGraph%5CViewNode.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CSceneGraph%5CViewNodeFactory.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CActor2D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CBindGroup.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CBuffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CBufferManager.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CBufferManager%5CConstants.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CCamera.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CCellArrayMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CCubeAxesActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CFullScreenQuad.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CImageMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CImageSlice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CIndexBuffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CPipeline.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CPixelSpaceCallbackMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CPolyDataMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CPolyDataMapper2D.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CRenderer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CSampler.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CScalarBarActor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CShaderCache.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CShaderDescription.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CShaderModule.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CSimpleMapper.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CStorageBuffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CTexture.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CTextureView.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CTypes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CUniformBuffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CVertexInput.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CViewNodeFactory.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5CRendering%5CWebGPU%5CVolume.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5C@kitware%5Cvtk.js%5Cmacros.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cfflate%5Cesm%5Cbrowser.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cloglevel%5Clib%5Cloglevel.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cspark-md5%5Cspark-md5.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cxmlbuilder2%5Clib%5Cxmlbuilder2.min.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Carray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cascending.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cbin.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cbisect.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cbisector.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cblur.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cconstant.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Ccount.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Ccross.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Ccumsum.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cdescending.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cdeviation.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cdifference.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cdisjoint.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cevery.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cextent.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cfilter.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cfsum.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cgreatest.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5CgreatestIndex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cgroup.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5CgroupSort.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cidentity.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cintersection.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cleast.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5CleastIndex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmap.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmax.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5CmaxIndex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmean.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmedian.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmerge.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmin.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5CminIndex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cmode.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cnice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cnumber.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cpairs.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cpermute.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cquantile.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cquickselect.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Crange.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Crank.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Creduce.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Creverse.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cscan.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cshuffle.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Csome.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Csort.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Csubset.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Csum.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Csuperset.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cthreshold%5CfreedmanDiaconis.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cthreshold%5Cscott.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cthreshold%5Csturges.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cticks.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Ctranspose.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cunion.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Cvariance.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-array%5Csrc%5Czip.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-color%5Csrc%5Ccolor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-color%5Csrc%5Ccubehelix.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-color%5Csrc%5Cdefine.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-color%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-color%5Csrc%5Clab.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-color%5Csrc%5Cmath.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CdefaultLocale.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5Cexponent.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatDecimal.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatGroup.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatNumerals.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatPrefixAuto.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatRounded.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatSpecifier.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatTrim.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CformatTypes.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5Cidentity.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5Clocale.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CprecisionFixed.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CprecisionPrefix.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-format%5Csrc%5CprecisionRound.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Carray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cbasis.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5CbasisClosed.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Ccolor.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cconstant.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Ccubehelix.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cdate.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cdiscrete.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Chcl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Chsl.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Chue.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Clab.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cnumber.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5CnumberArray.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cobject.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cpiecewise.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cquantize.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Crgb.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cround.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cstring.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Ctransform%5Cdecompose.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Ctransform%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Ctransform%5Cparse.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Cvalue.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-interpolate%5Csrc%5Czoom.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cband.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cconstant.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Ccontinuous.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cdiverging.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cidentity.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cinit.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Clinear.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Clog.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cnice.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cnumber.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cordinal.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cpow.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cquantile.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cquantize.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cradial.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Csequential.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5CsequentialQuantile.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Csymlog.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Cthreshold.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5CtickFormat.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5Ctime.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-scale%5Csrc%5CutcTime.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time-format%5Csrc%5CdefaultLocale.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time-format%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time-format%5Csrc%5CisoFormat.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time-format%5Csrc%5CisoParse.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time-format%5Csrc%5Clocale.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cday.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cduration.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Chour.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cinterval.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cmillisecond.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cminute.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cmonth.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Csecond.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cticks.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cweek.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cd3-time%5Csrc%5Cyear.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cinternmap%5Csrc%5Cindex.js"],"sourcesContent":["import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { vec2, vec3 } from 'gl-matrix';\nimport cache from '../cache/cache';\nimport { MPR_CAMERA_VALUES, RENDERING_DEFAULTS, VIEWPORT_PRESETS, } from '../constants';\nimport { Events, MetadataModules, ViewportStatus, VOILUTFunctionType, } from '../enums';\nimport ViewportType from '../enums/ViewportType';\nimport eventTarget from '../eventTarget';\nimport { getShouldUseCPURendering } from '../init';\nimport triggerEvent from '../utilities/triggerEvent';\nimport * as colormapUtils from '../utilities/colormap';\nimport invertRgbTransferFunction from '../utilities/invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from '../utilities/createSigmoidRGBTransferFunction';\nimport transformWorldToIndex from '../utilities/transformWorldToIndex';\nimport { findMatchingColormap, updateOpacity as colormapUpdateOpacity, updateThreshold as colormapUpdateThreshold, getThresholdValue, getMaxOpacity, } from '../utilities/colormap';\nimport { getTransferFunctionNodes } from '../utilities/transferFunctionUtils';\nimport createVolumeActor from './helpers/createVolumeActor';\nimport volumeNewImageEventDispatcher, { resetVolumeNewImageState, } from './helpers/volumeNewImageEventDispatcher';\nimport Viewport from './Viewport';\nimport vtkSlabCamera from './vtkClasses/vtkSlabCamera';\nimport getVolumeViewportScrollInfo from '../utilities/getVolumeViewportScrollInfo';\nimport { actorIsA, isImageActor } from '../utilities/actorCheck';\nimport snapFocalPointToSlice from '../utilities/snapFocalPointToSlice';\nimport getVoiFromSigmoidRGBTransferFunction from '../utilities/getVoiFromSigmoidRGBTransferFunction';\nimport isEqual, { isEqualNegative } from '../utilities/isEqual';\nimport applyPreset from '../utilities/applyPreset';\nimport imageIdToURI from '../utilities/imageIdToURI';\nimport uuidv4 from '../utilities/uuidv4';\nimport * as metaData from '../metaData';\nclass BaseVolumeViewport extends Viewport {\n    constructor(props) {\n        super(props);\n        this.useCPURendering = false;\n        this.perVolumeIdDefaultProperties = new Map();\n        this.viewportProperties = {};\n        this.volumeIds = new Set();\n        this.setRotation = (rotation) => {\n            const panFit = this.getPan(this.fitToCanvasCamera);\n            const pan = this.getPan();\n            const previousCamera = this.getCamera();\n            const panSub = vec2.sub([0, 0], panFit, pan);\n            this.setPan(panSub, false);\n            const { flipVertical } = this.getCamera();\n            const initialViewUp = flipVertical\n                ? vec3.negate([0, 0, 0], this.initialViewUp)\n                : this.initialViewUp;\n            this.setCameraNoEvent({\n                viewUp: initialViewUp,\n            });\n            this.rotateCamera(rotation);\n            const afterPan = this.getPan();\n            const afterPanFit = this.getPan(this.fitToCanvasCamera);\n            const newCenter = vec2.sub([0, 0], afterPan, afterPanFit);\n            const newOffset = vec2.add([0, 0], panFit, newCenter);\n            this.setPan(newOffset, false);\n            if (this._suppressCameraModifiedEvents) {\n                return;\n            }\n            const camera = this.getCamera();\n            const eventDetail = {\n                previousCamera,\n                camera,\n                element: this.element,\n                viewportId: this.id,\n                renderingEngineId: this.renderingEngineId,\n            };\n            triggerEvent(this.element, Events.CAMERA_MODIFIED, eventDetail);\n        };\n        this.getDefaultProperties = (volumeId) => {\n            let volumeProperties;\n            if (volumeId !== undefined) {\n                volumeProperties = this.perVolumeIdDefaultProperties.get(volumeId);\n            }\n            if (volumeProperties !== undefined) {\n                return volumeProperties;\n            }\n            return {\n                ...this.globalDefaultProperties,\n            };\n        };\n        this.getProperties = (volumeId) => {\n            const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n            if (!applicableVolumeActorInfo) {\n                return;\n            }\n            const { colormap: latestColormap, VOILUTFunction, interpolationType, invert, slabThickness, preset, } = this.viewportProperties;\n            volumeId ||= this.getVolumeId();\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                return null;\n            }\n            const volumeActorEntry = this.getActors().find((actorEntry) => {\n                return actorEntry.referencedId === volumeId;\n            });\n            if (!volumeActorEntry) {\n                return;\n            }\n            const volumeActor = volumeActorEntry.actor;\n            const cfun = volumeActor.getProperty().getRGBTransferFunction(0);\n            const [lower, upper] = this.viewportProperties?.VOILUTFunction === 'SIGMOID'\n                ? getVoiFromSigmoidRGBTransferFunction(cfun)\n                : cfun.getRange();\n            const voiRange = { lower, upper };\n            const volumeColormap = this.getColormap(volumeId);\n            const colormap = volumeId && volumeColormap ? volumeColormap : latestColormap;\n            return {\n                colormap: colormap,\n                voiRange: voiRange,\n                VOILUTFunction: VOILUTFunction,\n                interpolationType: interpolationType,\n                invert: invert,\n                slabThickness: slabThickness,\n                preset,\n            };\n        };\n        this.getColormap = (volumeId) => {\n            const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n            if (!applicableVolumeActorInfo) {\n                return;\n            }\n            const { volumeActor } = applicableVolumeActorInfo;\n            const cfun = this._getOrCreateColorTransferFunction(volumeId);\n            const { nodes } = cfun.getState();\n            const RGBPoints = nodes.reduce((acc, node) => {\n                acc.push(node.x, node.r, node.g, node.b);\n                return acc;\n            }, []);\n            const matchedColormap = findMatchingColormap(RGBPoints, volumeActor) || {};\n            const threshold = getThresholdValue(volumeActor);\n            const opacity = getMaxOpacity(volumeActor);\n            matchedColormap.threshold = threshold;\n            matchedColormap.opacity = opacity;\n            return matchedColormap;\n        };\n        this.getRotation = () => {\n            const { viewUp: currentViewUp, viewPlaneNormal, flipVertical, } = this.getCameraNoRotation();\n            const initialViewUp = flipVertical\n                ? vec3.negate([0, 0, 0], this.initialViewUp)\n                : this.initialViewUp;\n            if (!initialViewUp) {\n                return 0;\n            }\n            const initialToCurrentViewUpAngle = (vec3.angle(initialViewUp, currentViewUp) * 180) / Math.PI;\n            const initialToCurrentViewUpCross = vec3.cross([0, 0, 0], initialViewUp, currentViewUp);\n            const normalDot = vec3.dot(initialToCurrentViewUpCross, viewPlaneNormal);\n            const value = normalDot >= 0\n                ? initialToCurrentViewUpAngle\n                : (360 - initialToCurrentViewUpAngle) % 360;\n            return value;\n        };\n        this.getFrameOfReferenceUID = () => {\n            return this._FrameOfReferenceUID;\n        };\n        this.canvasToWorld = (canvasPos) => {\n            const vtkCamera = this.getVtkActiveCamera();\n            vtkCamera.setIsPerformingCoordinateTransformation?.(true);\n            const renderer = this.getRenderer();\n            const displayCoords = this.getVtkDisplayCoords(canvasPos);\n            const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n            const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n            const worldCoord = openGLRenderWindow.displayToWorld(displayCoords[0], displayCoords[1], displayCoords[2], renderer);\n            vtkCamera.setIsPerformingCoordinateTransformation?.(false);\n            return [worldCoord[0], worldCoord[1], worldCoord[2]];\n        };\n        this.getVtkDisplayCoords = (canvasPos) => {\n            const devicePixelRatio = window.devicePixelRatio || 1;\n            const canvasPosWithDPR = [\n                canvasPos[0] * devicePixelRatio,\n                canvasPos[1] * devicePixelRatio,\n            ];\n            const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n            const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n            const size = openGLRenderWindow.getSize();\n            const displayCoord = [\n                canvasPosWithDPR[0] + this.sx,\n                canvasPosWithDPR[1] + this.sy,\n            ];\n            displayCoord[1] = size[1] - displayCoord[1];\n            return [displayCoord[0], displayCoord[1], 0];\n        };\n        this.worldToCanvas = (worldPos) => {\n            const vtkCamera = this.getVtkActiveCamera();\n            vtkCamera.setIsPerformingCoordinateTransformation?.(true);\n            const renderer = this.getRenderer();\n            const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n            const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n            const size = openGLRenderWindow.getSize();\n            const displayCoord = openGLRenderWindow.worldToDisplay(...worldPos, renderer);\n            displayCoord[1] = size[1] - displayCoord[1];\n            const canvasCoord = [\n                displayCoord[0] - this.sx,\n                displayCoord[1] - this.sy,\n            ];\n            const devicePixelRatio = window.devicePixelRatio || 1;\n            const canvasCoordWithDPR = [\n                canvasCoord[0] / devicePixelRatio,\n                canvasCoord[1] / devicePixelRatio,\n            ];\n            vtkCamera.setIsPerformingCoordinateTransformation(false);\n            return canvasCoordWithDPR;\n        };\n        this.hasImageURI = (imageURI) => {\n            const volumeActors = this.getActors().filter((actorEntry) => actorIsA(actorEntry, 'vtkVolume'));\n            return volumeActors.some(({ uid, referencedId }) => {\n                const volume = cache.getVolume(referencedId || uid);\n                if (!volume?.imageIds) {\n                    return false;\n                }\n                const volumeImageURIs = volume.imageIds.map(imageIdToURI);\n                return volumeImageURIs.includes(imageURI);\n            });\n        };\n        this.getImageIds = (volumeId) => {\n            const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n            if (!applicableVolumeActorInfo) {\n                throw new Error(`No actor found for the given volumeId: ${volumeId}`);\n            }\n            const volumeIdToUse = applicableVolumeActorInfo.volumeId;\n            const imageVolume = cache.getVolume(volumeIdToUse);\n            if (!imageVolume) {\n                throw new Error(`imageVolume with id: ${volumeIdToUse} does not exist in cache`);\n            }\n            return imageVolume.imageIds;\n        };\n        this.useCPURendering = getShouldUseCPURendering();\n        if (this.useCPURendering) {\n            throw new Error('VolumeViewports cannot be used whilst CPU Fallback Rendering is enabled.');\n        }\n        const renderer = this.getRenderer();\n        const camera = vtkSlabCamera.newInstance();\n        renderer.setActiveCamera(camera);\n        switch (this.type) {\n            case ViewportType.ORTHOGRAPHIC:\n                camera.setParallelProjection(true);\n                break;\n            case ViewportType.VOLUME_3D:\n                camera.setParallelProjection(true);\n                break;\n            case ViewportType.PERSPECTIVE:\n                camera.setParallelProjection(false);\n                break;\n            default:\n                throw new Error(`Unrecognized viewport type: ${this.type}`);\n        }\n        this.initializeVolumeNewImageEventDispatcher();\n    }\n    static get useCustomRenderingPipeline() {\n        return false;\n    }\n    getSliceViewInfo() {\n        throw new Error('Method not implemented.');\n    }\n    applyViewOrientation(orientation, resetCamera = true) {\n        const { viewPlaneNormal, viewUp } = this._getOrientationVectors(orientation);\n        const camera = this.getVtkActiveCamera();\n        camera.setDirectionOfProjection(-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]);\n        camera.setViewUpFrom(viewUp);\n        this.initialViewUp = viewUp;\n        if (resetCamera) {\n            const t = this;\n            t.resetCamera({ resetOrientation: false, resetRotation: false });\n        }\n    }\n    initializeVolumeNewImageEventDispatcher() {\n        const volumeNewImageHandlerBound = volumeNewImageHandler.bind(this);\n        const volumeNewImageCleanUpBound = volumeNewImageCleanUp.bind(this);\n        function volumeNewImageHandler(cameraEvent) {\n            const { viewportId } = cameraEvent.detail;\n            if (viewportId !== this.id || this.isDisabled) {\n                return;\n            }\n            const viewportImageData = this.getImageData();\n            if (!viewportImageData) {\n                return;\n            }\n            volumeNewImageEventDispatcher(cameraEvent);\n        }\n        function volumeNewImageCleanUp(evt) {\n            const { viewportId } = evt.detail;\n            if (viewportId !== this.id) {\n                return;\n            }\n            this.element.removeEventListener(Events.CAMERA_MODIFIED, volumeNewImageHandlerBound);\n            eventTarget.removeEventListener(Events.ELEMENT_DISABLED, volumeNewImageCleanUpBound);\n            resetVolumeNewImageState(viewportId);\n        }\n        this.element.removeEventListener(Events.CAMERA_MODIFIED, volumeNewImageHandlerBound);\n        this.element.addEventListener(Events.CAMERA_MODIFIED, volumeNewImageHandlerBound);\n        eventTarget.addEventListener(Events.ELEMENT_DISABLED, volumeNewImageCleanUpBound);\n    }\n    setVOILUTFunction(voiLUTFunction, volumeId, suppressEvents) {\n        if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n            voiLUTFunction = VOILUTFunctionType.LINEAR;\n        }\n        const { voiRange } = this.getProperties();\n        this.setVOI(voiRange, volumeId, suppressEvents);\n        this.viewportProperties.VOILUTFunction = voiLUTFunction;\n    }\n    setColormap(colormap, volumeId, suppressEvents) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        const cfun = vtkColorTransferFunction.newInstance();\n        let colormapObj = colormapUtils.getColormap(colormap.name);\n        const { name } = colormap;\n        if (!colormapObj) {\n            colormapObj = vtkColorMaps.getPresetByName(name);\n        }\n        if (!colormapObj) {\n            throw new Error(`Colormap ${colormap} not found`);\n        }\n        const range = volumeActor\n            .getProperty()\n            .getRGBTransferFunction(0)\n            .getRange();\n        cfun.applyColorMap(colormapObj);\n        cfun.setMappingRange(range[0], range[1]);\n        volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n        this.viewportProperties.colormap = colormap;\n        if (!suppressEvents) {\n            const completeColormap = this.getColormap(volumeId);\n            const eventDetail = {\n                viewportId: this.id,\n                colormap: completeColormap,\n                volumeId,\n            };\n            triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n            triggerEvent(this.element, Events.COLORMAP_MODIFIED, eventDetail);\n        }\n    }\n    setOpacity(colormap, volumeId) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        const ofun = vtkPiecewiseFunction.newInstance();\n        if (typeof colormap.opacity === 'number') {\n            colormapUpdateOpacity(volumeActor, colormap.opacity);\n        }\n        else {\n            colormap.opacity.forEach(({ opacity, value }) => {\n                ofun.addPoint(value, opacity);\n            });\n            volumeActor.getProperty().setScalarOpacity(0, ofun);\n        }\n        if (!this.viewportProperties.colormap) {\n            this.viewportProperties.colormap = {};\n        }\n        this.viewportProperties.colormap.opacity = colormap.opacity;\n        const matchedColormap = this.getColormap(volumeId);\n        const eventDetail = {\n            viewportId: this.id,\n            colormap: matchedColormap,\n            volumeId,\n        };\n        triggerEvent(this.element, Events.COLORMAP_MODIFIED, eventDetail);\n    }\n    setInvert(inverted, volumeId, suppressEvents) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const volumeIdToUse = applicableVolumeActorInfo.volumeId;\n        const cfun = this._getOrCreateColorTransferFunction(volumeIdToUse);\n        invertRgbTransferFunction(cfun);\n        this.viewportProperties.invert = inverted;\n        if (!suppressEvents) {\n            const eventDetail = {\n                ...this.getVOIModifiedEventDetail(volumeIdToUse),\n                invertStateChanged: true,\n            };\n            triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n        }\n    }\n    getVOIModifiedEventDetail(volumeId) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            throw new Error(`No actor found for the given volumeId: ${volumeId}`);\n        }\n        const volumeActor = applicableVolumeActorInfo.volumeActor;\n        const transferFunction = volumeActor\n            .getProperty()\n            .getRGBTransferFunction(0);\n        const range = transferFunction.getMappingRange();\n        const matchedColormap = this.getColormap(volumeId);\n        const { VOILUTFunction, invert } = this.getProperties(volumeId);\n        return {\n            viewportId: this.id,\n            range: {\n                lower: range[0],\n                upper: range[1],\n            },\n            volumeId: applicableVolumeActorInfo.volumeId,\n            VOILUTFunction: VOILUTFunction,\n            colormap: matchedColormap,\n            invert,\n        };\n    }\n    _getOrCreateColorTransferFunction(volumeId) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return null;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        const rgbTransferFunction = volumeActor\n            .getProperty()\n            .getRGBTransferFunction(0);\n        if (rgbTransferFunction) {\n            return rgbTransferFunction;\n        }\n        const newRGBTransferFunction = vtkColorTransferFunction.newInstance();\n        volumeActor.getProperty().setRGBTransferFunction(0, newRGBTransferFunction);\n        return newRGBTransferFunction;\n    }\n    setInterpolationType(interpolationType, volumeId) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        const volumeProperty = volumeActor.getProperty();\n        volumeProperty.setInterpolationType(interpolationType);\n        this.viewportProperties.interpolationType = interpolationType;\n    }\n    setVOI(voiRange, volumeId, suppressEvents = false) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        const volumeIdToUse = applicableVolumeActorInfo.volumeId;\n        const voiRangeToUse = voiRange;\n        if (typeof voiRangeToUse === 'undefined') {\n            throw new Error('voiRangeToUse is undefined, need to implement this in the new volume model');\n        }\n        const { VOILUTFunction } = this.getProperties(volumeIdToUse);\n        if (VOILUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n            const cfun = createSigmoidRGBTransferFunction(voiRangeToUse);\n            volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n        }\n        else {\n            const { lower, upper } = voiRangeToUse;\n            volumeActor\n                .getProperty()\n                .getRGBTransferFunction(0)\n                .setRange(lower, upper);\n        }\n        if (!suppressEvents) {\n            const eventDetail = {\n                ...this.getVOIModifiedEventDetail(volumeIdToUse),\n            };\n            triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n        }\n        this.viewportProperties.voiRange = voiRangeToUse;\n    }\n    rotateCamera(rotation) {\n        const rotationToApply = rotation - this.getRotation();\n        this.getVtkActiveCamera().roll(-rotationToApply);\n    }\n    setDefaultProperties(ViewportProperties, volumeId) {\n        if (volumeId == null) {\n            this.globalDefaultProperties = ViewportProperties;\n        }\n        else {\n            this.perVolumeIdDefaultProperties.set(volumeId, ViewportProperties);\n        }\n    }\n    clearDefaultProperties(volumeId) {\n        if (volumeId == null) {\n            this.globalDefaultProperties = {};\n            this.resetProperties();\n        }\n        else {\n            this.perVolumeIdDefaultProperties.delete(volumeId);\n            this.resetToDefaultProperties(volumeId);\n        }\n    }\n    getViewReference(viewRefSpecifier = {}) {\n        const target = super.getViewReference(viewRefSpecifier);\n        const volumeId = this.getVolumeId(viewRefSpecifier);\n        if (viewRefSpecifier?.forFrameOfReference !== false) {\n            target.volumeId = volumeId;\n        }\n        if (typeof viewRefSpecifier?.sliceIndex !== 'number') {\n            return target;\n        }\n        const { viewPlaneNormal } = target;\n        const delta = viewRefSpecifier?.sliceIndex - this.getSliceIndex();\n        const { sliceRangeInfo } = getVolumeViewportScrollInfo(this, volumeId, true);\n        const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n        const { focalPoint, position } = camera;\n        const { newFocalPoint } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n        target.cameraFocalPoint = newFocalPoint;\n        return target;\n    }\n    isReferenceViewable(viewRef, options) {\n        if (!viewRef.FrameOfReferenceUID) {\n            return false;\n        }\n        if (!super.isReferenceViewable(viewRef, options)) {\n            return false;\n        }\n        if (options?.withNavigation) {\n            return true;\n        }\n        const currentSliceIndex = this.getSliceIndex();\n        const { sliceIndex } = viewRef;\n        if (Array.isArray(sliceIndex)) {\n            return (sliceIndex[0] <= currentSliceIndex && currentSliceIndex <= sliceIndex[1]);\n        }\n        return sliceIndex === undefined || sliceIndex === currentSliceIndex;\n    }\n    scroll(delta = 1) {\n        const volumeId = this.getVolumeId();\n        const { sliceRangeInfo } = getVolumeViewportScrollInfo(this, volumeId, true);\n        if (!sliceRangeInfo) {\n            return;\n        }\n        const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n        const { focalPoint, viewPlaneNormal, position } = camera;\n        const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n        this.setCamera({\n            focalPoint: newFocalPoint,\n            position: newPosition,\n        });\n        this.render();\n    }\n    setViewReference(viewRef) {\n        if (!viewRef) {\n            return;\n        }\n        const volumeId = this.getVolumeId();\n        const { viewPlaneNormal: refViewPlaneNormal, FrameOfReferenceUID: refFrameOfReference, cameraFocalPoint, referencedImageId, viewUp, } = viewRef;\n        let { sliceIndex } = viewRef;\n        const { focalPoint, viewPlaneNormal, position } = this.getCamera();\n        const isNegativeNormal = isEqualNegative(viewPlaneNormal, refViewPlaneNormal);\n        const isSameNormal = isEqual(viewPlaneNormal, refViewPlaneNormal);\n        if (typeof sliceIndex === 'number' &&\n            volumeId !== undefined &&\n            viewRef.volumeId === volumeId &&\n            (isNegativeNormal || isSameNormal)) {\n            const { currentStepIndex, sliceRangeInfo, numScrollSteps } = getVolumeViewportScrollInfo(this, volumeId, true);\n            const { sliceRange, spacingInNormalDirection } = sliceRangeInfo;\n            if (isNegativeNormal) {\n                sliceIndex = numScrollSteps - sliceIndex - 1;\n            }\n            const delta = sliceIndex - currentStepIndex;\n            const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n            this.setCamera({ focalPoint: newFocalPoint, position: newPosition });\n        }\n        else if (refFrameOfReference === this.getFrameOfReferenceUID()) {\n            if (refViewPlaneNormal && !isNegativeNormal && !isSameNormal) {\n                this.setOrientation({ viewPlaneNormal: refViewPlaneNormal, viewUp });\n                this.setViewReference(viewRef);\n                return;\n            }\n            if (referencedImageId && this.isInAcquisitionPlane()) {\n                const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, referencedImageId);\n                const { imagePositionPatient } = imagePlaneModule;\n                const { focalPoint } = this.getCamera();\n                const diffVector = vec3.subtract(vec3.create(), focalPoint, imagePositionPatient);\n                const projectedDistance = vec3.dot(diffVector, viewPlaneNormal);\n                const newImagePositionPatient = vec3.scaleAndAdd(vec3.create(), focalPoint, [-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]], projectedDistance);\n                this.setCamera({\n                    focalPoint: newImagePositionPatient,\n                });\n                this.render();\n                return;\n            }\n            if (cameraFocalPoint) {\n                const focalDelta = vec3.subtract([0, 0, 0], cameraFocalPoint, focalPoint);\n                const useNormal = refViewPlaneNormal ?? viewPlaneNormal;\n                const normalDot = vec3.dot(focalDelta, useNormal);\n                if (!isEqual(normalDot, 0)) {\n                    vec3.scale(focalDelta, useNormal, normalDot);\n                }\n                const newFocal = vec3.add([0, 0, 0], focalPoint, focalDelta);\n                const newPosition = vec3.add([0, 0, 0], position, focalDelta);\n                this.setCamera({ focalPoint: newFocal, position: newPosition });\n            }\n        }\n        else {\n            throw new Error(`Incompatible view refs: ${refFrameOfReference}!==${this.getFrameOfReferenceUID()}`);\n        }\n    }\n    setThreshold(colormap, volumeId) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        colormapUpdateThreshold(volumeActor, colormap.threshold);\n        if (!this.viewportProperties.colormap) {\n            this.viewportProperties.colormap = {};\n        }\n        this.viewportProperties.colormap.threshold = colormap.threshold;\n        const matchedColormap = this.getColormap(volumeId);\n        const eventDetail = {\n            viewportId: this.id,\n            colormap: matchedColormap,\n            volumeId,\n        };\n        triggerEvent(this.element, Events.COLORMAP_MODIFIED, eventDetail);\n    }\n    setProperties({ voiRange, VOILUTFunction, invert, colormap, preset, interpolationType, slabThickness, } = {}, volumeId, suppressEvents = false) {\n        if (this.globalDefaultProperties == null) {\n            this.setDefaultProperties({\n                voiRange,\n                VOILUTFunction,\n                invert,\n                colormap,\n                preset,\n                slabThickness,\n            });\n        }\n        if (invert !== undefined && this.viewportProperties.invert !== invert) {\n            this.setInvert(invert, volumeId, suppressEvents);\n        }\n        if (colormap?.name) {\n            this.setColormap(colormap, volumeId, suppressEvents);\n        }\n        if (colormap?.opacity != null) {\n            this.setOpacity(colormap, volumeId);\n        }\n        if (colormap?.threshold != null) {\n            this.setThreshold(colormap, volumeId);\n        }\n        if (voiRange !== undefined) {\n            this.setVOI(voiRange, volumeId, suppressEvents);\n        }\n        if (typeof interpolationType !== 'undefined') {\n            this.setInterpolationType(interpolationType);\n        }\n        if (VOILUTFunction !== undefined) {\n            this.setVOILUTFunction(VOILUTFunction, volumeId, suppressEvents);\n        }\n        if (preset !== undefined) {\n            this.setPreset(preset, volumeId, suppressEvents);\n        }\n        if (slabThickness !== undefined) {\n            this.setSlabThickness(slabThickness);\n        }\n    }\n    resetToDefaultProperties(volumeId) {\n        const properties = this.globalDefaultProperties;\n        if (properties.colormap?.name) {\n            this.setColormap(properties.colormap, volumeId);\n        }\n        if (properties.colormap?.opacity != null) {\n            this.setOpacity(properties.colormap, volumeId);\n        }\n        if (properties.voiRange !== undefined) {\n            this.setVOI(properties.voiRange, volumeId);\n        }\n        if (properties.VOILUTFunction !== undefined) {\n            this.setVOILUTFunction(properties.VOILUTFunction, volumeId);\n        }\n        if (properties.invert !== undefined) {\n            this.setInvert(properties.invert, volumeId);\n        }\n        if (properties.slabThickness !== undefined) {\n            this.setSlabThickness(properties.slabThickness);\n            this.viewportProperties.slabThickness = properties.slabThickness;\n        }\n        if (properties.preset !== undefined) {\n            this.setPreset(properties.preset, volumeId, false);\n        }\n        if (properties.preset !== undefined) {\n            this.setPreset(properties.preset, volumeId, false);\n        }\n        this.render();\n    }\n    setPreset(presetNameOrObj, volumeId, suppressEvents) {\n        const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n        if (!applicableVolumeActorInfo) {\n            return;\n        }\n        const { volumeActor } = applicableVolumeActorInfo;\n        let preset = presetNameOrObj;\n        if (typeof preset === 'string') {\n            preset = VIEWPORT_PRESETS.find((preset) => {\n                return preset.name === presetNameOrObj;\n            });\n        }\n        if (!preset) {\n            return;\n        }\n        applyPreset(volumeActor, preset);\n        this.viewportProperties.preset = preset;\n        this.render();\n        if (!suppressEvents) {\n            triggerEvent(this.element, Events.PRESET_MODIFIED, {\n                viewportId: this.id,\n                volumeId: applicableVolumeActorInfo.volumeId,\n                actor: volumeActor,\n                presetName: preset.name,\n            });\n        }\n    }\n    async setVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n        const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n        if (!firstImageVolume) {\n            throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist, you need to create/allocate the volume first`);\n        }\n        const FrameOfReferenceUID = firstImageVolume.metadata.FrameOfReferenceUID;\n        this._isValidVolumeInputArray(volumeInputArray, FrameOfReferenceUID);\n        this._FrameOfReferenceUID = FrameOfReferenceUID;\n        volumeInputArray.forEach((volumeInput) => {\n            this._addVolumeId(volumeInput.volumeId);\n        });\n        const volumeActors = [];\n        for (let i = 0; i < volumeInputArray.length; i++) {\n            const { volumeId, actorUID, slabThickness, ...rest } = volumeInputArray[i];\n            const actor = await createVolumeActor(volumeInputArray[i], this.element, this.id, suppressEvents);\n            const uid = actorUID || uuidv4();\n            volumeActors.push({\n                uid,\n                actor,\n                slabThickness,\n                referencedId: volumeId,\n                ...rest,\n            });\n        }\n        this._setVolumeActors(volumeActors);\n        this.viewportStatus = ViewportStatus.PRE_RENDER;\n        this.initializeColorTransferFunction(volumeInputArray);\n        triggerEvent(this.element, Events.VOLUME_VIEWPORT_NEW_VOLUME, {\n            viewportId: this.id,\n            volumeActors,\n        });\n        if (immediate) {\n            this.render();\n        }\n    }\n    async addVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n        const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n        if (!firstImageVolume) {\n            throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n        }\n        const volumeActors = [];\n        this._isValidVolumeInputArray(volumeInputArray, this._FrameOfReferenceUID);\n        volumeInputArray.forEach((volumeInput) => {\n            this._addVolumeId(volumeInput.volumeId);\n        });\n        for (let i = 0; i < volumeInputArray.length; i++) {\n            const { volumeId, visibility, actorUID, slabThickness, ...rest } = volumeInputArray[i];\n            const actor = await createVolumeActor(volumeInputArray[i], this.element, this.id, suppressEvents);\n            if (!visibility) {\n                actor.setVisibility(false);\n            }\n            const uid = actorUID || uuidv4();\n            volumeActors.push({\n                uid,\n                actor,\n                slabThickness,\n                referencedId: volumeId,\n                ...rest,\n            });\n        }\n        this.addActors(volumeActors);\n        this.initializeColorTransferFunction(volumeInputArray);\n        if (immediate) {\n            this.render();\n        }\n    }\n    removeVolumeActors(actorUIDs, immediate = false) {\n        this.removeActors(actorUIDs);\n        if (immediate) {\n            this.render();\n        }\n    }\n    setOrientation(_orientation, _immediate = true) {\n        console.warn('Method \"setOrientation\" needs implementation');\n    }\n    initializeColorTransferFunction(volumeInputArray) {\n        const selectedVolumeId = volumeInputArray[0].volumeId;\n        const colorTransferFunction = this._getOrCreateColorTransferFunction(selectedVolumeId);\n        if (!this.initialTransferFunctionNodes && colorTransferFunction) {\n            this.initialTransferFunctionNodes = getTransferFunctionNodes(colorTransferFunction);\n        }\n    }\n    _getApplicableVolumeActor(volumeId) {\n        const actorEntries = this.getActors();\n        if (!actorEntries?.length) {\n            return;\n        }\n        if (volumeId) {\n            const actorEntry = actorEntries.find((actor) => actor.referencedId === volumeId);\n            if (!actorEntry) {\n                return;\n            }\n            return {\n                volumeActor: actorEntry.actor,\n                volumeId,\n                actorUID: actorEntry.uid,\n            };\n        }\n        const defaultActorEntry = actorEntries[0];\n        return {\n            volumeActor: defaultActorEntry.actor,\n            volumeId: defaultActorEntry.referencedId,\n            actorUID: defaultActorEntry.uid,\n        };\n    }\n    async _isValidVolumeInputArray(volumeInputArray, FrameOfReferenceUID) {\n        const numVolumes = volumeInputArray.length;\n        for (let i = 1; i < numVolumes; i++) {\n            const imageVolume = cache.getVolume(volumeInputArray[i].volumeId);\n            if (FrameOfReferenceUID !== imageVolume.metadata.FrameOfReferenceUID) {\n                throw new Error(`Volumes being added to viewport ${this.id} do not share the same FrameOfReferenceUID. This is not yet supported`);\n            }\n        }\n        return true;\n    }\n    getBounds() {\n        const renderer = this.getRenderer();\n        const bounds = renderer.computeVisiblePropBounds();\n        return bounds;\n    }\n    flip(flipDirection) {\n        super.flip(flipDirection);\n    }\n    hasVolumeId(volumeId) {\n        return this.volumeIds.has(volumeId);\n    }\n    hasVolumeURI(volumeURI) {\n        for (const volumeId of this.volumeIds) {\n            if (volumeId.includes(volumeURI)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    getImageData(volumeId) {\n        const defaultActor = this.getDefaultActor();\n        if (!defaultActor) {\n            return;\n        }\n        volumeId ||= this.getVolumeId();\n        const actorEntry = this.getActors()?.find((actor) => actor.referencedId === volumeId);\n        if (!actorIsA(actorEntry, 'vtkVolume')) {\n            return;\n        }\n        const actor = actorEntry.actor;\n        const volume = cache.getVolume(volumeId);\n        const vtkImageData = actor.getMapper().getInputData();\n        return {\n            dimensions: vtkImageData.getDimensions(),\n            spacing: vtkImageData.getSpacing(),\n            origin: vtkImageData.getOrigin(),\n            direction: vtkImageData.getDirection(),\n            imageData: actor.getMapper().getInputData(),\n            metadata: {\n                Modality: volume?.metadata?.Modality,\n                FrameOfReferenceUID: volume?.metadata?.FrameOfReferenceUID,\n            },\n            get scalarData() {\n                return volume?.voxelManager?.getScalarData();\n            },\n            scaling: volume?.scaling,\n            hasPixelSpacing: true,\n            voxelManager: volume?.voxelManager,\n        };\n    }\n    setCameraClippingRange() {\n        throw new Error('Method not implemented.');\n    }\n    getSliceIndex() {\n        throw new Error('Method not implemented.');\n    }\n    setCamera(cameraInterface, storeAsInitialCamera) {\n        super.setCamera(cameraInterface, storeAsInitialCamera);\n        this.setCameraClippingRange();\n    }\n    _setVolumeActors(volumeActorEntries) {\n        for (let i = 0; i < volumeActorEntries.length; i++) {\n            this.viewportProperties.invert = false;\n        }\n        this.setActors(volumeActorEntries);\n    }\n    _getOrientationVectors(orientation) {\n        if (typeof orientation === 'object') {\n            if (orientation.viewPlaneNormal && orientation.viewUp) {\n                return orientation;\n            }\n            else {\n                throw new Error('Invalid orientation object. It must contain viewPlaneNormal and viewUp');\n            }\n        }\n        else if (typeof orientation === 'string') {\n            if (orientation === 'acquisition') {\n                return this._getAcquisitionPlaneOrientation();\n            }\n            else if (MPR_CAMERA_VALUES[orientation]) {\n                this.viewportProperties.orientation = orientation;\n                return MPR_CAMERA_VALUES[orientation];\n            }\n        }\n        throw new Error(`Invalid orientation: ${orientation}. Valid orientations are: ${Object.keys(MPR_CAMERA_VALUES).join(', ')}`);\n    }\n    _getAcquisitionPlaneOrientation() {\n        const actorEntry = this.getDefaultActor();\n        if (!actorEntry) {\n            return;\n        }\n        const volumeId = this.getVolumeId();\n        const imageVolume = cache.getVolume(volumeId);\n        if (!imageVolume) {\n            throw new Error(`imageVolume with id: ${volumeId} does not exist in cache`);\n        }\n        const { direction } = imageVolume;\n        const viewPlaneNormal = direction.slice(6, 9).map((x) => -x);\n        const viewUp = direction.slice(3, 6).map((x) => -x);\n        return {\n            viewPlaneNormal,\n            viewUp,\n        };\n    }\n    getSlabThickness() {\n        const actors = this.getActors();\n        let slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n        actors.forEach((actor) => {\n            if (actor.slabThickness > slabThickness) {\n                slabThickness = actor.slabThickness;\n            }\n        });\n        return slabThickness;\n    }\n    getIntensityFromWorld(point) {\n        const actorEntry = this.getDefaultActor();\n        if (!actorIsA(actorEntry, 'vtkVolume')) {\n            return;\n        }\n        const { actor } = actorEntry;\n        const imageData = actor.getMapper().getInputData();\n        const volume = cache.getVolume(this.getVolumeId());\n        const index = transformWorldToIndex(imageData, point);\n        return volume.voxelManager.getAtIJKPoint(index);\n    }\n    getVolumeId(specifier) {\n        const actorEntries = this.getActors();\n        if (!actorEntries) {\n            return;\n        }\n        if (!specifier?.volumeId) {\n            const found = actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume');\n            return found?.referencedId || found?.uid;\n        }\n        const found = actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume' &&\n            actorEntry.referencedId === specifier?.volumeId);\n        return found?.referencedId || found?.uid;\n    }\n    getViewReferenceId(specifier = {}) {\n        let { volumeId, sliceIndex: sliceIndex } = specifier;\n        if (!volumeId) {\n            const actorEntries = this.getActors();\n            if (!actorEntries) {\n                return;\n            }\n            volumeId = actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.referencedId;\n        }\n        const currentIndex = this.getSliceIndex();\n        sliceIndex ??= currentIndex;\n        const { viewPlaneNormal, focalPoint } = this.getCamera();\n        const querySeparator = volumeId.includes('?') ? '&' : '?';\n        return `volumeId:${volumeId}${querySeparator}sliceIndex=${sliceIndex}&viewPlaneNormal=${viewPlaneNormal.join(',')}`;\n    }\n    _addVolumeId(volumeId) {\n        this.volumeIds.add(volumeId);\n    }\n    getAllVolumeIds() {\n        return Array.from(this.volumeIds);\n    }\n}\nexport default BaseVolumeViewport;\n","export default class CanvasMapper {\n    constructor(actor) {\n        this.actor = actor;\n    }\n    getInputData() {\n        return this.actor.getImage();\n    }\n}\n","export default class CanvasProperties {\n    constructor(actor) {\n        this.opacity = 0.4;\n        this.outlineOpacity = 0.4;\n        this.transferFunction = [];\n        this.actor = actor;\n    }\n    setRGBTransferFunction(index, cfun) {\n        this.transferFunction[index] = cfun;\n    }\n    setScalarOpacity(opacity) {\n    }\n    setInterpolationTypeToNearest() {\n    }\n    setUseLabelOutline() {\n    }\n    setLabelOutlineOpacity(opacity) {\n        this.outlineOpacity = opacity;\n    }\n    setLabelOutlineThickness() {\n    }\n    getColor(index) {\n        const cfun = this.transferFunction[0];\n        const r = cfun.getRedValue(index);\n        const g = cfun.getGreenValue(index);\n        const b = cfun.getBlueValue(index);\n        return [r, g, b, this.opacity];\n    }\n}\n","import CanvasProperties from './CanvasProperties';\nimport CanvasMapper from './CanvasMapper';\nexport default class CanvasActor {\n    constructor(viewport, derivedImage) {\n        this.canvasProperties = new CanvasProperties(this);\n        this.visibility = false;\n        this.mapper = new CanvasMapper(this);\n        this.className = 'CanvasActor';\n        this.derivedImage = derivedImage;\n        this.viewport = viewport;\n    }\n    renderRLE(viewport, context, voxelManager) {\n        const { width, height } = this.image;\n        let { canvas } = this;\n        if (!canvas || canvas.width !== width || canvas.height !== height) {\n            this.canvas = canvas = new window.OffscreenCanvas(width, height);\n        }\n        const localContext = canvas.getContext('2d');\n        const imageData = localContext.createImageData(width, height);\n        const { data: imageArray } = imageData;\n        imageArray.fill(0);\n        const { map } = voxelManager;\n        let dirtyX = Infinity;\n        let dirtyY = Infinity;\n        let dirtyX2 = -Infinity;\n        let dirtyY2 = -Infinity;\n        for (let y = 0; y < height; y++) {\n            const row = map.getRun(y, 0);\n            if (!row) {\n                continue;\n            }\n            dirtyY = Math.min(dirtyY, y);\n            dirtyY2 = Math.max(dirtyY2, y);\n            const baseOffset = (y * width) << 2;\n            let indicesToDelete;\n            for (const run of row) {\n                const { start, end, value: segmentIndex } = run;\n                if (segmentIndex === 0) {\n                    indicesToDelete ||= [];\n                    indicesToDelete.push(row.indexOf(run));\n                    continue;\n                }\n                dirtyX = Math.min(dirtyX, start);\n                dirtyX2 = Math.max(dirtyX2, end);\n                const rgb = this.canvasProperties\n                    .getColor(segmentIndex)\n                    .map((v) => v * 255);\n                let startOffset = baseOffset + (start << 2);\n                for (let i = start; i < end; i++) {\n                    imageArray[startOffset++] = rgb[0];\n                    imageArray[startOffset++] = rgb[1];\n                    imageArray[startOffset++] = rgb[2];\n                    imageArray[startOffset++] = rgb[3];\n                }\n            }\n        }\n        if (dirtyX > width) {\n            return;\n        }\n        const dirtyWidth = dirtyX2 - dirtyX;\n        const dirtyHeight = dirtyY2 - dirtyY;\n        localContext.putImageData(imageData, 0, 0, dirtyX - 1, dirtyY - 1, dirtyWidth + 2, dirtyHeight + 2);\n        context.drawImage(canvas, dirtyX, dirtyY, dirtyWidth, dirtyHeight, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n    }\n    setMapper(mapper) {\n        this.mapper = mapper;\n    }\n    render(viewport, context) {\n        if (!this.visibility) {\n            return;\n        }\n        const image = this.image || this.getImage();\n        const { width, height } = image;\n        const data = image.getScalarData();\n        if (!data) {\n            return;\n        }\n        const { voxelManager } = image;\n        if (voxelManager) {\n            if (voxelManager.map.getRun) {\n                this.renderRLE(viewport, context, voxelManager);\n                return;\n            }\n        }\n        let { canvas } = this;\n        if (!canvas || canvas.width !== width || canvas.height !== height) {\n            this.canvas = canvas = new window.OffscreenCanvas(width, height);\n        }\n        const localContext = canvas.getContext('2d');\n        const imageData = localContext.createImageData(width, height);\n        const { data: imageArray } = imageData;\n        let offset = 0;\n        let destOffset = 0;\n        let dirtyX = Infinity;\n        let dirtyY = Infinity;\n        let dirtyX2 = -Infinity;\n        let dirtyY2 = -Infinity;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const segmentIndex = data[offset++];\n                if (segmentIndex) {\n                    dirtyX = Math.min(x, dirtyX);\n                    dirtyY = Math.min(y, dirtyY);\n                    dirtyX2 = Math.max(x, dirtyX2);\n                    dirtyY2 = Math.max(y, dirtyY2);\n                    const rgb = this.canvasProperties.getColor(segmentIndex);\n                    imageArray[destOffset] = rgb[0] * 255;\n                    imageArray[destOffset + 1] = rgb[1] * 255;\n                    imageArray[destOffset + 2] = rgb[2] * 255;\n                    imageArray[destOffset + 3] = 127;\n                }\n                destOffset += 4;\n            }\n        }\n        if (dirtyX > width) {\n            return;\n        }\n        const dirtyWidth = dirtyX2 - dirtyX + 1;\n        const dirtyHeight = dirtyY2 - dirtyY + 1;\n        localContext.putImageData(imageData, 0, 0, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n        context.drawImage(canvas, dirtyX, dirtyY, dirtyWidth, dirtyHeight, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n    }\n    getClassName() {\n        return this.className;\n    }\n    getProperty() {\n        return this.canvasProperties;\n    }\n    setVisibility(visibility) {\n        this.visibility = visibility;\n    }\n    getMapper() {\n        return this.mapper;\n    }\n    isA(actorType) {\n        return actorType === this.className;\n    }\n    getImage() {\n        if (this.image) {\n            return this.image;\n        }\n        this.image = { ...this.derivedImage };\n        const imageData = this.viewport.getImageData();\n        Object.assign(this.image, {\n            worldToIndex: (worldPos) => imageData.imageData.worldToIndex(worldPos),\n            indexToWorld: (index, destPoint) => imageData.imageData.indexToWorld(index, destPoint),\n            getDimensions: () => imageData.dimensions,\n            getScalarData: () => this.derivedImage?.getPixelData(),\n            getDirection: () => imageData.direction,\n            getSpacing: () => imageData.spacing,\n            setOrigin: () => null,\n            setDerivedImage: (image) => {\n                this.derivedImage = image;\n                this.image = null;\n            },\n            modified: () => null,\n        });\n        return this.image;\n    }\n}\n","import Events from '../enums/Events';\nimport renderingEngineCache from './renderingEngineCache';\nimport eventTarget from '../eventTarget';\nimport uuidv4 from '../utilities/uuidv4';\nimport triggerEvent from '../utilities/triggerEvent';\nimport { vtkOffscreenMultiRenderWindow } from './vtkClasses';\nimport ViewportType from '../enums/ViewportType';\nimport VolumeViewport from './VolumeViewport';\nimport BaseVolumeViewport from './BaseVolumeViewport';\nimport StackViewport from './StackViewport';\nimport viewportTypeUsesCustomRenderingPipeline from './helpers/viewportTypeUsesCustomRenderingPipeline';\nimport getOrCreateCanvas from './helpers/getOrCreateCanvas';\nimport { getShouldUseCPURendering, isCornerstoneInitialized } from '../init';\nimport viewportTypeToViewportClass from './helpers/viewportTypeToViewportClass';\nimport { OrientationAxis } from '../enums';\nimport VolumeViewport3D from './VolumeViewport3D';\nconst VIEWPORT_MIN_SIZE = 2;\nclass RenderingEngine {\n    constructor(id) {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this.renderFrameOfReference = (FrameOfReferenceUID) => {\n            const viewports = this._getViewportsAsArray();\n            const viewportIdsWithSameFrameOfReferenceUID = viewports.map((vp) => {\n                if (vp.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n                    return vp.id;\n                }\n            });\n            this.renderViewports(viewportIdsWithSameFrameOfReferenceUID);\n        };\n        this._renderFlaggedViewports = () => {\n            this._throwIfDestroyed();\n            if (!this.useCPURendering) {\n                this.performVtkDrawCall();\n            }\n            const viewports = this._getViewportsAsArray();\n            const eventDetailArray = [];\n            for (let i = 0; i < viewports.length; i++) {\n                const viewport = viewports[i];\n                if (this._needsRender.has(viewport.id)) {\n                    const eventDetail = this.renderViewportUsingCustomOrVtkPipeline(viewport);\n                    eventDetailArray.push(eventDetail);\n                    viewport.setRendered();\n                    this._needsRender.delete(viewport.id);\n                    if (this._needsRender.size === 0) {\n                        break;\n                    }\n                }\n            }\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            eventDetailArray.forEach((eventDetail) => {\n                if (!eventDetail?.element) {\n                    return;\n                }\n                triggerEvent(eventDetail.element, Events.IMAGE_RENDERED, eventDetail);\n            });\n        };\n        this.id = id ? id : uuidv4();\n        this.useCPURendering = getShouldUseCPURendering();\n        renderingEngineCache.set(this);\n        if (!isCornerstoneInitialized()) {\n            throw new Error('@cornerstonejs/core is not initialized, run init() first');\n        }\n        if (!this.useCPURendering) {\n            this.offscreenMultiRenderWindow =\n                vtkOffscreenMultiRenderWindow.newInstance();\n            this.offScreenCanvasContainer = document.createElement('div');\n            this.offscreenMultiRenderWindow.setContainer(this.offScreenCanvasContainer);\n        }\n        this._viewports = new Map();\n        this.hasBeenDestroyed = false;\n    }\n    enableElement(viewportInputEntry) {\n        const viewportInput = this._normalizeViewportInputEntry(viewportInputEntry);\n        this._throwIfDestroyed();\n        const { element, viewportId } = viewportInput;\n        if (!element) {\n            throw new Error('No element provided');\n        }\n        const viewport = this.getViewport(viewportId);\n        if (viewport) {\n            this.disableElement(viewportId);\n        }\n        const { type } = viewportInput;\n        const viewportUsesCustomRenderingPipeline = viewportTypeUsesCustomRenderingPipeline(type);\n        if (!this.useCPURendering && !viewportUsesCustomRenderingPipeline) {\n            this.enableVTKjsDrivenViewport(viewportInput);\n        }\n        else {\n            this.addCustomViewport(viewportInput);\n        }\n        const canvas = getOrCreateCanvas(element);\n        const { background } = viewportInput.defaultOptions;\n        this.fillCanvasWithBackgroundColor(canvas, background);\n    }\n    disableElement(viewportId) {\n        this._throwIfDestroyed();\n        const viewport = this.getViewport(viewportId);\n        if (!viewport) {\n            console.warn(`viewport ${viewportId} does not exist`);\n            return;\n        }\n        this._resetViewport(viewport);\n        if (!viewportTypeUsesCustomRenderingPipeline(viewport.type) &&\n            !this.useCPURendering) {\n            this.offscreenMultiRenderWindow.removeRenderer(viewportId);\n        }\n        this._removeViewport(viewportId);\n        viewport.isDisabled = true;\n        this._needsRender.delete(viewportId);\n        const viewports = this.getViewports();\n        if (!viewports.length) {\n            this._clearAnimationFrame();\n        }\n    }\n    setViewports(publicViewportInputEntries) {\n        const viewportInputEntries = this._normalizeViewportInputEntries(publicViewportInputEntries);\n        this._throwIfDestroyed();\n        this._reset();\n        const vtkDrivenViewportInputEntries = [];\n        const customRenderingViewportInputEntries = [];\n        viewportInputEntries.forEach((vpie) => {\n            if (!this.useCPURendering &&\n                !viewportTypeUsesCustomRenderingPipeline(vpie.type)) {\n                vtkDrivenViewportInputEntries.push(vpie);\n            }\n            else {\n                customRenderingViewportInputEntries.push(vpie);\n            }\n        });\n        this.setVtkjsDrivenViewports(vtkDrivenViewportInputEntries);\n        this.setCustomViewports(customRenderingViewportInputEntries);\n        viewportInputEntries.forEach((vp) => {\n            const canvas = getOrCreateCanvas(vp.element);\n            const { background } = vp.defaultOptions;\n            this.fillCanvasWithBackgroundColor(canvas, background);\n        });\n    }\n    resize(immediate = true, keepCamera = true) {\n        this._throwIfDestroyed();\n        const viewports = this._getViewportsAsArray();\n        const vtkDrivenViewports = [];\n        const customRenderingViewports = [];\n        viewports.forEach((vpie) => {\n            if (!viewportTypeUsesCustomRenderingPipeline(vpie.type)) {\n                vtkDrivenViewports.push(vpie);\n            }\n            else {\n                customRenderingViewports.push(vpie);\n            }\n        });\n        if (vtkDrivenViewports.length) {\n            this._resizeVTKViewports(vtkDrivenViewports, keepCamera, immediate);\n        }\n        if (customRenderingViewports.length) {\n            this._resizeUsingCustomResizeHandler(customRenderingViewports, keepCamera, immediate);\n        }\n    }\n    getViewport(viewportId) {\n        return this._viewports?.get(viewportId);\n    }\n    getViewports() {\n        this._throwIfDestroyed();\n        return this._getViewportsAsArray();\n    }\n    getStackViewport(viewportId) {\n        this._throwIfDestroyed();\n        const viewport = this.getViewport(viewportId);\n        if (!viewport) {\n            throw new Error(`Viewport with Id ${viewportId} does not exist`);\n        }\n        if (!(viewport instanceof StackViewport)) {\n            throw new Error(`Viewport with Id ${viewportId} is not a StackViewport.`);\n        }\n        return viewport;\n    }\n    getStackViewports() {\n        this._throwIfDestroyed();\n        const viewports = this.getViewports();\n        return viewports.filter((vp) => vp instanceof StackViewport);\n    }\n    getVolumeViewports() {\n        this._throwIfDestroyed();\n        const viewports = this.getViewports();\n        const isVolumeViewport = (viewport) => {\n            return viewport instanceof BaseVolumeViewport;\n        };\n        return viewports.filter(isVolumeViewport);\n    }\n    render() {\n        const viewports = this.getViewports();\n        const viewportIds = viewports.map((vp) => vp.id);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderViewports(viewportIds) {\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderViewport(viewportId) {\n        this._setViewportsToBeRenderedNextFrame([viewportId]);\n    }\n    destroy() {\n        if (this.hasBeenDestroyed) {\n            return;\n        }\n        if (!this.useCPURendering) {\n            const viewports = this._getViewportsAsArray();\n            viewports.forEach((vp) => {\n                this.offscreenMultiRenderWindow.removeRenderer(vp.id);\n            });\n            this.offscreenMultiRenderWindow.delete();\n            delete this.offscreenMultiRenderWindow;\n        }\n        this._reset();\n        renderingEngineCache.delete(this.id);\n        this.hasBeenDestroyed = true;\n    }\n    fillCanvasWithBackgroundColor(canvas, backgroundColor) {\n        const ctx = canvas.getContext('2d');\n        let fillStyle;\n        if (backgroundColor) {\n            const rgb = backgroundColor.map((f) => Math.floor(255 * f));\n            fillStyle = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n        }\n        else {\n            fillStyle = 'black';\n        }\n        ctx.fillStyle = fillStyle;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    _normalizeViewportInputEntry(viewportInputEntry) {\n        const { type, defaultOptions } = viewportInputEntry;\n        let options = defaultOptions;\n        if (!options || Object.keys(options).length === 0) {\n            options = {\n                background: [0, 0, 0],\n                orientation: null,\n                displayArea: null,\n            };\n            if (type === ViewportType.ORTHOGRAPHIC) {\n                options = {\n                    ...options,\n                    orientation: OrientationAxis.AXIAL,\n                };\n            }\n        }\n        return {\n            ...viewportInputEntry,\n            defaultOptions: options,\n        };\n    }\n    _normalizeViewportInputEntries(viewportInputEntries) {\n        const normalizedViewportInputs = [];\n        viewportInputEntries.forEach((viewportInput) => {\n            normalizedViewportInputs.push(this._normalizeViewportInputEntry(viewportInput));\n        });\n        return normalizedViewportInputs;\n    }\n    _resizeUsingCustomResizeHandler(customRenderingViewports, keepCamera = true, immediate = true) {\n        customRenderingViewports.forEach((vp) => {\n            if (typeof vp.resize === 'function') {\n                vp.resize();\n            }\n        });\n        customRenderingViewports.forEach((vp) => {\n            const prevCamera = vp.getCamera();\n            vp.resetCamera();\n            if (keepCamera) {\n                vp.setCamera(prevCamera);\n            }\n        });\n        if (immediate) {\n            this.render();\n        }\n    }\n    _resizeVTKViewports(vtkDrivenViewports, keepCamera = true, immediate = true) {\n        const canvasesDrivenByVtkJs = vtkDrivenViewports.map((vp) => {\n            return getOrCreateCanvas(vp.element);\n        });\n        canvasesDrivenByVtkJs.forEach((canvas) => {\n            const devicePixelRatio = window.devicePixelRatio || 1;\n            canvas.width = canvas.clientWidth * devicePixelRatio;\n            canvas.height = canvas.clientHeight * devicePixelRatio;\n        });\n        if (canvasesDrivenByVtkJs.length) {\n            const { offScreenCanvasWidth, offScreenCanvasHeight } = this._resizeOffScreenCanvas(canvasesDrivenByVtkJs);\n            this._resize(vtkDrivenViewports, offScreenCanvasWidth, offScreenCanvasHeight);\n        }\n        vtkDrivenViewports.forEach((vp) => {\n            const prevCamera = vp.getCamera();\n            const rotation = vp.getRotation();\n            const { flipHorizontal } = prevCamera;\n            vp.resetCameraForResize();\n            const displayArea = vp.getDisplayArea();\n            if (keepCamera) {\n                if (displayArea) {\n                    if (flipHorizontal) {\n                        vp.setCamera({ flipHorizontal });\n                    }\n                    if (rotation) {\n                        vp.setViewPresentation({ rotation });\n                    }\n                }\n                else {\n                    vp.setCamera(prevCamera);\n                }\n            }\n        });\n        if (immediate) {\n            this.render();\n        }\n    }\n    enableVTKjsDrivenViewport(viewportInputEntry) {\n        const viewports = this._getViewportsAsArray();\n        const viewportsDrivenByVtkJs = viewports.filter((vp) => viewportTypeUsesCustomRenderingPipeline(vp.type) === false);\n        const canvasesDrivenByVtkJs = viewportsDrivenByVtkJs.map((vp) => vp.canvas);\n        const canvas = getOrCreateCanvas(viewportInputEntry.element);\n        canvasesDrivenByVtkJs.push(canvas);\n        const { offScreenCanvasWidth, offScreenCanvasHeight } = this._resizeOffScreenCanvas(canvasesDrivenByVtkJs);\n        const xOffset = this._resize(viewportsDrivenByVtkJs, offScreenCanvasWidth, offScreenCanvasHeight);\n        const internalViewportEntry = { ...viewportInputEntry, canvas };\n        this.addVtkjsDrivenViewport(internalViewportEntry, {\n            offScreenCanvasWidth,\n            offScreenCanvasHeight,\n            xOffset,\n        });\n    }\n    _removeViewport(viewportId) {\n        const viewport = this.getViewport(viewportId);\n        if (!viewport) {\n            console.warn(`viewport ${viewportId} does not exist`);\n            return;\n        }\n        this._viewports.delete(viewportId);\n    }\n    addVtkjsDrivenViewport(viewportInputEntry, offscreenCanvasProperties) {\n        const { element, canvas, viewportId, type, defaultOptions } = viewportInputEntry;\n        element.tabIndex = -1;\n        const { offScreenCanvasWidth, offScreenCanvasHeight, xOffset } = offscreenCanvasProperties;\n        const { sxStartDisplayCoords, syStartDisplayCoords, sxEndDisplayCoords, syEndDisplayCoords, sx, sy, sWidth, sHeight, } = this._getViewportCoordsOnOffScreenCanvas(viewportInputEntry, offScreenCanvasWidth, offScreenCanvasHeight, xOffset);\n        this.offscreenMultiRenderWindow.addRenderer({\n            viewport: [\n                sxStartDisplayCoords,\n                syStartDisplayCoords,\n                sxEndDisplayCoords,\n                syEndDisplayCoords,\n            ],\n            id: viewportId,\n            background: defaultOptions.background\n                ? defaultOptions.background\n                : [0, 0, 0],\n        });\n        const viewportInput = {\n            id: viewportId,\n            element,\n            renderingEngineId: this.id,\n            type,\n            canvas,\n            sx,\n            sy,\n            sWidth,\n            sHeight,\n            defaultOptions: defaultOptions || {},\n        };\n        let viewport;\n        if (type === ViewportType.STACK) {\n            viewport = new StackViewport(viewportInput);\n        }\n        else if (type === ViewportType.ORTHOGRAPHIC ||\n            type === ViewportType.PERSPECTIVE) {\n            viewport = new VolumeViewport(viewportInput);\n        }\n        else if (type === ViewportType.VOLUME_3D) {\n            viewport = new VolumeViewport3D(viewportInput);\n        }\n        else {\n            throw new Error(`Viewport Type ${type} is not supported`);\n        }\n        this._viewports.set(viewportId, viewport);\n        const eventDetail = {\n            element,\n            viewportId,\n            renderingEngineId: this.id,\n        };\n        if (!viewport.suppressEvents) {\n            triggerEvent(eventTarget, Events.ELEMENT_ENABLED, eventDetail);\n        }\n    }\n    addCustomViewport(viewportInputEntry) {\n        const { element, viewportId, type, defaultOptions } = viewportInputEntry;\n        element.tabIndex = -1;\n        const canvas = getOrCreateCanvas(element);\n        const { clientWidth, clientHeight } = canvas;\n        if (canvas.width !== clientWidth || canvas.height !== clientHeight) {\n            canvas.width = clientWidth;\n            canvas.height = clientHeight;\n        }\n        const viewportInput = {\n            id: viewportId,\n            renderingEngineId: this.id,\n            element,\n            type,\n            canvas,\n            sx: 0,\n            sy: 0,\n            sWidth: clientWidth,\n            sHeight: clientHeight,\n            defaultOptions: defaultOptions || {},\n        };\n        const ViewportType = viewportTypeToViewportClass[type];\n        const viewport = new ViewportType(viewportInput);\n        this._viewports.set(viewportId, viewport);\n        const eventDetail = {\n            element,\n            viewportId,\n            renderingEngineId: this.id,\n        };\n        triggerEvent(eventTarget, Events.ELEMENT_ENABLED, eventDetail);\n    }\n    setCustomViewports(viewportInputEntries) {\n        viewportInputEntries.forEach((vpie) => {\n            this.addCustomViewport(vpie);\n        });\n    }\n    setVtkjsDrivenViewports(viewportInputEntries) {\n        if (viewportInputEntries.length) {\n            const vtkDrivenCanvases = viewportInputEntries.map((vp) => getOrCreateCanvas(vp.element));\n            vtkDrivenCanvases.forEach((canvas) => {\n                const devicePixelRatio = window.devicePixelRatio || 1;\n                const rect = canvas.getBoundingClientRect();\n                canvas.width = rect.width * devicePixelRatio;\n                canvas.height = rect.height * devicePixelRatio;\n            });\n            const { offScreenCanvasWidth, offScreenCanvasHeight } = this._resizeOffScreenCanvas(vtkDrivenCanvases);\n            let xOffset = 0;\n            for (let i = 0; i < viewportInputEntries.length; i++) {\n                const vtkDrivenViewportInputEntry = viewportInputEntries[i];\n                const canvas = vtkDrivenCanvases[i];\n                const internalViewportEntry = {\n                    ...vtkDrivenViewportInputEntry,\n                    canvas,\n                };\n                this.addVtkjsDrivenViewport(internalViewportEntry, {\n                    offScreenCanvasWidth,\n                    offScreenCanvasHeight,\n                    xOffset,\n                });\n                xOffset += canvas.width;\n            }\n        }\n    }\n    _resizeOffScreenCanvas(canvasesDrivenByVtkJs) {\n        const { offScreenCanvasContainer, offscreenMultiRenderWindow } = this;\n        const offScreenCanvasHeight = Math.max(...canvasesDrivenByVtkJs.map((canvas) => canvas.height));\n        let offScreenCanvasWidth = 0;\n        canvasesDrivenByVtkJs.forEach((canvas) => {\n            offScreenCanvasWidth += canvas.width;\n        });\n        offScreenCanvasContainer.width = offScreenCanvasWidth;\n        offScreenCanvasContainer.height = offScreenCanvasHeight;\n        offscreenMultiRenderWindow.resize();\n        return { offScreenCanvasWidth, offScreenCanvasHeight };\n    }\n    _resize(viewportsDrivenByVtkJs, offScreenCanvasWidth, offScreenCanvasHeight) {\n        let _xOffset = 0;\n        for (let i = 0; i < viewportsDrivenByVtkJs.length; i++) {\n            const viewport = viewportsDrivenByVtkJs[i];\n            const { sxStartDisplayCoords, syStartDisplayCoords, sxEndDisplayCoords, syEndDisplayCoords, sx, sy, sWidth, sHeight, } = this._getViewportCoordsOnOffScreenCanvas(viewport, offScreenCanvasWidth, offScreenCanvasHeight, _xOffset);\n            _xOffset += viewport.canvas.width;\n            viewport.sx = sx;\n            viewport.sy = sy;\n            viewport.sWidth = sWidth;\n            viewport.sHeight = sHeight;\n            const renderer = this.offscreenMultiRenderWindow.getRenderer(viewport.id);\n            renderer.setViewport([\n                sxStartDisplayCoords,\n                syStartDisplayCoords,\n                sxEndDisplayCoords,\n                syEndDisplayCoords,\n            ]);\n        }\n        return _xOffset;\n    }\n    _getViewportCoordsOnOffScreenCanvas(viewport, offScreenCanvasWidth, offScreenCanvasHeight, _xOffset) {\n        const { canvas } = viewport;\n        const { width: sWidth, height: sHeight } = canvas;\n        const sx = _xOffset;\n        const sy = 0;\n        const sxStartDisplayCoords = sx / offScreenCanvasWidth;\n        const syStartDisplayCoords = sy + (offScreenCanvasHeight - sHeight) / offScreenCanvasHeight;\n        const sWidthDisplayCoords = sWidth / offScreenCanvasWidth;\n        const sHeightDisplayCoords = sHeight / offScreenCanvasHeight;\n        return {\n            sxStartDisplayCoords,\n            syStartDisplayCoords,\n            sxEndDisplayCoords: sxStartDisplayCoords + sWidthDisplayCoords,\n            syEndDisplayCoords: syStartDisplayCoords + sHeightDisplayCoords,\n            sx,\n            sy,\n            sWidth,\n            sHeight,\n        };\n    }\n    _getViewportsAsArray() {\n        return Array.from(this._viewports.values());\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && !this._animationFrameSet) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);\n            this._animationFrameSet = true;\n        }\n    }\n    performVtkDrawCall() {\n        const { offscreenMultiRenderWindow } = this;\n        const renderWindow = offscreenMultiRenderWindow.getRenderWindow();\n        const renderers = offscreenMultiRenderWindow.getRenderers();\n        if (!renderers.length) {\n            return;\n        }\n        for (let i = 0; i < renderers.length; i++) {\n            const { renderer, id } = renderers[i];\n            if (this._needsRender.has(id)) {\n                renderer.setDraw(true);\n            }\n            else {\n                renderer.setDraw(false);\n            }\n        }\n        renderWindow.render();\n        for (let i = 0; i < renderers.length; i++) {\n            renderers[i].renderer.setDraw(false);\n        }\n    }\n    renderViewportUsingCustomOrVtkPipeline(viewport) {\n        let eventDetail;\n        if (viewport.sWidth < VIEWPORT_MIN_SIZE ||\n            viewport.sHeight < VIEWPORT_MIN_SIZE) {\n            console.warn('Viewport is too small', viewport.sWidth, viewport.sHeight);\n            return;\n        }\n        if (viewportTypeUsesCustomRenderingPipeline(viewport.type) === true) {\n            eventDetail =\n                viewport.customRenderViewportToCanvas();\n        }\n        else {\n            if (this.useCPURendering) {\n                throw new Error('GPU not available, and using a viewport with no custom render pipeline.');\n            }\n            const { offscreenMultiRenderWindow } = this;\n            const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n            const context = openGLRenderWindow.get3DContext();\n            const offScreenCanvas = context.canvas;\n            eventDetail = this._renderViewportFromVtkCanvasToOnscreenCanvas(viewport, offScreenCanvas);\n        }\n        return eventDetail;\n    }\n    _renderViewportFromVtkCanvasToOnscreenCanvas(viewport, offScreenCanvas) {\n        const { element, canvas, sx, sy, sWidth, sHeight, id: viewportId, renderingEngineId, suppressEvents, } = viewport;\n        const { width: dWidth, height: dHeight } = canvas;\n        const onScreenContext = canvas.getContext('2d');\n        onScreenContext.drawImage(offScreenCanvas, sx, sy, sWidth, sHeight, 0, 0, dWidth, dHeight);\n        return {\n            element,\n            suppressEvents,\n            viewportId,\n            renderingEngineId,\n            viewportStatus: viewport.viewportStatus,\n        };\n    }\n    _resetViewport(viewport) {\n        const renderingEngineId = this.id;\n        const { element, canvas, id: viewportId } = viewport;\n        const eventDetail = {\n            element,\n            viewportId,\n            renderingEngineId,\n        };\n        viewport.removeWidgets();\n        triggerEvent(eventTarget, Events.ELEMENT_DISABLED, eventDetail);\n        element.removeAttribute('data-viewport-uid');\n        element.removeAttribute('data-rendering-engine-uid');\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    _clearAnimationFrame() {\n        window.cancelAnimationFrame(this._animationFrameHandle);\n        this._needsRender.clear();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n    }\n    _reset() {\n        const viewports = this._getViewportsAsArray();\n        viewports.forEach((viewport) => {\n            this._resetViewport(viewport);\n        });\n        this._clearAnimationFrame();\n        this._viewports = new Map();\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _downloadOffScreenCanvas() {\n        const dataURL = this._debugRender();\n        _TEMPDownloadURI(dataURL);\n    }\n    _debugRender() {\n        const { offscreenMultiRenderWindow } = this;\n        const renderWindow = offscreenMultiRenderWindow.getRenderWindow();\n        const renderers = offscreenMultiRenderWindow.getRenderers();\n        for (let i = 0; i < renderers.length; i++) {\n            renderers[i].renderer.setDraw(true);\n        }\n        renderWindow.render();\n        const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n        const context = openGLRenderWindow.get3DContext();\n        const offScreenCanvas = context.canvas;\n        const dataURL = offScreenCanvas.toDataURL();\n        this._getViewportsAsArray().forEach((viewport) => {\n            const { sx, sy, sWidth, sHeight } = viewport;\n            const canvas = viewport.canvas;\n            const { width: dWidth, height: dHeight } = canvas;\n            const onScreenContext = canvas.getContext('2d');\n            onScreenContext.drawImage(offScreenCanvas, sx, sy, sWidth, sHeight, 0, 0, dWidth, dHeight);\n        });\n        return dataURL;\n    }\n}\nexport default RenderingEngine;\nfunction _TEMPDownloadURI(uri) {\n    const link = document.createElement('a');\n    link.download = 'viewport.png';\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkCamera from '@kitware/vtk.js/Rendering/Core/Camera';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkImageMapper from '@kitware/vtk.js/Rendering/Core/ImageMapper';\nimport vtkImageSlice from '@kitware/vtk.js/Rendering/Core/ImageSlice';\nimport { mat4, vec2, vec3 } from 'gl-matrix';\nimport eventTarget from '../eventTarget';\nimport * as metaData from '../metaData';\nimport { getImageDataMetadata as getImageDataMetadataUtil } from '../utilities/getImageDataMetadata';\nimport { coreLog } from '../utilities/logger';\nimport { actorIsA, isImageActor } from '../utilities/actorCheck';\nimport * as colormapUtils from '../utilities/colormap';\nimport { getTransferFunctionNodes, setTransferFunctionNodes, } from '../utilities/transferFunctionUtils';\nimport * as windowLevelUtil from '../utilities/windowLevel';\nimport createLinearRGBTransferFunction from '../utilities/createLinearRGBTransferFunction';\nimport createSigmoidRGBTransferFunction from '../utilities/createSigmoidRGBTransferFunction';\nimport { updateVTKImageDataWithCornerstoneImage } from '../utilities/updateVTKImageDataWithCornerstoneImage';\nimport triggerEvent from '../utilities/triggerEvent';\nimport { isEqual } from '../utilities/isEqual';\nimport invertRgbTransferFunction from '../utilities/invertRgbTransferFunction';\nimport imageRetrieveMetadataProvider from '../utilities/imageRetrieveMetadataProvider';\nimport imageIdToURI from '../utilities/imageIdToURI';\nimport Viewport from './Viewport';\nimport drawImageSync from './helpers/cpuFallback/drawImageSync';\nimport { getImagePlaneModule } from '../utilities/buildMetadata';\nimport { Events, InterpolationType, MetadataModules, RequestType, VOILUTFunctionType, ViewportStatus, } from '../enums';\nimport { loadAndCacheImage } from '../loaders/imageLoader';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport calculateTransform from './helpers/cpuFallback/rendering/calculateTransform';\nimport canvasToPixel from './helpers/cpuFallback/rendering/canvasToPixel';\nimport getDefaultViewport from './helpers/cpuFallback/rendering/getDefaultViewport';\nimport pixelToCanvas from './helpers/cpuFallback/rendering/pixelToCanvas';\nimport resize from './helpers/cpuFallback/rendering/resize';\nimport cache from '../cache/cache';\nimport { getConfiguration, getShouldUseCPURendering } from '../init';\nimport { createProgressive } from '../loaders/ProgressiveRetrieveImages';\nimport correctShift from './helpers/cpuFallback/rendering/correctShift';\nimport resetCamera from './helpers/cpuFallback/rendering/resetCamera';\nimport { Transform } from './helpers/cpuFallback/rendering/transform';\nimport uuidv4 from '../utilities/uuidv4';\nimport getSpacingInNormalDirection from '../utilities/getSpacingInNormalDirection';\nimport getClosestImageId from '../utilities/getClosestImageId';\nimport { adjustInitialViewUp } from '../utilities/adjustInitialViewUp';\nconst EPSILON = 1;\nconst log = coreLog.getLogger('RenderingEngine', 'StackViewport');\nclass StackViewport extends Viewport {\n    constructor(props) {\n        super(props);\n        this.imageIds = [];\n        this.imageKeyToIndexMap = new Map();\n        this.currentImageIdIndex = 0;\n        this.targetImageIdIndex = 0;\n        this.imagesLoader = this;\n        this.globalDefaultProperties = {};\n        this.perImageIdDefaultProperties = new Map();\n        this.voiUpdatedWithSetProperties = false;\n        this.invert = false;\n        this.initialInvert = false;\n        this.initialTransferFunctionNodes = null;\n        this.stackInvalidated = false;\n        this._publishCalibratedEvent = false;\n        this.updateRenderingPipeline = () => {\n            this._configureRenderingPipeline();\n        };\n        this.resize = () => {\n            if (this.useCPURendering) {\n                this._resizeCPU();\n            }\n        };\n        this._resizeCPU = () => {\n            if (this._cpuFallbackEnabledElement.viewport) {\n                resize(this._cpuFallbackEnabledElement);\n            }\n        };\n        this.getFrameOfReferenceUID = (sliceIndex) => this.getImagePlaneReferenceData(sliceIndex)?.FrameOfReferenceUID;\n        this.getCornerstoneImage = () => this.csImage;\n        this.createActorMapper = (imageData) => {\n            const mapper = vtkImageMapper.newInstance();\n            mapper.setInputData(imageData);\n            const actor = vtkImageSlice.newInstance();\n            actor.setMapper(mapper);\n            const { preferSizeOverAccuracy } = getConfiguration().rendering;\n            if (preferSizeOverAccuracy) {\n                mapper.setPreferSizeOverAccuracy(true);\n            }\n            if (imageData.getPointData().getScalars().getNumberOfComponents() > 1) {\n                actor.getProperty().setIndependentComponents(false);\n            }\n            return actor;\n        };\n        this.getNumberOfSlices = () => {\n            return this.imageIds.length;\n        };\n        this.getDefaultProperties = (imageId) => {\n            let imageProperties;\n            if (imageId !== undefined) {\n                imageProperties = this.perImageIdDefaultProperties.get(imageId);\n            }\n            if (imageProperties !== undefined) {\n                return imageProperties;\n            }\n            return {\n                ...this.globalDefaultProperties,\n            };\n        };\n        this.getProperties = () => {\n            const { colormap, voiRange, VOILUTFunction, interpolationType, invert, voiUpdatedWithSetProperties, } = this;\n            return {\n                colormap,\n                voiRange,\n                VOILUTFunction,\n                interpolationType,\n                invert,\n                isComputedVOI: !voiUpdatedWithSetProperties,\n            };\n        };\n        this.resetCameraForResize = () => {\n            return this.resetCamera({\n                resetPan: true,\n                resetZoom: true,\n                resetToCenter: true,\n                suppressEvents: true,\n            });\n        };\n        this.getRotationCPU = () => {\n            const { viewport } = this._cpuFallbackEnabledElement;\n            return viewport.rotation;\n        };\n        this.getRotationGPU = () => {\n            const { viewUp: currentViewUp, viewPlaneNormal, flipVertical, flipHorizontal, } = this.getCameraNoRotation();\n            const adjustedViewUp = adjustInitialViewUp(this.initialViewUp, flipHorizontal, flipVertical, viewPlaneNormal);\n            const angleRad = vec3.angle(adjustedViewUp, currentViewUp);\n            const initialToCurrentViewUpAngle = (angleRad * 180) / Math.PI;\n            const initialToCurrentViewUpCross = vec3.cross(vec3.create(), adjustedViewUp, currentViewUp);\n            const normalDot = vec3.dot(initialToCurrentViewUpCross, viewPlaneNormal);\n            return normalDot >= 0\n                ? initialToCurrentViewUpAngle\n                : (360 - initialToCurrentViewUpAngle) % 360;\n        };\n        this.setRotation = (rotation) => {\n            const previousCamera = this.getCamera();\n            if (this.useCPURendering) {\n                this.setRotationCPU(rotation);\n            }\n            else {\n                this.setRotationGPU(rotation);\n            }\n            if (this._suppressCameraModifiedEvents) {\n                return;\n            }\n            const camera = this.getCamera();\n            const eventDetail = {\n                previousCamera,\n                camera,\n                element: this.element,\n                viewportId: this.id,\n                renderingEngineId: this.renderingEngineId,\n            };\n            triggerEvent(this.element, Events.CAMERA_MODIFIED, eventDetail);\n        };\n        this.renderImageObject = (image) => {\n            this._setCSImage(image);\n            const renderFn = this.useCPURendering\n                ? this._updateToDisplayImageCPU\n                : this._updateActorToDisplayImageId;\n            renderFn.call(this, image);\n        };\n        this._setCSImage = (image) => {\n            image.isPreScaled = image.preScale?.scaled;\n            this.csImage = image;\n        };\n        this.canvasToWorldCPU = (canvasPos, worldPos = [0, 0, 0]) => {\n            if (!this._cpuFallbackEnabledElement.image) {\n                return;\n            }\n            const [px, py] = canvasToPixel(this._cpuFallbackEnabledElement, canvasPos);\n            const { origin, spacing, direction } = this.getImageData();\n            const iVector = direction.slice(0, 3);\n            const jVector = direction.slice(3, 6);\n            vec3.scaleAndAdd(worldPos, origin, iVector, px * spacing[0]);\n            vec3.scaleAndAdd(worldPos, worldPos, jVector, py * spacing[1]);\n            return worldPos;\n        };\n        this.worldToCanvasCPU = (worldPos) => {\n            const { spacing, direction, origin } = this.getImageData();\n            const iVector = direction.slice(0, 3);\n            const jVector = direction.slice(3, 6);\n            const diff = vec3.subtract(vec3.create(), worldPos, origin);\n            const indexPoint = [\n                vec3.dot(diff, iVector) / spacing[0],\n                vec3.dot(diff, jVector) / spacing[1],\n            ];\n            const canvasPoint = pixelToCanvas(this._cpuFallbackEnabledElement, indexPoint);\n            return canvasPoint;\n        };\n        this.canvasToWorldGPU = (canvasPos) => {\n            const renderer = this.getRenderer();\n            const vtkCamera = this.getVtkActiveCamera();\n            const crange = vtkCamera.getClippingRange();\n            const distance = vtkCamera.getDistance();\n            vtkCamera.setClippingRange(distance, distance + 0.1);\n            const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n            const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n            const size = openGLRenderWindow.getSize();\n            const devicePixelRatio = window.devicePixelRatio || 1;\n            const canvasPosWithDPR = [\n                canvasPos[0] * devicePixelRatio,\n                canvasPos[1] * devicePixelRatio,\n            ];\n            const displayCoord = [\n                canvasPosWithDPR[0] + this.sx,\n                canvasPosWithDPR[1] + this.sy,\n            ];\n            displayCoord[1] = size[1] - displayCoord[1];\n            const worldCoord = openGLRenderWindow.displayToWorld(displayCoord[0], displayCoord[1], 0, renderer);\n            vtkCamera.setClippingRange(crange[0], crange[1]);\n            return [worldCoord[0], worldCoord[1], worldCoord[2]];\n        };\n        this.worldToCanvasGPU = (worldPos) => {\n            const renderer = this.getRenderer();\n            const vtkCamera = this.getVtkActiveCamera();\n            const crange = vtkCamera.getClippingRange();\n            const distance = vtkCamera.getDistance();\n            vtkCamera.setClippingRange(distance, distance + 0.1);\n            const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n            const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n            const size = openGLRenderWindow.getSize();\n            const displayCoord = openGLRenderWindow.worldToDisplay(...worldPos, renderer);\n            displayCoord[1] = size[1] - displayCoord[1];\n            const canvasCoord = [\n                displayCoord[0] - this.sx,\n                displayCoord[1] - this.sy,\n            ];\n            vtkCamera.setClippingRange(crange[0], crange[1]);\n            const devicePixelRatio = window.devicePixelRatio || 1;\n            const canvasCoordWithDPR = [\n                canvasCoord[0] / devicePixelRatio,\n                canvasCoord[1] / devicePixelRatio,\n            ];\n            return canvasCoordWithDPR;\n        };\n        this.getCurrentImageIdIndex = () => {\n            return this.currentImageIdIndex;\n        };\n        this.getSliceIndex = () => {\n            return this.currentImageIdIndex;\n        };\n        this.getTargetImageIdIndex = () => {\n            return this.targetImageIdIndex;\n        };\n        this.getImageIds = () => {\n            return this.imageIds;\n        };\n        this.getCurrentImageId = (index = this.getCurrentImageIdIndex()) => {\n            return this.imageIds[index];\n        };\n        this.hasImageId = (imageId) => {\n            return this.imageKeyToIndexMap.has(imageId);\n        };\n        this.hasImageURI = (imageURI) => {\n            return this.imageKeyToIndexMap.has(imageURI);\n        };\n        this.customRenderViewportToCanvas = () => {\n            if (!this.useCPURendering) {\n                throw new Error('Custom cpu rendering pipeline should only be hit in CPU rendering mode');\n            }\n            if (this._cpuFallbackEnabledElement.image) {\n                drawImageSync(this._cpuFallbackEnabledElement, this.cpuRenderingInvalidated);\n                this.cpuRenderingInvalidated = false;\n            }\n            else {\n                this.fillWithBackgroundColor();\n            }\n            return {\n                canvas: this.canvas,\n                element: this.element,\n                viewportId: this.id,\n                renderingEngineId: this.renderingEngineId,\n                viewportStatus: this.viewportStatus,\n            };\n        };\n        this.renderingPipelineFunctions = {\n            getImageData: {\n                cpu: this.getImageDataCPU,\n                gpu: this.getImageDataGPU,\n            },\n            setColormap: {\n                cpu: this.setColormapCPU,\n                gpu: this.setColormapGPU,\n            },\n            getCamera: {\n                cpu: this.getCameraCPU,\n                gpu: super.getCamera,\n            },\n            setCamera: {\n                cpu: this.setCameraCPU,\n                gpu: super.setCamera,\n            },\n            getPan: {\n                cpu: this.getPanCPU,\n                gpu: super.getPan,\n            },\n            setPan: {\n                cpu: this.setPanCPU,\n                gpu: super.setPan,\n            },\n            getZoom: {\n                cpu: this.getZoomCPU,\n                gpu: super.getZoom,\n            },\n            setZoom: {\n                cpu: this.setZoomCPU,\n                gpu: super.setZoom,\n            },\n            setVOI: {\n                cpu: this.setVOICPU,\n                gpu: this.setVOIGPU,\n            },\n            getRotation: {\n                cpu: this.getRotationCPU,\n                gpu: this.getRotationGPU,\n            },\n            setInterpolationType: {\n                cpu: this.setInterpolationTypeCPU,\n                gpu: this.setInterpolationTypeGPU,\n            },\n            setInvertColor: {\n                cpu: this.setInvertColorCPU,\n                gpu: this.setInvertColorGPU,\n            },\n            resetCamera: {\n                cpu: (options = {}) => {\n                    const { resetPan = true, resetZoom = true } = options;\n                    this.resetCameraCPU({ resetPan, resetZoom });\n                    return true;\n                },\n                gpu: (options = {}) => {\n                    const { resetPan = true, resetZoom = true } = options;\n                    this.resetCameraGPU({ resetPan, resetZoom });\n                    return true;\n                },\n            },\n            canvasToWorld: {\n                cpu: this.canvasToWorldCPU,\n                gpu: this.canvasToWorldGPU,\n            },\n            worldToCanvas: {\n                cpu: this.worldToCanvasCPU,\n                gpu: this.worldToCanvasGPU,\n            },\n            getRenderer: {\n                cpu: () => this.getCPUFallbackError('getRenderer'),\n                gpu: super.getRenderer,\n            },\n            getDefaultActor: {\n                cpu: () => this.getCPUFallbackError('getDefaultActor'),\n                gpu: super.getDefaultActor,\n            },\n            getActors: {\n                cpu: () => this.getCPUFallbackError('getActors'),\n                gpu: super.getActors,\n            },\n            getActor: {\n                cpu: () => this.getCPUFallbackError('getActor'),\n                gpu: super.getActor,\n            },\n            setActors: {\n                cpu: () => this.getCPUFallbackError('setActors'),\n                gpu: super.setActors,\n            },\n            addActors: {\n                cpu: () => this.getCPUFallbackError('addActors'),\n                gpu: super.addActors,\n            },\n            addActor: {\n                cpu: () => this.getCPUFallbackError('addActor'),\n                gpu: super.addActor,\n            },\n            removeAllActors: {\n                cpu: () => this.getCPUFallbackError('removeAllActors'),\n                gpu: super.removeAllActors,\n            },\n            unsetColormap: {\n                cpu: this.unsetColormapCPU,\n                gpu: this.unsetColormapGPU,\n            },\n        };\n        this.scaling = {};\n        this.modality = null;\n        this.useCPURendering = getShouldUseCPURendering();\n        this._configureRenderingPipeline();\n        const result = this.useCPURendering\n            ? this._resetCPUFallbackElement()\n            : this._resetGPUViewport();\n        this.currentImageIdIndex = 0;\n        this.targetImageIdIndex = 0;\n        this.resetCamera();\n        this.initializeElementDisabledHandler();\n    }\n    setUseCPURendering(value) {\n        this.useCPURendering = value;\n        this._configureRenderingPipeline(value);\n    }\n    static get useCustomRenderingPipeline() {\n        return getShouldUseCPURendering();\n    }\n    _configureRenderingPipeline(value) {\n        this.useCPURendering = value ?? getShouldUseCPURendering();\n        for (const key in this.renderingPipelineFunctions) {\n            if (Object.prototype.hasOwnProperty.call(this.renderingPipelineFunctions, key)) {\n                const functions = this.renderingPipelineFunctions[key];\n                this[key] = this.useCPURendering ? functions.cpu : functions.gpu;\n            }\n        }\n        const result = this.useCPURendering\n            ? this._resetCPUFallbackElement()\n            : this._resetGPUViewport();\n    }\n    _resetCPUFallbackElement() {\n        this._cpuFallbackEnabledElement = {\n            canvas: this.canvas,\n            renderingTools: {},\n            transform: new Transform(),\n            viewport: { rotation: 0 },\n        };\n    }\n    _resetGPUViewport() {\n        const renderer = this.getRenderer();\n        const camera = vtkCamera.newInstance();\n        renderer.setActiveCamera(camera);\n        const viewPlaneNormal = [0, 0, -1];\n        this.initialViewUp = [0, -1, 0];\n        camera.setDirectionOfProjection(-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]);\n        camera.setViewUp(...this.initialViewUp);\n        camera.setParallelProjection(true);\n        camera.setThicknessFromFocalPoint(0.1);\n        camera.setFreezeFocalPoint(true);\n    }\n    initializeElementDisabledHandler() {\n        eventTarget.addEventListener(Events.ELEMENT_DISABLED, function elementDisabledHandler() {\n            clearTimeout(this.debouncedTimeout);\n            eventTarget.removeEventListener(Events.ELEMENT_DISABLED, elementDisabledHandler);\n        });\n    }\n    getImageDataGPU() {\n        const defaultActor = this.getDefaultActor();\n        if (!defaultActor) {\n            return;\n        }\n        if (!isImageActor(defaultActor)) {\n            return;\n        }\n        const { actor } = defaultActor;\n        const vtkImageData = actor.getMapper().getInputData();\n        const csImage = this.csImage;\n        return {\n            dimensions: vtkImageData.getDimensions(),\n            spacing: vtkImageData.getSpacing(),\n            origin: vtkImageData.getOrigin(),\n            direction: vtkImageData.getDirection(),\n            get scalarData() {\n                return csImage?.voxelManager.getScalarData();\n            },\n            imageData: actor.getMapper().getInputData(),\n            metadata: {\n                Modality: this.modality,\n                FrameOfReferenceUID: this.getFrameOfReferenceUID(),\n            },\n            scaling: this.scaling,\n            hasPixelSpacing: this.hasPixelSpacing,\n            calibration: { ...csImage?.calibration, ...this.calibration },\n            preScale: {\n                ...csImage?.preScale,\n            },\n            voxelManager: csImage?.voxelManager,\n        };\n    }\n    getImageDataCPU() {\n        const { metadata } = this._cpuFallbackEnabledElement;\n        if (!metadata) {\n            return;\n        }\n        const spacing = metadata.spacing;\n        const csImage = this.csImage;\n        return {\n            dimensions: metadata.dimensions,\n            spacing,\n            origin: metadata.origin,\n            direction: metadata.direction,\n            metadata: {\n                Modality: this.modality,\n                FrameOfReferenceUID: this.getFrameOfReferenceUID(),\n            },\n            scaling: this.scaling,\n            imageData: {\n                getDirection: () => metadata.direction,\n                getDimensions: () => metadata.dimensions,\n                getScalarData: () => this.cpuImagePixelData,\n                getSpacing: () => spacing,\n                worldToIndex: (point) => {\n                    const canvasPoint = this.worldToCanvasCPU(point);\n                    const pixelCoord = canvasToPixel(this._cpuFallbackEnabledElement, canvasPoint);\n                    return [pixelCoord[0], pixelCoord[1], 0];\n                },\n                indexToWorld: (point, destPoint) => {\n                    const canvasPoint = pixelToCanvas(this._cpuFallbackEnabledElement, [\n                        point[0],\n                        point[1],\n                    ]);\n                    return this.canvasToWorldCPU(canvasPoint, destPoint);\n                },\n            },\n            scalarData: this.cpuImagePixelData,\n            hasPixelSpacing: this.hasPixelSpacing,\n            calibration: { ...csImage?.calibration, ...this.calibration },\n            preScale: {\n                ...csImage?.preScale,\n            },\n            voxelManager: csImage?.voxelManager,\n        };\n    }\n    calibrateIfNecessary(imageId, imagePlaneModule) {\n        const calibration = metaData.get('calibratedPixelSpacing', imageId);\n        const isUpdated = this.calibration !== calibration;\n        const { scale } = calibration || {};\n        this.hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n        imagePlaneModule.calibration = calibration;\n        if (!isUpdated) {\n            return imagePlaneModule;\n        }\n        this.calibration = calibration;\n        this._publishCalibratedEvent = true;\n        this._calibrationEvent = {\n            scale,\n            calibration,\n        };\n        return imagePlaneModule;\n    }\n    setDefaultProperties(ViewportProperties, imageId) {\n        if (imageId == null) {\n            this.globalDefaultProperties = ViewportProperties;\n        }\n        else {\n            this.perImageIdDefaultProperties.set(imageId, ViewportProperties);\n            if (this.getCurrentImageId() === imageId) {\n                this.setProperties(ViewportProperties);\n            }\n        }\n    }\n    clearDefaultProperties(imageId) {\n        if (imageId == null) {\n            this.globalDefaultProperties = {};\n            this.resetProperties();\n        }\n        else {\n            this.perImageIdDefaultProperties.delete(imageId);\n            this.resetToDefaultProperties();\n        }\n    }\n    setProperties({ colormap, voiRange, VOILUTFunction, invert, interpolationType, } = {}, suppressEvents = false) {\n        this.viewportStatus = this.csImage\n            ? ViewportStatus.PRE_RENDER\n            : ViewportStatus.LOADING;\n        this.globalDefaultProperties = {\n            colormap: this.globalDefaultProperties.colormap ?? colormap,\n            voiRange: this.globalDefaultProperties.voiRange ?? voiRange,\n            VOILUTFunction: this.globalDefaultProperties.VOILUTFunction ?? VOILUTFunction,\n            invert: this.globalDefaultProperties.invert ?? invert,\n            interpolationType: this.globalDefaultProperties.interpolationType ?? interpolationType,\n        };\n        if (typeof colormap !== 'undefined') {\n            this.setColormap(colormap);\n        }\n        if (typeof voiRange !== 'undefined') {\n            const voiUpdatedWithSetProperties = true;\n            this.setVOI(voiRange, { suppressEvents, voiUpdatedWithSetProperties });\n        }\n        if (typeof VOILUTFunction !== 'undefined') {\n            this.setVOILUTFunction(VOILUTFunction, suppressEvents);\n        }\n        if (typeof invert !== 'undefined') {\n            this.setInvertColor(invert);\n        }\n        if (typeof interpolationType !== 'undefined') {\n            this.setInterpolationType(interpolationType);\n        }\n    }\n    resetProperties() {\n        this.cpuRenderingInvalidated = true;\n        this.voiUpdatedWithSetProperties = false;\n        this.viewportStatus = ViewportStatus.PRE_RENDER;\n        this.fillWithBackgroundColor();\n        if (this.useCPURendering) {\n            this._cpuFallbackEnabledElement.renderingTools = {};\n        }\n        this._resetProperties();\n        this.render();\n    }\n    _resetProperties() {\n        let voiRange;\n        if (this._isCurrentImagePTPrescaled()) {\n            voiRange = this._getDefaultPTPrescaledVOIRange();\n        }\n        else {\n            voiRange = this._getVOIRangeForCurrentImage();\n        }\n        this.setVOI(voiRange);\n        this.setInvertColor(this.initialInvert);\n        this.setInterpolationType(InterpolationType.LINEAR);\n        if (!this.useCPURendering) {\n            const transferFunction = this.getTransferFunction();\n            setTransferFunctionNodes(transferFunction, this.initialTransferFunctionNodes);\n            const nodes = getTransferFunctionNodes(transferFunction);\n            const RGBPoints = nodes.reduce((acc, node) => {\n                acc.push(node[0], node[1], node[2], node[3]);\n                return acc;\n            }, []);\n            const defaultActor = this.getDefaultActor();\n            const matchedColormap = colormapUtils.findMatchingColormap(RGBPoints, defaultActor.actor);\n            this.setColormap(matchedColormap);\n        }\n    }\n    resetToDefaultProperties() {\n        this.cpuRenderingInvalidated = true;\n        this.viewportStatus = ViewportStatus.PRE_RENDER;\n        this.fillWithBackgroundColor();\n        if (this.useCPURendering) {\n            this._cpuFallbackEnabledElement.renderingTools = {};\n        }\n        const currentImageId = this.getCurrentImageId();\n        const properties = this.perImageIdDefaultProperties.get(currentImageId) ||\n            this.globalDefaultProperties;\n        if (properties.colormap?.name) {\n            this.setColormap(properties.colormap);\n        }\n        let voiRange;\n        if (properties.voiRange == undefined) {\n            voiRange = this._getVOIRangeForCurrentImage();\n        }\n        else {\n            voiRange = properties.voiRange;\n        }\n        this.setVOI(voiRange);\n        this.setInterpolationType(InterpolationType.LINEAR);\n        this.setInvertColor(false);\n        this.render();\n    }\n    _getVOIFromCache() {\n        let voiRange;\n        if (this.voiUpdatedWithSetProperties) {\n            voiRange = this.voiRange;\n        }\n        else if (this._isCurrentImagePTPrescaled()) {\n            voiRange = this._getDefaultPTPrescaledVOIRange();\n        }\n        else {\n            voiRange = this._getVOIRangeForCurrentImage() ?? this.voiRange;\n        }\n        return voiRange;\n    }\n    _setPropertiesFromCache() {\n        const voiRange = this._getVOIFromCache();\n        const { interpolationType, invert } = this;\n        this.setVOI(voiRange);\n        this.setInterpolationType(interpolationType);\n        this.setInvertColor(invert);\n    }\n    getCameraCPU() {\n        const { metadata, viewport } = this._cpuFallbackEnabledElement;\n        if (!metadata) {\n            return {};\n        }\n        const { direction } = metadata;\n        const viewPlaneNormal = direction.slice(6, 9).map((x) => -x);\n        let viewUp = direction.slice(3, 6).map((x) => -x);\n        if (viewport.rotation) {\n            const rotationMatrix = mat4.fromRotation(mat4.create(), (viewport.rotation * Math.PI) / 180, viewPlaneNormal);\n            viewUp = vec3.transformMat4(vec3.create(), viewUp, rotationMatrix);\n        }\n        const canvasCenter = [\n            this.element.clientWidth / 2,\n            this.element.clientHeight / 2,\n        ];\n        const canvasCenterWorld = this.canvasToWorld(canvasCenter);\n        const topLeftWorld = this.canvasToWorld([0, 0]);\n        const bottomLeftWorld = this.canvasToWorld([0, this.element.clientHeight]);\n        const parallelScale = vec3.distance(topLeftWorld, bottomLeftWorld) / 2;\n        return {\n            parallelProjection: true,\n            focalPoint: canvasCenterWorld,\n            position: [0, 0, 0],\n            parallelScale,\n            scale: viewport.scale,\n            viewPlaneNormal: [\n                viewPlaneNormal[0],\n                viewPlaneNormal[1],\n                viewPlaneNormal[2],\n            ],\n            viewUp: [viewUp[0], viewUp[1], viewUp[2]],\n            flipHorizontal: this.flipHorizontal,\n            flipVertical: this.flipVertical,\n        };\n    }\n    setCameraCPU(cameraInterface) {\n        const { viewport, image } = this._cpuFallbackEnabledElement;\n        const previousCamera = this.getCameraCPU();\n        const { focalPoint, parallelScale, scale, flipHorizontal, flipVertical } = cameraInterface;\n        const { clientHeight } = this.element;\n        if (focalPoint) {\n            const focalPointCanvas = this.worldToCanvasCPU(focalPoint);\n            const focalPointPixel = canvasToPixel(this._cpuFallbackEnabledElement, focalPointCanvas);\n            const prevFocalPointCanvas = this.worldToCanvasCPU(previousCamera.focalPoint);\n            const prevFocalPointPixel = canvasToPixel(this._cpuFallbackEnabledElement, prevFocalPointCanvas);\n            const deltaPixel = vec2.create();\n            vec2.subtract(deltaPixel, vec2.fromValues(focalPointPixel[0], focalPointPixel[1]), vec2.fromValues(prevFocalPointPixel[0], prevFocalPointPixel[1]));\n            const shift = correctShift({ x: deltaPixel[0], y: deltaPixel[1] }, viewport);\n            viewport.translation.x -= shift.x;\n            viewport.translation.y -= shift.y;\n        }\n        if (parallelScale) {\n            const { rowPixelSpacing } = image;\n            const scale = (clientHeight * rowPixelSpacing * 0.5) / parallelScale;\n            viewport.scale = scale;\n            viewport.parallelScale = parallelScale;\n        }\n        if (scale) {\n            const { rowPixelSpacing } = image;\n            viewport.scale = scale;\n            viewport.parallelScale = (clientHeight * rowPixelSpacing * 0.5) / scale;\n        }\n        if (flipHorizontal !== undefined || flipVertical !== undefined) {\n            this.setFlipCPU({ flipHorizontal, flipVertical });\n        }\n        this._cpuFallbackEnabledElement.transform = calculateTransform(this._cpuFallbackEnabledElement);\n        const eventDetail = {\n            previousCamera,\n            camera: this.getCamera(),\n            element: this.element,\n            viewportId: this.id,\n            renderingEngineId: this.renderingEngineId,\n        };\n        triggerEvent(this.element, Events.CAMERA_MODIFIED, eventDetail);\n    }\n    getPanCPU() {\n        const { viewport } = this._cpuFallbackEnabledElement;\n        return [viewport.translation.x, viewport.translation.y];\n    }\n    setPanCPU(pan) {\n        const camera = this.getCameraCPU();\n        this.setCameraCPU({\n            ...camera,\n            focalPoint: [...pan.map((p) => -p), 0],\n        });\n    }\n    getZoomCPU() {\n        const { viewport } = this._cpuFallbackEnabledElement;\n        return viewport.scale;\n    }\n    setZoomCPU(zoom) {\n        const camera = this.getCameraCPU();\n        this.setCameraCPU({ ...camera, scale: zoom });\n    }\n    setFlipCPU({ flipHorizontal, flipVertical }) {\n        const { viewport } = this._cpuFallbackEnabledElement;\n        if (flipHorizontal !== undefined) {\n            viewport.hflip = flipHorizontal;\n            this.flipHorizontal = viewport.hflip;\n        }\n        if (flipVertical !== undefined) {\n            viewport.vflip = flipVertical;\n            this.flipVertical = viewport.vflip;\n        }\n    }\n    setVOILUTFunction(voiLUTFunction, suppressEvents) {\n        if (this.useCPURendering) {\n            throw new Error('VOI LUT function is not supported in CPU rendering');\n        }\n        const newVOILUTFunction = this._getValidVOILUTFunction(voiLUTFunction);\n        let forceRecreateLUTFunction = false;\n        if (this.VOILUTFunction !== newVOILUTFunction) {\n            forceRecreateLUTFunction = true;\n        }\n        this.VOILUTFunction = newVOILUTFunction;\n        const { voiRange } = this.getProperties();\n        this.setVOI(voiRange, { suppressEvents, forceRecreateLUTFunction });\n    }\n    setRotationCPU(rotation) {\n        const { viewport } = this._cpuFallbackEnabledElement;\n        viewport.rotation = rotation;\n    }\n    setRotationGPU(rotation) {\n        const panFit = this.getPan(this.fitToCanvasCamera);\n        const pan = this.getPan();\n        const panSub = vec2.sub([0, 0], panFit, pan);\n        this.setPan(panSub, false);\n        const { flipVertical, flipHorizontal, viewPlaneNormal } = this.getCamera();\n        const adjustedViewUp = adjustInitialViewUp(this.initialViewUp, flipHorizontal, flipVertical, viewPlaneNormal);\n        this.setCameraNoEvent({\n            viewUp: adjustedViewUp,\n        });\n        this.getVtkActiveCamera().roll(-rotation);\n        const afterPan = this.getPan();\n        const afterPanFit = this.getPan(this.fitToCanvasCamera);\n        const newCenter = vec2.sub([0, 0], afterPan, afterPanFit);\n        const newOffset = vec2.add([0, 0], panFit, newCenter);\n        this.setPan(newOffset, false);\n    }\n    setInterpolationTypeGPU(interpolationType) {\n        const defaultActor = this.getDefaultActor();\n        if (!defaultActor) {\n            return;\n        }\n        if (!isImageActor(defaultActor)) {\n            return;\n        }\n        const { actor } = defaultActor;\n        const volumeProperty = actor.getProperty();\n        volumeProperty.setInterpolationType(interpolationType);\n        this.interpolationType = interpolationType;\n    }\n    setInterpolationTypeCPU(interpolationType) {\n        const { viewport } = this._cpuFallbackEnabledElement;\n        viewport.pixelReplication =\n            interpolationType === InterpolationType.LINEAR ? false : true;\n        this.interpolationType = interpolationType;\n    }\n    setInvertColorCPU(invert) {\n        const { viewport } = this._cpuFallbackEnabledElement;\n        if (!viewport) {\n            return;\n        }\n        viewport.invert = invert;\n        this.invert = invert;\n    }\n    setInvertColorGPU(invert) {\n        const defaultActor = this.getDefaultActor();\n        if (!defaultActor) {\n            return;\n        }\n        if (!isImageActor(defaultActor)) {\n            return;\n        }\n        if (actorIsA(defaultActor, 'vtkVolume')) {\n            const volumeActor = defaultActor.actor;\n            const tfunc = volumeActor.getProperty().getRGBTransferFunction(0);\n            if ((!this.invert && invert) || (this.invert && !invert)) {\n                invertRgbTransferFunction(tfunc);\n            }\n            this.invert = invert;\n        }\n        else if (actorIsA(defaultActor, 'vtkImageSlice')) {\n            const imageSliceActor = defaultActor.actor;\n            const tfunc = imageSliceActor.getProperty().getRGBTransferFunction(0);\n            if ((!this.invert && invert) || (this.invert && !invert)) {\n                invertRgbTransferFunction(tfunc);\n            }\n            this.invert = invert;\n        }\n    }\n    setVOICPU(voiRange, options = {}) {\n        const { suppressEvents = false } = options;\n        const { viewport, image } = this._cpuFallbackEnabledElement;\n        if (!viewport || !image) {\n            return;\n        }\n        if (typeof voiRange === 'undefined') {\n            const { windowWidth: ww, windowCenter: wc } = image;\n            const wwToUse = Array.isArray(ww) ? ww[0] : ww;\n            const wcToUse = Array.isArray(wc) ? wc[0] : wc;\n            viewport.voi = {\n                windowWidth: wwToUse,\n                windowCenter: wcToUse,\n                voiLUTFunction: image.voiLUTFunction,\n            };\n            const { lower, upper } = windowLevelUtil.toLowHighRange(wwToUse, wcToUse, image.voiLUTFunction);\n            voiRange = { lower, upper };\n        }\n        else {\n            const { lower, upper } = voiRange;\n            const { windowCenter, windowWidth } = windowLevelUtil.toWindowLevel(lower, upper);\n            if (!viewport.voi) {\n                viewport.voi = {\n                    windowWidth: 0,\n                    windowCenter: 0,\n                    voiLUTFunction: image.voiLUTFunction,\n                };\n            }\n            viewport.voi.windowWidth = windowWidth;\n            viewport.voi.windowCenter = windowCenter;\n        }\n        this.voiRange = voiRange;\n        const eventDetail = {\n            viewportId: this.id,\n            range: voiRange,\n        };\n        if (!suppressEvents) {\n            triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n        }\n    }\n    getTransferFunction() {\n        const defaultActor = this.getDefaultActor();\n        if (!defaultActor) {\n            return;\n        }\n        if (!isImageActor(defaultActor)) {\n            return;\n        }\n        const imageActor = defaultActor.actor;\n        return imageActor.getProperty().getRGBTransferFunction(0);\n    }\n    setVOIGPU(voiRange, options = {}) {\n        const { suppressEvents = false, forceRecreateLUTFunction = false, voiUpdatedWithSetProperties = false, } = options;\n        if (voiRange &&\n            this.voiRange &&\n            this.voiRange.lower === voiRange.lower &&\n            this.voiRange.upper === voiRange.upper &&\n            !forceRecreateLUTFunction &&\n            !this.stackInvalidated) {\n            return;\n        }\n        const defaultActor = this.getDefaultActor();\n        if (!defaultActor) {\n            return;\n        }\n        if (!isImageActor(defaultActor)) {\n            return;\n        }\n        const imageActor = defaultActor.actor;\n        let voiRangeToUse = voiRange;\n        if (typeof voiRangeToUse === 'undefined') {\n            const imageData = imageActor.getMapper().getInputData();\n            const range = imageData.getPointData().getScalars().getRange();\n            const maxVoiRange = { lower: range[0], upper: range[1] };\n            voiRangeToUse = maxVoiRange;\n        }\n        imageActor.getProperty().setUseLookupTableScalarRange(true);\n        let transferFunction = imageActor.getProperty().getRGBTransferFunction(0);\n        const isSigmoidTFun = this.VOILUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID;\n        if (isSigmoidTFun || !transferFunction || forceRecreateLUTFunction) {\n            const transferFunctionCreator = isSigmoidTFun\n                ? createSigmoidRGBTransferFunction\n                : createLinearRGBTransferFunction;\n            transferFunction = transferFunctionCreator(voiRangeToUse);\n            if (this.invert) {\n                invertRgbTransferFunction(transferFunction);\n            }\n            imageActor.getProperty().setRGBTransferFunction(0, transferFunction);\n            this.initialTransferFunctionNodes =\n                getTransferFunctionNodes(transferFunction);\n        }\n        if (!isSigmoidTFun) {\n            transferFunction.setRange(voiRangeToUse.lower, voiRangeToUse.upper);\n        }\n        this.voiRange = voiRangeToUse;\n        if (!this.voiUpdatedWithSetProperties) {\n            this.voiUpdatedWithSetProperties = voiUpdatedWithSetProperties;\n        }\n        if (suppressEvents) {\n            return;\n        }\n        const eventDetail = {\n            viewportId: this.id,\n            range: voiRangeToUse,\n            VOILUTFunction: this.VOILUTFunction,\n        };\n        triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n    }\n    _addScalingToViewport(imageIdScalingFactor) {\n        if (this.scaling.PT) {\n            return;\n        }\n        const { suvbw, suvlbm, suvbsa } = imageIdScalingFactor;\n        const ptScaling = {};\n        if (suvlbm) {\n            ptScaling.suvbwToSuvlbm = suvlbm / suvbw;\n        }\n        if (suvbsa) {\n            ptScaling.suvbwToSuvbsa = suvbsa / suvbw;\n        }\n        this.scaling.PT = ptScaling;\n    }\n    getImageDataMetadata(image) {\n        const imageId = image.imageId;\n        const props = getImageDataMetadataUtil(image);\n        const { numberOfComponents, origin, direction, dimensions, spacing, numVoxels, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = props;\n        if (modality === 'PT' && scalingFactor) {\n            this._addScalingToViewport(scalingFactor);\n        }\n        this.modality = modality;\n        const voiLUTFunctionEnum = this._getValidVOILUTFunction(voiLUTFunction);\n        this.VOILUTFunction = voiLUTFunctionEnum;\n        this.calibration = calibration;\n        let imagePlaneModule = this._getImagePlaneModule(imageId);\n        if (!this.useCPURendering) {\n            imagePlaneModule = this.calibrateIfNecessary(imageId, imagePlaneModule);\n        }\n        return {\n            bitsAllocated: imagePixelModule.bitsAllocated,\n            numberOfComponents,\n            origin,\n            direction,\n            dimensions,\n            spacing,\n            numVoxels,\n            imagePlaneModule,\n            imagePixelModule,\n        };\n    }\n    matchImagesForOverlay(currentImageId, targetOverlayImageId) {\n        const matchImagesForOverlay = (targetImageId) => {\n            const overlayImagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, targetOverlayImageId);\n            const currentImagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, targetImageId);\n            const overlayOrientation = overlayImagePlaneModule.imageOrientationPatient;\n            const currentOrientation = currentImagePlaneModule.imageOrientationPatient;\n            if (overlayOrientation && currentOrientation) {\n                const closeEnough = isEqual(overlayImagePlaneModule.imageOrientationPatient, currentImagePlaneModule.imageOrientationPatient);\n                if (closeEnough) {\n                    const referencePosition = overlayImagePlaneModule.imagePositionPatient;\n                    const currentPosition = currentImagePlaneModule.imagePositionPatient;\n                    if (referencePosition && currentPosition) {\n                        const closeEnough = isEqual(referencePosition, currentPosition);\n                        if (closeEnough) {\n                            const referenceRows = overlayImagePlaneModule.rows;\n                            const referenceColumns = overlayImagePlaneModule.columns;\n                            const currentRows = currentImagePlaneModule.rows;\n                            const currentColumns = currentImagePlaneModule.columns;\n                            if (referenceRows === currentRows &&\n                                referenceColumns === currentColumns) {\n                                return targetImageId;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const referenceRows = overlayImagePlaneModule.rows;\n                const referenceColumns = overlayImagePlaneModule.columns;\n                const currentRows = currentImagePlaneModule.rows;\n                const currentColumns = currentImagePlaneModule.columns;\n                if (referenceRows === currentRows &&\n                    referenceColumns === currentColumns) {\n                    return targetImageId;\n                }\n            }\n        };\n        return matchImagesForOverlay(currentImageId);\n    }\n    getImagePlaneReferenceData(sliceIndex = this.getCurrentImageIdIndex()) {\n        const imageId = this.imageIds[sliceIndex];\n        if (!imageId) {\n            return;\n        }\n        const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n        if (!imagePlaneModule) {\n            return;\n        }\n        const { imagePositionPatient, frameOfReferenceUID: FrameOfReferenceUID } = imagePlaneModule;\n        let { rowCosines, columnCosines } = imagePlaneModule;\n        rowCosines ||= [1, 0, 0];\n        columnCosines ||= [0, 1, 0];\n        const viewPlaneNormal = vec3.cross([0, 0, 0], columnCosines, rowCosines);\n        return {\n            FrameOfReferenceUID,\n            viewPlaneNormal,\n            cameraFocalPoint: imagePositionPatient,\n            referencedImageId: imageId,\n            sliceIndex,\n        };\n    }\n    _getCameraOrientation(imageDataDirection) {\n        const viewPlaneNormal = imageDataDirection.slice(6, 9).map((x) => -x);\n        const viewUp = imageDataDirection.slice(3, 6).map((x) => -x);\n        return {\n            viewPlaneNormal: [\n                viewPlaneNormal[0],\n                viewPlaneNormal[1],\n                viewPlaneNormal[2],\n            ],\n            viewUp: [viewUp[0], viewUp[1], viewUp[2]],\n        };\n    }\n    createVTKImageData({ origin, direction, dimensions, spacing, numberOfComponents, pixelArray, }) {\n        const values = new pixelArray.constructor(pixelArray.length);\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: numberOfComponents,\n            values: values,\n        });\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setSpacing(spacing);\n        imageData.setDirection(direction);\n        imageData.setOrigin(origin);\n        imageData.getPointData().setScalars(scalarArray);\n        return imageData;\n    }\n    _createVTKImageData({ origin, direction, dimensions, spacing, numberOfComponents, pixelArray, }) {\n        try {\n            this._imageData = this.createVTKImageData({\n                origin,\n                direction,\n                dimensions,\n                spacing,\n                numberOfComponents,\n                pixelArray,\n            });\n        }\n        catch (e) {\n            log.error(e);\n        }\n    }\n    async setStack(imageIds, currentImageIdIndex = 0) {\n        this._throwIfDestroyed();\n        this.imageIds = imageIds;\n        if (currentImageIdIndex > imageIds.length) {\n            throw new Error('Current image index is greater than the number of images in the stack');\n        }\n        this.imageKeyToIndexMap.clear();\n        imageIds.forEach((imageId, index) => {\n            this.imageKeyToIndexMap.set(imageId, index);\n            this.imageKeyToIndexMap.set(imageIdToURI(imageId), index);\n        });\n        this.currentImageIdIndex = currentImageIdIndex;\n        this.targetImageIdIndex = currentImageIdIndex;\n        const imageRetrieveConfiguration = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageIds[currentImageIdIndex], 'stack');\n        this.imagesLoader = imageRetrieveConfiguration\n            ? (imageRetrieveConfiguration.create || createProgressive)(imageRetrieveConfiguration)\n            : this;\n        this.stackInvalidated = true;\n        this.flipVertical = false;\n        this.flipHorizontal = false;\n        this.voiRange = null;\n        this.interpolationType = InterpolationType.LINEAR;\n        this.invert = false;\n        this.viewportStatus = ViewportStatus.LOADING;\n        this.fillWithBackgroundColor();\n        if (this.useCPURendering) {\n            this._cpuFallbackEnabledElement.renderingTools = {};\n            delete this._cpuFallbackEnabledElement.viewport.colormap;\n        }\n        const imageId = await this._setImageIdIndex(currentImageIdIndex);\n        const eventDetail = {\n            imageIds,\n            viewportId: this.id,\n            element: this.element,\n            currentImageIdIndex: currentImageIdIndex,\n        };\n        triggerEvent(this.element, Events.VIEWPORT_NEW_IMAGE_SET, eventDetail);\n        return imageId;\n    }\n    _throwIfDestroyed() {\n        if (this.isDisabled) {\n            throw new Error('The stack viewport has been destroyed and is no longer usable. Renderings will not be performed. If you ' +\n                'are using the same viewportId and have re-enabled the viewport, you need to grab the new viewport instance ' +\n                'using renderingEngine.getViewport(viewportId), instead of using your lexical scoped reference to the viewport instance.');\n        }\n    }\n    _checkVTKImageDataMatchesCornerstoneImage(image, imageData) {\n        if (!imageData) {\n            return false;\n        }\n        const [xSpacing, ySpacing] = imageData.getSpacing();\n        const [xVoxels, yVoxels] = imageData.getDimensions();\n        const imagePlaneModule = this._getImagePlaneModule(image.imageId);\n        const direction = imageData.getDirection();\n        const rowCosines = direction.slice(0, 3);\n        const columnCosines = direction.slice(3, 6);\n        const dataType = imageData.getPointData().getScalars().getDataType();\n        const isSameXSpacing = isEqual(xSpacing, image.columnPixelSpacing);\n        const isSameYSpacing = isEqual(ySpacing, image.rowPixelSpacing);\n        const isXSpacingValid = isSameXSpacing || (image.columnPixelSpacing === null && xSpacing === 1.0);\n        const isYSpacingValid = isSameYSpacing || (image.rowPixelSpacing === null && ySpacing === 1.0);\n        const isXVoxelsMatching = xVoxels === image.columns;\n        const isYVoxelsMatching = yVoxels === image.rows;\n        const isRowCosinesMatching = isEqual(imagePlaneModule.rowCosines, rowCosines);\n        const isColumnCosinesMatching = isEqual(imagePlaneModule.columnCosines, columnCosines);\n        const isDataTypeMatching = dataType === image.voxelManager.getScalarData().constructor.name;\n        const result = isXSpacingValid &&\n            isYSpacingValid &&\n            isXVoxelsMatching &&\n            isYVoxelsMatching &&\n            isRowCosinesMatching &&\n            isColumnCosinesMatching &&\n            isDataTypeMatching;\n        return result;\n    }\n    _updateVTKImageDataFromCornerstoneImage(image) {\n        const imagePlaneModule = this._getImagePlaneModule(image.imageId);\n        let origin = imagePlaneModule.imagePositionPatient;\n        if (origin == null) {\n            origin = [0, 0, 0];\n        }\n        this._imageData.setOrigin(origin);\n        const actor = this.getActor(this.id);\n        if (actor) {\n            actor.referencedId = image.imageId;\n        }\n        updateVTKImageDataWithCornerstoneImage(this._imageData, image);\n    }\n    _loadAndDisplayImage(imageId, imageIdIndex) {\n        return this.useCPURendering\n            ? this._loadAndDisplayImageCPU(imageId, imageIdIndex)\n            : this._loadAndDisplayImageGPU(imageId, imageIdIndex);\n    }\n    _loadAndDisplayImageCPU(imageId, imageIdIndex) {\n        return new Promise((resolve, reject) => {\n            function successCallback(image, imageIdIndex, imageId) {\n                if (this.currentImageIdIndex !== imageIdIndex) {\n                    return;\n                }\n                const pixelData = image.voxelManager.getScalarData();\n                const preScale = image.preScale;\n                const scalingParams = preScale?.scalingParameters;\n                const scaledWithNonIntegers = (preScale?.scaled && scalingParams?.rescaleIntercept % 1 !== 0) ||\n                    scalingParams?.rescaleSlope % 1 !== 0;\n                if (pixelData instanceof Float32Array && scaledWithNonIntegers) {\n                    const floatMinMax = {\n                        min: image.minPixelValue,\n                        max: image.maxPixelValue,\n                    };\n                    const floatRange = Math.abs(floatMinMax.max - floatMinMax.min);\n                    const intRange = 65535;\n                    const slope = floatRange / intRange;\n                    const intercept = floatMinMax.min;\n                    const numPixels = pixelData.length;\n                    const intPixelData = new Uint16Array(numPixels);\n                    let min = 65535;\n                    let max = 0;\n                    for (let i = 0; i < numPixels; i++) {\n                        const rescaledPixel = Math.floor((pixelData[i] - intercept) / slope);\n                        intPixelData[i] = rescaledPixel;\n                        min = Math.min(min, rescaledPixel);\n                        max = Math.max(max, rescaledPixel);\n                    }\n                    image.minPixelValue = min;\n                    image.maxPixelValue = max;\n                    image.slope = slope;\n                    image.intercept = intercept;\n                    if (image.voxelManager) {\n                        image.voxelManager.getScalarData = () => intPixelData;\n                    }\n                    else {\n                        image.getPixelData = () => intPixelData;\n                    }\n                    image.preScale = {\n                        ...image.preScale,\n                        scaled: false,\n                    };\n                }\n                this._setCSImage(image);\n                this.viewportStatus = ViewportStatus.PRE_RENDER;\n                const eventDetail = {\n                    image,\n                    imageId,\n                    imageIdIndex,\n                    viewportId: this.id,\n                    renderingEngineId: this.renderingEngineId,\n                };\n                triggerEvent(this.element, Events.STACK_NEW_IMAGE, eventDetail);\n                this._updateToDisplayImageCPU(image);\n                this.render();\n                this.currentImageIdIndex = imageIdIndex;\n                resolve(imageId);\n            }\n            function errorCallback(error, imageIdIndex, imageId) {\n                const eventDetail = {\n                    error,\n                    imageIdIndex,\n                    imageId,\n                };\n                if (!this.suppressEvents) {\n                    triggerEvent(eventTarget, Events.IMAGE_LOAD_ERROR, eventDetail);\n                }\n                reject(error);\n            }\n            function sendRequest(imageId, imageIdIndex, options) {\n                return loadAndCacheImage(imageId, options).then((image) => {\n                    successCallback.call(this, image, imageIdIndex, imageId);\n                }, (error) => {\n                    errorCallback.call(this, error, imageIdIndex, imageId);\n                });\n            }\n            const priority = -5;\n            const requestType = RequestType.Interaction;\n            const additionalDetails = { imageId, imageIdIndex };\n            const options = {\n                useRGBA: true,\n                requestType,\n            };\n            const eventDetail = {\n                imageId,\n                imageIdIndex,\n                viewportId: this.id,\n                renderingEngineId: this.renderingEngineId,\n            };\n            triggerEvent(this.element, Events.PRE_STACK_NEW_IMAGE, eventDetail);\n            imageLoadPoolManager.addRequest(sendRequest.bind(this, imageId, imageIdIndex, options), requestType, additionalDetails, priority);\n        });\n    }\n    successCallback(imageId, image) {\n        const imageIdIndex = this.imageIds.indexOf(imageId);\n        if (this.currentImageIdIndex !== imageIdIndex) {\n            return;\n        }\n        const csImgFrame = this.csImage?.imageFrame;\n        const imgFrame = image?.imageFrame;\n        const photometricInterpretation = csImgFrame?.photometricInterpretation ||\n            this.csImage?.photometricInterpretation;\n        const newPhotometricInterpretation = imgFrame?.photometricInterpretation || image?.photometricInterpretation;\n        if (photometricInterpretation !== newPhotometricInterpretation) {\n            this.stackInvalidated = true;\n        }\n        this._setCSImage(image);\n        const eventDetail = {\n            image,\n            imageId,\n            imageIdIndex,\n            viewportId: this.id,\n            renderingEngineId: this.renderingEngineId,\n        };\n        this._updateActorToDisplayImageId(image);\n        triggerEvent(this.element, Events.STACK_NEW_IMAGE, eventDetail);\n        this.render();\n        this.currentImageIdIndex = imageIdIndex;\n    }\n    errorCallback(imageId, permanent, error) {\n        if (!permanent) {\n            return;\n        }\n        const imageIdIndex = this.imageIds.indexOf(imageId);\n        const eventDetail = {\n            error,\n            imageIdIndex,\n            imageId,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_ERROR, eventDetail);\n    }\n    getLoaderImageOptions(imageId) {\n        const imageIdIndex = this.imageIds.indexOf(imageId);\n        const { transferSyntaxUID } = metaData.get('transferSyntax', imageId) || {};\n        const options = {\n            useRGBA: false,\n            transferSyntaxUID,\n            priority: 5,\n            requestType: RequestType.Interaction,\n            additionalDetails: { imageId, imageIdIndex },\n        };\n        return options;\n    }\n    async loadImages(imageIds, listener) {\n        const resultList = await Promise.allSettled(imageIds.map((imageId) => {\n            const options = this.getLoaderImageOptions(imageId);\n            return loadAndCacheImage(imageId, options).then((image) => {\n                listener.successCallback(imageId, image);\n                return imageId;\n            }, (error) => {\n                listener.errorCallback(imageId, true, error);\n                return imageId;\n            });\n        }));\n        const errorList = resultList.filter((item) => item.status === 'rejected');\n        if (errorList && errorList.length) {\n            const event = new CustomEvent(Events.IMAGE_LOAD_ERROR, {\n                detail: errorList,\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n        }\n        return resultList;\n    }\n    _loadAndDisplayImageGPU(imageId, imageIdIndex) {\n        if (!imageId) {\n            console.warn('No image id set yet to load');\n            return;\n        }\n        const eventDetail = {\n            imageId,\n            imageIdIndex,\n            viewportId: this.id,\n            renderingEngineId: this.renderingEngineId,\n        };\n        triggerEvent(this.element, Events.PRE_STACK_NEW_IMAGE, eventDetail);\n        return this.imagesLoader.loadImages([imageId], this).then((v) => {\n            return imageId;\n        });\n    }\n    _updateToDisplayImageCPU(image) {\n        const metadata = this.getImageDataMetadata(image);\n        const viewport = getDefaultViewport(this.canvas, image, this.modality, this._cpuFallbackEnabledElement.viewport.colormap);\n        const { windowCenter, windowWidth, voiLUTFunction } = viewport.voi;\n        this.voiRange = windowLevelUtil.toLowHighRange(windowWidth, windowCenter, voiLUTFunction);\n        this._cpuFallbackEnabledElement.image = image;\n        this._cpuFallbackEnabledElement.metadata = {\n            ...metadata,\n        };\n        this.cpuImagePixelData = image.voxelManager.getScalarData();\n        const viewportSettingToUse = Object.assign({}, viewport, this._cpuFallbackEnabledElement.viewport);\n        this._cpuFallbackEnabledElement.viewport = this.stackInvalidated\n            ? viewport\n            : viewportSettingToUse;\n        this.stackInvalidated = false;\n        this.cpuRenderingInvalidated = true;\n        this._cpuFallbackEnabledElement.transform = calculateTransform(this._cpuFallbackEnabledElement);\n    }\n    getSliceViewInfo() {\n        throw new Error('Method not implemented.');\n    }\n    addImages(stackInputs) {\n        const actors = [];\n        stackInputs.forEach((stackInput) => {\n            const { imageId, ...rest } = stackInput;\n            const image = cache.getImage(imageId);\n            const { origin, dimensions, direction, spacing, numberOfComponents } = this.getImageDataMetadata(image);\n            const imagedata = this.createVTKImageData({\n                origin,\n                dimensions,\n                direction,\n                spacing,\n                numberOfComponents,\n                pixelArray: image.voxelManager.getScalarData(),\n            });\n            const imageActor = this.createActorMapper(imagedata);\n            if (imageActor) {\n                actors.push({\n                    uid: stackInput.actorUID ?? uuidv4(),\n                    actor: imageActor,\n                    referencedId: imageId,\n                    ...rest,\n                });\n                if (stackInput.callback) {\n                    stackInput.callback({ imageActor, imageId: stackInput.imageId });\n                }\n            }\n        });\n        this.addActors(actors);\n    }\n    _updateActorToDisplayImageId(image) {\n        const sameImageData = this._checkVTKImageDataMatchesCornerstoneImage(image, this._imageData);\n        const viewPresentation = this.getViewPresentation();\n        if (sameImageData && !this.stackInvalidated) {\n            this._updateVTKImageDataFromCornerstoneImage(image);\n            this.resetCameraNoEvent();\n            this.setViewPresentation(viewPresentation);\n            this._setPropertiesFromCache();\n            this.stackActorReInitialized = false;\n            return;\n        }\n        const { origin, direction, dimensions, spacing, numberOfComponents, imagePixelModule, } = this.getImageDataMetadata(image);\n        const pixelArray = image.voxelManager.getScalarData();\n        this._createVTKImageData({\n            origin,\n            direction,\n            dimensions,\n            spacing,\n            numberOfComponents,\n            pixelArray,\n        });\n        this._updateVTKImageDataFromCornerstoneImage(image);\n        const actor = this.createActorMapper(this._imageData);\n        const oldActors = this.getActors();\n        if (oldActors.length && oldActors[0].uid === this.id) {\n            oldActors[0].actor = actor;\n        }\n        else {\n            oldActors.unshift({ uid: this.id, actor, referencedId: image.imageId });\n        }\n        this.setActors(oldActors);\n        const { viewPlaneNormal, viewUp } = this._getCameraOrientation(direction);\n        const previousCamera = this.getCamera();\n        this.setCameraNoEvent({ viewUp, viewPlaneNormal });\n        this.initialViewUp = viewUp;\n        this.resetCameraNoEvent();\n        this.setViewPresentation(viewPresentation);\n        this.triggerCameraEvent(this.getCamera(), previousCamera);\n        const monochrome1 = imagePixelModule.photometricInterpretation === 'MONOCHROME1';\n        this.stackInvalidated = true;\n        const voiRange = this._getInitialVOIRange(image);\n        this.setVOI(voiRange, {\n            forceRecreateLUTFunction: !!monochrome1,\n        });\n        this.initialInvert = !!monochrome1;\n        this.setInvertColor(this.invert || this.initialInvert);\n        this.stackInvalidated = false;\n        this.stackActorReInitialized = true;\n        if (this._publishCalibratedEvent) {\n            this.triggerCalibrationEvent();\n        }\n    }\n    _getInitialVOIRange(image) {\n        if (this.voiRange && this.voiUpdatedWithSetProperties) {\n            return this.voiRange;\n        }\n        const { windowCenter, windowWidth, voiLUTFunction } = image;\n        let voiRange = this._getVOIRangeFromWindowLevel(windowWidth, windowCenter, voiLUTFunction);\n        voiRange = this._getPTPreScaledRange() || voiRange;\n        return voiRange;\n    }\n    _getPTPreScaledRange() {\n        if (!this._isCurrentImagePTPrescaled()) {\n            return undefined;\n        }\n        return this._getDefaultPTPrescaledVOIRange();\n    }\n    _isCurrentImagePTPrescaled() {\n        if (this.modality !== 'PT' || !this.csImage.isPreScaled) {\n            return false;\n        }\n        if (!this.csImage.preScale?.scalingParameters.suvbw) {\n            return false;\n        }\n        return true;\n    }\n    _getDefaultPTPrescaledVOIRange() {\n        return { lower: 0, upper: 5 };\n    }\n    _getVOIRangeFromWindowLevel(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n        let center, width;\n        if (typeof windowCenter === 'number' && typeof windowWidth === 'number') {\n            center = windowCenter;\n            width = windowWidth;\n        }\n        else if (Array.isArray(windowCenter) && Array.isArray(windowWidth)) {\n            center = windowCenter[0];\n            width = windowWidth[0];\n        }\n        if (center !== undefined && width !== undefined) {\n            return windowLevelUtil.toLowHighRange(width, center, voiLUTFunction);\n        }\n    }\n    async _setImageIdIndex(imageIdIndex) {\n        if (imageIdIndex >= this.imageIds.length) {\n            throw new Error(`ImageIdIndex provided ${imageIdIndex} is invalid, the stack only has ${this.imageIds.length} elements`);\n        }\n        this.currentImageIdIndex = imageIdIndex;\n        this.hasPixelSpacing = true;\n        this.viewportStatus = ViewportStatus.PRE_RENDER;\n        const imageId = await this._loadAndDisplayImage(this.imageIds[imageIdIndex], imageIdIndex);\n        if (this.perImageIdDefaultProperties.size >= 1) {\n            const defaultProperties = this.perImageIdDefaultProperties.get(imageId);\n            if (defaultProperties !== undefined) {\n                this.setProperties(defaultProperties);\n            }\n            else if (this.globalDefaultProperties !== undefined) {\n                this.setProperties(this.globalDefaultProperties);\n            }\n        }\n        return imageId;\n    }\n    resetCameraCPU({ resetPan = true, resetZoom = true, }) {\n        const { image } = this._cpuFallbackEnabledElement;\n        if (!image) {\n            return;\n        }\n        resetCamera(this._cpuFallbackEnabledElement, resetPan, resetZoom);\n        const { scale } = this._cpuFallbackEnabledElement.viewport;\n        const { clientWidth, clientHeight } = this.element;\n        const center = [clientWidth / 2, clientHeight / 2];\n        const centerWorld = this.canvasToWorldCPU(center);\n        this.setCameraCPU({\n            focalPoint: centerWorld,\n            scale,\n        });\n    }\n    resetCameraGPU({ resetPan, resetZoom }) {\n        this.setCamera({\n            flipHorizontal: false,\n            flipVertical: false,\n            viewUp: this.initialViewUp,\n        });\n        const resetToCenter = true;\n        return super.resetCamera({ resetPan, resetZoom, resetToCenter });\n    }\n    scroll(delta, debounce = true, loop = false) {\n        const imageIds = this.imageIds;\n        if (isNaN(this.targetImageIdIndex)) {\n            return;\n        }\n        const currentTargetImageIdIndex = this.targetImageIdIndex;\n        const numberOfFrames = imageIds.length;\n        let newTargetImageIdIndex = currentTargetImageIdIndex + delta;\n        if (loop) {\n            newTargetImageIdIndex =\n                (newTargetImageIdIndex + numberOfFrames) % numberOfFrames;\n        }\n        else {\n            newTargetImageIdIndex = Math.max(0, Math.min(numberOfFrames - 1, newTargetImageIdIndex));\n        }\n        this.targetImageIdIndex = newTargetImageIdIndex;\n        const targetImageId = imageIds[newTargetImageIdIndex];\n        const imageAlreadyLoaded = cache.isLoaded(targetImageId);\n        if (imageAlreadyLoaded || !debounce) {\n            this.setImageIdIndex(newTargetImageIdIndex);\n        }\n        else {\n            clearTimeout(this.debouncedTimeout);\n            this.debouncedTimeout = window.setTimeout(() => {\n                this.setImageIdIndex(newTargetImageIdIndex);\n            }, 40);\n        }\n        const eventData = {\n            newImageIdIndex: newTargetImageIdIndex,\n            imageId: targetImageId,\n            direction: delta,\n        };\n        if (newTargetImageIdIndex !== currentTargetImageIdIndex) {\n            triggerEvent(this.element, Events.STACK_VIEWPORT_SCROLL, eventData);\n        }\n    }\n    setImageIdIndex(imageIdIndex) {\n        this._throwIfDestroyed();\n        if (this.currentImageIdIndex === imageIdIndex) {\n            return Promise.resolve(this.getCurrentImageId());\n        }\n        const imageIdPromise = this._setImageIdIndex(imageIdIndex);\n        this.targetImageIdIndex = imageIdIndex;\n        return imageIdPromise;\n    }\n    calibrateSpacing(imageId) {\n        const imageIdIndex = this.getImageIds().indexOf(imageId);\n        this.stackInvalidated = true;\n        this._loadAndDisplayImage(imageId, imageIdIndex);\n    }\n    triggerCameraEvent(camera, previousCamera) {\n        const eventDetail = {\n            previousCamera,\n            camera,\n            element: this.element,\n            viewportId: this.id,\n            renderingEngineId: this.renderingEngineId,\n        };\n        if (!this.suppressEvents) {\n            triggerEvent(this.element, Events.CAMERA_MODIFIED, eventDetail);\n        }\n    }\n    triggerCalibrationEvent() {\n        const { imageData } = this.getImageData();\n        const eventDetail = {\n            element: this.element,\n            viewportId: this.id,\n            renderingEngineId: this.renderingEngineId,\n            imageId: this.getCurrentImageId(),\n            imageData: imageData,\n            worldToIndex: imageData.getWorldToIndex(),\n            ...this._calibrationEvent,\n        };\n        if (!this.suppressEvents) {\n            triggerEvent(this.element, Events.IMAGE_SPACING_CALIBRATED, eventDetail);\n        }\n        this._publishCalibratedEvent = false;\n    }\n    jumpToWorld(worldPos) {\n        const imageIds = this.getImageIds();\n        const imageData = this.getImageData();\n        const { direction, spacing } = imageData;\n        const imageId = getClosestImageId({ direction, spacing, imageIds }, worldPos, this.getCamera().viewPlaneNormal, { ignoreSpacing: true });\n        const index = imageIds.indexOf(imageId);\n        if (index === -1) {\n            return false;\n        }\n        this.setImageIdIndex(index);\n        this.render();\n        return true;\n    }\n    _getVOIRangeForCurrentImage() {\n        const { windowCenter, windowWidth, voiLUTFunction } = this.csImage;\n        return this._getVOIRangeFromWindowLevel(windowWidth, windowCenter, voiLUTFunction);\n    }\n    _getValidVOILUTFunction(voiLUTFunction) {\n        if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n            return VOILUTFunctionType.LINEAR;\n        }\n        return voiLUTFunction;\n    }\n    getSliceInfo() {\n        const sliceIndex = this.getSliceIndex();\n        const { dimensions } = this.getImageData();\n        return {\n            width: dimensions[0],\n            height: dimensions[1],\n            sliceIndex,\n            slicePlane: 2,\n        };\n    }\n    isReferenceViewable(viewRef, options = {}) {\n        const testIndex = this.getCurrentImageIdIndex();\n        const currentImageId = this.imageIds[testIndex];\n        if (!currentImageId || !viewRef) {\n            return false;\n        }\n        const { referencedImageId, multiSliceReference } = viewRef;\n        if (referencedImageId) {\n            if (referencedImageId === currentImageId) {\n                return true;\n            }\n            viewRef.referencedImageURI ||= imageIdToURI(referencedImageId);\n            const { referencedImageURI: referencedImageURI } = viewRef;\n            const foundSliceIndex = this.imageKeyToIndexMap.get(referencedImageURI);\n            if (options.asOverlay) {\n                const matchedImageId = this.matchImagesForOverlay(currentImageId, referencedImageId);\n                if (matchedImageId) {\n                    return true;\n                }\n            }\n            if (foundSliceIndex === undefined) {\n                return false;\n            }\n            if (options.withNavigation) {\n                return true;\n            }\n            const rangeEndSliceIndex = multiSliceReference &&\n                this.imageKeyToIndexMap.get(multiSliceReference.referencedImageId);\n            return testIndex <= rangeEndSliceIndex && testIndex >= foundSliceIndex;\n        }\n        if (!super.isReferenceViewable(viewRef, options)) {\n            return false;\n        }\n        if (viewRef.volumeId) {\n            return options.asVolume;\n        }\n        const { cameraFocalPoint } = viewRef;\n        if (options.asNearbyProjection && cameraFocalPoint) {\n            const { spacing, direction, origin } = this.getImageData();\n            const viewPlaneNormal = direction.slice(6, 9);\n            const sliceThickness = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n            const diff = vec3.subtract(vec3.create(), cameraFocalPoint, origin);\n            const distanceToPlane = vec3.dot(diff, viewPlaneNormal);\n            const threshold = sliceThickness / 2;\n            if (Math.abs(distanceToPlane) <= threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n    getViewReference(viewRefSpecifier = {}) {\n        const { sliceIndex = this.getCurrentImageIdIndex() } = viewRefSpecifier;\n        const reference = super.getViewReference(viewRefSpecifier);\n        const referencedImageId = this.getCurrentImageId(sliceIndex);\n        if (!referencedImageId) {\n            return;\n        }\n        reference.referencedImageId = referencedImageId;\n        if (this.getCurrentImageIdIndex() !== sliceIndex) {\n            const referenceData = this.getImagePlaneReferenceData(sliceIndex);\n            if (!referenceData) {\n                return;\n            }\n            Object.assign(reference, referenceData);\n        }\n        return reference;\n    }\n    setViewReference(viewRef) {\n        if (!viewRef?.referencedImageId) {\n            if (viewRef?.sliceIndex !== undefined) {\n                this.scroll(viewRef.sliceIndex - this.targetImageIdIndex);\n            }\n            return;\n        }\n        const { referencedImageId } = viewRef;\n        viewRef.referencedImageURI ||= imageIdToURI(referencedImageId);\n        const { referencedImageURI: referencedImageURI } = viewRef;\n        const sliceIndex = this.imageKeyToIndexMap.get(referencedImageURI);\n        if (sliceIndex === undefined) {\n            log.error(`No image URI found for ${referencedImageURI}`);\n            return;\n        }\n        this.scroll(sliceIndex - this.targetImageIdIndex);\n    }\n    getViewReferenceId(specifier = {}) {\n        const { sliceIndex = this.currentImageIdIndex } = specifier;\n        return `imageId:${this.imageIds[sliceIndex]}`;\n    }\n    getSliceIndexForImage(reference) {\n        if (!reference) {\n            return;\n        }\n        if (typeof reference === 'string') {\n            return this.imageKeyToIndexMap.get(reference);\n        }\n        if (reference.referencedImageId) {\n            return this.imageKeyToIndexMap.get(reference.referencedImageId);\n        }\n        return;\n    }\n    getCPUFallbackError(method) {\n        return new Error(`method ${method} cannot be used during CPU Fallback mode`);\n    }\n    fillWithBackgroundColor() {\n        const renderingEngine = this.getRenderingEngine();\n        if (renderingEngine) {\n            renderingEngine.fillCanvasWithBackgroundColor(this.canvas, this.options.background);\n        }\n    }\n    unsetColormapCPU() {\n        delete this._cpuFallbackEnabledElement.viewport.colormap;\n        this._cpuFallbackEnabledElement.renderingTools = {};\n        this.cpuRenderingInvalidated = true;\n        this.fillWithBackgroundColor();\n        this.render();\n    }\n    setColormapCPU(colormapData) {\n        this.colormap = colormapData;\n        const colormap = colormapUtils.getColormap(colormapData.name);\n        this._cpuFallbackEnabledElement.viewport.colormap = colormap;\n        this._cpuFallbackEnabledElement.renderingTools = {};\n        this.fillWithBackgroundColor();\n        this.cpuRenderingInvalidated = true;\n        this.render();\n        const eventDetail = {\n            viewportId: this.id,\n            colormap: colormapData,\n        };\n        triggerEvent(this.element, Events.COLORMAP_MODIFIED, eventDetail);\n    }\n    setColormapGPU(colormap) {\n        const ActorEntry = this.getDefaultActor();\n        const actor = ActorEntry.actor;\n        const actorProp = actor.getProperty();\n        const rgbTransferFunction = actorProp.getRGBTransferFunction();\n        const colormapObj = colormapUtils.getColormap(colormap.name) ||\n            vtkColorMaps.getPresetByName(colormap.name);\n        if (!rgbTransferFunction) {\n            const cfun = vtkColorTransferFunction.newInstance();\n            cfun.applyColorMap(colormapObj);\n            cfun.setMappingRange(this.voiRange.lower, this.voiRange.upper);\n            actorProp.setRGBTransferFunction(0, cfun);\n        }\n        else {\n            rgbTransferFunction.applyColorMap(colormapObj);\n            rgbTransferFunction.setMappingRange(this.voiRange.lower, this.voiRange.upper);\n            actorProp.setRGBTransferFunction(0, rgbTransferFunction);\n        }\n        this.colormap = colormap;\n        this.render();\n        const eventDetail = {\n            viewportId: this.id,\n            colormap,\n        };\n        triggerEvent(this.element, Events.COLORMAP_MODIFIED, eventDetail);\n    }\n    unsetColormapGPU() {\n        throw new Error('unsetColormapGPU not implemented.');\n    }\n    _getImagePlaneModule(imageId) {\n        const imagePlaneModule = getImagePlaneModule(imageId);\n        this.hasPixelSpacing =\n            !imagePlaneModule.usingDefaultValues ||\n                this.calibration?.scale > 0 ||\n                this.calibration?.rowPixelSpacing > 0;\n        this.calibration ||= imagePlaneModule.calibration;\n        return imagePlaneModule;\n    }\n    isInAcquisitionPlane() {\n        return true;\n    }\n}\nexport default StackViewport;\n","import { vec3 } from 'gl-matrix';\nimport { Events as EVENTS, VideoEnums as VideoViewportEnum, MetadataModules, } from '../enums';\nimport * as metaData from '../metaData';\nimport { Transform } from './helpers/cpuFallback/rendering/transform';\nimport triggerEvent from '../utilities/triggerEvent';\nimport Viewport from './Viewport';\nimport { getOrCreateCanvas } from './helpers';\nimport CanvasActor from './CanvasActor';\nimport cache from '../cache/cache';\nimport uuidv4 from '../utilities/uuidv4';\nimport FrameRange from '../utilities/FrameRange';\nimport { pointInShapeCallback } from '../utilities/pointInShapeCallback';\nclass VideoViewport extends Viewport {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    constructor(props) {\n        super({\n            ...props,\n            canvas: props.canvas || getOrCreateCanvas(props.element),\n        });\n        this.videoWidth = 0;\n        this.videoHeight = 0;\n        this.loop = true;\n        this.mute = true;\n        this.isPlaying = false;\n        this.scrollSpeed = 1;\n        this.playbackRate = 1;\n        this.frameRange = [0, 0];\n        this.fps = 30;\n        this.videoCamera = {\n            panWorld: [0, 0],\n            parallelScale: 1,\n        };\n        this.voiRange = {\n            lower: 0,\n            upper: 255,\n        };\n        this.getProperties = () => {\n            return {\n                loop: this.videoElement.loop,\n                muted: this.videoElement.muted,\n                playbackRate: this.playbackRate,\n                scrollSpeed: this.scrollSpeed,\n                voiRange: { ...this.voiRange },\n            };\n        };\n        this.getMiddleSliceData = () => {\n            throw new Error('Method not implemented.');\n        };\n        this.useCustomRenderingPipeline = true;\n        this.resetCamera = () => {\n            this.refreshRenderValues();\n            this.canvasContext.fillRect(0, 0, this.canvas.width, this.canvas.height);\n            if (!this.isPlaying) {\n                this.renderFrame();\n            }\n            return true;\n        };\n        this.getNumberOfSlices = () => {\n            const computedSlices = Math.round((this.videoElement.duration * this.fps) / this.scrollSpeed);\n            return isNaN(computedSlices) ? this.numberOfFrames : computedSlices;\n        };\n        this.getFrameOfReferenceUID = () => {\n            return this.videoElement.src;\n        };\n        this.resize = () => {\n            const canvas = this.canvas;\n            const { clientWidth, clientHeight } = canvas;\n            if (canvas.width !== clientWidth || canvas.height !== clientHeight) {\n                canvas.width = clientWidth;\n                canvas.height = clientHeight;\n            }\n            this.refreshRenderValues();\n            if (!this.isPlaying) {\n                this.renderFrame();\n            }\n        };\n        this.canvasToWorld = (canvasPos, destPos = [0, 0, 0]) => {\n            const pan = this.videoCamera.panWorld;\n            const worldToCanvasRatio = this.getWorldToCanvasRatio();\n            const panOffsetCanvas = [\n                pan[0] * worldToCanvasRatio,\n                pan[1] * worldToCanvasRatio,\n            ];\n            const subCanvasPos = [\n                canvasPos[0] - panOffsetCanvas[0],\n                canvasPos[1] - panOffsetCanvas[1],\n            ];\n            destPos.splice(0, 2, subCanvasPos[0] / worldToCanvasRatio, subCanvasPos[1] / worldToCanvasRatio);\n            return destPos;\n        };\n        this.worldToCanvas = (worldPos) => {\n            const pan = this.videoCamera.panWorld;\n            const worldToCanvasRatio = this.getWorldToCanvasRatio();\n            const canvasPos = [\n                (worldPos[0] + pan[0]) * worldToCanvasRatio,\n                (worldPos[1] + pan[1]) * worldToCanvasRatio,\n            ];\n            return canvasPos;\n        };\n        this.getRotation = () => 0;\n        this.canvasToIndex = (canvasPos) => {\n            const transform = this.getTransform();\n            transform.invert();\n            return transform.transformPoint(canvasPos.map((it) => it * devicePixelRatio));\n        };\n        this.indexToCanvas = (indexPos) => {\n            const transform = this.getTransform();\n            return transform\n                .transformPoint(indexPos)\n                .map((it) => it / devicePixelRatio);\n        };\n        this.customRenderViewportToCanvas = () => {\n            this.renderFrame();\n        };\n        this.renderFrame = () => {\n            const dpr = window.devicePixelRatio || 1;\n            const transform = this.getTransform();\n            const transformationMatrix = transform.getMatrix();\n            const ctx = this.canvasContext;\n            ctx.resetTransform();\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            ctx.transform(transformationMatrix[0] / dpr, transformationMatrix[1] / dpr, transformationMatrix[2] / dpr, transformationMatrix[3] / dpr, transformationMatrix[4] / dpr, transformationMatrix[5] / dpr);\n            ctx.drawImage(this.videoElement, 0, 0, this.videoWidth, this.videoHeight);\n            for (const actor of this.getActors()) {\n                actor.actor.render(this, this.canvasContext);\n            }\n            this.canvasContext.resetTransform();\n            triggerEvent(this.element, EVENTS.STACK_NEW_IMAGE, {\n                element: this.element,\n                viewportId: this.id,\n                viewport: this,\n                renderingEngineId: this.renderingEngineId,\n                time: this.videoElement.currentTime,\n                duration: this.videoElement.duration,\n            });\n            triggerEvent(this.element, EVENTS.IMAGE_RENDERED, {\n                element: this.element,\n                viewportId: this.id,\n                viewport: this,\n                imageIndex: this.getCurrentImageIdIndex(),\n                numberOfSlices: this.numberOfFrames,\n                renderingEngineId: this.renderingEngineId,\n                time: this.videoElement.currentTime,\n                duration: this.videoElement.duration,\n            });\n            this.initialRender?.();\n            const frame = this.getFrameNumber();\n            if (this.isPlaying) {\n                if (frame < this.frameRange[0]) {\n                    this.setFrameNumber(this.frameRange[0]);\n                }\n                else if (frame > this.frameRange[1]) {\n                    if (this.loop) {\n                        this.setFrameNumber(this.frameRange[0]);\n                    }\n                    else {\n                        this.pause();\n                    }\n                }\n            }\n        };\n        this.renderWhilstPlaying = () => {\n            this.renderFrame();\n            if (this.isPlaying) {\n                requestAnimationFrame(this.renderWhilstPlaying);\n            }\n        };\n        this.canvasContext = this.canvas.getContext('2d');\n        this.renderingEngineId = props.renderingEngineId;\n        this.element.setAttribute('data-viewport-uid', this.id);\n        this.element.setAttribute('data-rendering-engine-uid', this.renderingEngineId);\n        this.videoElement = document.createElement('video');\n        this.videoElement.muted = this.mute;\n        this.videoElement.loop = this.loop;\n        this.videoElement.autoplay = true;\n        this.videoElement.crossOrigin = 'anonymous';\n        this.addEventListeners();\n        this.resize();\n    }\n    static get useCustomRenderingPipeline() {\n        return true;\n    }\n    addEventListeners() {\n        this.canvas.addEventListener(EVENTS.ELEMENT_DISABLED, this.elementDisabledHandler);\n    }\n    removeEventListeners() {\n        this.canvas.removeEventListener(EVENTS.ELEMENT_DISABLED, this.elementDisabledHandler);\n    }\n    elementDisabledHandler() {\n        this.removeEventListeners();\n        this.videoElement.remove();\n    }\n    getImageDataMetadata(image) {\n        const imageId = typeof image === 'string' ? image : image.imageId;\n        const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n        let rowCosines = imagePlaneModule.rowCosines;\n        let columnCosines = imagePlaneModule.columnCosines;\n        const usingDefaultValues = imagePlaneModule.usingDefaultValues;\n        if (usingDefaultValues || rowCosines == null || columnCosines == null) {\n            rowCosines = [1, 0, 0];\n            columnCosines = [0, 1, 0];\n        }\n        const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n        const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n        const { rows, columns } = imagePlaneModule;\n        const scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n        let origin = imagePlaneModule.imagePositionPatient;\n        if (origin == null) {\n            origin = [0, 0, 0];\n        }\n        const xSpacing = imagePlaneModule.columnPixelSpacing || 1;\n        const ySpacing = imagePlaneModule.rowPixelSpacing || 1;\n        const xVoxels = imagePlaneModule.columns;\n        const yVoxels = imagePlaneModule.rows;\n        const zSpacing = 1;\n        const zVoxels = 1;\n        this.hasPixelSpacing = !!imagePlaneModule.columnPixelSpacing;\n        return {\n            bitsAllocated: 8,\n            numberOfComponents: 3,\n            origin,\n            rows,\n            columns,\n            direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n            dimensions: [xVoxels, yVoxels, zVoxels],\n            spacing: [xSpacing, ySpacing, zSpacing],\n            hasPixelSpacing: this.hasPixelSpacing,\n            numVoxels: xVoxels * yVoxels * zVoxels,\n            imagePlaneModule,\n        };\n    }\n    setDataIds(imageIds, options) {\n        this.setVideo(imageIds[0], (options.viewReference?.sliceIndex || 0) + 1);\n    }\n    setVideo(imageId, frameNumber) {\n        this.imageId = Array.isArray(imageId) ? imageId[0] : imageId;\n        const imageUrlModule = metaData.get(MetadataModules.IMAGE_URL, imageId);\n        if (!imageUrlModule?.rendered) {\n            throw new Error(`Video Image ID ${imageId} does not have a rendered video view`);\n        }\n        const { rendered } = imageUrlModule;\n        const generalSeries = metaData.get(MetadataModules.GENERAL_SERIES, imageId);\n        this.modality = generalSeries?.Modality;\n        this.metadata = this.getImageDataMetadata(imageId);\n        let { cineRate, numberOfFrames } = metaData.get(MetadataModules.CINE, imageId);\n        this.numberOfFrames = numberOfFrames;\n        return this.setVideoURL(rendered).then(() => {\n            if (!numberOfFrames || numberOfFrames === 1) {\n                numberOfFrames = Math.round(this.videoElement.duration * (cineRate || 30));\n            }\n            if (!cineRate) {\n                cineRate = Math.round(numberOfFrames / this.videoElement.duration);\n            }\n            this.fps = cineRate;\n            this.numberOfFrames = numberOfFrames;\n            this.setFrameRange([1, numberOfFrames]);\n            this.initialRender = () => {\n                this.initialRender = null;\n                this.pause();\n                this.setFrameNumber(frameNumber || 1);\n            };\n            return new Promise((resolve) => {\n                window.setTimeout(() => {\n                    this.setFrameNumber(frameNumber || 1);\n                    resolve(this);\n                }, 25);\n            });\n        });\n    }\n    async setVideoURL(videoURL) {\n        return new Promise((resolve) => {\n            this.videoElement.src = videoURL;\n            this.videoElement.preload = 'auto';\n            const loadedMetadataEventHandler = () => {\n                this.videoWidth = this.videoElement.videoWidth;\n                this.videoHeight = this.videoElement.videoHeight;\n                this.videoElement.removeEventListener('loadedmetadata', loadedMetadataEventHandler);\n                this.refreshRenderValues();\n                resolve(true);\n            };\n            this.videoElement.addEventListener('loadedmetadata', loadedMetadataEventHandler);\n        });\n    }\n    getImageIds() {\n        const imageIds = new Array(this.numberOfFrames);\n        const baseImageId = this.imageId.replace(/[0-9]+$/, '');\n        for (let i = 0; i < this.numberOfFrames; i++) {\n            imageIds[i] = `${baseImageId}${i + 1}`;\n        }\n        return imageIds;\n    }\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause();\n            return false;\n        }\n        else {\n            this.play();\n            return true;\n        }\n    }\n    async play() {\n        try {\n            if (!this.isPlaying) {\n                this.isPlaying = true;\n                await this.videoElement.play();\n                this.renderWhilstPlaying();\n            }\n        }\n        catch (e) {\n        }\n    }\n    pause() {\n        try {\n            this.isPlaying = false;\n            this.videoElement.pause();\n        }\n        catch (e) {\n        }\n    }\n    async scroll(delta = 1) {\n        await this.pause();\n        const videoElement = this.videoElement;\n        const renderFrame = this.renderFrame;\n        const currentTime = videoElement.currentTime;\n        const newTime = currentTime + (delta * this.scrollSpeed) / this.fps;\n        videoElement.currentTime = newTime;\n        const seekEventListener = (evt) => {\n            renderFrame();\n            videoElement.removeEventListener('seeked', seekEventListener);\n        };\n        videoElement.addEventListener('seeked', seekEventListener);\n    }\n    async start() {\n        const videoElement = this.videoElement;\n        const renderFrame = this.renderFrame;\n        videoElement.currentTime = 0;\n        if (videoElement.paused) {\n            const seekEventListener = (evt) => {\n                renderFrame();\n                videoElement.removeEventListener('seeked', seekEventListener);\n            };\n            videoElement.addEventListener('seeked', seekEventListener);\n        }\n    }\n    async end() {\n        const videoElement = this.videoElement;\n        const renderFrame = this.renderFrame;\n        videoElement.currentTime = videoElement.duration;\n        if (videoElement.paused) {\n            const seekEventListener = (evt) => {\n                renderFrame();\n                videoElement.removeEventListener('seeked', seekEventListener);\n            };\n            videoElement.addEventListener('seeked', seekEventListener);\n        }\n    }\n    async setTime(timeInSeconds) {\n        const videoElement = this.videoElement;\n        const renderFrame = this.renderFrame;\n        videoElement.currentTime = timeInSeconds;\n        if (videoElement.paused) {\n            const seekEventListener = (evt) => {\n                renderFrame();\n                videoElement.removeEventListener('seeked', seekEventListener);\n            };\n            videoElement.addEventListener('seeked', seekEventListener);\n        }\n    }\n    getSliceViewInfo() {\n        throw new Error('Method not implemented.');\n    }\n    async setFrameNumber(frame) {\n        this.setTime((frame - 1) / this.fps);\n    }\n    setFrameRange(frameRange) {\n        if (!frameRange) {\n            this.frameRange = [1, this.numberOfFrames];\n            return;\n        }\n        if (frameRange.length !== 2 || frameRange[0] === frameRange[1]) {\n            return;\n        }\n        this.frameRange = [frameRange[0], frameRange[1]];\n    }\n    getSliceIndexForImage(reference) {\n        if (!reference) {\n            return;\n        }\n        if (typeof reference === 'string') {\n            return FrameRange.imageIdToFrameStart(reference);\n        }\n        if (reference.referencedImageId) {\n            return FrameRange.imageIdToFrameStart(reference.referencedImageId);\n        }\n        return;\n    }\n    getFrameRange() {\n        return this.frameRange;\n    }\n    setProperties(props) {\n        if (props.loop !== undefined) {\n            this.videoElement.loop = props.loop;\n        }\n        if (props.muted !== undefined) {\n            this.videoElement.muted = props.muted;\n        }\n        if (props.playbackRate !== undefined) {\n            this.setPlaybackRate(props.playbackRate);\n        }\n        if (props.scrollSpeed !== undefined) {\n            this.setScrollSpeed(props.scrollSpeed);\n        }\n        if (props.voiRange) {\n            this.setVOI(props.voiRange);\n        }\n    }\n    setPlaybackRate(rate = 1) {\n        this.playbackRate = rate;\n        if (rate < 0.0625) {\n            this.pause();\n            return;\n        }\n        if (!this.videoElement) {\n            return;\n        }\n        this.videoElement.playbackRate = rate;\n        this.play();\n    }\n    setScrollSpeed(scrollSpeed = 1, unit = VideoViewportEnum.SpeedUnit.FRAME) {\n        this.scrollSpeed =\n            unit === VideoViewportEnum.SpeedUnit.SECOND\n                ? scrollSpeed * this.fps\n                : scrollSpeed;\n    }\n    resetProperties() {\n        this.setProperties({\n            loop: false,\n            muted: true,\n        });\n    }\n    getScalarData() {\n        if (this.scalarData?.frameNumber === this.getFrameNumber()) {\n            return this.scalarData;\n        }\n        if (!this.videoElement ||\n            !this.videoElement.videoWidth ||\n            !this.videoElement.videoHeight) {\n            console.debug('Video not ready yet, returning empty scalar data');\n            const emptyData = new Uint8ClampedArray();\n            emptyData.getRange = () => [0, 255];\n            emptyData.frameNumber = -1;\n            return emptyData;\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = this.videoElement.videoWidth;\n        canvas.height = this.videoElement.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(this.videoElement, 0, 0);\n        const canvasData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const scalarData = canvasData.data;\n        scalarData.getRange = () => [0, 255];\n        scalarData.frameNumber = this.getFrameNumber();\n        this.scalarData = scalarData;\n        return scalarData;\n    }\n    getImageData() {\n        const { metadata } = this;\n        const spacing = metadata.spacing;\n        const imageData = {\n            getDirection: () => metadata.direction,\n            getDimensions: () => metadata.dimensions,\n            getRange: () => [0, 255],\n            getScalarData: () => this.getScalarData(),\n            getSpacing: () => metadata.spacing,\n            worldToIndex: (point) => {\n                const canvasPoint = this.worldToCanvas(point);\n                const pixelCoord = this.canvasToIndex(canvasPoint);\n                return [pixelCoord[0], pixelCoord[1], 0];\n            },\n            indexToWorld: (point, destPoint) => {\n                const canvasPoint = this.indexToCanvas([point[0], point[1]]);\n                return this.canvasToWorld(canvasPoint, destPoint);\n            },\n        };\n        const imageDataForReturn = {\n            dimensions: metadata.dimensions,\n            spacing,\n            origin: metadata.origin,\n            direction: metadata.direction,\n            metadata: {\n                Modality: this.modality,\n                FrameOfReferenceUID: metadata.FrameOfReferenceUID,\n            },\n            getScalarData: () => this.getScalarData(),\n            scalarData: this.getScalarData(),\n            imageData,\n            voxelManager: {\n                forEach: (callback, options) => {\n                    return pointInShapeCallback(options.imageData, {\n                        pointInShapeFn: options.isInObject ?? (() => true),\n                        callback: callback,\n                        boundsIJK: options.boundsIJK,\n                        returnPoints: options.returnPoints ?? false,\n                    });\n                },\n            },\n            hasPixelSpacing: this.hasPixelSpacing,\n            calibration: this.calibration,\n            preScale: {\n                scaled: false,\n            },\n        };\n        Object.defineProperty(imageData, 'scalarData', {\n            get: () => this.getScalarData(),\n            enumerable: true,\n        });\n        return imageDataForReturn;\n    }\n    hasImageURI(imageURI) {\n        const framesMatch = imageURI.match(VideoViewport.frameRangeExtractor);\n        const testURI = framesMatch\n            ? imageURI.substring(0, framesMatch.index)\n            : imageURI;\n        return this.imageId.includes(testURI);\n    }\n    setVOI(voiRange) {\n        this.voiRange = voiRange;\n        this.setColorTransform();\n    }\n    setWindowLevel(windowWidth = 256, windowCenter = 128) {\n        const lower = windowCenter - windowWidth / 2;\n        const upper = windowCenter + windowWidth / 2 - 1;\n        this.setVOI({ lower, upper });\n        this.setColorTransform();\n    }\n    setAverageWhite(averageWhite) {\n        this.averageWhite = averageWhite;\n        this.setColorTransform();\n    }\n    setColorTransform() {\n        if (!this.voiRange && !this.averageWhite) {\n            this.feFilter = null;\n            return;\n        }\n        const white = this.averageWhite || [255, 255, 255];\n        const maxWhite = Math.max(...white);\n        const scaleWhite = white.map((c) => maxWhite / c);\n        const { lower = 0, upper = 255 } = this.voiRange || {};\n        const wlScale = (upper - lower + 1) / 255;\n        const wlDelta = lower / 255;\n        this.feFilter = `url('data:image/svg+xml,\\\n      <svg xmlns=\"http://www.w3.org/2000/svg\">\\\n        <filter id=\"colour\" color-interpolation-filters=\"linearRGB\">\\\n        <feColorMatrix type=\"matrix\" \\\n        values=\"\\\n          ${scaleWhite[0] * wlScale} 0 0 0 ${wlDelta} \\\n          0 ${scaleWhite[1] * wlScale} 0 0 ${wlDelta} \\\n          0 0 ${scaleWhite[2] * wlScale} 0 ${wlDelta} \\\n          0 0 0 1 0\" />\\\n        </filter>\\\n      </svg>#colour')`;\n        this.canvas.style.filter = this.feFilter;\n    }\n    setCamera(camera) {\n        const { parallelScale, focalPoint } = camera;\n        if (parallelScale) {\n            this.videoCamera.parallelScale =\n                this.element.clientHeight / 2 / parallelScale;\n        }\n        if (focalPoint !== undefined) {\n            const focalPointCanvas = this.worldToCanvas(focalPoint);\n            const canvasCenter = [\n                this.element.clientWidth / 2,\n                this.element.clientHeight / 2,\n            ];\n            const panWorldDelta = [\n                (focalPointCanvas[0] - canvasCenter[0]) /\n                    this.videoCamera.parallelScale,\n                (focalPointCanvas[1] - canvasCenter[1]) /\n                    this.videoCamera.parallelScale,\n            ];\n            this.videoCamera.panWorld = [\n                this.videoCamera.panWorld[0] - panWorldDelta[0],\n                this.videoCamera.panWorld[1] - panWorldDelta[1],\n            ];\n        }\n        this.canvasContext.fillStyle = 'rgba(0,0,0,1)';\n        this.canvasContext.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        if (!this.isPlaying) {\n            this.renderFrame();\n        }\n    }\n    getCurrentImageId(index = this.getCurrentImageIdIndex()) {\n        const current = this.imageId.replace('/frames/1', `/frames/${index + 1}`);\n        return current;\n    }\n    getViewReferenceId(specifier = {}) {\n        const { sliceIndex: sliceIndex } = specifier;\n        if (sliceIndex === undefined) {\n            return `videoId:${this.getCurrentImageId()}`;\n        }\n        if (Array.isArray(sliceIndex)) {\n            return `videoId:${this.imageId.substring(0, this.imageId.length - 1)}${sliceIndex[0] + 1}-${sliceIndex[1] + 1}`;\n        }\n        const baseTarget = this.imageId.replace('/frames/1', `/frames/${1 + sliceIndex}`);\n        return `videoId:${baseTarget}`;\n    }\n    isReferenceViewable(viewRef, options = {}) {\n        let { imageURI } = options;\n        const { referencedImageId, sliceIndex, multiSliceReference } = viewRef;\n        if (!super.isReferenceViewable(viewRef)) {\n            return false;\n        }\n        const imageId = this.getCurrentImageId();\n        if (!imageURI) {\n            const colonIndex = imageId.indexOf(':');\n            imageURI = imageId.substring(colonIndex + 1, imageId.length - 1);\n        }\n        if (options.withNavigation) {\n            return true;\n        }\n        const currentIndex = this.getSliceIndex();\n        if (multiSliceReference) {\n            const rangeEndSliceIndex = FrameRange.imageIdToFrameEnd(multiSliceReference.referencedImageId);\n            return currentIndex >= sliceIndex && currentIndex <= rangeEndSliceIndex;\n        }\n        if (sliceIndex !== undefined) {\n            return currentIndex === sliceIndex;\n        }\n        if (!referencedImageId) {\n            return false;\n        }\n        const match = referencedImageId.match(VideoViewport.frameRangeExtractor);\n        if (!match) {\n            return true;\n        }\n        if (!match[2]) {\n            return true;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        const frame = currentIndex + 1;\n        return range[0] <= frame && frame <= (range[1] ?? range[0]);\n    }\n    setViewReference(viewRef) {\n        if (typeof viewRef.sliceIndex === 'number') {\n            this.setFrameNumber(viewRef.sliceIndex + 1);\n        }\n        else if (Array.isArray(viewRef.sliceIndex)) {\n            this.setFrameRange(viewRef.sliceIndex);\n        }\n    }\n    getViewReference(viewRefSpecifier) {\n        const sliceIndex = viewRefSpecifier?.sliceIndex ??\n            (this.isPlaying ? this.frameRange[0] : this.getCurrentImageIdIndex());\n        const rangeEndSliceIndex = viewRefSpecifier?.rangeEndSliceIndex ??\n            (this.isPlaying ? this.frameRange[1] - 1 : undefined);\n        const multiSliceReference = rangeEndSliceIndex > sliceIndex\n            ? {\n                sliceIndex: rangeEndSliceIndex,\n                referencedImageId: this.getCurrentImageId(rangeEndSliceIndex),\n            }\n            : undefined;\n        return {\n            ...super.getViewReference(viewRefSpecifier),\n            referencedImageId: this.getViewReferenceId(viewRefSpecifier),\n            sliceIndex,\n            multiSliceReference,\n        };\n    }\n    getFrameNumber() {\n        return 1 + this.getCurrentImageIdIndex();\n    }\n    getCurrentImageIdIndex() {\n        return Math.round(this.videoElement.currentTime * this.fps);\n    }\n    getSliceIndex() {\n        return this.getCurrentImageIdIndex() / this.scrollSpeed;\n    }\n    getCamera() {\n        const { parallelScale } = this.videoCamera;\n        const canvasCenter = [\n            this.element.clientWidth / 2,\n            this.element.clientHeight / 2,\n        ];\n        const canvasCenterWorld = this.canvasToWorld(canvasCenter);\n        return {\n            parallelProjection: true,\n            focalPoint: canvasCenterWorld,\n            position: [0, 0, 0],\n            viewUp: [0, -1, 0],\n            parallelScale: this.element.clientHeight / 2 / parallelScale,\n            viewPlaneNormal: [0, 0, 1],\n        };\n    }\n    getFrameRate() {\n        return this.fps;\n    }\n    getPan() {\n        const panWorld = this.videoCamera.panWorld;\n        return [panWorld[0], panWorld[1]];\n    }\n    refreshRenderValues() {\n        let worldToCanvasRatio = this.canvas.offsetWidth / this.videoWidth;\n        if (this.videoHeight * worldToCanvasRatio > this.canvas.height) {\n            worldToCanvasRatio = this.canvas.offsetHeight / this.videoHeight;\n        }\n        const drawWidth = Math.floor(this.videoWidth * worldToCanvasRatio);\n        const drawHeight = Math.floor(this.videoHeight * worldToCanvasRatio);\n        const xOffsetCanvas = (this.canvas.offsetWidth - drawWidth) / 2;\n        const yOffsetCanvas = (this.canvas.offsetHeight - drawHeight) / 2;\n        const xOffsetWorld = xOffsetCanvas / worldToCanvasRatio;\n        const yOffsetWorld = yOffsetCanvas / worldToCanvasRatio;\n        this.videoCamera.panWorld = [xOffsetWorld, yOffsetWorld];\n        this.videoCamera.parallelScale = worldToCanvasRatio;\n    }\n    getWorldToCanvasRatio() {\n        return this.videoCamera.parallelScale;\n    }\n    getCanvasToWorldRatio() {\n        return 1.0 / this.videoCamera.parallelScale;\n    }\n    getTransform() {\n        const panWorld = this.videoCamera.panWorld;\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        const worldToCanvasRatio = this.getWorldToCanvasRatio();\n        const canvasToWorldRatio = this.getCanvasToWorldRatio();\n        const halfCanvas = [\n            this.canvas.offsetWidth / 2,\n            this.canvas.offsetHeight / 2,\n        ];\n        const halfCanvasWorldCoordinates = [\n            halfCanvas[0] * canvasToWorldRatio,\n            halfCanvas[1] * canvasToWorldRatio,\n        ];\n        const transform = new Transform();\n        transform.scale(devicePixelRatio, devicePixelRatio);\n        transform.translate(halfCanvas[0], halfCanvas[1]);\n        transform.scale(worldToCanvasRatio, worldToCanvasRatio);\n        transform.translate(panWorld[0], panWorld[1]);\n        transform.translate(-halfCanvasWorldCoordinates[0], -halfCanvasWorldCoordinates[1]);\n        return transform;\n    }\n    updateCameraClippingPlanesAndRange() {\n    }\n    addImages(stackInputs) {\n        const actors = this.getActors();\n        stackInputs.forEach((stackInput) => {\n            const { imageId, ...rest } = stackInput;\n            const image = cache.getImage(imageId);\n            const imageActor = this.createActorMapper(image);\n            const uid = stackInput.actorUID ?? uuidv4();\n            if (imageActor) {\n                actors.push({ uid, actor: imageActor, referencedId: imageId, ...rest });\n                if (stackInput.callback) {\n                    stackInput.callback({\n                        imageActor: imageActor,\n                        imageId,\n                    });\n                }\n            }\n        });\n        this.setActors(actors);\n    }\n    createActorMapper(image) {\n        return new CanvasActor(this, image);\n    }\n}\nexport default VideoViewport;\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport { vec2, vec3 } from 'gl-matrix';\nimport Events from '../enums/Events';\nimport ViewportStatus from '../enums/ViewportStatus';\nimport ViewportType from '../enums/ViewportType';\nimport renderingEngineCache from './renderingEngineCache';\nimport { actorIsA, isImageActor } from '../utilities/actorCheck';\nimport triggerEvent from '../utilities/triggerEvent';\nimport * as planar from '../utilities/planar';\nimport isEqual from '../utilities/isEqual';\nimport hasNaNValues from '../utilities/hasNaNValues';\nimport { RENDERING_DEFAULTS } from '../constants';\nimport { InterpolationType } from '../enums';\nimport { deepClone } from '../utilities/deepClone';\nclass Viewport {\n    static { this.CameraViewPresentation = {\n        rotation: true,\n        pan: true,\n        zoom: true,\n        displayArea: true,\n    }; }\n    static { this.TransferViewPresentation = {\n        windowLevel: true,\n        paletteLut: true,\n    }; }\n    constructor(props) {\n        this.insetImageMultiplier = 1.1;\n        this.flipHorizontal = false;\n        this.flipVertical = false;\n        this.viewportStatus = ViewportStatus.NO_DATA;\n        this._suppressCameraModifiedEvents = false;\n        this.hasPixelSpacing = true;\n        this.getProperties = () => ({});\n        this.setRotation = (_rotation) => {\n        };\n        this.viewportWidgets = new Map();\n        this.addWidget = (widgetId, widget) => {\n            this.viewportWidgets.set(widgetId, widget);\n        };\n        this.getWidget = (id) => {\n            return this.viewportWidgets.get(id);\n        };\n        this.getWidgets = () => {\n            return Array.from(this.viewportWidgets.values());\n        };\n        this.removeWidgets = () => {\n            const widgets = this.getWidgets();\n            widgets.forEach((widget) => {\n                if (widget.getEnabled()) {\n                    widget.setEnabled(false);\n                }\n                if (widget.getActor && widget.getRenderer) {\n                    const actor = widget.getActor();\n                    const renderer = widget.getRenderer();\n                    if (renderer && actor) {\n                        renderer.removeActor(actor);\n                    }\n                }\n            });\n        };\n        this.id = props.id;\n        this.renderingEngineId = props.renderingEngineId;\n        this.type = props.type;\n        this.element = props.element;\n        this.canvas = props.canvas;\n        this.sx = props.sx;\n        this.sy = props.sy;\n        this.sWidth = props.sWidth;\n        this.sHeight = props.sHeight;\n        this._actors = new Map();\n        this.element.setAttribute('data-viewport-uid', this.id);\n        this.element.setAttribute('data-rendering-engine-uid', this.renderingEngineId);\n        this.defaultOptions = deepClone(props.defaultOptions);\n        this.suppressEvents = props.defaultOptions.suppressEvents\n            ? props.defaultOptions.suppressEvents\n            : false;\n        this.options = deepClone(props.defaultOptions);\n        this.isDisabled = false;\n    }\n    static get useCustomRenderingPipeline() {\n        return false;\n    }\n    setRendered() {\n        if (this.viewportStatus === ViewportStatus.NO_DATA ||\n            this.viewportStatus === ViewportStatus.LOADING) {\n            return;\n        }\n        this.viewportStatus = ViewportStatus.RENDERED;\n    }\n    getRenderingEngine() {\n        return renderingEngineCache.get(this.renderingEngineId);\n    }\n    getRenderer() {\n        const renderingEngine = this.getRenderingEngine();\n        if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n            throw new Error('Rendering engine has been destroyed');\n        }\n        return renderingEngine.offscreenMultiRenderWindow?.getRenderer(this.id);\n    }\n    render() {\n        const renderingEngine = this.getRenderingEngine();\n        renderingEngine.renderViewport(this.id);\n    }\n    setOptions(options, immediate = false) {\n        this.options = structuredClone(options);\n        if (this.options?.displayArea) {\n            this.setDisplayArea(this.options?.displayArea);\n        }\n        if (immediate) {\n            this.render();\n        }\n    }\n    reset(immediate = false) {\n        this.options = structuredClone(this.defaultOptions);\n        if (immediate) {\n            this.render();\n        }\n    }\n    getSliceViewInfo() {\n        throw new Error('Method not implemented.');\n    }\n    flip({ flipHorizontal, flipVertical }) {\n        const imageData = this.getDefaultImageData();\n        if (!imageData) {\n            return;\n        }\n        const camera = this.getCamera();\n        const { viewPlaneNormal, viewUp, focalPoint, position } = camera;\n        const viewRight = vec3.cross(vec3.create(), viewPlaneNormal, viewUp);\n        let viewUpToSet = vec3.copy(vec3.create(), viewUp);\n        const viewPlaneNormalToSet = vec3.negate(vec3.create(), viewPlaneNormal);\n        const distance = vec3.distance(position, focalPoint);\n        const dimensions = imageData.getDimensions();\n        const middleIJK = dimensions.map((d) => Math.floor(d / 2));\n        const idx = [middleIJK[0], middleIJK[1], middleIJK[2]];\n        const centeredFocalPoint = imageData.indexToWorld(idx, vec3.create());\n        const resetFocalPoint = this._getFocalPointForResetCamera(centeredFocalPoint, camera, { resetPan: true, resetToCenter: false });\n        const panDir = vec3.subtract(vec3.create(), focalPoint, resetFocalPoint);\n        const panValue = vec3.length(panDir);\n        const getPanDir = (mirrorVec) => {\n            const panDirMirror = vec3.scale(vec3.create(), mirrorVec, 2 * vec3.dot(panDir, mirrorVec));\n            vec3.subtract(panDirMirror, panDirMirror, panDir);\n            vec3.normalize(panDirMirror, panDirMirror);\n            return panDirMirror;\n        };\n        if (flipHorizontal) {\n            const panDirMirror = getPanDir(viewUpToSet);\n            const newFocalPoint = vec3.scaleAndAdd(vec3.create(), resetFocalPoint, panDirMirror, panValue);\n            const newPosition = vec3.scaleAndAdd(vec3.create(), newFocalPoint, viewPlaneNormalToSet, distance);\n            this.setCamera({\n                viewPlaneNormal: viewPlaneNormalToSet,\n                position: newPosition,\n                focalPoint: newFocalPoint,\n            });\n            this.flipHorizontal = !this.flipHorizontal;\n        }\n        if (flipVertical) {\n            viewUpToSet = vec3.negate(viewUpToSet, viewUp);\n            const panDirMirror = getPanDir(viewRight);\n            const newFocalPoint = vec3.scaleAndAdd(vec3.create(), resetFocalPoint, panDirMirror, panValue);\n            const newPosition = vec3.scaleAndAdd(vec3.create(), newFocalPoint, viewPlaneNormalToSet, distance);\n            this.setCamera({\n                focalPoint: newFocalPoint,\n                viewPlaneNormal: viewPlaneNormalToSet,\n                viewUp: viewUpToSet,\n                position: newPosition,\n            });\n            this.flipVertical = !this.flipVertical;\n        }\n        this.render();\n    }\n    getDefaultImageData() {\n        const actorEntry = this.getDefaultActor();\n        if (actorEntry && isImageActor(actorEntry)) {\n            return actorEntry.actor.getMapper().getInputData();\n        }\n    }\n    getDefaultActor() {\n        return this.getActors()[0];\n    }\n    getActors() {\n        return Array.from(this._actors.values());\n    }\n    getActorUIDs() {\n        return Array.from(this._actors.keys());\n    }\n    getActor(actorUID) {\n        return this._actors.get(actorUID);\n    }\n    getImageActor(volumeId) {\n        const actorEntries = this.getActors();\n        let actorEntry = actorEntries[0];\n        if (volumeId) {\n            actorEntry = actorEntries.find((a) => a.referencedId === volumeId);\n        }\n        if (!actorEntry || !isImageActor(actorEntry)) {\n            return null;\n        }\n        const actor = actorEntry.actor;\n        return actor;\n    }\n    getActorUIDByIndex(index) {\n        const actor = this.getActors()[index];\n        if (actor) {\n            return actor.uid;\n        }\n    }\n    getActorByIndex(index) {\n        return this.getActors()[index];\n    }\n    setActors(actors) {\n        const currentActors = this.getActors();\n        this.removeAllActors();\n        this.addActors(actors, { resetCamera: true });\n        triggerEvent(this.element, Events.ACTORS_CHANGED, {\n            viewportId: this.id,\n            removedActors: currentActors,\n            addedActors: actors,\n            currentActors: actors,\n        });\n    }\n    _removeActor(actorUID) {\n        const actorEntry = this.getActor(actorUID);\n        if (!actorEntry) {\n            console.warn(`Actor ${actorUID} does not exist in ${this.id}, can't remove`);\n            return;\n        }\n        const renderer = this.getRenderer();\n        renderer.removeActor(actorEntry.actor);\n        this._actors.delete(actorUID);\n        return actorEntry;\n    }\n    removeActors(actorUIDs) {\n        const removedActors = [];\n        actorUIDs.forEach((actorUID) => {\n            const removedActor = this._removeActor(actorUID);\n            if (removedActor) {\n                removedActors.push(removedActor);\n            }\n        });\n        const currentActors = this.getActors();\n        triggerEvent(this.element, Events.ACTORS_CHANGED, {\n            viewportId: this.id,\n            removedActors,\n            addedActors: [],\n            currentActors,\n        });\n    }\n    addActors(actors, options = {}) {\n        const { resetCamera = false } = options;\n        const renderingEngine = this.getRenderingEngine();\n        if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n            console.warn('Viewport::addActors::Rendering engine has not been initialized or has been destroyed');\n            return;\n        }\n        actors.forEach((actor) => {\n            this.addActor(actor);\n        });\n        const prevViewPresentation = this.getViewPresentation();\n        const prevViewRef = this.getViewReference();\n        this.resetCamera();\n        if (!resetCamera) {\n            this.setViewReference(prevViewRef);\n            this.setViewPresentation(prevViewPresentation);\n        }\n        triggerEvent(this.element, Events.ACTORS_CHANGED, {\n            viewportId: this.id,\n            removedActors: [],\n            addedActors: actors,\n            currentActors: this.getActors(),\n        });\n    }\n    addActor(actorEntry) {\n        const { uid: actorUID, actor } = actorEntry;\n        const renderingEngine = this.getRenderingEngine();\n        if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n            console.warn(`Cannot add actor UID of ${actorUID} Rendering Engine has been destroyed`);\n            return;\n        }\n        if (!actorUID || !actor) {\n            throw new Error('Actors should have uid and vtk Actor properties');\n        }\n        if (this.getActor(actorUID)) {\n            console.warn(`Actor ${actorUID} already exists for this viewport`);\n            return;\n        }\n        const renderer = this.getRenderer();\n        renderer?.addActor(actor);\n        this._actors.set(actorUID, Object.assign({}, actorEntry));\n        this.updateCameraClippingPlanesAndRange();\n        triggerEvent(this.element, Events.ACTORS_CHANGED, {\n            viewportId: this.id,\n            removedActors: [],\n            addedActors: [actorEntry],\n            currentActors: this.getActors(),\n        });\n    }\n    removeAllActors() {\n        const currentActors = this.getActors();\n        this.getRenderer()?.removeAllViewProps();\n        this._actors = new Map();\n        triggerEvent(this.element, Events.ACTORS_CHANGED, {\n            viewportId: this.id,\n            removedActors: currentActors,\n            addedActors: [],\n            currentActors: [],\n        });\n        return;\n    }\n    resetCameraNoEvent() {\n        this._suppressCameraModifiedEvents = true;\n        this.resetCamera();\n        this._suppressCameraModifiedEvents = false;\n    }\n    setCameraNoEvent(camera) {\n        this._suppressCameraModifiedEvents = true;\n        this.setCamera(camera);\n        this._suppressCameraModifiedEvents = false;\n    }\n    _getViewImageDataIntersections(imageData, focalPoint, normal) {\n        const A = normal[0];\n        const B = normal[1];\n        const C = normal[2];\n        const D = A * focalPoint[0] + B * focalPoint[1] + C * focalPoint[2];\n        const bounds = imageData.getBounds();\n        const edges = this._getEdges(bounds);\n        const intersections = [];\n        for (const edge of edges) {\n            const [[x0, y0, z0], [x1, y1, z1]] = edge;\n            if (A * (x1 - x0) + B * (y1 - y0) + C * (z1 - z0) === 0) {\n                continue;\n            }\n            const intersectionPoint = planar.linePlaneIntersection([x0, y0, z0], [x1, y1, z1], [A, B, C, D]);\n            if (this._isInBounds(intersectionPoint, bounds)) {\n                intersections.push(intersectionPoint);\n            }\n        }\n        return intersections;\n    }\n    setInterpolationType(_interpolationType, _arg) {\n    }\n    setDisplayArea(displayArea, suppressEvents = false) {\n        if (!displayArea) {\n            return;\n        }\n        const { storeAsInitialCamera, type: areaType } = displayArea;\n        if (storeAsInitialCamera) {\n            this.options.displayArea = displayArea;\n        }\n        const { _suppressCameraModifiedEvents } = this;\n        this._suppressCameraModifiedEvents = true;\n        this.setCamera(this.fitToCanvasCamera);\n        if (areaType === 'SCALE') {\n            this.setDisplayAreaScale(displayArea);\n        }\n        else {\n            this.setInterpolationType(this.getProperties()?.interpolationType ?? InterpolationType.LINEAR);\n            this.setDisplayAreaFit(displayArea);\n        }\n        if (storeAsInitialCamera) {\n            this.initialCamera = this.getCamera();\n        }\n        this._suppressCameraModifiedEvents = _suppressCameraModifiedEvents;\n        if (!suppressEvents && !_suppressCameraModifiedEvents) {\n            const eventDetail = {\n                viewportId: this.id,\n                displayArea: displayArea,\n                storeAsInitialCamera: storeAsInitialCamera,\n            };\n            triggerEvent(this.element, Events.DISPLAY_AREA_MODIFIED, eventDetail);\n            this.setCamera(this.getCamera());\n        }\n    }\n    setDisplayAreaScale(displayArea) {\n        const { scale = 1 } = displayArea;\n        const canvas = this.canvas;\n        const height = canvas.height;\n        const width = canvas.width;\n        if (height < 8 || width < 8) {\n            return;\n        }\n        const imageData = this.getDefaultImageData();\n        const spacingWorld = imageData.getSpacing();\n        const spacing = spacingWorld[1];\n        this.setInterpolationType(InterpolationType.NEAREST);\n        this.setCamera({ parallelScale: (height * spacing) / (2 * scale) });\n        delete displayArea.imageArea;\n        this.setDisplayAreaFit(displayArea);\n        const { focalPoint, position, viewUp, viewPlaneNormal } = this.getCamera();\n        const focalChange = vec3.create();\n        if (canvas.height % 2) {\n            vec3.scaleAndAdd(focalChange, focalChange, viewUp, scale * 0.5 * spacing);\n        }\n        if (canvas.width % 2) {\n            const viewRight = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n            vec3.scaleAndAdd(focalChange, focalChange, viewRight, scale * 0.5 * spacing);\n        }\n        if (!focalChange[0] && !focalChange[1] && !focalChange[2]) {\n            return;\n        }\n        this.setCamera({\n            focalPoint: vec3.add(vec3.create(), focalPoint, focalChange),\n            position: vec3.add(vec3.create(), position, focalChange),\n        });\n    }\n    setDisplayAreaFit(displayArea) {\n        const { imageArea, imageCanvasPoint } = displayArea;\n        const devicePixelRatio = window?.devicePixelRatio || 1;\n        const imageData = this.getDefaultImageData();\n        if (!imageData) {\n            return;\n        }\n        const canvasWidth = this.sWidth / devicePixelRatio;\n        const canvasHeight = this.sHeight / devicePixelRatio;\n        const dimensions = imageData.getDimensions();\n        const canvasZero = this.worldToCanvas(imageData.indexToWorld([0, 0, 0]));\n        const canvasEdge = this.worldToCanvas(imageData.indexToWorld([\n            dimensions[0],\n            dimensions[1],\n            dimensions[2],\n        ]));\n        const canvasImage = [\n            Math.abs(canvasEdge[0] - canvasZero[0]),\n            Math.abs(canvasEdge[1] - canvasZero[1]),\n        ];\n        const [imgWidth, imgHeight] = canvasImage;\n        let zoom = this.getZoom() / this.insetImageMultiplier;\n        if (imageArea) {\n            const [areaX, areaY] = imageArea;\n            const currentScale = Math.max(Math.abs(imgWidth / canvasWidth), Math.abs(imgHeight / canvasHeight));\n            const requireX = Math.abs((areaX * imgWidth) / canvasWidth);\n            const requireY = Math.abs((areaY * imgHeight) / canvasHeight);\n            const initZoom = this.getZoom();\n            const fitZoom = this.getZoom(this.fitToCanvasCamera);\n            const absZoom = requireX > requireY ? currentScale / requireX : currentScale / requireY;\n            const applyZoom = (absZoom * initZoom) / fitZoom;\n            zoom = applyZoom;\n            this.setZoom(this.insetImageMultiplier * zoom, false);\n        }\n        if (imageCanvasPoint) {\n            const { imagePoint, canvasPoint = imagePoint || [0.5, 0.5] } = imageCanvasPoint;\n            const [canvasX, canvasY] = canvasPoint;\n            const canvasPanX = canvasWidth * (canvasX - 0.5);\n            const canvasPanY = canvasHeight * (canvasY - 0.5);\n            const [imageX, imageY] = imagePoint || canvasPoint;\n            const useZoom = zoom;\n            const imagePanX = this.insetImageMultiplier * useZoom * imgWidth * (0.5 - imageX);\n            const imagePanY = this.insetImageMultiplier * useZoom * imgHeight * (0.5 - imageY);\n            const newPositionX = imagePanX + canvasPanX;\n            const newPositionY = imagePanY + canvasPanY;\n            const deltaPoint2 = [newPositionX, newPositionY];\n            vec2.add(deltaPoint2, deltaPoint2, this.getPan());\n            this.setPan(deltaPoint2, false);\n        }\n    }\n    getDisplayArea() {\n        return this.options?.displayArea;\n    }\n    resetCamera(options) {\n        const { resetPan = true, resetZoom = true, resetToCenter = true, storeAsInitialCamera = true, } = options || {};\n        const renderer = this.getRenderer();\n        this.setCameraNoEvent({\n            flipHorizontal: false,\n            flipVertical: false,\n        });\n        const previousCamera = this.getCamera();\n        let bounds;\n        const defaultActor = this.getDefaultActor();\n        if (defaultActor && isImageActor(defaultActor)) {\n            const imageData = defaultActor.actor.getMapper().getInputData();\n            bounds = imageData.getBounds();\n        }\n        else {\n            bounds = renderer.computeVisiblePropBounds();\n        }\n        const focalPoint = [0, 0, 0];\n        const imageData = this.getDefaultImageData();\n        if (imageData) {\n            const spc = imageData.getSpacing();\n            bounds[0] = bounds[0] + spc[0] / 2;\n            bounds[1] = bounds[1] - spc[0] / 2;\n            bounds[2] = bounds[2] + spc[1] / 2;\n            bounds[3] = bounds[3] - spc[1] / 2;\n            bounds[4] = bounds[4] + spc[2] / 2;\n            bounds[5] = bounds[5] - spc[2] / 2;\n        }\n        const activeCamera = this.getVtkActiveCamera();\n        const viewPlaneNormal = activeCamera.getViewPlaneNormal();\n        const viewUp = activeCamera.getViewUp();\n        focalPoint[0] = (bounds[0] + bounds[1]) / 2.0;\n        focalPoint[1] = (bounds[2] + bounds[3]) / 2.0;\n        focalPoint[2] = (bounds[4] + bounds[5]) / 2.0;\n        if (imageData) {\n            const dimensions = imageData.getDimensions();\n            const middleIJK = dimensions.map((d) => Math.floor(d / 2));\n            const idx = [middleIJK[0], middleIJK[1], middleIJK[2]];\n            imageData.indexToWorld(idx, focalPoint);\n        }\n        const { widthWorld, heightWorld } = this._getWorldDistanceViewUpAndViewRight(bounds, viewUp, viewPlaneNormal);\n        const canvasSize = [this.sWidth, this.sHeight];\n        const boundsAspectRatio = widthWorld / heightWorld;\n        const canvasAspectRatio = canvasSize[0] / canvasSize[1];\n        const scaleFactor = boundsAspectRatio / canvasAspectRatio;\n        const parallelScale = scaleFactor < 1\n            ? (this.insetImageMultiplier * heightWorld) / 2\n            : (this.insetImageMultiplier * heightWorld * scaleFactor) / 2;\n        const radius = Viewport.boundsRadius(bounds) *\n            (this.type === ViewportType.VOLUME_3D ? 10 : 1);\n        const distance = this.insetImageMultiplier * radius;\n        const viewUpToSet = Math.abs(vtkMath.dot(viewUp, viewPlaneNormal)) > 0.999\n            ? [-viewUp[2], viewUp[0], viewUp[1]]\n            : viewUp;\n        const focalPointToSet = this._getFocalPointForResetCamera(focalPoint, previousCamera, { resetPan, resetToCenter });\n        const positionToSet = [\n            focalPointToSet[0] + distance * viewPlaneNormal[0],\n            focalPointToSet[1] + distance * viewPlaneNormal[1],\n            focalPointToSet[2] + distance * viewPlaneNormal[2],\n        ];\n        renderer.resetCameraClippingRange(bounds);\n        const clippingRangeToUse = [\n            -RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE,\n            RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE,\n        ];\n        activeCamera.setPhysicalScale(radius);\n        activeCamera.setPhysicalTranslation(-focalPointToSet[0], -focalPointToSet[1], -focalPointToSet[2]);\n        this.setCamera({\n            parallelScale: resetZoom ? parallelScale : previousCamera.parallelScale,\n            focalPoint: focalPointToSet,\n            position: positionToSet,\n            viewAngle: 90,\n            viewUp: viewUpToSet,\n            clippingRange: clippingRangeToUse,\n        });\n        const modifiedCamera = this.getCamera();\n        this.setFitToCanvasCamera(this.getCamera());\n        if (storeAsInitialCamera) {\n            this.setInitialCamera(modifiedCamera);\n        }\n        if (resetZoom) {\n            this.setZoom(1, storeAsInitialCamera);\n        }\n        const RESET_CAMERA_EVENT = {\n            type: 'ResetCameraEvent',\n            renderer,\n        };\n        renderer.invokeEvent(RESET_CAMERA_EVENT);\n        this.triggerCameraModifiedEventIfNecessary(previousCamera, modifiedCamera);\n        if (imageData &&\n            this.options.displayArea &&\n            resetZoom &&\n            resetPan &&\n            resetToCenter) {\n            this.setDisplayArea(this.options.displayArea);\n        }\n        return true;\n    }\n    setInitialCamera(camera) {\n        this.initialCamera = camera;\n    }\n    setFitToCanvasCamera(camera) {\n        this.fitToCanvasCamera = camera;\n    }\n    getPan(initialCamera = this.initialCamera) {\n        if (!initialCamera) {\n            return [0, 0];\n        }\n        const activeCamera = this.getVtkActiveCamera();\n        const focalPoint = activeCamera.getFocalPoint();\n        const zero3 = this.canvasToWorld([0, 0]);\n        const initialCanvasFocal = this.worldToCanvas(vec3.subtract([0, 0, 0], initialCamera.focalPoint, zero3));\n        const currentCanvasFocal = this.worldToCanvas(vec3.subtract([0, 0, 0], focalPoint, zero3));\n        const result = vec2.subtract([0, 0], initialCanvasFocal, currentCanvasFocal);\n        return result;\n    }\n    getCurrentImageIdIndex() {\n        throw new Error('Not implemented');\n    }\n    getSliceIndex() {\n        throw new Error('Not implemented');\n    }\n    getImageData() {\n        throw new Error('Not implemented');\n    }\n    getViewReferenceId(_specifier) {\n        return null;\n    }\n    setPan(pan, storeAsInitialCamera = false) {\n        const previousCamera = this.getCamera();\n        const { focalPoint, position } = previousCamera;\n        const zero3 = this.canvasToWorld([0, 0]);\n        const delta2 = vec2.subtract([0, 0], pan, this.getPan());\n        if (Math.abs(delta2[0]) < 1 &&\n            Math.abs(delta2[1]) < 1 &&\n            !storeAsInitialCamera) {\n            return;\n        }\n        const delta = vec3.subtract(vec3.create(), this.canvasToWorld(delta2), zero3);\n        const newFocal = vec3.subtract(vec3.create(), focalPoint, delta);\n        const newPosition = vec3.subtract(vec3.create(), position, delta);\n        this.setCamera({\n            ...previousCamera,\n            focalPoint: newFocal,\n            position: newPosition,\n        }, storeAsInitialCamera);\n    }\n    getZoom(compareCamera = this.initialCamera) {\n        if (!compareCamera) {\n            return 1;\n        }\n        const activeCamera = this.getVtkActiveCamera();\n        const { parallelScale: initialParallelScale } = compareCamera;\n        return initialParallelScale / activeCamera.getParallelScale();\n    }\n    setZoom(value, storeAsInitialCamera = false) {\n        const camera = this.getCamera();\n        const { parallelScale: initialParallelScale } = this.initialCamera;\n        const parallelScale = initialParallelScale / value;\n        if (camera.parallelScale === parallelScale && !storeAsInitialCamera) {\n            return;\n        }\n        this.setCamera({\n            ...camera,\n            parallelScale,\n        }, storeAsInitialCamera);\n    }\n    _getFocalPointForViewPlaneReset(imageData) {\n        const { focalPoint, viewPlaneNormal: normal } = this.getCamera();\n        const intersections = this._getViewImageDataIntersections(imageData, focalPoint, normal);\n        let x = 0;\n        let y = 0;\n        let z = 0;\n        intersections.forEach(([point_x, point_y, point_z]) => {\n            x += point_x;\n            y += point_y;\n            z += point_z;\n        });\n        const newFocalPoint = [\n            x / intersections.length,\n            y / intersections.length,\n            z / intersections.length,\n        ];\n        return newFocalPoint;\n    }\n    getCanvas() {\n        return this.canvas;\n    }\n    getVtkActiveCamera() {\n        const renderer = this.getRenderer();\n        if (!renderer) {\n            console.warn('No renderer found for the viewport');\n            return null;\n        }\n        return renderer.getActiveCamera();\n    }\n    getCameraNoRotation() {\n        const vtkCamera = this.getVtkActiveCamera();\n        const sanitizeVector = (vector, defaultValue) => {\n            return vector.some((v) => isNaN(v)) ? defaultValue : vector;\n        };\n        const viewUp = sanitizeVector([...vtkCamera.getViewUp()], [0, 1, 0]);\n        const viewPlaneNormal = sanitizeVector([...vtkCamera.getViewPlaneNormal()], [0, 0, -1]);\n        const position = sanitizeVector([...vtkCamera.getPosition()], [0, 0, 1]);\n        const focalPoint = sanitizeVector([...vtkCamera.getFocalPoint()], [0, 0, 0]);\n        return {\n            viewUp,\n            viewPlaneNormal,\n            position,\n            focalPoint,\n            parallelProjection: vtkCamera.getParallelProjection(),\n            parallelScale: vtkCamera.getParallelScale(),\n            viewAngle: vtkCamera.getViewAngle(),\n            flipHorizontal: this.flipHorizontal,\n            flipVertical: this.flipVertical,\n        };\n    }\n    getCamera() {\n        const camera = this.getCameraNoRotation();\n        return {\n            ...camera,\n            rotation: this.getRotation(),\n        };\n    }\n    setCamera(cameraInterface, storeAsInitialCamera = false) {\n        const vtkCamera = this.getVtkActiveCamera();\n        const previousCamera = this.getCamera();\n        const updatedCamera = Object.assign({}, previousCamera, cameraInterface);\n        const { viewUp, viewPlaneNormal, position, focalPoint, parallelScale, viewAngle, flipHorizontal, flipVertical, clippingRange, } = cameraInterface;\n        if (flipHorizontal !== undefined) {\n            const flipH = (flipHorizontal && !this.flipHorizontal) ||\n                (!flipHorizontal && this.flipHorizontal);\n            if (flipH) {\n                this.flip({ flipHorizontal: flipH });\n            }\n        }\n        if (flipVertical !== undefined) {\n            const flipV = (flipVertical && !this.flipVertical) ||\n                (!flipVertical && this.flipVertical);\n            if (flipV) {\n                this.flip({ flipVertical: flipV });\n            }\n        }\n        if (viewUp !== undefined) {\n            vtkCamera.setViewUp(viewUp);\n        }\n        if (viewPlaneNormal !== undefined) {\n            vtkCamera.setDirectionOfProjection(-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]);\n        }\n        if (position !== undefined) {\n            vtkCamera.setPosition(...position);\n        }\n        if (focalPoint !== undefined) {\n            vtkCamera.setFocalPoint(...focalPoint);\n        }\n        if (parallelScale !== undefined) {\n            vtkCamera.setParallelScale(parallelScale);\n        }\n        if (viewAngle !== undefined) {\n            vtkCamera.setViewAngle(viewAngle);\n        }\n        if (clippingRange !== undefined) {\n            vtkCamera.setClippingRange(clippingRange);\n        }\n        const prevFocalPoint = previousCamera.focalPoint;\n        const prevViewUp = previousCamera.viewUp;\n        if ((prevFocalPoint && focalPoint) || (prevViewUp && viewUp)) {\n            const currentViewPlaneNormal = vtkCamera.getViewPlaneNormal();\n            const currentViewUp = vtkCamera.getViewUp();\n            let cameraModifiedOutOfPlane = false;\n            let viewUpHasChanged = false;\n            if (focalPoint) {\n                const deltaCamera = [\n                    focalPoint[0] - prevFocalPoint[0],\n                    focalPoint[1] - prevFocalPoint[1],\n                    focalPoint[2] - prevFocalPoint[2],\n                ];\n                cameraModifiedOutOfPlane =\n                    Math.abs(vtkMath.dot(deltaCamera, currentViewPlaneNormal)) > 0;\n            }\n            if (viewUp) {\n                viewUpHasChanged = !isEqual(currentViewUp, prevViewUp);\n            }\n            if (cameraModifiedOutOfPlane || viewUpHasChanged) {\n                const actorEntry = this.getDefaultActor();\n                if (!actorEntry?.actor) {\n                    return;\n                }\n                if (!actorIsA(actorEntry, 'vtkActor')) {\n                    this.updateClippingPlanesForActors(updatedCamera);\n                }\n                if (actorIsA(actorEntry, 'vtkImageSlice') ||\n                    this.type === ViewportType.VOLUME_3D) {\n                    const renderer = this.getRenderer();\n                    renderer.resetCameraClippingRange();\n                }\n            }\n        }\n        if (storeAsInitialCamera) {\n            this.setInitialCamera(updatedCamera);\n        }\n        this.triggerCameraModifiedEventIfNecessary(previousCamera, this.getCamera());\n    }\n    triggerCameraModifiedEventIfNecessary(previousCamera, updatedCamera) {\n        if (!this._suppressCameraModifiedEvents && !this.suppressEvents) {\n            const eventDetail = {\n                previousCamera,\n                camera: updatedCamera,\n                element: this.element,\n                viewportId: this.id,\n                renderingEngineId: this.renderingEngineId,\n            };\n            triggerEvent(this.element, Events.CAMERA_MODIFIED, eventDetail);\n        }\n    }\n    updateCameraClippingPlanesAndRange() {\n        const currentCamera = this.getCamera();\n        this.updateClippingPlanesForActors(currentCamera);\n        this.getRenderer().resetCameraClippingRange();\n    }\n    async updateClippingPlanesForActors(updatedCamera) {\n        const actorEntries = this.getActors();\n        actorEntries.map((actorEntry) => {\n            if (!actorEntry.actor) {\n                return;\n            }\n            const mapper = actorEntry.actor.getMapper();\n            let vtkPlanes = actorEntry?.clippingFilter\n                ? actorEntry?.clippingFilter.getClippingPlanes()\n                : mapper.getClippingPlanes();\n            if (vtkPlanes.length === 0 && actorEntry?.clippingFilter) {\n                vtkPlanes = [vtkPlane.newInstance(), vtkPlane.newInstance()];\n            }\n            let slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            if (actorEntry.slabThickness) {\n                slabThickness = actorEntry.slabThickness;\n            }\n            const { viewPlaneNormal, focalPoint } = updatedCamera;\n            this.setOrientationOfClippingPlanes(vtkPlanes, slabThickness, viewPlaneNormal, focalPoint);\n            triggerEvent(this.element, Events.CLIPPING_PLANES_UPDATED, {\n                actorEntry,\n                focalPoint,\n                vtkPlanes,\n                viewport: this,\n            });\n        });\n    }\n    setOrientationOfClippingPlanes(vtkPlanes, slabThickness, viewPlaneNormal, focalPoint) {\n        if (vtkPlanes.length < 2) {\n            return;\n        }\n        const scaledDistance = [\n            viewPlaneNormal[0],\n            viewPlaneNormal[1],\n            viewPlaneNormal[2],\n        ];\n        vtkMath.multiplyScalar(scaledDistance, slabThickness);\n        vtkPlanes[0].setNormal(viewPlaneNormal);\n        const newOrigin1 = [0, 0, 0];\n        vtkMath.subtract(focalPoint, scaledDistance, newOrigin1);\n        vtkPlanes[0].setOrigin(newOrigin1);\n        vtkPlanes[1].setNormal(-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]);\n        const newOrigin2 = [0, 0, 0];\n        vtkMath.add(focalPoint, scaledDistance, newOrigin2);\n        vtkPlanes[1].setOrigin(newOrigin2);\n    }\n    getClippingPlanesForActor(actorEntry) {\n        if (!actorEntry) {\n            actorEntry = this.getDefaultActor();\n        }\n        if (!actorEntry.actor) {\n            throw new Error('Invalid actor entry: Actor is undefined');\n        }\n        const mapper = actorEntry.actor.getMapper();\n        let vtkPlanes = actorEntry?.clippingFilter\n            ? actorEntry?.clippingFilter.getClippingPlanes()\n            : mapper.getClippingPlanes();\n        if (vtkPlanes.length === 0 && actorEntry?.clippingFilter) {\n            vtkPlanes = [vtkPlane.newInstance(), vtkPlane.newInstance()];\n        }\n        return vtkPlanes;\n    }\n    _getWorldDistanceViewUpAndViewRight(bounds, viewUp, viewPlaneNormal) {\n        const viewUpCorners = this._getCorners(bounds);\n        const viewRightCorners = this._getCorners(bounds);\n        const viewRight = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        let transform = vtkMatrixBuilder\n            .buildFromDegree()\n            .identity()\n            .rotateFromDirections(viewUp, [1, 0, 0]);\n        viewUpCorners.forEach((pt) => transform.apply(pt));\n        let minY = Infinity;\n        let maxY = -Infinity;\n        for (let i = 0; i < 8; i++) {\n            const y = viewUpCorners[i][0];\n            if (y > maxY) {\n                maxY = y;\n            }\n            if (y < minY) {\n                minY = y;\n            }\n        }\n        transform = vtkMatrixBuilder\n            .buildFromDegree()\n            .identity()\n            .rotateFromDirections([viewRight[0], viewRight[1], viewRight[2]], [1, 0, 0]);\n        viewRightCorners.forEach((pt) => transform.apply(pt));\n        let minX = Infinity;\n        let maxX = -Infinity;\n        for (let i = 0; i < 8; i++) {\n            const x = viewRightCorners[i][0];\n            if (x > maxX) {\n                maxX = x;\n            }\n            if (x < minX) {\n                minX = x;\n            }\n        }\n        return { widthWorld: maxX - minX, heightWorld: maxY - minY };\n    }\n    getViewReference(viewRefSpecifier) {\n        const { focalPoint: cameraFocalPoint, viewPlaneNormal, viewUp, } = this.getCamera();\n        const target = {\n            FrameOfReferenceUID: this.getFrameOfReferenceUID(),\n            cameraFocalPoint,\n            viewPlaneNormal,\n            viewUp,\n            sliceIndex: viewRefSpecifier?.sliceIndex ?? this.getSliceIndex(),\n        };\n        return target;\n    }\n    isReferenceViewable(viewRef, options) {\n        if (viewRef.FrameOfReferenceUID &&\n            viewRef.FrameOfReferenceUID !== this.getFrameOfReferenceUID()) {\n            return false;\n        }\n        const { viewPlaneNormal } = viewRef;\n        const camera = this.getCamera();\n        if (viewPlaneNormal &&\n            !isEqual(viewPlaneNormal, camera.viewPlaneNormal) &&\n            !isEqual(vec3.negate(camera.viewPlaneNormal, camera.viewPlaneNormal), viewPlaneNormal)) {\n            return options?.withOrientation;\n        }\n        return true;\n    }\n    getViewPresentation(viewPresSel = {\n        rotation: true,\n        displayArea: true,\n        zoom: true,\n        pan: true,\n        flipHorizontal: true,\n        flipVertical: true,\n    }) {\n        const target = {};\n        const { rotation, displayArea, zoom, pan, flipHorizontal, flipVertical } = viewPresSel;\n        if (rotation) {\n            target.rotation = this.getRotation();\n        }\n        if (displayArea) {\n            target.displayArea = this.getDisplayArea();\n        }\n        const initZoom = this.getZoom();\n        if (zoom) {\n            target.zoom = initZoom;\n        }\n        if (pan) {\n            target.pan = this.getPan();\n            vec2.scale(target.pan, target.pan, 1 / initZoom);\n        }\n        if (flipHorizontal) {\n            target.flipHorizontal = this.flipHorizontal;\n        }\n        if (flipVertical) {\n            target.flipVertical = this.flipVertical;\n        }\n        return target;\n    }\n    setViewReference(viewRef) {\n    }\n    setViewPresentation(viewPres) {\n        if (!viewPres) {\n            return;\n        }\n        const { displayArea, zoom = this.getZoom(), pan, rotation, flipHorizontal = this.flipHorizontal, flipVertical = this.flipVertical, } = viewPres;\n        if (displayArea !== this.getDisplayArea()) {\n            this.setDisplayArea(displayArea);\n        }\n        this.setZoom(zoom);\n        if (pan) {\n            this.setPan(vec2.scale([0, 0], pan, zoom));\n        }\n        if (flipHorizontal !== undefined &&\n            flipHorizontal !== this.flipHorizontal) {\n            this.flip({ flipHorizontal });\n        }\n        if (flipVertical !== undefined && flipVertical !== this.flipVertical) {\n            this.flip({ flipVertical });\n        }\n        if (rotation >= 0) {\n            this.setRotation(rotation);\n        }\n    }\n    _getCorners(bounds) {\n        return [\n            [bounds[0], bounds[2], bounds[4]],\n            [bounds[0], bounds[2], bounds[5]],\n            [bounds[0], bounds[3], bounds[4]],\n            [bounds[0], bounds[3], bounds[5]],\n            [bounds[1], bounds[2], bounds[4]],\n            [bounds[1], bounds[2], bounds[5]],\n            [bounds[1], bounds[3], bounds[4]],\n            [bounds[1], bounds[3], bounds[5]],\n        ];\n    }\n    _getFocalPointForResetCamera(centeredFocalPoint, previousCamera, { resetPan = true, resetToCenter = true }) {\n        if (resetToCenter && resetPan) {\n            return centeredFocalPoint;\n        }\n        if (resetToCenter && !resetPan) {\n            return hasNaNValues(previousCamera.focalPoint)\n                ? centeredFocalPoint\n                : previousCamera.focalPoint;\n        }\n        if (!resetToCenter && resetPan) {\n            const oldCamera = previousCamera;\n            const oldFocalPoint = oldCamera.focalPoint;\n            const oldViewPlaneNormal = oldCamera.viewPlaneNormal;\n            const vectorFromOldFocalPointToCenteredFocalPoint = vec3.subtract(vec3.create(), centeredFocalPoint, oldFocalPoint);\n            const distanceFromOldFocalPointToCenteredFocalPoint = vec3.dot(vectorFromOldFocalPointToCenteredFocalPoint, oldViewPlaneNormal);\n            const newFocalPoint = vec3.scaleAndAdd(vec3.create(), centeredFocalPoint, oldViewPlaneNormal, -1 * distanceFromOldFocalPointToCenteredFocalPoint);\n            return [newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]];\n        }\n        if (!resetPan && !resetToCenter) {\n            return hasNaNValues(previousCamera.focalPoint)\n                ? centeredFocalPoint\n                : previousCamera.focalPoint;\n        }\n    }\n    _isInBounds(point, bounds) {\n        const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n        const [x, y, z] = point;\n        if (x < xMin || x > xMax || y < yMin || y > yMax || z < zMin || z > zMax) {\n            return false;\n        }\n        return true;\n    }\n    _getEdges(bounds) {\n        const [p1, p2, p3, p4, p5, p6, p7, p8] = this._getCorners(bounds);\n        return [\n            [p1, p2],\n            [p1, p5],\n            [p1, p3],\n            [p2, p4],\n            [p2, p6],\n            [p3, p4],\n            [p3, p7],\n            [p4, p8],\n            [p5, p7],\n            [p5, p6],\n            [p6, p8],\n            [p7, p8],\n        ];\n    }\n    static boundsRadius(bounds) {\n        const w1 = (bounds[1] - bounds[0]) ** 2;\n        const w2 = (bounds[3] - bounds[2]) ** 2;\n        const w3 = (bounds[5] - bounds[4]) ** 2;\n        const radius = Math.sqrt(w1 + w2 + w3 || 1) * 0.5;\n        return radius;\n    }\n    setDataIds(_imageIds, _options) {\n        throw new Error('Unsupported operatoin setDataIds');\n    }\n}\nexport default Viewport;\n","import { mat4, vec3 } from 'gl-matrix';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport cache from '../cache/cache';\nimport { EPSILON, MPR_CAMERA_VALUES, RENDERING_DEFAULTS } from '../constants';\nimport { OrientationAxis, Events } from '../enums';\nimport { actorIsA, isImageActor } from '../utilities/actorCheck';\nimport getClosestImageId from '../utilities/getClosestImageId';\nimport getSliceRange from '../utilities/getSliceRange';\nimport getSpacingInNormalDirection from '../utilities/getSpacingInNormalDirection';\nimport snapFocalPointToSlice from '../utilities/snapFocalPointToSlice';\nimport triggerEvent from '../utilities/triggerEvent';\nimport BaseVolumeViewport from './BaseVolumeViewport';\nimport setDefaultVolumeVOI from './helpers/setDefaultVolumeVOI';\nimport { setTransferFunctionNodes } from '../utilities/transferFunctionUtils';\nimport getImageSliceDataForVolumeViewport from '../utilities/getImageSliceDataForVolumeViewport';\nimport { transformCanvasToIJK } from '../utilities/transformCanvasToIJK';\nimport { transformIJKToCanvas } from '../utilities/transformIJKToCanvas';\nimport getVolumeViewportScrollInfo from '../utilities/getVolumeViewportScrollInfo';\nclass VolumeViewport extends BaseVolumeViewport {\n    constructor(props) {\n        super(props);\n        this._useAcquisitionPlaneForViewPlane = false;\n        this.getNumberOfSlices = () => {\n            const { numberOfSlices } = getImageSliceDataForVolumeViewport(this) || {};\n            return numberOfSlices;\n        };\n        this.resetCameraForResize = () => {\n            return this.resetCamera({\n                resetPan: true,\n                resetZoom: true,\n                resetToCenter: true,\n                resetRotation: false,\n                suppressEvents: true,\n            });\n        };\n        this.getCurrentImageIdIndex = (volumeId, useSlabThickness = true) => {\n            const { currentStepIndex } = getVolumeViewportScrollInfo(this, volumeId || this.getVolumeId(), useSlabThickness);\n            return currentStepIndex;\n        };\n        this.getSliceIndex = () => {\n            const { imageIndex } = getImageSliceDataForVolumeViewport(this) || {};\n            return imageIndex;\n        };\n        this.getCurrentImageId = () => {\n            const actorEntry = this.getDefaultActor();\n            if (!actorEntry || !actorIsA(actorEntry, 'vtkVolume')) {\n                return;\n            }\n            const volume = cache.getVolume(this.getVolumeId());\n            if (!volume) {\n                return;\n            }\n            const { viewPlaneNormal, focalPoint } = this.getCamera();\n            return getClosestImageId(volume, focalPoint, viewPlaneNormal);\n        };\n        this.getSlicePlaneCoordinates = () => {\n            const actorEntry = this.getDefaultActor();\n            if (!actorEntry?.actor) {\n                console.warn('No image data found for calculating vtkPlanes.');\n                return [];\n            }\n            const volumeId = this.getVolumeId();\n            const imageVolume = cache.getVolume(volumeId);\n            const camera = this.getCamera();\n            const { focalPoint, position, viewPlaneNormal } = camera;\n            const spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const sliceRange = getSliceRange(actorEntry.actor, viewPlaneNormal, focalPoint);\n            const numSlicesBackward = Math.round((sliceRange.current - sliceRange.min) / spacingInNormalDirection);\n            const numSlicesForward = Math.round((sliceRange.max - sliceRange.current) / spacingInNormalDirection);\n            const currentSliceIndex = this.getSliceIndex();\n            const focalPoints = [];\n            for (let i = -numSlicesBackward; i <= numSlicesForward; i++) {\n                const { newFocalPoint: point } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, i);\n                focalPoints.push({ sliceIndex: currentSliceIndex + i, point });\n            }\n            return focalPoints;\n        };\n        const { orientation } = this.options;\n        if (orientation && orientation !== OrientationAxis.ACQUISITION) {\n            this.applyViewOrientation(orientation);\n            return;\n        }\n        this._useAcquisitionPlaneForViewPlane = true;\n    }\n    async setVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n        const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n        if (!firstImageVolume) {\n            throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n        }\n        if (this._useAcquisitionPlaneForViewPlane) {\n            this._setViewPlaneToAcquisitionPlane(firstImageVolume);\n            this._useAcquisitionPlaneForViewPlane = false;\n        }\n        return super.setVolumes(volumeInputArray, immediate, suppressEvents);\n    }\n    async addVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n        const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n        if (!firstImageVolume) {\n            throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n        }\n        if (this._useAcquisitionPlaneForViewPlane) {\n            this._setViewPlaneToAcquisitionPlane(firstImageVolume);\n            this._useAcquisitionPlaneForViewPlane = false;\n        }\n        return super.addVolumes(volumeInputArray, immediate, suppressEvents);\n    }\n    jumpToWorld(worldPos) {\n        const { focalPoint } = this.getCamera();\n        const delta = [0, 0, 0];\n        vec3.sub(delta, worldPos, focalPoint);\n        const camera = this.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vec3.dot(delta, normal);\n        const projectedDelta = vec3.fromValues(normal[0], normal[1], normal[2]);\n        vec3.scale(projectedDelta, projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vec3.add(newFocalPoint, camera.focalPoint, projectedDelta);\n            vec3.add(newPosition, camera.position, projectedDelta);\n            this.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            this.render();\n        }\n        return true;\n    }\n    setOrientation(orientation, immediate = true) {\n        let viewPlaneNormal, viewUp;\n        if (typeof orientation === 'string') {\n            if (orientation === OrientationAxis.ACQUISITION) {\n                ({ viewPlaneNormal, viewUp } = super._getAcquisitionPlaneOrientation());\n            }\n            else if (MPR_CAMERA_VALUES[orientation]) {\n                ({ viewPlaneNormal, viewUp } = MPR_CAMERA_VALUES[orientation]);\n            }\n            else {\n                throw new Error(`Invalid orientation: ${orientation}. Use Enums.OrientationAxis instead.`);\n            }\n            this.setCamera({\n                viewPlaneNormal,\n                viewUp,\n            });\n            this.viewportProperties.orientation = orientation;\n            this.resetCamera();\n        }\n        else {\n            ({ viewPlaneNormal, viewUp } = orientation);\n            this.applyViewOrientation(orientation);\n        }\n        if (immediate) {\n            this.render();\n        }\n    }\n    setCameraClippingRange() {\n        const activeCamera = this.getVtkActiveCamera();\n        if (!activeCamera) {\n            console.warn('No active camera found');\n            return;\n        }\n        if (activeCamera.getParallelProjection()) {\n            activeCamera.setClippingRange(-RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n        }\n        else {\n            activeCamera.setClippingRange(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n        }\n    }\n    _setViewPlaneToAcquisitionPlane(imageVolume) {\n        let viewPlaneNormal, viewUp;\n        if (imageVolume) {\n            const { direction } = imageVolume;\n            viewPlaneNormal = direction.slice(6, 9).map((x) => -x);\n            viewUp = direction.slice(3, 6).map((x) => -x);\n        }\n        else {\n            ({ viewPlaneNormal, viewUp } = this._getAcquisitionPlaneOrientation());\n        }\n        this.setCamera({\n            viewPlaneNormal,\n            viewUp,\n        });\n        this.initialViewUp = viewUp;\n        this.resetCamera();\n    }\n    getBlendMode(filterActorUIDs) {\n        const actorEntries = this.getActors();\n        const actorForBlend = filterActorUIDs?.length > 0\n            ? actorEntries.find((actorEntry) => filterActorUIDs.includes(actorEntry.uid))\n            : actorEntries[0];\n        return (actorForBlend?.blendMode ||\n            actorForBlend?.actor.getMapper().getBlendMode());\n    }\n    setBlendMode(blendMode, filterActorUIDs = [], immediate = false) {\n        let actorEntries = this.getActors();\n        if (filterActorUIDs?.length > 0) {\n            actorEntries = actorEntries.filter((actorEntry) => {\n                return filterActorUIDs.includes(actorEntry.uid);\n            });\n        }\n        actorEntries.forEach((actorEntry) => {\n            const { actor } = actorEntry;\n            const mapper = actor.getMapper();\n            mapper.setBlendMode?.(blendMode);\n            actorEntry.blendMode = blendMode;\n        });\n        if (immediate) {\n            this.render();\n        }\n    }\n    resetCamera(options) {\n        const { resetPan = true, resetZoom = true, resetRotation = true, resetToCenter = true, suppressEvents = false, resetOrientation = true, } = options || {};\n        const { orientation } = this.viewportProperties;\n        if (orientation && resetOrientation) {\n            this.applyViewOrientation(orientation, false);\n        }\n        super.resetCamera({ resetPan, resetZoom, resetToCenter });\n        const activeCamera = this.getVtkActiveCamera();\n        const viewPlaneNormal = activeCamera.getViewPlaneNormal();\n        const focalPoint = activeCamera.getFocalPoint();\n        const actorEntries = this.getActors();\n        actorEntries.forEach((actorEntry) => {\n            if (!actorEntry.actor) {\n                return;\n            }\n            const mapper = actorEntry.actor.getMapper();\n            const vtkPlanes = mapper.getClippingPlanes();\n            if (vtkPlanes.length === 0 && !actorEntry?.clippingFilter) {\n                const clipPlane1 = vtkPlane.newInstance();\n                const clipPlane2 = vtkPlane.newInstance();\n                const newVtkPlanes = [clipPlane1, clipPlane2];\n                let slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                if (actorEntry.slabThickness) {\n                    slabThickness = actorEntry.slabThickness;\n                }\n                this.setOrientationOfClippingPlanes(newVtkPlanes, slabThickness, viewPlaneNormal, focalPoint);\n                mapper.addClippingPlane(clipPlane1);\n                mapper.addClippingPlane(clipPlane2);\n            }\n        });\n        if (resetRotation &&\n            MPR_CAMERA_VALUES[this.viewportProperties.orientation] !== undefined) {\n            const viewToReset = MPR_CAMERA_VALUES[this.viewportProperties.orientation];\n            this.setCameraNoEvent({\n                viewUp: viewToReset.viewUp,\n                viewPlaneNormal: viewToReset.viewPlaneNormal,\n            });\n        }\n        if (!suppressEvents) {\n            const eventDetail = {\n                viewportId: this.id,\n                camera: this.getCamera(),\n                renderingEngineId: this.renderingEngineId,\n                element: this.element,\n            };\n            triggerEvent(this.element, Events.CAMERA_RESET, eventDetail);\n        }\n        return true;\n    }\n    setSlabThickness(slabThickness, filterActorUIDs = []) {\n        if (slabThickness < 0.1) {\n            slabThickness = 0.1;\n        }\n        let actorEntries = this.getActors();\n        if (filterActorUIDs?.length > 0) {\n            actorEntries = actorEntries.filter((actorEntry) => {\n                return filterActorUIDs.includes(actorEntry.uid);\n            });\n        }\n        actorEntries.forEach((actorEntry) => {\n            if (actorIsA(actorEntry, 'vtkVolume')) {\n                actorEntry.slabThickness = slabThickness;\n            }\n        });\n        const currentCamera = this.getCamera();\n        this.updateClippingPlanesForActors(currentCamera);\n        this.triggerCameraModifiedEventIfNecessary(currentCamera, currentCamera);\n        this.viewportProperties.slabThickness = slabThickness;\n    }\n    resetSlabThickness() {\n        const actorEntries = this.getActors();\n        actorEntries.forEach((actorEntry) => {\n            if (actorIsA(actorEntry, 'vtkVolume')) {\n                actorEntry.slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            }\n        });\n        const currentCamera = this.getCamera();\n        this.updateClippingPlanesForActors(currentCamera);\n        this.triggerCameraModifiedEventIfNecessary(currentCamera, currentCamera);\n        this.viewportProperties.slabThickness = undefined;\n    }\n    isInAcquisitionPlane() {\n        const imageData = this.getImageData();\n        if (!imageData) {\n            return false;\n        }\n        const { direction } = imageData;\n        const { viewPlaneNormal } = this.getCamera();\n        const normalDirection = [direction[6], direction[7], direction[8]];\n        const TOLERANCE = 0.99;\n        return (Math.abs(vec3.dot(viewPlaneNormal, normalDirection)) > TOLERANCE);\n    }\n    getSliceViewInfo() {\n        const { width: canvasWidth, height: canvasHeight } = this.getCanvas();\n        const ijkOriginPoint = transformCanvasToIJK(this, [0, 0]);\n        const ijkRowPoint = transformCanvasToIJK(this, [canvasWidth - 1, 0]);\n        const ijkColPoint = transformCanvasToIJK(this, [0, canvasHeight - 1]);\n        const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n        const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n        const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n        vec3.normalize(ijkRowVec, ijkRowVec);\n        vec3.normalize(ijkColVec, ijkColVec);\n        vec3.normalize(ijkSliceVec, ijkSliceVec);\n        const { dimensions } = this.getImageData();\n        const [sx, sy, sz] = dimensions;\n        const ijkCorners = [\n            [0, 0, 0],\n            [sx - 1, 0, 0],\n            [0, sy - 1, 0],\n            [sx - 1, sy - 1, 0],\n            [0, 0, sz - 1],\n            [sx - 1, 0, sz - 1],\n            [0, sy - 1, sz - 1],\n            [sx - 1, sy - 1, sz - 1],\n        ];\n        const canvasCorners = ijkCorners.map((ijkCorner) => transformIJKToCanvas(this, ijkCorner));\n        const canvasAABB = canvasCorners.reduce((aabb, canvasPoint) => {\n            aabb.minX = Math.min(aabb.minX, canvasPoint[0]);\n            aabb.minY = Math.min(aabb.minY, canvasPoint[1]);\n            aabb.maxX = Math.max(aabb.maxX, canvasPoint[0]);\n            aabb.maxY = Math.max(aabb.maxY, canvasPoint[1]);\n            return aabb;\n        }, { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity });\n        const ijkTopLeft = transformCanvasToIJK(this, [\n            canvasAABB.minX,\n            canvasAABB.minY,\n        ]);\n        const sliceToIndexMatrix = mat4.fromValues(ijkRowVec[0], ijkRowVec[1], ijkRowVec[2], 0, ijkColVec[0], ijkColVec[1], ijkColVec[2], 0, ijkSliceVec[0], ijkSliceVec[1], ijkSliceVec[2], 0, ijkTopLeft[0], ijkTopLeft[1], ijkTopLeft[2], 1);\n        const ijkBottomRight = transformCanvasToIJK(this, [\n            canvasAABB.maxX,\n            canvasAABB.maxY,\n        ]);\n        const ijkDiagonal = vec3.sub(vec3.create(), ijkBottomRight, ijkTopLeft);\n        const indexToSliceMatrix = mat4.invert(mat4.create(), sliceToIndexMatrix);\n        const { viewPlaneNormal } = this.getCamera();\n        const isOblique = viewPlaneNormal.filter((component) => Math.abs(component) > EPSILON)\n            .length > 1;\n        if (isOblique) {\n            throw new Error('getSliceInfo is not supported for oblique views');\n        }\n        const sliceAxis = viewPlaneNormal.findIndex((component) => Math.abs(component) > 1 - EPSILON);\n        if (sliceAxis === -1) {\n            throw new Error('Unable to determine slice axis');\n        }\n        const sliceWidth = vec3.dot(ijkRowVec, ijkDiagonal) + 1;\n        const sliceHeight = vec3.dot(ijkColVec, ijkDiagonal) + 1;\n        return {\n            sliceIndex: this.getSliceIndex(),\n            width: sliceWidth,\n            height: sliceHeight,\n            slicePlane: sliceAxis,\n            sliceToIndexMatrix,\n            indexToSliceMatrix,\n        };\n    }\n    getCurrentSlicePixelData() {\n        const { voxelManager } = this.getImageData();\n        const sliceData = voxelManager.getSliceData(this.getSliceViewInfo());\n        return sliceData;\n    }\n    getViewReference(viewRefSpecifier = {}) {\n        const viewRef = super.getViewReference(viewRefSpecifier);\n        if (!viewRef?.volumeId) {\n            return;\n        }\n        const volume = cache.getVolume(viewRef.volumeId);\n        viewRef.referencedImageId = getClosestImageId(volume, viewRef.cameraFocalPoint, viewRef.viewPlaneNormal);\n        return viewRef;\n    }\n    resetProperties(volumeId) {\n        this._resetProperties(volumeId);\n    }\n    _resetProperties(volumeId) {\n        const volumeActor = volumeId\n            ? this.getActor(volumeId)\n            : this.getDefaultActor();\n        if (!volumeActor) {\n            throw new Error(`No actor found for the given volumeId: ${volumeId}`);\n        }\n        if (volumeActor.slabThickness) {\n            volumeActor.slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            this.viewportProperties.slabThickness = undefined;\n            this.updateClippingPlanesForActors(this.getCamera());\n        }\n        volumeId ||= this.getVolumeId();\n        const imageVolume = cache.getVolume(volumeId);\n        if (!imageVolume) {\n            throw new Error(`imageVolume with id: ${volumeId} does not exist in cache`);\n        }\n        setDefaultVolumeVOI(volumeActor.actor, imageVolume);\n        if (isImageActor(volumeActor)) {\n            const transferFunction = volumeActor.actor\n                .getProperty()\n                .getRGBTransferFunction(0);\n            setTransferFunctionNodes(transferFunction, this.initialTransferFunctionNodes);\n        }\n        const eventDetails = {\n            ...super.getVOIModifiedEventDetail(volumeId),\n        };\n        const resetPan = true;\n        const resetZoom = true;\n        const resetToCenter = true;\n        const resetCameraRotation = true;\n        this.resetCamera({\n            resetPan,\n            resetZoom,\n            resetToCenter,\n            resetCameraRotation,\n        });\n        triggerEvent(this.element, Events.VOI_MODIFIED, eventDetails);\n    }\n    getSlicesClippingPlanes() {\n        const focalPoints = this.getSlicePlaneCoordinates();\n        const { viewPlaneNormal } = this.getCamera();\n        const slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n        return focalPoints.map(({ point, sliceIndex }) => {\n            const vtkPlanes = [vtkPlane.newInstance(), vtkPlane.newInstance()];\n            this.setOrientationOfClippingPlanes(vtkPlanes, slabThickness, viewPlaneNormal, point);\n            return {\n                sliceIndex,\n                planes: vtkPlanes.map((plane) => ({\n                    normal: plane.getNormal(),\n                    origin: plane.getOrigin(),\n                })),\n            };\n        });\n    }\n}\nexport default VolumeViewport;\n","import { RENDERING_DEFAULTS } from '../constants';\nimport { OrientationAxis, Events } from '../enums';\nimport cache from '../cache/cache';\nimport setDefaultVolumeVOI from './helpers/setDefaultVolumeVOI';\nimport triggerEvent from '../utilities/triggerEvent';\nimport { isImageActor } from '../utilities/actorCheck';\nimport { setTransferFunctionNodes } from '../utilities/transferFunctionUtils';\nimport BaseVolumeViewport from './BaseVolumeViewport';\nclass VolumeViewport3D extends BaseVolumeViewport {\n    constructor(props) {\n        super(props);\n        this.getNumberOfSlices = () => {\n            return 1;\n        };\n        this.getRotation = () => 0;\n        this.getCurrentImageIdIndex = () => {\n            return 0;\n        };\n        this.getCurrentImageId = () => {\n            return null;\n        };\n        this.resetCameraForResize = () => {\n            return this.resetCamera({\n                resetPan: true,\n                resetZoom: true,\n                resetToCenter: true,\n            });\n        };\n        const { parallelProjection, orientation } = this.options;\n        const activeCamera = this.getVtkActiveCamera();\n        if (parallelProjection != null) {\n            activeCamera.setParallelProjection(parallelProjection);\n        }\n        if (orientation && orientation !== OrientationAxis.ACQUISITION) {\n            this.applyViewOrientation(orientation);\n        }\n    }\n    isInAcquisitionPlane() {\n        return false;\n    }\n    resetCamera({ resetPan = true, resetZoom = true, resetToCenter = true, } = {}) {\n        super.resetCamera({ resetPan, resetZoom, resetToCenter });\n        const activeCamera = this.getVtkActiveCamera();\n        if (activeCamera.getParallelProjection()) {\n            activeCamera.setClippingRange(-RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n        }\n        else {\n            activeCamera.setClippingRange(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n        }\n        const renderer = this.getRenderer();\n        renderer.resetCameraClippingRange();\n        return true;\n    }\n    setSlabThickness(slabThickness, filterActorUIDs) {\n        return null;\n    }\n    setBlendMode(blendMode, filterActorUIDs, immediate) {\n        return null;\n    }\n    resetProperties(volumeId) {\n        const volumeActor = volumeId\n            ? this.getActor(volumeId)\n            : this.getDefaultActor();\n        if (!volumeActor) {\n            throw new Error(`No actor found for the given volumeId: ${volumeId}`);\n        }\n        if (volumeActor.slabThickness) {\n            volumeActor.slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            this.viewportProperties.slabThickness = undefined;\n            this.updateClippingPlanesForActors(this.getCamera());\n        }\n        volumeId ||= this.getVolumeId();\n        const imageVolume = cache.getVolume(volumeId);\n        if (!imageVolume) {\n            throw new Error(`imageVolume with id: ${volumeId} does not exist in cache`);\n        }\n        setDefaultVolumeVOI(volumeActor.actor, imageVolume);\n        if (isImageActor(volumeActor)) {\n            const transferFunction = volumeActor.actor\n                .getProperty()\n                .getRGBTransferFunction(0);\n            setTransferFunctionNodes(transferFunction, this.initialTransferFunctionNodes);\n        }\n        this.setCamera(this.initialCamera);\n        triggerEvent(this.element, Events.VOI_MODIFIED, super.getVOIModifiedEventDetail(volumeId));\n    }\n    getSliceIndex() {\n        return null;\n    }\n    setCamera(props) {\n        super.setCamera(props);\n        this.getRenderer().resetCameraClippingRange();\n        this.render();\n    }\n    setCameraClippingRange() {\n        const activeCamera = this.getVtkActiveCamera();\n        if (activeCamera.getParallelProjection()) {\n            activeCamera.setClippingRange(-RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n        }\n        else {\n            activeCamera.setClippingRange(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n        }\n    }\n    resetSlabThickness() {\n        return null;\n    }\n}\nexport default VolumeViewport3D;\n","import { vec3, mat4 } from 'gl-matrix';\nimport { Events as EVENTS, MetadataModules } from '../enums';\nimport uuidv4 from '../utilities/uuidv4';\nimport * as metaData from '../metaData';\nimport { Transform } from './helpers/cpuFallback/rendering/transform';\nimport Viewport from './Viewport';\nimport { getOrCreateCanvas } from './helpers';\nimport { EPSILON } from '../constants';\nimport triggerEvent from '../utilities/triggerEvent';\nimport { peerImport } from '../init';\nimport { pointInShapeCallback } from '../utilities/pointInShapeCallback';\nimport microscopyViewportCss from '../constants/microscopyViewportCss';\nlet WSIUtilFunctions = null;\nconst _map = Symbol.for('map');\nconst affineSymbol = Symbol.for('affine');\nconst EVENT_POSTRENDER = 'postrender';\nclass WSIViewport extends Viewport {\n    constructor(props) {\n        super({\n            ...props,\n            canvas: props.canvas || getOrCreateCanvas(props.element),\n        });\n        this.internalCamera = {\n            rotation: 0,\n            centerIndex: [0, 0],\n            extent: [0, -2, 1, -1],\n            xSpacing: 1,\n            ySpacing: 1,\n            resolution: 1,\n            zoom: 1,\n        };\n        this.voiRange = {\n            lower: 0,\n            upper: 255,\n        };\n        this.getProperties = () => {\n            return {};\n        };\n        this.resetCamera = () => {\n            return true;\n        };\n        this.getNumberOfSlices = () => {\n            return 1;\n        };\n        this.getFrameOfReferenceUID = () => {\n            return this.frameOfReferenceUID;\n        };\n        this.resize = () => {\n            const canvas = this.canvas;\n            const { clientWidth, clientHeight } = canvas;\n            if (canvas.width !== clientWidth || canvas.height !== clientHeight) {\n                canvas.width = clientWidth;\n                canvas.height = clientHeight;\n            }\n            this.refreshRenderValues();\n        };\n        this.canvasToWorld = (canvasPos) => {\n            if (!this.metadata) {\n                return;\n            }\n            const indexPoint = this.canvasToIndex(canvasPos);\n            indexPoint[1] = -indexPoint[1];\n            return this.indexToWorld(indexPoint);\n        };\n        this.worldToCanvas = (worldPos) => {\n            if (!this.metadata) {\n                return;\n            }\n            const indexPoint = this.worldToIndex(worldPos);\n            indexPoint[1] = -indexPoint[1];\n            const canvasPoint = this.indexToCanvas([indexPoint[0], indexPoint[1], 0]);\n            return canvasPoint;\n        };\n        this.postrender = () => {\n            this.refreshRenderValues();\n            triggerEvent(this.element, EVENTS.IMAGE_RENDERED, {\n                element: this.element,\n                viewportId: this.id,\n                viewport: this,\n                renderingEngineId: this.renderingEngineId,\n            });\n        };\n        this.getRotation = () => 0;\n        this.canvasToIndex = (canvasPos) => {\n            const transform = this.getTransform();\n            transform.invert();\n            const indexPoint = transform.transformPoint(canvasPos.map((it) => it * devicePixelRatio));\n            return [indexPoint[0], indexPoint[1], 0];\n        };\n        this.indexToCanvas = (indexPos) => {\n            const transform = this.getTransform();\n            return transform\n                .transformPoint([indexPos[0], indexPos[1]])\n                .map((it) => it / devicePixelRatio);\n        };\n        this.customRenderViewportToCanvas = () => {\n        };\n        this.getImageIds = () => {\n            return [this.imageIds[0]];\n        };\n        this.renderingEngineId = props.renderingEngineId;\n        this.element.setAttribute('data-viewport-uid', this.id);\n        this.element.setAttribute('data-rendering-engine-uid', this.renderingEngineId);\n        this.element.style.position = 'relative';\n        this.microscopyElement = document.createElement('div');\n        this.microscopyElement.setAttribute('class', 'DicomMicroscopyViewer');\n        this.microscopyElement.id = uuidv4();\n        this.microscopyElement.innerText = 'Initial';\n        this.microscopyElement.style.background = 'grey';\n        this.microscopyElement.style.width = '100%';\n        this.microscopyElement.style.height = '100%';\n        this.microscopyElement.style.position = 'absolute';\n        this.microscopyElement.style.left = '0';\n        this.microscopyElement.style.top = '0';\n        const cs3dElement = this.element.firstElementChild;\n        cs3dElement.insertBefore(this.microscopyElement, cs3dElement.childNodes[1]);\n        this.addEventListeners();\n        this.addWidget('DicomMicroscopyViewer', {\n            getEnabled: () => !!this.viewer,\n            setEnabled: () => {\n                this.elementDisabledHandler();\n            },\n        });\n        this.resize();\n    }\n    static get useCustomRenderingPipeline() {\n        return true;\n    }\n    addEventListeners() {\n        this.canvas.addEventListener(EVENTS.ELEMENT_DISABLED, this.elementDisabledHandler);\n    }\n    removeEventListeners() {\n        this.canvas.removeEventListener(EVENTS.ELEMENT_DISABLED, this.elementDisabledHandler);\n    }\n    elementDisabledHandler() {\n        this.removeEventListeners();\n        this.viewer?.cleanup();\n        this.viewer = null;\n        const cs3dElement = this.element.firstElementChild;\n        cs3dElement.removeChild(this.microscopyElement);\n        this.microscopyElement = null;\n    }\n    getImageDataMetadata(imageIndex = 0) {\n        const maxImage = this.metadataDicomweb.reduce((maxImage, image) => {\n            return maxImage?.NumberOfFrames < image.NumberOfFrames ? image : maxImage;\n        });\n        const { TotalPixelMatrixColumns: columns, TotalPixelMatrixRows: rows, ImageOrientationSlide, ImagedVolumeWidth: width, ImagedVolumeHeight: height, ImagedVolumeDepth: depth, } = maxImage;\n        const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, this.imageIds[imageIndex]);\n        let rowCosines = ImageOrientationSlide.slice(0, 3);\n        let columnCosines = ImageOrientationSlide.slice(3, 6);\n        if (rowCosines == null || columnCosines == null) {\n            rowCosines = [1, 0, 0];\n            columnCosines = [0, 1, 0];\n        }\n        const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n        const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n        const scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n        const { XOffsetInSlideCoordinateSystem = 0, YOffsetInSlideCoordinateSystem = 0, ZOffsetInSlideCoordinateSystem = 0, } = maxImage.TotalPixelMatrixOriginSequence?.[0] || {};\n        const origin = [\n            XOffsetInSlideCoordinateSystem,\n            YOffsetInSlideCoordinateSystem,\n            ZOffsetInSlideCoordinateSystem,\n        ];\n        const xSpacing = width / columns;\n        const ySpacing = height / rows;\n        const xVoxels = columns;\n        const yVoxels = rows;\n        const zSpacing = depth;\n        const zVoxels = 1;\n        this.hasPixelSpacing = !!(width && height);\n        return {\n            bitsAllocated: 8,\n            numberOfComponents: 3,\n            origin,\n            direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n            dimensions: [xVoxels, yVoxels, zVoxels],\n            spacing: [xSpacing, ySpacing, zSpacing],\n            hasPixelSpacing: this.hasPixelSpacing,\n            numVoxels: xVoxels * yVoxels * zVoxels,\n            imagePlaneModule,\n        };\n    }\n    async setFrameNumber(frame) {\n    }\n    setProperties(props) {\n    }\n    resetProperties() {\n        this.setProperties({});\n    }\n    getScalarData() {\n        return null;\n    }\n    computeTransforms() {\n        const indexToWorld = mat4.create();\n        const worldToIndex = mat4.create();\n        mat4.fromTranslation(indexToWorld, this.metadata.origin);\n        indexToWorld[0] = this.metadata.direction[0];\n        indexToWorld[1] = this.metadata.direction[1];\n        indexToWorld[2] = this.metadata.direction[2];\n        indexToWorld[4] = this.metadata.direction[3];\n        indexToWorld[5] = this.metadata.direction[4];\n        indexToWorld[6] = this.metadata.direction[5];\n        indexToWorld[8] = this.metadata.direction[6];\n        indexToWorld[9] = this.metadata.direction[7];\n        indexToWorld[10] = this.metadata.direction[8];\n        mat4.scale(indexToWorld, indexToWorld, this.metadata.spacing);\n        mat4.invert(worldToIndex, indexToWorld);\n        return { indexToWorld, worldToIndex };\n    }\n    getImageData() {\n        const { metadata } = this;\n        if (!metadata) {\n            return null;\n        }\n        const { spacing } = metadata;\n        const imageData = {\n            getDirection: () => metadata.direction,\n            getDimensions: () => metadata.dimensions,\n            getRange: () => [0, 255],\n            getScalarData: () => this.getScalarData(),\n            getSpacing: () => metadata.spacing,\n            worldToIndex: (point) => {\n                return this.worldToIndex(point);\n            },\n            indexToWorld: (point) => {\n                return this.indexToWorld(point);\n            },\n        };\n        const imageDataReturn = {\n            dimensions: metadata.dimensions,\n            spacing,\n            numberOfComponents: 3,\n            origin: metadata.origin,\n            direction: metadata.direction,\n            metadata: {\n                Modality: this.modality,\n                FrameOfReferenceUID: this.frameOfReferenceUID,\n            },\n            hasPixelSpacing: this.hasPixelSpacing,\n            calibration: this.calibration,\n            preScale: {\n                scaled: false,\n            },\n            scalarData: this.getScalarData(),\n            imageData,\n            voxelManager: {\n                forEach: (callback, options) => {\n                    return pointInShapeCallback(options.imageData, {\n                        pointInShapeFn: options.isInObject ?? (() => true),\n                        callback: callback,\n                        boundsIJK: options.boundsIJK,\n                        returnPoints: options.returnPoints ?? false,\n                    });\n                },\n            },\n        };\n        return imageDataReturn;\n    }\n    hasImageURI(imageURI) {\n        return true;\n    }\n    setCamera(camera) {\n        const previousCamera = this.getCamera();\n        const { parallelScale, focalPoint } = camera;\n        const view = this.getView();\n        const { xSpacing } = this.internalCamera;\n        if (parallelScale) {\n            const worldToCanvasRatio = this.element.clientHeight / parallelScale;\n            const resolution = 1 / xSpacing / worldToCanvasRatio;\n            view.setResolution(resolution);\n        }\n        if (focalPoint) {\n            const newCanvas = this.worldToCanvas(focalPoint);\n            const newIndex = this.canvasToIndex(newCanvas);\n            view.setCenter(newIndex);\n        }\n        const updatedCamera = this.getCamera();\n        this.triggerCameraModifiedEventIfNecessary(previousCamera, updatedCamera);\n    }\n    getCurrentImageId() {\n        return this.imageIds[0];\n    }\n    getFrameNumber() {\n        return 1;\n    }\n    getCamera() {\n        this.refreshRenderValues();\n        const { resolution, xSpacing, centerIndex } = this.internalCamera;\n        const canvasToWorldRatio = resolution * xSpacing;\n        const canvasCenter = this.indexToCanvas([\n            centerIndex[0],\n            centerIndex[1],\n            0,\n        ]);\n        const focalPoint = this.canvasToWorld(canvasCenter);\n        return {\n            parallelProjection: true,\n            focalPoint,\n            position: focalPoint,\n            viewUp: [0, -1, 0],\n            parallelScale: this.element.clientHeight * canvasToWorldRatio,\n            viewPlaneNormal: [0, 0, 1],\n        };\n    }\n    static { this.getDicomMicroscopyViewer = async () => {\n        return peerImport('dicom-microscopy-viewer');\n    }; }\n    worldToIndexWSI(point) {\n        if (!WSIUtilFunctions) {\n            return;\n        }\n        const affine = this.viewer[affineSymbol];\n        const pixelCoords = WSIUtilFunctions.applyInverseTransform({\n            coordinate: [point[0], point[1]],\n            affine,\n        });\n        return [pixelCoords[0], pixelCoords[1]];\n    }\n    indexToWorldWSI(point) {\n        if (!WSIUtilFunctions) {\n            return;\n        }\n        const sliceCoords = WSIUtilFunctions.applyTransform({\n            coordinate: [point[0], point[1]],\n            affine: this.viewer[affineSymbol],\n        });\n        return [sliceCoords[0], sliceCoords[1], 0];\n    }\n    worldToIndex(point) {\n        const { worldToIndex: worldToIndexMatrix } = this.computeTransforms();\n        const imageCoord = vec3.create();\n        vec3.transformMat4(imageCoord, point, worldToIndexMatrix);\n        return imageCoord;\n    }\n    indexToWorld(point) {\n        const { indexToWorld: indexToWorldMatrix } = this.computeTransforms();\n        const worldPos = vec3.create();\n        const point3D = vec3.fromValues(...point);\n        vec3.transformMat4(worldPos, point3D, indexToWorldMatrix);\n        return [worldPos[0], worldPos[1], worldPos[2]];\n    }\n    setDataIds(imageIds, options) {\n        if (options?.miniNavigationOverlay !== false) {\n            WSIViewport.addMiniNavigationOverlayCss();\n        }\n        const webClient = options?.webClient ||\n            metaData.get(MetadataModules.WADO_WEB_CLIENT, imageIds[0]);\n        if (!webClient) {\n            throw new Error(`To use setDataIds on WSI data, you must provide metaData.webClient for ${imageIds[0]}`);\n        }\n        return this.setWSI(imageIds, webClient);\n    }\n    async setWSI(imageIds, client) {\n        this.microscopyElement.style.background = 'black';\n        this.microscopyElement.innerText = 'Loading';\n        this.imageIds = imageIds;\n        const DicomMicroscopyViewer = await WSIViewport.getDicomMicroscopyViewer();\n        WSIUtilFunctions ||= DicomMicroscopyViewer.utils;\n        this.frameOfReferenceUID = null;\n        const metadataDicomweb = this.imageIds.map((imageId) => {\n            const imageMetadata = client.getDICOMwebMetadata(imageId);\n            Object.defineProperty(imageMetadata, 'isMultiframe', {\n                value: imageMetadata.isMultiframe,\n                enumerable: false,\n            });\n            Object.defineProperty(imageMetadata, 'frameNumber', {\n                value: undefined,\n                enumerable: false,\n            });\n            const imageType = imageMetadata['00080008']?.Value;\n            if (imageType?.length === 1) {\n                imageMetadata['00080008'].Value = imageType[0].split('\\\\');\n            }\n            const frameOfReference = imageMetadata['00200052']?.Value?.[0];\n            if (!this.frameOfReferenceUID) {\n                this.frameOfReferenceUID = frameOfReference;\n            }\n            else if (frameOfReference !== this.frameOfReferenceUID) {\n                imageMetadata['00200052'].Value = [this.frameOfReferenceUID];\n            }\n            return imageMetadata;\n        });\n        const volumeImages = [];\n        metadataDicomweb.forEach((m) => {\n            const image = new DicomMicroscopyViewer.metadata.VLWholeSlideMicroscopyImage({\n                metadata: m,\n            });\n            const imageFlavor = image.ImageType[2];\n            if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n                volumeImages.push(image);\n            }\n            else {\n                console.log('Unknown image type', image.ImageType);\n            }\n        });\n        this.metadataDicomweb = volumeImages;\n        const viewer = new DicomMicroscopyViewer.viewer.VolumeImageViewer({\n            client,\n            metadata: volumeImages,\n            controls: ['overview', 'position'],\n            retrieveRendered: false,\n            bindings: {},\n        });\n        viewer.render({ container: this.microscopyElement });\n        this.metadata = this.getImageDataMetadata();\n        viewer.deactivateDragPanInteraction();\n        this.viewer = viewer;\n        this.map = viewer[_map];\n        this.map.on(EVENT_POSTRENDER, this.postrender);\n        this.resize();\n        this.microscopyElement.innerText = '';\n        Object.assign(this.microscopyElement.style, {\n            '--ol-partial-background-color': 'rgba(127, 127, 127, 0.7)',\n            '--ol-foreground-color': '#000000',\n            '--ol-subtle-foreground-color': '#000',\n            '--ol-subtle-background-color': 'rgba(78, 78, 78, 0.5)',\n            background: 'none',\n        });\n    }\n    scroll(delta) {\n        const camera = this.getCamera();\n        this.setCamera({\n            parallelScale: camera.parallelScale * (1 + 0.1 * delta),\n        });\n    }\n    getSliceIndex() {\n        return 0;\n    }\n    getView() {\n        if (!this.viewer) {\n            return;\n        }\n        const map = this.viewer[_map];\n        const anyWindow = window;\n        anyWindow.map = map;\n        anyWindow.viewer = this.viewer;\n        anyWindow.view = map?.getView();\n        anyWindow.wsi = this;\n        return map?.getView();\n    }\n    refreshRenderValues() {\n        const view = this.getView();\n        if (!view) {\n            return;\n        }\n        const resolution = view.getResolution();\n        if (!resolution || resolution < EPSILON) {\n            return;\n        }\n        const centerIndex = view.getCenter();\n        const extent = view.getProjection().getExtent();\n        const rotation = view.getRotation();\n        const zoom = view.getZoom();\n        const { metadata: { spacing: [xSpacing, ySpacing], }, } = this;\n        const worldToCanvasRatio = 1 / resolution / xSpacing;\n        Object.assign(this.internalCamera, {\n            extent,\n            centerIndex,\n            worldToCanvasRatio,\n            xSpacing,\n            ySpacing,\n            resolution,\n            rotation,\n            zoom,\n        });\n    }\n    getZoom() {\n        return this.getView()?.getZoom();\n    }\n    setZoom(zoom) {\n        this.getView()?.setZoom(zoom);\n    }\n    getTransform() {\n        this.refreshRenderValues();\n        const { centerIndex: center, resolution, rotation } = this.internalCamera;\n        const halfCanvas = [this.canvas.width / 2, this.canvas.height / 2];\n        const transform = new Transform();\n        transform.translate(halfCanvas[0], halfCanvas[1]);\n        transform.rotate(rotation);\n        transform.scale(1 / resolution, -1 / resolution);\n        transform.translate(-center[0], -center[1]);\n        return transform;\n    }\n    getViewReferenceId() {\n        return `imageId:${this.getCurrentImageId()}`;\n    }\n    getCurrentImageIdIndex() {\n        return 0;\n    }\n    static { this.overlayCssId = 'overlayCss'; }\n    static addMiniNavigationOverlayCss() {\n        if (document.getElementById(this.overlayCssId)) {\n            return;\n        }\n        const overlayCss = document.createElement('style');\n        overlayCss.innerText = microscopyViewportCss;\n        overlayCss.setAttribute('id', this.overlayCssId);\n        document.getElementsByTagName('head')[0].append(overlayCss);\n    }\n}\nexport default WSIViewport;\n","import renderingEngineCache from './renderingEngineCache';\nexport function getRenderingEngine(id) {\n    return renderingEngineCache.get(id);\n}\nexport function getRenderingEngines() {\n    return renderingEngineCache.getAll();\n}\nexport default getRenderingEngine;\n","function addImageSlicesToViewports(renderingEngine, stackInputs, viewportIds) {\n    for (const viewportId of viewportIds) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            throw new Error(`Viewport with Id ${viewportId} does not exist`);\n        }\n        if (!viewport.addImages) {\n            console.warn(`Viewport with Id ${viewportId} does not have addImages. Cannot add image segmentation to this viewport.`);\n            return;\n        }\n    }\n    viewportIds.forEach((viewportId) => {\n        const viewport = renderingEngine.getViewport(viewportId);\n        viewport.addImages(stackInputs);\n    });\n}\nexport default addImageSlicesToViewports;\n","import BaseVolumeViewport from '../BaseVolumeViewport';\nasync function addVolumesToViewports(renderingEngine, volumeInputs, viewportIds, immediateRender = false, suppressEvents = false) {\n    for (const viewportId of viewportIds) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            throw new Error(`Viewport with Id ${viewportId} does not exist`);\n        }\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            console.warn(`Viewport with Id ${viewportId} is not a BaseVolumeViewport. Cannot add volume to this viewport.`);\n            return;\n        }\n    }\n    const addVolumePromises = viewportIds.map(async (viewportId) => {\n        const viewport = renderingEngine.getViewport(viewportId);\n        await viewport.addVolumes(volumeInputs, immediateRender, suppressEvents);\n    });\n    await Promise.all(addVolumePromises);\n    return;\n}\nexport default addVolumesToViewports;\n","import LookupTable from './lookupTable';\nimport CPU_COLORMAPS from '../../../../constants/cpuColormaps';\nconst COLOR_TRANSPARENT = [0, 0, 0, 0];\nfunction linspace(a, b, n) {\n    n = n === null ? 100 : n;\n    const increment = (b - a) / (n - 1);\n    const vector = [];\n    while (n-- > 0) {\n        vector.push(a);\n        a += increment;\n    }\n    vector[vector.length - 1] = b;\n    return vector;\n}\nfunction getRank(array, elem) {\n    let left = 0;\n    let right = array.length - 1;\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        const midElem = array[mid];\n        if (midElem === elem) {\n            return mid;\n        }\n        else if (elem < midElem) {\n            right = mid - 1;\n        }\n        else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\nfunction searchSorted(inputArray, values) {\n    let i;\n    const indexes = [];\n    const len = values.length;\n    inputArray.sort(function (a, b) {\n        return a - b;\n    });\n    for (i = 0; i < len; i++) {\n        indexes[i] = getRank(inputArray, values[i]);\n    }\n    return indexes;\n}\nfunction makeMappingArray(N, data, gamma) {\n    let i;\n    const x = [];\n    const y0 = [];\n    const y1 = [];\n    const lut = [];\n    gamma = gamma === null ? 1 : gamma;\n    for (i = 0; i < data.length; i++) {\n        const element = data[i];\n        x.push((N - 1) * element[0]);\n        y0.push(element[1]);\n        y1.push(element[1]);\n    }\n    const xLinSpace = linspace(0, 1, N);\n    for (i = 0; i < N; i++) {\n        xLinSpace[i] = (N - 1) * Math.pow(xLinSpace[i], gamma);\n    }\n    const xLinSpaceIndexes = searchSorted(x, xLinSpace);\n    for (i = 1; i < N - 1; i++) {\n        const index = xLinSpaceIndexes[i];\n        const colorPercent = (xLinSpace[i] - x[index - 1]) / (x[index] - x[index - 1]);\n        const colorDelta = y0[index] - y1[index - 1];\n        lut[i] = colorPercent * colorDelta + y1[index - 1];\n    }\n    lut[0] = y1[0];\n    lut[N - 1] = y0[data.length - 1];\n    return lut;\n}\nfunction createLinearSegmentedColormap(segmentedData, N, gamma) {\n    let i;\n    const lut = [];\n    N = N === null ? 256 : N;\n    gamma = gamma === null ? 1 : gamma;\n    const redLut = makeMappingArray(N, segmentedData.red, gamma);\n    const greenLut = makeMappingArray(N, segmentedData.green, gamma);\n    const blueLut = makeMappingArray(N, segmentedData.blue, gamma);\n    for (i = 0; i < N; i++) {\n        const red = Math.round(redLut[i] * 255);\n        const green = Math.round(greenLut[i] * 255);\n        const blue = Math.round(blueLut[i] * 255);\n        const rgba = [red, green, blue, 255];\n        lut.push(rgba);\n    }\n    return lut;\n}\nexport function getColormapsList() {\n    const colormaps = [];\n    const keys = Object.keys(CPU_COLORMAPS);\n    keys.forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(CPU_COLORMAPS, key)) {\n            const colormap = CPU_COLORMAPS[key];\n            colormaps.push({\n                id: key,\n                name: colormap.name,\n            });\n        }\n    });\n    colormaps.sort(function (a, b) {\n        const aName = a.name.toLowerCase();\n        const bName = b.name.toLowerCase();\n        if (aName === bName) {\n            return 0;\n        }\n        return aName < bName ? -1 : 1;\n    });\n    return colormaps;\n}\nexport function getColormap(id, colormapData) {\n    let colormap = CPU_COLORMAPS[id];\n    if (!colormap) {\n        colormap = CPU_COLORMAPS[id] = colormapData || {\n            name: '',\n            colors: [],\n        };\n    }\n    if (!colormap.colors && colormap.segmentedData) {\n        colormap.colors = createLinearSegmentedColormap(colormap.segmentedData, colormap.numColors, colormap.gamma);\n    }\n    const cpuFallbackColormap = {\n        getId() {\n            return id;\n        },\n        getColorSchemeName() {\n            return colormap.name;\n        },\n        setColorSchemeName(name) {\n            colormap.name = name;\n        },\n        getNumberOfColors() {\n            return colormap.colors.length;\n        },\n        setNumberOfColors(numColors) {\n            while (colormap.colors.length < numColors) {\n                colormap.colors.push(COLOR_TRANSPARENT);\n            }\n            colormap.colors.length = numColors;\n        },\n        getColor(index) {\n            if (this.isValidIndex(index)) {\n                return colormap.colors[index];\n            }\n            return COLOR_TRANSPARENT;\n        },\n        getColorRepeating(index) {\n            const numColors = colormap.colors.length;\n            index = numColors ? index % numColors : 0;\n            return this.getColor(index);\n        },\n        setColor(index, rgba) {\n            if (this.isValidIndex(index)) {\n                colormap.colors[index] = rgba;\n            }\n        },\n        addColor(rgba) {\n            colormap.colors.push(rgba);\n        },\n        insertColor(index, rgba) {\n            if (this.isValidIndex(index)) {\n                colormap.colors.splice(index, 1, rgba);\n            }\n        },\n        removeColor(index) {\n            if (this.isValidIndex(index)) {\n                colormap.colors.splice(index, 1);\n            }\n        },\n        clearColors() {\n            colormap.colors = [];\n        },\n        buildLookupTable(lut) {\n            if (!lut) {\n                return;\n            }\n            const numColors = colormap.colors.length;\n            lut.setNumberOfTableValues(numColors);\n            for (let i = 0; i < numColors; i++) {\n                lut.setTableValue(i, colormap.colors[i]);\n            }\n        },\n        createLookupTable() {\n            const lut = new LookupTable();\n            this.buildLookupTable(lut);\n            return lut;\n        },\n        isValidIndex(index) {\n            return index >= 0 && index < colormap.colors.length;\n        },\n    };\n    return cpuFallbackColormap;\n}\n","import { getColormap, getColormapsList } from './colormap';\nimport LookupTable from './lookupTable';\nexport { getColormap, getColormapsList, LookupTable };\n","const BELOW_RANGE_COLOR_INDEX = 0;\nconst ABOVE_RANGE_COLOR_INDEX = 1;\nconst NAN_COLOR_INDEX = 2;\nfunction HSVToRGB(hue, sat, val) {\n    if (hue > 1) {\n        throw new Error('HSVToRGB expects hue < 1');\n    }\n    const rgb = [];\n    if (sat === 0) {\n        rgb[0] = val;\n        rgb[1] = val;\n        rgb[2] = val;\n        return rgb;\n    }\n    const hueCase = Math.floor(hue * 6);\n    const frac = 6 * hue - hueCase;\n    const lx = val * (1 - sat);\n    const ly = val * (1 - sat * frac);\n    const lz = val * (1 - sat * (1 - frac));\n    switch (hueCase) {\n        case 0:\n        case 6:\n            rgb[0] = val;\n            rgb[1] = lz;\n            rgb[2] = lx;\n            break;\n        case 1:\n            rgb[0] = ly;\n            rgb[1] = val;\n            rgb[2] = lx;\n            break;\n        case 2:\n            rgb[0] = lx;\n            rgb[1] = val;\n            rgb[2] = lz;\n            break;\n        case 3:\n            rgb[0] = lx;\n            rgb[1] = ly;\n            rgb[2] = val;\n            break;\n        case 4:\n            rgb[0] = lz;\n            rgb[1] = lx;\n            rgb[2] = val;\n            break;\n        case 5:\n            rgb[0] = val;\n            rgb[1] = lx;\n            rgb[2] = ly;\n            break;\n    }\n    return rgb;\n}\nfunction linearIndexLookupMain(v, p) {\n    let dIndex;\n    if (v < p.Range[0]) {\n        dIndex = p.MaxIndex + BELOW_RANGE_COLOR_INDEX + 1.5;\n    }\n    else if (v > p.Range[1]) {\n        dIndex = p.MaxIndex + ABOVE_RANGE_COLOR_INDEX + 1.5;\n    }\n    else {\n        dIndex = (v + p.Shift) * p.Scale;\n    }\n    return Math.floor(dIndex);\n}\nclass LookupTable {\n    constructor() {\n        this.NumberOfColors = 256;\n        this.Ramp = 'linear';\n        this.TableRange = [0, 255];\n        this.HueRange = [0, 0.66667];\n        this.SaturationRange = [1, 1];\n        this.ValueRange = [1, 1];\n        this.AlphaRange = [1, 1];\n        this.NaNColor = [128, 0, 0, 255];\n        this.BelowRangeColor = [0, 0, 0, 255];\n        this.UseBelowRangeColor = true;\n        this.AboveRangeColor = [255, 255, 255, 255];\n        this.UseAboveRangeColor = true;\n        this.InputRange = [0, 255];\n        this.Table = [];\n    }\n    setNumberOfTableValues(number) {\n        this.NumberOfColors = number;\n    }\n    setRamp(ramp) {\n        this.Ramp = ramp;\n    }\n    setTableRange(start, end) {\n        this.TableRange[0] = start;\n        this.TableRange[1] = end;\n    }\n    setHueRange(start, end) {\n        this.HueRange[0] = start;\n        this.HueRange[1] = end;\n    }\n    setSaturationRange(start, end) {\n        this.SaturationRange[0] = start;\n        this.SaturationRange[1] = end;\n    }\n    setValueRange(start, end) {\n        this.ValueRange[0] = start;\n        this.ValueRange[1] = end;\n    }\n    setRange(start, end) {\n        this.InputRange[0] = start;\n        this.InputRange[1] = end;\n    }\n    setAlphaRange(start, end) {\n        this.AlphaRange[0] = start;\n        this.AlphaRange[1] = end;\n    }\n    getColor(scalar) {\n        return this.mapValue(scalar);\n    }\n    build(force) {\n        if (this.Table.length > 1 && !force) {\n            return;\n        }\n        this.Table = [];\n        const maxIndex = this.NumberOfColors - 1;\n        let hinc, sinc, vinc, ainc;\n        if (maxIndex) {\n            hinc = (this.HueRange[1] - this.HueRange[0]) / maxIndex;\n            sinc = (this.SaturationRange[1] - this.SaturationRange[0]) / maxIndex;\n            vinc = (this.ValueRange[1] - this.ValueRange[0]) / maxIndex;\n            ainc = (this.AlphaRange[1] - this.AlphaRange[0]) / maxIndex;\n        }\n        else {\n            hinc = sinc = vinc = ainc = 0.0;\n        }\n        for (let i = 0; i <= maxIndex; i++) {\n            const hue = this.HueRange[0] + i * hinc;\n            const sat = this.SaturationRange[0] + i * sinc;\n            const val = this.ValueRange[0] + i * vinc;\n            const alpha = this.AlphaRange[0] + i * ainc;\n            const rgb = HSVToRGB(hue, sat, val);\n            const c_rgba = [0, 0, 0, 0];\n            switch (this.Ramp) {\n                case 'scurve':\n                    c_rgba[0] = Math.floor(127.5 * (1.0 + Math.cos((1.0 - rgb[0]) * Math.PI)));\n                    c_rgba[1] = Math.floor(127.5 * (1.0 + Math.cos((1.0 - rgb[1]) * Math.PI)));\n                    c_rgba[2] = Math.floor(127.5 * (1.0 + Math.cos((1.0 - rgb[2]) * Math.PI)));\n                    c_rgba[3] = Math.floor(alpha * 255);\n                    break;\n                case 'linear':\n                    c_rgba[0] = Math.floor(rgb[0] * 255 + 0.5);\n                    c_rgba[1] = Math.floor(rgb[1] * 255 + 0.5);\n                    c_rgba[2] = Math.floor(rgb[2] * 255 + 0.5);\n                    c_rgba[3] = Math.floor(alpha * 255 + 0.5);\n                    break;\n                case 'sqrt':\n                    c_rgba[0] = Math.floor(Math.sqrt(rgb[0]) * 255 + 0.5);\n                    c_rgba[1] = Math.floor(Math.sqrt(rgb[1]) * 255 + 0.5);\n                    c_rgba[2] = Math.floor(Math.sqrt(rgb[2]) * 255 + 0.5);\n                    c_rgba[3] = Math.floor(Math.sqrt(alpha) * 255 + 0.5);\n                    break;\n                default:\n                    throw new Error(`Invalid Ramp value (${this.Ramp})`);\n            }\n            this.Table.push(c_rgba);\n        }\n        this.buildSpecialColors();\n    }\n    buildSpecialColors() {\n        const numberOfColors = this.NumberOfColors;\n        const belowRangeColorIndex = numberOfColors + BELOW_RANGE_COLOR_INDEX;\n        const aboveRangeColorIndex = numberOfColors + ABOVE_RANGE_COLOR_INDEX;\n        const nanColorIndex = numberOfColors + NAN_COLOR_INDEX;\n        if (this.UseBelowRangeColor || numberOfColors === 0) {\n            this.Table[belowRangeColorIndex] = this.BelowRangeColor;\n        }\n        else {\n            this.Table[belowRangeColorIndex] = this.Table[0];\n        }\n        if (this.UseAboveRangeColor || numberOfColors === 0) {\n            this.Table[aboveRangeColorIndex] = this.AboveRangeColor;\n        }\n        else {\n            this.Table[aboveRangeColorIndex] = this.Table[numberOfColors - 1];\n        }\n        this.Table[nanColorIndex] = this.NaNColor;\n    }\n    mapValue(v) {\n        const index = this.getIndex(v);\n        if (index < 0) {\n            return this.NaNColor;\n        }\n        else if (index === 0) {\n            if (this.UseBelowRangeColor && v < this.TableRange[0]) {\n                return this.BelowRangeColor;\n            }\n        }\n        else if (index === this.NumberOfColors - 1) {\n            if (this.UseAboveRangeColor && v > this.TableRange[1]) {\n                return this.AboveRangeColor;\n            }\n        }\n        return this.Table[index];\n    }\n    getIndex(v) {\n        const p = {\n            Range: [],\n            MaxIndex: this.NumberOfColors - 1,\n            Shift: -this.TableRange[0],\n            Scale: 1,\n        };\n        if (this.TableRange[1] <= this.TableRange[0]) {\n            p.Scale = Number.MAX_VALUE;\n        }\n        else {\n            p.Scale = p.MaxIndex / (this.TableRange[1] - this.TableRange[0]);\n        }\n        p.Range[0] = this.TableRange[0];\n        p.Range[1] = this.TableRange[1];\n        if (isNaN(v)) {\n            return -1;\n        }\n        let index = linearIndexLookupMain(v, p);\n        if (index === this.NumberOfColors + BELOW_RANGE_COLOR_INDEX) {\n            index = 0;\n        }\n        else if (index === this.NumberOfColors + ABOVE_RANGE_COLOR_INDEX) {\n            index = this.NumberOfColors - 1;\n        }\n        return index;\n    }\n    setTableValue(index, rgba, g, b, a) {\n        let colorArray;\n        if (typeof rgba === 'number' &&\n            g !== undefined &&\n            b !== undefined &&\n            a !== undefined) {\n            colorArray = [rgba, g, b, a];\n        }\n        else if (Array.isArray(rgba)) {\n            colorArray = rgba;\n        }\n        else {\n            throw new Error('Invalid arguments for setTableValue');\n        }\n        if (index < 0) {\n            throw new Error(`Can't set the table value for negative index (${index})`);\n        }\n        if (index >= this.NumberOfColors) {\n            throw new Error(`Index ${index} is greater than the number of colors ${this.NumberOfColors}`);\n        }\n        this.Table[index] = colorArray;\n        if (index === 0 || index === this.NumberOfColors - 1) {\n            this.buildSpecialColors();\n        }\n    }\n}\nexport default LookupTable;\n","import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import getTransform from './getTransform';\nexport default function (enabledElement, pt) {\n    const transform = getTransform(enabledElement);\n    transform.invert();\n    return transform.transformPoint(pt);\n}\n","export default function computeAutoVoi(viewport, image) {\n    if (hasVoi(viewport)) {\n        return;\n    }\n    const maxVoi = image.maxPixelValue * image.slope + image.intercept;\n    const minVoi = image.minPixelValue * image.slope + image.intercept;\n    const ww = maxVoi - minVoi;\n    const wc = (maxVoi + minVoi) / 2;\n    if (viewport.voi === undefined) {\n        viewport.voi = {\n            windowWidth: ww,\n            windowCenter: wc,\n            voiLUTFunction: image.voiLUTFunction,\n        };\n    }\n    else {\n        viewport.voi.windowWidth = ww;\n        viewport.voi.windowCenter = wc;\n    }\n}\nfunction hasVoi(viewport) {\n    const hasLut = viewport.voiLUT && viewport.voiLUT.lut && viewport.voiLUT.lut.length > 0;\n    return (hasLut ||\n        (viewport.voi.windowWidth !== undefined &&\n            viewport.voi.windowCenter !== undefined));\n}\n","export default function (shift, viewportOrientation) {\n    const { hflip, vflip, rotation } = viewportOrientation;\n    shift.x *= hflip ? -1 : 1;\n    shift.y *= vflip ? -1 : 1;\n    if (rotation !== 0) {\n        const angle = (rotation * Math.PI) / 180;\n        const cosA = Math.cos(angle);\n        const sinA = Math.sin(angle);\n        const newX = shift.x * cosA - shift.y * sinA;\n        const newY = shift.x * sinA + shift.y * cosA;\n        shift.x = newX;\n        shift.y = newY;\n    }\n    return shift;\n}\n","import { state } from './setDefaultViewport';\nimport { VOILUTFunctionType } from '../../../../enums';\nfunction createDefaultDisplayedArea() {\n    return {\n        tlhc: {\n            x: 1,\n            y: 1,\n        },\n        brhc: {\n            x: 1,\n            y: 1,\n        },\n        rowPixelSpacing: 1,\n        columnPixelSpacing: 1,\n        presentationSizeMode: 'NONE',\n    };\n}\nexport default function createViewport() {\n    const displayedArea = createDefaultDisplayedArea();\n    const initialDefaultViewport = {\n        scale: 1,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi: {\n            windowWidth: undefined,\n            windowCenter: undefined,\n            voiLUTFunction: VOILUTFunctionType.LINEAR,\n        },\n        invert: false,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: undefined,\n        voiLUT: undefined,\n        colormap: undefined,\n        labelmap: false,\n        displayedArea,\n    };\n    return Object.assign({}, initialDefaultViewport, state.viewport);\n}\n","export default function doesImageNeedToBeRendered(enabledElement, image) {\n    const lastRenderedImageId = enabledElement.renderingTools.lastRenderedImageId;\n    const lastRenderedViewport = enabledElement.renderingTools.lastRenderedViewport;\n    return (image.imageId !== lastRenderedImageId ||\n        !lastRenderedViewport ||\n        lastRenderedViewport.windowCenter !==\n            enabledElement.viewport.voi.windowCenter ||\n        lastRenderedViewport.windowWidth !==\n            enabledElement.viewport.voi.windowWidth ||\n        lastRenderedViewport.invert !== enabledElement.viewport.invert ||\n        lastRenderedViewport.rotation !== enabledElement.viewport.rotation ||\n        lastRenderedViewport.hflip !== enabledElement.viewport.hflip ||\n        lastRenderedViewport.vflip !== enabledElement.viewport.vflip ||\n        lastRenderedViewport.modalityLUT !== enabledElement.viewport.modalityLUT ||\n        lastRenderedViewport.voiLUT !== enabledElement.viewport.voiLUT ||\n        lastRenderedViewport.colormap !== enabledElement.viewport.colormap);\n}\n","import getImageFitScale from './getImageFitScale';\nexport default function (enabledElement) {\n    const { image } = enabledElement;\n    enabledElement.viewport.scale = getImageFitScale(enabledElement.canvas, image, enabledElement.viewport.rotation).scaleFactor;\n    enabledElement.viewport.translation.x = 0;\n    enabledElement.viewport.translation.y = 0;\n}\n","import getVOILUT from './getVOILut';\nexport default function generateColorLUT(image, windowWidth, windowCenter, invert, voiLUT) {\n    const maxPixelValue = image.maxPixelValue;\n    const minPixelValue = image.minPixelValue;\n    const offset = Math.min(minPixelValue, 0);\n    if (image.cachedLut === undefined) {\n        const length = maxPixelValue - offset + 1;\n        image.cachedLut = {};\n        image.cachedLut.lutArray = new Uint8ClampedArray(length);\n    }\n    const lut = image.cachedLut.lutArray;\n    const vlutfn = getVOILUT(Array.isArray(windowWidth) ? windowWidth[0] : windowWidth, Array.isArray(windowCenter) ? windowCenter[0] : windowCenter, voiLUT);\n    if (invert) {\n        for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n            lut[storedValue + -offset] = 255 - vlutfn(storedValue);\n        }\n    }\n    else {\n        for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n            lut[storedValue + -offset] = vlutfn(storedValue);\n        }\n    }\n    return lut;\n}\n","import getModalityLut from './getModalityLut';\nimport getVOILUT from './getVOILut';\nexport default function (image, windowWidth, windowCenter, invert, modalityLUT, voiLUT) {\n    const maxPixelValue = image.maxPixelValue;\n    const minPixelValue = image.minPixelValue;\n    const offset = Math.min(minPixelValue, 0);\n    if (image.cachedLut === undefined) {\n        const length = maxPixelValue - offset + 1;\n        image.cachedLut = {};\n        image.cachedLut.lutArray = new Uint8ClampedArray(length);\n    }\n    const lut = image.cachedLut.lutArray;\n    const mlutfn = getModalityLut(image.slope, image.intercept, modalityLUT);\n    const vlutfn = getVOILUT(windowWidth, windowCenter, voiLUT);\n    if (image.isPreScaled) {\n        if (invert) {\n            for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n                lut[storedValue + -offset] = 255 - vlutfn(storedValue);\n            }\n        }\n        else {\n            for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n                lut[storedValue + -offset] = vlutfn(storedValue);\n            }\n        }\n    }\n    else {\n        if (invert) {\n            for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n                lut[storedValue + -offset] = 255 - vlutfn(mlutfn(storedValue));\n            }\n        }\n        else {\n            for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n                lut[storedValue + -offset] = vlutfn(mlutfn(storedValue));\n            }\n        }\n    }\n    return lut;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","import { validateParameterUndefinedOrNull } from './validator';\nimport getImageSize from './getImageSize';\nexport default function (canvas, image, rotation = null) {\n    validateParameterUndefinedOrNull(canvas, 'getImageScale: parameter canvas must not be undefined');\n    validateParameterUndefinedOrNull(image, 'getImageScale: parameter image must not be undefined');\n    const imageSize = getImageSize(image, rotation);\n    const rowPixelSpacing = image.rowPixelSpacing || 1;\n    const columnPixelSpacing = image.columnPixelSpacing || 1;\n    let verticalRatio = 1;\n    let horizontalRatio = 1;\n    if (rowPixelSpacing < columnPixelSpacing) {\n        horizontalRatio = columnPixelSpacing / rowPixelSpacing;\n    }\n    else {\n        verticalRatio = rowPixelSpacing / columnPixelSpacing;\n    }\n    const verticalScale = canvas.height / imageSize.height / verticalRatio;\n    const horizontalScale = canvas.width / imageSize.width / horizontalRatio;\n    return {\n        verticalScale,\n        horizontalScale,\n        scaleFactor: Math.min(horizontalScale, verticalScale),\n    };\n}\n","import { validateParameterUndefinedOrNull } from './validator';\nfunction isRotated(rotation) {\n    return !(rotation === null ||\n        rotation === undefined ||\n        rotation === 0 ||\n        rotation === 180);\n}\nexport default function (image, rotation = null) {\n    validateParameterUndefinedOrNull(image, 'getImageSize: parameter image must not be undefined');\n    validateParameterUndefinedOrNull(image.width, 'getImageSize: parameter image must have width');\n    validateParameterUndefinedOrNull(image.height, 'getImageSize: parameter image must have height');\n    if (isRotated(rotation)) {\n        return {\n            height: image.width,\n            width: image.height,\n        };\n    }\n    return {\n        width: image.width,\n        height: image.height,\n    };\n}\n","import computeAutoVoi from './computeAutoVoi';\nimport lutMatches from './lutMatches';\nimport generateLut from './generateLut';\nexport default function (image, viewport, invalidated) {\n    if (image.cachedLut !== undefined &&\n        image.cachedLut.windowCenter === viewport.voi.windowCenter &&\n        image.cachedLut.windowWidth === viewport.voi.windowWidth &&\n        lutMatches(image.cachedLut.modalityLUT, viewport.modalityLUT) &&\n        lutMatches(image.cachedLut.voiLUT, viewport.voiLUT) &&\n        image.cachedLut.invert === viewport.invert &&\n        !invalidated) {\n        return image.cachedLut.lutArray;\n    }\n    computeAutoVoi(viewport, image);\n    generateLut(image, viewport.voi.windowWidth, viewport.voi.windowCenter, viewport.invert, viewport.modalityLUT, viewport.voiLUT);\n    image.cachedLut.windowWidth = viewport.voi.windowWidth;\n    image.cachedLut.windowCenter = viewport.voi.windowCenter;\n    image.cachedLut.invert = viewport.invert;\n    image.cachedLut.voiLUT = viewport.voiLUT;\n    image.cachedLut.modalityLUT = viewport.modalityLUT;\n    return image.cachedLut.lutArray;\n}\n","function generateLinearModalityLUT(slope, intercept) {\n    return (storedPixelValue) => storedPixelValue * slope + intercept;\n}\nfunction generateNonLinearModalityLUT(modalityLUT) {\n    const minValue = modalityLUT.lut[0];\n    const maxValue = modalityLUT.lut[modalityLUT.lut.length - 1];\n    const maxValueMapped = modalityLUT.firstValueMapped + modalityLUT.lut.length;\n    return (storedPixelValue) => {\n        if (storedPixelValue < modalityLUT.firstValueMapped) {\n            return minValue;\n        }\n        else if (storedPixelValue >= maxValueMapped) {\n            return maxValue;\n        }\n        return modalityLUT.lut[storedPixelValue];\n    };\n}\nexport default function (slope, intercept, modalityLUT) {\n    if (modalityLUT) {\n        return generateNonLinearModalityLUT(modalityLUT);\n    }\n    return generateLinearModalityLUT(slope, intercept);\n}\n","import calculateTransform from './calculateTransform';\nexport default function (enabledElement) {\n    return calculateTransform(enabledElement);\n}\n","function generateLinearVOILUT(windowWidth, windowCenter) {\n    return function (modalityLutValue) {\n        const value = ((modalityLutValue - (windowCenter - 0.5)) / (windowWidth - 1) + 0.5) *\n            255.0;\n        return Math.min(Math.max(value, 0), 255);\n    };\n}\nfunction generateNonLinearVOILUT(voiLUT) {\n    const bitsPerEntry = Math.max(...voiLUT.lut).toString(2).length;\n    const shift = bitsPerEntry - 8;\n    const minValue = voiLUT.lut[0] >> shift;\n    const maxValue = voiLUT.lut[voiLUT.lut.length - 1] >> shift;\n    const maxValueMapped = voiLUT.firstValueMapped + voiLUT.lut.length - 1;\n    return function (modalityLutValue) {\n        if (modalityLutValue < voiLUT.firstValueMapped) {\n            return minValue;\n        }\n        else if (modalityLutValue >= maxValueMapped) {\n            return maxValue;\n        }\n        return voiLUT.lut[modalityLutValue - voiLUT.firstValueMapped] >> shift;\n    };\n}\nexport default function (windowWidth, windowCenter, voiLUT) {\n    if (voiLUT) {\n        return generateNonLinearVOILUT(voiLUT);\n    }\n    return generateLinearVOILUT(windowWidth, windowCenter);\n}\n","export default function (enabledElement, image) {\n    const renderCanvas = enabledElement.renderingTools.renderCanvas;\n    renderCanvas.width = image.width;\n    renderCanvas.height = image.height;\n    const canvasContext = renderCanvas.getContext('2d');\n    canvasContext.fillStyle = 'white';\n    canvasContext.fillRect(0, 0, renderCanvas.width, renderCanvas.height);\n    const renderCanvasData = canvasContext.getImageData(0, 0, image.width, image.height);\n    enabledElement.renderingTools.renderCanvasContext = canvasContext;\n    enabledElement.renderingTools.renderCanvasData = renderCanvasData;\n}\n","export default function lutMatches(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    return a.id === b.id;\n}\n","export default function () {\n    if (window.performance) {\n        return performance.now();\n    }\n    return Date.now();\n}\n","import getTransform from './getTransform';\nexport default function (enabledElement, pt) {\n    const transform = getTransform(enabledElement);\n    return transform.transformPoint(pt);\n}\n","import now from './now';\nimport generateColorLUT from './generateColorLUT';\nimport storedColorPixelDataToCanvasImageData from './storedColorPixelDataToCanvasImageData';\nimport storedRGBAPixelDataToCanvasImageData from './storedRGBAPixelDataToCanvasImageData';\nimport setToPixelCoordinateSystem from './setToPixelCoordinateSystem';\nimport doesImageNeedToBeRendered from './doesImageNeedToBeRendered';\nimport initializeRenderCanvas from './initializeRenderCanvas';\nimport saveLastRendered from './saveLastRendered';\nimport { createCanvas } from '../../getOrCreateCanvas';\nfunction getLut(image, viewport) {\n    if (image.cachedLut !== undefined &&\n        image.cachedLut.windowCenter === viewport.voi.windowCenter &&\n        image.cachedLut.windowWidth === viewport.voi.windowWidth &&\n        image.cachedLut.invert === viewport.invert) {\n        return image.cachedLut.lutArray;\n    }\n    generateColorLUT(image, viewport.voi.windowWidth, viewport.voi.windowCenter, viewport.invert);\n    image.cachedLut.windowWidth = viewport.voi.windowWidth;\n    image.cachedLut.windowCenter = viewport.voi.windowCenter;\n    image.cachedLut.invert = viewport.invert;\n    return image.cachedLut.lutArray;\n}\nfunction getRenderCanvas(enabledElement, image, invalidated) {\n    const canvasWasColor = enabledElement.renderingTools.lastRenderedIsColor;\n    if (!enabledElement.renderingTools.renderCanvas || !canvasWasColor) {\n        enabledElement.renderingTools.renderCanvas = createCanvas(null, image.width, image.height);\n    }\n    const renderCanvas = enabledElement.renderingTools.renderCanvas;\n    const { windowWidth, windowCenter } = enabledElement.viewport.voi;\n    if ((windowWidth === 256 || windowWidth === 255) &&\n        (windowCenter === 128 || windowCenter === 127) &&\n        !enabledElement.viewport.invert &&\n        image.getCanvas &&\n        image.getCanvas()) {\n        return image.getCanvas();\n    }\n    if (!doesImageNeedToBeRendered(enabledElement, image) && !invalidated) {\n        return renderCanvas;\n    }\n    if (!enabledElement.renderingTools.renderCanvasContext ||\n        renderCanvas.width !== image.width ||\n        renderCanvas.height !== image.height) {\n        initializeRenderCanvas(enabledElement, image);\n    }\n    let start = now();\n    const colorLUT = getLut(image, enabledElement.viewport);\n    image.stats = image.stats || {};\n    image.stats.lastLutGenerateTime = now() - start;\n    const renderCanvasData = enabledElement.renderingTools.renderCanvasData;\n    const renderCanvasContext = enabledElement.renderingTools.renderCanvasContext;\n    if (image.rgba) {\n        storedRGBAPixelDataToCanvasImageData(image, colorLUT, renderCanvasData.data);\n    }\n    else {\n        storedColorPixelDataToCanvasImageData(image, colorLUT, renderCanvasData.data);\n    }\n    start = now();\n    renderCanvasContext.putImageData(renderCanvasData, 0, 0);\n    image.stats.lastPutImageDataTime = now() - start;\n    return renderCanvas;\n}\nexport function renderColorImage(enabledElement, invalidated) {\n    if (enabledElement === undefined) {\n        throw new Error('renderColorImage: enabledElement parameter must not be undefined');\n    }\n    const image = enabledElement.image;\n    if (image === undefined) {\n        throw new Error('renderColorImage: image must be loaded before it can be drawn');\n    }\n    const context = enabledElement.canvas.getContext('2d');\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.fillStyle = 'black';\n    context.fillRect(0, 0, enabledElement.canvas.width, enabledElement.canvas.height);\n    context.imageSmoothingEnabled = !enabledElement.viewport.pixelReplication;\n    setToPixelCoordinateSystem(enabledElement, context);\n    const renderCanvas = getRenderCanvas(enabledElement, image, invalidated);\n    const sx = enabledElement.viewport.displayedArea.tlhc.x - 1;\n    const sy = enabledElement.viewport.displayedArea.tlhc.y - 1;\n    const width = enabledElement.viewport.displayedArea.brhc.x - sx;\n    const height = enabledElement.viewport.displayedArea.brhc.y - sy;\n    context.drawImage(renderCanvas, sx, sy, width, height, 0, 0, width, height);\n    enabledElement.renderingTools = saveLastRendered(enabledElement);\n}\n","import storedPixelDataToCanvasImageData from './storedPixelDataToCanvasImageData';\nimport storedPixelDataToCanvasImageDataPET from './storedPixelDataToCanvasImageDataPET';\nimport storedPixelDataToCanvasImageDataRGBA from './storedPixelDataToCanvasImageDataRGBA';\nimport setToPixelCoordinateSystem from './setToPixelCoordinateSystem';\nimport now from './now';\nimport getLut from './getLut';\nimport doesImageNeedToBeRendered from './doesImageNeedToBeRendered';\nimport initializeRenderCanvas from './initializeRenderCanvas';\nimport saveLastRendered from './saveLastRendered';\nimport { createCanvas } from '../../getOrCreateCanvas';\nfunction getRenderCanvas(enabledElement, image, invalidated, useAlphaChannel = true) {\n    const canvasWasColor = enabledElement.renderingTools.lastRenderedIsColor;\n    if (!enabledElement.renderingTools.renderCanvas || canvasWasColor) {\n        enabledElement.renderingTools.renderCanvas = createCanvas(null, image.width, image.height);\n        initializeRenderCanvas(enabledElement, image);\n    }\n    const renderCanvas = enabledElement.renderingTools.renderCanvas;\n    if (!doesImageNeedToBeRendered(enabledElement, image) && !invalidated) {\n        return renderCanvas;\n    }\n    if (renderCanvas.width !== image.width ||\n        renderCanvas.height !== image.height) {\n        initializeRenderCanvas(enabledElement, image);\n    }\n    image.stats = image.stats || {};\n    const renderCanvasData = enabledElement.renderingTools.renderCanvasData;\n    const renderCanvasContext = enabledElement.renderingTools.renderCanvasContext;\n    let start = now();\n    image.stats.lastLutGenerateTime = now() - start;\n    const { viewport } = enabledElement;\n    if (viewport.modality === 'PT' && image.isPreScaled) {\n        const { windowWidth, windowCenter } = viewport.voi;\n        const minimum = windowCenter - windowWidth / 2;\n        const maximum = windowCenter + windowWidth / 2;\n        const range = maximum - minimum;\n        const collectedMultiplierTerms = 255.0 / range;\n        let petVOILutFunction;\n        if (viewport.invert) {\n            petVOILutFunction = (value) => 255 - (value - minimum) * collectedMultiplierTerms;\n        }\n        else {\n            petVOILutFunction = (value) => (value - minimum) * collectedMultiplierTerms;\n        }\n        storedPixelDataToCanvasImageDataPET(image, petVOILutFunction, renderCanvasData.data);\n    }\n    else {\n        const lut = getLut(image, viewport, invalidated);\n        if (useAlphaChannel) {\n            storedPixelDataToCanvasImageData(image, lut, renderCanvasData.data);\n        }\n        else {\n            storedPixelDataToCanvasImageDataRGBA(image, lut, renderCanvasData.data);\n        }\n    }\n    start = now();\n    renderCanvasContext.putImageData(renderCanvasData, 0, 0);\n    image.stats.lastPutImageDataTime = now() - start;\n    return renderCanvas;\n}\nexport function renderGrayscaleImage(enabledElement, invalidated) {\n    if (enabledElement === undefined) {\n        throw new Error('drawImage: enabledElement parameter must not be undefined');\n    }\n    const image = enabledElement.image;\n    if (image === undefined) {\n        throw new Error('drawImage: image must be loaded before it can be drawn');\n    }\n    const context = enabledElement.canvas.getContext('2d');\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.fillStyle = 'black';\n    context.fillRect(0, 0, enabledElement.canvas.width, enabledElement.canvas.height);\n    context.imageSmoothingEnabled = !enabledElement.viewport.pixelReplication;\n    setToPixelCoordinateSystem(enabledElement, context);\n    const renderCanvas = getRenderCanvas(enabledElement, image, invalidated);\n    const sx = enabledElement.viewport.displayedArea.tlhc.x - 1;\n    const sy = enabledElement.viewport.displayedArea.tlhc.y - 1;\n    const width = enabledElement.viewport.displayedArea.brhc.x - sx;\n    const height = enabledElement.viewport.displayedArea.brhc.y - sy;\n    context.drawImage(renderCanvas, sx, sy, width, height, 0, 0, width, height);\n    enabledElement.renderingTools = saveLastRendered(enabledElement);\n}\n","import setToPixelCoordinateSystem from './setToPixelCoordinateSystem';\nimport now from './now';\nimport initializeRenderCanvas from './initializeRenderCanvas';\nimport getLut from './getLut';\nimport saveLastRendered from './saveLastRendered';\nimport doesImageNeedToBeRendered from './doesImageNeedToBeRendered';\nimport storedPixelDataToCanvasImageDataPseudocolorLUT from './storedPixelDataToCanvasImageDataPseudocolorLUT';\nimport storedPixelDataToCanvasImageDataPseudocolorLUTPET from './storedPixelDataToCanvasImageDataPseudocolorLUTPET';\nimport * as colors from '../colors/index';\nimport { clamp } from '../../../../utilities/clamp';\nimport { createCanvas } from '../../getOrCreateCanvas';\nfunction getRenderCanvas(enabledElement, image, invalidated) {\n    if (!enabledElement.renderingTools.renderCanvas) {\n        enabledElement.renderingTools.renderCanvas = createCanvas(null, image.width, image.height);\n    }\n    const renderCanvas = enabledElement.renderingTools.renderCanvas;\n    let colormap = enabledElement.viewport.colormap || enabledElement.options.colormap;\n    if (enabledElement.options && enabledElement.options.colormap) {\n        console.warn('enabledElement.options.colormap is deprecated. Use enabledElement.viewport.colormap instead');\n    }\n    if (colormap && typeof colormap === 'string') {\n        colormap = colors.getColormap(colormap);\n    }\n    if (!colormap) {\n        throw new Error('renderPseudoColorImage: colormap not found.');\n    }\n    const colormapId = colormap.getId();\n    if (!doesImageNeedToBeRendered(enabledElement, image) &&\n        !invalidated &&\n        enabledElement.renderingTools.colormapId === colormapId) {\n        return renderCanvas;\n    }\n    if (!enabledElement.renderingTools.renderCanvasContext ||\n        renderCanvas.width !== image.width ||\n        renderCanvas.height !== image.height) {\n        initializeRenderCanvas(enabledElement, image);\n    }\n    let start = now();\n    if (!enabledElement.renderingTools.colorLUT ||\n        invalidated ||\n        enabledElement.renderingTools.colormapId !== colormapId) {\n        colormap.setNumberOfColors(256);\n        enabledElement.renderingTools.colorLUT = colormap.createLookupTable();\n        enabledElement.renderingTools.colormapId = colormapId;\n    }\n    const renderCanvasData = enabledElement.renderingTools.renderCanvasData;\n    const renderCanvasContext = enabledElement.renderingTools.renderCanvasContext;\n    const { viewport } = enabledElement;\n    const colorLUT = enabledElement.renderingTools.colorLUT;\n    if (viewport.modality === 'PT') {\n        const { windowWidth, windowCenter } = viewport.voi;\n        const minimum = windowCenter - windowWidth / 2;\n        const maximum = windowCenter + windowWidth / 2;\n        const range = maximum - minimum;\n        const collectedMultiplierTerms = 255.0 / range;\n        let petVOILutFunction;\n        if (viewport.invert) {\n            petVOILutFunction = (value) => {\n                return clamp(Math.floor(255 - (value - minimum) * collectedMultiplierTerms), 0, 255);\n            };\n        }\n        else {\n            petVOILutFunction = (value) => {\n                return clamp(Math.floor((value - minimum) * collectedMultiplierTerms), 0, 255);\n            };\n        }\n        storedPixelDataToCanvasImageDataPseudocolorLUTPET(image, petVOILutFunction, colorLUT, renderCanvasData.data);\n    }\n    else {\n        const lut = getLut(image, enabledElement.viewport, invalidated);\n        image.stats = image.stats || {};\n        image.stats.lastLutGenerateTime = now() - start;\n        storedPixelDataToCanvasImageDataPseudocolorLUT(image, lut, colorLUT, renderCanvasData.data);\n    }\n    start = now();\n    renderCanvasContext.putImageData(renderCanvasData, 0, 0);\n    image.stats.lastPutImageDataTime = now() - start;\n    return renderCanvas;\n}\nexport function renderPseudoColorImage(enabledElement, invalidated) {\n    if (enabledElement === undefined) {\n        throw new Error('drawImage: enabledElement parameter must not be undefined');\n    }\n    const image = enabledElement.image;\n    if (image === undefined) {\n        throw new Error('drawImage: image must be loaded before it can be drawn');\n    }\n    const context = enabledElement.canvas.getContext('2d');\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.fillStyle = 'black';\n    context.fillRect(0, 0, enabledElement.canvas.width, enabledElement.canvas.height);\n    context.imageSmoothingEnabled = !enabledElement.viewport.pixelReplication;\n    setToPixelCoordinateSystem(enabledElement, context);\n    const renderCanvas = getRenderCanvas(enabledElement, image, invalidated);\n    const sx = enabledElement.viewport.displayedArea.tlhc.x - 1;\n    const sy = enabledElement.viewport.displayedArea.tlhc.y - 1;\n    const width = enabledElement.viewport.displayedArea.brhc.x - sx;\n    const height = enabledElement.viewport.displayedArea.brhc.y - sy;\n    context.drawImage(renderCanvas, sx, sy, width, height, 0, 0, width, height);\n    enabledElement.renderingTools = saveLastRendered(enabledElement);\n}\n","import getImageFitScale from './getImageFitScale';\nexport default function (enabledElement, resetPan = true, resetZoom = true) {\n    const { canvas, image, viewport } = enabledElement;\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    viewport.vflip = false;\n    viewport.hflip = false;\n    if (resetPan) {\n        viewport.translation.x = 0;\n        viewport.translation.y = 0;\n    }\n    if (resetZoom) {\n        viewport.displayedArea.tlhc.x = 1;\n        viewport.displayedArea.tlhc.y = 1;\n        viewport.displayedArea.brhc.x = image.columns;\n        viewport.displayedArea.brhc.y = image.rows;\n        viewport.scale = scale;\n    }\n}\n","import fitToWindow from './fitToWindow';\nimport getImageSize from './getImageSize';\nfunction setCanvasSize(enabledElement) {\n    const { canvas } = enabledElement;\n    const { clientWidth, clientHeight } = canvas;\n    if (canvas.width !== clientWidth || canvas.height !== clientHeight) {\n        canvas.width = clientWidth;\n        canvas.height = clientHeight;\n    }\n}\nfunction wasFitToWindow(enabledElement, oldCanvasWidth, oldCanvasHeight) {\n    const scale = enabledElement.viewport.scale;\n    const imageSize = getImageSize(enabledElement.image, enabledElement.viewport.rotation);\n    const imageWidth = Math.round(imageSize.width * scale);\n    const imageHeight = Math.round(imageSize.height * scale);\n    const x = enabledElement.viewport.translation.x;\n    const y = enabledElement.viewport.translation.y;\n    return ((imageWidth === oldCanvasWidth && imageHeight <= oldCanvasHeight) ||\n        (imageWidth <= oldCanvasWidth &&\n            imageHeight === oldCanvasHeight &&\n            x === 0 &&\n            y === 0));\n}\nfunction relativeRescale(enabledElement, oldCanvasWidth, oldCanvasHeight) {\n    const scale = enabledElement.viewport.scale;\n    const canvasWidth = enabledElement.canvas.width;\n    const canvasHeight = enabledElement.canvas.height;\n    const relWidthChange = canvasWidth / oldCanvasWidth;\n    const relHeightChange = canvasHeight / oldCanvasHeight;\n    const relChange = Math.sqrt(relWidthChange * relHeightChange);\n    enabledElement.viewport.scale = relChange * scale;\n}\nexport default function (enabledElement, forceFitToWindow = false) {\n    const oldCanvasWidth = enabledElement.canvas.width;\n    const oldCanvasHeight = enabledElement.canvas.height;\n    setCanvasSize(enabledElement);\n    if (enabledElement.image === undefined) {\n        return;\n    }\n    if (forceFitToWindow ||\n        wasFitToWindow(enabledElement, oldCanvasWidth, oldCanvasHeight)) {\n        fitToWindow(enabledElement);\n    }\n    else {\n        relativeRescale(enabledElement, oldCanvasWidth, oldCanvasHeight);\n    }\n}\n","export default function (enabledElement) {\n    const imageId = enabledElement.image.imageId;\n    const viewport = enabledElement.viewport;\n    const isColor = enabledElement.image.color;\n    enabledElement.renderingTools.lastRenderedImageId = imageId;\n    enabledElement.renderingTools.lastRenderedIsColor = isColor;\n    enabledElement.renderingTools.lastRenderedViewport = {\n        windowCenter: viewport.voi.windowCenter,\n        windowWidth: viewport.voi.windowWidth,\n        invert: viewport.invert,\n        rotation: viewport.rotation,\n        hflip: viewport.hflip,\n        vflip: viewport.vflip,\n        modalityLUT: viewport.modalityLUT,\n        voiLUT: viewport.voiLUT,\n        colormap: viewport.colormap,\n    };\n    return enabledElement.renderingTools;\n}\n","const state = {\n    viewport: {},\n};\nexport default function (viewport) {\n    state.viewport = viewport || {};\n}\nexport { state };\n","import calculateTransform from './calculateTransform';\nexport default function (enabledElement, context, scale) {\n    if (enabledElement === undefined) {\n        throw new Error('setToPixelCoordinateSystem: parameter enabledElement must not be undefined');\n    }\n    if (context === undefined) {\n        throw new Error('setToPixelCoordinateSystem: parameter context must not be undefined');\n    }\n    const transform = calculateTransform(enabledElement, scale);\n    const m = transform.getMatrix();\n    context.setTransform(m[0], m[1], m[2], m[3], m[4], m[5]);\n}\n","import now from './now';\nexport default function (image, lut, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.voxelManager.getScalarData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const minPixelValue = image.minPixelValue;\n    let canvasImageDataIndex = 0;\n    let storedPixelDataIndex = 0;\n    const numPixels = pixelData.length;\n    start = now();\n    if (minPixelValue < 0) {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] = 255;\n        }\n    }\n    else {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] = 255;\n        }\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\n","import now from './now';\nexport default function (image, lut, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.voxelManager.getScalarData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const numPixels = pixelData.length;\n    const minPixelValue = image.minPixelValue;\n    let canvasImageDataIndex = 3;\n    let storedPixelDataIndex = 0;\n    start = now();\n    if (pixelData instanceof Int16Array) {\n        if (minPixelValue < 0) {\n            while (storedPixelDataIndex < numPixels) {\n                canvasImageDataData[canvasImageDataIndex] =\n                    lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n                canvasImageDataIndex += 4;\n            }\n        }\n        else {\n            while (storedPixelDataIndex < numPixels) {\n                canvasImageDataData[canvasImageDataIndex] =\n                    lut[pixelData[storedPixelDataIndex++]];\n                canvasImageDataIndex += 4;\n            }\n        }\n    }\n    else if (pixelData instanceof Uint16Array) {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataIndex += 4;\n        }\n    }\n    else if (minPixelValue < 0) {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataIndex += 4;\n        }\n    }\n    else {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataIndex += 4;\n        }\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\n","import now from './now';\nexport default function (image, lutFunction, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.voxelManager.getScalarData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const numPixels = pixelData.length;\n    let canvasImageDataIndex = 3;\n    let storedPixelDataIndex = 0;\n    start = now();\n    while (storedPixelDataIndex < numPixels) {\n        canvasImageDataData[canvasImageDataIndex] = lutFunction(pixelData[storedPixelDataIndex++]);\n        canvasImageDataIndex += 4;\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\n","import * as colors from '../colors/index';\nimport now from './now';\nfunction storedPixelDataToCanvasImageDataPseudocolorLUT(image, grayscaleLut, colorLUT, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.voxelManager.getScalarData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const numPixels = pixelData.length;\n    const minPixelValue = image.minPixelValue;\n    let canvasImageDataIndex = 0;\n    let storedPixelDataIndex = 0;\n    let grayscale;\n    let rgba;\n    let clut;\n    start = now();\n    if (colorLUT instanceof colors.LookupTable) {\n        clut = colorLUT.Table;\n    }\n    else {\n        clut = colorLUT;\n    }\n    if (minPixelValue < 0) {\n        while (storedPixelDataIndex < numPixels) {\n            grayscale =\n                grayscaleLut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            rgba = clut[grayscale];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[0];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[1];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[2];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[3];\n        }\n    }\n    else {\n        while (storedPixelDataIndex < numPixels) {\n            grayscale = grayscaleLut[pixelData[storedPixelDataIndex++]];\n            rgba = clut[grayscale];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[0];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[1];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[2];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[3];\n        }\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\nexport default storedPixelDataToCanvasImageDataPseudocolorLUT;\n","import * as colors from '../colors/index';\nimport now from './now';\nfunction storedPixelDataToCanvasImageDataPseudocolorLUTPET(image, lutFunction, colorLUT, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.voxelManager.getScalarData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const numPixels = pixelData.length;\n    const minPixelValue = image.minPixelValue;\n    let canvasImageDataIndex = 0;\n    let storedPixelDataIndex = 0;\n    let grayscale;\n    let rgba;\n    let clut;\n    start = now();\n    if (colorLUT instanceof colors.LookupTable) {\n        clut = colorLUT.Table;\n    }\n    else {\n        clut = colorLUT;\n    }\n    if (minPixelValue < 0) {\n        while (storedPixelDataIndex < numPixels) {\n            grayscale = lutFunction(pixelData[storedPixelDataIndex++] + -minPixelValue);\n            rgba = clut[grayscale];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[0];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[1];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[2];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[3];\n        }\n    }\n    else {\n        while (storedPixelDataIndex < numPixels) {\n            grayscale = lutFunction(pixelData[storedPixelDataIndex++]);\n            rgba = clut[grayscale];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[0];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[1];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[2];\n            canvasImageDataData[canvasImageDataIndex++] = rgba[3];\n        }\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\nexport default storedPixelDataToCanvasImageDataPseudocolorLUTPET;\n","import now from './now';\nexport default function (image, lut, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.voxelManager.getScalarData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const numPixels = pixelData.length;\n    const minPixelValue = image.minPixelValue;\n    let canvasImageDataIndex = 0;\n    let storedPixelDataIndex = 0;\n    let pixelValue;\n    start = now();\n    if (pixelData instanceof Int16Array) {\n        if (minPixelValue < 0) {\n            while (storedPixelDataIndex < numPixels) {\n                pixelValue = lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n                canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n                canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n                canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n                canvasImageDataData[canvasImageDataIndex++] = 255;\n            }\n        }\n        else {\n            while (storedPixelDataIndex < numPixels) {\n                pixelValue = lut[pixelData[storedPixelDataIndex++]];\n                canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n                canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n                canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n                canvasImageDataData[canvasImageDataIndex++] = 255;\n            }\n        }\n    }\n    else if (pixelData instanceof Uint16Array) {\n        while (storedPixelDataIndex < numPixels) {\n            pixelValue = lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = 255;\n        }\n    }\n    else if (minPixelValue < 0) {\n        while (storedPixelDataIndex < numPixels) {\n            pixelValue = lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = 255;\n        }\n    }\n    else {\n        while (storedPixelDataIndex < numPixels) {\n            pixelValue = lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = pixelValue;\n            canvasImageDataData[canvasImageDataIndex++] = 255;\n        }\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\n","import now from './now';\nexport default function (image, lut, canvasImageDataData) {\n    let start = now();\n    const pixelData = image.getPixelData();\n    image.stats.lastGetPixelDataTime = now() - start;\n    const minPixelValue = image.minPixelValue;\n    let canvasImageDataIndex = 0;\n    let storedPixelDataIndex = 0;\n    const numPixels = pixelData.length;\n    start = now();\n    if (minPixelValue < 0) {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n            canvasImageDataData[canvasImageDataIndex++] =\n                pixelData[storedPixelDataIndex++];\n        }\n    }\n    else {\n        while (storedPixelDataIndex < numPixels) {\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] =\n                lut[pixelData[storedPixelDataIndex++]];\n            canvasImageDataData[canvasImageDataIndex++] =\n                pixelData[storedPixelDataIndex++];\n        }\n    }\n    image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\n","export class Transform {\n    constructor() {\n        this.reset();\n    }\n    getMatrix() {\n        return this.m;\n    }\n    reset() {\n        this.m = [1, 0, 0, 1, 0, 0];\n    }\n    clone() {\n        const transform = new Transform();\n        transform.m[0] = this.m[0];\n        transform.m[1] = this.m[1];\n        transform.m[2] = this.m[2];\n        transform.m[3] = this.m[3];\n        transform.m[4] = this.m[4];\n        transform.m[5] = this.m[5];\n        return transform;\n    }\n    multiply(matrix) {\n        const m11 = this.m[0] * matrix[0] + this.m[2] * matrix[1];\n        const m12 = this.m[1] * matrix[0] + this.m[3] * matrix[1];\n        const m21 = this.m[0] * matrix[2] + this.m[2] * matrix[3];\n        const m22 = this.m[1] * matrix[2] + this.m[3] * matrix[3];\n        const dx = this.m[0] * matrix[4] + this.m[2] * matrix[5] + this.m[4];\n        const dy = this.m[1] * matrix[4] + this.m[3] * matrix[5] + this.m[5];\n        this.m[0] = m11;\n        this.m[1] = m12;\n        this.m[2] = m21;\n        this.m[3] = m22;\n        this.m[4] = dx;\n        this.m[5] = dy;\n    }\n    invert() {\n        const d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);\n        const m0 = this.m[3] * d;\n        const m1 = -this.m[1] * d;\n        const m2 = -this.m[2] * d;\n        const m3 = this.m[0] * d;\n        const m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);\n        const m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);\n        this.m[0] = m0;\n        this.m[1] = m1;\n        this.m[2] = m2;\n        this.m[3] = m3;\n        this.m[4] = m4;\n        this.m[5] = m5;\n    }\n    rotate(rad) {\n        const c = Math.cos(rad);\n        const s = Math.sin(rad);\n        const m11 = this.m[0] * c + this.m[2] * s;\n        const m12 = this.m[1] * c + this.m[3] * s;\n        const m21 = this.m[0] * -s + this.m[2] * c;\n        const m22 = this.m[1] * -s + this.m[3] * c;\n        this.m[0] = m11;\n        this.m[1] = m12;\n        this.m[2] = m21;\n        this.m[3] = m22;\n    }\n    translate(x, y) {\n        this.m[4] += this.m[0] * x + this.m[2] * y;\n        this.m[5] += this.m[1] * x + this.m[3] * y;\n    }\n    scale(sx, sy) {\n        this.m[0] *= sx;\n        this.m[1] *= sx;\n        this.m[2] *= sy;\n        this.m[3] *= sy;\n    }\n    transformPoint(point) {\n        const x = point[0];\n        const y = point[1];\n        return [\n            x * this.m[0] + y * this.m[2] + this.m[4],\n            x * this.m[1] + y * this.m[3] + this.m[5],\n        ];\n    }\n}\n","export function validateParameterUndefined(checkParam, errorMsg) {\n    if (checkParam === undefined) {\n        throw new Error(errorMsg);\n    }\n}\nexport function validateParameterUndefinedOrNull(checkParam, errorMsg) {\n    if (checkParam === undefined || checkParam === null) {\n        throw new Error(errorMsg);\n    }\n}\n","import vtkVolume from '@kitware/vtk.js/Rendering/Core/Volume';\nimport { loadVolume } from '../../loaders/volumeLoader';\nimport createVolumeMapper from './createVolumeMapper';\nimport triggerEvent from '../../utilities/triggerEvent';\nimport { Events } from '../../enums';\nimport setDefaultVolumeVOI from './setDefaultVolumeVOI';\nasync function createVolumeActor(props, element, viewportId, suppressEvents = false) {\n    const { volumeId, callback, blendMode } = props;\n    const imageVolume = await loadVolume(volumeId);\n    if (!imageVolume) {\n        throw new Error(`imageVolume with id: ${imageVolume.volumeId} does not exist`);\n    }\n    const { imageData, vtkOpenGLTexture } = imageVolume;\n    const volumeMapper = createVolumeMapper(imageData, vtkOpenGLTexture);\n    if (blendMode) {\n        volumeMapper.setBlendMode(blendMode);\n    }\n    const volumeActor = vtkVolume.newInstance();\n    volumeActor.setMapper(volumeMapper);\n    const { numberOfComponents } = imageData.get('numberOfComponents');\n    const volumeProperty = volumeActor.getProperty();\n    volumeProperty.set({ viewportId: viewportId });\n    if (numberOfComponents === 3) {\n        volumeActor.getProperty().setIndependentComponents(false);\n    }\n    await setDefaultVolumeVOI(volumeActor, imageVolume);\n    if (callback) {\n        callback({ volumeActor, volumeId });\n    }\n    if (!suppressEvents) {\n        triggerVOIModified(element, viewportId, volumeActor, volumeId);\n    }\n    return volumeActor;\n}\nfunction triggerVOIModified(element, viewportId, volumeActor, volumeId) {\n    const voiRange = volumeActor\n        .getProperty()\n        .getRGBTransferFunction(0)\n        .getRange();\n    const voiModifiedEventDetail = {\n        viewportId,\n        range: {\n            lower: voiRange[0],\n            upper: voiRange[1],\n        },\n        volumeId,\n    };\n    triggerEvent(element, Events.VOI_MODIFIED, voiModifiedEventDetail);\n}\nexport default createVolumeActor;\n","import { vtkSharedVolumeMapper } from '../vtkClasses';\nimport { getConfiguration } from '../../init';\nimport vtkVolumeMapper from '@kitware/vtk.js/Rendering/Core/VolumeMapper';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nexport default function createVolumeMapper(imageData, vtkOpenGLTexture) {\n    const volumeMapper = vtkSharedVolumeMapper.newInstance();\n    if (getConfiguration().rendering.preferSizeOverAccuracy) {\n        volumeMapper.setPreferSizeOverAccuracy(true);\n    }\n    volumeMapper.setInputData(imageData);\n    const spacing = imageData.getSpacing();\n    const sampleDistance = (spacing[0] + spacing[1] + spacing[2]) / 6;\n    volumeMapper.setMaximumSamplesPerRay(4000);\n    volumeMapper.setSampleDistance(sampleDistance);\n    volumeMapper.setScalarTexture(vtkOpenGLTexture);\n    return volumeMapper;\n}\nexport function convertMapperToNotSharedMapper(sharedMapper) {\n    const volumeMapper = vtkVolumeMapper.newInstance();\n    volumeMapper.setBlendMode(sharedMapper.getBlendMode());\n    const imageData = sharedMapper.getInputData();\n    const { voxelManager } = imageData.get('voxelManager');\n    const values = voxelManager.getCompleteScalarDataArray();\n    const scalarArray = vtkDataArray.newInstance({\n        name: `Pixels`,\n        values,\n    });\n    imageData.getPointData().setScalars(scalarArray);\n    volumeMapper.setInputData(imageData);\n    volumeMapper.setMaximumSamplesPerRay(sharedMapper.getMaximumSamplesPerRay());\n    volumeMapper.setSampleDistance(sharedMapper.getSampleDistance());\n    return volumeMapper;\n}\n","const VIEWPORT_ELEMENT = 'viewport-element';\nconst CANVAS_CSS_CLASS = 'cornerstone-canvas';\nexport const EPSILON = 1e-4;\nlet canvasCreator;\nexport function createCanvas(element, width = 512, height = 512) {\n    const canvas = canvasCreator\n        ? canvasCreator(width, height)\n        : document.createElement('canvas');\n    if (!element) {\n        return canvas;\n    }\n    canvas.style.position = 'absolute';\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    canvas.style.imageRendering = 'pixelated';\n    canvas.classList.add(CANVAS_CSS_CLASS);\n    element.appendChild(canvas);\n    return canvas;\n}\nexport function createViewportElement(element) {\n    const div = document.createElement('div');\n    div.style.position = 'relative';\n    div.style.width = '100%';\n    div.style.height = '100%';\n    div.style.overflow = 'hidden';\n    div.classList.add(VIEWPORT_ELEMENT);\n    element.appendChild(div);\n    return div;\n}\nexport function setCanvasCreator(canvasCreatorArg) {\n    canvasCreator = canvasCreatorArg;\n}\nexport function getOrCreateCanvas(element) {\n    const canvasSelector = `canvas.${CANVAS_CSS_CLASS}`;\n    const viewportElement = `div.${VIEWPORT_ELEMENT}`;\n    const internalDiv = element.querySelector(viewportElement) || createViewportElement(element);\n    const existingCanvas = internalDiv.querySelector(canvasSelector);\n    if (existingCanvas) {\n        return existingCanvas;\n    }\n    const canvas = createCanvas(internalDiv);\n    const rect = internalDiv.getBoundingClientRect();\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    const width = Math.ceil(rect.width * devicePixelRatio);\n    const height = Math.ceil(rect.height * devicePixelRatio);\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n}\nexport default getOrCreateCanvas;\n","import createVolumeActor from './createVolumeActor';\nimport createVolumeMapper from './createVolumeMapper';\nexport * from './getOrCreateCanvas';\nimport setVolumesForViewports from './setVolumesForViewports';\nimport addVolumesToViewports from './addVolumesToViewports';\nimport volumeNewImageEventDispatcher from './volumeNewImageEventDispatcher';\nimport addImageSlicesToViewports from './addImageSlicesToViewports';\nexport { createVolumeActor, createVolumeMapper, setVolumesForViewports, addVolumesToViewports, addImageSlicesToViewports, volumeNewImageEventDispatcher, };\n","import { loadAndCacheImage } from '../../loaders/imageLoader';\nimport * as metaData from '../../metaData';\nimport * as windowLevel from '../../utilities/windowLevel';\nimport { RequestType } from '../../enums';\nimport cache from '../../cache/cache';\nconst PRIORITY = 0;\nconst REQUEST_TYPE = RequestType.Prefetch;\nasync function setDefaultVolumeVOI(volumeActor, imageVolume) {\n    let voi = getVOIFromMetadata(imageVolume);\n    if (!voi && imageVolume.imageIds.length) {\n        voi = await getVOIFromMiddleSliceMinMax(imageVolume);\n        voi = handlePreScaledVolume(imageVolume, voi);\n    }\n    if ((voi.lower === 0 && voi.upper === 0) ||\n        voi.lower === undefined ||\n        voi.upper === undefined) {\n        return;\n    }\n    volumeActor\n        .getProperty()\n        .getRGBTransferFunction(0)\n        .setMappingRange(voi.lower, voi.upper);\n}\nfunction handlePreScaledVolume(imageVolume, voi) {\n    const imageIds = imageVolume.imageIds;\n    const imageIdIndex = Math.floor(imageIds.length / 2);\n    const imageId = imageIds[imageIdIndex];\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    if (_isCurrentImagePTPrescaled(generalSeriesModule.modality, imageVolume)) {\n        return {\n            lower: 0,\n            upper: 5,\n        };\n    }\n    return voi;\n}\nfunction getVOIFromMetadata(imageVolume) {\n    const { imageIds, metadata } = imageVolume;\n    let voi;\n    if (imageIds?.length) {\n        const imageIdIndex = Math.floor(imageIds.length / 2);\n        const imageId = imageIds[imageIdIndex];\n        const voiLutModule = metaData.get('voiLutModule', imageId);\n        if (voiLutModule && voiLutModule.windowWidth && voiLutModule.windowCenter) {\n            if (voiLutModule?.voiLUTFunction) {\n                voi = {};\n                voi.voiLUTFunction = voiLutModule?.voiLUTFunction;\n            }\n            const { windowWidth, windowCenter } = voiLutModule;\n            const width = Array.isArray(windowWidth) ? windowWidth[0] : windowWidth;\n            const center = Array.isArray(windowCenter)\n                ? windowCenter[0]\n                : windowCenter;\n            if (width !== 0) {\n                voi = { windowWidth: width, windowCenter: center };\n            }\n        }\n    }\n    else {\n        voi = metadata.voiLut[0];\n    }\n    if (voi && (voi.windowWidth !== 0 || voi.windowCenter !== 0)) {\n        const { lower, upper } = windowLevel.toLowHighRange(Number(voi.windowWidth), Number(voi.windowCenter), voi.voiLUTFunction);\n        return { lower, upper };\n    }\n    return undefined;\n}\nasync function getVOIFromMiddleSliceMinMax(imageVolume) {\n    const { imageIds } = imageVolume;\n    const imageIdIndex = Math.floor(imageIds.length / 2);\n    const imageId = imageVolume.imageIds[imageIdIndex];\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope,\n        rescaleIntercept: modalityLutModule.rescaleIntercept,\n        modality,\n    };\n    let scalingParametersToUse;\n    if (modality === 'PT') {\n        const suvFactor = metaData.get('scalingModule', imageId);\n        if (suvFactor) {\n            scalingParametersToUse = {\n                ...scalingParameters,\n                suvbw: suvFactor.suvbw,\n            };\n        }\n    }\n    const options = {\n        priority: PRIORITY,\n        requestType: REQUEST_TYPE,\n        preScale: {\n            scalingParameters: scalingParametersToUse,\n        },\n    };\n    let image = cache.getImage(imageId);\n    if (!imageVolume.referencedImageIds?.length) {\n        image = await loadAndCacheImage(imageId, { ...options, ignoreCache: true });\n    }\n    let { min, max } = image.voxelManager.getMinMax();\n    if (min?.length > 1) {\n        min = Math.min(...min);\n        max = Math.max(...max);\n    }\n    return {\n        lower: min,\n        upper: max,\n    };\n}\nfunction _isCurrentImagePTPrescaled(modality, imageVolume) {\n    if (modality !== 'PT' || !imageVolume.isPreScaled) {\n        return false;\n    }\n    if (!imageVolume.scaling?.PT.suvbw) {\n        return false;\n    }\n    return true;\n}\nexport default setDefaultVolumeVOI;\n","import BaseVolumeViewport from '../BaseVolumeViewport';\nasync function setVolumesForViewports(renderingEngine, volumeInputs, viewportIds, immediateRender = false, suppressEvents = false) {\n    viewportIds.forEach((viewportId) => {\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            throw new Error(`Viewport with Id ${viewportId} does not exist`);\n        }\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('setVolumesForViewports only supports VolumeViewport and VolumeViewport3D');\n        }\n    });\n    const setVolumePromises = viewportIds.map(async (viewportId) => {\n        const viewport = renderingEngine.getViewport(viewportId);\n        await viewport.setVolumes(volumeInputs, immediateRender, suppressEvents);\n    });\n    await Promise.all(setVolumePromises);\n    return;\n}\nexport default setVolumesForViewports;\n","import StackViewport from '../StackViewport';\nimport VolumeViewport from '../VolumeViewport';\nimport ViewportType from '../../enums/ViewportType';\nimport VolumeViewport3D from '../VolumeViewport3D';\nimport VideoViewport from '../VideoViewport';\nimport WSIViewport from '../WSIViewport';\nconst viewportTypeToViewportClass = {\n    [ViewportType.ORTHOGRAPHIC]: VolumeViewport,\n    [ViewportType.PERSPECTIVE]: VolumeViewport,\n    [ViewportType.STACK]: StackViewport,\n    [ViewportType.VOLUME_3D]: VolumeViewport3D,\n    [ViewportType.VIDEO]: VideoViewport,\n    [ViewportType.WHOLE_SLIDE]: WSIViewport,\n};\nexport default viewportTypeToViewportClass;\n","import viewportTypeToViewportClass from './viewportTypeToViewportClass';\nexport default function viewportTypeUsesCustomRenderingPipeline(viewportType) {\n    return viewportTypeToViewportClass[viewportType].useCustomRenderingPipeline;\n}\n","import getImageSliceDataForVolumeViewport from '../../utilities/getImageSliceDataForVolumeViewport';\nimport triggerEvent from '../../utilities/triggerEvent';\nimport { Events } from '../../enums';\nimport { getRenderingEngine } from '../getRenderingEngine';\nconst state = {};\nexport function resetVolumeNewImageState(viewportId) {\n    if (state[viewportId] !== undefined) {\n        delete state[viewportId];\n    }\n}\nfunction volumeNewImageEventDispatcher(cameraEvent) {\n    const { renderingEngineId, viewportId } = cameraEvent.detail;\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    const viewport = renderingEngine.getViewport(viewportId);\n    if (!('setVolumes' in viewport)) {\n        throw new Error(`volumeNewImageEventDispatcher: viewport does not have setVolumes method`);\n    }\n    if (state[viewport.id] === undefined) {\n        state[viewport.id] = 0;\n    }\n    const sliceData = getImageSliceDataForVolumeViewport(viewport);\n    if (!sliceData) {\n        console.warn(`volumeNewImageEventDispatcher: sliceData is undefined for viewport ${viewport.id}`);\n        return;\n    }\n    const { numberOfSlices, imageIndex } = sliceData;\n    if (state[viewport.id] === imageIndex) {\n        return;\n    }\n    state[viewport.id] = imageIndex;\n    const eventDetail = {\n        imageIndex,\n        viewportId,\n        renderingEngineId,\n        numberOfSlices,\n    };\n    triggerEvent(viewport.element, Events.VOLUME_NEW_IMAGE, eventDetail);\n}\nexport default volumeNewImageEventDispatcher;\n","import RenderingEngine from './RenderingEngine';\nimport getRenderingEngine from './getRenderingEngine';\nimport VolumeViewport from './VolumeViewport';\nimport StackViewport from './StackViewport';\nimport VolumeViewport3D from './VolumeViewport3D';\nexport * from './helpers';\nexport { getRenderingEngine, RenderingEngine, VolumeViewport, VolumeViewport3D, StackViewport, };\nexport default RenderingEngine;\n","const cache = {};\nconst renderingEngineCache = {\n    get: (id) => {\n        return cache[id];\n    },\n    set: (re) => {\n        const renderingEngineId = re.id;\n        cache[renderingEngineId] = re;\n    },\n    delete: (id) => {\n        return delete cache[id];\n    },\n    getAll: () => {\n        const renderingEngineIds = Object.keys(cache);\n        const renderingEngines = renderingEngineIds.map((id) => cache[id]);\n        renderingEngines.sort((a, b) => {\n            if (a.id[0] === '_' && b.id[0] !== '_') {\n                return 1;\n            }\n            else if (a.id[0] !== '_' && b.id[0] === '_') {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return renderingEngines;\n    },\n};\nexport default renderingEngineCache;\n","import vtkOffscreenMultiRenderWindow from './vtkOffscreenMultiRenderWindow';\nimport vtkSharedVolumeMapper from './vtkSharedVolumeMapper';\nimport vtkStreamingOpenGLTexture from './vtkStreamingOpenGLTexture';\nimport vtkSlabCamera from './vtkSlabCamera';\nexport { vtkOffscreenMultiRenderWindow, vtkSharedVolumeMapper, vtkStreamingOpenGLTexture, vtkSlabCamera, };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkStreamingOpenGLRenderWindow from './vtkStreamingOpenGLRenderWindow';\nimport vtkRenderer from '@kitware/vtk.js/Rendering/Core/Renderer';\nimport vtkRenderWindow from '@kitware/vtk.js/Rendering/Core/RenderWindow';\nimport vtkRenderWindowInteractor from '@kitware/vtk.js/Rendering/Core/RenderWindowInteractor';\nimport '@kitware/vtk.js/Common/Core/Points';\nimport '@kitware/vtk.js/Common/Core/DataArray';\nimport '@kitware/vtk.js/Common/DataModel/PolyData';\nimport '@kitware/vtk.js/Rendering/Core/Actor';\nimport '@kitware/vtk.js/Rendering/Core/Mapper';\nfunction vtkOffscreenMultiRenderWindow(publicAPI, model) {\n    const invokeResize = publicAPI.invokeResize;\n    delete publicAPI.invokeResize;\n    model.renderWindow = vtkRenderWindow.newInstance();\n    model.rendererMap = {};\n    model.openGLRenderWindow = vtkStreamingOpenGLRenderWindow.newInstance();\n    model.renderWindow.addView(model.openGLRenderWindow);\n    model.interactor = vtkRenderWindowInteractor.newInstance();\n    model.interactor.setView(model.openGLRenderWindow);\n    model.interactor.initialize();\n    publicAPI.addRenderer = ({ viewport, id, background }) => {\n        const renderer = vtkRenderer.newInstance({\n            viewport,\n            background: background || model.background,\n        });\n        model.renderWindow.addRenderer(renderer);\n        model.rendererMap[id] = renderer;\n    };\n    publicAPI.destroy = () => {\n        const rwi = model.renderWindow.getInteractor();\n        rwi.delete();\n    };\n    publicAPI.removeRenderer = (id) => {\n        const renderer = publicAPI.getRenderer(id);\n        model.renderWindow.removeRenderer(renderer);\n        renderer.delete();\n        delete model.rendererMap[id];\n    };\n    publicAPI.getRenderer = (id) => {\n        return model.rendererMap[id];\n    };\n    publicAPI.getRenderers = () => {\n        const { rendererMap } = model;\n        const renderers = Object.keys(rendererMap).map((id) => {\n            return { id, renderer: rendererMap[id] };\n        });\n        return renderers;\n    };\n    publicAPI.resize = () => {\n        if (model.container) {\n            const { width, height } = model.container;\n            model.openGLRenderWindow.setSize(Math.floor(width), Math.floor(height));\n            invokeResize();\n            model.renderWindow.render();\n        }\n    };\n    publicAPI.setContainer = (el) => {\n        model.container = el;\n        model.openGLRenderWindow.setContainer(model.container);\n    };\n    publicAPI.delete = macro.chain(publicAPI.setContainer, publicAPI.destroy, model.openGLRenderWindow.delete, publicAPI.delete);\n    publicAPI.resize();\n}\nconst DEFAULT_VALUES = {\n    background: [0.0, 0.0, 0.0],\n    container: null,\n};\nexport function extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, DEFAULT_VALUES, initialValues);\n    macro.obj(publicAPI, model);\n    macro.get(publicAPI, model, [\n        'renderWindow',\n        'openGLRenderWindow',\n        'interactor',\n        'container',\n    ]);\n    macro.event(publicAPI, model, 'resize');\n    vtkOffscreenMultiRenderWindow(publicAPI, model);\n}\nexport const newInstance = macro.newInstance(extend);\nexport default { newInstance, extend };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkVolumeMapper from '@kitware/vtk.js/Rendering/Core/VolumeMapper';\nfunction vtkSharedVolumeMapper(publicAPI, model) {\n    model.classHierarchy.push('vtkSharedVolumeMapper');\n    const superDelete = publicAPI.delete;\n    publicAPI.delete = () => {\n        model.scalarTexture = null;\n        superDelete();\n    };\n}\nconst DEFAULT_VALUES = {\n    scalarTexture: null,\n};\nexport function extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, DEFAULT_VALUES, initialValues);\n    vtkVolumeMapper.extend(publicAPI, model, initialValues);\n    macro.setGet(publicAPI, model, ['scalarTexture']);\n    vtkSharedVolumeMapper(publicAPI, model);\n}\nexport const newInstance = macro.newInstance(extend, 'vtkSharedVolumeMapper');\nexport default { newInstance, extend };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkCamera from '@kitware/vtk.js/Rendering/Core/Camera';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { vec3, mat4 } from 'gl-matrix';\nconst DEFAULT_VALUES = {\n    isPerformingCoordinateTransformation: false,\n};\nfunction extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, DEFAULT_VALUES, initialValues);\n    vtkCamera.extend(publicAPI, model, initialValues);\n    macro.setGet(publicAPI, model, ['isPerformingCoordinateTransformation']);\n    vtkSlabCamera(publicAPI, model);\n}\nconst newInstance = macro.newInstance(extend, 'vtkSlabCamera');\nfunction vtkSlabCamera(publicAPI, model) {\n    model.classHierarchy.push('vtkSlabCamera');\n    const tmpMatrix = mat4.identity(new Float64Array(16));\n    const tmpvec1 = new Float64Array(3);\n    publicAPI.getProjectionMatrix = (aspect, nearz, farz) => {\n        const result = mat4.create();\n        if (model.projectionMatrix) {\n            const scale = 1 / model.physicalScale;\n            vec3.set(tmpvec1, scale, scale, scale);\n            mat4.copy(result, model.projectionMatrix);\n            mat4.scale(result, result, tmpvec1);\n            mat4.transpose(result, result);\n            return result;\n        }\n        mat4.identity(tmpMatrix);\n        let cRange0 = model.clippingRange[0];\n        let cRange1 = model.clippingRange[1];\n        if (model.isPerformingCoordinateTransformation) {\n            cRange0 = model.distance;\n            cRange1 = model.distance + 0.1;\n        }\n        const cWidth = cRange1 - cRange0;\n        const cRange = [\n            cRange0 + ((nearz + 1) * cWidth) / 2.0,\n            cRange0 + ((farz + 1) * cWidth) / 2.0,\n        ];\n        if (model.parallelProjection) {\n            const width = model.parallelScale * aspect;\n            const height = model.parallelScale;\n            const xmin = (model.windowCenter[0] - 1.0) * width;\n            const xmax = (model.windowCenter[0] + 1.0) * width;\n            const ymin = (model.windowCenter[1] - 1.0) * height;\n            const ymax = (model.windowCenter[1] + 1.0) * height;\n            mat4.ortho(tmpMatrix, xmin, xmax, ymin, ymax, cRange[0], cRange[1]);\n            mat4.transpose(tmpMatrix, tmpMatrix);\n        }\n        else if (model.useOffAxisProjection) {\n            throw new Error('Off-Axis projection is not supported at this time');\n        }\n        else {\n            const tmp = Math.tan(vtkMath.radiansFromDegrees(model.viewAngle) / 2.0);\n            let width;\n            let height;\n            if (model.useHorizontalViewAngle === true) {\n                width = cRange0 * tmp;\n                height = (cRange0 * tmp) / aspect;\n            }\n            else {\n                width = cRange0 * tmp * aspect;\n                height = cRange0 * tmp;\n            }\n            const xmin = (model.windowCenter[0] - 1.0) * width;\n            const xmax = (model.windowCenter[0] + 1.0) * width;\n            const ymin = (model.windowCenter[1] - 1.0) * height;\n            const ymax = (model.windowCenter[1] + 1.0) * height;\n            const znear = cRange[0];\n            const zfar = cRange[1];\n            tmpMatrix[0] = (2.0 * znear) / (xmax - xmin);\n            tmpMatrix[5] = (2.0 * znear) / (ymax - ymin);\n            tmpMatrix[2] = (xmin + xmax) / (xmax - xmin);\n            tmpMatrix[6] = (ymin + ymax) / (ymax - ymin);\n            tmpMatrix[10] = -(znear + zfar) / (zfar - znear);\n            tmpMatrix[14] = -1.0;\n            tmpMatrix[11] = (-2.0 * znear * zfar) / (zfar - znear);\n            tmpMatrix[15] = 0.0;\n        }\n        mat4.copy(result, tmpMatrix);\n        return result;\n    };\n}\nexport default { newInstance, extend };\nexport { newInstance, extend };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkOpenGLRenderWindow from '@kitware/vtk.js/Rendering/OpenGL/RenderWindow';\nimport vtkStreamingOpenGLViewNodeFactory, { registerOverride, } from './vtkStreamingOpenGLViewNodeFactory';\nfunction vtkStreamingOpenGLRenderWindow(publicAPI, model) {\n    model.classHierarchy.push('vtkStreamingOpenGLRenderWindow');\n}\nexport function extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, initialValues);\n    vtkOpenGLRenderWindow.extend(publicAPI, model, initialValues);\n    model.myFactory = vtkStreamingOpenGLViewNodeFactory.newInstance();\n    registerOverride('vtkRenderWindow', newInstance);\n    vtkStreamingOpenGLRenderWindow(publicAPI, model);\n}\nexport const newInstance = macro.newInstance(extend, 'vtkStreamingOpenGLRenderWindow');\nexport default { newInstance, extend };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkOpenGLTexture from '@kitware/vtk.js/Rendering/OpenGL/Texture';\nimport cache from '../../cache/cache';\nimport { getConstructorFromType } from '../../utilities/getBufferConfiguration';\nfunction convertDataType(data, targetDataType) {\n    const Constructor = getConstructorFromType(targetDataType);\n    const convertedData = new Constructor(data.length);\n    convertedData.set(data);\n    return convertedData;\n}\nfunction vtkStreamingOpenGLTexture(publicAPI, model) {\n    model.classHierarchy.push('vtkStreamingOpenGLTexture');\n    model.updatedFrames = [];\n    model.volumeId = null;\n    const superCreate3DFilterableFromRaw = publicAPI.create3DFilterableFromRaw;\n    publicAPI.create3DFilterableFromRaw = (width, height, depth, numberOfComponents, dataType, data, preferSizeOverAccuracy) => {\n        model.inputDataType = dataType;\n        model.inputNumComps = numberOfComponents;\n        superCreate3DFilterableFromRaw(width, height, depth, numberOfComponents, dataType, data, preferSizeOverAccuracy);\n    };\n    const superUpdate = publicAPI.updateVolumeInfoForGL;\n    publicAPI.updateVolumeInfoForGL = (dataType, numComps) => {\n        const isScalingApplied = superUpdate(dataType, numComps);\n        model.volumeInfo.dataComputedScale = [1];\n        model.volumeInfo.dataComputedOffset = [0];\n        return isScalingApplied;\n    };\n    publicAPI.update3DFromRaw = () => {\n        const { volumeId } = model;\n        if (!volumeId) {\n            return;\n        }\n        const volume = cache.getVolume(volumeId);\n        model._openGLRenderWindow.activateTexture(publicAPI);\n        publicAPI.createTexture();\n        publicAPI.bind();\n        if (volume.isDynamicVolume()) {\n            updateDynamicVolumeTexture();\n            return;\n        }\n        return (publicAPI.hasUpdatedFrames() && updateTextureImagesUsingVoxelManager());\n    };\n    const superModified = publicAPI.modified;\n    publicAPI.setUpdatedFrame = (frameIndex) => {\n        model.updatedFrames[frameIndex] = true;\n        superModified();\n    };\n    publicAPI.modified = () => {\n        superModified();\n        const volume = cache.getVolume(model.volumeId);\n        if (!volume) {\n            return;\n        }\n        const imageIds = volume.imageIds;\n        for (let i = 0; i < imageIds.length; i++) {\n            model.updatedFrames[i] = true;\n        }\n    };\n    function updateTextureImagesUsingVoxelManager() {\n        const volume = cache.getVolume(model.volumeId);\n        const imageIds = volume.imageIds;\n        for (let i = 0; i < model.updatedFrames.length; i++) {\n            if (model.updatedFrames[i]) {\n                const image = cache.getImage(imageIds[i]);\n                if (!image) {\n                    continue;\n                }\n                let data = image.voxelManager.getScalarData();\n                const gl = model.context;\n                if (volume.dataType !== data.constructor.name) {\n                    data = convertDataType(data, volume.dataType);\n                }\n                const [pixData] = publicAPI.updateArrayDataTypeForGL(volume.dataType, [\n                    data,\n                ]);\n                publicAPI.bind();\n                const zOffset = i;\n                gl.texSubImage3D(model.target, 0, 0, 0, zOffset, model.width, model.height, 1, model.format, model.openGLDataType, pixData);\n                publicAPI.deactivate();\n                model.updatedFrames[i] = null;\n            }\n        }\n        if (model.generateMipmap) {\n            model.context.generateMipmap(model.target);\n        }\n        publicAPI.deactivate();\n        return true;\n    }\n    function updateDynamicVolumeTexture() {\n        const volume = cache.getVolume(model.volumeId);\n        const imageIds = volume.getCurrentDimensionGroupImageIds();\n        if (!imageIds.length) {\n            return false;\n        }\n        let constructor;\n        for (let i = 0; i < imageIds.length; i++) {\n            const imageId = imageIds[i];\n            const image = cache.getImage(imageId);\n            let data;\n            if (!image) {\n                constructor = getConstructorFromType(volume.dataType, true);\n                data = new constructor(model.width * model.height);\n            }\n            else {\n                data = image.voxelManager.getScalarData();\n                constructor = data.constructor;\n            }\n            const gl = model.context;\n            if (volume.dataType !== data.constructor.name) {\n                data = convertDataType(data, volume.dataType);\n            }\n            const [pixData] = publicAPI.updateArrayDataTypeForGL(volume.dataType, [\n                data,\n            ]);\n            publicAPI.bind();\n            let zOffset = i;\n            gl.texSubImage3D(model.target, 0, 0, 0, zOffset, model.width, model.height, 1, model.format, model.openGLDataType, pixData);\n            publicAPI.deactivate();\n        }\n        if (model.generateMipmap) {\n            model.context.generateMipmap(model.target);\n        }\n        publicAPI.deactivate();\n        return true;\n    }\n    publicAPI.hasUpdatedFrames = () => !model.updatedFrames.length || model.updatedFrames.some((frame) => frame);\n    publicAPI.getUpdatedFrames = () => model.updatedFrames;\n    publicAPI.setVolumeId = (volumeId) => {\n        model.volumeId = volumeId;\n    };\n    publicAPI.getVolumeId = () => model.volumeId;\n    publicAPI.setTextureParameters = ({ width, height, depth, numberOfComponents, dataType, }) => {\n        model.width ??= width;\n        model.height ??= height;\n        model.depth ??= depth;\n        model.inputNumComps ??= numberOfComponents;\n        model.inputDataType ??= dataType;\n    };\n    publicAPI.getTextureParameters = () => ({\n        width: model.width,\n        height: model.height,\n        depth: model.depth,\n        numberOfComponents: model.inputNumComps,\n        dataType: model.inputDataType,\n    });\n}\nconst DEFAULT_VALUES = {\n    updatedFrames: [],\n};\nexport function extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, DEFAULT_VALUES, initialValues);\n    vtkOpenGLTexture.extend(publicAPI, model, initialValues);\n    vtkStreamingOpenGLTexture(publicAPI, model);\n}\nexport const newInstance = macro.newInstance(extend, 'vtkStreamingOpenGLTexture');\nexport default { newInstance, extend };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkOpenGLActor from '@kitware/vtk.js/Rendering/OpenGL/Actor';\nimport vtkOpenGLActor2D from '@kitware/vtk.js/Rendering/OpenGL/Actor2D';\nimport vtkOpenGLCamera from '@kitware/vtk.js/Rendering/OpenGL/Camera';\nimport vtkOpenGLGlyph3DMapper from '@kitware/vtk.js/Rendering/OpenGL/Glyph3DMapper';\nimport vtkOpenGLImageMapper from '@kitware/vtk.js/Rendering/OpenGL/ImageMapper';\nimport vtkOpenGLImageCPRMapper from '@kitware/vtk.js/Rendering/OpenGL/ImageCPRMapper';\nimport vtkOpenGLImageSlice from '@kitware/vtk.js/Rendering/OpenGL/ImageSlice';\nimport vtkOpenGLPixelSpaceCallbackMapper from '@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper';\nimport vtkOpenGLPolyDataMapper from '@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper';\nimport vtkOpenGLRenderer from '@kitware/vtk.js/Rendering/OpenGL/Renderer';\nimport vtkOpenGLSkybox from '@kitware/vtk.js/Rendering/OpenGL/Skybox';\nimport vtkOpenGLSphereMapper from '@kitware/vtk.js/Rendering/OpenGL/SphereMapper';\nimport vtkOpenGLStickMapper from '@kitware/vtk.js/Rendering/OpenGL/StickMapper';\nimport vtkOpenGLTexture from '@kitware/vtk.js/Rendering/OpenGL/Texture';\nimport vtkOpenGLVolume from '@kitware/vtk.js/Rendering/OpenGL/Volume';\nimport vtkOpenGLVolumeMapper from '@kitware/vtk.js/Rendering/OpenGL/VolumeMapper';\nimport vtkViewNodeFactory from '@kitware/vtk.js/Rendering/SceneGraph/ViewNodeFactory';\nimport vtkStreamingOpenGLVolumeMapper from './vtkStreamingOpenGLVolumeMapper';\nconst CLASS_MAPPING = Object.create(null);\nexport function registerOverride(className, fn) {\n    CLASS_MAPPING[className] = fn;\n}\nfunction vtkStreamingOpenGLViewNodeFactory(publicAPI, model) {\n    model.classHierarchy.push('vtkStreamingOpenGLViewNodeFactory');\n    publicAPI.createNode = (dataObject) => {\n        if (dataObject.isDeleted()) {\n            return null;\n        }\n        let cpt = 0;\n        let className = dataObject.getClassName(cpt++);\n        let isObject = false;\n        const keys = Object.keys(model.overrides);\n        while (className && !isObject) {\n            if (keys.includes(className)) {\n                isObject = true;\n            }\n            else {\n                className = dataObject.getClassName(cpt++);\n            }\n        }\n        if (!isObject) {\n            return null;\n        }\n        const initialValues = model.getModelInitialValues(dataObject);\n        const vn = model.overrides[className](initialValues);\n        vn.setMyFactory(publicAPI);\n        return vn;\n    };\n    model.overrides = CLASS_MAPPING;\n    model.getModelInitialValues = (dataObject) => {\n        const initialValues = {};\n        const className = dataObject.getClassName();\n        if (className === 'vtkSharedVolumeMapper') {\n            initialValues.scalarTexture = dataObject.getScalarTexture();\n        }\n        return initialValues;\n    };\n}\nconst DEFAULT_VALUES = {};\nexport function extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, DEFAULT_VALUES, initialValues);\n    vtkViewNodeFactory.extend(publicAPI, model, initialValues);\n    vtkStreamingOpenGLViewNodeFactory(publicAPI, model);\n    registerOverride('vtkActor', vtkOpenGLActor.newInstance);\n    registerOverride('vtkActor2D', vtkOpenGLActor2D.newInstance);\n    registerOverride('vtkCamera', vtkOpenGLCamera.newInstance);\n    registerOverride('vtkGlyph3DMapper', vtkOpenGLGlyph3DMapper.newInstance);\n    registerOverride('vtkImageMapper', vtkOpenGLImageMapper.newInstance);\n    registerOverride('vtkImageCPRMapper', vtkOpenGLImageCPRMapper.newInstance);\n    registerOverride('vtkImageSlice', vtkOpenGLImageSlice.newInstance);\n    registerOverride('vtkMapper', vtkOpenGLPolyDataMapper.newInstance);\n    registerOverride('vtkPixelSpaceCallbackMapper', vtkOpenGLPixelSpaceCallbackMapper.newInstance);\n    registerOverride('vtkRenderer', vtkOpenGLRenderer.newInstance);\n    registerOverride('vtkSkybox', vtkOpenGLSkybox.newInstance);\n    registerOverride('vtkSphereMapper', vtkOpenGLSphereMapper.newInstance);\n    registerOverride('vtkStickMapper', vtkOpenGLStickMapper.newInstance);\n    registerOverride('vtkTexture', vtkOpenGLTexture.newInstance);\n    registerOverride('vtkVolume', vtkOpenGLVolume.newInstance);\n    registerOverride('vtkVolumeMapper', vtkOpenGLVolumeMapper.newInstance);\n    registerOverride('vtkSharedVolumeMapper', vtkStreamingOpenGLVolumeMapper.newInstance);\n}\nexport const newInstance = macro.newInstance(extend, 'vtkStreamingOpenGLViewNodeFactory');\nexport default { newInstance, extend };\n","import macro from '@kitware/vtk.js/macros';\nimport vtkOpenGLVolumeMapper from '@kitware/vtk.js/Rendering/OpenGL/VolumeMapper';\nimport { Filter } from '@kitware/vtk.js/Rendering/OpenGL/Texture/Constants';\nimport { VtkDataTypes } from '@kitware/vtk.js/Common/Core/DataArray/Constants';\nimport { getTransferFunctionHash } from '@kitware/vtk.js/Rendering/OpenGL/RenderWindow/resourceSharingHelper';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport { Representation } from '@kitware/vtk.js/Rendering/Core/Property/Constants';\nimport vtkOpenGLTexture from '@kitware/vtk.js/Rendering/OpenGL/Texture';\nimport { getConstructorFromType } from '../../utilities/getBufferConfiguration';\nimport { getCanUseNorm16Texture } from '../../init';\nfunction vtkStreamingOpenGLVolumeMapper(publicAPI, model) {\n    model.classHierarchy.push('vtkStreamingOpenGLVolumeMapper');\n    publicAPI.buildBufferObjects = (ren, actor) => {\n        const image = model.currentInput;\n        if (!image) {\n            return;\n        }\n        const vprop = actor.getProperty();\n        if (!model.jitterTexture.getHandle()) {\n            const oTable = new Uint8Array(32 * 32);\n            for (let i = 0; i < 32 * 32; ++i) {\n                oTable[i] = 255.0 * Math.random();\n            }\n            model.jitterTexture.setMinificationFilter(Filter.LINEAR);\n            model.jitterTexture.setMagnificationFilter(Filter.LINEAR);\n            model.jitterTexture.create2DFromRaw(32, 32, 1, VtkDataTypes.UNSIGNED_CHAR, oTable);\n        }\n        const { numberOfComponents: numIComps } = image.get('numberOfComponents');\n        const useIndependentComps = publicAPI.useIndependentComponents(vprop);\n        const scalarOpacityFunc = vprop.getScalarOpacity();\n        const opTex = model._openGLRenderWindow.getGraphicsResourceForObject(scalarOpacityFunc);\n        let toString = getTransferFunctionHash(scalarOpacityFunc, useIndependentComps, numIComps);\n        const reBuildOp = !opTex?.oglObject || opTex.hash !== toString;\n        if (reBuildOp) {\n            model.opacityTexture = vtkOpenGLTexture.newInstance();\n            model.opacityTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n            const oWidth = 1024;\n            const oSize = oWidth * 2 * numIComps;\n            const ofTable = new Float32Array(oSize);\n            const tmpTable = new Float32Array(oWidth);\n            for (let c = 0; c < numIComps; ++c) {\n                const ofun = vprop.getScalarOpacity(c);\n                const opacityFactor = publicAPI.getCurrentSampleDistance(ren) /\n                    vprop.getScalarOpacityUnitDistance(c);\n                const oRange = ofun.getRange();\n                ofun.getTable(oRange[0], oRange[1], oWidth, tmpTable, 1);\n                for (let i = 0; i < oWidth; ++i) {\n                    ofTable[c * oWidth * 2 + i] =\n                        1.0 - (1.0 - tmpTable[i]) ** opacityFactor;\n                    ofTable[c * oWidth * 2 + i + oWidth] = ofTable[c * oWidth * 2 + i];\n                }\n            }\n            model.opacityTexture.resetFormatAndType();\n            model.opacityTexture.setMinificationFilter(Filter.LINEAR);\n            model.opacityTexture.setMagnificationFilter(Filter.LINEAR);\n            if (model._openGLRenderWindow.getWebgl2() &&\n                model.context.getExtension('OES_texture_float') &&\n                model.context.getExtension('OES_texture_float_linear')) {\n                model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.FLOAT, ofTable);\n            }\n            else {\n                const oTable = new Uint8ClampedArray(oSize);\n                for (let i = 0; i < oSize; ++i) {\n                    oTable[i] = 255.0 * ofTable[i];\n                }\n                model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.UNSIGNED_CHAR, oTable);\n            }\n            if (scalarOpacityFunc) {\n                model._openGLRenderWindow.setGraphicsResourceForObject(scalarOpacityFunc, model.opacityTexture, toString);\n                if (scalarOpacityFunc !== model._scalarOpacityFunc) {\n                    model._openGLRenderWindow.registerGraphicsResourceUser(scalarOpacityFunc, publicAPI);\n                    model._openGLRenderWindow.unregisterGraphicsResourceUser(model._scalarOpacityFunc, publicAPI);\n                }\n                model._scalarOpacityFunc = scalarOpacityFunc;\n            }\n        }\n        else {\n            model.opacityTexture = opTex.oglObject;\n        }\n        const colorTransferFunc = vprop.getRGBTransferFunction();\n        toString = getTransferFunctionHash(colorTransferFunc, useIndependentComps, numIComps);\n        const cTex = model._openGLRenderWindow.getGraphicsResourceForObject(colorTransferFunc);\n        const reBuildC = !cTex?.oglObject?.getHandle() || cTex?.hash !== toString;\n        if (reBuildC) {\n            model.colorTexture = vtkOpenGLTexture.newInstance();\n            model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n            const cWidth = 1024;\n            const cSize = cWidth * 2 * numIComps * 3;\n            const cTable = new Uint8ClampedArray(cSize);\n            const tmpTable = new Float32Array(cWidth * 3);\n            for (let c = 0; c < numIComps; ++c) {\n                const cfun = vprop.getRGBTransferFunction(c);\n                const cRange = cfun.getRange();\n                cfun.getTable(cRange[0], cRange[1], cWidth, tmpTable, 1);\n                for (let i = 0; i < cWidth * 3; ++i) {\n                    cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n                    cTable[c * cWidth * 6 + i + cWidth * 3] = 255.0 * tmpTable[i];\n                }\n            }\n            model.colorTexture.resetFormatAndType();\n            model.colorTexture.setMinificationFilter(Filter.LINEAR);\n            model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n            model.colorTexture.create2DFromRaw(cWidth, 2 * numIComps, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n            if (colorTransferFunc) {\n                model._openGLRenderWindow.setGraphicsResourceForObject(colorTransferFunc, model.colorTexture, toString);\n                if (colorTransferFunc !== model._colorTransferFunc) {\n                    model._openGLRenderWindow.registerGraphicsResourceUser(colorTransferFunc, publicAPI);\n                    model._openGLRenderWindow.unregisterGraphicsResourceUser(model._colorTransferFunc, publicAPI);\n                }\n                model._colorTransferFunc = colorTransferFunc;\n            }\n        }\n        else {\n            model.colorTexture = cTex.oglObject;\n        }\n        publicAPI.updateLabelOutlineThicknessTexture(actor);\n        toString = `${image.getMTime()}-${model.scalarTexture.getMTime()}`;\n        if (model.scalarTextureString !== toString) {\n            const dims = image.getDimensions();\n            model.scalarTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n            model.scalarTexture.enableUseHalfFloat(false);\n            const previousTextureParameters = model.scalarTexture.getTextureParameters();\n            const dataType = image.get('dataType').dataType;\n            let shouldReset = true;\n            if (previousTextureParameters?.dataType === dataType) {\n                if (previousTextureParameters?.width === dims[0]) {\n                    if (previousTextureParameters?.height === dims[1]) {\n                        if (previousTextureParameters?.depth === dims[2]) {\n                            shouldReset = false;\n                        }\n                    }\n                }\n            }\n            if (shouldReset) {\n                const norm16Ext = model.context.getExtension('EXT_texture_norm16');\n                model.scalarTexture.setOglNorm16Ext(getCanUseNorm16Texture() ? norm16Ext : null);\n                model.scalarTexture.resetFormatAndType();\n                model.scalarTexture.setTextureParameters({\n                    width: dims[0],\n                    height: dims[1],\n                    depth: dims[2],\n                    numberOfComponents: numIComps,\n                    dataType,\n                });\n                model.scalarTexture.create3DFromRaw(dims[0], dims[1], dims[2], numIComps, dataType, null);\n                model.scalarTexture.update3DFromRaw();\n            }\n            else {\n                model.scalarTexture.deactivate();\n                model.scalarTexture.update3DFromRaw();\n            }\n            model.scalarTextureString = toString;\n        }\n        if (!model.tris.getCABO().getElementCount()) {\n            const ptsArray = new Float32Array(12);\n            for (let i = 0; i < 4; i++) {\n                ptsArray[i * 3] = (i % 2) * 2 - 1.0;\n                ptsArray[i * 3 + 1] = i > 1 ? 1.0 : -1.0;\n                ptsArray[i * 3 + 2] = -1.0;\n            }\n            const cellArray = new Uint16Array(8);\n            cellArray[0] = 3;\n            cellArray[1] = 0;\n            cellArray[2] = 1;\n            cellArray[3] = 3;\n            cellArray[4] = 3;\n            cellArray[5] = 0;\n            cellArray[6] = 3;\n            cellArray[7] = 2;\n            const points = vtkDataArray.newInstance({\n                numberOfComponents: 3,\n                values: ptsArray,\n            });\n            points.setName('points');\n            const cells = vtkDataArray.newInstance({\n                numberOfComponents: 1,\n                values: cellArray,\n            });\n            model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n                points,\n                cellOffset: 0,\n            });\n        }\n        model.VBOBuildTime.modified();\n    };\n    publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n        if (model.VBOBuildTime.getMTime() < publicAPI.getMTime() ||\n            model.VBOBuildTime.getMTime() < actor.getMTime() ||\n            model.VBOBuildTime.getMTime() < model.renderable.getMTime() ||\n            model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() ||\n            model.VBOBuildTime.getMTime() < model.currentInput.getMTime() ||\n            model.VBOBuildTime.getMTime() < model.scalarTexture?.getMTime() ||\n            model.VBOBuildTime.getMTime() < model.colorTexture?.getMTime() ||\n            model.VBOBuildTime.getMTime() <\n                model.labelOutlineThicknessTexture?.getMTime() ||\n            !model.scalarTexture?.getHandle() ||\n            !model.colorTexture?.getHandle() ||\n            !model.labelOutlineThicknessTexture?.getHandle()) {\n            return true;\n        }\n        return false;\n    };\n}\nconst DEFAULT_VALUES = {};\nexport function extend(publicAPI, model, initialValues = {}) {\n    Object.assign(model, DEFAULT_VALUES, initialValues);\n    vtkOpenGLVolumeMapper.extend(publicAPI, model, initialValues);\n    model.scalarTexture = initialValues.scalarTexture;\n    model.previousState = {};\n    vtkStreamingOpenGLVolumeMapper(publicAPI, model);\n}\nexport const newInstance = macro.newInstance(extend, 'vtkStreamingOpenGLVolumeMapper');\nexport default { newInstance, extend };\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import triggerEvent from '../utilities/triggerEvent';\nimport imageIdToURI from '../utilities/imageIdToURI';\nimport eventTarget from '../eventTarget';\nimport Events from '../enums/Events';\nimport { ImageQualityStatus } from '../enums';\nimport fnv1aHash from '../utilities/fnv1aHash';\nconst ONE_GB = 1073741824;\nclass Cache {\n    constructor() {\n        this._imageCache = new Map();\n        this._volumeCache = new Map();\n        this._imageIdsToVolumeIdCache = new Map();\n        this._referencedImageIdToImageIdCache = new Map();\n        this._geometryCache = new Map();\n        this._imageCacheSize = 0;\n        this._maxCacheSize = 3 * ONE_GB;\n        this._geometryCacheSize = 0;\n        this.setMaxCacheSize = (newMaxCacheSize) => {\n            if (!newMaxCacheSize || typeof newMaxCacheSize !== 'number') {\n                const errorMessage = `New max cacheSize ${this._maxCacheSize} should be defined and should be a number.`;\n                throw new Error(errorMessage);\n            }\n            this._maxCacheSize = newMaxCacheSize;\n        };\n        this.isCacheable = (byteLength) => {\n            const bytesAvailable = this.getBytesAvailable();\n            const purgableImageBytes = Array.from(this._imageCache.values()).reduce((total, image) => {\n                if (!image.sharedCacheKey) {\n                    return total + image.sizeInBytes;\n                }\n                return total;\n            }, 0);\n            const availableSpaceWithoutSharedCacheKey = bytesAvailable + purgableImageBytes;\n            return availableSpaceWithoutSharedCacheKey >= byteLength;\n        };\n        this.getMaxCacheSize = () => this._maxCacheSize;\n        this.getCacheSize = () => this._imageCacheSize;\n        this._decacheImage = (imageId, force = false) => {\n            const cachedImage = this._imageCache.get(imageId);\n            if (!cachedImage) {\n                return;\n            }\n            if (cachedImage.sharedCacheKey && !force) {\n                throw new Error('Cannot decache an image with a shared cache key. You need to manually decache the volume first.');\n            }\n            const { imageLoadObject } = cachedImage;\n            if (cachedImage.image?.referencedImageId) {\n                this._referencedImageIdToImageIdCache.delete(cachedImage.image.referencedImageId);\n            }\n            if (imageLoadObject?.cancelFn) {\n                imageLoadObject.cancelFn();\n            }\n            if (imageLoadObject?.decache) {\n                imageLoadObject.decache();\n            }\n            this._imageCache.delete(imageId);\n        };\n        this._decacheVolume = (volumeId) => {\n            const cachedVolume = this._volumeCache.get(volumeId);\n            if (!cachedVolume) {\n                return;\n            }\n            const { volumeLoadObject, volume } = cachedVolume;\n            if (!volume) {\n                return;\n            }\n            if (volume.cancelLoading) {\n                volume.cancelLoading();\n            }\n            if (volume.imageData) {\n                volume.imageData.delete();\n            }\n            if (volumeLoadObject.cancelFn) {\n                volumeLoadObject.cancelFn();\n            }\n            if (volume.imageIds) {\n                volume.imageIds.forEach((imageId) => {\n                    const cachedImage = this._imageCache.get(imageId);\n                    if (cachedImage && cachedImage.sharedCacheKey === volumeId) {\n                        cachedImage.sharedCacheKey = undefined;\n                    }\n                });\n            }\n            this._volumeCache.delete(volumeId);\n        };\n        this.purgeCache = () => {\n            const imageIterator = this._imageCache.keys();\n            this.purgeVolumeCache();\n            while (true) {\n                const { value: imageId, done } = imageIterator.next();\n                if (done) {\n                    break;\n                }\n                this.removeImageLoadObject(imageId, { force: true });\n                triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, { imageId });\n            }\n        };\n        this.purgeVolumeCache = () => {\n            const volumeIterator = this._volumeCache.keys();\n            while (true) {\n                const { value: volumeId, done } = volumeIterator.next();\n                if (done) {\n                    break;\n                }\n                this.removeVolumeLoadObject(volumeId);\n                triggerEvent(eventTarget, Events.VOLUME_CACHE_VOLUME_REMOVED, {\n                    volumeId,\n                });\n            }\n        };\n        this.getVolumeLoadObject = (volumeId) => {\n            if (volumeId === undefined) {\n                throw new Error('getVolumeLoadObject: volumeId must not be undefined');\n            }\n            const cachedVolume = this._volumeCache.get(volumeId);\n            if (!cachedVolume) {\n                return;\n            }\n            cachedVolume.timeStamp = Date.now();\n            return cachedVolume.volumeLoadObject;\n        };\n        this.putGeometryLoadObject = (geometryId, geometryLoadObject) => {\n            if (geometryId === undefined) {\n                throw new Error('putGeometryLoadObject: geometryId must not be undefined');\n            }\n            if (geometryLoadObject.promise === undefined) {\n                throw new Error('putGeometryLoadObject: geometryLoadObject.promise must not be undefined');\n            }\n            if (this._geometryCache.has(geometryId)) {\n                throw new Error('putGeometryLoadObject: geometryId already present in geometryCache');\n            }\n            if (geometryLoadObject.cancelFn &&\n                typeof geometryLoadObject.cancelFn !== 'function') {\n                throw new Error('putGeometryLoadObject: geometryLoadObject.cancel must be a function');\n            }\n            const cachedGeometry = {\n                loaded: false,\n                geometryId,\n                geometryLoadObject,\n                timeStamp: Date.now(),\n                sizeInBytes: 0,\n            };\n            this._geometryCache.set(geometryId, cachedGeometry);\n            return geometryLoadObject.promise\n                .then((geometry) => {\n                try {\n                    this._putGeometryCommon(geometryId, geometry, cachedGeometry);\n                }\n                catch (error) {\n                    console.debug(`Error in _putGeometryCommon for geometry ${geometryId}:`, error);\n                    throw error;\n                }\n            })\n                .catch((error) => {\n                console.debug(`Error caching geometry ${geometryId}:`, error);\n                this._geometryCache.delete(geometryId);\n                throw error;\n            });\n        };\n        this.getGeometry = (geometryId) => {\n            if (geometryId === undefined) {\n                throw new Error('getGeometry: geometryId must not be undefined');\n            }\n            const cachedGeometry = this._geometryCache.get(geometryId);\n            if (!cachedGeometry) {\n                return;\n            }\n            cachedGeometry.timeStamp = Date.now();\n            return cachedGeometry.geometry;\n        };\n        this.removeGeometryLoadObject = (geometryId) => {\n            if (geometryId === undefined) {\n                throw new Error('removeGeometryLoadObject: geometryId must not be undefined');\n            }\n            const cachedGeometry = this._geometryCache.get(geometryId);\n            if (!cachedGeometry) {\n                throw new Error('removeGeometryLoadObject: geometryId was not present in geometryCache');\n            }\n            this.decrementGeometryCacheSize(cachedGeometry.sizeInBytes);\n            const eventDetails = {\n                geometry: cachedGeometry,\n                geometryId,\n            };\n            triggerEvent(eventTarget, Events.GEOMETRY_CACHE_GEOMETRY_REMOVED, eventDetails);\n            this._decacheGeometry(geometryId);\n        };\n        this._decacheGeometry = (geometryId) => {\n            const cachedGeometry = this._geometryCache.get(geometryId);\n            if (!cachedGeometry) {\n                return;\n            }\n            const { geometryLoadObject } = cachedGeometry;\n            if (geometryLoadObject.cancelFn) {\n                geometryLoadObject.cancelFn();\n            }\n            if (geometryLoadObject.decache) {\n                geometryLoadObject.decache();\n            }\n            this._geometryCache.delete(geometryId);\n        };\n        this.incrementGeometryCacheSize = (increment) => {\n            this._geometryCacheSize += increment;\n        };\n        this.decrementGeometryCacheSize = (decrement) => {\n            this._geometryCacheSize -= decrement;\n        };\n        this.getImageByReferencedImageId = (referencedImageId) => {\n            const imageId = this._referencedImageIdToImageIdCache.get(referencedImageId);\n            if (imageId) {\n                return this._imageCache.get(imageId)?.image;\n            }\n            return undefined;\n        };\n        this.getImage = (imageId, minQuality = ImageQualityStatus.FAR_REPLICATE) => {\n            if (imageId === undefined) {\n                throw new Error('getImage: imageId must not be undefined');\n            }\n            const cachedImage = this._imageCache.get(imageId);\n            if (!cachedImage) {\n                return;\n            }\n            cachedImage.timeStamp = Date.now();\n            if (cachedImage.image?.imageQualityStatus < minQuality) {\n                return;\n            }\n            return cachedImage.image;\n        };\n        this.getVolume = (volumeId, allowPartialMatch = false) => {\n            if (volumeId === undefined) {\n                throw new Error('getVolume: volumeId must not be undefined');\n            }\n            const cachedVolume = this._volumeCache.get(volumeId);\n            if (!cachedVolume) {\n                return allowPartialMatch\n                    ? [...this._volumeCache.values()].find((cv) => cv.volumeId.includes(volumeId))?.volume\n                    : undefined;\n            }\n            cachedVolume.timeStamp = Date.now();\n            return cachedVolume.volume;\n        };\n        this.getVolumes = () => {\n            const cachedVolumes = Array.from(this._volumeCache.values());\n            return cachedVolumes.map((cachedVolume) => cachedVolume.volume);\n        };\n        this.filterVolumesByReferenceId = (volumeId) => {\n            const cachedVolumes = this.getVolumes();\n            return cachedVolumes.filter((volume) => {\n                return volume.referencedVolumeId === volumeId;\n            });\n        };\n        this.removeImageLoadObject = (imageId, { force = false } = {}) => {\n            if (imageId === undefined) {\n                throw new Error('removeImageLoadObject: imageId must not be undefined');\n            }\n            const cachedImage = this._imageCache.get(imageId);\n            if (!cachedImage) {\n                throw new Error('removeImageLoadObject: imageId was not present in imageCache');\n            }\n            this._decacheImage(imageId, force);\n            this.incrementImageCacheSize(-cachedImage.sizeInBytes);\n            const eventDetails = {\n                image: cachedImage,\n                imageId,\n            };\n            triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, eventDetails);\n        };\n        this.removeVolumeLoadObject = (volumeId) => {\n            if (volumeId === undefined) {\n                throw new Error('removeVolumeLoadObject: volumeId must not be undefined');\n            }\n            const cachedVolume = this._volumeCache.get(volumeId);\n            if (!cachedVolume) {\n                throw new Error('removeVolumeLoadObject: volumeId was not present in volumeCache');\n            }\n            const eventDetails = {\n                volume: cachedVolume,\n                volumeId,\n            };\n            triggerEvent(eventTarget, Events.VOLUME_CACHE_VOLUME_REMOVED, eventDetails);\n            this._decacheVolume(volumeId);\n        };\n        this.incrementImageCacheSize = (increment) => {\n            this._imageCacheSize += increment;\n        };\n        this.decrementImageCacheSize = (decrement) => {\n            this._imageCacheSize -= decrement;\n        };\n        this.getGeometryLoadObject = (geometryId) => {\n            if (geometryId === undefined) {\n                throw new Error('getGeometryLoadObject: geometryId must not be undefined');\n            }\n            const cachedGeometry = this._geometryCache.get(geometryId);\n            if (!cachedGeometry) {\n                return;\n            }\n            cachedGeometry.timeStamp = Date.now();\n            return cachedGeometry.geometryLoadObject;\n        };\n    }\n    generateVolumeId(imageIds) {\n        const imageURIs = imageIds.map(imageIdToURI).sort();\n        let combinedHash = 0x811c9dc5;\n        for (const id of imageURIs) {\n            const idHash = fnv1aHash(id);\n            for (let i = 0; i < idHash.length; i++) {\n                combinedHash ^= idHash.charCodeAt(i);\n                combinedHash +=\n                    (combinedHash << 1) +\n                        (combinedHash << 4) +\n                        (combinedHash << 7) +\n                        (combinedHash << 8) +\n                        (combinedHash << 24);\n            }\n        }\n        return `volume-${(combinedHash >>> 0).toString(36)}`;\n    }\n    getImageIdsForVolumeId(volumeId) {\n        return Array.from(this._imageIdsToVolumeIdCache.entries())\n            .filter(([_, id]) => id === volumeId)\n            .map(([key]) => key);\n    }\n    getBytesAvailable() {\n        return this.getMaxCacheSize() - this.getCacheSize();\n    }\n    decacheIfNecessaryUntilBytesAvailable(numBytes, volumeImageIds) {\n        let bytesAvailable = this.getBytesAvailable();\n        if (bytesAvailable >= numBytes) {\n            return bytesAvailable;\n        }\n        const cachedImages = Array.from(this._imageCache.values()).filter((cachedImage) => !cachedImage.sharedCacheKey);\n        function compare(a, b) {\n            if (a.timeStamp > b.timeStamp) {\n                return 1;\n            }\n            if (a.timeStamp < b.timeStamp) {\n                return -1;\n            }\n            return 0;\n        }\n        cachedImages.sort(compare);\n        const cachedImageIds = cachedImages.map((im) => im.imageId);\n        let imageIdsToPurge = cachedImageIds;\n        if (volumeImageIds) {\n            imageIdsToPurge = cachedImageIds.filter((id) => !volumeImageIds.includes(id));\n        }\n        for (const imageId of imageIdsToPurge) {\n            this.removeImageLoadObject(imageId);\n            triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, { imageId });\n            bytesAvailable = this.getBytesAvailable();\n            if (bytesAvailable >= numBytes) {\n                return bytesAvailable;\n            }\n        }\n        for (const imageId of cachedImageIds) {\n            this.removeImageLoadObject(imageId);\n            triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, { imageId });\n            bytesAvailable = this.getBytesAvailable();\n            if (bytesAvailable >= numBytes) {\n                return bytesAvailable;\n            }\n        }\n    }\n    _putImageCommon(imageId, image, cachedImage) {\n        if (!this._imageCache.has(imageId)) {\n            console.warn('The image was purged from the cache before it completed loading.');\n            return;\n        }\n        if (!image) {\n            console.warn('Image is undefined');\n            return;\n        }\n        if (image.sizeInBytes === undefined || Number.isNaN(image.sizeInBytes)) {\n            throw new Error('_putImageCommon: image.sizeInBytes must not be undefined');\n        }\n        if (image.sizeInBytes.toFixed === undefined) {\n            throw new Error('_putImageCommon: image.sizeInBytes is not a number');\n        }\n        if (!this.isCacheable(image.sizeInBytes)) {\n            throw new Error(Events.CACHE_SIZE_EXCEEDED);\n        }\n        this.decacheIfNecessaryUntilBytesAvailable(image.sizeInBytes);\n        cachedImage.loaded = true;\n        cachedImage.image = image;\n        cachedImage.sizeInBytes = image.sizeInBytes;\n        this.incrementImageCacheSize(cachedImage.sizeInBytes);\n        const eventDetails = {\n            image: cachedImage,\n        };\n        if (image.referencedImageId) {\n            this._referencedImageIdToImageIdCache.set(image.referencedImageId, imageId);\n        }\n        triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_ADDED, eventDetails);\n        cachedImage.sharedCacheKey = image.sharedCacheKey;\n    }\n    async putImageLoadObject(imageId, imageLoadObject) {\n        if (imageId === undefined) {\n            console.error('putImageLoadObject: imageId must not be undefined');\n            throw new Error('putImageLoadObject: imageId must not be undefined');\n        }\n        if (imageLoadObject.promise === undefined) {\n            console.error('putImageLoadObject: imageLoadObject.promise must not be undefined');\n            throw new Error('putImageLoadObject: imageLoadObject.promise must not be undefined');\n        }\n        const alreadyCached = this._imageCache.get(imageId);\n        if (alreadyCached?.imageLoadObject) {\n            console.warn(`putImageLoadObject: imageId ${imageId} already in cache`);\n            throw new Error('putImageLoadObject: imageId already in cache');\n        }\n        if (imageLoadObject.cancelFn &&\n            typeof imageLoadObject.cancelFn !== 'function') {\n            console.error('putImageLoadObject: imageLoadObject.cancel must be a function');\n            throw new Error('putImageLoadObject: imageLoadObject.cancel must be a function');\n        }\n        const cachedImage = {\n            ...alreadyCached,\n            loaded: false,\n            imageId,\n            sharedCacheKey: undefined,\n            imageLoadObject,\n            timeStamp: Date.now(),\n            sizeInBytes: 0,\n        };\n        this._imageCache.set(imageId, cachedImage);\n        this._imageCache.set(imageId, cachedImage);\n        return imageLoadObject.promise\n            .then((image) => {\n            try {\n                this._putImageCommon(imageId, image, cachedImage);\n            }\n            catch (error) {\n                console.debug(`Error in _putImageCommon for image ${imageId}:`, error);\n                throw error;\n            }\n        })\n            .catch((error) => {\n            console.debug(`Error caching image ${imageId}:`, error);\n            this._imageCache.delete(imageId);\n            throw error;\n        });\n    }\n    putImageSync(imageId, image) {\n        if (imageId === undefined) {\n            throw new Error('putImageSync: imageId must not be undefined');\n        }\n        if (this._imageCache.has(imageId)) {\n            throw new Error('putImageSync: imageId already in cache');\n        }\n        const cachedImage = {\n            loaded: false,\n            imageId,\n            sharedCacheKey: undefined,\n            imageLoadObject: {\n                promise: Promise.resolve(image),\n            },\n            timeStamp: Date.now(),\n            sizeInBytes: 0,\n        };\n        this._imageCache.set(imageId, cachedImage);\n        try {\n            this._putImageCommon(imageId, image, cachedImage);\n        }\n        catch (error) {\n            this._imageCache.delete(imageId);\n            throw error;\n        }\n    }\n    getImageLoadObject(imageId) {\n        if (imageId === undefined) {\n            throw new Error('getImageLoadObject: imageId must not be undefined');\n        }\n        const cachedImage = this._imageCache.get(imageId);\n        if (!cachedImage) {\n            return;\n        }\n        cachedImage.timeStamp = Date.now();\n        return cachedImage.imageLoadObject;\n    }\n    isLoaded(imageId) {\n        const cachedImage = this._imageCache.get(imageId);\n        if (!cachedImage) {\n            return false;\n        }\n        return cachedImage.loaded;\n    }\n    getVolumeContainingImageId(imageId) {\n        const volumeIds = Array.from(this._volumeCache.keys());\n        const imageIdToUse = imageIdToURI(imageId);\n        for (const volumeId of volumeIds) {\n            const cachedVolume = this._volumeCache.get(volumeId);\n            if (!cachedVolume) {\n                return;\n            }\n            const { volume } = cachedVolume;\n            if (!volume.imageIds.length) {\n                return;\n            }\n            const imageIdIndex = volume.getImageURIIndex(imageIdToUse);\n            if (imageIdIndex > -1) {\n                return { volume, imageIdIndex };\n            }\n        }\n    }\n    getCachedImageBasedOnImageURI(imageId) {\n        const imageURIToUse = imageIdToURI(imageId);\n        const cachedImageIds = Array.from(this._imageCache.keys());\n        const foundImageId = cachedImageIds.find((imageId) => {\n            return imageIdToURI(imageId) === imageURIToUse;\n        });\n        if (!foundImageId) {\n            return;\n        }\n        return this._imageCache.get(foundImageId);\n    }\n    _putVolumeCommon(volumeId, volume, cachedVolume) {\n        if (!this._volumeCache.get(volumeId)) {\n            console.warn('The volume was purged from the cache before it completed loading.');\n            return;\n        }\n        cachedVolume.loaded = true;\n        cachedVolume.volume = volume;\n        volume.imageIds?.forEach((imageId) => {\n            const image = this._imageCache.get(imageId);\n            if (image) {\n                image.sharedCacheKey = volumeId;\n            }\n        });\n        const eventDetails = {\n            volume: cachedVolume,\n        };\n        triggerEvent(eventTarget, Events.VOLUME_CACHE_VOLUME_ADDED, eventDetails);\n    }\n    putVolumeSync(volumeId, volume) {\n        if (volumeId === undefined) {\n            throw new Error('putVolumeSync: volumeId must not be undefined');\n        }\n        if (this._volumeCache.has(volumeId)) {\n            throw new Error('putVolumeSync: volumeId already in cache');\n        }\n        const cachedVolume = {\n            loaded: false,\n            volumeId,\n            volumeLoadObject: {\n                promise: Promise.resolve(volume),\n            },\n            timeStamp: Date.now(),\n            sizeInBytes: 0,\n        };\n        this._volumeCache.set(volumeId, cachedVolume);\n        try {\n            this._putVolumeCommon(volumeId, volume, cachedVolume);\n        }\n        catch (error) {\n            this._volumeCache.delete(volumeId);\n            throw error;\n        }\n    }\n    async putVolumeLoadObject(volumeId, volumeLoadObject) {\n        if (volumeId === undefined) {\n            throw new Error('putVolumeLoadObject: volumeId must not be undefined');\n        }\n        if (volumeLoadObject.promise === undefined) {\n            throw new Error('putVolumeLoadObject: volumeLoadObject.promise must not be undefined');\n        }\n        if (this._volumeCache.has(volumeId)) {\n            throw new Error(`putVolumeLoadObject: volumeId:${volumeId} already in cache`);\n        }\n        if (volumeLoadObject.cancelFn &&\n            typeof volumeLoadObject.cancelFn !== 'function') {\n            throw new Error('putVolumeLoadObject: volumeLoadObject.cancel must be a function');\n        }\n        const cachedVolume = {\n            loaded: false,\n            volumeId,\n            volumeLoadObject,\n            timeStamp: Date.now(),\n            sizeInBytes: 0,\n        };\n        this._volumeCache.set(volumeId, cachedVolume);\n        return volumeLoadObject.promise\n            .then((volume) => {\n            try {\n                this._putVolumeCommon(volumeId, volume, cachedVolume);\n            }\n            catch (error) {\n                console.error(`Error in _putVolumeCommon for volume ${volumeId}:`, error);\n                this._volumeCache.delete(volumeId);\n                throw error;\n            }\n        })\n            .catch((error) => {\n            this._volumeCache.delete(volumeId);\n            throw error;\n        });\n    }\n    _putGeometryCommon(geometryId, geometry, cachedGeometry) {\n        if (!this._geometryCache.get(geometryId)) {\n            console.warn('The geometry was purged from the cache before it completed loading.');\n            return;\n        }\n        if (!geometry) {\n            console.warn('Geometry is undefined');\n            return;\n        }\n        if (geometry.sizeInBytes === undefined ||\n            Number.isNaN(geometry.sizeInBytes)) {\n            throw new Error('_putGeometryCommon: geometry.sizeInBytes must not be undefined');\n        }\n        if (geometry.sizeInBytes.toFixed === undefined) {\n            throw new Error('_putGeometryCommon: geometry.sizeInBytes is not a number');\n        }\n        if (!this.isCacheable(geometry.sizeInBytes)) {\n            throw new Error(Events.CACHE_SIZE_EXCEEDED);\n        }\n        this.decacheIfNecessaryUntilBytesAvailable(geometry.sizeInBytes);\n        cachedGeometry.loaded = true;\n        cachedGeometry.geometry = geometry;\n        cachedGeometry.sizeInBytes = geometry.sizeInBytes;\n        this.incrementGeometryCacheSize(cachedGeometry.sizeInBytes);\n        const eventDetails = {\n            geometry: cachedGeometry,\n        };\n        triggerEvent(eventTarget, Events.GEOMETRY_CACHE_GEOMETRY_ADDED, eventDetails);\n    }\n    putGeometrySync(geometryId, geometry) {\n        if (geometryId === undefined) {\n            throw new Error('putGeometrySync: geometryId must not be undefined');\n        }\n        if (this._geometryCache.has(geometryId)) {\n            throw new Error('putGeometrySync: geometryId already in cache');\n        }\n        const cachedGeometry = {\n            loaded: false,\n            geometryId,\n            geometryLoadObject: {\n                promise: Promise.resolve(geometry),\n            },\n            timeStamp: Date.now(),\n            sizeInBytes: 0,\n        };\n        this._geometryCache.set(geometryId, cachedGeometry);\n        try {\n            this._putGeometryCommon(geometryId, geometry, cachedGeometry);\n        }\n        catch (error) {\n            this._geometryCache.delete(geometryId);\n            throw error;\n        }\n    }\n    setPartialImage(imageId, partialImage) {\n        const cachedImage = this._imageCache.get(imageId);\n        if (!cachedImage) {\n            if (partialImage) {\n                this._imageCache.set(imageId, {\n                    image: partialImage,\n                    imageId,\n                    loaded: false,\n                    timeStamp: Date.now(),\n                    sizeInBytes: 0,\n                });\n            }\n            return;\n        }\n        if (cachedImage.loaded) {\n            cachedImage.loaded = false;\n            cachedImage.imageLoadObject = null;\n            this.incrementImageCacheSize(-cachedImage.sizeInBytes);\n            cachedImage.sizeInBytes = 0;\n            cachedImage.image = partialImage || cachedImage.image;\n        }\n        else {\n            cachedImage.image = partialImage || cachedImage.image;\n        }\n    }\n    getImageQuality(imageId) {\n        const image = this._imageCache.get(imageId)?.image;\n        return image\n            ? image.imageQualityStatus || ImageQualityStatus.FULL_RESOLUTION\n            : undefined;\n    }\n}\nconst cache = new Cache();\nexport default cache;\nexport { Cache, cache };\n","import * as metaData from '../../metaData';\nimport { Events, ImageQualityStatus, RequestType } from '../../enums';\nimport eventTarget from '../../eventTarget';\nimport imageLoadPoolManager from '../../requestPool/imageLoadPoolManager';\nimport ProgressiveIterator from '../../utilities/ProgressiveIterator';\nimport imageRetrieveMetadataProvider from '../../utilities/imageRetrieveMetadataProvider';\nimport { hasFloatScalingParameters } from '../../utilities/hasFloatScalingParameters';\nimport autoLoad from '../../utilities/autoLoad';\nimport triggerEvent from '../../utilities/triggerEvent';\nimport ImageVolume from './ImageVolume';\nimport ProgressiveRetrieveImages from '../../loaders/ProgressiveRetrieveImages';\nimport { canRenderFloatTextures } from '../../init';\nimport { loadAndCacheImage } from '../../loaders/imageLoader';\nconst requestTypeDefault = RequestType.Prefetch;\nexport default class BaseStreamingImageVolume extends ImageVolume {\n    constructor(imageVolumeProperties, streamingProperties) {\n        super(imageVolumeProperties);\n        this.framesLoaded = 0;\n        this.framesProcessed = 0;\n        this.framesUpdated = 0;\n        this.autoRenderOnLoad = true;\n        this.cachedFrames = [];\n        this.reRenderTarget = 0;\n        this.reRenderFraction = 2;\n        this.imagesLoader = this;\n        this.cancelLoading = () => {\n            const { loadStatus } = this;\n            if (!loadStatus || !loadStatus.loading) {\n                return;\n            }\n            loadStatus.loading = false;\n            loadStatus.cancelled = true;\n            this.clearLoadCallbacks();\n            const filterFunction = ({ additionalDetails }) => {\n                return additionalDetails.volumeId !== this.volumeId;\n            };\n            imageLoadPoolManager.filterRequests(filterFunction);\n        };\n        this.loadStatus = streamingProperties.loadStatus;\n    }\n    invalidateVolume(immediate) {\n        const { vtkOpenGLTexture } = this;\n        const { numFrames } = this;\n        for (let i = 0; i < numFrames; i++) {\n            vtkOpenGLTexture.setUpdatedFrame(i);\n        }\n        this.modified();\n        if (immediate) {\n            autoLoad(this.volumeId);\n        }\n    }\n    clearLoadCallbacks() {\n        this.loadStatus.callbacks = [];\n    }\n    callLoadStatusCallback(evt) {\n        const { framesUpdated, framesProcessed, totalNumFrames } = evt;\n        const { volumeId, reRenderFraction, loadStatus, metadata } = this;\n        const { FrameOfReferenceUID } = metadata;\n        if (this.autoRenderOnLoad) {\n            if (framesUpdated > this.reRenderTarget ||\n                framesProcessed === totalNumFrames) {\n                this.reRenderTarget += reRenderFraction;\n                autoLoad(volumeId);\n            }\n        }\n        if (framesProcessed === totalNumFrames) {\n            loadStatus.callbacks.forEach((callback) => callback(evt));\n            const eventDetail = {\n                FrameOfReferenceUID,\n                volumeId: volumeId,\n            };\n            triggerEvent(eventTarget, Events.IMAGE_VOLUME_LOADING_COMPLETED, eventDetail);\n        }\n    }\n    updateTextureAndTriggerEvents(imageIdIndex, imageId, imageQualityStatus = ImageQualityStatus.FULL_RESOLUTION) {\n        const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n        const { cachedFrames, numFrames, totalNumFrames } = this;\n        const { FrameOfReferenceUID } = this.metadata;\n        const currentStatus = cachedFrames[frameIndex];\n        if (currentStatus > imageQualityStatus) {\n            return;\n        }\n        if (cachedFrames[frameIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n            return;\n        }\n        const complete = imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\n        cachedFrames[imageIdIndex] = imageQualityStatus;\n        this.framesUpdated++;\n        if (complete) {\n            this.framesLoaded++;\n            this.framesProcessed++;\n        }\n        const eventDetail = {\n            FrameOfReferenceUID,\n            volumeId: this.volumeId,\n            numberOfFrames: numFrames,\n            framesProcessed: this.framesProcessed,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_VOLUME_MODIFIED, eventDetail);\n        if (complete && this.framesProcessed === this.totalNumFrames) {\n            this.loadStatus.loaded = true;\n            this.loadStatus.loading = false;\n        }\n        this.callLoadStatusCallback({\n            success: true,\n            imageIdIndex,\n            imageId,\n            framesLoaded: this.framesLoaded,\n            framesProcessed: this.framesProcessed,\n            framesUpdated: this.framesUpdated,\n            numFrames,\n            totalNumFrames,\n            complete,\n            imageQualityStatus,\n        });\n        this.vtkOpenGLTexture.setUpdatedFrame(frameIndex);\n        if (this.loadStatus.loaded) {\n            this.loadStatus.callbacks = [];\n        }\n    }\n    successCallback(imageId, image) {\n        const imageIdIndex = this.getImageIdIndex(imageId);\n        const { imageQualityStatus } = image;\n        if (this.loadStatus.cancelled) {\n            console.warn('volume load cancelled, returning for imageIdIndex: ', imageIdIndex);\n            return;\n        }\n        this.updateTextureAndTriggerEvents(imageIdIndex, imageId, imageQualityStatus);\n        if (this.isDynamicVolume()) {\n            this.checkDimensionGroupCompletion(imageIdIndex);\n        }\n    }\n    errorCallback(imageId, permanent, error) {\n        if (!permanent) {\n            return;\n        }\n        const { totalNumFrames, numFrames } = this;\n        const imageIdIndex = this.getImageIdIndex(imageId);\n        this.framesProcessed++;\n        if (this.framesProcessed === totalNumFrames) {\n            this.loadStatus.loaded = true;\n            this.loadStatus.loading = false;\n        }\n        this.callLoadStatusCallback({\n            success: false,\n            imageId,\n            imageIdIndex,\n            error,\n            framesLoaded: this.framesLoaded,\n            framesProcessed: this.framesProcessed,\n            framesUpdated: this.framesUpdated,\n            numFrames,\n            totalNumFrames,\n        });\n        if (this.loadStatus.loaded) {\n            this.loadStatus.callbacks = [];\n        }\n        const eventDetail = {\n            error,\n            imageIdIndex,\n            imageId,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_ERROR, eventDetail);\n    }\n    load(callback) {\n        const { imageIds, loadStatus, numFrames } = this;\n        const { transferSyntaxUID } = metaData.get('transferSyntax', imageIds[0]) || {};\n        const imageRetrieveConfiguration = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, this.volumeId, transferSyntaxUID, 'volume');\n        this.imagesLoader = this.isDynamicVolume()\n            ? this\n            : imageRetrieveConfiguration\n                ? (imageRetrieveConfiguration.create ||\n                    ProgressiveRetrieveImages.createProgressive)(imageRetrieveConfiguration)\n                : this;\n        if (loadStatus.loading === true) {\n            return;\n        }\n        const { loaded } = this.loadStatus;\n        const totalNumFrames = imageIds.length;\n        if (loaded) {\n            if (callback) {\n                callback({\n                    success: true,\n                    framesLoaded: totalNumFrames,\n                    framesProcessed: totalNumFrames,\n                    numFrames,\n                    totalNumFrames,\n                });\n            }\n            return;\n        }\n        if (callback) {\n            this.loadStatus.callbacks.push(callback);\n        }\n        this._prefetchImageIds();\n    }\n    getLoaderImageOptions(imageId) {\n        const { transferSyntaxUID: transferSyntaxUID } = metaData.get('transferSyntax', imageId) || {};\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId) || {};\n        const { rows, columns } = imagePlaneModule;\n        const imageIdIndex = this.getImageIdIndex(imageId);\n        const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n        const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n        const scalingParameters = {\n            rescaleSlope: modalityLutModule.rescaleSlope,\n            rescaleIntercept: modalityLutModule.rescaleIntercept,\n            modality: generalSeriesModule.modality,\n        };\n        const modality = scalingParameters.modality;\n        if (modality === 'PT' || modality === 'RTDOSE') {\n            const scalingFactor = metaData.get('scalingModule', imageId);\n            if (scalingFactor) {\n                this._addScalingToVolume(scalingFactor);\n                Object.assign(scalingParameters, scalingFactor);\n            }\n        }\n        const floatAfterScale = hasFloatScalingParameters(scalingParameters);\n        const allowFloatRendering = canRenderFloatTextures();\n        this.isPreScaled = true;\n        if (scalingParameters &&\n            scalingParameters.rescaleSlope !== undefined &&\n            scalingParameters.rescaleIntercept !== undefined) {\n            const { rescaleSlope, rescaleIntercept } = scalingParameters;\n            this.isPreScaled =\n                typeof rescaleSlope === 'number' &&\n                    typeof rescaleIntercept === 'number';\n        }\n        if (!allowFloatRendering && floatAfterScale) {\n            this.isPreScaled = false;\n        }\n        const targetBuffer = {\n            type: this.dataType,\n            rows,\n            columns,\n        };\n        return {\n            targetBuffer,\n            allowFloatRendering,\n            preScale: {\n                enabled: this.isPreScaled,\n                scalingParameters,\n            },\n            transferPixelData: true,\n            requestType: requestTypeDefault,\n            transferSyntaxUID,\n            additionalDetails: {\n                imageId,\n                imageIdIndex,\n                volumeId: this.volumeId,\n            },\n        };\n    }\n    callLoadImage(imageId, imageIdIndex, options) {\n        const { cachedFrames } = this;\n        if (cachedFrames[imageIdIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n            return;\n        }\n        const handleImageCacheAdded = (event) => {\n            const { image } = event.detail;\n            if (image.imageId === imageId) {\n                this.vtkOpenGLTexture.setUpdatedFrame(imageIdIndex);\n                eventTarget.removeEventListener(Events.IMAGE_CACHE_IMAGE_ADDED, handleImageCacheAdded);\n            }\n        };\n        eventTarget.addEventListener(Events.IMAGE_CACHE_IMAGE_ADDED, handleImageCacheAdded);\n        const uncompressedIterator = ProgressiveIterator.as(loadAndCacheImage(imageId, options));\n        return uncompressedIterator.forEach((image) => {\n            this.successCallback(imageId, image);\n        }, this.errorCallback.bind(this, imageIdIndex, imageId));\n    }\n    getImageIdsRequests(imageIds, priorityDefault) {\n        this.totalNumFrames = this.imageIds.length;\n        const autoRenderPercentage = 2;\n        if (this.autoRenderOnLoad) {\n            this.reRenderFraction =\n                this.totalNumFrames * (autoRenderPercentage / 100);\n            this.reRenderTarget = this.reRenderFraction;\n        }\n        const requests = imageIds.map((imageId) => {\n            const imageIdIndex = this.getImageIdIndex(imageId);\n            const requestType = requestTypeDefault;\n            const priority = priorityDefault;\n            const options = this.getLoaderImageOptions(imageId);\n            return {\n                callLoadImage: this.callLoadImage.bind(this),\n                imageId,\n                imageIdIndex,\n                options,\n                priority,\n                requestType,\n                additionalDetails: {\n                    volumeId: this.volumeId,\n                },\n            };\n        });\n        return requests;\n    }\n    getImageLoadRequests(priority) {\n        throw new Error('Abstract method');\n    }\n    getImageIdsToLoad() {\n        throw new Error('Abstract method');\n    }\n    loadImages() {\n        this.loadStatus.loading = true;\n        const requests = this.getImageLoadRequests(5);\n        requests.reverse().forEach((request) => {\n            if (!request) {\n                return;\n            }\n            const { callLoadImage, imageId, imageIdIndex, options, priority, requestType, additionalDetails, } = request;\n            imageLoadPoolManager.addRequest(callLoadImage.bind(this, imageId, imageIdIndex, options), requestType, additionalDetails, priority);\n        });\n        return Promise.resolve(true);\n    }\n    _prefetchImageIds() {\n        this.loadStatus.loading = true;\n        const imageIds = [...this.getImageIdsToLoad()];\n        this.totalNumFrames = this.imageIds.length;\n        const autoRenderPercentage = 2;\n        if (this.autoRenderOnLoad) {\n            this.reRenderFraction =\n                this.totalNumFrames * (autoRenderPercentage / 100);\n            this.reRenderTarget = this.reRenderFraction;\n        }\n        return this.imagesLoader.loadImages(imageIds, this).catch((e) => {\n            console.debug('progressive loading failed to complete', e);\n        });\n    }\n    _addScalingToVolume(suvFactor) {\n        if (this.scaling) {\n            return;\n        }\n        const { suvbw, suvlbm, suvbsa } = suvFactor;\n        const petScaling = {};\n        if (suvlbm) {\n            petScaling.suvbwToSuvlbm = suvlbm / suvbw;\n        }\n        if (suvbsa) {\n            petScaling.suvbwToSuvbsa = suvbsa / suvbw;\n        }\n        if (suvbw) {\n            petScaling.suvbw = suvbw;\n        }\n        this.scaling = { PT: petScaling };\n    }\n    checkDimensionGroupCompletion(imageIdIndex) { }\n}\n","export class Contour {\n    constructor(props) {\n        const { points, type } = props.data;\n        this.id = props.id;\n        this._points = points;\n        this._type = type;\n        this._color = props.color;\n        this._segmentIndex = props.segmentIndex;\n        this.sizeInBytes = this._getSizeInBytes();\n    }\n    _getSizeInBytes() {\n        return this._points.length * 3;\n    }\n    get points() {\n        return this._points;\n    }\n    set points(value) {\n        this._points = value;\n    }\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value;\n    }\n    get segmentIndex() {\n        return this._segmentIndex;\n    }\n    set segmentIndex(value) {\n        this._segmentIndex = value;\n    }\n    get flatPointsArray() {\n        return this._points.map((point) => [...point]).flat();\n    }\n}\nexport default Contour;\n","import Contour from './Contour';\nexport class ContourSet {\n    constructor(props) {\n        this._color = [200, 0, 0];\n        this.id = props.id;\n        this._contours = [];\n        this._color = props.color ?? this._color;\n        this.frameOfReferenceUID = props.frameOfReferenceUID;\n        this._segmentIndex = props.segmentIndex;\n        this._createEachContour(props.data);\n        this.sizeInBytes = this._getSizeInBytes();\n    }\n    _createEachContour(contourDataArray) {\n        contourDataArray.forEach((contourData) => {\n            const { points, type, color } = contourData;\n            const contour = new Contour({\n                id: `${this.id}-segment-${this._segmentIndex}`,\n                data: {\n                    points,\n                    type,\n                    segmentIndex: this._segmentIndex,\n                    color: color ?? this._color,\n                },\n                segmentIndex: this._segmentIndex,\n                color: color ?? this._color,\n            });\n            this._contours.push(contour);\n        });\n        this._updateContourSetCentroid();\n    }\n    _updateContourSetCentroid() {\n        const numberOfPoints = this.totalNumberOfPoints;\n        const flatPointsArray = this.flatPointsArray;\n        const sumOfPoints = flatPointsArray.reduce((acc, point) => {\n            return [acc[0] + point[0], acc[1] + point[1], acc[2] + point[2]];\n        }, [0, 0, 0]);\n        const centroid = [\n            sumOfPoints[0] / numberOfPoints,\n            sumOfPoints[1] / numberOfPoints,\n            sumOfPoints[2] / numberOfPoints,\n        ];\n        const closestPoint = flatPointsArray.reduce((closestPoint, point) => {\n            const distanceToPoint = this._getDistance(centroid, point);\n            const distanceToClosestPoint = this._getDistance(centroid, closestPoint);\n            if (distanceToPoint < distanceToClosestPoint) {\n                return point;\n            }\n            else {\n                return closestPoint;\n            }\n        }, flatPointsArray[0]);\n        this._centroid = closestPoint;\n    }\n    _getSizeInBytes() {\n        return this._contours.reduce((sizeInBytes, contour) => {\n            return sizeInBytes + contour.sizeInBytes;\n        }, 0);\n    }\n    _getDistance(pointA, pointB) {\n        return Math.sqrt((pointA[0] - pointB[0]) ** 2 +\n            (pointA[1] - pointB[1]) ** 2 +\n            (pointA[2] - pointB[2]) ** 2);\n    }\n    get centroid() {\n        return this._centroid;\n    }\n    get segmentIndex() {\n        return this._segmentIndex;\n    }\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._color = value;\n        this._contours.forEach((contour) => {\n            if (contour instanceof Contour) {\n                contour.color = value;\n            }\n        });\n    }\n    get contours() {\n        return this._contours;\n    }\n    get flatPointsArray() {\n        return this._contours.flatMap((contour) => contour.points);\n    }\n    get numberOfContours() {\n        return this._contours.length;\n    }\n    get totalNumberOfPoints() {\n        return this._contours.reduce((numberOfPoints, contour) => {\n            return numberOfPoints + contour.points.length;\n        }, 0);\n    }\n    get numberOfPointsArray() {\n        return this._contours.map((contour) => contour.points.length);\n    }\n    getPointsInContour(contourIndex) {\n        return this._contours[contourIndex].points;\n    }\n    getNumberOfPointsInAContour(contourIndex) {\n        return this.getPointsInContour(contourIndex).length;\n    }\n}\nexport default ContourSet;\n","import vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport imageIdToURI from '../../utilities/imageIdToURI';\nimport VoxelManager from '../../utilities/VoxelManager';\nimport { vtkStreamingOpenGLTexture } from '../../RenderingEngine/vtkClasses';\nimport cache from '../cache';\nexport class ImageVolume {\n    constructor(props) {\n        this._imageIdsIndexMap = new Map();\n        this._imageURIsIndexMap = new Map();\n        this.cornerstoneImageMetaData = null;\n        this.isPreScaled = false;\n        this.numTimePoints = null;\n        this.numFrames = null;\n        const { imageIds, scaling, dimensions, spacing, origin, direction, dataType, volumeId, referencedVolumeId, metadata, referencedImageIds, additionalDetails, voxelManager, numberOfComponents, } = props;\n        if (!dataType) {\n            throw new Error('Data type is required, please provide a data type as string such as \"Uint8Array\", \"Float32Array\", etc.');\n        }\n        let { imageData } = props;\n        this.imageIds = imageIds;\n        this.volumeId = volumeId;\n        this.metadata = metadata;\n        this.dimensions = dimensions;\n        this.spacing = spacing;\n        this.origin = origin;\n        this.direction = direction;\n        this.dataType = dataType;\n        this.vtkOpenGLTexture = vtkStreamingOpenGLTexture.newInstance();\n        this.vtkOpenGLTexture.setVolumeId(volumeId);\n        this.voxelManager =\n            voxelManager ??\n                VoxelManager.createImageVolumeVoxelManager({\n                    dimensions,\n                    imageIds,\n                    numberOfComponents,\n                });\n        this.numVoxels =\n            this.dimensions[0] * this.dimensions[1] * this.dimensions[2];\n        if (!imageData) {\n            imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions);\n            imageData.setSpacing(spacing);\n            imageData.setDirection(direction);\n            imageData.setOrigin(origin);\n        }\n        imageData.set({\n            dataType: dataType,\n            voxelManager: this.voxelManager,\n            id: volumeId,\n            numberOfComponents: numberOfComponents || 1,\n        });\n        imageData.set({\n            hasScalarVolume: false,\n        });\n        this.imageData = imageData;\n        this.numFrames = this._getNumFrames();\n        this._reprocessImageIds();\n        if (scaling) {\n            this.scaling = scaling;\n        }\n        if (referencedVolumeId) {\n            this.referencedVolumeId = referencedVolumeId;\n        }\n        if (referencedImageIds) {\n            this.referencedImageIds = referencedImageIds;\n        }\n        if (additionalDetails) {\n            this.additionalDetails = additionalDetails;\n        }\n    }\n    get sizeInBytes() {\n        return this.voxelManager.sizeInBytes;\n    }\n    get imageIds() {\n        return this._imageIds;\n    }\n    set imageIds(newImageIds) {\n        this._imageIds = newImageIds;\n        this._reprocessImageIds();\n    }\n    _reprocessImageIds() {\n        this._imageIdsIndexMap.clear();\n        this._imageURIsIndexMap.clear();\n        this._imageIds.forEach((imageId, i) => {\n            const imageURI = imageIdToURI(imageId);\n            this._imageIdsIndexMap.set(imageId, i);\n            this._imageURIsIndexMap.set(imageURI, i);\n        });\n    }\n    isDynamicVolume() {\n        return this.numTimePoints > 1;\n    }\n    getImageIdIndex(imageId) {\n        return this._imageIdsIndexMap.get(imageId);\n    }\n    getImageIdByIndex(imageIdIndex) {\n        return this._imageIds[imageIdIndex];\n    }\n    getImageURIIndex(imageURI) {\n        return this._imageURIsIndexMap.get(imageURI);\n    }\n    load(callback) {\n    }\n    destroy() {\n        this.imageData.delete();\n        this.imageData = null;\n        this.voxelManager.clear();\n        this.vtkOpenGLTexture.releaseGraphicsResources();\n        this.vtkOpenGLTexture.delete();\n    }\n    invalidate() {\n        for (let i = 0; i < this.imageIds.length; i++) {\n            this.vtkOpenGLTexture.setUpdatedFrame(i);\n        }\n        this.imageData.modified();\n    }\n    modified() {\n        this.imageData.modified();\n        this.vtkOpenGLTexture.modified();\n        this.numFrames = this._getNumFrames();\n    }\n    removeFromCache() {\n        cache.removeVolumeLoadObject(this.volumeId);\n    }\n    getScalarDataLength() {\n        return this.voxelManager.getScalarDataLength();\n    }\n    _getNumFrames() {\n        if (!this.isDynamicVolume()) {\n            return this.imageIds.length;\n        }\n        return this.numTimePoints;\n    }\n    imageIdIndexToFrameIndex(imageIdIndex) {\n        return imageIdIndex % this.numFrames;\n    }\n    getCornerstoneImages() {\n        const { imageIds } = this;\n        return imageIds.map((imageId) => {\n            return cache.getImage(imageId);\n        });\n    }\n}\nexport default ImageVolume;\n","import vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkPLYReader from '@kitware/vtk.js/IO/Geometry/PLYReader';\nimport vtkSTLReader from '@kitware/vtk.js/IO/Geometry/STLReader';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkOBJReader from '@kitware/vtk.js/IO/Misc/OBJReader';\nimport vtkProperty from '@kitware/vtk.js/Rendering/Core/Property';\nimport vtkPolyDataNormals from '@kitware/vtk.js/Filters/Core/PolyDataNormals';\nimport { MeshType } from '../../enums';\nexport class Mesh {\n    constructor(props) {\n        this._color = [255, 255, 255];\n        this._actors = [];\n        this.id = props.id;\n        this._color = props.color ?? this._color;\n        this._format = props.format;\n        const textDecoder = new TextDecoder();\n        const normals = vtkPolyDataNormals.newInstance();\n        const createActorWithMapper = (mapper) => {\n            const actor = vtkActor.newInstance();\n            actor.setMapper(mapper);\n            const property = vtkProperty.newInstance();\n            property.setColor(this._color[0] / 255, this._color[1] / 255, this._color[2] / 255);\n            actor.setProperty(property);\n            return actor;\n        };\n        if (this._format === MeshType.PLY) {\n            const mapper = vtkMapper.newInstance();\n            const reader = vtkPLYReader.newInstance();\n            reader.parseAsArrayBuffer(props.arrayBuffer);\n            mapper.setInputConnection(reader.getOutputPort());\n            this._actors.push(createActorWithMapper(mapper));\n        }\n        else if (this._format === MeshType.STL) {\n            const mapper = vtkMapper.newInstance();\n            const reader = vtkSTLReader.newInstance();\n            reader.parseAsArrayBuffer(props.arrayBuffer);\n            normals.setInputConnection(reader.getOutputPort());\n            mapper.setInputConnection(normals.getOutputPort());\n            this._actors.push(createActorWithMapper(mapper));\n        }\n        else if (this._format === MeshType.OBJ) {\n            const reader = vtkOBJReader.newInstance({\n                splitMode: props.materialUrl ? 'usemtl' : null,\n            });\n            reader.parseAsText(textDecoder.decode(props.arrayBuffer));\n            const size = reader.getNumberOfOutputPorts();\n            for (let i = 0; i < size; i++) {\n                const source = reader.getOutputData(i);\n                const mapper = vtkMapper.newInstance();\n                mapper.setInputData(source);\n                this._actors.push(createActorWithMapper(mapper));\n            }\n        }\n        else if (this._format === MeshType.VTP) {\n            const mapper = vtkMapper.newInstance();\n            const reader = vtkXMLPolyDataReader.newInstance();\n            reader.parseAsArrayBuffer(props.arrayBuffer);\n            mapper.setInputConnection(reader.getOutputPort());\n            this._actors.push(createActorWithMapper(mapper));\n        }\n        this.sizeInBytes = this._getSizeInBytes();\n    }\n    _getSizeInBytes() {\n        let size = 0;\n        for (let i = 0; i < this._actors.length; i++) {\n            const actor = this._actors[i];\n            const mapper = actor.getMapper();\n            const pd = mapper.getInputData();\n            const points = pd.getPoints();\n            const polys = pd.getPolys();\n            const pointsLength = points.getData().length;\n            const polysLength = polys.getData().length;\n            size += pointsLength * 4 + polysLength * 4;\n        }\n        return size;\n    }\n    get defaultActor() {\n        return this._actors[0];\n    }\n    get actors() {\n        return this._actors;\n    }\n    get color() {\n        return this._color;\n    }\n    get format() {\n        return this._format;\n    }\n}\n","import { Events, ImageQualityStatus } from '../../enums';\nimport eventTarget from '../../eventTarget';\nimport { triggerEvent } from '../../utilities';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nexport default class StreamingDynamicImageVolume extends BaseStreamingImageVolume {\n    constructor(imageVolumeProperties, streamingProperties) {\n        super(imageVolumeProperties, streamingProperties);\n        this._dimensionGroupNumber = 1;\n        this._loadedDimensionGroups = new Set();\n        this._getImageIdRequests = (imageIds, priority) => {\n            return this.getImageIdsRequests(imageIds, priority);\n        };\n        this.getImageLoadRequests = (priority) => {\n            const imageIds = this.getImageIdsToLoad();\n            return this._getImageIdRequests(imageIds, priority);\n        };\n        const { imageIdGroups, splittingTag } = imageVolumeProperties;\n        this._splittingTag = splittingTag;\n        this._imageIdGroups = imageIdGroups;\n        this.numDimensionGroups = this._imageIdGroups.length;\n        this.numTimePoints = this.numDimensionGroups;\n    }\n    _getImageIdsToLoad() {\n        const imageIdGroups = this._imageIdGroups;\n        const initialImageIdGroupIndex = this._dimensionGroupNumber - 1;\n        const imageIds = [...imageIdGroups[initialImageIdGroupIndex]];\n        let leftIndex = initialImageIdGroupIndex - 1;\n        let rightIndex = initialImageIdGroupIndex + 1;\n        while (leftIndex >= 0 || rightIndex < imageIdGroups.length) {\n            if (leftIndex >= 0) {\n                imageIds.push(...imageIdGroups[leftIndex--]);\n            }\n            if (rightIndex < imageIdGroups.length) {\n                imageIds.push(...imageIdGroups[rightIndex++]);\n            }\n        }\n        return imageIds;\n    }\n    getImageIdsToLoad() {\n        return this._getImageIdsToLoad();\n    }\n    get dimensionGroupNumber() {\n        return this._dimensionGroupNumber;\n    }\n    set timePointIndex(index) {\n        console.warn('Warning: timePointIndex is deprecated. Please use dimensionGroupNumber instead. Note that timePointIndex is zero-based while dimensionGroupNumber starts at 1.');\n        this.dimensionGroupNumber = index + 1;\n    }\n    set dimensionGroupNumber(dimensionGroupNumber) {\n        if (this._dimensionGroupNumber === dimensionGroupNumber) {\n            return;\n        }\n        this._dimensionGroupNumber = dimensionGroupNumber;\n        this.voxelManager.setDimensionGroupNumber(dimensionGroupNumber);\n        this.invalidateVolume(true);\n        triggerEvent(eventTarget, Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED, {\n            volumeId: this.volumeId,\n            dimensionGroupNumber: dimensionGroupNumber,\n            numDimensionGroups: this.numDimensionGroups,\n            imageIdGroupIndex: dimensionGroupNumber - 1,\n            numImageIdGroups: this.numDimensionGroups,\n            splittingTag: this.splittingTag,\n        });\n        triggerEvent(eventTarget, Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED, {\n            volumeId: this.volumeId,\n            timePointIndex: dimensionGroupNumber - 1,\n            numTimePoints: this.numDimensionGroups,\n            imageIdGroupIndex: dimensionGroupNumber - 1,\n            numImageIdGroups: this.numDimensionGroups,\n            splittingTag: this.splittingTag,\n        });\n    }\n    get timePointIndex() {\n        console.warn('Warning: timePointIndex is deprecated. Please use dimensionGroupNumber instead. Note that timePointIndex is zero-based while dimensionGroupNumber starts at 1.');\n        return this._dimensionGroupNumber - 1;\n    }\n    scroll(delta) {\n        const newDimensionGroupNumber = this._dimensionGroupNumber + delta;\n        if (newDimensionGroupNumber < 1) {\n            this.dimensionGroupNumber = this.numDimensionGroups;\n        }\n        else if (newDimensionGroupNumber > this.numDimensionGroups) {\n            this.dimensionGroupNumber = 1;\n        }\n        else {\n            this.dimensionGroupNumber = newDimensionGroupNumber;\n        }\n    }\n    getCurrentDimensionGroupImageIds() {\n        return this._imageIdGroups[this._dimensionGroupNumber - 1];\n    }\n    getCurrentTimePointImageIds() {\n        console.warn('Warning: getCurrentTimePointImageIds is deprecated. Please use getCurrentDimensionGroupImageIds instead.');\n        return this.getCurrentDimensionGroupImageIds();\n    }\n    flatImageIdIndexToTimePointIndex(flatImageIdIndex) {\n        console.warn('Warning: flatImageIdIndexToTimePointIndex is deprecated. Please use flatImageIdIndexToDimensionGroupNumber instead.');\n        return this.flatImageIdIndexToDimensionGroupNumber(flatImageIdIndex) - 1;\n    }\n    flatImageIdIndexToDimensionGroupNumber(flatImageIdIndex) {\n        return Math.floor(flatImageIdIndex / this._imageIdGroups[0].length) + 1;\n    }\n    flatImageIdIndexToImageIdIndex(flatImageIdIndex) {\n        return flatImageIdIndex % this._imageIdGroups[0].length;\n    }\n    get splittingTag() {\n        return this._splittingTag;\n    }\n    isTimePointLoaded(timePointIndex) {\n        console.warn('Warning: isTimePointLoaded is deprecated. Please use isDimensionGroupLoaded instead. Note that timePointIndex is zero-based while dimensionGroupNumber starts at 1.');\n        return this.isDimensionGroupLoaded(timePointIndex + 1);\n    }\n    isDimensionGroupLoaded(dimensionGroupNumber) {\n        return this._loadedDimensionGroups.has(dimensionGroupNumber);\n    }\n    markDimensionGroupAsLoaded(dimensionGroupNumber) {\n        this._loadedDimensionGroups.add(dimensionGroupNumber);\n        triggerEvent(eventTarget, Events.DYNAMIC_VOLUME_DIMENSION_GROUP_LOADED, {\n            volumeId: this.volumeId,\n            dimensionGroupNumber: dimensionGroupNumber,\n        });\n        triggerEvent(eventTarget, Events.DYNAMIC_VOLUME_TIME_POINT_LOADED, {\n            volumeId: this.volumeId,\n            timePointIndex: dimensionGroupNumber - 1,\n        });\n    }\n    checkTimePointCompletion(imageIdIndex) {\n        console.warn('Warning: checkTimePointCompletion is deprecated. Please use checkDimensionGroupCompletion instead.');\n        this.checkDimensionGroupCompletion(imageIdIndex);\n    }\n    checkDimensionGroupCompletion(imageIdIndex) {\n        const dimensionGroupNumber = this.flatImageIdIndexToDimensionGroupNumber(imageIdIndex);\n        const imageIdsInDimensionGroup = this._imageIdGroups[dimensionGroupNumber - 1];\n        const allLoaded = imageIdsInDimensionGroup.every((imageId) => {\n            const index = this.getImageIdIndex(imageId);\n            return this.cachedFrames[index] === ImageQualityStatus.FULL_RESOLUTION;\n        });\n        if (allLoaded && !this.isDimensionGroupLoaded(dimensionGroupNumber)) {\n            this.markDimensionGroupAsLoaded(dimensionGroupNumber);\n        }\n    }\n}\n","import BaseStreamingImageVolume from './BaseStreamingImageVolume';\nexport default class StreamingImageVolume extends BaseStreamingImageVolume {\n    constructor(imageVolumeProperties, streamingProperties) {\n        if (!imageVolumeProperties.imageIds) {\n            imageVolumeProperties.imageIds = streamingProperties.imageIds;\n        }\n        super(imageVolumeProperties, streamingProperties);\n        this.getImageIdsToLoad = () => {\n            const { imageIds } = this;\n            this.numFrames = imageIds.length;\n            return imageIds;\n        };\n    }\n    getScalarData() {\n        return this.voxelManager.getScalarData();\n    }\n    getImageLoadRequests(priority) {\n        const { imageIds } = this;\n        return this.getImageIdsRequests(imageIds, priority);\n    }\n}\n","export class Surface {\n    constructor(props) {\n        this._color = [200, 0, 0];\n        this.id = props.id;\n        this._points = props.points;\n        this._polys = props.polys;\n        this._color = props.color ?? this._color;\n        this.frameOfReferenceUID = props.frameOfReferenceUID;\n        this._segmentIndex = props.segmentIndex;\n        this.sizeInBytes = this._getSizeInBytes();\n        this._updateCentroid();\n        this._visible = true;\n    }\n    _getSizeInBytes() {\n        return this._points.length * 4 + this._polys.length * 4;\n    }\n    _updateCentroid() {\n        const numberOfPoints = this._points.length / 3;\n        let sumX = 0, sumY = 0, sumZ = 0;\n        for (let i = 0; i < this._points.length; i += 3) {\n            sumX += this._points[i];\n            sumY += this._points[i + 1];\n            sumZ += this._points[i + 2];\n        }\n        this._centroid = [\n            sumX / numberOfPoints,\n            sumY / numberOfPoints,\n            sumZ / numberOfPoints,\n        ];\n    }\n    get color() {\n        return this._color;\n    }\n    set color(color) {\n        this._color = color;\n    }\n    get points() {\n        return this._points;\n    }\n    set points(points) {\n        this._points = points;\n        this._updateCentroid();\n    }\n    get polys() {\n        return this._polys;\n    }\n    set polys(polys) {\n        this._polys = polys;\n    }\n    get segmentIndex() {\n        return this._segmentIndex;\n    }\n    get visible() {\n        return this._visible;\n    }\n    set visible(visible) {\n        this._visible = visible;\n    }\n    get centroid() {\n        return this._centroid;\n    }\n    get flatPointsArray() {\n        return this._points;\n    }\n    get totalNumberOfPoints() {\n        return this._points.length / 3;\n    }\n}\n","import { Cache } from './cache';\nimport ImageVolume from './classes/ImageVolume';\nimport { Surface } from './classes/Surface';\nimport { Mesh } from './classes/Mesh';\nimport StreamingImageVolume from './classes/StreamingImageVolume';\nimport StreamingDynamicImageVolume from './classes/StreamingDynamicImageVolume';\nexport { ImageVolume, Cache, Surface, Mesh, StreamingImageVolume, StreamingDynamicImageVolume, };\n","const backgroundColors = {\n    slicer3D: [160 / 255, 164 / 255, 217 / 255],\n};\nexport default backgroundColors;\n","const colormapsData = {\n    hotIron: {\n        name: 'Hot Iron',\n        numOfColors: 256,\n        colors: [\n            [0, 0, 0, 255],\n            [2, 0, 0, 255],\n            [4, 0, 0, 255],\n            [6, 0, 0, 255],\n            [8, 0, 0, 255],\n            [10, 0, 0, 255],\n            [12, 0, 0, 255],\n            [14, 0, 0, 255],\n            [16, 0, 0, 255],\n            [18, 0, 0, 255],\n            [20, 0, 0, 255],\n            [22, 0, 0, 255],\n            [24, 0, 0, 255],\n            [26, 0, 0, 255],\n            [28, 0, 0, 255],\n            [30, 0, 0, 255],\n            [32, 0, 0, 255],\n            [34, 0, 0, 255],\n            [36, 0, 0, 255],\n            [38, 0, 0, 255],\n            [40, 0, 0, 255],\n            [42, 0, 0, 255],\n            [44, 0, 0, 255],\n            [46, 0, 0, 255],\n            [48, 0, 0, 255],\n            [50, 0, 0, 255],\n            [52, 0, 0, 255],\n            [54, 0, 0, 255],\n            [56, 0, 0, 255],\n            [58, 0, 0, 255],\n            [60, 0, 0, 255],\n            [62, 0, 0, 255],\n            [64, 0, 0, 255],\n            [66, 0, 0, 255],\n            [68, 0, 0, 255],\n            [70, 0, 0, 255],\n            [72, 0, 0, 255],\n            [74, 0, 0, 255],\n            [76, 0, 0, 255],\n            [78, 0, 0, 255],\n            [80, 0, 0, 255],\n            [82, 0, 0, 255],\n            [84, 0, 0, 255],\n            [86, 0, 0, 255],\n            [88, 0, 0, 255],\n            [90, 0, 0, 255],\n            [92, 0, 0, 255],\n            [94, 0, 0, 255],\n            [96, 0, 0, 255],\n            [98, 0, 0, 255],\n            [100, 0, 0, 255],\n            [102, 0, 0, 255],\n            [104, 0, 0, 255],\n            [106, 0, 0, 255],\n            [108, 0, 0, 255],\n            [110, 0, 0, 255],\n            [112, 0, 0, 255],\n            [114, 0, 0, 255],\n            [116, 0, 0, 255],\n            [118, 0, 0, 255],\n            [120, 0, 0, 255],\n            [122, 0, 0, 255],\n            [124, 0, 0, 255],\n            [126, 0, 0, 255],\n            [128, 0, 0, 255],\n            [130, 0, 0, 255],\n            [132, 0, 0, 255],\n            [134, 0, 0, 255],\n            [136, 0, 0, 255],\n            [138, 0, 0, 255],\n            [140, 0, 0, 255],\n            [142, 0, 0, 255],\n            [144, 0, 0, 255],\n            [146, 0, 0, 255],\n            [148, 0, 0, 255],\n            [150, 0, 0, 255],\n            [152, 0, 0, 255],\n            [154, 0, 0, 255],\n            [156, 0, 0, 255],\n            [158, 0, 0, 255],\n            [160, 0, 0, 255],\n            [162, 0, 0, 255],\n            [164, 0, 0, 255],\n            [166, 0, 0, 255],\n            [168, 0, 0, 255],\n            [170, 0, 0, 255],\n            [172, 0, 0, 255],\n            [174, 0, 0, 255],\n            [176, 0, 0, 255],\n            [178, 0, 0, 255],\n            [180, 0, 0, 255],\n            [182, 0, 0, 255],\n            [184, 0, 0, 255],\n            [186, 0, 0, 255],\n            [188, 0, 0, 255],\n            [190, 0, 0, 255],\n            [192, 0, 0, 255],\n            [194, 0, 0, 255],\n            [196, 0, 0, 255],\n            [198, 0, 0, 255],\n            [200, 0, 0, 255],\n            [202, 0, 0, 255],\n            [204, 0, 0, 255],\n            [206, 0, 0, 255],\n            [208, 0, 0, 255],\n            [210, 0, 0, 255],\n            [212, 0, 0, 255],\n            [214, 0, 0, 255],\n            [216, 0, 0, 255],\n            [218, 0, 0, 255],\n            [220, 0, 0, 255],\n            [222, 0, 0, 255],\n            [224, 0, 0, 255],\n            [226, 0, 0, 255],\n            [228, 0, 0, 255],\n            [230, 0, 0, 255],\n            [232, 0, 0, 255],\n            [234, 0, 0, 255],\n            [236, 0, 0, 255],\n            [238, 0, 0, 255],\n            [240, 0, 0, 255],\n            [242, 0, 0, 255],\n            [244, 0, 0, 255],\n            [246, 0, 0, 255],\n            [248, 0, 0, 255],\n            [250, 0, 0, 255],\n            [252, 0, 0, 255],\n            [254, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 2, 0, 255],\n            [255, 4, 0, 255],\n            [255, 6, 0, 255],\n            [255, 8, 0, 255],\n            [255, 10, 0, 255],\n            [255, 12, 0, 255],\n            [255, 14, 0, 255],\n            [255, 16, 0, 255],\n            [255, 18, 0, 255],\n            [255, 20, 0, 255],\n            [255, 22, 0, 255],\n            [255, 24, 0, 255],\n            [255, 26, 0, 255],\n            [255, 28, 0, 255],\n            [255, 30, 0, 255],\n            [255, 32, 0, 255],\n            [255, 34, 0, 255],\n            [255, 36, 0, 255],\n            [255, 38, 0, 255],\n            [255, 40, 0, 255],\n            [255, 42, 0, 255],\n            [255, 44, 0, 255],\n            [255, 46, 0, 255],\n            [255, 48, 0, 255],\n            [255, 50, 0, 255],\n            [255, 52, 0, 255],\n            [255, 54, 0, 255],\n            [255, 56, 0, 255],\n            [255, 58, 0, 255],\n            [255, 60, 0, 255],\n            [255, 62, 0, 255],\n            [255, 64, 0, 255],\n            [255, 66, 0, 255],\n            [255, 68, 0, 255],\n            [255, 70, 0, 255],\n            [255, 72, 0, 255],\n            [255, 74, 0, 255],\n            [255, 76, 0, 255],\n            [255, 78, 0, 255],\n            [255, 80, 0, 255],\n            [255, 82, 0, 255],\n            [255, 84, 0, 255],\n            [255, 86, 0, 255],\n            [255, 88, 0, 255],\n            [255, 90, 0, 255],\n            [255, 92, 0, 255],\n            [255, 94, 0, 255],\n            [255, 96, 0, 255],\n            [255, 98, 0, 255],\n            [255, 100, 0, 255],\n            [255, 102, 0, 255],\n            [255, 104, 0, 255],\n            [255, 106, 0, 255],\n            [255, 108, 0, 255],\n            [255, 110, 0, 255],\n            [255, 112, 0, 255],\n            [255, 114, 0, 255],\n            [255, 116, 0, 255],\n            [255, 118, 0, 255],\n            [255, 120, 0, 255],\n            [255, 122, 0, 255],\n            [255, 124, 0, 255],\n            [255, 126, 0, 255],\n            [255, 128, 4, 255],\n            [255, 130, 8, 255],\n            [255, 132, 12, 255],\n            [255, 134, 16, 255],\n            [255, 136, 20, 255],\n            [255, 138, 24, 255],\n            [255, 140, 28, 255],\n            [255, 142, 32, 255],\n            [255, 144, 36, 255],\n            [255, 146, 40, 255],\n            [255, 148, 44, 255],\n            [255, 150, 48, 255],\n            [255, 152, 52, 255],\n            [255, 154, 56, 255],\n            [255, 156, 60, 255],\n            [255, 158, 64, 255],\n            [255, 160, 68, 255],\n            [255, 162, 72, 255],\n            [255, 164, 76, 255],\n            [255, 166, 80, 255],\n            [255, 168, 84, 255],\n            [255, 170, 88, 255],\n            [255, 172, 92, 255],\n            [255, 174, 96, 255],\n            [255, 176, 100, 255],\n            [255, 178, 104, 255],\n            [255, 180, 108, 255],\n            [255, 182, 112, 255],\n            [255, 184, 116, 255],\n            [255, 186, 120, 255],\n            [255, 188, 124, 255],\n            [255, 190, 128, 255],\n            [255, 192, 132, 255],\n            [255, 194, 136, 255],\n            [255, 196, 140, 255],\n            [255, 198, 144, 255],\n            [255, 200, 148, 255],\n            [255, 202, 152, 255],\n            [255, 204, 156, 255],\n            [255, 206, 160, 255],\n            [255, 208, 164, 255],\n            [255, 210, 168, 255],\n            [255, 212, 172, 255],\n            [255, 214, 176, 255],\n            [255, 216, 180, 255],\n            [255, 218, 184, 255],\n            [255, 220, 188, 255],\n            [255, 222, 192, 255],\n            [255, 224, 196, 255],\n            [255, 226, 200, 255],\n            [255, 228, 204, 255],\n            [255, 230, 208, 255],\n            [255, 232, 212, 255],\n            [255, 234, 216, 255],\n            [255, 236, 220, 255],\n            [255, 238, 224, 255],\n            [255, 240, 228, 255],\n            [255, 242, 232, 255],\n            [255, 244, 236, 255],\n            [255, 246, 240, 255],\n            [255, 248, 244, 255],\n            [255, 250, 248, 255],\n            [255, 252, 252, 255],\n            [255, 255, 255, 255],\n        ],\n    },\n    pet: {\n        name: 'PET',\n        numColors: 256,\n        colors: [\n            [0, 0, 0, 255],\n            [0, 2, 1, 255],\n            [0, 4, 3, 255],\n            [0, 6, 5, 255],\n            [0, 8, 7, 255],\n            [0, 10, 9, 255],\n            [0, 12, 11, 255],\n            [0, 14, 13, 255],\n            [0, 16, 15, 255],\n            [0, 18, 17, 255],\n            [0, 20, 19, 255],\n            [0, 22, 21, 255],\n            [0, 24, 23, 255],\n            [0, 26, 25, 255],\n            [0, 28, 27, 255],\n            [0, 30, 29, 255],\n            [0, 32, 31, 255],\n            [0, 34, 33, 255],\n            [0, 36, 35, 255],\n            [0, 38, 37, 255],\n            [0, 40, 39, 255],\n            [0, 42, 41, 255],\n            [0, 44, 43, 255],\n            [0, 46, 45, 255],\n            [0, 48, 47, 255],\n            [0, 50, 49, 255],\n            [0, 52, 51, 255],\n            [0, 54, 53, 255],\n            [0, 56, 55, 255],\n            [0, 58, 57, 255],\n            [0, 60, 59, 255],\n            [0, 62, 61, 255],\n            [0, 65, 63, 255],\n            [0, 67, 65, 255],\n            [0, 69, 67, 255],\n            [0, 71, 69, 255],\n            [0, 73, 71, 255],\n            [0, 75, 73, 255],\n            [0, 77, 75, 255],\n            [0, 79, 77, 255],\n            [0, 81, 79, 255],\n            [0, 83, 81, 255],\n            [0, 85, 83, 255],\n            [0, 87, 85, 255],\n            [0, 89, 87, 255],\n            [0, 91, 89, 255],\n            [0, 93, 91, 255],\n            [0, 95, 93, 255],\n            [0, 97, 95, 255],\n            [0, 99, 97, 255],\n            [0, 101, 99, 255],\n            [0, 103, 101, 255],\n            [0, 105, 103, 255],\n            [0, 107, 105, 255],\n            [0, 109, 107, 255],\n            [0, 111, 109, 255],\n            [0, 113, 111, 255],\n            [0, 115, 113, 255],\n            [0, 117, 115, 255],\n            [0, 119, 117, 255],\n            [0, 121, 119, 255],\n            [0, 123, 121, 255],\n            [0, 125, 123, 255],\n            [0, 128, 125, 255],\n            [1, 126, 127, 255],\n            [3, 124, 129, 255],\n            [5, 122, 131, 255],\n            [7, 120, 133, 255],\n            [9, 118, 135, 255],\n            [11, 116, 137, 255],\n            [13, 114, 139, 255],\n            [15, 112, 141, 255],\n            [17, 110, 143, 255],\n            [19, 108, 145, 255],\n            [21, 106, 147, 255],\n            [23, 104, 149, 255],\n            [25, 102, 151, 255],\n            [27, 100, 153, 255],\n            [29, 98, 155, 255],\n            [31, 96, 157, 255],\n            [33, 94, 159, 255],\n            [35, 92, 161, 255],\n            [37, 90, 163, 255],\n            [39, 88, 165, 255],\n            [41, 86, 167, 255],\n            [43, 84, 169, 255],\n            [45, 82, 171, 255],\n            [47, 80, 173, 255],\n            [49, 78, 175, 255],\n            [51, 76, 177, 255],\n            [53, 74, 179, 255],\n            [55, 72, 181, 255],\n            [57, 70, 183, 255],\n            [59, 68, 185, 255],\n            [61, 66, 187, 255],\n            [63, 64, 189, 255],\n            [65, 63, 191, 255],\n            [67, 61, 193, 255],\n            [69, 59, 195, 255],\n            [71, 57, 197, 255],\n            [73, 55, 199, 255],\n            [75, 53, 201, 255],\n            [77, 51, 203, 255],\n            [79, 49, 205, 255],\n            [81, 47, 207, 255],\n            [83, 45, 209, 255],\n            [85, 43, 211, 255],\n            [86, 41, 213, 255],\n            [88, 39, 215, 255],\n            [90, 37, 217, 255],\n            [92, 35, 219, 255],\n            [94, 33, 221, 255],\n            [96, 31, 223, 255],\n            [98, 29, 225, 255],\n            [100, 27, 227, 255],\n            [102, 25, 229, 255],\n            [104, 23, 231, 255],\n            [106, 21, 233, 255],\n            [108, 19, 235, 255],\n            [110, 17, 237, 255],\n            [112, 15, 239, 255],\n            [114, 13, 241, 255],\n            [116, 11, 243, 255],\n            [118, 9, 245, 255],\n            [120, 7, 247, 255],\n            [122, 5, 249, 255],\n            [124, 3, 251, 255],\n            [126, 1, 253, 255],\n            [128, 0, 255, 255],\n            [130, 2, 252, 255],\n            [132, 4, 248, 255],\n            [134, 6, 244, 255],\n            [136, 8, 240, 255],\n            [138, 10, 236, 255],\n            [140, 12, 232, 255],\n            [142, 14, 228, 255],\n            [144, 16, 224, 255],\n            [146, 18, 220, 255],\n            [148, 20, 216, 255],\n            [150, 22, 212, 255],\n            [152, 24, 208, 255],\n            [154, 26, 204, 255],\n            [156, 28, 200, 255],\n            [158, 30, 196, 255],\n            [160, 32, 192, 255],\n            [162, 34, 188, 255],\n            [164, 36, 184, 255],\n            [166, 38, 180, 255],\n            [168, 40, 176, 255],\n            [170, 42, 172, 255],\n            [171, 44, 168, 255],\n            [173, 46, 164, 255],\n            [175, 48, 160, 255],\n            [177, 50, 156, 255],\n            [179, 52, 152, 255],\n            [181, 54, 148, 255],\n            [183, 56, 144, 255],\n            [185, 58, 140, 255],\n            [187, 60, 136, 255],\n            [189, 62, 132, 255],\n            [191, 64, 128, 255],\n            [193, 66, 124, 255],\n            [195, 68, 120, 255],\n            [197, 70, 116, 255],\n            [199, 72, 112, 255],\n            [201, 74, 108, 255],\n            [203, 76, 104, 255],\n            [205, 78, 100, 255],\n            [207, 80, 96, 255],\n            [209, 82, 92, 255],\n            [211, 84, 88, 255],\n            [213, 86, 84, 255],\n            [215, 88, 80, 255],\n            [217, 90, 76, 255],\n            [219, 92, 72, 255],\n            [221, 94, 68, 255],\n            [223, 96, 64, 255],\n            [225, 98, 60, 255],\n            [227, 100, 56, 255],\n            [229, 102, 52, 255],\n            [231, 104, 48, 255],\n            [233, 106, 44, 255],\n            [235, 108, 40, 255],\n            [237, 110, 36, 255],\n            [239, 112, 32, 255],\n            [241, 114, 28, 255],\n            [243, 116, 24, 255],\n            [245, 118, 20, 255],\n            [247, 120, 16, 255],\n            [249, 122, 12, 255],\n            [251, 124, 8, 255],\n            [253, 126, 4, 255],\n            [255, 128, 0, 255],\n            [255, 130, 4, 255],\n            [255, 132, 8, 255],\n            [255, 134, 12, 255],\n            [255, 136, 16, 255],\n            [255, 138, 20, 255],\n            [255, 140, 24, 255],\n            [255, 142, 28, 255],\n            [255, 144, 32, 255],\n            [255, 146, 36, 255],\n            [255, 148, 40, 255],\n            [255, 150, 44, 255],\n            [255, 152, 48, 255],\n            [255, 154, 52, 255],\n            [255, 156, 56, 255],\n            [255, 158, 60, 255],\n            [255, 160, 64, 255],\n            [255, 162, 68, 255],\n            [255, 164, 72, 255],\n            [255, 166, 76, 255],\n            [255, 168, 80, 255],\n            [255, 170, 85, 255],\n            [255, 172, 89, 255],\n            [255, 174, 93, 255],\n            [255, 176, 97, 255],\n            [255, 178, 101, 255],\n            [255, 180, 105, 255],\n            [255, 182, 109, 255],\n            [255, 184, 113, 255],\n            [255, 186, 117, 255],\n            [255, 188, 121, 255],\n            [255, 190, 125, 255],\n            [255, 192, 129, 255],\n            [255, 194, 133, 255],\n            [255, 196, 137, 255],\n            [255, 198, 141, 255],\n            [255, 200, 145, 255],\n            [255, 202, 149, 255],\n            [255, 204, 153, 255],\n            [255, 206, 157, 255],\n            [255, 208, 161, 255],\n            [255, 210, 165, 255],\n            [255, 212, 170, 255],\n            [255, 214, 174, 255],\n            [255, 216, 178, 255],\n            [255, 218, 182, 255],\n            [255, 220, 186, 255],\n            [255, 222, 190, 255],\n            [255, 224, 194, 255],\n            [255, 226, 198, 255],\n            [255, 228, 202, 255],\n            [255, 230, 206, 255],\n            [255, 232, 210, 255],\n            [255, 234, 214, 255],\n            [255, 236, 218, 255],\n            [255, 238, 222, 255],\n            [255, 240, 226, 255],\n            [255, 242, 230, 255],\n            [255, 244, 234, 255],\n            [255, 246, 238, 255],\n            [255, 248, 242, 255],\n            [255, 250, 246, 255],\n            [255, 252, 250, 255],\n            [255, 255, 255, 255],\n        ],\n    },\n    hotMetalBlue: {\n        name: 'Hot Metal Blue',\n        numColors: 256,\n        colors: [\n            [0, 0, 0, 255],\n            [0, 0, 2, 255],\n            [0, 0, 4, 255],\n            [0, 0, 6, 255],\n            [0, 0, 8, 255],\n            [0, 0, 10, 255],\n            [0, 0, 12, 255],\n            [0, 0, 14, 255],\n            [0, 0, 16, 255],\n            [0, 0, 17, 255],\n            [0, 0, 19, 255],\n            [0, 0, 21, 255],\n            [0, 0, 23, 255],\n            [0, 0, 25, 255],\n            [0, 0, 27, 255],\n            [0, 0, 29, 255],\n            [0, 0, 31, 255],\n            [0, 0, 33, 255],\n            [0, 0, 35, 255],\n            [0, 0, 37, 255],\n            [0, 0, 39, 255],\n            [0, 0, 41, 255],\n            [0, 0, 43, 255],\n            [0, 0, 45, 255],\n            [0, 0, 47, 255],\n            [0, 0, 49, 255],\n            [0, 0, 51, 255],\n            [0, 0, 53, 255],\n            [0, 0, 55, 255],\n            [0, 0, 57, 255],\n            [0, 0, 59, 255],\n            [0, 0, 61, 255],\n            [0, 0, 63, 255],\n            [0, 0, 65, 255],\n            [0, 0, 67, 255],\n            [0, 0, 69, 255],\n            [0, 0, 71, 255],\n            [0, 0, 73, 255],\n            [0, 0, 75, 255],\n            [0, 0, 77, 255],\n            [0, 0, 79, 255],\n            [0, 0, 81, 255],\n            [0, 0, 83, 255],\n            [0, 0, 84, 255],\n            [0, 0, 86, 255],\n            [0, 0, 88, 255],\n            [0, 0, 90, 255],\n            [0, 0, 92, 255],\n            [0, 0, 94, 255],\n            [0, 0, 96, 255],\n            [0, 0, 98, 255],\n            [0, 0, 100, 255],\n            [0, 0, 102, 255],\n            [0, 0, 104, 255],\n            [0, 0, 106, 255],\n            [0, 0, 108, 255],\n            [0, 0, 110, 255],\n            [0, 0, 112, 255],\n            [0, 0, 114, 255],\n            [0, 0, 116, 255],\n            [0, 0, 117, 255],\n            [0, 0, 119, 255],\n            [0, 0, 121, 255],\n            [0, 0, 123, 255],\n            [0, 0, 125, 255],\n            [0, 0, 127, 255],\n            [0, 0, 129, 255],\n            [0, 0, 131, 255],\n            [0, 0, 133, 255],\n            [0, 0, 135, 255],\n            [0, 0, 137, 255],\n            [0, 0, 139, 255],\n            [0, 0, 141, 255],\n            [0, 0, 143, 255],\n            [0, 0, 145, 255],\n            [0, 0, 147, 255],\n            [0, 0, 149, 255],\n            [0, 0, 151, 255],\n            [0, 0, 153, 255],\n            [0, 0, 155, 255],\n            [0, 0, 157, 255],\n            [0, 0, 159, 255],\n            [0, 0, 161, 255],\n            [0, 0, 163, 255],\n            [0, 0, 165, 255],\n            [0, 0, 167, 255],\n            [3, 0, 169, 255],\n            [6, 0, 171, 255],\n            [9, 0, 173, 255],\n            [12, 0, 175, 255],\n            [15, 0, 177, 255],\n            [18, 0, 179, 255],\n            [21, 0, 181, 255],\n            [24, 0, 183, 255],\n            [26, 0, 184, 255],\n            [29, 0, 186, 255],\n            [32, 0, 188, 255],\n            [35, 0, 190, 255],\n            [38, 0, 192, 255],\n            [41, 0, 194, 255],\n            [44, 0, 196, 255],\n            [47, 0, 198, 255],\n            [50, 0, 200, 255],\n            [52, 0, 197, 255],\n            [55, 0, 194, 255],\n            [57, 0, 191, 255],\n            [59, 0, 188, 255],\n            [62, 0, 185, 255],\n            [64, 0, 182, 255],\n            [66, 0, 179, 255],\n            [69, 0, 176, 255],\n            [71, 0, 174, 255],\n            [74, 0, 171, 255],\n            [76, 0, 168, 255],\n            [78, 0, 165, 255],\n            [81, 0, 162, 255],\n            [83, 0, 159, 255],\n            [85, 0, 156, 255],\n            [88, 0, 153, 255],\n            [90, 0, 150, 255],\n            [93, 2, 144, 255],\n            [96, 4, 138, 255],\n            [99, 6, 132, 255],\n            [102, 8, 126, 255],\n            [105, 9, 121, 255],\n            [108, 11, 115, 255],\n            [111, 13, 109, 255],\n            [114, 15, 103, 255],\n            [116, 17, 97, 255],\n            [119, 19, 91, 255],\n            [122, 21, 85, 255],\n            [125, 23, 79, 255],\n            [128, 24, 74, 255],\n            [131, 26, 68, 255],\n            [134, 28, 62, 255],\n            [137, 30, 56, 255],\n            [140, 32, 50, 255],\n            [143, 34, 47, 255],\n            [146, 36, 44, 255],\n            [149, 38, 41, 255],\n            [152, 40, 38, 255],\n            [155, 41, 35, 255],\n            [158, 43, 32, 255],\n            [161, 45, 29, 255],\n            [164, 47, 26, 255],\n            [166, 49, 24, 255],\n            [169, 51, 21, 255],\n            [172, 53, 18, 255],\n            [175, 55, 15, 255],\n            [178, 56, 12, 255],\n            [181, 58, 9, 255],\n            [184, 60, 6, 255],\n            [187, 62, 3, 255],\n            [190, 64, 0, 255],\n            [194, 66, 0, 255],\n            [198, 68, 0, 255],\n            [201, 70, 0, 255],\n            [205, 72, 0, 255],\n            [209, 73, 0, 255],\n            [213, 75, 0, 255],\n            [217, 77, 0, 255],\n            [221, 79, 0, 255],\n            [224, 81, 0, 255],\n            [228, 83, 0, 255],\n            [232, 85, 0, 255],\n            [236, 87, 0, 255],\n            [240, 88, 0, 255],\n            [244, 90, 0, 255],\n            [247, 92, 0, 255],\n            [251, 94, 0, 255],\n            [255, 96, 0, 255],\n            [255, 98, 3, 255],\n            [255, 100, 6, 255],\n            [255, 102, 9, 255],\n            [255, 104, 12, 255],\n            [255, 105, 15, 255],\n            [255, 107, 18, 255],\n            [255, 109, 21, 255],\n            [255, 111, 24, 255],\n            [255, 113, 26, 255],\n            [255, 115, 29, 255],\n            [255, 117, 32, 255],\n            [255, 119, 35, 255],\n            [255, 120, 38, 255],\n            [255, 122, 41, 255],\n            [255, 124, 44, 255],\n            [255, 126, 47, 255],\n            [255, 128, 50, 255],\n            [255, 130, 53, 255],\n            [255, 132, 56, 255],\n            [255, 134, 59, 255],\n            [255, 136, 62, 255],\n            [255, 137, 65, 255],\n            [255, 139, 68, 255],\n            [255, 141, 71, 255],\n            [255, 143, 74, 255],\n            [255, 145, 76, 255],\n            [255, 147, 79, 255],\n            [255, 149, 82, 255],\n            [255, 151, 85, 255],\n            [255, 152, 88, 255],\n            [255, 154, 91, 255],\n            [255, 156, 94, 255],\n            [255, 158, 97, 255],\n            [255, 160, 100, 255],\n            [255, 162, 103, 255],\n            [255, 164, 106, 255],\n            [255, 166, 109, 255],\n            [255, 168, 112, 255],\n            [255, 169, 115, 255],\n            [255, 171, 118, 255],\n            [255, 173, 121, 255],\n            [255, 175, 124, 255],\n            [255, 177, 126, 255],\n            [255, 179, 129, 255],\n            [255, 181, 132, 255],\n            [255, 183, 135, 255],\n            [255, 184, 138, 255],\n            [255, 186, 141, 255],\n            [255, 188, 144, 255],\n            [255, 190, 147, 255],\n            [255, 192, 150, 255],\n            [255, 194, 153, 255],\n            [255, 196, 156, 255],\n            [255, 198, 159, 255],\n            [255, 200, 162, 255],\n            [255, 201, 165, 255],\n            [255, 203, 168, 255],\n            [255, 205, 171, 255],\n            [255, 207, 174, 255],\n            [255, 209, 176, 255],\n            [255, 211, 179, 255],\n            [255, 213, 182, 255],\n            [255, 215, 185, 255],\n            [255, 216, 188, 255],\n            [255, 218, 191, 255],\n            [255, 220, 194, 255],\n            [255, 222, 197, 255],\n            [255, 224, 200, 255],\n            [255, 226, 203, 255],\n            [255, 228, 206, 255],\n            [255, 229, 210, 255],\n            [255, 231, 213, 255],\n            [255, 233, 216, 255],\n            [255, 235, 219, 255],\n            [255, 237, 223, 255],\n            [255, 239, 226, 255],\n            [255, 240, 229, 255],\n            [255, 242, 232, 255],\n            [255, 244, 236, 255],\n            [255, 246, 239, 255],\n            [255, 248, 242, 255],\n            [255, 250, 245, 255],\n            [255, 251, 249, 255],\n            [255, 253, 252, 255],\n            [255, 255, 255, 255],\n        ],\n    },\n    pet20Step: {\n        name: 'PET 20 Step',\n        numColors: 256,\n        colors: [\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [0, 0, 0, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [96, 0, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 80, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [48, 48, 112, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [80, 80, 128, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [96, 96, 176, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [112, 112, 192, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [128, 128, 224, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 96, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [48, 144, 48, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [80, 192, 80, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [64, 224, 64, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [224, 224, 80, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 208, 96, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 176, 64, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [208, 144, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [192, 96, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [176, 48, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 0, 0, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n            [255, 255, 255, 255],\n        ],\n    },\n    gray: {\n        name: 'Gray',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n        },\n    },\n    jet: {\n        name: 'Jet',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [0.35, 0, 0],\n                [0.66, 1, 1],\n                [0.89, 1, 1],\n                [1, 0.5, 0.5],\n            ],\n            green: [\n                [0, 0, 0],\n                [0.125, 0, 0],\n                [0.375, 1, 1],\n                [0.64, 1, 1],\n                [0.91, 0, 0],\n                [1, 0, 0],\n            ],\n            blue: [\n                [0, 0.5, 0.5],\n                [0.11, 1, 1],\n                [0.34, 1, 1],\n                [0.65, 0, 0],\n                [1, 0, 0],\n            ],\n        },\n    },\n    hsv: {\n        name: 'HSV',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 1, 1],\n                [0.15873, 1, 1],\n                [0.174603, 0.96875, 0.96875],\n                [0.333333, 0.03125, 0.03125],\n                [0.349206, 0, 0],\n                [0.666667, 0, 0],\n                [0.68254, 0.03125, 0.03125],\n                [0.84127, 0.96875, 0.96875],\n                [0.857143, 1, 1],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [0.15873, 0.9375, 0.9375],\n                [0.174603, 1, 1],\n                [0.507937, 1, 1],\n                [0.666667, 0.0625, 0.0625],\n                [0.68254, 0, 0],\n                [1, 0, 0],\n            ],\n            blue: [\n                [0, 0, 0],\n                [0.333333, 0, 0],\n                [0.349206, 0.0625, 0.0625],\n                [0.507937, 1, 1],\n                [0.84127, 1, 1],\n                [0.857143, 0.9375, 0.9375],\n                [1, 0.09375, 0.09375],\n            ],\n        },\n    },\n    hot: {\n        name: 'Hot',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0.0416, 0.0416],\n                [0.365079, 1, 1],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [0.365079, 0, 0],\n                [0.746032, 1, 1],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 0, 0],\n                [0.746032, 0, 0],\n                [1, 1, 1],\n            ],\n        },\n    },\n    cool: {\n        name: 'Cool',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 1, 1],\n                [1, 0, 0],\n            ],\n            blue: [\n                [0, 1, 1],\n                [1, 1, 1],\n            ],\n        },\n    },\n    spring: {\n        name: 'Spring',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 1, 1],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 1, 1],\n                [1, 0, 0],\n            ],\n        },\n    },\n    summer: {\n        name: 'Summer',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0.5, 0.5],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 0.4, 0.4],\n                [1, 0.4, 0.4],\n            ],\n        },\n    },\n    autumn: {\n        name: 'Autumn',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 1, 1],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 0, 0],\n                [1, 0, 0],\n            ],\n        },\n    },\n    winter: {\n        name: 'Winter',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [1, 0, 0],\n            ],\n            green: [\n                [0, 0, 0],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 1, 1],\n                [1, 0.5, 0.5],\n            ],\n        },\n    },\n    bone: {\n        name: 'Bone',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [0.746032, 0.652778, 0.652778],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [0.365079, 0.319444, 0.319444],\n                [0.746032, 0.777778, 0.777778],\n                [1, 1, 1],\n            ],\n            blue: [\n                [0, 0, 0],\n                [0.365079, 0.444444, 0.444444],\n                [1, 1, 1],\n            ],\n        },\n    },\n    copper: {\n        name: 'Copper',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [0.809524, 1, 1],\n                [1, 1, 1],\n            ],\n            green: [\n                [0, 0, 0],\n                [1, 0.7812, 0.7812],\n            ],\n            blue: [\n                [0, 0, 0],\n                [1, 0.4975, 0.4975],\n            ],\n        },\n    },\n    spectral: {\n        name: 'Spectral',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0, 0],\n                [0.05, 0.4667, 0.4667],\n                [0.1, 0.5333, 0.5333],\n                [0.15, 0, 0],\n                [0.2, 0, 0],\n                [0.25, 0, 0],\n                [0.3, 0, 0],\n                [0.35, 0, 0],\n                [0.4, 0, 0],\n                [0.45, 0, 0],\n                [0.5, 0, 0],\n                [0.55, 0, 0],\n                [0.6, 0, 0],\n                [0.65, 0.7333, 0.7333],\n                [0.7, 0.9333, 0.9333],\n                [0.75, 1, 1],\n                [0.8, 1, 1],\n                [0.85, 1, 1],\n                [0.9, 0.8667, 0.8667],\n                [0.95, 0.8, 0.8],\n                [1, 0.8, 0.8],\n            ],\n            green: [\n                [0, 0, 0],\n                [0.05, 0, 0],\n                [0.1, 0, 0],\n                [0.15, 0, 0],\n                [0.2, 0, 0],\n                [0.25, 0.4667, 0.4667],\n                [0.3, 0.6, 0.6],\n                [0.35, 0.6667, 0.6667],\n                [0.4, 0.6667, 0.6667],\n                [0.45, 0.6, 0.6],\n                [0.5, 0.7333, 0.7333],\n                [0.55, 0.8667, 0.8667],\n                [0.6, 1, 1],\n                [0.65, 1, 1],\n                [0.7, 0.9333, 0.9333],\n                [0.75, 0.8, 0.8],\n                [0.8, 0.6, 0.6],\n                [0.85, 0, 0],\n                [0.9, 0, 0],\n                [0.95, 0, 0],\n                [1, 0.8, 0.8],\n            ],\n            blue: [\n                [0, 0, 0],\n                [0.05, 0.5333, 0.5333],\n                [0.1, 0.6, 0.6],\n                [0.15, 0.6667, 0.6667],\n                [0.2, 0.8667, 0.8667],\n                [0.25, 0.8667, 0.8667],\n                [0.3, 0.8667, 0.8667],\n                [0.35, 0.6667, 0.6667],\n                [0.4, 0.5333, 0.5333],\n                [0.45, 0, 0],\n                [0.5, 0, 0],\n                [0.55, 0, 0],\n                [0.6, 0, 0],\n                [0.65, 0, 0],\n                [0.7, 0, 0],\n                [0.75, 0, 0],\n                [0.8, 0, 0],\n                [0.85, 0, 0],\n                [0.9, 0, 0],\n                [0.95, 0, 0],\n                [1, 0.8, 0.8],\n            ],\n        },\n    },\n    coolwarm: {\n        name: 'CoolWarm',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0.2298057, 0.2298057],\n                [0.03125, 0.26623388, 0.26623388],\n                [0.0625, 0.30386891, 0.30386891],\n                [0.09375, 0.342804478, 0.342804478],\n                [0.125, 0.38301334, 0.38301334],\n                [0.15625, 0.424369608, 0.424369608],\n                [0.1875, 0.46666708, 0.46666708],\n                [0.21875, 0.509635204, 0.509635204],\n                [0.25, 0.552953156, 0.552953156],\n                [0.28125, 0.596262162, 0.596262162],\n                [0.3125, 0.639176211, 0.639176211],\n                [0.34375, 0.681291281, 0.681291281],\n                [0.375, 0.722193294, 0.722193294],\n                [0.40625, 0.761464949, 0.761464949],\n                [0.4375, 0.798691636, 0.798691636],\n                [0.46875, 0.833466556, 0.833466556],\n                [0.5, 0.865395197, 0.865395197],\n                [0.53125, 0.897787179, 0.897787179],\n                [0.5625, 0.924127593, 0.924127593],\n                [0.59375, 0.944468518, 0.944468518],\n                [0.625, 0.958852946, 0.958852946],\n                [0.65625, 0.96732803, 0.96732803],\n                [0.6875, 0.969954137, 0.969954137],\n                [0.71875, 0.966811177, 0.966811177],\n                [0.75, 0.958003065, 0.958003065],\n                [0.78125, 0.943660866, 0.943660866],\n                [0.8125, 0.923944917, 0.923944917],\n                [0.84375, 0.89904617, 0.89904617],\n                [0.875, 0.869186849, 0.869186849],\n                [0.90625, 0.834620542, 0.834620542],\n                [0.9375, 0.795631745, 0.795631745],\n                [0.96875, 0.752534934, 0.752534934],\n                [1, 0.705673158, 0.705673158],\n            ],\n            green: [\n                [0, 0.298717966, 0.298717966],\n                [0.03125, 0.353094838, 0.353094838],\n                [0.0625, 0.406535296, 0.406535296],\n                [0.09375, 0.458757618, 0.458757618],\n                [0.125, 0.50941904, 0.50941904],\n                [0.15625, 0.558148092, 0.558148092],\n                [0.1875, 0.604562568, 0.604562568],\n                [0.21875, 0.648280772, 0.648280772],\n                [0.25, 0.688929332, 0.688929332],\n                [0.28125, 0.726149107, 0.726149107],\n                [0.3125, 0.759599947, 0.759599947],\n                [0.34375, 0.788964712, 0.788964712],\n                [0.375, 0.813952739, 0.813952739],\n                [0.40625, 0.834302879, 0.834302879],\n                [0.4375, 0.849786142, 0.849786142],\n                [0.46875, 0.860207984, 0.860207984],\n                [0.5, 0.86541021, 0.86541021],\n                [0.53125, 0.848937047, 0.848937047],\n                [0.5625, 0.827384882, 0.827384882],\n                [0.59375, 0.800927443, 0.800927443],\n                [0.625, 0.769767752, 0.769767752],\n                [0.65625, 0.734132809, 0.734132809],\n                [0.6875, 0.694266682, 0.694266682],\n                [0.71875, 0.650421156, 0.650421156],\n                [0.75, 0.602842431, 0.602842431],\n                [0.78125, 0.551750968, 0.551750968],\n                [0.8125, 0.49730856, 0.49730856],\n                [0.84375, 0.439559467, 0.439559467],\n                [0.875, 0.378313092, 0.378313092],\n                [0.90625, 0.312874446, 0.312874446],\n                [0.9375, 0.24128379, 0.24128379],\n                [0.96875, 0.157246067, 0.157246067],\n                [1, 0.01555616, 0.01555616],\n            ],\n            blue: [\n                [0, 0.753683153, 0.753683153],\n                [0.03125, 0.801466763, 0.801466763],\n                [0.0625, 0.84495867, 0.84495867],\n                [0.09375, 0.883725899, 0.883725899],\n                [0.125, 0.917387822, 0.917387822],\n                [0.15625, 0.945619588, 0.945619588],\n                [0.1875, 0.968154911, 0.968154911],\n                [0.21875, 0.98478814, 0.98478814],\n                [0.25, 0.995375608, 0.995375608],\n                [0.28125, 0.999836203, 0.999836203],\n                [0.3125, 0.998151185, 0.998151185],\n                [0.34375, 0.990363227, 0.990363227],\n                [0.375, 0.976574709, 0.976574709],\n                [0.40625, 0.956945269, 0.956945269],\n                [0.4375, 0.931688648, 0.931688648],\n                [0.46875, 0.901068838, 0.901068838],\n                [0.5, 0.865395561, 0.865395561],\n                [0.53125, 0.820880546, 0.820880546],\n                [0.5625, 0.774508472, 0.774508472],\n                [0.59375, 0.726736146, 0.726736146],\n                [0.625, 0.678007945, 0.678007945],\n                [0.65625, 0.628751763, 0.628751763],\n                [0.6875, 0.579375448, 0.579375448],\n                [0.71875, 0.530263762, 0.530263762],\n                [0.75, 0.481775914, 0.481775914],\n                [0.78125, 0.434243684, 0.434243684],\n                [0.8125, 0.387970225, 0.387970225],\n                [0.84375, 0.343229596, 0.343229596],\n                [0.875, 0.300267182, 0.300267182],\n                [0.90625, 0.259301199, 0.259301199],\n                [0.9375, 0.220525627, 0.220525627],\n                [0.96875, 0.184115123, 0.184115123],\n                [1, 0.150232812, 0.150232812],\n            ],\n        },\n    },\n    blues: {\n        name: 'Blues',\n        numColors: 256,\n        gamma: 1,\n        segmentedData: {\n            red: [\n                [0, 0.9686274528503418, 0.9686274528503418],\n                [0.125, 0.87058824300765991, 0.87058824300765991],\n                [0.25, 0.7764706015586853, 0.7764706015586853],\n                [0.375, 0.61960786581039429, 0.61960786581039429],\n                [0.5, 0.41960784792900085, 0.41960784792900085],\n                [0.625, 0.25882354378700256, 0.25882354378700256],\n                [0.75, 0.12941177189350128, 0.12941177189350128],\n                [0.875, 0.031372550874948502, 0.031372550874948502],\n                [1, 0.031372550874948502, 0.031372550874948502],\n            ],\n            green: [\n                [0, 0.9843137264251709, 0.9843137264251709],\n                [0.125, 0.92156863212585449, 0.92156863212585449],\n                [0.25, 0.85882353782653809, 0.85882353782653809],\n                [0.375, 0.7921568751335144, 0.7921568751335144],\n                [0.5, 0.68235296010971069, 0.68235296010971069],\n                [0.625, 0.57254904508590698, 0.57254904508590698],\n                [0.75, 0.44313725829124451, 0.44313725829124451],\n                [0.875, 0.31764706969261169, 0.31764706969261169],\n                [1, 0.18823529779911041, 0.18823529779911041],\n            ],\n            blue: [\n                [0, 1, 1],\n                [0.125, 0.9686274528503418, 0.9686274528503418],\n                [0.25, 0.93725490570068359, 0.93725490570068359],\n                [0.375, 0.88235294818878174, 0.88235294818878174],\n                [0.5, 0.83921569585800171, 0.83921569585800171],\n                [0.625, 0.7764706015586853, 0.7764706015586853],\n                [0.75, 0.70980393886566162, 0.70980393886566162],\n                [0.875, 0.61176472902297974, 0.61176472902297974],\n                [1, 0.41960784792900085, 0.41960784792900085],\n            ],\n        },\n    },\n};\nexport default colormapsData;\n","const EPSILON = 1e-3;\nexport default EPSILON;\n","import CPU_COLORMAPS from './cpuColormaps';\nimport RENDERING_DEFAULTS from './rendering';\nimport EPSILON from './epsilon';\nimport MPR_CAMERA_VALUES from './mprCameraValues';\nimport VIEWPORT_PRESETS from './viewportPresets';\nimport BACKGROUND_COLORS from './backgroundColors';\nexport { CPU_COLORMAPS, RENDERING_DEFAULTS, MPR_CAMERA_VALUES, EPSILON, VIEWPORT_PRESETS, BACKGROUND_COLORS, };\n","const microscopyViewportCss = `\n.DicomMicroscopyViewer {\n  --ol-partial-background-color: rgba(127, 127, 127, 0.7);\n  --ol-foreground-color: #000000;\n  --ol-subtle-foreground-color: #000;\n  --ol-subtle-background-color: rgba(78, 78, 78, 0.5);\n}\n\n.DicomMicroscopyViewer .ol-box {\n  box-sizing: border-box;\n  border-radius: 2px;\n  border: 1.5px solid var(--ol-background-color);\n  background-color: var(--ol-partial-background-color);\n}\n\n.DicomMicroscopyViewer .ol-mouse-position {\n  top: 8px;\n  right: 8px;\n  position: absolute;\n}\n\n.DicomMicroscopyViewer .ol-scale-line {\n  background: var(--ol-partial-background-color);\n  border-radius: 4px;\n  bottom: 8px;\n  left: 8px;\n  padding: 2px;\n  position: absolute;\n}\n\n.DicomMicroscopyViewer .ol-scale-line-inner {\n  border: 1px solid var(--ol-subtle-foreground-color);\n  border-top: none;\n  color: var(--ol-foreground-color);\n  font-size: 10px;\n  text-align: center;\n  margin: 1px;\n  will-change: contents, width;\n  transition: all 0.25s;\n}\n\n.DicomMicroscopyViewer .ol-scale-bar {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n}\n\n.DicomMicroscopyViewer .ol-scale-bar-inner {\n  display: flex;\n}\n\n.DicomMicroscopyViewer .ol-scale-step-marker {\n  width: 1px;\n  height: 15px;\n  background-color: var(--ol-foreground-color);\n  float: right;\n  z-index: 10;\n}\n\n.DicomMicroscopyViewer .ol-scale-step-text {\n  position: absolute;\n  bottom: -5px;\n  font-size: 10px;\n  z-index: 11;\n  color: var(--ol-foreground-color);\n  text-shadow:\n    -1.5px 0 var(--ol-partial-background-color),\n    0 1.5px var(--ol-partial-background-color),\n    1.5px 0 var(--ol-partial-background-color),\n    0 -1.5px var(--ol-partial-background-color);\n}\n\n.DicomMicroscopyViewer .ol-scale-text {\n  position: absolute;\n  font-size: 12px;\n  text-align: center;\n  bottom: 25px;\n  color: var(--ol-foreground-color);\n  text-shadow:\n    -1.5px 0 var(--ol-partial-background-color),\n    0 1.5px var(--ol-partial-background-color),\n    1.5px 0 var(--ol-partial-background-color),\n    0 -1.5px var(--ol-partial-background-color);\n}\n\n.DicomMicroscopyViewer .ol-scale-singlebar {\n  position: relative;\n  height: 10px;\n  z-index: 9;\n  box-sizing: border-box;\n  border: 1px solid var(--ol-foreground-color);\n}\n\n.DicomMicroscopyViewer .ol-scale-singlebar-even {\n  background-color: var(--ol-subtle-foreground-color);\n}\n\n.DicomMicroscopyViewer .ol-scale-singlebar-odd {\n  background-color: var(--ol-background-color);\n}\n\n.DicomMicroscopyViewer .ol-unsupported {\n  display: none;\n}\n\n.DicomMicroscopyViewer .ol-viewport,\n.DicomMicroscopyViewer .ol-unselectable {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.DicomMicroscopyViewer .ol-viewport canvas {\n  all: unset;\n}\n\n.DicomMicroscopyViewer .ol-selectable {\n  -webkit-touch-callout: default;\n  -webkit-user-select: text;\n  -moz-user-select: text;\n  user-select: text;\n}\n\n.DicomMicroscopyViewer .ol-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: -moz-grabbing;\n  cursor: grabbing;\n}\n\n.DicomMicroscopyViewer .ol-grab {\n  cursor: move;\n  cursor: -webkit-grab;\n  cursor: -moz-grab;\n  cursor: grab;\n}\n\n.DicomMicroscopyViewer .ol-control {\n  position: absolute;\n  background-color: var(--ol-subtle-background-color);\n  border-radius: 4px;\n}\n\n.DicomMicroscopyViewer .ol-zoom {\n  top: 0.5em;\n  left: 0.5em;\n}\n\n.DicomMicroscopyViewer .ol-rotate {\n  top: 0.5em;\n  right: 0.5em;\n  transition:\n    opacity 0.25s linear,\n    visibility 0s linear;\n}\n\n.DicomMicroscopyViewer .ol-rotate.ol-hidden {\n  opacity: 0;\n  visibility: hidden;\n  transition:\n    opacity 0.25s linear,\n    visibility 0s linear 0.25s;\n}\n\n.DicomMicroscopyViewer .ol-zoom-extent {\n  top: 4.643em;\n  left: 0.5em;\n}\n\n.DicomMicroscopyViewer .ol-full-screen {\n  right: 0.5em;\n  top: 0.5em;\n}\n\n.DicomMicroscopyViewer .ol-control button {\n  display: block;\n  margin: 1px;\n  padding: 0;\n  color: var(--ol-subtle-foreground-color);\n  font-weight: bold;\n  text-decoration: none;\n  font-size: inherit;\n  text-align: center;\n  height: 1.375em;\n  width: 1.375em;\n  line-height: 0.4em;\n  background-color: var(--ol-background-color);\n  border: none;\n  border-radius: 2px;\n}\n\n.DicomMicroscopyViewer .ol-control button::-moz-focus-inner {\n  border: none;\n  padding: 0;\n}\n\n.DicomMicroscopyViewer .ol-zoom-extent button {\n  line-height: 1.4em;\n}\n\n.DicomMicroscopyViewer .ol-compass {\n  display: block;\n  font-weight: normal;\n  will-change: transform;\n}\n\n.DicomMicroscopyViewer .ol-touch .ol-control button {\n  font-size: 1.5em;\n}\n\n.DicomMicroscopyViewer .ol-touch .ol-zoom-extent {\n  top: 5.5em;\n}\n\n.DicomMicroscopyViewer .ol-control button:hover,\n.DicomMicroscopyViewer .ol-control button:focus {\n  text-decoration: none;\n  outline: 1px solid var(--ol-subtle-foreground-color);\n  color: var(--ol-foreground-color);\n}\n\n.DicomMicroscopyViewer .ol-zoom .ol-zoom-in {\n  border-radius: 2px 2px 0 0;\n}\n\n.DicomMicroscopyViewer .ol-zoom .ol-zoom-out {\n  border-radius: 0 0 2px 2px;\n}\n\n.DicomMicroscopyViewer .ol-attribution {\n  text-align: right;\n  bottom: 0.5em;\n  right: 0.5em;\n  max-width: calc(100% - 1.3em);\n  display: flex;\n  flex-flow: row-reverse;\n  align-items: center;\n}\n\n.DicomMicroscopyViewer .ol-attribution a {\n  color: var(--ol-subtle-foreground-color);\n  text-decoration: none;\n}\n\n.DicomMicroscopyViewer .ol-attribution ul {\n  margin: 0;\n  padding: 1px 0.5em;\n  color: var(--ol-foreground-color);\n  text-shadow: 0 0 2px var(--ol-background-color);\n  font-size: 12px;\n}\n\n.DicomMicroscopyViewer .ol-attribution li {\n  display: inline;\n  list-style: none;\n}\n\n.DicomMicroscopyViewer .ol-attribution li:not(:last-child):after {\n  content: ' ';\n}\n\n.DicomMicroscopyViewer .ol-attribution img {\n  max-height: 2em;\n  max-width: inherit;\n  vertical-align: middle;\n}\n\n.DicomMicroscopyViewer .ol-attribution button {\n  flex-shrink: 0;\n}\n\n.DicomMicroscopyViewer .ol-attribution.ol-collapsed ul {\n  display: none;\n}\n\n.DicomMicroscopyViewer .ol-attribution:not(.ol-collapsed) {\n  background: var(--ol-partial-background-color);\n}\n\n.DicomMicroscopyViewer .ol-attribution.ol-uncollapsible {\n  bottom: 0;\n  right: 0;\n  border-radius: 4px 0 0;\n}\n\n.DicomMicroscopyViewer .ol-attribution.ol-uncollapsible img {\n  margin-top: -0.2em;\n  max-height: 1.6em;\n}\n\n.DicomMicroscopyViewer .ol-attribution.ol-uncollapsible button {\n  display: none;\n}\n\n.DicomMicroscopyViewer .ol-zoomslider {\n  top: 4.5em;\n  left: 0.5em;\n  height: 200px;\n}\n\n.DicomMicroscopyViewer .ol-zoomslider button {\n  position: relative;\n  height: 10px;\n}\n\n.DicomMicroscopyViewer .ol-touch .ol-zoomslider {\n  top: 5.5em;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap {\n  left: 0.5em;\n  bottom: 0.5em;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap.ol-uncollapsible {\n  bottom: 0;\n  left: 0;\n  border-radius: 0 4px 0 0;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap .ol-overviewmap-map,\n.DicomMicroscopyViewer .ol-overviewmap button {\n  display: block;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap .ol-overviewmap-map {\n  border: 1px solid var(--ol-subtle-foreground-color);\n  height: 150px;\n  width: 150px;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap:not(.ol-collapsed) button {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap.ol-collapsed .ol-overviewmap-map,\n.DicomMicroscopyViewer .ol-overviewmap.ol-uncollapsible button {\n  display: none;\n}\n\n.DicomMicroscopyViewer .ol-overviewmap:not(.ol-collapsed) {\n  background: var(--ol-subtle-background-color);\n}\n\n.DicomMicroscopyViewer .ol-overviewmap-box {\n  border: 0.5px dotted var(--ol-subtle-foreground-color);\n}\n\n.DicomMicroscopyViewer .ol-overviewmap .ol-overviewmap-box:hover {\n  cursor: move;\n}\n\n@layout-header-background: #007ea3;\n@primary-color: #007ea3;\n@processing-color: #8cb8c6;\n@success-color: #3f9c35;\n@warning-color: #eeaf30;\n@error-color: #96172e;\n@font-size-base: 14px;\n\n.DicomMicroscopyViewer .ol-tooltip {\n  font-size: 16px !important;\n}\n`;\nexport default microscopyViewportCss;\n","import deepFreeze from '../utilities/deepFreeze';\nconst MPR_CAMERA_VALUES = {\n    axial: {\n        viewPlaneNormal: [0, 0, -1],\n        viewUp: [0, -1, 0],\n        viewRight: [1, 0, 0],\n    },\n    sagittal: {\n        viewPlaneNormal: [1, 0, 0],\n        viewUp: [0, 0, 1],\n        viewRight: [0, 1, 0],\n    },\n    coronal: {\n        viewPlaneNormal: [0, -1, 0],\n        viewUp: [0, 0, 1],\n        viewRight: [1, 0, 0],\n    },\n};\nconst mprCameraValues = deepFreeze(MPR_CAMERA_VALUES);\nexport default mprCameraValues;\n","const RENDERING_DEFAULTS = {\n    MINIMUM_SLAB_THICKNESS: 5e-2,\n    MAXIMUM_RAY_DISTANCE: 1e6,\n};\nObject.freeze(RENDERING_DEFAULTS);\nexport default RENDERING_DEFAULTS;\n","const presets = [\n    {\n        name: 'CT-AAA',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '12 -3024 0 143.556 0 166.222 0.686275 214.389 0.696078 419.736 0.833333 3071 0.803922',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '24 -3024 0 0 0 143.556 0.615686 0.356863 0.184314 166.222 0.882353 0.603922 0.290196 214.389 1 1 1 419.736 1 0.937033 0.954531 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-AAA2',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '16 -3024 0 129.542 0 145.244 0.166667 157.02 0.5 169.918 0.627451 395.575 0.8125 1578.73 0.8125 3071 0.8125',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '32 -3024 0 0 0 129.542 0.54902 0.25098 0.14902 145.244 0.6 0.627451 0.843137 157.02 0.890196 0.47451 0.6 169.918 0.992157 0.870588 0.392157 395.575 1 0.886275 0.658824 1578.73 1 0.829256 0.957922 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Bone',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '8 -3024 0 -16.4458 0 641.385 0.715686 3071 0.705882',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '16 -3024 0 0 0 -16.4458 0.729412 0.254902 0.301961 641.385 0.905882 0.815686 0.552941 3071 1 1 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Bones',\n        gradientOpacity: '4 0 1 985.12 1',\n        specularPower: '1',\n        scalarOpacity: '8 -1000 0 152.19 0 278.93 0.190476 952 0.2',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '20 -1000 0.3 0.3 1 -488 0.3 1 0.3 463.28 1 0 0 659.15 1 0.912535 0.0374849 953 1 0.3 0.3',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Cardiac',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '12 -3024 0 -77.6875 0 94.9518 0.285714 179.052 0.553571 260.439 0.848214 3071 0.875',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '24 -3024 0 0 0 -77.6875 0.54902 0.25098 0.14902 94.9518 0.882353 0.603922 0.290196 179.052 1 0.937033 0.954531 260.439 0.615686 0 0 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Cardiac2',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '12 -3024 0 42.8964 0 163.488 0.428571 277.642 0.776786 1587 0.754902 3071 0.754902',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '24 -3024 0 0 0 42.8964 0.54902 0.25098 0.14902 163.488 0.917647 0.639216 0.0588235 277.642 1 0.878431 0.623529 1587 1 1 1 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Cardiac3',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '14 -3024 0 -86.9767 0 45.3791 0.169643 139.919 0.589286 347.907 0.607143 1224.16 0.607143 3071 0.616071',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '28 -3024 0 0 0 -86.9767 0 0.25098 1 45.3791 1 0 0 139.919 1 0.894893 0.894893 347.907 1 1 0.25098 1224.16 1 1 1 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Chest-Contrast-Enhanced',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '10 -3024 0 67.0106 0 251.105 0.446429 439.291 0.625 3071 0.616071',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '20 -3024 0 0 0 67.0106 0.54902 0.25098 0.14902 251.105 0.882353 0.603922 0.290196 439.291 1 0.937033 0.954531 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Chest-Vessels',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '10 -3024 0 -1278.35 0 22.8277 0.428571 439.291 0.625 3071 0.616071',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '20 -3024 0 0 0 -1278.35 0.54902 0.25098 0.14902 22.8277 0.882353 0.603922 0.290196 439.291 1 0.937033 0.954531 3071 0.827451 0.658824 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Coronary-Arteries',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '12 -2048 0 136.47 0 159.215 0.258929 318.43 0.571429 478.693 0.776786 3661 1',\n        specular: '0',\n        shade: '0',\n        ambient: '0.2',\n        colorTransfer: '24 -2048 0 0 0 136.47 0 0 0 159.215 0.159804 0.159804 0.159804 318.43 0.764706 0.764706 0.764706 478.693 1 1 1 3661 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Coronary-Arteries-2',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '14 -2048 0 142.677 0 145.016 0.116071 192.174 0.5625 217.24 0.776786 384.347 0.830357 3661 0.830357',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '28 -2048 0 0 0 142.677 0 0 0 145.016 0.615686 0 0.0156863 192.174 0.909804 0.454902 0 217.24 0.972549 0.807843 0.611765 384.347 0.909804 0.909804 1 3661 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Coronary-Arteries-3',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '14 -2048 0 128.643 0 129.982 0.0982143 173.636 0.669643 255.884 0.857143 584.878 0.866071 3661 1',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '28 -2048 0 0 0 128.643 0 0 0 129.982 0.615686 0 0.0156863 173.636 0.909804 0.454902 0 255.884 0.886275 0.886275 0.886275 584.878 0.968627 0.968627 0.968627 3661 1 1 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Cropped-Volume-Bone',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '10 -2048 0 -451 0 -450 1 1050 1 3661 1',\n        specular: '0',\n        shade: '0',\n        ambient: '0.2',\n        colorTransfer: '20 -2048 0 0 0 -451 0 0 0 -450 0.0556356 0.0556356 0.0556356 1050 1 1 1 3661 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Fat',\n        gradientOpacity: '6 0 1 985.12 1 988 1',\n        specularPower: '1',\n        scalarOpacity: '14 -1000 0 -100 0 -99 0.15 -60 0.15 -59 0 101.2 0 952 0',\n        specular: '0',\n        shade: '0',\n        ambient: '0.2',\n        colorTransfer: '36 -1000 0.3 0.3 1 -497.5 0.3 1 0.3 -99 0 0 1 -76.946 0 1 0 -65.481 0.835431 0.888889 0.0165387 83.89 1 0 0 463.28 1 0 0 659.15 1 0.912535 0.0374849 2952 1 0.300267 0.299886',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Liver-Vasculature',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '14 -2048 0 149.113 0 157.884 0.482143 339.96 0.660714 388.526 0.830357 1197.95 0.839286 3661 0.848214',\n        specular: '0',\n        shade: '0',\n        ambient: '0.2',\n        colorTransfer: '28 -2048 0 0 0 149.113 0 0 0 157.884 0.501961 0.25098 0 339.96 0.695386 0.59603 0.36886 388.526 0.854902 0.85098 0.827451 1197.95 1 1 1 3661 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Lung',\n        gradientOpacity: '6 0 1 985.12 1 988 1',\n        specularPower: '1',\n        scalarOpacity: '12 -1000 0 -600 0 -599 0.15 -400 0.15 -399 0 2952 0',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '24 -1000 0.3 0.3 1 -600 0 0 1 -530 0.134704 0.781726 0.0724558 -460 0.929244 1 0.109473 -400 0.888889 0.254949 0.0240258 2952 1 0.3 0.3',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-MIP',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '8 -3024 0 -637.62 0 700 1 3071 1',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '16 -3024 0 0 0 -637.62 1 1 1 700 1 1 1 3071 1 1 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Muscle',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '10 -3024 0 -155.407 0 217.641 0.676471 419.736 0.833333 3071 0.803922',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '20 -3024 0 0 0 -155.407 0.54902 0.25098 0.14902 217.641 0.882353 0.603922 0.290196 419.736 1 0.937033 0.954531 3071 0.827451 0.658824 1',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Pulmonary-Arteries',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '14 -2048 0 -568.625 0 -364.081 0.0714286 -244.813 0.401786 18.2775 0.607143 447.798 0.830357 3592.73 0.839286',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '28 -2048 0 0 0 -568.625 0 0 0 -364.081 0.396078 0.301961 0.180392 -244.813 0.611765 0.352941 0.0705882 18.2775 0.843137 0.0156863 0.156863 447.798 0.752941 0.752941 0.752941 3592.73 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Soft-Tissue',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '10 -2048 0 -167.01 0 -160 1 240 1 3661 1',\n        specular: '0',\n        shade: '0',\n        ambient: '0.2',\n        colorTransfer: '20 -2048 0 0 0 -167.01 0 0 0 -160 0.0556356 0.0556356 0.0556356 240 1 1 1 3661 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'CT-Air',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '10',\n        scalarOpacity: '8 -3024 0.705882 -900.0 0.715686 -500.0 0 3071 0',\n        specular: '0.2',\n        shade: '1',\n        ambient: '0.1',\n        colorTransfer: '16 -3024 1 1 1 -900.0 0.2 1.0 1.0 -500.0 0.3 0.3 1.0 3071 0 0 0 ',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n    {\n        name: 'MR-Angio',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '12 -2048 0 151.354 0 158.279 0.4375 190.112 0.580357 200.873 0.732143 3661 0.741071',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '24 -2048 0 0 0 151.354 0 0 0 158.279 0.74902 0.376471 0 190.112 1 0.866667 0.733333 200.873 0.937255 0.937255 0.937255 3661 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'MR-Default',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '12 0 0 20 0 40 0.15 120 0.3 220 0.375 1024 0.5',\n        specular: '0',\n        shade: '1',\n        ambient: '0.2',\n        colorTransfer: '24 0 0 0 0 20 0.168627 0 0 40 0.403922 0.145098 0.0784314 120 0.780392 0.607843 0.380392 220 0.847059 0.835294 0.788235 1024 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'MR-MIP',\n        gradientOpacity: '4 0 1 255 1',\n        specularPower: '1',\n        scalarOpacity: '8 0 0 98.3725 0 416.637 1 2800 1',\n        specular: '0',\n        shade: '0',\n        ambient: '0.2',\n        colorTransfer: '16 0 1 1 1 98.3725 1 1 1 416.637 1 1 1 2800 1 1 1',\n        diffuse: '1',\n        interpolation: '1',\n    },\n    {\n        name: 'MR-T2-Brain',\n        gradientOpacity: '4 0 1 160.25 1',\n        specularPower: '40',\n        scalarOpacity: '10 0 0 36.05 0 218.302 0.171429 412.406 1 641 1',\n        specular: '0.5',\n        shade: '1',\n        ambient: '0.3',\n        colorTransfer: '16 0 0 0 0 98.7223 0.956863 0.839216 0.192157 412.406 0 0.592157 0.807843 641 1 1 1',\n        diffuse: '0.6',\n        interpolation: '1',\n    },\n    {\n        name: 'DTI-FA-Brain',\n        gradientOpacity: '4 0 1 0.9950 1',\n        specularPower: '40',\n        scalarOpacity: '16 0 0 0 0 0.3501 0.0158 0.49379 0.7619 0.6419 1 0.9920 1 0.9950 0 0.9950 0',\n        specular: '0.5',\n        shade: '1',\n        ambient: '0.3',\n        colorTransfer: '28 0 1 0 0 0 1 0 0 0.24974 0.4941 1 0 0.49949 0 0.9882 1 0.7492 0.51764 0 1 0.9950 1 0 0 0.9950 1 0 0',\n        diffuse: '0.9',\n        interpolation: '1',\n    },\n];\nexport default presets;\n","import vtkConstants from '@kitware/vtk.js/Rendering/Core/VolumeMapper/Constants';\nconst { BlendMode } = vtkConstants;\nexport var BlendModes;\n(function (BlendModes) {\n    BlendModes[BlendModes[\"COMPOSITE\"] = BlendMode.COMPOSITE_BLEND] = \"COMPOSITE\";\n    BlendModes[BlendModes[\"MAXIMUM_INTENSITY_BLEND\"] = BlendMode.MAXIMUM_INTENSITY_BLEND] = \"MAXIMUM_INTENSITY_BLEND\";\n    BlendModes[BlendModes[\"MINIMUM_INTENSITY_BLEND\"] = BlendMode.MINIMUM_INTENSITY_BLEND] = \"MINIMUM_INTENSITY_BLEND\";\n    BlendModes[BlendModes[\"AVERAGE_INTENSITY_BLEND\"] = BlendMode.AVERAGE_INTENSITY_BLEND] = \"AVERAGE_INTENSITY_BLEND\";\n    BlendModes[BlendModes[\"LABELMAP_EDGE_PROJECTION_BLEND\"] = BlendMode.LABELMAP_EDGE_PROJECTION_BLEND] = \"LABELMAP_EDGE_PROJECTION_BLEND\";\n})(BlendModes || (BlendModes = {}));\nexport default BlendModes;\n","export var CalibrationTypes;\n(function (CalibrationTypes) {\n    CalibrationTypes[\"NOT_APPLICABLE\"] = \"\";\n    CalibrationTypes[\"ERMF\"] = \"ERMF\";\n    CalibrationTypes[\"USER\"] = \"User\";\n    CalibrationTypes[\"PROJECTION\"] = \"Proj\";\n    CalibrationTypes[\"REGION\"] = \"Region\";\n    CalibrationTypes[\"ERROR\"] = \"Error\";\n    CalibrationTypes[\"UNCALIBRATED\"] = \"Uncalibrated\";\n    CalibrationTypes[\"CALIBRATED\"] = \"Calibrated\";\n    CalibrationTypes[\"UNKNOWN\"] = \"Unknown\";\n})(CalibrationTypes || (CalibrationTypes = {}));\nexport default CalibrationTypes;\n","var ContourType;\n(function (ContourType) {\n    ContourType[\"CLOSED_PLANAR\"] = \"CLOSED_PLANAR\";\n    ContourType[\"OPEN_PLANAR\"] = \"OPEN_PLANAR\";\n})(ContourType || (ContourType = {}));\nexport default ContourType;\n","var DynamicOperatorType;\n(function (DynamicOperatorType) {\n    DynamicOperatorType[\"SUM\"] = \"SUM\";\n    DynamicOperatorType[\"AVERAGE\"] = \"AVERAGE\";\n    DynamicOperatorType[\"SUBTRACT\"] = \"SUBTRACT\";\n})(DynamicOperatorType || (DynamicOperatorType = {}));\nexport default DynamicOperatorType;\n","var Events;\n(function (Events) {\n    Events[\"ERROR_EVENT\"] = \"CORNERSTONE_ERROR\";\n    Events[\"CACHE_SIZE_EXCEEDED\"] = \"CACHE_SIZE_EXCEEDED\";\n    Events[\"IMAGE_LOAD_ERROR\"] = \"IMAGE_LOAD_ERROR\";\n    Events[\"CAMERA_MODIFIED\"] = \"CORNERSTONE_CAMERA_MODIFIED\";\n    Events[\"CAMERA_RESET\"] = \"CORNERSTONE_CAMERA_RESET\";\n    Events[\"VOI_MODIFIED\"] = \"CORNERSTONE_VOI_MODIFIED\";\n    Events[\"PRESET_MODIFIED\"] = \"CORNERSTONE_VIEWPORT_RENDERING_PRESET_MODIFIED\";\n    Events[\"DISPLAY_AREA_MODIFIED\"] = \"CORNERSTONE_DISPLAY_AREA_MODIFIED\";\n    Events[\"ELEMENT_DISABLED\"] = \"CORNERSTONE_ELEMENT_DISABLED\";\n    Events[\"ELEMENT_ENABLED\"] = \"CORNERSTONE_ELEMENT_ENABLED\";\n    Events[\"IMAGE_RENDERED\"] = \"CORNERSTONE_IMAGE_RENDERED\";\n    Events[\"IMAGE_VOLUME_MODIFIED\"] = \"CORNERSTONE_IMAGE_VOLUME_MODIFIED\";\n    Events[\"IMAGE_VOLUME_LOADING_COMPLETED\"] = \"CORNERSTONE_IMAGE_VOLUME_LOADING_COMPLETED\";\n    Events[\"IMAGE_LOADED\"] = \"CORNERSTONE_IMAGE_LOADED\";\n    Events[\"IMAGE_RETRIEVAL_STAGE\"] = \"CORNERSTONE_IMAGE_RETRIEVAL_STAGE\";\n    Events[\"IMAGE_LOAD_FAILED\"] = \"CORNERSTONE_IMAGE_LOAD_FAILED\";\n    Events[\"VOLUME_VIEWPORT_NEW_VOLUME\"] = \"CORNERSTONE_VOLUME_VIEWPORT_NEW_VOLUME\";\n    Events[\"VOLUME_LOADED\"] = \"CORNERSTONE_VOLUME_LOADED\";\n    Events[\"VOLUME_LOADED_FAILED\"] = \"CORNERSTONE_VOLUME_LOADED_FAILED\";\n    Events[\"IMAGE_CACHE_IMAGE_ADDED\"] = \"CORNERSTONE_IMAGE_CACHE_IMAGE_ADDED\";\n    Events[\"IMAGE_CACHE_IMAGE_REMOVED\"] = \"CORNERSTONE_IMAGE_CACHE_IMAGE_REMOVED\";\n    Events[\"VOLUME_CACHE_VOLUME_ADDED\"] = \"CORNERSTONE_VOLUME_CACHE_VOLUME_ADDED\";\n    Events[\"VOLUME_CACHE_VOLUME_REMOVED\"] = \"CORNERSTONE_VOLUME_CACHE_VOLUME_REMOVED\";\n    Events[\"STACK_NEW_IMAGE\"] = \"CORNERSTONE_STACK_NEW_IMAGE\";\n    Events[\"VOLUME_NEW_IMAGE\"] = \"CORNERSTONE_VOLUME_NEW_IMAGE\";\n    Events[\"PRE_STACK_NEW_IMAGE\"] = \"CORNERSTONE_PRE_STACK_NEW_IMAGE\";\n    Events[\"IMAGE_SPACING_CALIBRATED\"] = \"CORNERSTONE_IMAGE_SPACING_CALIBRATED\";\n    Events[\"VIEWPORT_NEW_IMAGE_SET\"] = \"CORNERSTONE_VIEWPORT_NEW_IMAGE_SET\";\n    Events[\"STACK_VIEWPORT_SCROLL\"] = \"CORNERSTONE_STACK_VIEWPORT_SCROLL\";\n    Events[\"STACK_SCROLL_OUT_OF_BOUNDS\"] = \"STACK_SCROLL_OUT_OF_BOUNDS\";\n    Events[\"GEOMETRY_CACHE_GEOMETRY_ADDED\"] = \"CORNERSTONE_GEOMETRY_CACHE_GEOMETRY_ADDED\";\n    Events[\"GEOMETRY_CACHE_GEOMETRY_REMOVED\"] = \"CORNERSTONE_GEOMETRY_CACHE_GEOMETRY_REMOVED\";\n    Events[\"VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS\"] = \"VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS\";\n    Events[\"VOLUME_VIEWPORT_SCROLL\"] = \"VOLUME_VIEWPORT_SCROLL\";\n    Events[\"CLIPPING_PLANES_UPDATED\"] = \"CORNERSTONE_CLIPPING_PLANES_UPDATED\";\n    Events[\"WEB_WORKER_PROGRESS\"] = \"CORNERSTONE_WEB_WORKER_PROGRESS\";\n    Events[\"COLORMAP_MODIFIED\"] = \"CORNERSTONE_COLORMAP_MODIFIED\";\n    Events[\"DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED\"] = \"DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED\";\n    Events[\"DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED\"] = \"DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED\";\n    Events[\"DYNAMIC_VOLUME_DIMENSION_GROUP_LOADED\"] = \"DYNAMIC_VOLUME_DIMENSION_GROUP_LOADED\";\n    Events[\"DYNAMIC_VOLUME_TIME_POINT_LOADED\"] = \"DYNAMIC_VOLUME_TIME_POINT_LOADED\";\n    Events[\"GEOMETRY_LOADED\"] = \"GEOMETRY_LOADED\";\n    Events[\"GEOMETRY_LOAD_PROGRESS\"] = \"GEOMETRY_LOAD_PROGRESS\";\n    Events[\"GEOMETRY_LOADED_FAILED\"] = \"GEOMETRY_LOADED_FAILED\";\n    Events[\"ACTORS_CHANGED\"] = \"CORNERSTONE_ACTORS_CHANGED\";\n})(Events || (Events = {}));\nexport default Events;\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","var GeometryType;\n(function (GeometryType) {\n    GeometryType[\"CONTOUR\"] = \"CONTOUR\";\n    GeometryType[\"SURFACE\"] = \"SURFACE\";\n    GeometryType[\"MESH\"] = \"MESH\";\n})(GeometryType || (GeometryType = {}));\nexport default GeometryType;\n","var ImageQualityStatus;\n(function (ImageQualityStatus) {\n    ImageQualityStatus[ImageQualityStatus[\"FAR_REPLICATE\"] = 1] = \"FAR_REPLICATE\";\n    ImageQualityStatus[ImageQualityStatus[\"ADJACENT_REPLICATE\"] = 3] = \"ADJACENT_REPLICATE\";\n    ImageQualityStatus[ImageQualityStatus[\"SUBRESOLUTION\"] = 6] = \"SUBRESOLUTION\";\n    ImageQualityStatus[ImageQualityStatus[\"LOSSY\"] = 7] = \"LOSSY\";\n    ImageQualityStatus[ImageQualityStatus[\"FULL_RESOLUTION\"] = 8] = \"FULL_RESOLUTION\";\n})(ImageQualityStatus || (ImageQualityStatus = {}));\nexport default ImageQualityStatus;\n","var InterpolationType;\n(function (InterpolationType) {\n    InterpolationType[InterpolationType[\"NEAREST\"] = 0] = \"NEAREST\";\n    InterpolationType[InterpolationType[\"LINEAR\"] = 1] = \"LINEAR\";\n    InterpolationType[InterpolationType[\"FAST_LINEAR\"] = 2] = \"FAST_LINEAR\";\n})(InterpolationType || (InterpolationType = {}));\nexport default InterpolationType;\n","var MeshType;\n(function (MeshType) {\n    MeshType[\"PLY\"] = \"PLY\";\n    MeshType[\"STL\"] = \"STL\";\n    MeshType[\"OBJ\"] = \"OBJ\";\n    MeshType[\"VTP\"] = \"VTP\";\n})(MeshType || (MeshType = {}));\nexport default MeshType;\n","var MetadataModules;\n(function (MetadataModules) {\n    MetadataModules[\"CALIBRATION\"] = \"calibrationModule\";\n    MetadataModules[\"CINE\"] = \"cineModule\";\n    MetadataModules[\"GENERAL_IMAGE\"] = \"generalImageModule\";\n    MetadataModules[\"GENERAL_SERIES\"] = \"generalSeriesModule\";\n    MetadataModules[\"GENERAL_STUDY\"] = \"generalStudyModule\";\n    MetadataModules[\"IMAGE_PIXEL\"] = \"imagePixelModule\";\n    MetadataModules[\"IMAGE_PLANE\"] = \"imagePlaneModule\";\n    MetadataModules[\"IMAGE_URL\"] = \"imageUrlModule\";\n    MetadataModules[\"MODALITY_LUT\"] = \"modalityLutModule\";\n    MetadataModules[\"MULTIFRAME\"] = \"multiframeModule\";\n    MetadataModules[\"NM_MULTIFRAME_GEOMETRY\"] = \"nmMultiframeGeometryModule\";\n    MetadataModules[\"OVERLAY_PLANE\"] = \"overlayPlaneModule\";\n    MetadataModules[\"PATIENT\"] = \"patientModule\";\n    MetadataModules[\"PATIENT_STUDY\"] = \"patientStudyModule\";\n    MetadataModules[\"PET_IMAGE\"] = \"petImageModule\";\n    MetadataModules[\"PET_ISOTOPE\"] = \"petIsotopeModule\";\n    MetadataModules[\"PET_SERIES\"] = \"petSeriesModule\";\n    MetadataModules[\"SOP_COMMON\"] = \"sopCommonModule\";\n    MetadataModules[\"ULTRASOUND_ENHANCED_REGION\"] = \"ultrasoundEnhancedRegionModule\";\n    MetadataModules[\"VOI_LUT\"] = \"voiLutModule\";\n    MetadataModules[\"WADO_WEB_CLIENT\"] = \"wadoWebClient\";\n})(MetadataModules || (MetadataModules = {}));\nexport default MetadataModules;\n","var OrientationAxis;\n(function (OrientationAxis) {\n    OrientationAxis[\"AXIAL\"] = \"axial\";\n    OrientationAxis[\"CORONAL\"] = \"coronal\";\n    OrientationAxis[\"SAGITTAL\"] = \"sagittal\";\n    OrientationAxis[\"ACQUISITION\"] = \"acquisition\";\n})(OrientationAxis || (OrientationAxis = {}));\nexport default OrientationAxis;\n","var RequestType;\n(function (RequestType) {\n    RequestType[\"Interaction\"] = \"interaction\";\n    RequestType[\"Thumbnail\"] = \"thumbnail\";\n    RequestType[\"Prefetch\"] = \"prefetch\";\n    RequestType[\"Compute\"] = \"compute\";\n})(RequestType || (RequestType = {}));\nexport default RequestType;\n","var VOILUTFunctionType;\n(function (VOILUTFunctionType) {\n    VOILUTFunctionType[\"LINEAR\"] = \"LINEAR\";\n    VOILUTFunctionType[\"SAMPLED_SIGMOID\"] = \"SIGMOID\";\n    VOILUTFunctionType[\"LINEAR_EXACT\"] = \"LINEAR_EXACT\";\n})(VOILUTFunctionType || (VOILUTFunctionType = {}));\nexport default VOILUTFunctionType;\n","var SpeedUnit;\n(function (SpeedUnit) {\n    SpeedUnit[\"FRAME\"] = \"f\";\n    SpeedUnit[\"SECOND\"] = \"s\";\n})(SpeedUnit || (SpeedUnit = {}));\nexport { SpeedUnit };\n","var ViewportStatus;\n(function (ViewportStatus) {\n    ViewportStatus[\"NO_DATA\"] = \"noData\";\n    ViewportStatus[\"LOADING\"] = \"loading\";\n    ViewportStatus[\"PRE_RENDER\"] = \"preRender\";\n    ViewportStatus[\"RESIZE\"] = \"resize\";\n    ViewportStatus[\"RENDERED\"] = \"rendered\";\n})(ViewportStatus || (ViewportStatus = {}));\nexport default ViewportStatus;\n","var ViewportType;\n(function (ViewportType) {\n    ViewportType[\"STACK\"] = \"stack\";\n    ViewportType[\"ORTHOGRAPHIC\"] = \"orthographic\";\n    ViewportType[\"PERSPECTIVE\"] = \"perspective\";\n    ViewportType[\"VOLUME_3D\"] = \"volume3d\";\n    ViewportType[\"VIDEO\"] = \"video\";\n    ViewportType[\"WHOLE_SLIDE\"] = \"wholeSlide\";\n})(ViewportType || (ViewportType = {}));\nexport default ViewportType;\n","var VoxelManagerEnum;\n(function (VoxelManagerEnum) {\n    VoxelManagerEnum[\"RLE\"] = \"RLE\";\n    VoxelManagerEnum[\"Volume\"] = \"Volume\";\n})(VoxelManagerEnum || (VoxelManagerEnum = {}));\nexport default VoxelManagerEnum;\n","import Events from './Events';\nimport RequestType from './RequestType';\nimport ViewportType from './ViewportType';\nimport InterpolationType from './InterpolationType';\nimport BlendModes from './BlendModes';\nimport OrientationAxis from './OrientationAxis';\nimport GeometryType from './GeometryType';\nimport ContourType from './ContourType';\nimport MeshType from './MeshType';\nimport VOILUTFunctionType from './VOILUTFunctionType';\nimport DynamicOperatorType from './DynamicOperatorType';\nimport CalibrationTypes from './CalibrationTypes';\nimport ViewportStatus from './ViewportStatus';\nimport ImageQualityStatus from './ImageQualityStatus';\nimport * as VideoEnums from './VideoEnums';\nimport MetadataModules from './MetadataModules';\nimport { GenerateImageType } from './GenerateImageType';\nimport VoxelManagerEnum from './VoxelManagerEnum';\nexport { Events, BlendModes, CalibrationTypes, InterpolationType, RequestType, ViewportType, OrientationAxis, GeometryType, ContourType, MeshType, VOILUTFunctionType, DynamicOperatorType, ViewportStatus, VideoEnums, MetadataModules, ImageQualityStatus, VoxelManagerEnum, GenerateImageType, };\n","class CornerstoneEventTarget {\n    constructor() {\n        this.listeners = {};\n        this.debouncedListeners = {};\n    }\n    reset() {\n        this.listeners = {};\n        this.debouncedListeners = {};\n    }\n    addEventListenerOnce(type, callback) {\n        const onceWrapper = (event) => {\n            this.removeEventListener(type, onceWrapper);\n            callback.call(this, event);\n        };\n        this.addEventListener(type, onceWrapper);\n    }\n    addEventListener(type, callback) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        if (this.listeners[type].indexOf(callback) !== -1) {\n            return;\n        }\n        this.listeners[type].push(callback);\n    }\n    addEventListenerDebounced(type, callback, delay) {\n        this.debouncedListeners[type] = this.debouncedListeners[type] || {};\n        const debouncedCallbacks = this.debouncedListeners[type];\n        if (!debouncedCallbacks[callback]) {\n            const handle = (event) => {\n                if (debouncedCallbacks[callback]) {\n                    clearTimeout(debouncedCallbacks[callback].timeoutId);\n                }\n                debouncedCallbacks[callback].timeoutId = setTimeout(() => {\n                    callback.call(this, event);\n                }, delay);\n            };\n            debouncedCallbacks[callback] = {\n                original: callback,\n                handle,\n                timeoutId: null,\n            };\n            this.addEventListener(type, handle);\n        }\n    }\n    removeEventListenerDebounced(type, callback) {\n        if (this.debouncedListeners[type]?.[callback]) {\n            const debounced = this.debouncedListeners[type][callback];\n            this.removeEventListener(type, debounced.handle);\n            clearTimeout(debounced.timeoutId);\n            delete this.debouncedListeners[type][callback];\n        }\n    }\n    removeEventListener(type, callback) {\n        if (!this.listeners[type]) {\n            return;\n        }\n        const stack = this.listeners[type];\n        const stackLength = stack.length;\n        for (let i = 0; i < stackLength; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    }\n    dispatchEvent(event) {\n        if (!this.listeners[event.type]) {\n            return !event.defaultPrevented;\n        }\n        const stack = this.listeners[event.type].slice();\n        const stackLength = stack.length;\n        for (let i = 0; i < stackLength; i++) {\n            try {\n                stack[i].call(this, event);\n            }\n            catch (error) {\n                console.error(`error in event listener of type:  ${event.type}`, error);\n            }\n        }\n        return !event.defaultPrevented;\n    }\n}\nconst eventTarget = new CornerstoneEventTarget();\nexport default eventTarget;\n","import getRenderingEngine, { getRenderingEngines, } from './RenderingEngine/getRenderingEngine';\nexport default function getEnabledElement(element) {\n    if (!element) {\n        return;\n    }\n    const { viewportUid, renderingEngineUid } = element.dataset;\n    return getEnabledElementByIds(viewportUid, renderingEngineUid);\n}\nexport function getEnabledElementByIds(viewportId, renderingEngineId) {\n    if (!renderingEngineId || !viewportId) {\n        return;\n    }\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n        return;\n    }\n    const viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        return;\n    }\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    return {\n        viewport,\n        renderingEngine,\n        viewportId,\n        renderingEngineId,\n        FrameOfReferenceUID,\n    };\n}\nexport function getEnabledElementByViewportId(viewportId) {\n    const renderingEngines = getRenderingEngines();\n    for (let i = 0; i < renderingEngines.length; i++) {\n        const renderingEngine = renderingEngines[i];\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (viewport) {\n            return getEnabledElementByIds(viewportId, renderingEngine.id);\n        }\n    }\n}\nexport function getEnabledElements() {\n    const enabledElements = [];\n    const renderingEngines = getRenderingEngines();\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach(({ element }) => {\n            enabledElements.push(getEnabledElement(element));\n        });\n    });\n    return enabledElements;\n}\n","import * as Enums from './enums';\nimport * as CONSTANTS from './constants';\nimport { Events } from './enums';\nimport RenderingEngine from './RenderingEngine';\nimport createVolumeActor from './RenderingEngine/helpers/createVolumeActor';\nimport createVolumeMapper, { convertMapperToNotSharedMapper, } from './RenderingEngine/helpers/createVolumeMapper';\nexport * from './RenderingEngine/helpers/getOrCreateCanvas';\nimport VolumeViewport from './RenderingEngine/VolumeViewport';\nimport VolumeViewport3D from './RenderingEngine/VolumeViewport3D';\nimport BaseVolumeViewport from './RenderingEngine/BaseVolumeViewport';\nimport StackViewport from './RenderingEngine/StackViewport';\nimport VideoViewport from './RenderingEngine/VideoViewport';\nimport WSIViewport from './RenderingEngine/WSIViewport';\nimport Viewport from './RenderingEngine/Viewport';\nimport eventTarget from './eventTarget';\nimport { version } from './version';\nimport { getRenderingEngine, getRenderingEngines, } from './RenderingEngine/getRenderingEngine';\nimport { ImageVolume, Surface, StreamingDynamicImageVolume, StreamingImageVolume, } from './cache';\nimport cache from './cache/cache';\nimport imageRetrievalPoolManager from './requestPool/imageRetrievalPoolManager';\nimport imageLoadPoolManager from './requestPool/imageLoadPoolManager';\nimport getEnabledElement, { getEnabledElementByIds, getEnabledElementByViewportId, getEnabledElements, } from './getEnabledElement';\nimport * as metaData from './metaData';\nimport { init, getShouldUseCPURendering, isCornerstoneInitialized, setUseCPURendering, setPreferSizeOverAccuracy, resetUseCPURendering, getConfiguration, setConfiguration, getWebWorkerManager, canRenderFloatTextures, peerImport, resetInitialization, } from './init';\nimport Settings from './Settings';\nimport * as volumeLoader from './loaders/volumeLoader';\nimport * as imageLoader from './loaders/imageLoader';\nimport * as geometryLoader from './loaders/geometryLoader';\nimport ProgressiveRetrieveImages from './loaders/ProgressiveRetrieveImages';\nimport * as utilities from './utilities';\nimport { registerImageLoader } from './loaders/imageLoader';\nimport triggerEvent from './utilities/triggerEvent';\nimport { cornerstoneStreamingImageVolumeLoader } from './loaders/cornerstoneStreamingImageVolumeLoader';\nimport { cornerstoneStreamingDynamicImageVolumeLoader } from './loaders/cornerstoneStreamingDynamicImageVolumeLoader';\nimport { cornerstoneMeshLoader } from './loaders/cornerstoneMeshLoader';\nimport { setVolumesForViewports, addVolumesToViewports, addImageSlicesToViewports, } from './RenderingEngine/helpers';\nexport { init, isCornerstoneInitialized, peerImport, resetInitialization, getConfiguration, setConfiguration, getWebWorkerManager, canRenderFloatTextures, Enums, CONSTANTS, Events as EVENTS, Settings, BaseVolumeViewport, VolumeViewport, VolumeViewport3D, Viewport, StackViewport, VideoViewport, WSIViewport, RenderingEngine, ImageVolume, Surface, getRenderingEngine, getRenderingEngines, getEnabledElement, getEnabledElementByIds, getEnabledElements, getEnabledElementByViewportId, createVolumeActor, createVolumeMapper, cache, eventTarget, triggerEvent, imageLoader, registerImageLoader, volumeLoader, metaData, utilities, setVolumesForViewports, addVolumesToViewports, addImageSlicesToViewports, imageLoadPoolManager as requestPoolManager, imageRetrievalPoolManager, imageLoadPoolManager, getShouldUseCPURendering, setUseCPURendering, setPreferSizeOverAccuracy, resetUseCPURendering, geometryLoader, cornerstoneMeshLoader, ProgressiveRetrieveImages, cornerstoneStreamingImageVolumeLoader, cornerstoneStreamingDynamicImageVolumeLoader, StreamingDynamicImageVolume, StreamingImageVolume, convertMapperToNotSharedMapper, version, };\n","import { getRenderingEngines } from './RenderingEngine/getRenderingEngine';\nlet csRenderInitialized = false;\nimport deepMerge from './utilities/deepMerge';\nimport CentralizedWebWorkerManager from './webWorkerManager/webWorkerManager';\nimport { getSupportedTextureFormats } from './utilities/textureSupport';\nconst defaultConfig = {\n    gpuTier: { tier: 2 },\n    isMobile: false,\n    rendering: {\n        useCPURendering: false,\n        preferSizeOverAccuracy: false,\n        strictZSpacingForVolumeViewport: true,\n    },\n    peerImport: (moduleId) => null,\n};\nlet config = {\n    ...defaultConfig,\n    rendering: { ...defaultConfig.rendering },\n};\nlet webWorkerManager = null;\nlet canUseNorm16Texture = false;\nfunction _getGLContext() {\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl2') ||\n        canvas.getContext('webgl') ||\n        canvas.getContext('experimental-webgl');\n    return gl;\n}\nfunction _hasActiveWebGLContext() {\n    const gl = _getGLContext();\n    return (gl instanceof WebGLRenderingContext || gl instanceof WebGL2RenderingContext);\n}\nfunction _hasNorm16TextureSupport() {\n    const supportedTextureFormats = getSupportedTextureFormats();\n    return supportedTextureFormats.norm16 && supportedTextureFormats.norm16Linear;\n}\nfunction isIOS() {\n    if (/iPad|iPhone|iPod/.test(navigator.platform)) {\n        return true;\n    }\n    else {\n        return (navigator.maxTouchPoints &&\n            navigator.maxTouchPoints > 2 &&\n            navigator.platform.includes('MacIntel'));\n    }\n}\nfunction init(configuration = config) {\n    if (csRenderInitialized) {\n        return csRenderInitialized;\n    }\n    canUseNorm16Texture = _hasNorm16TextureSupport();\n    config = deepMerge(defaultConfig, configuration);\n    if (isIOS()) {\n        if (configuration.rendering?.preferSizeOverAccuracy) {\n            config.rendering.preferSizeOverAccuracy = true;\n        }\n        else {\n            console.log('norm16 texture not supported, you can turn on the preferSizeOverAccuracy flag to use native data type, but be aware of the inaccuracy of the rendering in high bits');\n        }\n    }\n    const hasWebGLContext = _hasActiveWebGLContext();\n    if (!hasWebGLContext) {\n        console.log('CornerstoneRender: GPU not detected, using CPU rendering');\n        config.rendering.useCPURendering = true;\n    }\n    else {\n        console.log('CornerstoneRender: using GPU rendering');\n    }\n    csRenderInitialized = true;\n    if (!webWorkerManager) {\n        webWorkerManager = new CentralizedWebWorkerManager();\n    }\n    return csRenderInitialized;\n}\nfunction getCanUseNorm16Texture() {\n    return canUseNorm16Texture;\n}\nfunction setUseCPURendering(status, updateViewports = true) {\n    config.rendering.useCPURendering = status;\n    csRenderInitialized = true;\n    if (updateViewports) {\n        _updateRenderingPipelinesForAllViewports();\n    }\n}\nfunction setPreferSizeOverAccuracy(status) {\n    config.rendering.preferSizeOverAccuracy = status;\n    csRenderInitialized = true;\n    _updateRenderingPipelinesForAllViewports();\n}\nfunction canRenderFloatTextures() {\n    if (!isIOS()) {\n        return true;\n    }\n    return false;\n}\nfunction resetUseCPURendering() {\n    config.rendering.useCPURendering = !_hasActiveWebGLContext();\n    _updateRenderingPipelinesForAllViewports();\n}\nfunction getShouldUseCPURendering() {\n    return config.rendering.useCPURendering;\n}\nfunction isCornerstoneInitialized() {\n    return csRenderInitialized;\n}\nfunction resetInitialization() {\n    csRenderInitialized = false;\n}\nfunction getConfiguration() {\n    return config;\n}\nfunction setConfiguration(c) {\n    config = c;\n    _updateRenderingPipelinesForAllViewports();\n}\nfunction _updateRenderingPipelinesForAllViewports() {\n    getRenderingEngines().forEach((engine) => {\n        engine.getViewports().forEach((viewport) => {\n            viewport.updateRenderingPipeline();\n        });\n    });\n}\nfunction getWebWorkerManager() {\n    if (!webWorkerManager) {\n        webWorkerManager = new CentralizedWebWorkerManager();\n    }\n    return webWorkerManager;\n}\nasync function peerImport(moduleId) {\n    return config.peerImport(moduleId);\n}\nexport { init, getShouldUseCPURendering, isCornerstoneInitialized, setUseCPURendering, setPreferSizeOverAccuracy, resetUseCPURendering, getConfiguration, setConfiguration, getWebWorkerManager, canRenderFloatTextures, peerImport, resetInitialization, getCanUseNorm16Texture, };\n","import singleRetrieveStages from './configuration/singleRetrieve';\nimport sequentialRetrieveStages from './configuration/sequentialRetrieve';\nimport interleavedRetrieveStages from './configuration/interleavedRetrieve';\nimport { loadAndCacheImage } from './imageLoader';\nimport triggerEvent from '../utilities/triggerEvent';\nimport ProgressiveIterator from '../utilities/ProgressiveIterator';\nimport decimate from '../utilities/decimate';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport { ImageQualityStatus, RequestType, Events } from '../enums';\nimport cache from '../cache/cache';\nimport eventTarget from '../eventTarget';\nimport { fillNearbyFrames } from './fillNearbyFrames';\nexport { sequentialRetrieveStages, interleavedRetrieveStages, singleRetrieveStages, };\nexport class ProgressiveRetrieveImages {\n    static { this.createProgressive = createProgressive; }\n    static { this.interleavedRetrieveStages = {\n        stages: interleavedRetrieveStages,\n    }; }\n    static { this.singleRetrieveStages = {\n        stages: singleRetrieveStages,\n    }; }\n    static { this.sequentialRetrieveStages = {\n        stages: sequentialRetrieveStages,\n    }; }\n    constructor(imageRetrieveConfiguration) {\n        this.stages = imageRetrieveConfiguration.stages || singleRetrieveStages;\n        this.retrieveOptions = imageRetrieveConfiguration.retrieveOptions || {};\n    }\n    loadImages(imageIds, listener) {\n        const instance = new ProgressiveRetrieveImagesInstance(this, imageIds, listener);\n        return instance.loadImages();\n    }\n}\nclass ProgressiveRetrieveImagesInstance {\n    constructor(configuration, imageIds, listener) {\n        this.outstandingRequests = 0;\n        this.stageStatusMap = new Map();\n        this.displayedIterator = new ProgressiveIterator('displayed');\n        this.stages = configuration.stages;\n        this.retrieveOptions = configuration.retrieveOptions;\n        this.imageIds = imageIds;\n        this.listener = listener;\n    }\n    async loadImages() {\n        const interleaved = this.createStageRequests();\n        this.outstandingRequests = interleaved.length;\n        for (const request of interleaved) {\n            this.addRequest(request);\n        }\n        if (this.outstandingRequests === 0) {\n            return Promise.resolve(null);\n        }\n        return this.displayedIterator.getDonePromise();\n    }\n    sendRequest(request, options) {\n        const { imageId, next } = request;\n        const errorCallback = (reason, done) => {\n            this.listener.errorCallback(imageId, complete || !next, reason);\n            if (done) {\n                this.updateStageStatus(request.stage, reason);\n            }\n        };\n        const loadedPromise = (options.loader || loadAndCacheImage)(imageId, options);\n        const uncompressedIterator = ProgressiveIterator.as(loadedPromise);\n        let complete = false;\n        uncompressedIterator\n            .forEach(async (image, done) => {\n            const oldStatus = cache.getImageQuality(imageId);\n            if (!image) {\n                console.warn('No image retrieved', imageId);\n                return;\n            }\n            const { imageQualityStatus } = image;\n            complete ||= imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\n            if (oldStatus !== undefined && oldStatus > imageQualityStatus) {\n                this.updateStageStatus(request.stage, null, true);\n                return;\n            }\n            this.listener.successCallback(imageId, image);\n            this.displayedIterator.add(image);\n            if (done) {\n                this.updateStageStatus(request.stage);\n            }\n            fillNearbyFrames(this.listener, request, image);\n        }, errorCallback)\n            .finally(() => {\n            if (!complete && next) {\n                cache.setPartialImage(imageId);\n                this.addRequest(next, options.streamingData);\n            }\n            else {\n                if (!complete) {\n                    this.listener.errorCallback(imageId, true, \"Couldn't decode\");\n                }\n                this.outstandingRequests--;\n                for (let skip = next; skip; skip = skip.next) {\n                    this.updateStageStatus(skip.stage, null, true);\n                }\n            }\n            if (this.outstandingRequests <= 0) {\n                this.displayedIterator.resolve();\n            }\n        });\n        const doneLoad = uncompressedIterator.getDonePromise();\n        return doneLoad.catch((e) => null);\n    }\n    addRequest(request, streamingData = {}) {\n        const { imageId, stage } = request;\n        const baseOptions = this.listener.getLoaderImageOptions(imageId);\n        if (!baseOptions) {\n            return;\n        }\n        const { retrieveType = 'default' } = stage;\n        const { retrieveOptions: keyedRetrieveOptions } = this;\n        const retrieveOptions = keyedRetrieveOptions[retrieveType] || keyedRetrieveOptions.default;\n        const options = {\n            ...baseOptions,\n            retrieveType,\n            retrieveOptions,\n            streamingData,\n        };\n        const priority = stage.priority ?? -5;\n        const requestType = stage.requestType || RequestType.Interaction;\n        const additionalDetails = { imageId };\n        imageLoadPoolManager.addRequest(this.sendRequest.bind(this, request, options), requestType, additionalDetails, priority);\n    }\n    updateStageStatus(stage, failure, skipped = false) {\n        const { id } = stage;\n        const stageStatus = this.stageStatusMap.get(id);\n        if (!stageStatus) {\n            return;\n        }\n        stageStatus.imageLoadPendingCount--;\n        if (failure) {\n            stageStatus.imageLoadFailedCount++;\n        }\n        else if (!skipped) {\n            stageStatus.totalImageCount++;\n        }\n        if (!skipped && !stageStatus.stageStartTime) {\n            stageStatus.stageStartTime = Date.now();\n        }\n        if (!stageStatus.imageLoadPendingCount) {\n            const { imageLoadFailedCount: numberOfFailures, totalImageCount: numberOfImages, stageStartTime = Date.now(), startTime, } = stageStatus;\n            const detail = {\n                stageId: id,\n                numberOfFailures,\n                numberOfImages,\n                stageDurationInMS: stageStartTime ? Date.now() - stageStartTime : null,\n                startDurationInMS: Date.now() - startTime,\n            };\n            triggerEvent(eventTarget, Events.IMAGE_RETRIEVAL_STAGE, detail);\n            this.stageStatusMap.delete(id);\n        }\n    }\n    createStageRequests() {\n        const interleaved = new Array();\n        const imageRequests = new Map();\n        const addStageInstance = (stage, position) => {\n            const index = position < 0\n                ? this.imageIds.length + position\n                : position < 1\n                    ? Math.floor((this.imageIds.length - 1) * position)\n                    : position;\n            const imageId = this.imageIds[index];\n            if (!imageId) {\n                throw new Error(`No value found to add to requests at ${position}`);\n            }\n            const request = {\n                imageId,\n                stage,\n                index,\n                nearbyRequests: this.findNearbyRequests(index, stage),\n            };\n            this.addStageStatus(stage);\n            const existingRequest = imageRequests.get(imageId);\n            if (existingRequest) {\n                existingRequest.next = request;\n            }\n            else {\n                interleaved.push(request);\n            }\n            imageRequests.set(imageId, request);\n        };\n        for (const stage of this.stages) {\n            const indices = stage.positions ||\n                decimate(this.imageIds, stage.decimate || 1, stage.offset ?? 0);\n            indices.forEach((index) => {\n                addStageInstance(stage, index);\n            });\n        }\n        return interleaved;\n    }\n    findNearbyRequests(index, stage) {\n        const nearby = new Array();\n        if (!stage.nearbyFrames) {\n            return nearby;\n        }\n        for (const nearbyItem of stage.nearbyFrames) {\n            const nearbyIndex = index + nearbyItem.offset;\n            if (nearbyIndex < 0 || nearbyIndex >= this.imageIds.length) {\n                continue;\n            }\n            nearby.push({\n                itemId: this.imageIds[nearbyIndex],\n                imageQualityStatus: nearbyItem.imageQualityStatus,\n                index: nearbyIndex,\n            });\n        }\n        return nearby;\n    }\n    addStageStatus(stage) {\n        const { id } = stage;\n        const stageStatus = this.stageStatusMap.get(id) || {\n            stageId: id,\n            startTime: Date.now(),\n            stageStartTime: null,\n            totalImageCount: 0,\n            imageLoadFailedCount: 0,\n            imageLoadPendingCount: 0,\n        };\n        stageStatus.imageLoadPendingCount++;\n        this.stageStatusMap.set(id, stageStatus);\n        return stageStatus;\n    }\n}\nexport function createProgressive(configuration) {\n    return new ProgressiveRetrieveImages(configuration);\n}\nexport default ProgressiveRetrieveImages;\n","import { RequestType, ImageQualityStatus } from '../../enums';\nconst nearbyFrames = [\n    {\n        offset: -1,\n        imageQualityStatus: ImageQualityStatus.ADJACENT_REPLICATE,\n    },\n    {\n        offset: +1,\n        imageQualityStatus: ImageQualityStatus.ADJACENT_REPLICATE,\n    },\n    { offset: +2, imageQualityStatus: ImageQualityStatus.FAR_REPLICATE },\n];\nconst interleavedRetrieveConfiguration = [\n    {\n        id: 'initialImages',\n        positions: [0.5, 0, -1],\n        retrieveType: 'default',\n        requestType: RequestType.Thumbnail,\n        priority: 5,\n        nearbyFrames,\n    },\n    {\n        id: 'quarterThumb',\n        decimate: 4,\n        offset: 3,\n        requestType: RequestType.Thumbnail,\n        retrieveType: 'multipleFast',\n        priority: 6,\n        nearbyFrames,\n    },\n    {\n        id: 'halfThumb',\n        decimate: 4,\n        offset: 1,\n        priority: 7,\n        requestType: RequestType.Thumbnail,\n        retrieveType: 'multipleFast',\n        nearbyFrames,\n    },\n    {\n        id: 'quarterFull',\n        decimate: 4,\n        offset: 2,\n        priority: 8,\n        requestType: RequestType.Thumbnail,\n        retrieveType: 'multipleFinal',\n    },\n    {\n        id: 'halfFull',\n        decimate: 4,\n        offset: 0,\n        priority: 9,\n        requestType: RequestType.Thumbnail,\n        retrieveType: 'multipleFinal',\n    },\n    {\n        id: 'threeQuarterFull',\n        decimate: 4,\n        offset: 1,\n        priority: 10,\n        requestType: RequestType.Thumbnail,\n        retrieveType: 'multipleFinal',\n    },\n    {\n        id: 'finalFull',\n        decimate: 4,\n        offset: 3,\n        priority: 11,\n        requestType: RequestType.Thumbnail,\n        retrieveType: 'multipleFinal',\n    },\n    {\n        id: 'errorRetrieve',\n    },\n];\nexport default interleavedRetrieveConfiguration;\n","const sequentialRetrieveStages = [\n    {\n        id: 'lossySequential',\n        retrieveType: 'singleFast',\n    },\n    {\n        id: 'finalSequential',\n        retrieveType: 'singleFinal',\n    },\n];\nexport default sequentialRetrieveStages;\n","const singleRetrieveStages = [\n    {\n        id: 'initialImages',\n        retrieveType: 'single',\n    },\n];\nexport default singleRetrieveStages;\n","import { createMesh } from './utils/mesh/createMesh';\nimport { Events } from '../enums';\nimport eventTarget from '../eventTarget';\nimport { triggerEvent } from '../utilities';\nfunction fetchArrayBuffer({ url, signal, onload, loaderOptions, }) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        const defaultHeaders = {};\n        const beforeSendHeaders = loaderOptions.beforeSend(xhr, defaultHeaders);\n        const headers = Object.assign({}, defaultHeaders, beforeSendHeaders);\n        xhr.responseType = 'arraybuffer';\n        Object.keys(headers).forEach(function (key) {\n            if (headers[key] === null) {\n                return;\n            }\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        const onLoadHandler = function (e) {\n            if (onload && typeof onload === 'function') {\n                onload();\n            }\n            if (signal) {\n                signal.removeEventListener('abort', onAbortHandler);\n            }\n            resolve(xhr.response);\n        };\n        const onAbortHandler = () => {\n            xhr.abort();\n            xhr.removeEventListener('load', onLoadHandler);\n            reject(new Error('Request aborted'));\n        };\n        xhr.addEventListener('load', onLoadHandler);\n        const onProgress = (loaded, total) => {\n            const data = { url, loaded, total };\n            triggerEvent(eventTarget, Events.GEOMETRY_LOAD_PROGRESS, { data });\n        };\n        xhr.onprogress = function (e) {\n            onProgress(e.loaded, e.total);\n        };\n        if (signal && signal.aborted) {\n            xhr.abort();\n            reject(new Error('Request aborted'));\n        }\n        else if (signal) {\n            signal.addEventListener('abort', onAbortHandler);\n        }\n        xhr.send();\n    });\n}\nfunction cornerstoneMeshLoader(meshId, options, loaderOptions) {\n    const promise = new Promise((resolve, reject) => {\n        fetchAndProcessMeshData(meshId, options, loaderOptions)\n            .then(resolve)\n            .catch(reject);\n    });\n    return {\n        promise: promise,\n        cancelFn: undefined,\n        decache: () => { },\n    };\n}\nasync function fetchAndProcessMeshData(meshId, options, loaderOptions) {\n    const parts = meshId.split(':');\n    const url = parts.slice(1).join(':');\n    const meshBuffer = await fetchArrayBuffer({ url, loaderOptions });\n    if (!options || !('geometryData' in options)) {\n        throw new Error('Mesh must have a geometryData');\n    }\n    return createMesh(url, {\n        ...options.geometryData,\n        arrayBuffer: meshBuffer,\n    });\n}\nexport { cornerstoneMeshLoader };\n","import { StreamingDynamicImageVolume } from '../cache';\nimport { generateVolumePropsFromImageIds, sortImageIdsAndGetSpacing, splitImageIdsBy4DTags, VoxelManager, } from '../utilities';\nfunction cornerstoneStreamingDynamicImageVolumeLoader(volumeId, options) {\n    if (!options || !options.imageIds || !options.imageIds.length) {\n        throw new Error('ImageIds must be provided to create a 4D streaming image volume');\n    }\n    const { imageIds } = options;\n    const { splittingTag, imageIdGroups } = splitImageIdsBy4DTags(imageIds);\n    const middleIndex = Math.floor(imageIdGroups.length / 2);\n    const volumeProps = generateVolumePropsFromImageIds(imageIdGroups[middleIndex], volumeId);\n    const { metadata: volumeMetadata, dimensions, spacing, direction, sizeInBytes, origin, numberOfComponents, dataType, } = volumeProps;\n    const scanAxisNormal = direction.slice(6, 9);\n    const sortedImageIdGroups = imageIdGroups.map((imageIds) => {\n        const sortedImageIds = sortImageIdsAndGetSpacing(imageIds, scanAxisNormal).sortedImageIds;\n        return sortedImageIds;\n    });\n    const sortedFlatImageIds = sortedImageIdGroups.flat();\n    const voxelManager = VoxelManager.createScalarDynamicVolumeVoxelManager({\n        dimensions,\n        imageIdGroups: sortedImageIdGroups,\n        dimensionGroupNumber: 1,\n        numberOfComponents,\n    });\n    let streamingImageVolume = new StreamingDynamicImageVolume({\n        volumeId,\n        metadata: volumeMetadata,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n        sizeInBytes,\n        imageIds: sortedFlatImageIds,\n        imageIdGroups: sortedImageIdGroups,\n        splittingTag,\n        voxelManager,\n        numberOfComponents,\n        dataType,\n    }, {\n        imageIds: sortedFlatImageIds,\n        loadStatus: {\n            loaded: false,\n            loading: false,\n            cancelled: false,\n            cachedFrames: [],\n            callbacks: [],\n        },\n    });\n    return {\n        promise: Promise.resolve(streamingImageVolume),\n        decache: () => {\n            streamingImageVolume.destroy();\n            streamingImageVolume = null;\n        },\n        cancel: () => {\n            streamingImageVolume.cancelLoading();\n        },\n    };\n}\nexport { cornerstoneStreamingDynamicImageVolumeLoader };\n","import cache from '../cache/cache';\nimport StreamingImageVolume from '../cache/classes/StreamingImageVolume';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport { generateVolumePropsFromImageIds } from '../utilities/generateVolumePropsFromImageIds';\nimport { loadImage } from './imageLoader';\nfunction cornerstoneStreamingImageVolumeLoader(volumeId, options) {\n    if (!options || !options.imageIds || !options.imageIds.length) {\n        throw new Error('ImageIds must be provided to create a streaming image volume');\n    }\n    async function getStreamingImageVolume() {\n        if (options.imageIds[0].split(':')[0] === 'wadouri') {\n            const [middleImageIndex, lastImageIndex] = [\n                Math.floor(options.imageIds.length / 2),\n                options.imageIds.length - 1,\n            ];\n            const indexesToPrefetch = [0, middleImageIndex, lastImageIndex];\n            await Promise.all(indexesToPrefetch.map((index) => {\n                if (cache.isLoaded(options.imageIds[index])) {\n                    return Promise.resolve(true);\n                }\n                return new Promise((resolve, reject) => {\n                    const imageId = options.imageIds[index];\n                    imageLoadPoolManager.addRequest(async () => {\n                        loadImage(imageId)\n                            .then(() => {\n                            console.log(`Prefetched imageId: ${imageId}`);\n                            resolve(true);\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    }, RequestType.Prefetch, { volumeId }, 1);\n                });\n            })).catch(console.error);\n        }\n        const volumeProps = generateVolumePropsFromImageIds(options.imageIds, volumeId);\n        const { dimensions, spacing, origin, direction, metadata, imageIds, dataType, numberOfComponents, } = volumeProps;\n        const streamingImageVolume = new StreamingImageVolume({\n            volumeId,\n            metadata,\n            dimensions,\n            spacing,\n            origin,\n            direction,\n            imageIds,\n            dataType,\n            numberOfComponents,\n        }, {\n            imageIds,\n            loadStatus: {\n                loaded: false,\n                loading: false,\n                cancelled: false,\n                cachedFrames: [],\n                callbacks: [],\n            },\n        });\n        return streamingImageVolume;\n    }\n    const streamingImageVolumePromise = getStreamingImageVolume();\n    return {\n        promise: streamingImageVolumePromise,\n        decache: () => {\n            streamingImageVolumePromise.then((streamingImageVolume) => {\n                streamingImageVolume.destroy();\n                streamingImageVolume = null;\n            });\n        },\n        cancel: () => {\n            streamingImageVolumePromise.then((streamingImageVolume) => {\n                streamingImageVolume.cancelLoading();\n            });\n        },\n    };\n}\nexport { cornerstoneStreamingImageVolumeLoader };\n","import cache from '../cache/cache';\nexport function fillNearbyFrames(listener, request, image) {\n    if (!request?.nearbyRequests?.length) {\n        return;\n    }\n    for (const nearbyItem of request.nearbyRequests) {\n        try {\n            const { itemId: targetId, imageQualityStatus } = nearbyItem;\n            const currentStatus = cache.getImageQuality(targetId);\n            if (currentStatus !== undefined && currentStatus >= imageQualityStatus) {\n                continue;\n            }\n            const nearbyImage = {\n                ...image,\n                imageId: targetId,\n                imageQualityStatus,\n            };\n            cache.setPartialImage(targetId, nearbyImage);\n            listener.successCallback(targetId, nearbyImage);\n        }\n        catch (e) {\n            console.warn(\"Couldn't fill nearby item \", nearbyItem.itemId, e);\n        }\n    }\n}\n","import '@kitware/vtk.js/Rendering/Profiles/Geometry';\nimport cache from '../cache/cache';\nimport { GeometryType } from '../enums';\nimport { createContourSet } from './utils/contourSet/createContourSet';\nimport { createSurface } from './utils/surface/createSurface';\nimport { createMesh } from './utils/mesh/createMesh';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport triggerEvent from '../utilities/triggerEvent';\nimport { cornerstoneMeshLoader } from './cornerstoneMeshLoader';\nlet loaderOptions = {\n    beforeSend(xhr) {\n    },\n};\nexport function setOptions(newOptions) {\n    loaderOptions = Object.assign(loaderOptions, newOptions);\n}\nexport function getOptions() {\n    return loaderOptions;\n}\nconst geometryLoaders = {};\nlet unknownGeometryLoader;\nfunction loadGeometryFromGeometryLoader(geometryId, options) {\n    const colonIndex = geometryId.indexOf(':');\n    const scheme = geometryId.substring(0, colonIndex);\n    let loader = geometryLoaders[scheme];\n    if (loader === undefined || loader === null) {\n        if (unknownGeometryLoader == null ||\n            typeof unknownGeometryLoader !== 'function') {\n            throw new Error(`No geometry loader for scheme ${scheme} has been registered`);\n        }\n        loader = unknownGeometryLoader;\n    }\n    const geometryLoadObject = loader(geometryId, options, loaderOptions);\n    geometryLoadObject.promise.then(function (geometry) {\n        triggerEvent(eventTarget, Events.GEOMETRY_LOADED, { geometry });\n    }, function (error) {\n        const errorObject = {\n            geometryId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.GEOMETRY_LOADED_FAILED, errorObject);\n    });\n    return geometryLoadObject;\n}\nexport function loadGeometry(geometryId, options) {\n    if (geometryId === undefined) {\n        throw new Error('loadGeometry: parameter geometryId must not be undefined');\n    }\n    let geometryLoadObject = cache.getGeometryLoadObject(geometryId);\n    if (geometryLoadObject !== undefined) {\n        return geometryLoadObject.promise;\n    }\n    geometryLoadObject = loadGeometryFromGeometryLoader(geometryId, options);\n    return geometryLoadObject.promise;\n}\nexport async function loadAndCacheGeometry(geometryId, options) {\n    if (geometryId === undefined) {\n        throw new Error('createAndCacheGeometry: parameter geometryId must not be undefined');\n    }\n    let geometryLoadObject = cache.getGeometryLoadObject(geometryId);\n    if (geometryLoadObject !== undefined) {\n        return geometryLoadObject.promise;\n    }\n    geometryLoadObject = loadGeometryFromGeometryLoader(geometryId, options);\n    await cache.putGeometryLoadObject(geometryId, geometryLoadObject);\n    return geometryLoadObject.promise;\n}\nexport function createAndCacheGeometry(geometryId, options) {\n    if (geometryId === undefined) {\n        throw new Error('createAndCacheGeometry: parameter geometryId must not be undefined');\n    }\n    let geometry = cache.getGeometry(geometryId);\n    if (geometry) {\n        return geometry;\n    }\n    if (options.type === GeometryType.CONTOUR) {\n        geometry = createContourSet(geometryId, options.geometryData);\n    }\n    else if (options.type === GeometryType.SURFACE) {\n        geometry = createSurface(geometryId, options.geometryData);\n    }\n    else if (options.type === GeometryType.MESH) {\n        createMesh(geometryId, options.geometryData).then((mesh) => {\n            geometry = mesh;\n        });\n    }\n    else {\n        throw new Error(`Unknown geometry type: ${options.type}`);\n    }\n    cache.putGeometrySync(geometryId, geometry);\n    return geometry;\n}\nexport function registerGeometryLoader(scheme, geometryLoader) {\n    geometryLoaders[scheme] = geometryLoader;\n}\nexport function registerUnknownGeometryLoader(geometryLoader) {\n    const oldGeometryLoader = unknownGeometryLoader;\n    unknownGeometryLoader = geometryLoader;\n    return oldGeometryLoader;\n}\nregisterGeometryLoader('mesh', cornerstoneMeshLoader);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","import { GeometryType } from '../../../enums';\nimport { validateContourSet } from './validateContourSet';\nimport { ContourSet } from '../../../cache/classes/ContourSet';\nexport function createContourSet(geometryId, contourSetData) {\n    validateContourSet(contourSetData);\n    const contourSet = new ContourSet({\n        id: contourSetData.id,\n        data: contourSetData.data,\n        color: contourSetData.color,\n        frameOfReferenceUID: contourSetData.frameOfReferenceUID,\n        segmentIndex: contourSetData.segmentIndex ?? 1,\n    });\n    const geometry = {\n        id: geometryId,\n        type: GeometryType.CONTOUR,\n        data: contourSet,\n        sizeInBytes: contourSet.sizeInBytes,\n    };\n    return geometry;\n}\n","export function validateContourSet(contourSetData) {\n    if (!contourSetData || contourSetData.data.length === 0) {\n        throw new Error('Invalid contour set data, see publicContourSetData type for more info');\n    }\n    if (!contourSetData.id) {\n        throw new Error('Invalid contour set data, each contour set must have an id');\n    }\n    if (!contourSetData.data || !Array.isArray(contourSetData.data)) {\n        throw new Error('Invalid contour set data, each contour set must have an array of contours');\n    }\n    contourSetData.data.forEach((contourData) => {\n        if (!contourData.points || !Array.isArray(contourData.points)) {\n            throw new Error('Invalid contour set data, each contour must have an array of points');\n        }\n        contourData.points.forEach((point) => {\n            if (!point || !Array.isArray(point) || point.length !== 3) {\n                throw new Error('Invalid contour set data, each point must be an array of length 3');\n            }\n        });\n    });\n}\n","import { GeometryType, MeshType } from '../../../enums';\nimport { Mesh } from '../../../cache/classes/Mesh';\nimport { validateMesh } from './validateMesh';\nimport vtkMTLReader from '@kitware/vtk.js/IO/Misc/MTLReader';\nimport vtkTexture from '@kitware/vtk.js/Rendering/Core/Texture';\nexport function createMesh(geometryId, meshData) {\n    validateMesh(meshData);\n    const mesh = new Mesh({\n        ...meshData,\n    });\n    const geometry = {\n        id: geometryId,\n        type: GeometryType.MESH,\n        data: mesh,\n        sizeInBytes: mesh.sizeInBytes,\n    };\n    switch (meshData.format) {\n        case MeshType.PLY:\n            if (meshData.materialUrl) {\n                const img = new Image();\n                return new Promise((resolve, reject) => {\n                    img.onload = () => {\n                        try {\n                            const texture = vtkTexture.newInstance();\n                            texture.setInterpolate(true);\n                            texture.setImage(img);\n                            mesh.defaultActor.addTexture(texture);\n                            resolve(geometry);\n                        }\n                        catch (error) {\n                            reject(error);\n                        }\n                    };\n                    img.onerror = (error) => reject(error);\n                    img.src = meshData.materialUrl;\n                });\n            }\n            return Promise.resolve(geometry);\n        case MeshType.OBJ:\n            if (meshData.materialUrl) {\n                const reader = vtkMTLReader.newInstance();\n                return reader\n                    .setUrl(meshData.materialUrl)\n                    .then(() => {\n                    for (let i = 0; i < mesh.actors.length; i++) {\n                        const actor = mesh.actors[i];\n                        const mapper = actor.getMapper();\n                        if (mapper) {\n                            const inputData = mapper.getInputData();\n                            if (inputData) {\n                                const name = inputData.get('name').name;\n                                reader.applyMaterialToActor(name, actor);\n                            }\n                        }\n                    }\n                    return geometry;\n                })\n                    .catch((error) => {\n                    throw new Error(`Failed to load material: ${error}`);\n                });\n            }\n            return Promise.resolve(geometry);\n        case MeshType.STL:\n        case MeshType.VTP:\n            return Promise.resolve(geometry);\n        default:\n            return Promise.reject(new Error(`Unsupported format: ${meshData.format}`));\n    }\n}\n","import { MeshType } from '../../../enums';\nexport function validateMesh(meshData) {\n    if (!meshData.id) {\n        throw new Error('Mesh must have an id');\n    }\n    if (!meshData.arrayBuffer) {\n        throw new Error('Mesh must have an arrayBuffer');\n    }\n    if (!(meshData.format in MeshType)) {\n        throw new Error(`Mesh format must be one of the following: ${Object.values(MeshType).join(', ')}`);\n    }\n}\n","import { GeometryType } from '../../../enums';\nimport { validateSurface } from './validateSurface';\nimport { Surface } from '../../../cache/classes/Surface';\nexport function createSurface(geometryId, surfaceData) {\n    validateSurface(surfaceData);\n    const surface = new Surface({\n        id: surfaceData.id,\n        points: surfaceData.points,\n        polys: surfaceData.polys,\n        color: surfaceData.color,\n        frameOfReferenceUID: surfaceData.frameOfReferenceUID,\n        segmentIndex: surfaceData.segmentIndex ?? 1,\n    });\n    const geometry = {\n        id: geometryId,\n        type: GeometryType.SURFACE,\n        data: surface,\n        sizeInBytes: surface.sizeInBytes,\n    };\n    return geometry;\n}\n","export function validateSurface(surfaceData) {\n    if (!surfaceData.id) {\n        throw new Error('Surface must have an id');\n    }\n    if (surfaceData.points?.length === 0) {\n        throw new Error('Surface must have non-empty points array');\n    }\n    if (surfaceData.polys?.length === 0) {\n        throw new Error('Surface must have non-empty polys array');\n    }\n    if (!surfaceData.frameOfReferenceUID) {\n        throw new Error('Surface must have a frameOfReferenceUID');\n    }\n}\n","import '@kitware/vtk.js/Rendering/Profiles/Volume';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport { createAndCacheLocalImage, createAndCacheDerivedImages, } from './imageLoader';\nimport { generateVolumePropsFromImageIds } from '../utilities/generateVolumePropsFromImageIds';\nimport { cornerstoneStreamingImageVolumeLoader } from './cornerstoneStreamingImageVolumeLoader';\nconst volumeLoaders = {};\nlet unknownVolumeLoader = cornerstoneStreamingImageVolumeLoader;\nfunction loadVolumeFromVolumeLoader(volumeId, options) {\n    const colonIndex = volumeId.indexOf(':');\n    const scheme = volumeId.substring(0, colonIndex);\n    let loader = volumeLoaders[scheme];\n    if (loader === undefined || loader === null) {\n        if (unknownVolumeLoader == null ||\n            typeof unknownVolumeLoader !== 'function') {\n            throw new Error(`No volume loader for scheme ${scheme} has been registered`);\n        }\n        loader = unknownVolumeLoader;\n    }\n    const volumeLoadObject = loader(volumeId, options);\n    volumeLoadObject.promise.then(function (volume) {\n        triggerEvent(eventTarget, Events.VOLUME_LOADED, { volume });\n    }, function (error) {\n        const errorObject = {\n            volumeId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.VOLUME_LOADED_FAILED, errorObject);\n    });\n    return volumeLoadObject;\n}\nexport function loadVolume(volumeId, options = { imageIds: [] }) {\n    if (volumeId === undefined) {\n        throw new Error('loadVolume: parameter volumeId must not be undefined');\n    }\n    let volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n    if (volumeLoadObject !== undefined) {\n        return volumeLoadObject.promise;\n    }\n    volumeLoadObject = loadVolumeFromVolumeLoader(volumeId, options);\n    return volumeLoadObject.promise.then((volume) => {\n        return volume;\n    });\n}\nexport async function createAndCacheVolume(volumeId, options) {\n    if (volumeId === undefined) {\n        throw new Error('createAndCacheVolume: parameter volumeId must not be undefined');\n    }\n    let volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n    if (volumeLoadObject !== undefined) {\n        return volumeLoadObject.promise;\n    }\n    volumeLoadObject = loadVolumeFromVolumeLoader(volumeId, options);\n    cache.putVolumeLoadObject(volumeId, volumeLoadObject);\n    return volumeLoadObject.promise;\n}\nexport function createAndCacheDerivedVolume(referencedVolumeId, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Cannot created derived volume: Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    let { volumeId } = options;\n    const { voxelRepresentation } = options;\n    if (volumeId === undefined) {\n        volumeId = uuidv4();\n    }\n    const { metadata, dimensions, spacing, origin, direction } = referencedVolume;\n    const referencedImageIds = referencedVolume.isDynamicVolume()\n        ? referencedVolume.getCurrentDimensionGroupImageIds()\n        : referencedVolume.imageIds ?? [];\n    const derivedImages = createAndCacheDerivedImages(referencedImageIds, {\n        targetBuffer: options.targetBuffer,\n        voxelRepresentation,\n    });\n    const dataType = derivedImages[0].dataType;\n    const derivedVolumeImageIds = derivedImages.map((image) => image.imageId);\n    const derivedVolume = new ImageVolume({\n        volumeId,\n        dataType,\n        metadata: structuredClone(metadata),\n        dimensions: [dimensions[0], dimensions[1], dimensions[2]],\n        spacing,\n        origin,\n        direction,\n        referencedVolumeId,\n        imageIds: derivedVolumeImageIds,\n        referencedImageIds: referencedVolume.imageIds ?? [],\n    });\n    cache.putVolumeSync(volumeId, derivedVolume);\n    return derivedVolume;\n}\nexport async function createAndCacheVolumeFromImages(volumeId, imageIds) {\n    if (imageIds === undefined) {\n        throw new Error('createAndCacheVolumeFromImages: parameter imageIds must not be undefined');\n    }\n    if (volumeId === undefined) {\n        throw new Error('createAndCacheVolumeFromImages: parameter volumeId must not be undefined');\n    }\n    const cachedVolume = cache.getVolume(volumeId);\n    if (cachedVolume) {\n        return cachedVolume;\n    }\n    const imageIdsToLoad = imageIds.filter((imageId) => !cache.getImage(imageId));\n    if (imageIdsToLoad.length === 0) {\n        return createAndCacheVolumeFromImagesSync(volumeId, imageIds);\n    }\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    return volume;\n}\nexport function createAndCacheVolumeFromImagesSync(volumeId, imageIds) {\n    if (imageIds === undefined) {\n        throw new Error('createAndCacheVolumeFromImagesSync: parameter imageIds must not be undefined');\n    }\n    if (volumeId === undefined) {\n        throw new Error('createAndCacheVolumeFromImagesSync: parameter volumeId must not be undefined');\n    }\n    const cachedVolume = cache.getVolume(volumeId);\n    if (cachedVolume) {\n        return cachedVolume;\n    }\n    const volumeProps = generateVolumePropsFromImageIds(imageIds, volumeId);\n    const derivedVolume = new ImageVolume({\n        volumeId,\n        dataType: volumeProps.dataType,\n        metadata: structuredClone(volumeProps.metadata),\n        dimensions: volumeProps.dimensions,\n        spacing: volumeProps.spacing,\n        origin: volumeProps.origin,\n        direction: volumeProps.direction,\n        referencedVolumeId: volumeProps.referencedVolumeId,\n        imageIds: volumeProps.imageIds,\n        referencedImageIds: volumeProps.referencedImageIds,\n    });\n    cache.putVolumeSync(volumeId, derivedVolume);\n    return derivedVolume;\n}\nexport function createLocalVolume(volumeId, options = {}) {\n    const { metadata, dimensions, spacing, origin, direction, scalarData, targetBuffer, preventCache = false, } = options;\n    const cachedVolume = cache.getVolume(volumeId);\n    if (cachedVolume) {\n        return cachedVolume;\n    }\n    const sliceLength = dimensions[0] * dimensions[1];\n    const dataType = scalarData\n        ? scalarData.constructor.name\n        : targetBuffer?.type ?? 'Float32Array';\n    const totalNumberOfVoxels = sliceLength * dimensions[2];\n    let byteLength;\n    switch (dataType) {\n        case 'Uint8Array':\n        case 'Int8Array':\n            byteLength = totalNumberOfVoxels;\n            break;\n        case 'Uint16Array':\n        case 'Int16Array':\n            byteLength = totalNumberOfVoxels * 2;\n            break;\n        case 'Float32Array':\n            byteLength = totalNumberOfVoxels * 4;\n            break;\n    }\n    const isCacheable = cache.isCacheable(byteLength);\n    if (!isCacheable) {\n        throw new Error(`Cannot created derived volume: Volume with id ${volumeId} is not cacheable.`);\n    }\n    const imageIds = [];\n    const derivedImages = [];\n    for (let i = 0; i < dimensions[2]; i++) {\n        const imageId = `${volumeId}_slice_${i}`;\n        imageIds.push(imageId);\n        const sliceData = scalarData.subarray(i * sliceLength, (i + 1) * sliceLength);\n        const derivedImage = createAndCacheLocalImage(imageId, {\n            scalarData: sliceData,\n            dimensions: [dimensions[0], dimensions[1]],\n            spacing: [spacing[0], spacing[1]],\n            origin,\n            direction,\n            targetBuffer: { type: dataType },\n        });\n        derivedImages.push(derivedImage);\n    }\n    const imageVolume = new ImageVolume({\n        volumeId,\n        metadata: structuredClone(metadata),\n        dimensions: [dimensions[0], dimensions[1], dimensions[2]],\n        spacing,\n        origin,\n        direction,\n        imageIds,\n        dataType,\n    });\n    const voxelManager = VoxelManager.createImageVolumeVoxelManager({\n        imageIds,\n        dimensions,\n        numberOfComponents: 1,\n        id: volumeId,\n    });\n    imageVolume.voxelManager = voxelManager;\n    if (!preventCache) {\n        cache.putVolumeSync(volumeId, imageVolume);\n    }\n    return imageVolume;\n}\nexport function registerVolumeLoader(scheme, volumeLoader) {\n    volumeLoaders[scheme] = volumeLoader;\n}\nexport function getVolumeLoaderSchemes() {\n    return Object.keys(volumeLoaders);\n}\nexport function registerUnknownVolumeLoader(volumeLoader) {\n    const oldVolumeLoader = unknownVolumeLoader;\n    unknownVolumeLoader = volumeLoader;\n    return oldVolumeLoader;\n}\nexport function getUnknownVolumeLoaderSchema() {\n    return unknownVolumeLoader.name;\n}\nexport function createAndCacheDerivedLabelmapVolume(referencedVolumeId, options = {}) {\n    return createAndCacheDerivedVolume(referencedVolumeId, {\n        ...options,\n        targetBuffer: {\n            type: 'Uint8Array',\n            ...options?.targetBuffer,\n        },\n    });\n}\nexport function createLocalLabelmapVolume(options, volumeId, preventCache = false) {\n    if (!options.scalarData) {\n        options.scalarData = new Uint8Array(options.dimensions[0] * options.dimensions[1] * options.dimensions[2]);\n    }\n    return createLocalVolume(volumeId, { ...options, preventCache });\n}\n","const providers = [];\nexport function addProvider(provider, priority = 0) {\n    let i;\n    for (i = 0; i < providers.length; i++) {\n        if (providers[i].priority <= priority) {\n            break;\n        }\n    }\n    providers.splice(i, 0, {\n        priority,\n        provider,\n    });\n}\nexport function removeProvider(provider) {\n    for (let i = 0; i < providers.length; i++) {\n        if (providers[i].provider === provider) {\n            providers.splice(i, 1);\n            break;\n        }\n    }\n}\nexport function removeAllProviders() {\n    while (providers.length > 0) {\n        providers.pop();\n    }\n}\nfunction getMetaData(type, ...queries) {\n    for (let i = 0; i < providers.length; i++) {\n        const result = providers[i].provider(type, ...queries);\n        if (result !== undefined) {\n            return result;\n        }\n    }\n}\nexport { getMetaData as get };\n","import { RequestPoolManager } from './requestPoolManager';\nimport RequestType from '../enums/RequestType';\nconst imageLoadPoolManager = new RequestPoolManager('imageLoadPool');\nimageLoadPoolManager.grabDelay = 0;\nimageLoadPoolManager.setMaxSimultaneousRequests(RequestType.Interaction, 1000);\nimageLoadPoolManager.setMaxSimultaneousRequests(RequestType.Thumbnail, 1000);\nimageLoadPoolManager.setMaxSimultaneousRequests(RequestType.Prefetch, 1000);\nexport default imageLoadPoolManager;\n","import { RequestPoolManager } from './requestPoolManager';\nimport RequestType from '../enums/RequestType';\nconst imageRetrievalPoolManager = new RequestPoolManager('imageRetrievalPool');\nimageRetrievalPoolManager.setMaxSimultaneousRequests(RequestType.Interaction, 200);\nimageRetrievalPoolManager.setMaxSimultaneousRequests(RequestType.Thumbnail, 200);\nimageRetrievalPoolManager.setMaxSimultaneousRequests(RequestType.Prefetch, 200);\nimageRetrievalPoolManager.grabDelay = 0;\nexport default imageRetrievalPoolManager;\n","import RequestType from '../enums/RequestType';\nimport uuidv4 from '../utilities/uuidv4';\nclass RequestPoolManager {\n    constructor(id) {\n        this.numRequests = {\n            [RequestType.Interaction]: 0,\n            [RequestType.Thumbnail]: 0,\n            [RequestType.Prefetch]: 0,\n            [RequestType.Compute]: 0,\n        };\n        this.id = id ? id : uuidv4();\n        this.requestPool = {\n            [RequestType.Interaction]: { 0: [] },\n            [RequestType.Thumbnail]: { 0: [] },\n            [RequestType.Prefetch]: { 0: [] },\n            [RequestType.Compute]: { 0: [] },\n        };\n        this.grabDelay = 5;\n        this.awake = false;\n        this.numRequests = {\n            [RequestType.Interaction]: 0,\n            [RequestType.Thumbnail]: 0,\n            [RequestType.Prefetch]: 0,\n            [RequestType.Compute]: 0,\n        };\n        this.maxNumRequests = {\n            [RequestType.Interaction]: 6,\n            [RequestType.Thumbnail]: 6,\n            [RequestType.Prefetch]: 5,\n            [RequestType.Compute]: 1000,\n        };\n    }\n    setMaxSimultaneousRequests(type, maxNumRequests) {\n        this.maxNumRequests[type] = maxNumRequests;\n    }\n    getMaxSimultaneousRequests(type) {\n        return this.maxNumRequests[type];\n    }\n    destroy() {\n        if (this.timeoutHandle) {\n            window.clearTimeout(this.timeoutHandle);\n        }\n    }\n    addRequest(requestFn, type, additionalDetails, priority = 0) {\n        const requestDetails = {\n            requestFn,\n            type,\n            additionalDetails,\n        };\n        if (this.requestPool[type][priority] === undefined) {\n            this.requestPool[type][priority] = [];\n        }\n        this.requestPool[type][priority].push(requestDetails);\n        this.startGrabbing();\n    }\n    filterRequests(filterFunction) {\n        Object.keys(this.requestPool).forEach((type) => {\n            const requestType = this.requestPool[type];\n            Object.keys(requestType).forEach((priority) => {\n                requestType[priority] = requestType[priority].filter((requestDetails) => {\n                    return filterFunction(requestDetails);\n                });\n            });\n        });\n    }\n    clearRequestStack(type) {\n        if (!this.requestPool[type]) {\n            throw new Error(`No category for the type ${type} found`);\n        }\n        this.requestPool[type] = { 0: [] };\n    }\n    sendRequests(type) {\n        const requestsToSend = this.maxNumRequests[type] - this.numRequests[type];\n        let syncImageCount = 0;\n        for (let i = 0; i < requestsToSend; i++) {\n            const requestDetails = this.getNextRequest(type);\n            if (requestDetails === null) {\n                return false;\n            }\n            else if (requestDetails) {\n                this.numRequests[type]++;\n                this.awake = true;\n                let requestResult;\n                try {\n                    requestResult = requestDetails.requestFn();\n                }\n                catch (e) {\n                    console.warn('sendRequest failed', e);\n                }\n                if (requestResult?.finally) {\n                    requestResult.finally(() => {\n                        this.numRequests[type]--;\n                        this.startAgain();\n                    });\n                }\n                else {\n                    this.numRequests[type]--;\n                    syncImageCount++;\n                }\n            }\n        }\n        if (syncImageCount) {\n            this.startAgain();\n        }\n        return true;\n    }\n    getNextRequest(type) {\n        const interactionPriorities = this.getSortedPriorityGroups(type);\n        for (const priority of interactionPriorities) {\n            if (this.requestPool[type][priority].length) {\n                return this.requestPool[type][priority].shift();\n            }\n        }\n        return null;\n    }\n    startGrabbing() {\n        const hasRemainingInteractionRequests = this.sendRequests(RequestType.Interaction);\n        const hasRemainingThumbnailRequests = this.sendRequests(RequestType.Thumbnail);\n        const hasRemainingPrefetchRequests = this.sendRequests(RequestType.Prefetch);\n        const hasRemainingComputeRequests = this.sendRequests(RequestType.Compute);\n        if (!hasRemainingInteractionRequests &&\n            !hasRemainingThumbnailRequests &&\n            !hasRemainingPrefetchRequests &&\n            !hasRemainingComputeRequests) {\n            this.awake = false;\n        }\n    }\n    startAgain() {\n        if (!this.awake) {\n            return;\n        }\n        if (this.grabDelay !== undefined) {\n            if (!this.timeoutHandle) {\n                this.timeoutHandle = window.setTimeout(() => {\n                    this.timeoutHandle = null;\n                    this.startGrabbing();\n                }, this.grabDelay);\n            }\n        }\n        else {\n            this.startGrabbing();\n        }\n    }\n    getSortedPriorityGroups(type) {\n        const priorities = Object.keys(this.requestPool[type])\n            .map(Number)\n            .filter((priority) => this.requestPool[type][priority].length)\n            .sort((a, b) => a - b);\n        return priorities;\n    }\n    getRequestPool() {\n        return this.requestPool;\n    }\n}\nexport { RequestPoolManager };\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","import cache from '../cache/cache';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport isEqual from './isEqual';\nimport { iterateOverPointsInShapeVoxelManager } from './pointInShapeCallback';\nconst DEFAULT_RLE_SIZE = 5 * 1024;\nexport default class VoxelManager {\n    get id() {\n        return this._id;\n    }\n    constructor(dimensions, options) {\n        this.modifiedSlices = new Set();\n        this.boundsIJK = [\n            [Infinity, -Infinity],\n            [Infinity, -Infinity],\n            [Infinity, -Infinity],\n        ];\n        this.scalarData = null;\n        this._sliceDataCache = null;\n        this.getAtIJK = (i, j, k) => {\n            const index = this.toIndex([i, j, k]);\n            return this._get(index);\n        };\n        this.setAtIJK = (i, j, k, v) => {\n            const index = this.toIndex([i, j, k]);\n            const changed = this._set(index, v);\n            if (changed !== false) {\n                this.modifiedSlices.add(k);\n                VoxelManager.addBounds(this.boundsIJK, [i, j, k]);\n            }\n            return changed;\n        };\n        this.getAtIJKPoint = ([i, j, k]) => this.getAtIJK(i, j, k);\n        this.setAtIJKPoint = ([i, j, k], v) => {\n            this.setAtIJK(i, j, k, v);\n        };\n        this.getAtIndex = (index) => this._get(index);\n        this.setAtIndex = (index, v) => {\n            const changed = this._set(index, v);\n            if (changed !== false) {\n                const pointIJK = this.toIJK(index);\n                this.modifiedSlices.add(pointIJK[2]);\n                VoxelManager.addBounds(this.boundsIJK, pointIJK);\n            }\n            return changed;\n        };\n        this.getMiddleSliceData = () => {\n            const middleSliceIndex = Math.floor(this.dimensions[2] / 2);\n            return this.getSliceData({\n                sliceIndex: middleSliceIndex,\n                slicePlane: 2,\n            });\n        };\n        this.forEach = (callback, options = {}) => {\n            const isInObjectBoundsIJK = options.boundsIJK || this.getBoundsIJK();\n            const isInObject = options.isInObject || this.isInObject || (() => true);\n            const returnPoints = options.returnPoints || false;\n            const useLPSTransform = options.imageData;\n            const iMin = Math.min(isInObjectBoundsIJK[0][0], isInObjectBoundsIJK[0][1]);\n            const iMax = Math.max(isInObjectBoundsIJK[0][0], isInObjectBoundsIJK[0][1]);\n            const jMin = Math.min(isInObjectBoundsIJK[1][0], isInObjectBoundsIJK[1][1]);\n            const jMax = Math.max(isInObjectBoundsIJK[1][0], isInObjectBoundsIJK[1][1]);\n            const kMin = Math.min(isInObjectBoundsIJK[2][0], isInObjectBoundsIJK[2][1]);\n            const kMax = Math.max(isInObjectBoundsIJK[2][0], isInObjectBoundsIJK[2][1]);\n            const pointsInShape = [];\n            if (useLPSTransform) {\n                const pointsInShape = iterateOverPointsInShapeVoxelManager({\n                    voxelManager: this,\n                    imageData: options.imageData,\n                    bounds: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                    pointInShapeFn: isInObject,\n                    callback,\n                    returnPoints,\n                });\n                return pointsInShape;\n            }\n            if (this.map) {\n                if (this.map instanceof RLEVoxelMap) {\n                    return this.rleForEach(callback, options);\n                }\n                for (const index of this.map.keys()) {\n                    const pointIJK = this.toIJK(index);\n                    if (!isInObject(null, pointIJK)) {\n                        continue;\n                    }\n                    const value = this._get(index);\n                    if (returnPoints) {\n                        pointsInShape.push({\n                            value,\n                            index,\n                            pointIJK,\n                            pointLPS: null,\n                        });\n                    }\n                    callback({ value, index, pointIJK, pointLPS: null });\n                }\n                return pointsInShape;\n            }\n            else {\n                for (let k = kMin; k <= kMax; k++) {\n                    const kIndex = k * this.frameSize;\n                    for (let j = jMin; j <= jMax; j++) {\n                        const jIndex = kIndex + j * this.width;\n                        for (let i = iMin, index = jIndex + i; i <= iMax; i++, index++) {\n                            const value = this.getAtIndex(index);\n                            const pointIJK = [i, j, k];\n                            if (!isInObject(null, pointIJK)) {\n                                continue;\n                            }\n                            if (returnPoints) {\n                                pointsInShape.push({\n                                    value,\n                                    index,\n                                    pointIJK,\n                                    pointLPS: null,\n                                });\n                            }\n                            callback({ value, index, pointIJK: [i, j, k], pointLPS: null });\n                        }\n                    }\n                }\n                return pointsInShape;\n            }\n        };\n        this.getSliceData = ({ sliceIndex, slicePlane, }) => {\n            const [width, height, depth] = this.dimensions;\n            const frameSize = width * height;\n            const startIndex = sliceIndex * frameSize;\n            let sliceSize;\n            const SliceDataConstructor = this.getConstructor();\n            function isValidConstructor(ctor) {\n                return typeof ctor === 'function';\n            }\n            if (!isValidConstructor(SliceDataConstructor)) {\n                return new Uint8Array(0);\n            }\n            let sliceData;\n            switch (slicePlane) {\n                case 0:\n                    sliceSize = height * depth;\n                    sliceData = new SliceDataConstructor(sliceSize);\n                    for (let i = 0; i < height; i++) {\n                        for (let j = 0; j < depth; j++) {\n                            const index = sliceIndex + i * width + j * frameSize;\n                            this.setSliceDataValue(sliceData, i * depth + j, this._get(index));\n                        }\n                    }\n                    break;\n                case 1:\n                    sliceSize = width * depth;\n                    sliceData = new SliceDataConstructor(sliceSize);\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < depth; j++) {\n                            const index = i + sliceIndex * width + j * frameSize;\n                            this.setSliceDataValue(sliceData, i + j * width, this._get(index));\n                        }\n                    }\n                    break;\n                case 2:\n                    sliceSize = width * height;\n                    sliceData = new SliceDataConstructor(sliceSize);\n                    for (let i = 0; i < sliceSize; i++) {\n                        this.setSliceDataValue(sliceData, i, this._get(startIndex + i));\n                    }\n                    break;\n                default:\n                    throw new Error('Oblique plane - todo - implement as ortho normal vector');\n            }\n            return sliceData;\n        };\n        this.dimensions = dimensions;\n        this.width = dimensions[0];\n        this.frameSize = this.width * dimensions[1];\n        this._get = options._get;\n        this._set = options._set;\n        this._id = options._id || '';\n        this._getConstructor = options._getConstructor;\n        this.numberOfComponents = this.numberOfComponents || 1;\n        this.scalarData = options.scalarData;\n        this._getScalarData = options._getScalarData;\n        this._updateScalarData = options._updateScalarData;\n    }\n    getMinMax() {\n        let min, max;\n        const callback = ({ value: v }) => {\n            const isArray = Array.isArray(v);\n            if (min === undefined) {\n                min = isArray ? [...v] : v;\n                max = isArray ? [...v] : v;\n            }\n            if (isArray) {\n                for (let i = 0; i < v.length; i++) {\n                    min[i] = Math.min(min[i], v[i]);\n                    max[i] = Math.max(max[i], v[i]);\n                }\n            }\n            else {\n                min = Math.min(min, v);\n                max = Math.max(max, v);\n            }\n        };\n        this.forEach(callback, { boundsIJK: this.getDefaultBounds() });\n        return { min, max };\n    }\n    toIJK(index) {\n        return [\n            index % this.width,\n            Math.floor((index % this.frameSize) / this.width),\n            Math.floor(index / this.frameSize),\n        ];\n    }\n    toIndex(ijk) {\n        return ijk[0] + ijk[1] * this.width + ijk[2] * this.frameSize;\n    }\n    getDefaultBounds() {\n        return this.dimensions.map((dimension) => [0, dimension - 1]);\n    }\n    getBoundsIJK() {\n        if (this.boundsIJK[0][0] < this.dimensions[0]) {\n            return this.boundsIJK;\n        }\n        return this.getDefaultBounds();\n    }\n    rleForEach(callback, options) {\n        const boundsIJK = options?.boundsIJK || this.getBoundsIJK();\n        const { isWithinObject } = options || {};\n        const map = this.map;\n        if (!map) {\n            console.warn('No map found, you need to use a map voxel manager to use rleForEach');\n            return;\n        }\n        map.defaultValue = undefined;\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                const row = map.getRun(j, k);\n                if (!row) {\n                    continue;\n                }\n                for (const rle of row) {\n                    const { start, end, value } = rle;\n                    const baseIndex = this.toIndex([0, j, k]);\n                    for (let i = start; i < end; i++) {\n                        const callbackArguments = {\n                            value,\n                            index: baseIndex + i,\n                            pointIJK: [i, j, k],\n                        };\n                        if (isWithinObject?.(callbackArguments) === false) {\n                            continue;\n                        }\n                        callback(callbackArguments);\n                    }\n                }\n            }\n        }\n    }\n    getScalarData(storeScalarData = false) {\n        if (this.scalarData) {\n            this._updateScalarData?.(this.scalarData);\n            return this.scalarData;\n        }\n        if (this._getScalarData) {\n            const scalarData = this._getScalarData();\n            if (storeScalarData) {\n                console.log('Not transient, should store value', scalarData);\n            }\n            return scalarData;\n        }\n        throw new Error('No scalar data available');\n    }\n    setScalarData(newScalarData) {\n        this.scalarData = newScalarData;\n    }\n    getScalarDataLength() {\n        if (this.scalarData) {\n            return this.scalarData.length;\n        }\n        if (this._getScalarDataLength) {\n            return this._getScalarDataLength();\n        }\n        throw new Error('No scalar data available');\n    }\n    get sizeInBytes() {\n        return this.getScalarDataLength() * this.bytePerVoxel;\n    }\n    get bytePerVoxel() {\n        if (this.scalarData) {\n            return this.scalarData.BYTES_PER_ELEMENT;\n        }\n        const value = this._get(0);\n        return value.BYTES_PER_ELEMENT;\n    }\n    clearBounds() {\n        this.boundsIJK.map((bound) => {\n            bound[0] = Infinity;\n            bound[1] = -Infinity;\n        });\n    }\n    clear() {\n        this.map?.clear();\n        this.clearBounds();\n        this.modifiedSlices.clear();\n        this.points?.clear();\n    }\n    getConstructor() {\n        if (this.scalarData) {\n            return this.scalarData.constructor;\n        }\n        if (this._getConstructor) {\n            return this._getConstructor();\n        }\n        console.warn('No scalar data available or can be used to get the constructor');\n        return Float32Array;\n    }\n    getArrayOfModifiedSlices() {\n        return Array.from(this.modifiedSlices);\n    }\n    resetModifiedSlices() {\n        this.modifiedSlices.clear();\n    }\n    setBounds(bounds) {\n        this.boundsIJK = bounds;\n    }\n    static addBounds(bounds, point) {\n        if (!bounds) {\n            bounds = [\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n            ];\n        }\n        bounds[0][0] = Math.min(point[0], bounds[0][0]);\n        bounds[0][1] = Math.max(point[0], bounds[0][1]);\n        bounds[1][0] = Math.min(point[1], bounds[1][0]);\n        bounds[1][1] = Math.max(point[1], bounds[1][1]);\n        bounds[2][0] = Math.min(point[2], bounds[2][0]);\n        bounds[2][1] = Math.max(point[2], bounds[2][1]);\n    }\n    addPoint(point) {\n        const index = Array.isArray(point)\n            ? point[0] + this.width * point[1] + this.frameSize * point[2]\n            : point;\n        if (!this.points) {\n            this.points = new Set();\n        }\n        this.points.add(index);\n    }\n    getPoints() {\n        return this.points\n            ? [...this.points].map((index) => this.toIJK(index))\n            : [];\n    }\n    setSliceDataValue(sliceData, index, value) {\n        if (Array.isArray(value)) {\n            for (let i = 0; i < value.length; i++) {\n                sliceData[index * value.length + i] = this.toNumber(value[i]);\n            }\n        }\n        else {\n            sliceData[index] = this.toNumber(value);\n        }\n    }\n    toNumber(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (Array.isArray(value)) {\n            return value[0] || 0;\n        }\n        return 0;\n    }\n    static _createRGBScalarVolumeVoxelManager({ dimensions, scalarData, numberOfComponents = 3, id, }) {\n        const voxels = new VoxelManager(dimensions, {\n            _get: (index) => {\n                index *= numberOfComponents;\n                return [\n                    scalarData[index++],\n                    scalarData[index++],\n                    scalarData[index++],\n                ];\n            },\n            _id: id || '_createRGBScalarVolumeVoxelManager',\n            _set: (index, v) => {\n                index *= 3;\n                const isChanged = !isEqual(scalarData[index], v);\n                scalarData[index++] = v[0];\n                scalarData[index++] = v[1];\n                scalarData[index++] = v[2];\n                return isChanged;\n            },\n            numberOfComponents,\n            scalarData,\n        });\n        voxels.clear = () => {\n            scalarData.fill(0);\n        };\n        return voxels;\n    }\n    static createImageVolumeVoxelManager({ dimensions, imageIds, numberOfComponents = 1, id, }) {\n        const pixelsPerSlice = dimensions[0] * dimensions[1];\n        function getPixelInfo(index) {\n            const sliceIndex = Math.floor(index / pixelsPerSlice);\n            if (sliceIndex < 0 || sliceIndex >= dimensions[2]) {\n                return {};\n            }\n            const imageId = imageIds[sliceIndex];\n            if (!imageId) {\n                console.warn(`ImageId not found for sliceIndex: ${sliceIndex}`);\n                return { pixelData: null, pixelIndex: null };\n            }\n            const image = cache.getImage(imageId);\n            if (!image) {\n                console.warn(`Image not found for imageId: ${imageId}`);\n                return { pixelData: null, pixelIndex: null };\n            }\n            const voxelManager = image.voxelManager;\n            const pixelIndex = index % pixelsPerSlice;\n            return { voxelManager, pixelIndex };\n        }\n        function getVoxelValue(index) {\n            const { voxelManager: imageVoxelManager, pixelIndex } = getPixelInfo(index);\n            if (!imageVoxelManager || pixelIndex === null) {\n                return null;\n            }\n            return imageVoxelManager.getAtIndex(pixelIndex);\n        }\n        function setVoxelValue(index, v) {\n            const { voxelManager: imageVoxelManager, pixelIndex } = getPixelInfo(index);\n            if (!imageVoxelManager || pixelIndex === null) {\n                return false;\n            }\n            const currentValue = imageVoxelManager.getAtIndex(pixelIndex);\n            const isChanged = !isEqual(v, currentValue);\n            if (!isChanged) {\n                return isChanged;\n            }\n            imageVoxelManager.setAtIndex(pixelIndex, v);\n            return true;\n        }\n        const _getConstructor = () => {\n            const { voxelManager: imageVoxelManager, pixelIndex } = getPixelInfo(0);\n            if (!imageVoxelManager || pixelIndex === null) {\n                return null;\n            }\n            return imageVoxelManager.getConstructor();\n        };\n        const voxelManager = new VoxelManager(dimensions, {\n            _get: getVoxelValue,\n            _set: setVoxelValue,\n            numberOfComponents,\n            _getConstructor,\n            _id: id || 'createImageVolumeVoxelManager',\n        });\n        voxelManager.getMiddleSliceData = () => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            return voxelManager.getSliceData({\n                sliceIndex: middleSliceIndex,\n                slicePlane: 2,\n            });\n        };\n        voxelManager.clear = () => {\n            for (const imageId of imageIds) {\n                const image = cache.getImage(imageId);\n                image.voxelManager.clear();\n            }\n        };\n        voxelManager.getRange = () => {\n            let minValue = Infinity;\n            let maxValue = -Infinity;\n            for (const imageId of imageIds) {\n                const image = cache.getImage(imageId);\n                if (!image) {\n                    continue;\n                }\n                if (image.minPixelValue < minValue) {\n                    minValue = image.minPixelValue;\n                }\n                if (image.maxPixelValue > maxValue) {\n                    maxValue = image.maxPixelValue;\n                }\n            }\n            if (minValue === Infinity && maxValue === -Infinity) {\n                return [0, 0];\n            }\n            return [minValue, maxValue];\n        };\n        voxelManager._getScalarDataLength = () => {\n            const { voxelManager: imageVoxelManager, pixelIndex } = getPixelInfo(0);\n            if (!imageVoxelManager || pixelIndex === null) {\n                return 0;\n            }\n            return imageVoxelManager.getScalarDataLength() * dimensions[2];\n        };\n        voxelManager.getCompleteScalarDataArray = () => {\n            const ScalarDataConstructor = voxelManager._getConstructor();\n            if (!ScalarDataConstructor) {\n                return new Uint8Array(0);\n            }\n            const dataLength = voxelManager.getScalarDataLength();\n            const scalarData = new ScalarDataConstructor(dataLength);\n            const sliceSize = dimensions[0] * dimensions[1] * numberOfComponents;\n            for (let sliceIndex = 0; sliceIndex < dimensions[2]; sliceIndex++) {\n                const { voxelManager: imageVoxelManager, pixelIndex } = getPixelInfo((sliceIndex * sliceSize) / numberOfComponents);\n                if (imageVoxelManager && pixelIndex !== null) {\n                    const sliceStart = sliceIndex * sliceSize;\n                    const pixelData = imageVoxelManager.getScalarData();\n                    if (numberOfComponents === 1) {\n                        scalarData.set(pixelData, sliceStart);\n                    }\n                    else {\n                        for (let i = 0; i < pixelData.length; i += numberOfComponents) {\n                            for (let j = 0; j < numberOfComponents; j++) {\n                                scalarData[sliceStart + i + j] = pixelData[i + j];\n                            }\n                        }\n                    }\n                }\n            }\n            return scalarData;\n        };\n        voxelManager.setCompleteScalarDataArray = (scalarData) => {\n            const sliceSize = dimensions[0] * dimensions[1] * numberOfComponents;\n            const SliceDataConstructor = voxelManager._getConstructor();\n            let minValue = Infinity;\n            let maxValue = -Infinity;\n            for (let sliceIndex = 0; sliceIndex < dimensions[2]; sliceIndex++) {\n                const { voxelManager: imageVoxelManager } = getPixelInfo((sliceIndex * sliceSize) / numberOfComponents);\n                if (imageVoxelManager && SliceDataConstructor) {\n                    const sliceStart = sliceIndex * sliceSize;\n                    const sliceEnd = sliceStart + sliceSize;\n                    const sliceData = new SliceDataConstructor(sliceSize);\n                    sliceData.set(scalarData.subarray(sliceStart, sliceEnd));\n                    if (imageVoxelManager.scalarData) {\n                        imageVoxelManager.scalarData.set(sliceData);\n                        imageVoxelManager.modifiedSlices.add(sliceIndex);\n                    }\n                    else {\n                        for (let i = 0; i < sliceSize; i++) {\n                            imageVoxelManager.setAtIndex(i, sliceData[i]);\n                        }\n                    }\n                    for (let i = 0; i < sliceData.length; i++) {\n                        const value = sliceData[i];\n                        minValue = Math.min(minValue, value);\n                        maxValue = Math.max(maxValue, value);\n                    }\n                    const imageId = imageIds[sliceIndex];\n                    const image = cache.getImage(imageId);\n                    if (image) {\n                        image.minPixelValue = minValue;\n                        image.maxPixelValue = maxValue;\n                    }\n                }\n            }\n            for (let k = 0; k < dimensions[2]; k++) {\n                voxelManager.modifiedSlices.add(k);\n            }\n            voxelManager.boundsIJK = [\n                [0, dimensions[0] - 1],\n                [0, dimensions[1] - 1],\n                [0, dimensions[2] - 1],\n            ];\n        };\n        return voxelManager;\n    }\n    static createScalarVolumeVoxelManager({ dimensions, scalarData, numberOfComponents, id, }) {\n        if (dimensions.length !== 3) {\n            throw new Error('Dimensions must be provided as [number, number, number] for [width, height, depth]');\n        }\n        if (!numberOfComponents) {\n            numberOfComponents =\n                scalarData.length / dimensions[0] / dimensions[1] / dimensions[2];\n            if (numberOfComponents > 4 ||\n                numberOfComponents < 1 ||\n                numberOfComponents === 2) {\n                throw new Error(`Number of components ${numberOfComponents} must be 1, 3 or 4`);\n            }\n        }\n        if (numberOfComponents > 1) {\n            return VoxelManager._createRGBScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n                numberOfComponents,\n                id,\n            });\n        }\n        return VoxelManager._createNumberVolumeVoxelManager({\n            dimensions,\n            scalarData,\n            id,\n        });\n    }\n    static createScalarDynamicVolumeVoxelManager({ imageIdGroups, dimensions, dimensionGroupNumber = 1, timePoint = 0, numberOfComponents = 1, id, }) {\n        let activeDimensionGroup = 0;\n        if (dimensionGroupNumber !== undefined) {\n            activeDimensionGroup = dimensionGroupNumber - 1;\n        }\n        else if (timePoint !== undefined) {\n            console.warn('Warning: timePoint parameter is deprecated. Please use dimensionGroupNumber instead. timePoint is zero-based while dimensionGroupNumber starts at 1.');\n            activeDimensionGroup = timePoint;\n        }\n        if (!numberOfComponents) {\n            const firstImage = cache.getImage(imageIdGroups[0][0]);\n            if (!firstImage) {\n                throw new Error('Unable to determine number of components: No image found');\n            }\n            numberOfComponents =\n                firstImage.getPixelData().length / (dimensions[0] * dimensions[1]);\n            if (numberOfComponents > 4 ||\n                numberOfComponents < 1 ||\n                numberOfComponents === 2) {\n                throw new Error(`Number of components ${numberOfComponents} must be 1, 3 or 4`);\n            }\n        }\n        const voxelGroups = imageIdGroups.map((imageIds) => {\n            return VoxelManager.createImageVolumeVoxelManager({\n                dimensions,\n                imageIds,\n                numberOfComponents,\n                id,\n            });\n        });\n        const voxelManager = new VoxelManager(dimensions, {\n            _get: (index) => voxelGroups[activeDimensionGroup]._get(index),\n            _set: (index, v) => voxelGroups[activeDimensionGroup]._set(index, v),\n            numberOfComponents,\n            _id: id || 'createScalarDynamicVolumeVoxelManager',\n        });\n        voxelManager.getScalarDataLength = () => {\n            return voxelGroups[activeDimensionGroup].getScalarDataLength();\n        };\n        voxelManager.getConstructor = () => {\n            return voxelGroups[activeDimensionGroup].getConstructor();\n        };\n        voxelManager.getRange = () => {\n            return voxelGroups[activeDimensionGroup].getRange();\n        };\n        voxelManager.getMiddleSliceData = () => {\n            return voxelGroups[activeDimensionGroup].getMiddleSliceData();\n        };\n        voxelManager.setTimePoint = (newTimePoint) => {\n            console.warn('Warning: setTimePoint is deprecated. Please use setDimensionGroupNumber instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1.');\n            voxelManager.setDimensionGroupNumber(newTimePoint + 1);\n        };\n        voxelManager.setDimensionGroupNumber = (newDimensionGroupNumber) => {\n            activeDimensionGroup = newDimensionGroupNumber - 1;\n            voxelManager._get = (index) => voxelGroups[activeDimensionGroup]._get(index);\n            voxelManager._set = (index, v) => voxelGroups[activeDimensionGroup]._set(index, v);\n        };\n        voxelManager.getAtIndexAndTimePoint = (index, tp) => {\n            console.warn('Warning: getAtIndexAndTimePoint is deprecated. Please use getAtIndexAndDimensionGroup instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1.');\n            return voxelManager.getAtIndexAndDimensionGroup(index, tp + 1);\n        };\n        voxelManager.getAtIndexAndDimensionGroup = (index, dimensionGroupNumber) => {\n            return voxelGroups[dimensionGroupNumber - 1]._get(index);\n        };\n        voxelManager.getTimePointScalarData = (tp) => {\n            console.warn('Warning: getTimePointScalarData is deprecated. Please use getDimensionGroupScalarData instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1.');\n            return voxelManager.getDimensionGroupScalarData(tp + 1);\n        };\n        voxelManager.getDimensionGroupScalarData = (dimensionGroupNumber) => {\n            return voxelGroups[dimensionGroupNumber - 1].getCompleteScalarDataArray();\n        };\n        voxelManager.getCurrentTimePointScalarData = () => {\n            console.warn('Warning: getCurrentTimePointScalarData is deprecated. Please use getCurrentDimensionGroupScalarData instead.');\n            return voxelManager.getCurrentDimensionGroupScalarData();\n        };\n        voxelManager.getCurrentDimensionGroupScalarData = () => {\n            return voxelGroups[activeDimensionGroup].getCompleteScalarDataArray();\n        };\n        voxelManager.getCurrentTimePoint = () => {\n            console.warn('Warning: getCurrentTimePoint is deprecated. Please use getCurrentDimensionGroupNumber instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1.');\n            return activeDimensionGroup;\n        };\n        voxelManager.getCurrentDimensionGroupNumber = () => {\n            return activeDimensionGroup + 1;\n        };\n        return voxelManager;\n    }\n    static createImageVoxelManager({ width, height, scalarData, numberOfComponents = 1, id, }) {\n        const dimensions = [width, height, 1];\n        if (!numberOfComponents) {\n            numberOfComponents = scalarData.length / width / height;\n            if (numberOfComponents > 4 ||\n                numberOfComponents < 1 ||\n                numberOfComponents === 2) {\n                throw new Error(`Number of components ${numberOfComponents} must be 1, 3 or 4`);\n            }\n        }\n        if (numberOfComponents > 1) {\n            return VoxelManager._createRGBScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n                numberOfComponents,\n                id,\n            });\n        }\n        return VoxelManager._createNumberVolumeVoxelManager({\n            dimensions,\n            scalarData,\n            id,\n        });\n    }\n    static _createNumberVolumeVoxelManager({ dimensions, scalarData, id, }) {\n        const voxels = new VoxelManager(dimensions, {\n            _get: (index) => scalarData[index],\n            _set: (index, v) => {\n                const isChanged = scalarData[index] !== v;\n                scalarData[index] = v;\n                return isChanged;\n            },\n            _getConstructor: () => scalarData.constructor,\n            _id: id || '_createNumberVolumeVoxelManager',\n        });\n        voxels.scalarData = scalarData;\n        voxels.clear = () => {\n            voxels.scalarData.fill(0);\n        };\n        voxels.getMiddleSliceData = () => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            return voxels.getSliceData({\n                sliceIndex: middleSliceIndex,\n                slicePlane: 2,\n            });\n        };\n        return voxels;\n    }\n    static createMapVoxelManager({ dimension, id, }) {\n        const map = new Map();\n        const voxelManager = new VoxelManager(dimension, {\n            _get: map.get.bind(map),\n            _set: (index, v) => map.set(index, v) && true,\n            _id: id || 'createMapVoxelManager',\n        });\n        voxelManager.map = map;\n        return voxelManager;\n    }\n    static createHistoryVoxelManager(sourceVoxelManager, id) {\n        const map = new Map();\n        const { dimensions } = sourceVoxelManager;\n        const voxelManager = new VoxelManager(dimensions, {\n            _get: (index) => map.get(index),\n            _set: function (index, v) {\n                if (!map.has(index)) {\n                    const oldV = this.sourceVoxelManager.getAtIndex(index);\n                    if (oldV === v) {\n                        return false;\n                    }\n                    map.set(index, oldV);\n                }\n                else if (v === map.get(index)) {\n                    map.delete(index);\n                }\n                this.sourceVoxelManager.setAtIndex(index, v);\n            },\n            _id: id || 'createHistoryVoxelManager',\n        });\n        voxelManager.map = map;\n        voxelManager.scalarData = sourceVoxelManager.scalarData;\n        voxelManager.sourceVoxelManager = sourceVoxelManager;\n        return voxelManager;\n    }\n    static createRLEHistoryVoxelManager(sourceVoxelManager, id) {\n        const { dimensions } = sourceVoxelManager;\n        const map = new RLEVoxelMap(dimensions[0], dimensions[1], dimensions[2]);\n        const voxelManager = new VoxelManager(dimensions, {\n            _get: (index) => map.get(index),\n            _set: function (index, v) {\n                const originalV = map.get(index);\n                if (originalV === undefined) {\n                    const oldV = this.sourceVoxelManager.getAtIndex(index);\n                    if (oldV === v || (oldV === undefined && v === 0) || v === null) {\n                        return false;\n                    }\n                    map.set(index, oldV ?? 0);\n                }\n                else if (v === originalV || v === null) {\n                    map.delete(index);\n                    v = originalV;\n                }\n                this.sourceVoxelManager.setAtIndex(index, v);\n            },\n            _getScalarData: RLEVoxelMap.getScalarData,\n            _updateScalarData: (scalarData) => {\n                map.updateScalarData(scalarData);\n                return scalarData;\n            },\n            _id: id || 'createRLEHistoryVoxelManager',\n        });\n        voxelManager.map = map;\n        voxelManager.sourceVoxelManager = sourceVoxelManager;\n        return voxelManager;\n    }\n    static createLazyVoxelManager({ dimensions, planeFactory, id, }) {\n        const map = new Map();\n        const [width, height] = dimensions;\n        const planeSize = width * height;\n        const voxelManager = new VoxelManager(dimensions, {\n            _get: (index) => map.get(Math.floor(index / planeSize))[index % planeSize],\n            _set: (index, v) => {\n                const k = Math.floor(index / planeSize);\n                let layer = map.get(k);\n                if (!layer) {\n                    layer = planeFactory(width, height);\n                    map.set(k, layer);\n                }\n                layer[index % planeSize] = v;\n                return true;\n            },\n            _id: id || 'createLazyVoxelManager',\n        });\n        voxelManager.map = map;\n        return voxelManager;\n    }\n    static createRLEVolumeVoxelManager({ dimensions, id, }) {\n        const [width, height, depth] = dimensions;\n        const map = new RLEVoxelMap(width, height, depth);\n        const voxelManager = new VoxelManager(dimensions, {\n            _get: (index) => map.get(index),\n            _set: (index, v) => {\n                map.set(index, v);\n                return true;\n            },\n            _getScalarData: RLEVoxelMap.getScalarData,\n            _updateScalarData: (scalarData) => {\n                map.updateScalarData(scalarData);\n                return scalarData;\n            },\n            _id: id || 'createRLEVolumeVoxelManager',\n        });\n        voxelManager.map = map;\n        voxelManager.getPixelData = map.getPixelData.bind(map);\n        return voxelManager;\n    }\n    static createRLEImageVoxelManager({ dimensions, id, }) {\n        const [width, height] = dimensions;\n        return VoxelManager.createRLEVolumeVoxelManager({\n            dimensions: [width, height, 1],\n            id,\n        });\n    }\n    static addInstanceToImage(image) {\n        const { width, height } = image;\n        const scalarData = image.voxelManager.getScalarData();\n        if (scalarData.length >= width * height) {\n            image.voxelManager = VoxelManager.createScalarVolumeVoxelManager({\n                dimensions: [width, height, 1],\n                scalarData,\n            });\n            return;\n        }\n        image.voxelManager = VoxelManager.createRLEVolumeVoxelManager({\n            dimensions: [width, height, 1],\n        });\n        image.getPixelData = image.voxelManager.getPixelData;\n        image.sizeInBytes = DEFAULT_RLE_SIZE;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import { vec3 } from 'gl-matrix';\nimport { reflectVector } from './reflectVector';\nexport function adjustInitialViewUp(initialViewUp, flipHorizontal, flipVertical, viewPlaneNormal) {\n    let adjustedInitialViewUp = vec3.clone(initialViewUp);\n    if (flipVertical) {\n        vec3.negate(adjustedInitialViewUp, adjustedInitialViewUp);\n    }\n    if (flipHorizontal) {\n        const screenVerticalAxis = vec3.cross(vec3.create(), viewPlaneNormal, adjustedInitialViewUp);\n        vec3.normalize(screenVerticalAxis, screenVerticalAxis);\n        adjustedInitialViewUp = reflectVector(adjustedInitialViewUp, screenVerticalAxis);\n    }\n    return adjustedInitialViewUp;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    colormap.name = colormap.name || colormap.Name;\n    _colormaps.set(colormap.name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    return {\n        name: matchedColormap.Name,\n        opacity,\n    };\n}\nexport function setColorMapTransferFunctionForVolumeActor(volumeInfo) {\n    const { volumeActor, preset, opacity = 0.9, threshold = null, colorRange = [0, 5], } = volumeInfo;\n    const mapper = volumeActor.getMapper();\n    mapper.setSampleDistance(1.0);\n    const cfun = vtkColorTransferFunction.newInstance();\n    const presetToUse = preset || vtkColorMaps.getPresetByName('hsv');\n    cfun.applyColorMap(presetToUse);\n    cfun.setMappingRange(colorRange[0], colorRange[1]);\n    volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    updateOpacityWithThreshold(volumeActor, opacity, threshold);\n}\nexport function updateOpacity(volumeActor, newOpacity) {\n    const currentThreshold = getThresholdValue(volumeActor);\n    updateOpacityWithThreshold(volumeActor, newOpacity, currentThreshold);\n}\nexport function updateThreshold(volumeActor, newThreshold) {\n    const currentOpacity = getMaxOpacity(volumeActor);\n    updateOpacityWithThreshold(volumeActor, currentOpacity, newThreshold);\n}\nfunction updateOpacityWithThreshold(volumeActor, opacity, threshold) {\n    const meta = volumeActor.getMapper().getInputData().get('voxelManager');\n    if (!meta?.voxelManager) {\n        throw new Error('No voxel manager was found for the volume actor, or you cannot yet update opacity with a threshold using stacked images');\n    }\n    const range = meta.voxelManager.getRange();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    if (threshold !== null) {\n        const delta = Math.abs(range[1] - range[0]) * 0.001;\n        const thresholdValue = Math.max(range[0], Math.min(range[1], threshold));\n        ofun.addPoint(range[0], 0);\n        ofun.addPoint(thresholdValue - delta, 0);\n        ofun.addPoint(thresholdValue, opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    else {\n        ofun.addPoint(range[0], opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    volumeActor.getProperty().setScalarOpacity(0, ofun);\n}\nfunction getThresholdValue(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return null;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length <= 4) {\n        return null;\n    }\n    for (let i = 0; i < dataArray.length - 2; i += 2) {\n        const x1 = dataArray[i];\n        const y1 = dataArray[i + 1];\n        const x2 = dataArray[i + 2];\n        const y2 = dataArray[i + 3];\n        if (y1 === 0 && y2 > 0) {\n            return x2;\n        }\n    }\n    return null;\n}\nfunction getMaxOpacity(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return 1.0;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length === 0) {\n        return 1.0;\n    }\n    let maxOpacity = 0;\n    for (let i = 1; i < dataArray.length; i += 2) {\n        if (dataArray[i] > maxOpacity) {\n            maxOpacity = dataArray[i];\n        }\n    }\n    return maxOpacity;\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, getThresholdValue, getMaxOpacity, };\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import * as vec3 from 'gl-matrix/vec3';\nimport PointsManager from './PointsManager';\nexport function createPositionCallback(imageData) {\n    const currentPos = vec3.create();\n    const dimensions = imageData.getDimensions();\n    const positionI = PointsManager.create3(dimensions[0]);\n    const positionJ = PointsManager.create3(dimensions[1]);\n    const positionK = PointsManager.create3(dimensions[2]);\n    const direction = imageData.getDirection();\n    const rowCosines = direction.slice(0, 3);\n    const columnCosines = direction.slice(3, 6);\n    const scanAxisNormal = direction.slice(6, 9);\n    const spacing = imageData.getSpacing();\n    const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;\n    const worldPosStart = imageData.indexToWorld([0, 0, 0]);\n    const rowStep = vec3.fromValues(rowCosines[0] * rowSpacing, rowCosines[1] * rowSpacing, rowCosines[2] * rowSpacing);\n    const columnStep = vec3.fromValues(columnCosines[0] * columnSpacing, columnCosines[1] * columnSpacing, columnCosines[2] * columnSpacing);\n    const scanAxisStep = vec3.fromValues(scanAxisNormal[0] * scanAxisSpacing, scanAxisNormal[1] * scanAxisSpacing, scanAxisNormal[2] * scanAxisSpacing);\n    const scaled = vec3.create();\n    for (let i = 0; i < dimensions[0]; i++) {\n        positionI.push(vec3.add(scaled, worldPosStart, vec3.scale(scaled, rowStep, i)));\n    }\n    for (let j = 0; j < dimensions[1]; j++) {\n        positionJ.push(vec3.scale(scaled, columnStep, j));\n    }\n    for (let k = 0; k < dimensions[2]; k++) {\n        positionK.push(vec3.scale(scaled, scanAxisStep, k));\n    }\n    const dataI = positionI.getTypedArray();\n    const dataJ = positionJ.getTypedArray();\n    const dataK = positionK.getTypedArray();\n    return (ijk, destPoint = currentPos) => {\n        const [i, j, k] = ijk;\n        const offsetI = i * 3;\n        const offsetJ = j * 3;\n        const offsetK = k * 3;\n        destPoint[0] = dataI[offsetI] + dataJ[offsetJ] + dataK[offsetK];\n        destPoint[1] = dataI[offsetI + 1] + dataJ[offsetJ + 1] + dataK[offsetK + 1];\n        destPoint[2] = dataI[offsetI + 2] + dataJ[offsetJ + 2] + dataK[offsetK + 2];\n        return destPoint;\n    };\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","function deepFreeze(object) {\n    const propNames = Object.getOwnPropertyNames(object);\n    for (const name of propNames) {\n        const value = object[name];\n        if (value && typeof value === 'object') {\n            deepFreeze(value);\n        }\n    }\n    return Object.freeze(object);\n}\nexport default deepFreeze;\n","const isMergeableObject = (val) => {\n    const nonNullObject = val && typeof val === 'object';\n    return (nonNullObject &&\n        Object.prototype.toString.call(val) !== '[object RegExp]' &&\n        Object.prototype.toString.call(val) !== '[object Date]');\n};\nconst emptyTarget = (val) => {\n    const isEmpty = Array.isArray(val) ? [] : {};\n    return isEmpty;\n};\nconst cloneIfNecessary = (value, optionsArgument) => {\n    const clone = optionsArgument && optionsArgument.clone === true;\n    return clone && isMergeableObject(value)\n        ? deepMerge(emptyTarget(value), value, optionsArgument)\n        : value;\n};\nconst defaultArrayMerge = (target, source, optionsArgument) => {\n    const destination = target.slice();\n    source.forEach(function (e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n        }\n        else if (isMergeableObject(e)) {\n            destination[i] = deepMerge(target[i], e, optionsArgument);\n        }\n        else if (target.indexOf(e) === -1) {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n        }\n    });\n    return destination;\n};\nconst mergeObject = (target, source, optionsArgument) => {\n    const destination = {};\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument);\n        });\n    }\n    Object.keys(source).forEach(function (key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument);\n        }\n        else {\n            destination[key] = deepMerge(target[key], source[key], optionsArgument);\n        }\n    });\n    return destination;\n};\nconst deepMerge = (target = {}, source = {}, optionsArgument = undefined) => {\n    const array = Array.isArray(source);\n    const options = optionsArgument || { arrayMerge: defaultArrayMerge };\n    const arrayMerge = options.arrayMerge || defaultArrayMerge;\n    if (array) {\n        return Array.isArray(target)\n            ? arrayMerge(target, source, optionsArgument)\n            : cloneIfNecessary(source, optionsArgument);\n    }\n    return mergeObject(target, source, optionsArgument);\n};\nexport default deepMerge;\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","export { TargetEventListeners } from './TargetEventListeners';\nexport { MultiTargetEventListenerManager } from './MultiTargetEventListenerManager';\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport getScalingParameters from './getScalingParameters';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { canRenderFloatTextures } from '../init';\nimport cache from '../cache/cache';\nconst constructorToTypedArray = {\n    Uint8Array: 'Uint8Array',\n    Int16Array: 'Int16Array',\n    Uint16Array: 'Uint16Array',\n    Float32Array: 'Float32Array',\n};\nfunction generateVolumePropsFromImageIds(imageIds, volumeId) {\n    const volumeMetadata = makeVolumeMetadata(imageIds);\n    const { ImageOrientationPatient, PixelSpacing, Columns, Rows } = volumeMetadata;\n    const rowCosineVec = vec3.fromValues(ImageOrientationPatient[0], ImageOrientationPatient[1], ImageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(ImageOrientationPatient[3], ImageOrientationPatient[4], ImageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const { zSpacing, origin, sortedImageIds } = sortImageIdsAndGetSpacing(imageIds, scanAxisNormal);\n    const numFrames = imageIds.length;\n    const spacing = [PixelSpacing[1], PixelSpacing[0], zSpacing];\n    const dimensions = [Columns, Rows, numFrames].map((it) => Math.floor(it));\n    const direction = [\n        ...rowCosineVec,\n        ...colCosineVec,\n        ...scanAxisNormal,\n    ];\n    return {\n        dimensions,\n        spacing,\n        origin,\n        dataType: _determineDataType(sortedImageIds, volumeMetadata),\n        direction,\n        metadata: volumeMetadata,\n        imageIds: sortedImageIds,\n        volumeId,\n        voxelManager: null,\n        numberOfComponents: volumeMetadata.PhotometricInterpretation === 'RGB' ? 3 : 1,\n    };\n}\nfunction _determineDataType(imageIds, volumeMetadata) {\n    const { BitsAllocated, PixelRepresentation } = volumeMetadata;\n    const signed = PixelRepresentation === 1;\n    const cachedDataType = _getDataTypeFromCache(imageIds);\n    if (cachedDataType) {\n        return cachedDataType;\n    }\n    const [firstIndex, middleIndex, lastIndex] = [\n        0,\n        Math.floor(imageIds.length / 2),\n        imageIds.length - 1,\n    ];\n    const scalingParameters = [firstIndex, middleIndex, lastIndex].map((index) => getScalingParameters(imageIds[index]));\n    const hasNegativeRescale = scalingParameters.some((params) => params.rescaleIntercept < 0 || params.rescaleSlope < 0);\n    const floatAfterScale = scalingParameters.some((params) => hasFloatScalingParameters(params));\n    const canRenderFloat = canRenderFloatTextures();\n    switch (BitsAllocated) {\n        case 8:\n            return 'Uint8Array';\n        case 16:\n            if (canRenderFloat && floatAfterScale) {\n                return 'Float32Array';\n            }\n            if (signed || hasNegativeRescale) {\n                return 'Int16Array';\n            }\n            if (!signed && !hasNegativeRescale) {\n                return 'Uint16Array';\n            }\n            return 'Float32Array';\n        case 24:\n            return 'Uint8Array';\n        case 32:\n            return 'Float32Array';\n        default:\n            throw new Error(`Bits allocated of ${BitsAllocated} is not defined to generate scalarData for the volume.`);\n    }\n}\nfunction _getDataTypeFromCache(imageIds) {\n    const indices = [0, Math.floor(imageIds.length / 2), imageIds.length - 1];\n    const images = indices.map((i) => cache.getImage(imageIds[i]));\n    if (!images.every(Boolean)) {\n        return null;\n    }\n    const constructorName = images[0].getPixelData().constructor.name;\n    if (images.every((img) => img.getPixelData().constructor.name === constructorName) &&\n        constructorName in constructorToTypedArray) {\n        return constructorToTypedArray[constructorName];\n    }\n    return null;\n}\nexport { generateVolumePropsFromImageIds };\n","import { addProvider } from '../metaData';\nlet state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        metadataProvider.addRaw(imageId, {\n            ...payload,\n            metadata: structuredClone(payload.metadata),\n        });\n    },\n    addRaw: (imageId, payload) => {\n        const type = payload.type;\n        if (!state[imageId]) {\n            state[imageId] = {};\n        }\n        state[imageId][type] = payload.metadata;\n    },\n    get: (type, imageId) => {\n        return state[imageId]?.[type];\n    },\n    clear: () => {\n        state = {};\n    },\n};\naddProvider(metadataProvider.get);\nexport default metadataProvider;\n","function getConstructorFromType(bufferType, isVolumeBuffer) {\n    switch (bufferType) {\n        case 'Float32Array':\n            return Float32Array;\n        case 'Uint8Array':\n            return Uint8Array;\n        case 'Uint32Array':\n            return Uint32Array;\n        case 'Uint16Array':\n        case 'Int16Array':\n            if (!isVolumeBuffer) {\n                return bufferType === 'Uint16Array' ? Uint16Array : Int16Array;\n            }\n            else {\n                console.debug(`${bufferType} is not supported for volume rendering, switching back to Float32Array`);\n                return Float32Array;\n            }\n        default:\n            if (bufferType) {\n                throw new Error('TargetBuffer should be Float32Array, Uint8Array, Uint16Array, Int16Array, or Uint32Array');\n            }\n            else {\n                return Float32Array;\n            }\n    }\n}\nfunction getBufferConfiguration(targetBufferType, length, options = {}) {\n    const { isVolumeBuffer = false } = options;\n    const TypedArrayConstructor = getConstructorFromType(targetBufferType, isVolumeBuffer);\n    const bytesPerElement = TypedArrayConstructor.BYTES_PER_ELEMENT;\n    const numBytes = length * bytesPerElement;\n    return { numBytes, TypedArrayConstructor };\n}\nexport { getBufferConfiguration, getConstructorFromType };\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { coreLog } from './logger';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nconst log = coreLog.getLogger('utilities', 'getClosestImageId');\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal, options) {\n    const { direction, spacing, imageIds } = imageVolume;\n    const { ignoreSpacing = false } = options || {};\n    if (!imageIds?.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProduct = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProduct) < 1 - EPSILON) {\n        return;\n    }\n    let halfSpacingInNormalDirection;\n    if (!ignoreSpacing) {\n        const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n        halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    }\n    let closestImageId;\n    let minDistance = Infinity;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n        if (!imagePlaneModule?.imagePositionPatient) {\n            log.warn(`Missing imagePositionPatient for imageId: ${imageId}`);\n            continue;\n        }\n        const { imagePositionPatient } = imagePlaneModule;\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const distance = Math.abs(vec3.dot(dir, viewPlaneNormal));\n        if (ignoreSpacing) {\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n        else {\n            if (distance < halfSpacingInNormalDirection && distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n    }\n    if (closestImageId === undefined) {\n        log.warn('No imageId found within the specified criteria (half spacing or absolute closest).');\n    }\n    return closestImageId;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    if (!imagePixelModule.photometricInterpretation &&\n        image.sizeInBytes === 3 * image.width * image.height) {\n        image.numberOfComponents = 3;\n    }\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n        scanAxisNormal: scanAxisNormal,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation?.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","import { isEqual } from './isEqual';\nimport { CalibrationTypes } from '../enums';\nconst projectionRadiographSOPClassUIDs = new Set([\n    '1.2.840.10008.5.1.4.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.2',\n    '1.2.840.10008.5.1.4.1.1.1.2.1',\n    '1.2.840.10008.5.1.4.1.1.1.3',\n    '1.2.840.10008.5.1.4.1.1.1.3.1',\n    '1.2.840.10008.5.1.4.1.1.12.1',\n    '1.2.840.10008.5.1.4.1.1.12.1.1',\n    '1.2.840.10008.5.1.4.1.1.12.2',\n    '1.2.840.10008.5.1.4.1.1.12.2.1',\n    '1.2.840.10008.5.1.4.1.1.12.3',\n]);\nfunction calculateRadiographicPixelSpacing(instance) {\n    const { PixelSpacing, ImagerPixelSpacing, EstimatedRadiographicMagnificationFactor, PixelSpacingCalibrationType, PixelSpacingCalibrationDescription, } = instance;\n    const isProjection = true;\n    if (!ImagerPixelSpacing) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.UNKNOWN,\n            isProjection,\n        };\n    }\n    if (!PixelSpacing) {\n        if (!EstimatedRadiographicMagnificationFactor) {\n            console.warn('EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.');\n            return {\n                PixelSpacing: ImagerPixelSpacing,\n                type: CalibrationTypes.PROJECTION,\n                isProjection,\n            };\n        }\n        const correctedPixelSpacing = ImagerPixelSpacing.map((pixelSpacing) => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n        return {\n            PixelSpacing: correctedPixelSpacing,\n            type: CalibrationTypes.ERMF,\n            isProjection,\n        };\n    }\n    if (isEqual(PixelSpacing, ImagerPixelSpacing)) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.PROJECTION,\n            isProjection,\n        };\n    }\n    if (PixelSpacingCalibrationType || PixelSpacingCalibrationDescription) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.CALIBRATED,\n            isProjection,\n            PixelSpacingCalibrationType,\n            PixelSpacingCalibrationDescription,\n        };\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.UNKNOWN,\n        isProjection,\n    };\n}\nfunction calculateUSPixelSpacing(instance) {\n    const { SequenceOfUltrasoundRegions } = instance;\n    const isArrayOfSequences = Array.isArray(SequenceOfUltrasoundRegions);\n    if (isArrayOfSequences && SequenceOfUltrasoundRegions.length > 1) {\n        console.warn('Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.');\n        return;\n    }\n    const { PhysicalDeltaX, PhysicalDeltaY } = isArrayOfSequences\n        ? SequenceOfUltrasoundRegions[0]\n        : SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [PhysicalDeltaX * 10, PhysicalDeltaY * 10];\n    return {\n        PixelSpacing: USPixelSpacing,\n    };\n}\nexport default function getPixelSpacingInformation(instance) {\n    const { PixelSpacing, SOPClassUID, SequenceOfUltrasoundRegions } = instance;\n    if (SequenceOfUltrasoundRegions) {\n        return calculateUSPixelSpacing(instance);\n    }\n    const isProjection = projectionRadiographSOPClassUIDs.has(SOPClassUID);\n    if (isProjection) {\n        return calculateRadiographicPixelSpacing(instance);\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.NOT_APPLICABLE,\n        isProjection: false,\n    };\n}\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const scalingModules = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: scalingModules.suvbw,\n            suvbsa: scalingModules.suvbsa,\n            suvlbm: scalingModules.suvlbm,\n        }),\n        ...(modality === 'RTDOSE' && {\n            doseGridScaling: scalingModules.DoseGridScaling,\n            doseSummation: scalingModules.DoseSummation,\n            doseType: scalingModules.DoseType,\n            doseUnit: scalingModules.DoseUnit,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","import eventTarget from '../../eventTarget';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            item.restoreMemo(true);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_UNDO, {\n                    detail: {\n                        isUndo: true,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            item.restoreMemo(false);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_REDO, {\n                    detail: {\n                        isUndo: false,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport { isEqual, isEqualAbs, isEqualNegative } from './isEqual';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nimport getPixelSpacingInformation from './getPixelSpacingInformation';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isEqual, isEqualAbs, isEqualNegative, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, getPixelSpacingInformation, };\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport default function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nconst isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nconst isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nexport { isEqualNegative, isEqual, isEqualAbs };\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","export const logit = (y, wc, ww) => {\n    return wc - (ww / 4) * Math.log((1 - y) / y);\n};\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nfunction isPointOnPlane(point, plane, tolerance = EPSILON) {\n    return planeDistanceToPoint(plane, point) < tolerance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, isPointOnPlane, };\n","import { createPositionCallback } from './createPositionCallback';\nexport function pointInShapeCallback(imageData, options) {\n    const { pointInShapeFn, callback, boundsIJK, returnPoints = false } = options;\n    let scalarData;\n    if (imageData.getScalarData) {\n        scalarData = imageData.getScalarData();\n    }\n    else {\n        const scalars = imageData.getPointData().getScalars();\n        if (scalars) {\n            scalarData = scalars.getData();\n        }\n        else {\n            const { voxelManager } = imageData.get('voxelManager') || {};\n            if (voxelManager) {\n                scalarData = voxelManager.getCompleteScalarDataArray();\n            }\n        }\n    }\n    const dimensions = imageData.getDimensions();\n    const defaultBoundsIJK = [\n        [0, dimensions[0]],\n        [0, dimensions[1]],\n        [0, dimensions[2]],\n    ];\n    const bounds = boundsIJK || defaultBoundsIJK;\n    const pointsInShape = iterateOverPointsInShape({\n        imageData,\n        bounds,\n        scalarData,\n        pointInShapeFn,\n        callback,\n    });\n    return returnPoints ? pointsInShape : undefined;\n}\nexport function iterateOverPointsInShape({ imageData, bounds, scalarData, pointInShapeFn, callback, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const { numComps } = imageData;\n    const dimensions = imageData.getDimensions();\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const xMultiple = numComps ||\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n    const yMultiple = dimensions[0] * xMultiple;\n    const zMultiple = dimensions[1] * yMultiple;\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        const indexK = k * zMultiple;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            const indexJK = indexK + j * yMultiple;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = indexJK + i * xMultiple;\n                    let value;\n                    if (xMultiple > 2) {\n                        value = [\n                            scalarData[index],\n                            scalarData[index + 1],\n                            scalarData[index + 2],\n                        ];\n                    }\n                    else {\n                        value = scalarData[index];\n                    }\n                    pointsInShape.push({\n                        value,\n                        index,\n                        pointIJK,\n                        pointLPS: pointLPS.slice(),\n                    });\n                    callback({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\nexport function iterateOverPointsInShapeVoxelManager({ voxelManager, bounds, imageData, pointInShapeFn, callback, returnPoints, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = voxelManager.toIndex(pointIJK);\n                    const value = voxelManager.getAtIndex(index);\n                    if (returnPoints) {\n                        pointsInShape.push({\n                            value,\n                            index,\n                            pointIJK: [...pointIJK],\n                            pointLPS: pointLPS.slice(),\n                        });\n                    }\n                    callback?.({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\n","import { vec3 } from 'gl-matrix';\nexport function reflectVector(v, normal) {\n    const dotProduct = vec3.dot(v, normal);\n    const scaledNormal = vec3.scale(vec3.create(), normal, 2 * dotProduct);\n    return vec3.sub(vec3.create(), v, scaledNormal);\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport RenderingEngine from '../RenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new RenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","const canvasSize = 4;\nconst texWidth = 5;\nconst texHeight = 1;\nconst pixelToCheck = [1, 1];\nfunction main({ ext, filterType, texData, internalFormat, glDataType }) {\n    try {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvasSize;\n        canvas.height = canvasSize;\n        const gl = canvas.getContext('webgl2');\n        if (!gl) {\n            return false;\n        }\n        const vs = `#version 300 es\n    void main() {\n      gl_PointSize = ${canvasSize.toFixed(1)};\n      gl_Position = vec4(0, 0, 0, 1);\n    }\n  `;\n        const fs = `#version 300 es\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n\n    uniform sampler2D u_image;\n\n    out vec4 color;\n\n    void main() {\n        vec4 intColor = texture(u_image, gl_PointCoord.xy);\n        color = vec4(vec3(intColor.rrr), 1);\n    }\n    `;\n        let extToUse;\n        if (ext) {\n            extToUse = gl.getExtension(ext);\n            if (!extToUse) {\n                return false;\n            }\n        }\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vs);\n        gl.compileShader(vertexShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            return false;\n        }\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fs);\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            return false;\n        }\n        const program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            return false;\n        }\n        const tex = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat(gl, extToUse), texWidth, texHeight, 0, gl.RED, glDataType(gl, extToUse), texData);\n        const filter = filterType === 'LINEAR' ? gl.LINEAR : gl.NEAREST;\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n        gl.useProgram(program);\n        gl.drawArrays(gl.POINTS, 0, 1);\n        const pixel = new Uint8Array(4);\n        gl.readPixels(pixelToCheck[0], pixelToCheck[1], 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n        const [r, g, b] = pixel;\n        const webglLoseContext = gl.getExtension('WEBGL_lose_context');\n        if (webglLoseContext) {\n            webglLoseContext.loseContext();\n        }\n        return r === g && g === b && r !== 0;\n    }\n    catch (e) {\n        return false;\n    }\n}\nexport function getSupportedTextureFormats() {\n    const norm16TexData = new Int16Array([\n        32767, 2000, 3000, 4000, 5000, 16784, 7000, 8000, 9000, 32767,\n    ]);\n    return {\n        norm16: main({\n            ext: 'EXT_texture_norm16',\n            filterType: 'NEAREST',\n            texData: norm16TexData,\n            internalFormat: (gl, ext) => ext.R16_SNORM_EXT,\n            glDataType: (gl) => gl.SHORT,\n        }),\n        norm16Linear: main({\n            ext: 'EXT_texture_norm16',\n            filterType: 'LINEAR',\n            texData: norm16TexData,\n            internalFormat: (gl, ext) => ext.R16_SNORM_EXT,\n            glDataType: (gl) => gl.SHORT,\n        }),\n    };\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","import transformIndexToWorld from './transformIndexToWorld';\nexport function transformIJKToCanvas(viewport, ijkPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = transformIndexToWorld(vtkImageData, ijkPoint);\n    return viewport.worldToCanvas(worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","import eventTarget from '../eventTarget';\nexport default function triggerEvent(el = eventTarget, type, detail = null) {\n    if (!type) {\n        throw new Error('Event type was not defined');\n    }\n    const event = new CustomEvent(type, {\n        detail,\n        cancelable: true,\n    });\n    return el?.dispatchEvent(event);\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","export default function uuidv4() {\n    if (typeof crypto.randomUUID === 'function') {\n        return crypto.randomUUID();\n    }\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^\n        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16));\n}\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        const xLower = logit(0.01, windowCenter, windowWidth);\n        const xUpper = logit(0.99, windowCenter, windowWidth);\n        return {\n            lower: xLower,\n            upper: xUpper,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","export const version = '3.17.0';\n","import * as Comlink from 'comlink';\nimport { RequestType } from '../enums';\nimport { RequestPoolManager } from '../requestPool/requestPoolManager';\nclass CentralizedWorkerManager {\n    constructor() {\n        this.workerRegistry = {};\n        this.workerPoolManager = new RequestPoolManager('webworker');\n    }\n    registerWorker(workerName, workerFn, options = {}) {\n        const { maxWorkerInstances = 1, overwrite = false, autoTerminateOnIdle = {\n            enabled: false,\n            idleTimeThreshold: 3000,\n        }, } = options;\n        if (this.workerRegistry[workerName] && !overwrite) {\n            console.warn(`Worker type '${workerName}' is already registered...`);\n            return;\n        }\n        if (overwrite && this.workerRegistry[workerName]?.idleCheckIntervalId) {\n            clearInterval(this.workerRegistry[workerName].idleCheckIntervalId);\n        }\n        const workerProperties = {\n            workerFn: null,\n            instances: [],\n            loadCounters: [],\n            lastActiveTime: [],\n            nativeWorkers: [],\n            autoTerminateOnIdle: autoTerminateOnIdle.enabled,\n            idleCheckIntervalId: null,\n            idleTimeThreshold: autoTerminateOnIdle.idleTimeThreshold,\n        };\n        workerProperties.loadCounters = Array(maxWorkerInstances).fill(0);\n        workerProperties.lastActiveTime = Array(maxWorkerInstances).fill(null);\n        for (let i = 0; i < maxWorkerInstances; i++) {\n            const worker = workerFn();\n            workerProperties.instances.push(Comlink.wrap(worker));\n            workerProperties.nativeWorkers.push(worker);\n            workerProperties.workerFn = workerFn;\n        }\n        this.workerRegistry[workerName] = workerProperties;\n    }\n    getNextWorkerAPI(workerName) {\n        const workerProperties = this.workerRegistry[workerName];\n        if (!workerProperties) {\n            console.error(`Worker type '${workerName}' is not registered.`);\n            return null;\n        }\n        const workerInstances = workerProperties.instances.filter((instance) => instance !== null);\n        let minLoadIndex = 0;\n        let minLoadValue = workerProperties.loadCounters[0] || 0;\n        for (let i = 1; i < workerInstances.length; i++) {\n            const currentLoadValue = workerProperties.loadCounters[i] || 0;\n            if (currentLoadValue < minLoadValue) {\n                minLoadIndex = i;\n                minLoadValue = currentLoadValue;\n            }\n        }\n        if (workerProperties.instances[minLoadIndex] === null) {\n            const worker = workerProperties.workerFn();\n            workerProperties.instances[minLoadIndex] = Comlink.wrap(worker);\n            workerProperties.nativeWorkers[minLoadIndex] = worker;\n        }\n        workerProperties.loadCounters[minLoadIndex] += 1;\n        return {\n            api: workerProperties.instances[minLoadIndex],\n            index: minLoadIndex,\n        };\n    }\n    executeTask(workerName, methodName, args = {}, { requestType = RequestType.Compute, priority = 0, options = {}, callbacks = [], } = {}) {\n        return new Promise((resolve, reject) => {\n            const requestFn = async () => {\n                const { api, index } = this.getNextWorkerAPI(workerName);\n                if (!api) {\n                    const error = new Error(`No available worker instance for '${workerName}'`);\n                    console.error(error);\n                    reject(error);\n                    return;\n                }\n                try {\n                    let finalCallbacks = [];\n                    if (callbacks.length) {\n                        finalCallbacks = callbacks.map((cb) => {\n                            return Comlink.proxy(cb);\n                        });\n                    }\n                    const workerProperties = this.workerRegistry[workerName];\n                    workerProperties.processing = true;\n                    const results = await api[methodName](args, ...finalCallbacks);\n                    workerProperties.processing = false;\n                    workerProperties.lastActiveTime[index] = Date.now();\n                    if (workerProperties.autoTerminateOnIdle &&\n                        !workerProperties.idleCheckIntervalId &&\n                        workerProperties.idleTimeThreshold) {\n                        workerProperties.idleCheckIntervalId = setInterval(() => {\n                            this.terminateIdleWorkers(workerName, workerProperties.idleTimeThreshold);\n                        }, workerProperties.idleTimeThreshold);\n                    }\n                    resolve(results);\n                }\n                catch (err) {\n                    console.error(`Error executing method '${methodName}' on worker '${workerName}':`, err);\n                    reject(err);\n                }\n                finally {\n                    this.workerRegistry[workerName].loadCounters[index]--;\n                }\n            };\n            this.workerPoolManager.addRequest(requestFn, requestType, options, priority);\n        });\n    }\n    terminateIdleWorkers(workerName, idleTimeThreshold) {\n        const workerProperties = this.workerRegistry[workerName];\n        if (workerProperties.processing) {\n            return;\n        }\n        const now = Date.now();\n        workerProperties.instances.forEach((_, index) => {\n            const lastActiveTime = workerProperties.lastActiveTime[index];\n            const isWorkerActive = lastActiveTime !== null && workerProperties.loadCounters[index] > 0;\n            const idleTime = now - lastActiveTime;\n            if (!isWorkerActive && idleTime > idleTimeThreshold) {\n                this.terminateWorkerInstance(workerName, index);\n            }\n        });\n    }\n    terminate(workerName) {\n        const workerProperties = this.workerRegistry[workerName];\n        if (!workerProperties) {\n            console.error(`Worker type '${workerName}' is not registered.`);\n            return;\n        }\n        workerProperties.instances.forEach((_, index) => {\n            this.terminateWorkerInstance(workerName, index);\n        });\n    }\n    terminateWorkerInstance(workerName, index) {\n        const workerProperties = this.workerRegistry[workerName];\n        const workerInstance = workerProperties.instances[index];\n        if (workerInstance !== null) {\n            workerInstance[Comlink.releaseProxy]();\n            workerProperties.nativeWorkers[index].terminate();\n            workerProperties.instances[index] = null;\n            workerProperties.lastActiveTime[index] = null;\n        }\n    }\n}\nexport default CentralizedWorkerManager;\n","/* eslint-disable no-bitwise */\n\n// ----------------------------------------------------------------------------\n// Decoding infrastructure\n// ----------------------------------------------------------------------------\n\nconst REVERSE_LOOKUP = [];\nREVERSE_LOOKUP['-'.charCodeAt(0)] = 62;\nREVERSE_LOOKUP['_'.charCodeAt(0)] = 63;\nconst BASE64_CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (let i = 0; i < BASE64_CODE.length; i++) {\n  REVERSE_LOOKUP[BASE64_CODE.charCodeAt(i)] = i;\n}\n\n// ----------------------------------------------------------------------------\n// Base64 analysis\n// ----------------------------------------------------------------------------\n\nfunction isValidChar(c) {\n  return REVERSE_LOOKUP[c.charCodeAt(0)] !== undefined;\n}\nfunction extractChunks(b64Str) {\n  const strSize = b64Str.length;\n  const chunks = [];\n  let currentChunk = null;\n  for (let i = 0; i < strSize; i++) {\n    if (isValidChar(b64Str[i])) {\n      if (!currentChunk) {\n        currentChunk = {\n          start: i,\n          count: 0\n        };\n      }\n      currentChunk.count++;\n      currentChunk.end = i;\n    } else if (b64Str[i] === '=' && currentChunk) {\n      // End of chunk (found padding char)\n      chunks.push(currentChunk);\n      currentChunk = null;\n    }\n  }\n  if (currentChunk) {\n    chunks.push(currentChunk);\n  }\n  return chunks;\n}\nfunction writeChunk(b64Str, chunk, dstOffset, uint8) {\n  const {\n    start,\n    count\n  } = chunk;\n  const remain = count % 4;\n  const fourCharProcessCount = Math.floor(count / 4);\n  let charIdx = start;\n  let tmp = null;\n  let offset = dstOffset;\n\n  // Handle 4=>3\n  for (let i = 0; i < fourCharProcessCount; i++) {\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n    tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 18;\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n    tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 12;\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n    tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 6;\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n    tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)];\n    uint8[offset++] = tmp >> 16 & 0xff;\n    uint8[offset++] = tmp >> 8 & 0xff;\n    uint8[offset++] = tmp & 0xff;\n  }\n\n  // Handle remain\n  switch (remain) {\n    case 3:\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n      tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 10;\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 4;\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] >> 2;\n      uint8[offset++] = tmp >> 8 & 0xff;\n      uint8[offset++] = tmp & 0xff;\n      break;\n    case 2:\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n      tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 2;\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] >> 4;\n      uint8[offset++] = tmp & 0xff;\n      break;\n    case 1:\n      throw new Error('BASE64: remain 1 should not happen');\n  }\n  return offset;\n}\nfunction toArrayBuffer(b64Str) {\n  const chunks = extractChunks(b64Str);\n  const totalEncodedLength = chunks[chunks.length - 1].end + 1;\n  const padding = (4 - totalEncodedLength % 4) % 4; // -length mod 4\n  // Any padding chars in the middle of b64Str is to be interpreted as \\x00,\n  // whereas the terminating padding chars are to be interpreted as literal padding.\n  const totalSize = (totalEncodedLength + padding) * 3 / 4 - padding;\n  const arrayBuffer = new ArrayBuffer(totalSize);\n  const view = new Uint8Array(arrayBuffer);\n  let dstOffset = 0;\n  for (let i = 0; i < chunks.length; i++) {\n    dstOffset += writeChunk(b64Str, chunks[i], dstOffset, view);\n    dstOffset += (4 - chunks[i].count % 4) % 4;\n  }\n  return arrayBuffer;\n}\nfunction encodeTriplet(v1, v2, v3) {\n  const triplet = (v1 << 16) + (v2 << 8) + v3;\n  return BASE64_CODE[triplet >> 18] + BASE64_CODE[triplet >> 12 & 0x3f] + BASE64_CODE[triplet >> 6 & 0x3f] + BASE64_CODE[triplet & 0x3f];\n}\nfunction fromArrayBuffer(ab) {\n  const uint8 = new Uint8Array(ab);\n  const leftoverLength = ab.byteLength % 3;\n  const maxTripletIndex = ab.byteLength - leftoverLength;\n  const segments = Array(maxTripletIndex / 3);\n  for (let i = 0; i < segments.length; i++) {\n    const bufOffset = i * 3;\n    segments[i] = encodeTriplet(uint8[bufOffset], uint8[bufOffset + 1], uint8[bufOffset + 2]);\n  }\n  if (leftoverLength > 0) {\n    const segment = encodeTriplet(uint8[maxTripletIndex], uint8[maxTripletIndex + 1] || 0, uint8[maxTripletIndex + 2] || 0);\n    if (leftoverLength === 1) {\n      segments.push(`${segment.substr(0, 2)}==`);\n    } else if (leftoverLength === 2) {\n      segments.push(`${segment.substr(0, 3)}=`);\n    }\n  }\n  return segments.join('');\n}\nvar Base64 = {\n  toArrayBuffer,\n  fromArrayBuffer\n};\n\nexport { Base64 as default, fromArrayBuffer, toArrayBuffer };\n","import { m as macro } from '../../macros2.js';\nimport vtkDataArray from './DataArray.js';\nimport { VtkDataTypes } from './DataArray/Constants.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction extractCellSizes(cellArray) {\n  let currentIdx = 0;\n  return cellArray.filter((value, index) => {\n    if (index === currentIdx) {\n      currentIdx += value + 1;\n      return true;\n    }\n    return false;\n  });\n}\nfunction getNumberOfCells(cellArray) {\n  let cellId = 0;\n  for (let cellArrayIndex = 0; cellArrayIndex < cellArray.length;) {\n    cellArrayIndex += cellArray[cellArrayIndex] + 1;\n    cellId++;\n  }\n  return cellId;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  extractCellSizes,\n  getNumberOfCells\n};\n\n// ----------------------------------------------------------------------------\n// vtkCellArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCellArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCellArray');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getNumberOfCells = recompute => {\n    if (model.numberOfCells !== undefined && !recompute) {\n      return model.numberOfCells;\n    }\n    if (model.cellSizes) {\n      model.numberOfCells = model.cellSizes.length;\n    } else {\n      model.numberOfCells = getNumberOfCells(publicAPI.getData());\n    }\n    return model.numberOfCells;\n  };\n  publicAPI.getCellSizes = recompute => {\n    if (model.cellSizes !== undefined && !recompute) {\n      return model.cellSizes;\n    }\n    model.cellSizes = extractCellSizes(publicAPI.getData());\n    return model.cellSizes;\n  };\n\n  /**\n   * When `resize()` is being used, you then MUST use `insertNextCell()`.\n   */\n  publicAPI.resize = requestedNumTuples => {\n    const oldNumTuples = publicAPI.getNumberOfTuples();\n    superClass.resize(requestedNumTuples);\n    const newNumTuples = publicAPI.getNumberOfTuples();\n    if (newNumTuples < oldNumTuples) {\n      if (newNumTuples === 0) {\n        model.numberOfCells = 0;\n        model.cellSizes = [];\n      } else {\n        // We do not know how many cells are left.\n        // Set to undefined to ensure insertNextCell works correctly.\n        model.numberOfCells = undefined;\n        model.cellSizes = undefined;\n      }\n    }\n  };\n  publicAPI.setData = typedArray => {\n    superClass.setData(typedArray, 1);\n    model.numberOfCells = undefined;\n    model.cellSizes = undefined;\n  };\n  publicAPI.getCell = loc => {\n    let cellLoc = loc;\n    const numberOfPoints = model.values[cellLoc++];\n    return model.values.subarray(cellLoc, cellLoc + numberOfPoints);\n  };\n  publicAPI.insertNextCell = cellPointIds => {\n    const cellId = publicAPI.getNumberOfCells();\n    publicAPI.insertNextTuples([cellPointIds.length, ...cellPointIds]);\n    // By computing the number of cells earlier, we made sure that numberOfCells is defined\n    ++model.numberOfCells;\n    if (model.cellSizes != null) {\n      model.cellSizes.push(cellPointIds.length);\n    }\n    return cellId;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(initialValues) {\n  return {\n    empty: true,\n    numberOfComponents: 1,\n    dataType: VtkDataTypes.UNSIGNED_INT,\n    ...initialValues\n  };\n}\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  vtkDataArray.extend(publicAPI, model, defaultValues(initialValues));\n  vtkCellArray(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCellArray');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCellArray$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkCellArray$1 as default, extend, newInstance };\n","function getEndianness() {\n  const a = new ArrayBuffer(4);\n  const b = new Uint8Array(a);\n  const c = new Uint32Array(a);\n  b[0] = 0xa1;\n  b[1] = 0xb2;\n  b[2] = 0xc3;\n  b[3] = 0xd4;\n  if (c[0] === 0xd4c3b2a1) return 'LittleEndian';\n  if (c[0] === 0xa1b2c3d4) return 'BigEndian';\n  return null;\n}\nconst ENDIANNESS = getEndianness();\nfunction swapBytes(buffer, wordSize) {\n  if (wordSize < 2) {\n    return;\n  }\n  const bytes = new Int8Array(buffer);\n  const size = bytes.length;\n  const tempBuffer = [];\n  for (let i = 0; i < size; i += wordSize) {\n    for (let j = 0; j < wordSize; j++) {\n      tempBuffer.push(bytes[i + j]);\n    }\n    for (let j = 0; j < wordSize; j++) {\n      bytes[i + j] = tempBuffer.pop();\n    }\n  }\n}\nvar Endian = {\n  ENDIANNESS,\n  getEndianness,\n  swapBytes\n};\n\nexport { ENDIANNESS, Endian as default, getEndianness, swapBytes };\n","/* eslint-disable no-bitwise */\n\nconst floatView = new Float32Array(1);\nconst int32View = new Int32Array(floatView.buffer);\n\n/* eslint-disable no-bitwise */\n/* This method is faster than the OpenEXR implementation (very often\n * used, eg. in Ogre), with the additional benefit of rounding, inspired\n * by James Tursa?s half-precision code. */\nfunction toHalf(val) {\n  floatView[0] = val;\n  const x = int32View[0];\n  let bits = x >> 16 & 0x8000; /* Get the sign */\n  let m = x >> 12 & 0x07ff; /* Keep one extra bit for rounding */\n  const e = x >> 23 & 0xff; /* Using int is faster here */\n\n  /* If zero, or denormal, or exponent underflows too much for a denormal\n   * half, return signed zero. */\n  if (e < 103) {\n    return bits;\n  }\n\n  /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n  if (e > 142) {\n    bits |= 0x7c00;\n    /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n     * not Inf, so make sure we set one mantissa bit too. */\n    bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;\n    return bits;\n  }\n\n  /* If exponent underflows but not too much, return a denormal */\n  if (e < 113) {\n    m |= 0x0800;\n    /* Extra rounding may overflow and set mantissa to 0 and exponent\n     * to 1, which is OK. */\n    bits |= (m >> 114 - e) + (m >> 113 - e & 1);\n    return bits;\n  }\n  bits |= e - 112 << 10 | m >> 1;\n  /* Extra rounding. An overflow will set mantissa to 0 and increment\n   * the exponent, which is OK. */\n  bits += m & 1;\n  return bits;\n}\nfunction fromHalf(h) {\n  const s = (h & 0x8000) >> 15;\n  const e = (h & 0x7c00) >> 10;\n  const f = h & 0x03ff;\n  if (e === 0) {\n    return (s ? -1 : 1) * 2 ** -14 * (f / 2 ** 10);\n  }\n  if (e === 0x1f) {\n    return f ? NaN : (s ? -1 : 1) * Infinity;\n  }\n  return (s ? -1 : 1) * 2 ** (e - 15) * (1 + f / 2 ** 10);\n}\nvar HalfFloat = {\n  fromHalf,\n  toHalf\n};\n\nexport { HalfFloat as default };\n","import { m as macro } from '../../macros2.js';\nimport { i as isNan, h as hsv2rgb } from './Math/index.js';\nimport vtkScalarsToColors from './ScalarsToColors.js';\nimport { ScalarMappingTarget } from './ScalarsToColors/Constants.js';\nimport { VtkDataTypes } from './DataArray/Constants.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// Add module-level functions or api that you want to expose statically via\n// the next section...\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst BELOW_RANGE_COLOR_INDEX = 0;\nconst ABOVE_RANGE_COLOR_INDEX = 1;\nconst NAN_COLOR_INDEX = 2;\n\n// ----------------------------------------------------------------------------\n// vtkMyClass methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLookupTable(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLookupTable');\n\n  //----------------------------------------------------------------------------\n  // Description:\n  // Return true if all of the values defining the mapping have an opacity\n  // equal to 1. Default implementation return true.\n  publicAPI.isOpaque = () => {\n    if (model.opaqueFlagBuildTime.getMTime() < publicAPI.getMTime()) {\n      let opaque = true;\n      if (model.nanColor[3] < 1.0) {\n        opaque = 0;\n      }\n      if (model.useBelowRangeColor && model.belowRangeColor[3] < 1.0) {\n        opaque = 0;\n      }\n      if (model.useAboveRangeColor && model.aboveRangeColor[3] < 1.0) {\n        opaque = 0;\n      }\n      for (let i = 3; i < model.table.length && opaque; i += 4) {\n        if (model.table[i] < 255) {\n          opaque = false;\n        }\n      }\n      model.opaqueFlag = opaque;\n      model.opaqueFlagBuildTime.modified();\n    }\n    return model.opaqueFlag;\n  };\n  publicAPI.usingLogScale = () => false;\n\n  //----------------------------------------------------------------------------\n  // Don't count special colors (min, max, NaN) as available colors\n  publicAPI.getNumberOfAvailableColors = () => model.table.length / 4 - 3;\n\n  //----------------------------------------------------------------------------\n  // Apply shift/scale to the scalar value v and return the index.\n  publicAPI.linearIndexLookup = (v, p) => {\n    let dIndex = 0;\n    const nv = Number(v);\n    if (nv < p.range[0]) {\n      dIndex = p.maxIndex + BELOW_RANGE_COLOR_INDEX + 1.5;\n    } else if (nv > p.range[1]) {\n      dIndex = p.maxIndex + ABOVE_RANGE_COLOR_INDEX + 1.5;\n    } else {\n      dIndex = (nv + p.shift) * p.scale;\n\n      // This conditional is needed because when v is very close to\n      // p.Range[1], it may map above p.MaxIndex in the linear mapping\n      // above.\n      dIndex = dIndex < p.maxIndex ? dIndex : p.maxIndex;\n    }\n    return Math.floor(dIndex);\n  };\n  publicAPI.linearLookup = (v, table, p) => {\n    let index = 0;\n    if (isNan(v)) {\n      index = Math.floor(p.maxIndex + 1.5 + NAN_COLOR_INDEX);\n    } else {\n      index = publicAPI.linearIndexLookup(v, p);\n    }\n    const offset = 4 * index;\n    return table.slice(offset, offset + 4);\n  };\n  publicAPI.indexedLookupFunction = (v, table, p) => {\n    let index = publicAPI.getAnnotatedValueIndexInternal(v);\n    if (index === -1) {\n      index = model.numberOfColors + NAN_COLOR_INDEX;\n    }\n    const offset = 4 * index;\n    return [table[offset], table[offset + 1], table[offset + 2], table[offset + 3]];\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.lookupShiftAndScale = (range, p) => {\n    p.shift = -range[0];\n    p.scale = Number.MAX_VALUE;\n    if (range[1] > range[0]) {\n      p.scale = (p.maxIndex + 1) / (range[1] - range[0]);\n    }\n  };\n\n  // Public API methods\n  publicAPI.mapScalarsThroughTable = (input, output, outFormat, inputOffset) => {\n    let lookupFunc = publicAPI.linearLookup;\n    if (model.indexedLookup) {\n      lookupFunc = publicAPI.indexedLookupFunction;\n    }\n    const trange = publicAPI.getMappingRange();\n    const p = {\n      maxIndex: publicAPI.getNumberOfColors() - 1,\n      range: trange,\n      shift: 0.0,\n      scale: 0.0\n    };\n    publicAPI.lookupShiftAndScale(trange, p);\n    const alpha = publicAPI.getAlpha();\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    if (alpha >= 1.0) {\n      if (outFormat === ScalarMappingTarget.RGBA) {\n        for (let i = 0; i < length; i++) {\n          const cptr = lookupFunc(inputV[i * inIncr + inputOffset], model.table, p);\n          outputV[i * 4] = cptr[0];\n          outputV[i * 4 + 1] = cptr[1];\n          outputV[i * 4 + 2] = cptr[2];\n          outputV[i * 4 + 3] = cptr[3];\n        }\n      }\n    } else {\n      /* eslint-disable no-lonely-if */\n      if (outFormat === ScalarMappingTarget.RGBA) {\n        for (let i = 0; i < length; i++) {\n          const cptr = lookupFunc(inputV[i * inIncr + inputOffset], model.table, p);\n          outputV[i * 4] = cptr[0];\n          outputV[i * 4 + 1] = cptr[1];\n          outputV[i * 4 + 2] = cptr[2];\n          outputV[i * 4 + 3] = Math.floor(cptr[3] * alpha + 0.5);\n        }\n      }\n    } // alpha blending\n  };\n\n  publicAPI.forceBuild = () => {\n    let hinc = 0.0;\n    let sinc = 0.0;\n    let vinc = 0.0;\n    let ainc = 0.0;\n    const maxIndex = model.numberOfColors - 1;\n    if (maxIndex) {\n      hinc = (model.hueRange[1] - model.hueRange[0]) / maxIndex;\n      sinc = (model.saturationRange[1] - model.saturationRange[0]) / maxIndex;\n      vinc = (model.valueRange[1] - model.valueRange[0]) / maxIndex;\n      ainc = (model.alphaRange[1] - model.alphaRange[0]) / maxIndex;\n    }\n    model.table.length = 4 * maxIndex + 16;\n    const hsv = [];\n    const rgba = [];\n    for (let i = 0; i <= maxIndex; i++) {\n      hsv[0] = model.hueRange[0] + i * hinc;\n      hsv[1] = model.saturationRange[0] + i * sinc;\n      hsv[2] = model.valueRange[0] + i * vinc;\n      hsv2rgb(hsv, rgba);\n      rgba[3] = model.alphaRange[0] + i * ainc;\n\n      //  case VTK_RAMP_LINEAR:\n      model.table[i * 4] = rgba[0] * 255.0 + 0.5;\n      model.table[i * 4 + 1] = rgba[1] * 255.0 + 0.5;\n      model.table[i * 4 + 2] = rgba[2] * 255.0 + 0.5;\n      model.table[i * 4 + 3] = rgba[3] * 255.0 + 0.5;\n    }\n    publicAPI.buildSpecialColors();\n    model.buildTime.modified();\n  };\n  publicAPI.setTable = table => {\n    // Handle JS array (assume 2D array)\n    if (Array.isArray(table)) {\n      const nbComponents = table[0].length;\n      model.numberOfColors = table.length;\n      const colorOffset = 4 - nbComponents;\n      let offset = 0;\n      // fill table\n      for (let i = 0; i < model.numberOfColors; i++) {\n        model.table[i * 4] = 255;\n        model.table[i * 4 + 1] = 255;\n        model.table[i * 4 + 2] = 255;\n        model.table[i * 4 + 3] = 255;\n      }\n      // extract colors\n      for (let i = 0; i < table.length; i++) {\n        const color = table[i];\n        for (let j = 0; j < nbComponents; j++) {\n          model.table[offset++] = color[j];\n        }\n        offset += colorOffset;\n      }\n      publicAPI.buildSpecialColors();\n      model.insertTime.modified();\n      publicAPI.modified();\n      return true;\n    }\n    if (table.getNumberOfComponents() !== 4) {\n      vtkErrorMacro('Expected 4 components for RGBA colors');\n      return false;\n    }\n    if (table.getDataType() !== VtkDataTypes.UNSIGNED_CHAR) {\n      vtkErrorMacro('Expected unsigned char values for RGBA colors');\n      return false;\n    }\n    model.numberOfColors = table.getNumberOfTuples();\n    const data = table.getData();\n    model.table.length = data.length;\n    for (let i = 0; i < data.length; i++) {\n      model.table[i] = data[i];\n    }\n    publicAPI.buildSpecialColors();\n    model.insertTime.modified();\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.buildSpecialColors = () => {\n    // Add \"special\" colors (NaN, below range, above range) to table here.\n    const {\n      numberOfColors\n    } = model;\n    const tptr = model.table;\n    let base = (numberOfColors + BELOW_RANGE_COLOR_INDEX) * 4;\n\n    // Below range color\n    if (model.useBelowRangeColor || numberOfColors === 0) {\n      tptr[base] = model.belowRangeColor[0] * 255.0 + 0.5;\n      tptr[base + 1] = model.belowRangeColor[1] * 255.0 + 0.5;\n      tptr[base + 2] = model.belowRangeColor[2] * 255.0 + 0.5;\n      tptr[base + 3] = model.belowRangeColor[3] * 255.0 + 0.5;\n    } else {\n      // Duplicate the first color in the table.\n      tptr[base] = tptr[0];\n      tptr[base + 1] = tptr[1];\n      tptr[base + 2] = tptr[2];\n      tptr[base + 3] = tptr[3];\n    }\n\n    // Above range color\n    base = (numberOfColors + ABOVE_RANGE_COLOR_INDEX) * 4;\n    if (model.useAboveRangeColor || numberOfColors === 0) {\n      tptr[base] = model.aboveRangeColor[0] * 255.0 + 0.5;\n      tptr[base + 1] = model.aboveRangeColor[1] * 255.0 + 0.5;\n      tptr[base + 2] = model.aboveRangeColor[2] * 255.0 + 0.5;\n      tptr[base + 3] = model.aboveRangeColor[3] * 255.0 + 0.5;\n    } else {\n      // Duplicate the last color in the table.\n      tptr[base] = tptr[4 * (numberOfColors - 1) + 0];\n      tptr[base + 1] = tptr[4 * (numberOfColors - 1) + 1];\n      tptr[base + 2] = tptr[4 * (numberOfColors - 1) + 2];\n      tptr[base + 3] = tptr[4 * (numberOfColors - 1) + 3];\n    }\n\n    // Always use NanColor\n    base = (numberOfColors + NAN_COLOR_INDEX) * 4;\n    tptr[base] = model.nanColor[0] * 255.0 + 0.5;\n    tptr[base + 1] = model.nanColor[1] * 255.0 + 0.5;\n    tptr[base + 2] = model.nanColor[2] * 255.0 + 0.5;\n    tptr[base + 3] = model.nanColor[3] * 255.0 + 0.5;\n  };\n  publicAPI.build = () => {\n    if (model.table.length < 1 || publicAPI.getMTime() > model.buildTime.getMTime() && model.insertTime.getMTime() <= model.buildTime.getMTime()) {\n      publicAPI.forceBuild();\n    }\n  };\n  if (model.table.length > 0) {\n    // Ensure that special colors are properly included in the table\n    publicAPI.buildSpecialColors();\n\n    // ensure insertTime is more recently modified than buildTime if\n    // a table is provided via the constructor\n    model.insertTime.modified();\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  numberOfColors: 256,\n  // table: null,\n\n  hueRange: [0.0, 0.66667],\n  saturationRange: [1.0, 1.0],\n  valueRange: [1.0, 1.0],\n  alphaRange: [1.0, 1.0],\n  nanColor: [0.5, 0.0, 0.0, 1.0],\n  belowRangeColor: [0.0, 0.0, 0.0, 1.0],\n  aboveRangeColor: [1.0, 1.0, 1.0, 1.0],\n  useAboveRangeColor: false,\n  useBelowRangeColor: false,\n  alpha: 1.0\n  // buildTime: null,\n  // opaqueFlagBuildTime: null,\n  // insertTime: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkScalarsToColors.extend(publicAPI, model, initialValues);\n\n  // Internal objects initialization\n  if (!model.table) {\n    model.table = [];\n  }\n  model.buildTime = {};\n  macro.obj(model.buildTime);\n  model.opaqueFlagBuildTime = {};\n  macro.obj(model.opaqueFlagBuildTime, {\n    mtime: 0\n  });\n  model.insertTime = {};\n  macro.obj(model.insertTime, {\n    mtime: 0\n  });\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['buildTime']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['numberOfColors', 'useAboveRangeColor', 'useBelowRangeColor']);\n\n  // Create set macros for array (needs to know size)\n  macro.setArray(publicAPI, model, ['alphaRange', 'hueRange', 'saturationRange', 'valueRange'], 2);\n  macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['hueRange', 'saturationRange', 'valueRange', 'alphaRange', 'nanColor', 'belowRangeColor', 'aboveRangeColor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkLookupTable(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkLookupTable');\n\n// ----------------------------------------------------------------------------\n\nvar vtkLookupTable$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkLookupTable$1 as default, extend, newInstance };\n","import 'seedrandom';\nimport '../../macros2.js';\nimport './Math/Constants.js';\nexport { ao as LUFactor3x3, ap as LUSolve3x3, Z as Pi, k as add, W as angleBetweenVectors, U as areBoundsInitialized, D as areEquals, a as areMatricesEqual, a2 as arrayMax, a1 as arrayMin, F as arrayRange, a6 as beginCombination, a5 as binomial, aT as boundsIsWithinOtherBounds, _ as ceil, a3 as ceilLog2, aP as clampAndNormalizeValue, E as clampValue, c as clampVector, an as columnsToMat3, am as columnsToMat4, aO as computeBoundsFromPoints, Y as createArray, H as createUninitializedBounds, j as cross, f as default, A as degreesFromRadians, o as determinant2x2, y as determinant3x3, aC as diagonalize3x3, e as distance2BetweenPoints, d as dot, af as dot2D, aH as estimateMatrixCondition, aS as extentIsWithinOtherExtent, a4 as factorial, b0 as float2CssRGBA, a$ as floatRGB2HexCode, a_ as floatToHex2, K as floor, aa as gaussian, ah as gaussianAmplitude, ai as gaussianWeight, aR as getAdjustedScalarRange, G as getMajorAxisIndex, aQ as getScalarTypeFittingRange, a9 as getSeed, T as getSparseOrthogonalMatrix, aK as hex2float, h as hsv2rgb, I as identity, au as identity3x3, aW as inf, at as invert3x3, aG as invertMatrix, aY as isFinite, av as isIdentity, aw as isIdentity3x3, L as isInf, aZ as isNaN, i as isNan, V as isPowerOfTwo, t as jacobi, p as jacobiN, O as lab2rgb, aL as lab2xyz, B as ldexp, aq as linearSolve3x3, aE as luFactorLinearSystem, aF as luSolveLinearSystem, az as matrix3x3ToQuaternion, a0 as max, $ as min, ar as multiply3x3_mat3, S as multiply3x3_vect3, m as multiplyAccumulate, ac as multiplyAccumulate2D, J as multiplyMatrix, aA as multiplyQuaternion, w as multiplyScalar, ab as multiplyScalar2D, R as nearestPowerOfTwo, aX as negInf, a7 as nextCombination, n as norm, ak as norm2D, l as normalize, Q as normalize2D, aB as orthogonalize3x3, ad as outer, aj as outer2D, q as perpendiculars, aU as pointIsWithinBounds, ae as projectVector, ag as projectVector2D, ax as quaternionToMatrix3x3, r as radiansFromDegrees, x as random, a8 as randomSeed, M as rgb2hsv, N as rgb2lab, aN as rgb2xyz, P as round, ay as roundNumber, b as roundVector, z as rowsToMat3, al as rowsToMat4, X as signedAngleBetweenVectors, aD as singularValueDecomposition3x3, aV as solve3PointCircle, aI as solveHomogeneousLeastSquares, aJ as solveLeastSquares, g as solveLinearSystem, s as subtract, as as transpose3x3, u as uninitializeBounds, aM as xyz2lab, C as xyz2rgb } from './Math/index.js';\n","import { mat4, glMatrix, vec3 } from 'gl-matrix';\nimport { a as areMatricesEqual } from './Math/index.js';\nimport { IDENTITY } from './Math/Constants.js';\n\nconst NoOp = v => v;\nconst EPSILON = 1e-6;\nclass Transform {\n  constructor() {\n    let useDegree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.matrix = mat4.identity(new Float64Array(16));\n    this.tmp = new Float64Array(3);\n    this.angleConv = useDegree ? glMatrix.toRadian : NoOp;\n  }\n  rotateFromDirections(originDirection, targetDirection) {\n    const src = new Float64Array(3);\n    const dst = new Float64Array(3);\n    const transf = new Float64Array(16);\n    vec3.set(src, originDirection[0], originDirection[1], originDirection[2]);\n    vec3.set(dst, targetDirection[0], targetDirection[1], targetDirection[2]);\n    vec3.normalize(src, src);\n    vec3.normalize(dst, dst);\n    const cosAlpha = vec3.dot(src, dst);\n    if (cosAlpha >= 1) {\n      return this;\n    }\n    vec3.cross(this.tmp, src, dst);\n    if (vec3.length(this.tmp) < EPSILON) {\n      // cross product is 0, so pick arbitrary axis perpendicular\n      // to originDirection.\n      vec3.cross(this.tmp, [1, 0, 0], originDirection);\n      if (vec3.length(this.tmp) < EPSILON) {\n        vec3.cross(this.tmp, [0, 1, 0], originDirection);\n      }\n    }\n    mat4.fromRotation(transf, Math.acos(cosAlpha), this.tmp);\n    mat4.multiply(this.matrix, this.matrix, transf);\n    return this;\n  }\n  rotate(angle, axis) {\n    vec3.set(this.tmp, ...axis);\n    vec3.normalize(this.tmp, this.tmp);\n    mat4.rotate(this.matrix, this.matrix, this.angleConv(angle), this.tmp);\n    return this;\n  }\n  rotateX(angle) {\n    mat4.rotateX(this.matrix, this.matrix, this.angleConv(angle));\n    return this;\n  }\n  rotateY(angle) {\n    mat4.rotateY(this.matrix, this.matrix, this.angleConv(angle));\n    return this;\n  }\n  rotateZ(angle) {\n    mat4.rotateZ(this.matrix, this.matrix, this.angleConv(angle));\n    return this;\n  }\n  translate(x, y, z) {\n    vec3.set(this.tmp, x, y, z);\n    mat4.translate(this.matrix, this.matrix, this.tmp);\n    return this;\n  }\n  scale(sx, sy, sz) {\n    vec3.set(this.tmp, sx, sy, sz);\n    mat4.scale(this.matrix, this.matrix, this.tmp);\n    return this;\n  }\n  multiply(mat4x4) {\n    mat4.multiply(this.matrix, this.matrix, mat4x4);\n    return this;\n  }\n  multiply3x3(mat3x3) {\n    mat4.multiply(this.matrix, this.matrix, [mat3x3[0], mat3x3[1], mat3x3[2], 0, mat3x3[3], mat3x3[4], mat3x3[5], 0, mat3x3[6], mat3x3[7], mat3x3[8], 0, 0, 0, 0, 1]);\n    return this;\n  }\n  invert() {\n    mat4.invert(this.matrix, this.matrix);\n    return this;\n  }\n  identity() {\n    mat4.identity(this.matrix);\n    return this;\n  }\n\n  //-----------\n\n  apply(typedArray) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let nbIterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    if (areMatricesEqual(IDENTITY, this.matrix)) {\n      // Make sure we can chain apply...\n      return this;\n    }\n    const size = nbIterations === -1 ? typedArray.length : offset + nbIterations * 3;\n    for (let i = offset; i < size; i += 3) {\n      vec3.set(this.tmp, typedArray[i], typedArray[i + 1], typedArray[i + 2]);\n      vec3.transformMat4(this.tmp, this.tmp, this.matrix);\n      typedArray[i] = this.tmp[0];\n      typedArray[i + 1] = this.tmp[1];\n      typedArray[i + 2] = this.tmp[2];\n    }\n\n    // Make sure we can chain apply...\n    return this;\n  }\n  getMatrix() {\n    return this.matrix;\n  }\n  setMatrix(mat4x4) {\n    if (!!mat4x4 && mat4x4.length === 16) {\n      mat4.copy(this.matrix, mat4x4);\n    }\n    return this;\n  }\n}\nfunction buildFromDegree() {\n  return new Transform(true);\n}\nfunction buildFromRadian() {\n  return new Transform(false);\n}\nvar vtkMatrixBuilder = {\n  buildFromDegree,\n  buildFromRadian\n};\n\nexport { vtkMatrixBuilder as default };\n","import { m as macro } from '../../macros2.js';\nimport vtkDataArray from './DataArray.js';\nimport { VtkDataTypes } from './DataArray/Constants.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nconst INVALID_BOUNDS = [1, -1, 1, -1, 1, -1];\n\n// ----------------------------------------------------------------------------\n// vtkPoints methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPoints(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPoints');\n\n  // Forwarding methods\n  publicAPI.getNumberOfPoints = publicAPI.getNumberOfTuples;\n  publicAPI.setNumberOfPoints = function (nbPoints) {\n    let dimension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    if (publicAPI.getNumberOfPoints() !== nbPoints) {\n      model.size = nbPoints * dimension;\n      model.values = macro.newTypedArray(model.dataType, model.size);\n      publicAPI.setNumberOfComponents(dimension);\n      publicAPI.modified();\n    }\n  };\n  publicAPI.setPoint = function (idx) {\n    for (var _len = arguments.length, xyz = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      xyz[_key - 1] = arguments[_key];\n    }\n    publicAPI.setTuple(idx, xyz);\n  };\n  publicAPI.getPoint = publicAPI.getTuple;\n  publicAPI.findPoint = publicAPI.findTuple;\n  publicAPI.insertNextPoint = (x, y, z) => publicAPI.insertNextTuple([x, y, z]);\n  publicAPI.getBounds = () => {\n    if (publicAPI.getNumberOfComponents() === 3) {\n      const xRange = publicAPI.getRange(0);\n      model.bounds[0] = xRange[0];\n      model.bounds[1] = xRange[1];\n      const yRange = publicAPI.getRange(1);\n      model.bounds[2] = yRange[0];\n      model.bounds[3] = yRange[1];\n      const zRange = publicAPI.getRange(2);\n      model.bounds[4] = zRange[0];\n      model.bounds[5] = zRange[1];\n      return model.bounds;\n    }\n    if (publicAPI.getNumberOfComponents() !== 2) {\n      vtkErrorMacro(`getBounds called on an array with components of\n        ${publicAPI.getNumberOfComponents()}`);\n      return INVALID_BOUNDS;\n    }\n    const xRange = publicAPI.getRange(0);\n    model.bounds[0] = xRange[0];\n    model.bounds[1] = xRange[1];\n    const yRange = publicAPI.getRange(1);\n    model.bounds[2] = yRange[0];\n    model.bounds[3] = yRange[1];\n    model.bounds[4] = 0;\n    model.bounds[5] = 0;\n    return model.bounds;\n  };\n\n  // Trigger the computation of bounds\n  publicAPI.computeBounds = publicAPI.getBounds;\n\n  // Initialize\n  publicAPI.setNumberOfComponents(model.numberOfComponents < 2 ? 3 : model.numberOfComponents);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  empty: true,\n  numberOfComponents: 3,\n  dataType: VtkDataTypes.FLOAT,\n  bounds: [1, -1, 1, -1, 1, -1]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkDataArray.extend(publicAPI, model, initialValues);\n  vtkPoints(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPoints');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPoints$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkPoints$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkDataArray from './DataArray.js';\nimport vtkScalarsToColors$2 from './ScalarsToColors/Constants.js';\nimport Constants from '../../Rendering/Core/Mapper/Constants.js';\n\nconst {\n  ScalarMappingTarget,\n  VectorMode\n} = vtkScalarsToColors$2;\nconst {\n  VtkDataTypes\n} = vtkDataArray;\nconst {\n  ColorMode\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// Add module-level functions or api that you want to expose statically via\n// the next section...\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nfunction intColorToUChar(c) {\n  return c;\n}\nfunction floatColorToUChar(c) {\n  return Math.floor(c * 255.0 + 0.5);\n}\n\n// ----------------------------------------------------------------------------\n// vtkScalarsToColors methods\n// ----------------------------------------------------------------------------\n\nfunction vtkScalarsToColors(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarsToColors');\n  publicAPI.setVectorModeToMagnitude = () => publicAPI.setVectorMode(VectorMode.MAGNITUDE);\n  publicAPI.setVectorModeToComponent = () => publicAPI.setVectorMode(VectorMode.COMPONENT);\n  publicAPI.setVectorModeToRGBColors = () => publicAPI.setVectorMode(VectorMode.RGBCOLORS);\n  publicAPI.build = () => {};\n  publicAPI.isOpaque = () => true;\n\n  //----------------------------------------------------------------------------\n  publicAPI.setAnnotations = (values, annotations) => {\n    if (values && !annotations || !values && annotations) {\n      return;\n    }\n    if (values && annotations && values.length !== annotations.length) {\n      vtkErrorMacro('Values and annotations do not have the same number of tuples so ignoring');\n      return;\n    }\n    model.annotationArray = [];\n    if (annotations && values) {\n      const num = annotations.length;\n      for (let i = 0; i < num; i++) {\n        model.annotationArray.push({\n          value: values[i],\n          annotation: String(annotations[i])\n        });\n      }\n    }\n    publicAPI.updateAnnotatedValueMap();\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setAnnotation = (value, annotation) => {\n    let i = publicAPI.checkForAnnotatedValue(value);\n    let modified = false;\n    if (i >= 0) {\n      if (model.annotationArray[i].annotation !== annotation) {\n        model.annotationArray[i].annotation = annotation;\n        modified = true;\n      }\n    } else {\n      model.annotationArray.push({\n        value,\n        annotation\n      });\n      i = model.annotationArray.length - 1;\n      modified = true;\n    }\n    if (modified) {\n      publicAPI.updateAnnotatedValueMap();\n      publicAPI.modified();\n    }\n    return i;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getNumberOfAnnotatedValues = () => model.annotationArray.length;\n\n  //----------------------------------------------------------------------------\n  publicAPI.getAnnotatedValue = idx => {\n    if (idx < 0 || idx >= model.annotationArray.length) {\n      return null;\n    }\n    return model.annotationArray[idx].value;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getAnnotation = idx => {\n    if (model.annotationArray[idx] === undefined) {\n      return null;\n    }\n    return model.annotationArray[idx].annotation;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getAnnotatedValueIndex = val => model.annotationArray.length ? publicAPI.checkForAnnotatedValue(val) : -1;\n\n  //----------------------------------------------------------------------------\n  publicAPI.removeAnnotation = value => {\n    const i = publicAPI.checkForAnnotatedValue(value);\n    const needToRemove = i >= 0;\n    if (needToRemove) {\n      model.annotationArray.splice(i, 1);\n      publicAPI.updateAnnotatedValueMap();\n      publicAPI.modified();\n    }\n    return needToRemove;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.resetAnnotations = () => {\n    model.annotationArray = [];\n    model.annotatedValueMap = [];\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getAnnotationColor = (val, rgba) => {\n    if (model.indexedLookup) {\n      const i = publicAPI.getAnnotatedValueIndex(val);\n      publicAPI.getIndexedColor(i, rgba);\n    } else {\n      publicAPI.getColor(parseFloat(val), rgba);\n      rgba[3] = 1.0;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.checkForAnnotatedValue = value => publicAPI.getAnnotatedValueIndexInternal(value);\n\n  //----------------------------------------------------------------------------\n  // An unsafe version of vtkScalarsToColors::CheckForAnnotatedValue for\n  // internal use (no pointer checks performed)\n  publicAPI.getAnnotatedValueIndexInternal = value => {\n    if (model.annotatedValueMap[value] !== undefined) {\n      const na = model.annotationArray.length;\n      return model.annotatedValueMap[value] % na;\n    }\n    // Treat as a NaN\n    return -1;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getIndexedColor = (val, rgba) => {\n    rgba[0] = 0.0;\n    rgba[1] = 0.0;\n    rgba[2] = 0.0;\n    rgba[3] = 0.0;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateAnnotatedValueMap = () => {\n    model.annotatedValueMap = [];\n    const na = model.annotationArray.length;\n    for (let i = 0; i < na; i++) {\n      model.annotatedValueMap[model.annotationArray[i].value] = i;\n    }\n  };\n\n  // Description:\n  // Internal methods that map a data array into a 4-component,\n  // unsigned char RGBA array. The color mode determines the behavior\n  // of mapping. If ColorMode.DEFAULT is set, then unsigned char\n  // data arrays are treated as colors (and converted to RGBA if\n  // necessary); If ColorMode.DIRECT_SCALARS is set, then all arrays\n  // are treated as colors (integer types are clamped in the range 0-255,\n  // floating point arrays are clamped in the range 0.0-1.0. Note 'char' does\n  // not have enough values to represent a color so mapping this type is\n  // considered an error);\n  // otherwise, the data is mapped through this instance\n  // of ScalarsToColors. The component argument is used for data\n  // arrays with more than one component; it indicates which component\n  // to use to do the blending.  When the component argument is -1,\n  // then the this object uses its own selected technique to change a\n  // vector into a scalar to map.\n  publicAPI.mapScalars = (scalars, colorMode, componentIn) => {\n    const numberOfComponents = scalars.getNumberOfComponents();\n    let newColors = null;\n\n    // map scalars through lookup table only if needed\n    if (colorMode === ColorMode.DEFAULT && (scalars.getDataType() === VtkDataTypes.UNSIGNED_CHAR || scalars.getDataType() === VtkDataTypes.UNSIGNED_CHAR_CLAMPED) || colorMode === ColorMode.DIRECT_SCALARS && scalars) {\n      newColors = publicAPI.convertToRGBA(scalars, numberOfComponents, scalars.getNumberOfTuples());\n    } else {\n      const newscalars = {\n        type: 'vtkDataArray',\n        name: 'temp',\n        numberOfComponents: 4,\n        dataType: VtkDataTypes.UNSIGNED_CHAR\n      };\n      const s = macro.newTypedArray(newscalars.dataType, 4 * scalars.getNumberOfTuples());\n      newscalars.values = s;\n      newscalars.size = s.length;\n      newColors = vtkDataArray.newInstance(newscalars);\n      let component = componentIn;\n\n      // If mapper did not specify a component, use the VectorMode\n      if (component < 0 && numberOfComponents > 1) {\n        publicAPI.mapVectorsThroughTable(scalars, newColors, ScalarMappingTarget.RGBA, -1, -1);\n      } else {\n        if (component < 0) {\n          component = 0;\n        }\n        if (component >= numberOfComponents) {\n          component = numberOfComponents - 1;\n        }\n\n        // Map the scalars to colors\n        publicAPI.mapScalarsThroughTable(scalars, newColors, ScalarMappingTarget.RGBA, component);\n      }\n    }\n    return newColors;\n  };\n  publicAPI.mapVectorsToMagnitude = (input, output, compsToUse) => {\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    for (let i = 0; i < length; i++) {\n      let sum = 0.0;\n      for (let j = 0; j < compsToUse; j++) {\n        sum += inputV[i * inIncr + j] * inputV[i * inIncr + j];\n      }\n      outputV[i] = Math.sqrt(sum);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // Map a set of vector values through the table\n  publicAPI.mapVectorsThroughTable = (input, output, outputFormat, vectorComponentIn, vectorSizeIn) => {\n    let vectorMode = publicAPI.getVectorMode();\n    let vectorSize = vectorSizeIn;\n    let vectorComponent = vectorComponentIn;\n    const inComponents = input.getNumberOfComponents();\n    if (vectorMode === VectorMode.COMPONENT) {\n      // make sure vectorComponent is within allowed range\n      if (vectorComponent === -1) {\n        // if set to -1, use default value provided by table\n        vectorComponent = publicAPI.getVectorComponent();\n      }\n      if (vectorComponent < 0) {\n        vectorComponent = 0;\n      }\n      if (vectorComponent >= inComponents) {\n        vectorComponent = inComponents - 1;\n      }\n    } else {\n      // make sure vectorSize is within allowed range\n      if (vectorSize === -1) {\n        // if set to -1, use default value provided by table\n        vectorSize = publicAPI.getVectorSize();\n      }\n      if (vectorSize <= 0) {\n        vectorComponent = 0;\n        vectorSize = inComponents;\n      } else {\n        if (vectorComponent < 0) {\n          vectorComponent = 0;\n        }\n        if (vectorComponent >= inComponents) {\n          vectorComponent = inComponents - 1;\n        }\n        if (vectorComponent + vectorSize > inComponents) {\n          vectorSize = inComponents - vectorComponent;\n        }\n      }\n      if (vectorMode === VectorMode.MAGNITUDE && (inComponents === 1 || vectorSize === 1)) {\n        vectorMode = VectorMode.COMPONENT;\n      }\n    }\n\n    // increment input pointer to the first component to map\n    let inputOffset = 0;\n    if (vectorComponent > 0) {\n      inputOffset = vectorComponent;\n    }\n\n    // map according to the current vector mode\n    switch (vectorMode) {\n      case VectorMode.COMPONENT:\n        {\n          publicAPI.mapScalarsThroughTable(input, output, outputFormat, inputOffset);\n          break;\n        }\n      case VectorMode.RGBCOLORS:\n        {\n          // publicAPI.mapColorsToColors(\n          //   input, output, inComponents, vectorSize,\n          //   outputFormat);\n          break;\n        }\n\n      // MAGNITUDE is considered default\n      case VectorMode.MAGNITUDE:\n      default:\n        {\n          const magValues = vtkDataArray.newInstance({\n            numberOfComponents: 1,\n            values: new Float32Array(input.getNumberOfTuples())\n          });\n          publicAPI.mapVectorsToMagnitude(input, magValues, vectorSize);\n          publicAPI.mapScalarsThroughTable(magValues, output, outputFormat, 0);\n          break;\n        }\n    }\n  };\n  publicAPI.luminanceToRGBA = (newColors, colors, alpha, convtFun) => {\n    const a = convtFun(alpha);\n    const values = colors.getData();\n    const newValues = newColors.getData();\n    const size = values.length;\n    const component = 0;\n    const tuple = 1;\n    let count = 0;\n    for (let i = component; i < size; i += tuple) {\n      const l = convtFun(values[i]);\n      newValues[count * 4] = l;\n      newValues[count * 4 + 1] = l;\n      newValues[count * 4 + 2] = l;\n      newValues[count * 4 + 3] = a;\n      count++;\n    }\n  };\n  publicAPI.luminanceAlphaToRGBA = (newColors, colors, alpha, convtFun) => {\n    const values = colors.getData();\n    const newValues = newColors.getData();\n    const size = values.length;\n    const component = 0;\n    const tuple = 2;\n    let count = 0;\n    for (let i = component; i < size; i += tuple) {\n      const l = convtFun(values[i]);\n      newValues[count] = l;\n      newValues[count + 1] = l;\n      newValues[count + 2] = l;\n      newValues[count + 3] = convtFun(values[i + 1]) * alpha;\n      count += 4;\n    }\n  };\n  publicAPI.rGBToRGBA = (newColors, colors, alpha, convtFun) => {\n    const a = floatColorToUChar(alpha);\n    const values = colors.getData();\n    const newValues = newColors.getData();\n    const size = values.length;\n    const component = 0;\n    const tuple = 3;\n    let count = 0;\n    for (let i = component; i < size; i += tuple) {\n      newValues[count * 4] = convtFun(values[i]);\n      newValues[count * 4 + 1] = convtFun(values[i + 1]);\n      newValues[count * 4 + 2] = convtFun(values[i + 2]);\n      newValues[count * 4 + 3] = a;\n      count++;\n    }\n  };\n  publicAPI.rGBAToRGBA = (newColors, colors, alpha, convtFun) => {\n    const values = colors.getData();\n    const newValues = newColors.getData();\n    const size = values.length;\n    const component = 0;\n    const tuple = 4;\n    let count = 0;\n    for (let i = component; i < size; i += tuple) {\n      newValues[count * 4] = convtFun(values[i]);\n      newValues[count * 4 + 1] = convtFun(values[i + 1]);\n      newValues[count * 4 + 2] = convtFun(values[i + 2]);\n      newValues[count * 4 + 3] = convtFun(values[i + 3]) * alpha;\n      count++;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.convertToRGBA = (colors, numComp, numTuples) => {\n    let {\n      alpha\n    } = model;\n    if (numComp === 4 && alpha >= 1.0 && colors.getDataType() === VtkDataTypes.UNSIGNED_CHAR) {\n      return colors;\n    }\n    const newColors = vtkDataArray.newInstance({\n      numberOfComponents: 4,\n      empty: true,\n      size: 4 * numTuples,\n      dataType: VtkDataTypes.UNSIGNED_CHAR\n    });\n    if (numTuples <= 0) {\n      return newColors;\n    }\n    alpha = alpha > 0 ? alpha : 0;\n    alpha = alpha < 1 ? alpha : 1;\n    let convtFun = intColorToUChar;\n    if (colors.getDataType() === VtkDataTypes.FLOAT || colors.getDataType() === VtkDataTypes.DOUBLE) {\n      convtFun = floatColorToUChar;\n    }\n    switch (numComp) {\n      case 1:\n        publicAPI.luminanceToRGBA(newColors, colors, alpha, convtFun);\n        break;\n      case 2:\n        publicAPI.luminanceAlphaToRGBA(newColors, colors, convtFun);\n        break;\n      case 3:\n        publicAPI.rGBToRGBA(newColors, colors, alpha, convtFun);\n        break;\n      case 4:\n        publicAPI.rGBAToRGBA(newColors, colors, alpha, convtFun);\n        break;\n      default:\n        vtkErrorMacro('Cannot convert colors');\n        return null;\n    }\n    return newColors;\n  };\n  publicAPI.usingLogScale = () => false;\n  publicAPI.getNumberOfAvailableColors = () => 256 * 256 * 256;\n  publicAPI.setRange = (min, max) => publicAPI.setMappingRange(min, max);\n  publicAPI.getRange = () => publicAPI.getMappingRange();\n  publicAPI.areScalarsOpaque = (scalars, colorMode, componentIn) => {\n    if (!scalars) {\n      return publicAPI.isOpaque();\n    }\n    const numberOfComponents = scalars.getNumberOfComponents();\n\n    // map scalars through lookup table only if needed\n    if (colorMode === ColorMode.DEFAULT && scalars.getDataType() === VtkDataTypes.UNSIGNED_CHAR || colorMode === ColorMode.DIRECT_SCALARS) {\n      // we will be using the scalars directly, so look at the number of\n      // components and the range\n      if (numberOfComponents === 3 || numberOfComponents === 1) {\n        return model.alpha >= 1.0;\n      }\n      // otherwise look at the range of the alpha channel\n      const range = scalars.getRange(numberOfComponents - 1);\n      return range[0] === 255;\n    }\n    return true;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  alpha: 1.0,\n  vectorComponent: 0,\n  vectorSize: -1,\n  vectorMode: VectorMode.COMPONENT,\n  mappingRange: null,\n  annotationArray: null,\n  annotatedValueMap: null,\n  indexedLookup: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  model.mappingRange = [0, 255];\n  model.annotationArray = [];\n  model.annotatedValueMap = [];\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['vectorSize', 'vectorComponent', 'vectorMode', 'alpha', 'indexedLookup']);\n\n  // Create set macros for array (needs to know size)\n  macro.setArray(publicAPI, model, ['mappingRange'], 2);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['mappingRange']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkScalarsToColors(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkScalarsToColors');\n\n// ----------------------------------------------------------------------------\n\nvar vtkScalarsToColors$1 = {\n  newInstance,\n  extend,\n  ...vtkScalarsToColors$2\n};\n\nexport { vtkScalarsToColors$1 as default, extend, newInstance };\n","const VectorMode = {\n  MAGNITUDE: 0,\n  COMPONENT: 1,\n  RGBCOLORS: 2\n};\nconst ScalarMappingTarget = {\n  LUMINANCE: 1,\n  LUMINANCE_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nvar vtkScalarsToColors = {\n  VectorMode,\n  ScalarMappingTarget\n};\n\nexport { ScalarMappingTarget, VectorMode, vtkScalarsToColors as default };\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkStringArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkStringArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkStringArray');\n\n  // Description:\n  // Return the data component at the location specified by tupleIdx and\n  // compIdx.\n  publicAPI.getComponent = function (tupleIdx) {\n    let compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return model.values[tupleIdx * model.numberOfComponents + compIdx];\n  };\n\n  // Description:\n  // Set the data component at the location specified by tupleIdx and compIdx\n  // to value.\n  // Note that i is less than NumberOfTuples and j is less than\n  //  NumberOfComponents. Make sure enough memory has been allocated\n  // (use SetNumberOfTuples() and SetNumberOfComponents()).\n  publicAPI.setComponent = (tupleIdx, compIdx, value) => {\n    if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {\n      model.values[tupleIdx * model.numberOfComponents + compIdx] = value;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.getData = () => model.values;\n  publicAPI.getTuple = function (idx) {\n    let tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const numberOfComponents = model.numberOfComponents || 1;\n    if (tupleToFill.length) {\n      tupleToFill.length = numberOfComponents;\n    }\n    const offset = idx * numberOfComponents;\n    for (let i = 0; i < numberOfComponents; i++) {\n      tupleToFill[i] = model.values[offset + i];\n    }\n    return tupleToFill;\n  };\n  publicAPI.getTupleLocation = function () {\n    let idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return idx * model.numberOfComponents;\n  };\n  publicAPI.getNumberOfComponents = () => model.numberOfComponents;\n  publicAPI.getNumberOfValues = () => model.values.length;\n  publicAPI.getNumberOfTuples = () => model.values.length / model.numberOfComponents;\n  publicAPI.getDataType = () => model.dataType;\n  /* eslint-disable no-use-before-define */\n  publicAPI.newClone = () => newInstance({\n    name: model.name,\n    numberOfComponents: model.numberOfComponents,\n    empty: true\n  });\n  /* eslint-enable no-use-before-define */\n\n  publicAPI.getName = () => {\n    if (!model.name) {\n      publicAPI.setName(`vtkStringArray${publicAPI.getMTime()}`);\n    }\n    return model.name;\n  };\n  publicAPI.setData = (array, numberOfComponents) => {\n    model.values = array;\n    model.size = array.length;\n    if (numberOfComponents) {\n      model.numberOfComponents = numberOfComponents;\n    }\n    if (model.size % model.numberOfComponents !== 0) {\n      model.numberOfComponents = 1;\n    }\n    publicAPI.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  name: '',\n  numberOfComponents: 1,\n  size: 0,\n  // values: null,\n  dataType: 'string'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  if (!model.empty && !model.values && !model.size) {\n    throw new TypeError('Cannot create vtkStringArray object without: size > 0, values');\n  }\n  if (!model.values) {\n    model.values = [];\n  } else if (Array.isArray(model.values)) {\n    model.values = [...model.values];\n  }\n  if (model.values) {\n    model.size = model.values.length;\n  }\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.set(publicAPI, model, ['name']);\n\n  // Object specific methods\n  vtkStringArray(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkStringArray');\n\n// ----------------------------------------------------------------------------\n\nvar vtkStringArray$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkStringArray$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { u as uninitializeBounds } from '../Core/Math/index.js';\nimport vtkPoints from '../Core/Points.js';\n\n// ----------------------------------------------------------------------------\n// vtkCell methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCell(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCell');\n  publicAPI.initialize = function (points) {\n    let pointIdsList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!pointIdsList) {\n      model.points = points;\n      model.pointsIds = new Array(points.getNumberOfPoints());\n      for (let i = points.getNumberOfPoints() - 1; i >= 0; --i) {\n        model.pointsIds[i] = i;\n      }\n    } else {\n      model.pointsIds = pointIdsList;\n      let triangleData = model.points.getData();\n      if (triangleData.length !== 3 * model.pointsIds.length) {\n        triangleData = macro.newTypedArray(points.getDataType(), 3 * model.pointsIds.length);\n      }\n      const pointsData = points.getData();\n      model.pointsIds.forEach((pointId, index) => {\n        // const start = 3 * pointId;\n        // pointsData.set(p.subarray(start, start + 3), 3 * index);\n        let pointOffset = 3 * pointId;\n        let trianglePointOffset = 3 * index;\n        triangleData[trianglePointOffset] = pointsData[pointOffset];\n        triangleData[++trianglePointOffset] = pointsData[++pointOffset];\n        triangleData[++trianglePointOffset] = pointsData[++pointOffset];\n      });\n      model.points.setData(triangleData);\n    }\n  };\n  publicAPI.getBounds = () => {\n    const nbPoints = model.points.getNumberOfPoints();\n    const x = [];\n    if (nbPoints) {\n      model.points.getPoint(0, x);\n      model.bounds[0] = x[0];\n      model.bounds[1] = x[0];\n      model.bounds[2] = x[1];\n      model.bounds[3] = x[1];\n      model.bounds[4] = x[2];\n      model.bounds[5] = x[2];\n      for (let i = 1; i < nbPoints; i++) {\n        model.points.getPoint(i, x);\n        model.bounds[0] = x[0] < model.bounds[0] ? x[0] : model.bounds[0];\n        model.bounds[1] = x[0] > model.bounds[1] ? x[0] : model.bounds[1];\n        model.bounds[2] = x[1] < model.bounds[2] ? x[1] : model.bounds[2];\n        model.bounds[3] = x[1] > model.bounds[3] ? x[1] : model.bounds[3];\n        model.bounds[4] = x[2] < model.bounds[4] ? x[2] : model.bounds[4];\n        model.bounds[5] = x[2] > model.bounds[5] ? x[2] : model.bounds[5];\n      }\n    } else {\n      uninitializeBounds(model.bounds);\n    }\n    return model.bounds;\n  };\n  publicAPI.getLength2 = () => {\n    publicAPI.getBounds();\n    let length = 0.0;\n    let diff = 0;\n    for (let i = 0; i < 3; i++) {\n      diff = model.bounds[2 * i + 1] - model.bounds[2 * i];\n      length += diff * diff;\n    }\n    return length;\n  };\n  publicAPI.getParametricDistance = pcoords => {\n    let pDist;\n    let pDistMax = 0.0;\n    for (let i = 0; i < 3; i++) {\n      if (pcoords[i] < 0.0) {\n        pDist = -pcoords[i];\n      } else if (pcoords[i] > 1.0) {\n        pDist = pcoords[i] - 1.0;\n      } else {\n        // inside the cell in the parametric direction\n        pDist = 0.0;\n      }\n      if (pDist > pDistMax) {\n        pDistMax = pDist;\n      }\n    }\n    return pDistMax;\n  };\n  publicAPI.getNumberOfPoints = () => model.points.getNumberOfPoints();\n  publicAPI.deepCopy = cell => {\n    cell.initialize(model.points, model.pointsIds);\n  };\n  publicAPI.getCellDimension = () => {}; // virtual\n  publicAPI.intersectWithLine = (p1, p2, tol, t, x, pcoords, subId) => {}; // virtual\n  publicAPI.evaluatePosition = (x, closestPoint, subId, pcoords, dist2, weights) => {\n    macro.vtkErrorMacro('vtkCell.evaluatePosition is not implemented.');\n  }; // virtual\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  bounds: [-1, -1, -1, -1, -1, -1],\n  pointsIds: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  if (!model.points) {\n    model.points = vtkPoints.newInstance();\n  }\n  macro.get(publicAPI, model, ['points', 'pointsIds']);\n  vtkCell(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCell');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCell$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkCell$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkCell from './Cell.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\nconst InitLink = {\n  ncells: 0,\n  cells: null\n};\nfunction resize(model, sz) {\n  let newSize = sz;\n  if (sz >= model.array.length) {\n    newSize += model.array.length;\n  }\n  while (newSize > model.array.length) model.array.push({\n    ncells: 0,\n    cells: null\n  });\n  model.array.length = newSize;\n}\n\n// ----------------------------------------------------------------------------\n// vtkCellLinks methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCellLinks(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCellLinks');\n\n  /**\n   * Build the link list array. All subclasses of vtkAbstractCellLinks\n   * must support this method.\n   */\n  publicAPI.buildLinks = data => {\n    const numPts = data.getPoints().getNumberOfPoints();\n    const numCells = data.getNumberOfCells();\n\n    // fill out lists with number of references to cells\n    const linkLoc = new Uint32Array(numPts);\n\n    // Use fast path if polydata\n    if (data.isA('vtkPolyData')) {\n      // traverse data to determine number of uses of each point\n      for (let cellId = 0; cellId < numCells; ++cellId) {\n        const {\n          cellPointIds\n        } = data.getCellPoints(cellId);\n        cellPointIds.forEach(cellPointId => {\n          publicAPI.incrementLinkCount(cellPointId);\n        });\n      }\n\n      // now allocate storage for the links\n      publicAPI.allocateLinks(numPts);\n      model.maxId = numPts - 1;\n      for (let cellId = 0; cellId < numCells; ++cellId) {\n        const {\n          cellPointIds\n        } = data.getCellPoints(cellId);\n        cellPointIds.forEach(cellPointId => {\n          publicAPI.insertCellReference(cellPointId, linkLoc[cellPointId]++, cellId);\n        });\n      }\n    } // any other type of dataset\n    else {\n      // traverse data to determine number of uses of each point\n      for (let cellId = 0; cellId < numCells; cellId++) {\n        // TODO: Currently not supported: const cell = data.getCell(cellId);\n        const cell = vtkCell.newInstance();\n        cell.getPointsIds().forEach(cellPointId => {\n          publicAPI.incrementLinkCount(cellPointId);\n        });\n      }\n\n      // now allocate storage for the links\n      publicAPI.allocateLinks(numPts);\n      model.maxId = numPts - 1;\n      for (let cellId = 0; cellId < numCells; ++cellId) {\n        // TODO: Currently not supported: const cell = data.getCell(cellId);\n        const cell = vtkCell.newInstance();\n        cell.getPointsIds().forEach(cellPointId => {\n          publicAPI.insertCellReference(cellPointId, linkLoc[cellPointId]++, cellId);\n        });\n      }\n    } // end else\n  };\n\n  /**\n   * Build the link list array with a provided connectivity array.\n   */\n  // publicAPI.buildLinks = (data, connectivity) => {};\n\n  /**\n   * Allocate the specified number of links (i.e., number of points) that\n   * will be built.\n   */\n  publicAPI.allocate = function (numLinks) {\n    let ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    model.array = Array(numLinks).fill().map(() => ({\n      ncells: 0,\n      cells: null\n    }));\n    model.extend = ext;\n    model.maxId = -1;\n  };\n  publicAPI.initialize = () => {\n    model.array = null;\n  };\n\n  /**\n   * Get a link structure given a point id.\n   */\n  publicAPI.getLink = ptId => model.array[ptId];\n\n  /**\n   * Get the number of cells using the point specified by ptId.\n   */\n  publicAPI.getNcells = ptId => model.array[ptId].ncells;\n\n  /**\n   * Return a list of cell ids using the point.\n   */\n  publicAPI.getCells = ptId => model.array[ptId].cells;\n\n  /**\n   * Insert a new point into the cell-links data structure. The size parameter\n   * is the initial size of the list.\n   */\n  publicAPI.insertNextPoint = numLinks => {\n    model.array.push({\n      ncells: numLinks,\n      cells: Array(numLinks)\n    });\n    ++model.maxId;\n  };\n\n  /**\n   * Insert a cell id into the list of cells (at the end) using the cell id\n   * provided. (Make sure to extend the link list (if necessary) using the\n   * method resizeCellList().)\n   */\n  publicAPI.insertNextCellReference = (ptId, cellId) => {\n    model.array[ptId].cells[model.array[ptId].ncells++] = cellId;\n  };\n\n  /**\n   * Delete point (and storage) by destroying links to using cells.\n   */\n  publicAPI.deletePoint = ptId => {\n    model.array[ptId].ncells = 0;\n    model.array[ptId].cells = null;\n  };\n\n  /**\n   * Delete the reference to the cell (cellId) from the point (ptId). This\n   * removes the reference to the cellId from the cell list, but does not\n   * resize the list (recover memory with resizeCellList(), if necessary).\n   */\n  publicAPI.removeCellReference = (cellId, ptId) => {\n    model.array[ptId].cells = model.array[ptId].cells.filter(cell => cell !== cellId);\n    model.array[ptId].ncells = model.array[ptId].cells.length;\n  };\n\n  /**\n   * Add the reference to the cell (cellId) from the point (ptId). This\n   * adds a reference to the cellId from the cell list, but does not resize\n   * the list (extend memory with resizeCellList(), if necessary).\n   */\n  publicAPI.addCellReference = (cellId, ptId) => {\n    model.array[ptId].cells[model.array[ptId].ncells++] = cellId;\n  };\n\n  /**\n   * Change the length of a point's link list (i.e., list of cells using a\n   * point) by the size specified.\n   */\n  publicAPI.resizeCellList = (ptId, size) => {\n    model.array[ptId].cells.length = size;\n  };\n\n  /**\n   * Reclaim any unused memory.\n   */\n  publicAPI.squeeze = () => {\n    resize(model, model.maxId + 1);\n  };\n\n  /**\n   * Reset to a state of no entries without freeing the memory.\n   */\n  publicAPI.reset = () => {\n    model.maxId = -1;\n  };\n\n  /**\n   * Standard DeepCopy method.  Since this object contains no reference\n   * to other objects, there is no ShallowCopy.\n   */\n  publicAPI.deepCopy = src => {\n    model.array = [...src.array];\n    model.extend = src.extend;\n    model.maxId = src.maxId;\n  };\n\n  /**\n   * Increment the count of the number of cells using the point.\n   */\n  publicAPI.incrementLinkCount = ptId => {\n    ++model.array[ptId].ncells;\n  };\n  publicAPI.allocateLinks = n => {\n    for (let i = 0; i < n; ++i) {\n      model.array[i].cells = new Array(model.array[i].ncells);\n    }\n  };\n\n  /**\n   * Insert a cell id into the list of cells using the point.\n   */\n  publicAPI.insertCellReference = (ptId, pos, cellId) => {\n    model.array[ptId].cells[pos] = cellId;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  array: null,\n  // pointer to data\n  maxId: 0,\n  // maximum index inserted thus far\n  extend: 0 // grow array by this point\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkCellLinks(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCellLinks');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCellLinks$1 = {\n  newInstance,\n  extend\n};\n\nexport { InitLink, vtkCellLinks$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { CellTypesStrings, CellType } from './CellTypes/Constants.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n/**\n * Given an int (as defined in vtkCellType.h) identifier for a class\n * return it's classname.\n */\nfunction getClassNameFromTypeId(typeId) {\n  return typeId < CellTypesStrings.length ? CellTypesStrings[typeId] : 'UnknownClass';\n}\n\n/**\n * Given a data object classname, return it's int identified (as\n * defined in vtkCellType.h)\n */\nfunction getTypeIdFromClassName(cellTypeString) {\n  return CellTypesStrings.findIndex(cellTypeString);\n}\n\n/**\n * This convenience method is a fast check to determine if a cell type\n * represents a linear or nonlinear cell.  This is generally much more\n * efficient than getting the appropriate vtkCell and checking its IsLinear\n * method.\n */\nfunction isLinear(type) {\n  return type < CellType.VTK_QUADRATIC_EDGE || type === CellType.VTK_CONVEX_POINT_SET || type === CellType.VTK_POLYHEDRON;\n}\nfunction hasSubCells(cellType) {\n  return cellType === CellType.VTK_TRIANGLE_STRIP || cellType === CellType.VTK_POLY_LINE || cellType === CellType.VTK_POLY_VERTEX;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  getClassNameFromTypeId,\n  getTypeIdFromClassName,\n  isLinear,\n  hasSubCells\n};\n\n// ----------------------------------------------------------------------------\n// vtkCellTypes methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCellTypes(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCellTypes');\n\n  /**\n   * Allocate memory for this array. Delete old storage only if necessary.\n   */\n  publicAPI.allocate = function () {\n    let sz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 512;\n    let ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    model.size = sz > 0 ? sz : 1;\n    model.extend = ext > 0 ? ext : 1;\n    model.maxId = -1;\n    model.typeArray = new Uint8Array(sz);\n    model.locationArray = new Uint32Array(sz);\n  };\n\n  /**\n   * Add a cell at specified id.\n   */\n  publicAPI.insertCell = (cellId, type, loc) => {\n    model.typeArray[cellId] = type;\n    model.locationArray[cellId] = loc;\n    if (cellId > model.maxId) {\n      model.maxId = cellId;\n    }\n  };\n\n  /**\n   * Add a cell to the object in the next available slot.\n   */\n  publicAPI.insertNextCell = (type, loc) => {\n    publicAPI.insertCell(++model.maxId, type, loc);\n    return model.maxId;\n  };\n\n  /**\n   * Specify a group of cell types. This version is provided to maintain\n   * backwards compatibility and does a copy of the cellLocations\n   */\n  publicAPI.setCellTypes = (ncells, cellTypes, cellLocations) => {\n    model.size = ncells;\n    model.typeArray = cellTypes;\n    model.locationArray = cellLocations;\n    model.maxId = ncells - 1;\n  };\n\n  /**\n   * Return the location of the cell in the associated vtkCellArray.\n   */\n  publicAPI.getCellLocation = cellId => model.locationArray[cellId];\n\n  /**\n   * Delete cell by setting to nullptr cell type.\n   */\n  publicAPI.deleteCell = cellId => {\n    model.typeArray[cellId] = CellType.VTK_EMPTY_CELL;\n  };\n\n  /**\n   * Return the number of types in the list.\n   */\n  publicAPI.getNumberOfTypes = () => model.maxId + 1;\n\n  /**\n   * Return true if type specified is contained in list; false otherwise.\n   */\n  publicAPI.isType = type => {\n    const numTypes = publicAPI.getNumberOfTypes();\n    for (let i = 0; i < numTypes; ++i) {\n      if (type === publicAPI.getCellType(i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Add the type specified to the end of the list. Range checking is performed.\n   */\n  publicAPI.insertNextType = type => publicAPI.insertNextCell(type, -1);\n\n  /**\n   * Return the type of cell.\n   */\n  publicAPI.getCellType = cellId => model.typeArray[cellId];\n\n  /**\n   * Reclaim any extra memory.\n   */\n  // TODO: publicAPI.squeeze = () =>  {};\n\n  /**\n   * Initialize object without releasing memory.\n   */\n  publicAPI.reset = () => {\n    model.maxId = -1;\n  };\n\n  /**\n   * Standard DeepCopy method.  Since this object contains no reference\n   * to other objects, there is no ShallowCopy.\n   */\n  publicAPI.deepCopy = src => {\n    publicAPI.allocate(src.getSize(), src.getExtend());\n    model.typeArray.set(src.getTypeArray());\n    model.locationArray.set(src.getLocationArray());\n    model.maxId = src.getMaxId();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // typeArray: null, // pointer to types array\n  // locationArray: null;   // pointer to array of offsets\n  size: 0,\n  // allocated size of data\n  maxId: -1,\n  // maximum index inserted thus far\n  extend: 1000 // grow array by this point\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['size', 'maxId', 'extend']);\n  macro.getArray(publicAPI, model, ['typeArray', 'locationArray']);\n  vtkCellTypes(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCellTypes');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCellTypes$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkCellTypes$1 as default, extend, newInstance };\n","const CellType = {\n  // Linear cells\n  VTK_EMPTY_CELL: 0,\n  VTK_VERTEX: 1,\n  VTK_POLY_VERTEX: 2,\n  VTK_LINE: 3,\n  VTK_POLY_LINE: 4,\n  VTK_TRIANGLE: 5,\n  VTK_TRIANGLE_STRIP: 6,\n  VTK_POLYGON: 7,\n  VTK_PIXEL: 8,\n  VTK_QUAD: 9,\n  VTK_TETRA: 10,\n  VTK_VOXEL: 11,\n  VTK_HEXAHEDRON: 12,\n  VTK_WEDGE: 13,\n  VTK_PYRAMID: 14,\n  VTK_PENTAGONAL_PRISM: 15,\n  VTK_HEXAGONAL_PRISM: 16,\n  // Quadratic, isoparametric cells\n  VTK_QUADRATIC_EDGE: 21,\n  VTK_QUADRATIC_TRIANGLE: 22,\n  VTK_QUADRATIC_QUAD: 23,\n  VTK_QUADRATIC_POLYGON: 36,\n  VTK_QUADRATIC_TETRA: 24,\n  VTK_QUADRATIC_HEXAHEDRON: 25,\n  VTK_QUADRATIC_WEDGE: 26,\n  VTK_QUADRATIC_PYRAMID: 27,\n  VTK_BIQUADRATIC_QUAD: 28,\n  VTK_TRIQUADRATIC_HEXAHEDRON: 29,\n  VTK_QUADRATIC_LINEAR_QUAD: 30,\n  VTK_QUADRATIC_LINEAR_WEDGE: 31,\n  VTK_BIQUADRATIC_QUADRATIC_WEDGE: 32,\n  VTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON: 33,\n  VTK_BIQUADRATIC_TRIANGLE: 34,\n  // Cubic, isoparametric cell\n  VTK_CUBIC_LINE: 35,\n  // Special class of cells formed by convex group of points\n  VTK_CONVEX_POINT_SET: 41,\n  // Polyhedron cell (consisting of polygonal faces)\n  VTK_POLYHEDRON: 42,\n  // Higher order cells in parametric form\n  VTK_PARAMETRIC_CURVE: 51,\n  VTK_PARAMETRIC_SURFACE: 52,\n  VTK_PARAMETRIC_TRI_SURFACE: 53,\n  VTK_PARAMETRIC_QUAD_SURFACE: 54,\n  VTK_PARAMETRIC_TETRA_REGION: 55,\n  VTK_PARAMETRIC_HEX_REGION: 56,\n  // Higher order cells\n  VTK_HIGHER_ORDER_EDGE: 60,\n  VTK_HIGHER_ORDER_TRIANGLE: 61,\n  VTK_HIGHER_ORDER_QUAD: 62,\n  VTK_HIGHER_ORDER_POLYGON: 63,\n  VTK_HIGHER_ORDER_TETRAHEDRON: 64,\n  VTK_HIGHER_ORDER_WEDGE: 65,\n  VTK_HIGHER_ORDER_PYRAMID: 66,\n  VTK_HIGHER_ORDER_HEXAHEDRON: 67,\n  // Arbitrary order Lagrange elements (formulated separated from generic higher order cells)\n  VTK_LAGRANGE_CURVE: 68,\n  VTK_LAGRANGE_TRIANGLE: 69,\n  VTK_LAGRANGE_QUADRILATERAL: 70,\n  VTK_LAGRANGE_TETRAHEDRON: 71,\n  VTK_LAGRANGE_HEXAHEDRON: 72,\n  VTK_LAGRANGE_WEDGE: 73,\n  VTK_LAGRANGE_PYRAMID: 74,\n  VTK_NUMBER_OF_CELL_TYPES: 75\n};\n\n// This list should contain the cell class names in\n// the same order as in CellType.\nconst CellTypesStrings = ['vtkEmptyCell', 'vtkVertex', 'vtkPolyVertex', 'vtkLine', 'vtkPolyLine', 'vtkTriangle', 'vtkTriangleStrip', 'vtkPolygon', 'vtkPixel', 'vtkQuad', 'vtkTetra', 'vtkVoxel', 'vtkHexahedron', 'vtkWedge', 'vtkPyramid', 'vtkPentagonalPrism', 'vtkHexagonalPrism', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkQuadraticEdge', 'vtkQuadraticTriangle', 'vtkQuadraticQuad', 'vtkQuadraticTetra', 'vtkQuadraticHexahedron', 'vtkQuadraticWedge', 'vtkQuadraticPyramid', 'vtkBiQuadraticQuad', 'vtkTriQuadraticHexahedron', 'vtkQuadraticLinearQuad', 'vtkQuadraticLinearWedge', 'vtkBiQuadraticQuadraticWedge', 'vtkBiQuadraticQuadraticHexahedron', 'vtkBiQuadraticTriangle', 'vtkCubicLine', 'vtkQuadraticPolygon', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkConvexPointSet', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkParametricCurve', 'vtkParametricSurface', 'vtkParametricTriSurface', 'vtkParametricQuadSurface', 'vtkParametricTetraRegion', 'vtkParametricHexRegion', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkHigherOrderEdge', 'vtkHigherOrderTriangle', 'vtkHigherOrderQuad', 'vtkHigherOrderPolygon', 'vtkHigherOrderTetrahedron', 'vtkHigherOrderWedge', 'vtkHigherOrderPyramid', 'vtkHigherOrderHexahedron'];\nvar Constants = {\n  CellType,\n  CellTypesStrings\n};\n\nexport { CellType, CellTypesStrings, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './Line/Constants.js';\nimport vtkCell from './Cell.js';\nimport { d as dot, e as distance2BetweenPoints, s as subtract, g as solveLinearSystem } from '../Core/Math/index.js';\nimport { quat } from 'gl-matrix';\n\nconst {\n  IntersectionState\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\nfunction distanceToLine(x, p1, p2) {\n  let closestPoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const outObj = {\n    t: Number.MIN_VALUE,\n    distance: 0\n  };\n  const p21 = [];\n  let closest;\n  // Determine appropriate vector\n  p21[0] = p2[0] - p1[0];\n  p21[1] = p2[1] - p1[1];\n  p21[2] = p2[2] - p1[2];\n\n  // Get parametric location\n  const num = p21[0] * (x[0] - p1[0]) + p21[1] * (x[1] - p1[1]) + p21[2] * (x[2] - p1[2]);\n  const denom = dot(p21, p21);\n\n  // trying to avoid an expensive fabs\n  let tolerance = 1e-5 * num;\n  if (denom !== 0.0) {\n    outObj.t = num / denom;\n  }\n  if (tolerance < 0.0) {\n    tolerance = -tolerance;\n  }\n  if (-tolerance < denom && denom < tolerance) {\n    closest = p1;\n  } else if (denom <= 0.0 || outObj.t < 0.0) {\n    // If parametric coordinate is within 0<=p<=1, then the point is closest to\n    // the line.  Otherwise, it's closest to a point at the end of the line.\n    closest = p1;\n  } else if (outObj.t > 1.0) {\n    closest = p2;\n  } else {\n    closest = p21;\n    p21[0] = p1[0] + outObj.t * p21[0];\n    p21[1] = p1[1] + outObj.t * p21[1];\n    p21[2] = p1[2] + outObj.t * p21[2];\n  }\n  if (closestPoint) {\n    closestPoint[0] = closest[0];\n    closestPoint[1] = closest[1];\n    closestPoint[2] = closest[2];\n  }\n  outObj.distance = distance2BetweenPoints(closest, x);\n  return outObj;\n}\nfunction intersection(a1, a2, b1, b2, u, v) {\n  const a21 = [];\n  const b21 = [];\n  const b1a1 = [];\n  u[0] = 0.0;\n  v[0] = 0.0;\n\n  // Determine line vectors.\n  subtract(a2, a1, a21);\n  subtract(b2, b1, b21);\n  subtract(b1, a1, b1a1);\n\n  // Compute the system (least squares) matrix.\n  const A = [dot(a21, a21), -dot(a21, b21), -dot(a21, b21), dot(b21, b21)];\n\n  // Compute the least squares system constant term.\n  const c = [];\n  c[0] = dot(a21, b1a1);\n  c[1] = -dot(b21, b1a1);\n  // Solve the system of equations\n  if (solveLinearSystem(A, c, 2) === 0) {\n    // The lines are colinear. Therefore, one of the four endpoints is the\n    // point of closest approach\n    let minDist = Number.MAX_VALUE;\n    const p = [a1, a2, b1, b2];\n    const l1 = [b1, b1, a1, a1];\n    const l2 = [b2, b2, a2, a2];\n    [v[0], v[0], u[0], u[0]];\n    [u[0], u[0], v[0], v[0]];\n    let obj;\n    for (let i = 0; i < 4; i++) {\n      obj = distanceToLine(p[i], l1[i], l2[i]);\n      if (obj.distance < minDist) {\n        minDist = obj.distance;\n        obj.t;\n      }\n    }\n    return IntersectionState.ON_LINE;\n  }\n  u[0] = c[0];\n  v[0] = c[1];\n\n  // Check parametric coordinates for intersection.\n  if (u[0] >= 0.0 && u[0] <= 1.0 && v[0] >= 0.0 && v[0] <= 1.0) {\n    return IntersectionState.YES_INTERSECTION;\n  }\n  return IntersectionState.NO_INTERSECTION;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  distanceToLine,\n  intersection\n};\n\n// ----------------------------------------------------------------------------\n// vtkLine methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLine(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLine');\n  function isBetweenPoints(t) {\n    return t >= 0.0 && t <= 1.0;\n  }\n  publicAPI.getCellDimension = () => 1;\n  publicAPI.intersectWithLine = (p1, p2, tol, x, pcoords) => {\n    const outObj = {\n      intersect: 0,\n      t: Number.MAX_VALUE,\n      subId: 0,\n      betweenPoints: null\n    };\n    pcoords[1] = 0.0;\n    pcoords[2] = 0.0;\n    const projXYZ = [];\n    const a1 = [];\n    const a2 = [];\n    model.points.getPoint(0, a1);\n    model.points.getPoint(1, a2);\n    const u = [];\n    const v = [];\n    const intersect = intersection(p1, p2, a1, a2, u, v);\n    outObj.t = u[0];\n    outObj.betweenPoints = isBetweenPoints(outObj.t);\n    pcoords[0] = v[0];\n    if (intersect === IntersectionState.YES_INTERSECTION) {\n      // make sure we are within tolerance\n      for (let i = 0; i < 3; i++) {\n        x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);\n        projXYZ[i] = p1[i] + outObj.t * (p2[i] - p1[i]);\n      }\n      if (distance2BetweenPoints(x, projXYZ) <= tol * tol) {\n        outObj.intersect = 1;\n        return outObj;\n      }\n    } else {\n      let outDistance;\n      // check to see if it lies within tolerance\n      // one of the parametric coords must be outside 0-1\n      if (outObj.t < 0.0) {\n        outDistance = distanceToLine(p1, a1, a2, x);\n        if (outDistance.distance <= tol * tol) {\n          outObj.t = 0.0;\n          outObj.intersect = 1;\n          outObj.betweenPoints = true; // Intersection is near p1\n          return outObj;\n        }\n        return outObj;\n      }\n      if (outObj.t > 1.0) {\n        outDistance = distanceToLine(p2, a1, a2, x);\n        if (outDistance.distance <= tol * tol) {\n          outObj.t = 1.0;\n          outObj.intersect = 1;\n          outObj.betweenPoints = true; // Intersection is near p2\n          return outObj;\n        }\n        return outObj;\n      }\n      if (pcoords[0] < 0.0) {\n        pcoords[0] = 0.0;\n        outDistance = distanceToLine(a1, p1, p2, x);\n        outObj.t = outDistance.t;\n        if (outDistance.distance <= tol * tol) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n        return outObj;\n      }\n      if (pcoords[0] > 1.0) {\n        pcoords[0] = 1.0;\n        outDistance = distanceToLine(a2, p1, p2, x);\n        outObj.t = outDistance.t;\n        if (outDistance.distance <= tol * tol) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n        return outObj;\n      }\n    }\n    return outObj;\n  };\n  publicAPI.evaluateLocation = (pcoords, x, weights) => {\n    const a1 = [];\n    const a2 = [];\n    model.points.getPoint(0, a1);\n    model.points.getPoint(1, a2);\n    for (let i = 0; i < 3; i++) {\n      x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);\n    }\n    weights[0] = 1.0 - pcoords[0];\n    weights[1] = pcoords[0];\n  };\n  publicAPI.evaluateOrientation = (pcoords, q, weights) => {\n    if (model.orientations) {\n      quat.slerp(q, model.orientations[0], model.orientations[1], pcoords[0]);\n      weights[0] = 1.0 - pcoords[0];\n      weights[1] = pcoords[0];\n      return true;\n    }\n    return false;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  orientations: null // an array of two quat or null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkCell.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['orientations']);\n  vtkLine(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkLine');\n\n// ----------------------------------------------------------------------------\n\nvar vtkLine$1 = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\n\nexport { STATIC, vtkLine$1 as default, extend, newInstance };\n","const IntersectionState = {\n  NO_INTERSECTION: 0,\n  YES_INTERSECTION: 1,\n  ON_LINE: 2\n};\nvar Constants = {\n  IntersectionState\n};\n\nexport { IntersectionState, Constants as default };\n","import { m as macro } from '../../macros2.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkPiecewiseFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPiecewiseFunction(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPiecewiseFunction');\n\n  // Return the number of points which specify this function\n  publicAPI.getSize = () => model.nodes.length;\n\n  // Return the type of function stored in object:\n  // Function Types:\n  //    0 : Constant        (No change in slope between end points)\n  //    1 : NonDecreasing   (Always increasing or zero slope)\n  //    2 : NonIncreasing   (Always decreasing or zero slope)\n  //    3 : Varied          (Contains both decreasing and increasing slopes)\n  //    4 : Unknown         (Error condition)\n  //\n  publicAPI.getType = () => {\n    let value;\n    let prevValue = 0.0;\n    let functionType = 0;\n    if (model.nodes.length > 0) {\n      prevValue = model.nodes[0].y;\n    }\n    for (let i = 1; i < model.nodes.length; i++) {\n      value = model.nodes[i].y;\n\n      // Do not change the function type if equal\n      if (value !== prevValue) {\n        if (value > prevValue) {\n          switch (functionType) {\n            case 0:\n            case 1:\n              // NonDecreasing\n              functionType = 1;\n              break;\n            case 2:\n            default:\n              // Varied\n              functionType = 3;\n              break;\n          }\n        } else {\n          // value < prev_value\n          switch (functionType) {\n            case 0:\n            case 2:\n              // NonIncreasing\n              functionType = 2;\n              break;\n            case 1:\n            default:\n              // Varied\n              functionType = 3;\n              break;\n          }\n        }\n      }\n      prevValue = value;\n\n      // Exit loop if we find a Varied function\n      if (functionType === 3) {\n        break;\n      }\n    }\n    switch (functionType) {\n      case 0:\n        return 'Constant';\n      case 1:\n        return 'NonDecreasing';\n      case 2:\n        return 'NonIncreasing';\n      case 3:\n      default:\n        return 'Varied';\n    }\n  };\n\n  // Since we no longer store the data in an array, we must\n  // copy out of the vector into an array. No modified check -\n  // could be added if performance is a problem\n  publicAPI.getDataPointer = () => {\n    const size = model.nodes.length;\n    model.function = null;\n    if (size > 0) {\n      model.function = [];\n      for (let i = 0; i < size; i++) {\n        model.function[2 * i] = model.nodes[i].x;\n        model.function[2 * i + 1] = model.nodes[i].y;\n      }\n    }\n    return model.function;\n  };\n\n  // Returns the first point location which starts a non-zero segment of the\n  // function. Note that the value at this point may be zero.\n  publicAPI.getFirstNonZeroValue = () => {\n    // Check if no points specified\n    if (model.nodes.length === 0) {\n      return 0;\n    }\n    let allZero = 1;\n    let x = 0.0;\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].y !== 0.0) {\n        allZero = 0;\n        break;\n      }\n    }\n\n    // If every specified point has a zero value then return\n    // a large value\n    if (allZero) {\n      x = Number.MAX_VALUE;\n    } else if (i > 0) {\n      // A point was found with a non-zero value\n      // Return the value of the point that precedes this one\n      x = model.nodes[i - 1].x;\n    } else if (model.clamping) {\n      // If this is the first point in the function, return its\n      // value is clamping is off, otherwise VTK_DOUBLE_MIN if\n      // clamping is on.\n      x = -Number.MAX_VALUE;\n    } else {\n      x = model.nodes[0].x;\n    }\n    return x;\n  };\n\n  // For a specified index value, get the node parameters\n  publicAPI.getNodeValue = (index, val) => {\n    const size = model.nodes.length;\n    if (index < 0 || index >= size) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    val[0] = model.nodes[index].x;\n    val[1] = model.nodes[index].y;\n    val[2] = model.nodes[index].midpoint;\n    val[3] = model.nodes[index].sharpness;\n    return 1;\n  };\n\n  // For a specified index value, get the node parameters\n  publicAPI.setNodeValue = (index, val) => {\n    const size = model.nodes.length;\n    if (index < 0 || index >= size) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    const oldX = model.nodes[index].x;\n    model.nodes[index].x = val[0];\n    model.nodes[index].y = val[1];\n    model.nodes[index].midpoint = val[2];\n    model.nodes[index].sharpness = val[3];\n    if (oldX !== val[0]) {\n      // The point has been moved, the order of points or the range might have\n      // been modified.\n      publicAPI.sortAndUpdateRange();\n      // No need to call Modified() here because SortAndUpdateRange() has done it\n      // already.\n    } else {\n      publicAPI.modified();\n    }\n    return 1;\n  };\n\n  // Adds a point to the function. If a duplicate point is inserted\n  // then the function value at that location is set to the new value.\n  // This is the legacy version that assumes midpoint = 0.5 and\n  // sharpness = 0.0\n  publicAPI.addPoint = (x, y) => publicAPI.addPointLong(x, y, 0.5, 0.0);\n\n  // Adds a point to the function and returns the array index of the point.\n  publicAPI.addPointLong = (x, y, midpoint, sharpness) => {\n    // Error check\n    if (midpoint < 0.0 || midpoint > 1.0) {\n      vtkErrorMacro('Midpoint outside range [0.0, 1.0]');\n      return -1;\n    }\n    if (sharpness < 0.0 || sharpness > 1.0) {\n      vtkErrorMacro('Sharpness outside range [0.0, 1.0]');\n      return -1;\n    }\n\n    // remove any node already at this X location\n    if (!model.allowDuplicateScalars) {\n      publicAPI.removePoint(x);\n    }\n\n    // Create the new node\n    const node = {\n      x,\n      y,\n      midpoint,\n      sharpness\n    };\n\n    // Add it, then sort to get everything in order\n    model.nodes.push(node);\n    publicAPI.sortAndUpdateRange();\n\n    // Now find this node so we can return the index\n    let i;\n    for (i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If we didn't find it, something went horribly wrong so\n    // return -1\n    if (i < model.nodes.length) {\n      return i;\n    }\n    return -1;\n  };\n  publicAPI.setNodes = nodes => {\n    if (model.nodes !== nodes) {\n      model.nodes = nodes;\n      publicAPI.sortAndUpdateRange();\n    }\n  };\n\n  // Sort the vector in increasing order, then fill in\n  // the Range\n  publicAPI.sortAndUpdateRange = () => {\n    model.nodes.sort((a, b) => a.x - b.x);\n    const modifiedInvoked = publicAPI.updateRange();\n    // If range is updated, Modified() has been called, don't call it again.\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateRange = () => {\n    const oldRange = model.range.slice();\n    const size = model.nodes.length;\n    if (size) {\n      model.range[0] = model.nodes[0].x;\n      model.range[1] = model.nodes[size - 1].x;\n    } else {\n      model.range[0] = 0;\n      model.range[1] = 0;\n    }\n    // If the rage is the same, then no need to call Modified()\n    if (oldRange[0] === model.range[0] && oldRange[1] === model.range[1]) {\n      return false;\n    }\n    publicAPI.modified();\n    return true;\n  };\n\n  // Removes a point from the function. If no point is found then function\n  // remains the same.\n  publicAPI.removePoint = x => {\n    // First find the node since we need to know its\n    // index as our return value\n    let i;\n    for (i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If the node doesn't exist, we return -1\n    if (i >= model.nodes.length) {\n      return -1;\n    }\n    const retVal = i;\n\n    // If the first or last point has been removed, then we update the range\n    // No need to sort here as the order of points hasn't changed.\n    let modifiedInvoked = false;\n    model.nodes.splice(i, 1);\n    if (i === 0 || i === model.nodes.length) {\n      modifiedInvoked = publicAPI.updateRange();\n    }\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n    return retVal;\n  };\n\n  // Removes all points from the function.\n  publicAPI.removeAllPoints = () => {\n    model.nodes = [];\n    publicAPI.sortAndUpdateRange();\n  };\n\n  // Add in end points of line and remove any points between them\n  // Legacy method with no way to specify midpoint and sharpness\n  publicAPI.addSegment = (x1, y1, x2, y2) => {\n    // First, find all points in this range and remove them\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= x1 && model.nodes[i].x <= x2) {\n        model.nodes.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    // Now add the points\n    publicAPI.addPoint(x1, y1, 0.5, 0.0);\n    publicAPI.addPoint(x2, y2, 0.5, 0.0);\n  };\n\n  // Return the value of the function at a position\n  publicAPI.getValue = x => {\n    const table = [];\n    publicAPI.getTable(x, x, 1, table);\n    return table[0];\n  };\n\n  // Remove all points outside the range, and make sure a point\n  // exists at each end of the range. Used as a convenience method\n  // for transfer function editors\n  publicAPI.adjustRange = range => {\n    if (range.length < 2) {\n      return 0;\n    }\n    const functionRange = publicAPI.getRange();\n\n    // Make sure we have points at each end of the range\n    if (functionRange[0] < range[0]) {\n      publicAPI.addPoint(range[0], publicAPI.getValue(range[0]));\n    } else {\n      publicAPI.addPoint(range[0], publicAPI.getValue(functionRange[0]));\n    }\n    if (functionRange[1] > range[1]) {\n      publicAPI.addPoint(range[1], publicAPI.getValue(range[1]));\n    } else {\n      publicAPI.addPoint(range[1], publicAPI.getValue(functionRange[1]));\n    }\n\n    // Remove all points out-of-range\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= range[0] && model.nodes[i].x <= range[1]) {\n        model.nodes.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    publicAPI.sortAndUpdateRange();\n    return 1;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.estimateMinNumberOfSamples = (x1, x2) => {\n    const d = publicAPI.findMinimumXDistance();\n    return Math.ceil((x2 - x1) / d);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.findMinimumXDistance = () => {\n    const size = model.nodes.length;\n    if (size < 2) {\n      return -1.0;\n    }\n    let distance = model.nodes[1].x - model.nodes[0].x;\n    for (let i = 0; i < size - 1; i++) {\n      const currentDist = model.nodes[i + 1].x - model.nodes[i].x;\n      if (currentDist < distance) {\n        distance = currentDist;\n      }\n    }\n    return distance;\n  };\n\n  // Returns a table of function values evaluated at regular intervals\n  /* eslint-disable prefer-destructuring */\n  /* eslint-disable no-continue */\n  publicAPI.getTable = function (xStart, xEnd, size, table) {\n    let stride = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let i;\n    let idx = 0;\n    const numNodes = model.nodes.length;\n\n    // Need to keep track of the last value so that\n    // we can fill in table locations past this with\n    // this value if Clamping is On.\n    let lastValue = 0.0;\n    if (numNodes !== 0) {\n      lastValue = model.nodes[numNodes - 1].y;\n    }\n    let x = 0.0;\n    let x1 = 0.0;\n    let x2 = 0.0;\n    let y1 = 0.0;\n    let y2 = 0.0;\n    let midpoint = 0.0;\n    let sharpness = 0.0;\n\n    // For each table entry\n    for (i = 0; i < size; i++) {\n      // Find our location in the table\n      const tidx = stride * i;\n\n      // Find our X location. If we are taking only 1 sample, make\n      // it halfway between start and end (usually start and end will\n      // be the same in this case)\n      if (size > 1) {\n        x = xStart + i / (size - 1.0) * (xEnd - xStart);\n      } else {\n        x = 0.5 * (xStart + xEnd);\n      }\n\n      // Do we need to move to the next node?\n      while (idx < numNodes && x > model.nodes[idx].x) {\n        idx++;\n        // If we are at a valid point index, fill in\n        // the value at this node, and the one before (the\n        // two that surround our current sample location)\n        // idx cannot be 0 since we just incremented it.\n        if (idx < numNodes) {\n          x1 = model.nodes[idx - 1].x;\n          x2 = model.nodes[idx].x;\n          y1 = model.nodes[idx - 1].y;\n          y2 = model.nodes[idx].y;\n\n          // We only need the previous midpoint and sharpness\n          // since these control this region\n          midpoint = model.nodes[idx - 1].midpoint;\n          sharpness = model.nodes[idx - 1].sharpness;\n\n          // Move midpoint away from extreme ends of range to avoid\n          // degenerate math\n          if (midpoint < 0.00001) {\n            midpoint = 0.00001;\n          }\n          if (midpoint > 0.99999) {\n            midpoint = 0.99999;\n          }\n        }\n      }\n\n      // Are we at the end? If so, just use the last value\n      if (idx >= numNodes) {\n        table[tidx] = model.clamping ? lastValue : 0.0;\n      } else if (idx === 0) {\n        // Are we before the first node? If so, duplicate this nodes values\n        table[tidx] = model.clamping ? model.nodes[0].y : 0.0;\n      } else {\n        // Otherwise, we are between two nodes - interpolate\n        // Our first attempt at a normalized location [0,1] -\n        // we will be modifying this based on midpoint and\n        // sharpness to get the curve shape we want and to have\n        // it pass through (y1+y2)/2 at the midpoint.\n        let s = (x - x1) / (x2 - x1);\n\n        // Readjust based on the midpoint - linear adjustment\n        if (s < midpoint) {\n          s = 0.5 * s / midpoint;\n        } else {\n          s = 0.5 + 0.5 * (s - midpoint) / (1.0 - midpoint);\n        }\n\n        // override for sharpness > 0.99\n        // In this case we just want piecewise constant\n        if (sharpness > 0.99) {\n          // Use the first value since we are below the midpoint\n          if (s < 0.5) {\n            table[tidx] = y1;\n            continue;\n          } else {\n            // Use the second value at or above the midpoint\n            table[tidx] = y2;\n            continue;\n          }\n        }\n\n        // Override for sharpness < 0.01\n        // In this case we want piecewise linear\n        if (sharpness < 0.01) {\n          // Simple linear interpolation\n          table[tidx] = (1 - s) * y1 + s * y2;\n          continue;\n        }\n\n        // We have a sharpness between [0.01, 0.99] - we will\n        // used a modified hermite curve interpolation where we\n        // derive the slope based on the sharpness, and we compress\n        // the curve non-linearly based on the sharpness\n\n        // First, we will adjust our position based on sharpness in\n        // order to make the curve sharper (closer to piecewise constant)\n        if (s < 0.5) {\n          s = 0.5 * (s * 2) ** (1.0 + 10 * sharpness);\n        } else if (s > 0.5) {\n          s = 1.0 - 0.5 * ((1.0 - s) * 2) ** (1 + 10 * sharpness);\n        }\n\n        // Compute some coefficients we will need for the hermite curve\n        const ss = s * s;\n        const sss = ss * s;\n        const h1 = 2 * sss - 3 * ss + 1;\n        const h2 = -2 * sss + 3 * ss;\n        const h3 = sss - 2 * ss + s;\n        const h4 = sss - ss;\n\n        // Use one slope for both end points\n        const slope = y2 - y1;\n        const t = (1.0 - sharpness) * slope;\n\n        // Compute the value\n        table[tidx] = h1 * y1 + h2 * y2 + h3 * t + h4 * t;\n\n        // Final error check to make sure we don't go outside\n        // the Y range\n        const min = y1 < y2 ? y1 : y2;\n        const max = y1 > y2 ? y1 : y2;\n        table[tidx] = table[tidx] < min ? min : table[tidx];\n        table[tidx] = table[tidx] > max ? max : table[tidx];\n      }\n    }\n  };\n}\n/* eslint-enable prefer-destructuring */\n/* eslint-enable no-continue */\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // model.function = NULL;\n  range: [0, 0],\n  clamping: true,\n  allowDuplicateScalars: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  macro.obj(publicAPI, model);\n\n  // Internal objects initialization\n  model.nodes = [];\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['allowDuplicateScalars', 'clamping']);\n  macro.setArray(publicAPI, model, ['range'], 2);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['range']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkPiecewiseFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPiecewiseFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPiecewiseFunction$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkPiecewiseFunction$1 as default, extend, newInstance };\n","import vtk from '../../vtk.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkPoints from '../Core/Points.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkPointSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPointSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPointSet');\n\n  // Create empty points\n  if (!model.points) {\n    model.points = vtkPoints.newInstance();\n  } else {\n    model.points = vtk(model.points);\n  }\n  publicAPI.getNumberOfPoints = () => model.points.getNumberOfPoints();\n  publicAPI.getBounds = () => model.points.getBounds();\n  publicAPI.computeBounds = () => {\n    publicAPI.getBounds();\n  };\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    model.points = vtkPoints.newInstance();\n    model.points.shallowCopy(other.getPoints());\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // points: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['points']);\n\n  // Object specific methods\n  vtkPointSet(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPointSet');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPointSet$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkPointSet$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtk from '../../vtk.js';\nimport vtkCellArray from '../Core/CellArray.js';\nimport vtkCellLinks from './CellLinks.js';\nimport vtkCellTypes from './CellTypes.js';\nimport vtkLine from './Line.js';\nimport vtkPointSet from './PointSet.js';\nimport vtkTriangle from './Triangle.js';\nimport { CellType } from './CellTypes/Constants.js';\nimport { POLYDATA_FIELDS } from './PolyData/Constants.js';\n\nconst {\n  vtkWarningMacro\n} = macro;\nconst CELL_FACTORY = {\n  [CellType.VTK_LINE]: vtkLine,\n  [CellType.VTK_POLY_LINE]: vtkLine,\n  [CellType.VTK_TRIANGLE]: vtkTriangle\n};\n\n// ----------------------------------------------------------------------------\n// vtkPolyData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyData');\n  function camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, letter => letter.toUpperCase()).replace(/\\s+/g, '');\n  }\n\n  // build empty cell arrays and set methods\n  POLYDATA_FIELDS.forEach(type => {\n    publicAPI[`getNumberOf${camelize(type)}`] = () => model[type].getNumberOfCells();\n    if (!model[type]) {\n      model[type] = vtkCellArray.newInstance();\n    } else {\n      model[type] = vtk(model[type]);\n    }\n  });\n  publicAPI.getNumberOfCells = () => POLYDATA_FIELDS.reduce((num, cellType) => num + model[cellType].getNumberOfCells(), 0);\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    POLYDATA_FIELDS.forEach(type => {\n      model[type] = vtkCellArray.newInstance();\n      model[type].shallowCopy(other.getReferenceByName(type));\n    });\n  };\n  publicAPI.buildCells = () => {\n    // here are the number of cells we have\n    const nVerts = publicAPI.getNumberOfVerts();\n    const nLines = publicAPI.getNumberOfLines();\n    const nPolys = publicAPI.getNumberOfPolys();\n    const nStrips = publicAPI.getNumberOfStrips();\n\n    // pre-allocate the space we need\n    const nCells = nVerts + nLines + nPolys + nStrips;\n    const types = new Uint8Array(nCells);\n    let pTypes = types;\n    const locs = new Uint32Array(nCells);\n    let pLocs = locs;\n\n    // record locations and type of each cell.\n    // verts\n    if (nVerts) {\n      let nextCellPts = 0;\n      model.verts.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        pTypes[index] = numCellPts > 1 ? CellType.VTK_POLY_VERTEX : CellType.VTK_VERTEX;\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nVerts);\n      pTypes = pTypes.subarray(nVerts);\n    }\n\n    // lines\n    if (nLines) {\n      let nextCellPts = 0;\n      model.lines.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        pTypes[index] = numCellPts > 2 ? CellType.VTK_POLY_LINE : CellType.VTK_LINE;\n        if (numCellPts === 1) {\n          vtkWarningMacro('Building VTK_LINE ', index, ' with only one point, but VTK_LINE needs at least two points. Check the input.');\n        }\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nLines);\n      pTypes = pTypes.subarray(nLines);\n    }\n\n    // polys\n    if (nPolys) {\n      let nextCellPts = 0;\n      model.polys.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        switch (numCellPts) {\n          case 3:\n            pTypes[index] = CellType.VTK_TRIANGLE;\n            break;\n          case 4:\n            pTypes[index] = CellType.VTK_QUAD;\n            break;\n          default:\n            pTypes[index] = CellType.VTK_POLYGON;\n            break;\n        }\n        if (numCellPts < 3) {\n          vtkWarningMacro('Building VTK_TRIANGLE ', index, ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.');\n        }\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs += pLocs.subarray(nPolys);\n      pTypes += pTypes.subarray(nPolys);\n    }\n\n    // strips\n    if (nStrips) {\n      let nextCellPts = 0;\n      pTypes.fill(CellType.VTK_TRIANGLE_STRIP, 0, nStrips);\n      model.strips.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        nextCellPts += numCellPts + 1;\n      });\n    }\n\n    // set up the cell types data structure\n    model.cells = vtkCellTypes.newInstance();\n    model.cells.setCellTypes(nCells, types, locs);\n  };\n\n  /**\n   * Create upward links from points to cells that use each point. Enables\n   * topologically complex queries.\n   */\n  publicAPI.buildLinks = function () {\n    let initialSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.cells === undefined) {\n      publicAPI.buildCells();\n    }\n    model.links = vtkCellLinks.newInstance();\n    if (initialSize > 0) {\n      model.links.allocate(initialSize);\n    } else {\n      model.links.allocate(publicAPI.getPoints().getNumberOfPoints());\n    }\n    model.links.buildLinks(publicAPI);\n  };\n  publicAPI.getCellType = cellId => model.cells.getCellType(cellId);\n  publicAPI.getCellPoints = cellId => {\n    const cellType = publicAPI.getCellType(cellId);\n    let cells = null;\n    switch (cellType) {\n      case CellType.VTK_VERTEX:\n      case CellType.VTK_POLY_VERTEX:\n        cells = model.verts;\n        break;\n      case CellType.VTK_LINE:\n      case CellType.VTK_POLY_LINE:\n        cells = model.lines;\n        break;\n      case CellType.VTK_TRIANGLE:\n      case CellType.VTK_QUAD:\n      case CellType.VTK_POLYGON:\n        cells = model.polys;\n        break;\n      case CellType.VTK_TRIANGLE_STRIP:\n        cells = model.strips;\n        break;\n      default:\n        cells = null;\n        return {\n          type: 0,\n          cellPointIds: null\n        };\n    }\n    const loc = model.cells.getCellLocation(cellId);\n    const cellPointIds = cells.getCell(loc);\n    return {\n      cellType,\n      cellPointIds\n    };\n  };\n  publicAPI.getPointCells = ptId => model.links.getCells(ptId);\n  publicAPI.getCellEdgeNeighbors = (cellId, point1, point2) => {\n    const link1 = model.links.getLink(point1);\n    const link2 = model.links.getLink(point2);\n    return link1.cells.filter(cell => cell !== cellId && link2.cells.indexOf(cell) !== -1);\n  };\n\n  /**\n   * If you know the type of cell, you may provide it to improve performances.\n   */\n  publicAPI.getCell = function (cellId) {\n    let cellHint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const cellInfo = publicAPI.getCellPoints(cellId);\n    const cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();\n    cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);\n    return cell;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // verts: null,\n  // lines: null,\n  // polys: null,\n  // strips: null,\n  // cells: null,\n  // links: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkPointSet.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['cells', 'links']);\n  macro.setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']);\n\n  // Object specific methods\n  vtkPolyData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPolyData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPolyData$1 = {\n  newInstance,\n  extend\n};\n\nexport { CELL_FACTORY, vtkPolyData$1 as default, extend, newInstance };\n","const POLYDATA_FIELDS = ['verts', 'lines', 'polys', 'strips'];\nvar Constants = {\n  POLYDATA_FIELDS\n};\n\nexport { POLYDATA_FIELDS, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './SelectionNode/Constants.js';\n\n// ----------------------------------------------------------------------------\n// vtkSelectionNode methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSelectionNode(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSelectionNode');\n  publicAPI.getBounds = () => model.points.getBounds();\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  contentType: -1,\n  fieldType: -1,\n  properties: null,\n  selectionList: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  macro.obj(publicAPI, model);\n  model.properties = {};\n  macro.setGet(publicAPI, model, ['contentType', 'fieldType', 'properties', 'selectionList']);\n\n  // Object specific methods\n  vtkSelectionNode(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkSelectionNode');\n\n// ----------------------------------------------------------------------------\n\nvar vtkSelectionNode$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkSelectionNode$1 as default, extend, newInstance };\n","/**\n * The (primary) property that describes the content of a selection\n * node's data. Other auxiliary description properties follow.\n * GLOBALIDS means that the selection list contains values from the\n * vtkDataSetAttribute array of the same name.\n * PEDIGREEIDS means that the selection list contains values from the\n * vtkDataSetAttribute array of the same name.\n * VALUES means the the selection list contains values from an\n * arbitrary attribute array (ignores any globalids attribute)\n * INDICES means that the selection list contains indexes into the\n * cell or point arrays.\n * FRUSTUM means the set of points and cells inside a frustum\n * LOCATIONS means the set of points and cells near a set of positions\n * THRESHOLDS means the points and cells with values within a set of ranges\n * getContentType() returns -1 if the content type is not set.\n */\n\n// Specify how data arrays can be used by data objects\nconst SelectionContent = {\n  GLOBALIDS: 0,\n  PEDIGREEIDS: 1,\n  VALUES: 2,\n  INDICES: 3,\n  FRUSTUM: 4,\n  LOCATIONS: 5,\n  THRESHOLDS: 6,\n  BLOCKS: 7,\n  QUERY: 8\n};\nconst SelectionField = {\n  CELL: 0,\n  POINT: 1,\n  FIELD: 2,\n  VERTEX: 3,\n  EDGE: 4,\n  ROW: 5\n};\nvar Constants = {\n  SelectionContent,\n  SelectionField\n};\n\nexport { SelectionContent, SelectionField, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport vtkCell from './Cell.js';\nimport { d as dot, j as cross, l as normalize, m as multiplyAccumulate, e as distance2BetweenPoints, o as determinant2x2 } from '../Core/Math/index.js';\nimport vtkLine from './Line.js';\nimport vtkPlane from './Plane.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction computeNormalDirection(v1, v2, v3, n) {\n  // order is important!!! maintain consistency with triangle vertex order\n  const ax = v3[0] - v2[0];\n  const ay = v3[1] - v2[1];\n  const az = v3[2] - v2[2];\n  const bx = v1[0] - v2[0];\n  const by = v1[1] - v2[1];\n  const bz = v1[2] - v2[2];\n  n[0] = ay * bz - az * by;\n  n[1] = az * bx - ax * bz;\n  n[2] = ax * by - ay * bx;\n}\nfunction computeNormal(v1, v2, v3, n) {\n  computeNormalDirection(v1, v2, v3, n);\n  const length = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);\n  if (length !== 0.0) {\n    n[0] /= length;\n    n[1] /= length;\n    n[2] /= length;\n  }\n}\nfunction intersectWithTriangle(p1, q1, r1, p2, q2, r2) {\n  let tolerance = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1e-6;\n  let coplanar = false;\n  const pt1 = [];\n  const pt2 = [];\n  const surfaceId = [];\n  const n1 = [];\n  const n2 = [];\n\n  // Compute supporting plane normals.\n  computeNormal(p1, q1, r1, n1);\n  computeNormal(p2, q2, r2, n2);\n  const s1 = -dot(n1, p1);\n  const s2 = -dot(n2, p2);\n\n  // Compute signed distances of points p1, q1, r1 from supporting\n  // plane of second triangle.\n  const dist1 = [dot(n2, p1) + s2, dot(n2, q1) + s2, dot(n2, r1) + s2];\n\n  // If signs of all points are the same, all the points lie on the\n  // same side of the supporting plane, and we can exit early.\n  if (dist1[0] * dist1[1] > tolerance && dist1[0] * dist1[2] > tolerance) {\n    // vtkDebugMacro(<<\"Same side supporting plane 1!\");\n    return {\n      intersect: false,\n      coplanar,\n      pt1,\n      pt2,\n      surfaceId\n    };\n  }\n  // Do the same for p2, q2, r2 and supporting plane of first\n  // triangle.\n  const dist2 = [dot(n1, p2) + s1, dot(n1, q2) + s1, dot(n1, r2) + s1];\n\n  // If signs of all points are the same, all the points lie on the\n  // same side of the supporting plane, and we can exit early.\n  if (dist2[0] * dist2[1] > tolerance && dist2[0] * dist2[2] > tolerance) {\n    // vtkDebugMacro(<<\"Same side supporting plane 2!\");\n    return {\n      intersect: false,\n      coplanar,\n      pt1,\n      pt2,\n      surfaceId\n    };\n  }\n  // Check for coplanarity of the supporting planes.\n  if (Math.abs(n1[0] - n2[0]) < 1e-9 && Math.abs(n1[1] - n2[1]) < 1e-9 && Math.abs(n1[2] - n2[2]) < 1e-9 && Math.abs(s1 - s2) < 1e-9) {\n    coplanar = true;\n    // vtkDebugMacro(<<\"Coplanar!\");\n    return {\n      intersect: false,\n      coplanar,\n      pt1,\n      pt2,\n      surfaceId\n    };\n  }\n\n  // There are more efficient ways to find the intersection line (if\n  // it exists), but this is clear enough.\n  const pts1 = [p1, q1, r1];\n  const pts2 = [p2, q2, r2];\n\n  // Find line of intersection (L = p + t*v) between two planes.\n  const n1n2 = dot(n1, n2);\n  const a = (s1 - s2 * n1n2) / (n1n2 * n1n2 - 1.0);\n  const b = (s2 - s1 * n1n2) / (n1n2 * n1n2 - 1.0);\n  const p = [a * n1[0] + b * n2[0], a * n1[1] + b * n2[1], a * n1[2] + b * n2[2]];\n  const v = cross(n1, n2, []);\n  normalize(v);\n  let index1 = 0;\n  let index2 = 0;\n  const t1 = [];\n  const t2 = [];\n  let ts1 = 50;\n  let ts2 = 50;\n  for (let i = 0; i < 3; i++) {\n    const id1 = i;\n    const id2 = (i + 1) % 3;\n\n    // Find t coordinate on line of intersection between two planes.\n    const val1 = vtkPlane.intersectWithLine(pts1[id1], pts1[id2], p2, n2);\n    if (val1.intersection && val1.t > 0 - tolerance && val1.t < 1 + tolerance) {\n      if (val1.t < 1 + tolerance && val1.t > 1 - tolerance) {\n        ts1 = index1;\n      }\n      t1[index1++] = dot(val1.x, v) - dot(p, v);\n    }\n    const val2 = vtkPlane.intersectWithLine(pts2[id1], pts2[id2], p1, n1);\n    if (val2.intersection && val2.t > 0 - tolerance && val2.t < 1 + tolerance) {\n      if (val2.t < 1 + tolerance && val2.t > 1 - tolerance) {\n        ts2 = index2;\n      }\n      t2[index2++] = dot(val2.x, v) - dot(p, v);\n    }\n  }\n\n  // If the value of the index is greater than 2, the intersecting point\n  // actually is intersected by all three edges. In this case, set the two\n  // edges to the two edges where the intersecting point is not the end point\n  if (index1 > 2) {\n    index1--;\n    // swap\n    const t12 = t1[2];\n    t1[2] = t1[ts1];\n    t1[ts1] = t12;\n  }\n  if (index2 > 2) {\n    index2--;\n    const t22 = t2[2];\n    t2[2] = t2[ts2];\n    t2[ts2] = t22;\n  }\n  // Check if only one edge or all edges intersect the supporting\n  // planes intersection.\n  if (index1 !== 2 || index2 !== 2) {\n    // vtkDebugMacro(<<\"Only one edge intersecting!\");\n    return {\n      intersect: false,\n      coplanar,\n      pt1,\n      pt2,\n      surfaceId\n    };\n  }\n\n  // Check for NaNs\n  if (Number.isNaN(t1[0]) || Number.isNaN(t1[1]) || Number.isNaN(t2[0]) || Number.isNaN(t2[1])) {\n    // vtkWarningMacro(<<\"NaNs!\");\n    return {\n      intersect: false,\n      coplanar,\n      pt1,\n      pt2,\n      surfaceId\n    };\n  }\n  if (t1[0] > t1[1]) {\n    // swap\n    const t11 = t1[1];\n    t1[1] = t1[0];\n    t1[0] = t11;\n  }\n  if (t2[0] > t2[1]) {\n    // swap\n    const t21 = t2[1];\n    t2[1] = t2[0];\n    t2[0] = t21;\n  }\n  // Handle the different interval configuration cases.\n  let tt1;\n  let tt2;\n  if (t1[1] < t2[0] || t2[1] < t1[0]) {\n    // vtkDebugMacro(<<\"No Overlap!\");\n    return {\n      intersect: false,\n      coplanar,\n      pt1,\n      pt2,\n      surfaceId\n    }; // No overlap\n  }\n\n  if (t1[0] < t2[0]) {\n    if (t1[1] < t2[1]) {\n      // First point on surface 2, second point on surface 1\n      surfaceId[0] = 2;\n      surfaceId[1] = 1;\n      tt1 = t2[0];\n      tt2 = t1[1];\n    } else {\n      // Both points belong to lines on surface 2\n      surfaceId[0] = 2;\n      surfaceId[1] = 2;\n      tt1 = t2[0];\n      tt2 = t2[1];\n    }\n  } // t1[0] >= t2[0]\n  else if (t1[1] < t2[1]) {\n    // Both points belong to lines on surface 1\n    surfaceId[0] = 1;\n    surfaceId[1] = 1;\n    tt1 = t1[0];\n    tt2 = t1[1];\n  } else {\n    // First point on surface 1, second point on surface 2\n    surfaceId[0] = 1;\n    surfaceId[1] = 2;\n    tt1 = t1[0];\n    tt2 = t2[1];\n  }\n\n  // Create actual intersection points.\n  multiplyAccumulate(p, v, tt1, pt1);\n  multiplyAccumulate(p, v, tt2, pt2);\n  return {\n    intersect: true,\n    coplanar,\n    pt1,\n    pt2,\n    surfaceId\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  computeNormalDirection,\n  computeNormal,\n  intersectWithTriangle\n};\n\n// ----------------------------------------------------------------------------\n// vtkTriangle methods\n// ----------------------------------------------------------------------------\n\nfunction vtkTriangle(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkTriangle');\n  publicAPI.getCellDimension = () => 2;\n  publicAPI.intersectWithLine = (p1, p2, tol, x, pcoords) => {\n    const outObj = {\n      subId: 0,\n      t: Number.MAX_VALUE,\n      intersect: 0,\n      betweenPoints: false\n    };\n    pcoords[2] = 0.0;\n    const closestPoint = [];\n    const tol2 = tol * tol;\n\n    // Get normal for triangle\n    const pt1 = [];\n    const pt2 = [];\n    const pt3 = [];\n    model.points.getPoint(0, pt1);\n    model.points.getPoint(1, pt2);\n    model.points.getPoint(2, pt3);\n    const n = [];\n    const weights = [];\n    computeNormal(pt1, pt2, pt3, n);\n    if (n[0] !== 0 || n[1] !== 0 || n[2] !== 0) {\n      // Intersect plane of triangle with line\n      const plane = vtkPlane.intersectWithLine(p1, p2, pt1, n);\n      outObj.betweenPoints = plane.betweenPoints;\n      outObj.t = plane.t;\n      x[0] = plane.x[0];\n      x[1] = plane.x[1];\n      x[2] = plane.x[2];\n      if (!plane.intersection) {\n        pcoords[0] = 0.0;\n        pcoords[1] = 0.0;\n        outObj.intersect = 0;\n        return outObj;\n      }\n\n      // Evaluate position\n      const inside = publicAPI.evaluatePosition(x, closestPoint, pcoords, weights);\n      if (inside.evaluation >= 0) {\n        if (inside.dist2 <= tol2) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n        outObj.intersect = inside.evaluation;\n        return outObj;\n      }\n    }\n\n    // Normals are null, so the triangle is degenerated and\n    // we still need to check intersection between line and\n    // the longest edge.\n    const dist2Pt1Pt2 = distance2BetweenPoints(pt1, pt2);\n    const dist2Pt2Pt3 = distance2BetweenPoints(pt2, pt3);\n    const dist2Pt3Pt1 = distance2BetweenPoints(pt3, pt1);\n    if (!model.line) {\n      model.line = vtkLine.newInstance();\n    }\n    if (dist2Pt1Pt2 > dist2Pt2Pt3 && dist2Pt1Pt2 > dist2Pt3Pt1) {\n      model.line.getPoints().setPoint(0, pt1);\n      model.line.getPoints().setPoint(1, pt2);\n    } else if (dist2Pt2Pt3 > dist2Pt3Pt1 && dist2Pt2Pt3 > dist2Pt1Pt2) {\n      model.line.getPoints().setPoint(0, pt2);\n      model.line.getPoints().setPoint(1, pt3);\n    } else {\n      model.line.getPoints().setPoint(0, pt3);\n      model.line.getPoints().setPoint(1, pt1);\n    }\n    const intersectLine = model.line.intersectWithLine(p1, p2, tol, x, pcoords);\n    outObj.betweenPoints = intersectLine.betweenPoints;\n    outObj.t = intersectLine.t;\n    if (intersectLine.intersect) {\n      const pt3Pt1 = [];\n      const pt3Pt2 = [];\n      const pt3X = [];\n      // Compute r and s manually, using dot and norm.\n      for (let i = 0; i < 3; i++) {\n        pt3Pt1[i] = pt1[i] - pt3[i];\n        pt3Pt2[i] = pt2[i] - pt3[i];\n        pt3X[i] = x[i] - pt3[i];\n      }\n      pcoords[0] = dot(pt3X, pt3Pt1) / dist2Pt3Pt1;\n      pcoords[1] = dot(pt3X, pt3Pt2) / dist2Pt2Pt3;\n      outObj.intersect = 1;\n      return outObj;\n    }\n    pcoords[0] = 0.0;\n    pcoords[1] = 0.0;\n    outObj.intersect = 0;\n    return outObj;\n  };\n  publicAPI.evaluatePosition = (x, closestPoint, pcoords, weights) => {\n    // will return obj\n    const outObj = {\n      subId: 0,\n      dist2: 0,\n      evaluation: -1\n    };\n    let i;\n    let j;\n    const pt1 = [];\n    const pt2 = [];\n    const pt3 = [];\n    const n = [];\n    let fabsn;\n    const rhs = [];\n    const c1 = [];\n    const c2 = [];\n    let det = 0;\n    let idx = 0;\n    const indices = [];\n    let dist2Point;\n    let dist2Line1;\n    let dist2Line2;\n    let closest = [];\n    const closestPoint1 = [];\n    const closestPoint2 = [];\n    const cp = [];\n    outObj.subId = 0;\n    pcoords[2] = 0.0;\n\n    // Get normal for triangle, only the normal direction is needed, i.e. the\n    // normal need not be normalized (unit length)\n    //\n    model.points.getPoint(1, pt1);\n    model.points.getPoint(2, pt2);\n    model.points.getPoint(0, pt3);\n    computeNormalDirection(pt1, pt2, pt3, n);\n\n    // Project point to plane\n    vtkPlane.generalizedProjectPoint(x, pt1, n, cp);\n\n    // Construct matrices.  Since we have over determined system, need to find\n    // which 2 out of 3 equations to use to develop equations. (Any 2 should\n    // work since we've projected point to plane.)\n    let maxComponent = 0.0;\n    for (i = 0; i < 3; i++) {\n      // trying to avoid an expensive call to fabs()\n      if (n[i] < 0) {\n        fabsn = -n[i];\n      } else {\n        fabsn = n[i];\n      }\n      if (fabsn > maxComponent) {\n        maxComponent = fabsn;\n        idx = i;\n      }\n    }\n    for (j = 0, i = 0; i < 3; i++) {\n      if (i !== idx) {\n        indices[j++] = i;\n      }\n    }\n    for (i = 0; i < 2; i++) {\n      rhs[i] = cp[indices[i]] - pt3[indices[i]];\n      c1[i] = pt1[indices[i]] - pt3[indices[i]];\n      c2[i] = pt2[indices[i]] - pt3[indices[i]];\n    }\n    det = determinant2x2(c1, c2);\n    if (det === 0.0) {\n      pcoords[0] = 0.0;\n      pcoords[1] = 0.0;\n      outObj.evaluation = -1;\n      return outObj;\n    }\n    pcoords[0] = determinant2x2(rhs, c2) / det;\n    pcoords[1] = determinant2x2(c1, rhs) / det;\n\n    // Okay, now find closest point to element\n    weights[0] = 1 - (pcoords[0] + pcoords[1]);\n    weights[1] = pcoords[0];\n    weights[2] = pcoords[1];\n    if (weights[0] >= 0.0 && weights[0] <= 1.0 && weights[1] >= 0.0 && weights[1] <= 1.0 && weights[2] >= 0.0 && weights[2] <= 1.0) {\n      // projection distance\n      if (closestPoint) {\n        outObj.dist2 = distance2BetweenPoints(cp, x);\n        closestPoint[0] = cp[0];\n        closestPoint[1] = cp[1];\n        closestPoint[2] = cp[2];\n      }\n      outObj.evaluation = 1;\n    } else {\n      let t;\n      if (closestPoint) {\n        if (weights[1] < 0.0 && weights[2] < 0.0) {\n          dist2Point = distance2BetweenPoints(x, pt3);\n          dist2Line1 = vtkLine.distanceToLine(x, pt1, pt3, t, closestPoint1);\n          dist2Line2 = vtkLine.distanceToLine(x, pt3, pt2, t, closestPoint2);\n          if (dist2Point < dist2Line1) {\n            outObj.dist2 = dist2Point;\n            closest = pt3;\n          } else {\n            outObj.dist2 = dist2Line1;\n            closest = closestPoint1;\n          }\n          if (dist2Line2 < outObj.dist2) {\n            outObj.dist2 = dist2Line2;\n            closest = closestPoint2;\n          }\n          for (i = 0; i < 3; i++) {\n            closestPoint[i] = closest[i];\n          }\n        } else if (weights[2] < 0.0 && weights[0] < 0.0) {\n          dist2Point = distance2BetweenPoints(x, pt1);\n          dist2Line1 = vtkLine.distanceToLine(x, pt1, pt3, t, closestPoint1);\n          dist2Line2 = vtkLine.distanceToLine(x, pt1, pt2, t, closestPoint2);\n          if (dist2Point < dist2Line1) {\n            outObj.dist2 = dist2Point;\n            closest = pt1;\n          } else {\n            outObj.dist2 = dist2Line1;\n            closest = closestPoint1;\n          }\n          if (dist2Line2 < outObj.dist2) {\n            outObj.dist2 = dist2Line2;\n            closest = closestPoint2;\n          }\n          for (i = 0; i < 3; i++) {\n            closestPoint[i] = closest[i];\n          }\n        } else if (weights[1] < 0.0 && weights[0] < 0.0) {\n          dist2Point = distance2BetweenPoints(x, pt2);\n          dist2Line1 = vtkLine.distanceToLine(x, pt2, pt3, t, closestPoint1);\n          dist2Line2 = vtkLine.distanceToLine(x, pt1, pt2, t, closestPoint2);\n          if (dist2Point < dist2Line1) {\n            outObj.dist2 = dist2Point;\n            closest = pt2;\n          } else {\n            outObj.dist2 = dist2Line1;\n            closest = closestPoint1;\n          }\n          if (dist2Line2 < outObj.dist2) {\n            outObj.dist2 = dist2Line2;\n            closest = closestPoint2;\n          }\n          for (i = 0; i < 3; i++) {\n            closestPoint[i] = closest[i];\n          }\n        } else if (weights[0] < 0.0) {\n          const lineDistance = vtkLine.distanceToLine(x, pt1, pt2, closestPoint);\n          outObj.dist2 = lineDistance.distance;\n        } else if (weights[1] < 0.0) {\n          const lineDistance = vtkLine.distanceToLine(x, pt2, pt3, closestPoint);\n          outObj.dist2 = lineDistance.distance;\n        } else if (weights[2] < 0.0) {\n          const lineDistance = vtkLine.distanceToLine(x, pt1, pt3, closestPoint);\n          outObj.dist2 = lineDistance.distance;\n        }\n      }\n      outObj.evaluation = 0;\n    }\n    return outObj;\n  };\n  publicAPI.evaluateLocation = (pcoords, x, weights) => {\n    const p0 = [];\n    const p1 = [];\n    const p2 = [];\n    model.points.getPoint(0, p0);\n    model.points.getPoint(1, p1);\n    model.points.getPoint(2, p2);\n    const u3 = 1.0 - pcoords[0] - pcoords[1];\n    for (let i = 0; i < 3; i++) {\n      x[i] = p0[i] * u3 + p1[i] * pcoords[0] + p2[i] * pcoords[1];\n    }\n    weights[0] = u3;\n    weights[1] = pcoords[0];\n    weights[2] = pcoords[1];\n  };\n  publicAPI.getParametricDistance = pcoords => {\n    let pDist;\n    let pDistMax = 0.0;\n    const pc = [];\n    pc[0] = pcoords[0];\n    pc[1] = pcoords[1];\n    pc[2] = 1.0 - pcoords[0] - pcoords[1];\n    for (let i = 0; i < 3; i++) {\n      if (pc[i] < 0.0) {\n        pDist = -pc[i];\n      } else if (pc[i] > 1.0) {\n        pDist = pc[i] - 1.0;\n      } else {\n        // inside the cell in the parametric direction\n        pDist = 0.0;\n      }\n      if (pDist > pDistMax) {\n        pDistMax = pDist;\n      }\n    }\n    return pDistMax;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkCell.extend(publicAPI, model, initialValues);\n  vtkTriangle(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkTriangle');\n\n// ----------------------------------------------------------------------------\n\nvar vtkTriangle$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkTriangle$1 as default, extend, newInstance };\n","import { IDENTITY } from '../Core/Math/Constants.js';\nimport { vec3, mat4 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport { f as vtkMath } from '../Core/Math/index.js';\n\n// ----------------------------------------------------------------------------\n// vtkTransform methods\n// ----------------------------------------------------------------------------\n// eslint-disable-next-line import/no-mutable-exports\nlet newInstance;\nfunction vtkTransform(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkAbstractTransform', 'vtkHomogeneousTransform', 'vtkTransform');\n  publicAPI.transformPoint = (point, out) => {\n    vec3.transformMat4(out, point, model.matrix);\n    return out;\n  };\n  publicAPI.transformPoints = (points, out) => {\n    const inPoint = new Float64Array(3);\n    const outPoint = new Float64Array(3);\n    for (let i = 0; i < points.length; i += 3) {\n      inPoint[0] = points[i];\n      inPoint[1] = points[i + 1];\n      inPoint[2] = points[i + 2];\n      vec3.transformMat4(outPoint, inPoint, model.matrix);\n      out[i] = outPoint[0];\n      out[i + 1] = outPoint[1];\n      out[i + 2] = outPoint[2];\n    }\n    return out;\n  };\n\n  /**\n   * Sets the internal state of the transform to PreMultiply.\n   * All subsequent operations will occur before those already represented in the current transformation.\n   * In homogeneous matrix notation, M = M*A where M is the current transformation matrix and A is the applied matrix.\n   * The default is PreMultiply.\n   */\n  publicAPI.preMultiply = () => {\n    publicAPI.setPreMultiplyFlag(true);\n  };\n\n  /**\n   * Sets the internal state of the transform to PostMultiply.\n   * All subsequent operations will occur after those already represented in the current transformation.\n   * In homogeneous matrix notation, M = A*M where M is the current transformation matrix and A is the applied matrix.\n   * The default is PreMultiply.\n   */\n  publicAPI.postMultiply = () => {\n    publicAPI.setPreMultiplyFlag(false);\n  };\n  publicAPI.transformMatrix = (matrix, out) => {\n    if (model.preMultiplyFlag) {\n      mat4.multiply(out, model.matrix, matrix);\n    } else {\n      mat4.multiply(out, matrix, model.matrix);\n    }\n    return out;\n  };\n\n  // Apply the transform to each matrix in the same way as transformMatrix\n  // `matrices` can be a contiguous array of float or an array of array\n  publicAPI.transformMatrices = (matrices, out) => {\n    const inMat = new Float64Array(16);\n    const outMat = new Float64Array(16);\n    const transform = model.preMultiplyFlag ? () => mat4.multiply(outMat, model.matrix, inMat) : () => mat4.multiply(outMat, inMat, model.matrix);\n    for (let i = 0; i < matrices.length; i += 16) {\n      for (let j = 0; j < 16; ++j) {\n        inMat[j] = matrices[i + j];\n      }\n      transform();\n      for (let j = 0; j < 16; ++j) {\n        out[i + j] = outMat[j];\n      }\n    }\n    return out;\n  };\n  publicAPI.getInverse = () => newInstance({\n    matrix: vtkMath.invertMatrix(Array.from(model.matrix), [], 4),\n    preMultiplyFlag: model.preMultiplyFlag\n  });\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  preMultiplyFlag: false,\n  matrix: [...IDENTITY]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['preMultiplyFlag']);\n  macro.setGetArray(publicAPI, model, ['matrix'], 16);\n  vtkTransform(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nnewInstance = macro.newInstance(extend, 'vtkTransform');\n\n// ----------------------------------------------------------------------------\n\nvar vtkTransform$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkTransform$1 as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, d as algo, e as setGet, c as macro, b as newTypedArrayFrom } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nfunction initPolyIterator(pd) {\n  const polys = pd.getPolys().getData();\n  const strips = pd.getStrips().getData();\n  const it = {\n    cellSize: 0,\n    cell: [],\n    done: false,\n    polyIdx: 0,\n    stripIdx: 0,\n    remainingStripLength: 0,\n    // returns a single poly cell\n    next() {\n      if (it.polyIdx < polys.length) {\n        it.cellSize = polys[it.polyIdx];\n        const start = it.polyIdx + 1;\n        const end = start + it.cellSize;\n        it.polyIdx = end;\n        let p = 0;\n        for (let i = start; i < end; ++i) {\n          it.cell[p++] = polys[i];\n        }\n      } else if (it.stripIdx < strips.length) {\n        it.cellSize = 3;\n        if (it.remainingStripLength === 0) {\n          it.remainingStripLength = strips[it.stripIdx] - 2; // sliding window of 3 points\n          // stripIdx points to the last point in a triangle 3-tuple\n          it.stripIdx += 3;\n        }\n        const start = it.stripIdx - 2;\n        const end = it.stripIdx + 1;\n        it.stripIdx++;\n        it.remainingStripLength--;\n        let p = 0;\n        for (let i = start; i < end; ++i) {\n          it.cell[p++] = strips[i];\n        }\n      } else if (!it.done) {\n        it.done = true;\n      } else {\n        throw new Error('Iterator is done');\n      }\n    }\n  };\n  it.next();\n  return it;\n}\n\n// ----------------------------------------------------------------------------\n// vtkCutter methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCutter(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCutter');\n\n  // Capture \"parentClass\" api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getMTime = () => {\n    let mTime = superClass.getMTime();\n    if (!model.cutFunction) {\n      return mTime;\n    }\n    mTime = Math.max(mTime, model.cutFunction.getMTime());\n    return mTime;\n  };\n  function dataSetCutter(input, output) {\n    const points = input.getPoints();\n    const pointsData = points.getData();\n    const numPts = points.getNumberOfPoints();\n    const newPointsData = [];\n    const newLinesData = [];\n    const newPolysData = [];\n    if (!model.cutScalars || model.cutScalars.length < numPts) {\n      model.cutScalars = new Float32Array(numPts);\n    }\n\n    // Loop over all points evaluating scalar function at each point\n    let inOffset = 0;\n    let outOffset = 0;\n    while (inOffset < pointsData.length) {\n      model.cutScalars[outOffset++] = model.cutFunction.evaluateFunction(pointsData[inOffset++], pointsData[inOffset++], pointsData[inOffset++]);\n    }\n    const crossedEdges = [];\n    const x1 = new Array(3);\n    const x2 = new Array(3);\n    const cellPointsScalars = [];\n\n    // Loop over all cells; get scalar values for all cell points\n    // and process each cell.\n    /* eslint-disable no-continue */\n    for (const it = initPolyIterator(input); !it.done; it.next()) {\n      // cell contains the point IDs/indices\n\n      // Check that cells have at least 3 points\n      if (it.cellSize <= 2) {\n        continue;\n      }\n\n      // Get associated scalar of points that constitute the current cell\n      for (let i = 0; i < it.cellSize;) {\n        cellPointsScalars[i] = model.cutScalars[it.cell[i++]];\n      }\n\n      // Check if all cell points are on same side (same side == cell not crossed by cut function)\n      // TODO: won't work if one point scalar is = 0 ?\n      const sideFirstPoint = cellPointsScalars[0] > 0;\n      let allPointsSameSide = true;\n      for (let i = 1; i < it.cell.length; i++) {\n        const sideCurrentPoint = cellPointsScalars[i] > 0;\n        if (sideCurrentPoint !== sideFirstPoint) {\n          allPointsSameSide = false;\n          break;\n        }\n      }\n\n      // Go to next cell if cell is not crossed by cut function\n      if (allPointsSameSide) {\n        continue;\n      }\n\n      // Find and compute edges which intersect cells\n      const intersectedEdgesList = [];\n      for (let i = 0; i < it.cellSize; i++) {\n        const idNext = i + 1 === it.cellSize ? 0 : i + 1;\n\n        // Go to next edge if edge is not crossed\n        // TODO: in most come cases, (numberOfPointsInCell - 1) or 0 edges of the cell\n        // will be crossed, but if it crosses right at a point, it could be intersecting\n        // with (numberOfPoints) or 1 edge(s). Do we account for that?\n        const signPoint0 = cellPointsScalars[i] > 0;\n        const signPoint1 = cellPointsScalars[idNext] > 0;\n        if (signPoint1 === signPoint0) {\n          continue;\n        }\n\n        // Compute preferred interpolation direction\n        let e1 = i;\n        let e2 = idNext;\n        let deltaScalar = cellPointsScalars[e2] - cellPointsScalars[e1];\n        if (deltaScalar <= 0) {\n          e1 = idNext;\n          e2 = i;\n          deltaScalar *= -1;\n        }\n\n        // linear interpolation\n        let t = 0.0;\n        if (deltaScalar !== 0.0) {\n          t = (model.cutValue - cellPointsScalars[e1]) / deltaScalar;\n        }\n\n        // points position\n        const pointID1 = it.cell[e1];\n        const pointID2 = it.cell[e2];\n        x1[0] = pointsData[pointID1 * 3];\n        x1[1] = pointsData[pointID1 * 3 + 1];\n        x1[2] = pointsData[pointID1 * 3 + 2];\n        x2[0] = pointsData[pointID2 * 3];\n        x2[1] = pointsData[pointID2 * 3 + 1];\n        x2[2] = pointsData[pointID2 * 3 + 2];\n\n        // Compute the intersected point on edge\n        const computedIntersectedPoint = [x1[0] + t * (x2[0] - x1[0]), x1[1] + t * (x2[1] - x1[1]), x1[2] + t * (x2[2] - x1[2])];\n\n        // Keep track of it\n        intersectedEdgesList.push({\n          pointEdge1: pointID1,\n          // id of one point of the edge\n          pointEdge2: pointID2,\n          // id of one point of the edge\n          intersectedPoint: computedIntersectedPoint,\n          // 3D coordinate of points that intersected edge\n          newPointID: -1 // id of the intersected point when it will be added into vtkPoints\n        });\n      }\n\n      // Add points into newPointList\n      for (let i = 0; i < intersectedEdgesList.length; i++) {\n        const intersectedEdge = intersectedEdgesList[i];\n        let alreadyAdded = false;\n        // Check if point/edge already added\n        for (let j = 0; j < crossedEdges.length; j++) {\n          const crossedEdge = crossedEdges[j];\n          const sameEdge = intersectedEdge.pointEdge1 === crossedEdge.pointEdge1 && intersectedEdge.pointEdge2 === crossedEdge.pointEdge2;\n          const samePoint = intersectedEdge.intersectedPoint[0] === crossedEdge.intersectedPoint[0] && intersectedEdge.intersectedPoint[1] === crossedEdge.intersectedPoint[1] && intersectedEdge.intersectedPoint[2] === crossedEdge.intersectedPoint[2];\n          if (sameEdge || samePoint) {\n            alreadyAdded = true;\n            intersectedEdgesList[i].newPointID = crossedEdges[j].newPointID;\n            break;\n          }\n        }\n        if (!alreadyAdded) {\n          newPointsData.push(intersectedEdge.intersectedPoint[0]);\n          newPointsData.push(intersectedEdge.intersectedPoint[1]);\n          newPointsData.push(intersectedEdge.intersectedPoint[2]);\n          intersectedEdgesList[i].newPointID = newPointsData.length / 3 - 1;\n          crossedEdges.push(intersectedEdgesList[i]);\n        }\n      }\n\n      // Store cells\n      const cellSize = intersectedEdgesList.length;\n      if (cellSize === 2) {\n        newLinesData.push(cellSize, intersectedEdgesList[0].newPointID, intersectedEdgesList[1].newPointID);\n      } else if (cellSize > 2) {\n        newPolysData.push(cellSize);\n        intersectedEdgesList.forEach(edge => {\n          newPolysData.push(edge.newPointID);\n        });\n      }\n    }\n\n    // Set points\n    const outputPoints = output.getPoints();\n    outputPoints.setData(newTypedArrayFrom(points.getDataType(), newPointsData), 3);\n\n    // Set lines\n    if (newLinesData.length !== 0) {\n      output.getLines().setData(Uint16Array.from(newLinesData));\n    }\n\n    // Set polys\n    if (newPolysData.length !== 0) {\n      output.getPolys().setData(Uint16Array.from(newPolysData));\n    }\n  }\n\n  // expose requestData\n  publicAPI.requestData = (inData, outData) => {\n    // implement requestData\n    const input = inData[0];\n    if (!input) {\n      vtkErrorMacro('Invalid or missing input');\n      return;\n    }\n    if (!model.cutFunction) {\n      vtkErrorMacro('Missing cut function');\n      return;\n    }\n    const output = vtkPolyData.newInstance();\n    dataSetCutter(input, output);\n    outData[0] = output;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  cutFunction: null,\n  // support method with evaluateFunction method\n  cutScalars: null,\n  cutValue: 0.0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Make this a VTK object\n  obj(publicAPI, model);\n\n  // Also make it an algorithm with one input and one output\n  algo(publicAPI, model, 1, 1);\n\n  // Set implicit function use to cut the input data (is vtkPlane)\n  setGet(publicAPI, model, ['cutFunction', 'cutValue']);\n\n  // Object specific methods\n  vtkCutter(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkCutter');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCutter$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkCutter$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { f as vtkMath } from '../../Common/Core/Math/index.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkTriangle from '../../Common/DataModel/Triangle.js';\n\n// ----------------------------------------------------------------------------\n// vtkPolyDataNormals methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyDataNormals(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyDataNormals');\n  publicAPI.vtkPolyDataNormalsExecute = (numberOfPolys, polysData, pointsData) => {\n    if (!pointsData) {\n      return null;\n    }\n    const pointNormals = new Float32Array(pointsData.length);\n    const cellNormals = new Float32Array(3 * numberOfPolys);\n    let cellNormalComponent = 0;\n    let numberOfPoints = 0;\n    const polysDataLength = polysData.length;\n    const cellPointIds = [0, 0, 0];\n    const cellNormal = [0, 0, 0];\n    for (let c = 0; c < polysDataLength; c += numberOfPoints + 1) {\n      numberOfPoints = polysData[c];\n      if (numberOfPoints < 3) {\n        continue; // eslint-disable-line\n      }\n\n      for (let i = 1; i <= 3; ++i) {\n        cellPointIds[i - 1] = 3 * polysData[c + i];\n      }\n      vtkTriangle.computeNormal(pointsData.slice(cellPointIds[0], cellPointIds[0] + 3), pointsData.slice(cellPointIds[1], cellPointIds[1] + 3), pointsData.slice(cellPointIds[2], cellPointIds[2] + 3), cellNormal);\n      cellNormals[cellNormalComponent++] = cellNormal[0];\n      cellNormals[cellNormalComponent++] = cellNormal[1];\n      cellNormals[cellNormalComponent++] = cellNormal[2];\n      if (model.computePointNormals) {\n        for (let i = 1; i <= numberOfPoints; ++i) {\n          let pointId = 3 * polysData[c + i];\n          pointNormals[pointId] += cellNormal[0];\n          pointNormals[++pointId] += cellNormal[1];\n          pointNormals[++pointId] += cellNormal[2];\n        }\n      }\n    }\n\n    // Normalize point normals.\n    // A point normal is the sum of all the cell normals the point belongs to\n    if (model.computePointNormals) {\n      const pointNormal = [0, 0, 0];\n      for (let i = 0; i < pointsData.length;) {\n        pointNormal[0] = pointNormals[i];\n        pointNormal[1] = pointNormals[i + 1];\n        pointNormal[2] = pointNormals[i + 2];\n        vtkMath.normalize(pointNormal);\n        pointNormals[i++] = pointNormal[0];\n        pointNormals[i++] = pointNormal[1];\n        pointNormals[i++] = pointNormal[2];\n      }\n    }\n    return [cellNormals, pointNormals];\n  };\n  publicAPI.requestData = (inData, outData) => {\n    const numberOfInputs = publicAPI.getNumberOfInputPorts();\n    if (!numberOfInputs) {\n      return;\n    }\n    const input = inData[0];\n    if (!input) {\n      return;\n    }\n    const output = vtkPolyData.newInstance();\n    output.setPoints(input.getPoints());\n    output.setVerts(input.getVerts());\n    output.setLines(input.getLines());\n    output.setPolys(input.getPolys());\n    output.setStrips(input.getStrips());\n    output.getPointData().passData(input.getPointData());\n    output.getCellData().passData(input.getCellData());\n    output.getFieldData().passData(input.getFieldData());\n    const [cellNormals, pointNormals] = publicAPI.vtkPolyDataNormalsExecute(input.getNumberOfPolys(), input.getPolys().getData(), input.getPoints().getData());\n    if (model.computePointNormals) {\n      const outputPointNormals = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        name: 'Normals',\n        values: pointNormals\n      });\n      output.getPointData().setNormals(outputPointNormals);\n    }\n    if (model.computeCellNormals) {\n      const outputCellNormals = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        name: 'Normals',\n        values: cellNormals\n      });\n      output.getCellData().setNormals(outputCellNormals);\n    }\n    outData[0] = output;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nfunction defaultValues(initialValues) {\n  return {\n    computeCellNormals: false,\n    computePointNormals: true,\n    ...initialValues\n  };\n}\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n\n  /* Make this a VTK object */\n\n  macro.obj(publicAPI, model);\n\n  /* Also make it an algorithm with one input and one output */\n\n  macro.algo(publicAPI, model, 1, 1);\n  macro.setGet(publicAPI, model, ['computeCellNormals', 'computePointNormals']);\n\n  /* Object specific methods */\n\n  vtkPolyDataNormals(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPolyDataNormals');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPolyDataNormals$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkPolyDataNormals$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nclass SegmentAgregator {\n  constructor() {\n    this.segmentMapping = {};\n    this.segments = [null]; // to force first id to be 1\n    this.faces = [];\n  }\n  addSegment(segment) {\n    const first = segment[0];\n    const last = segment[segment.length - 1];\n    if (first === last || segment.length < 2) {\n      return;\n    }\n    const mappingFirst = this.segmentMapping[first];\n    const mappingLast = this.segmentMapping[last];\n    if (mappingFirst !== undefined && mappingLast !== undefined) {\n      if (Math.abs(mappingFirst) === Math.abs(mappingLast)) {\n        // This make a closing loop\n        const idx = mappingFirst < mappingLast ? mappingLast : mappingFirst;\n        const seg = this.segments[idx];\n        if (mappingFirst > 0) {\n          for (let i = 1; i < segment.length - 1; i++) {\n            seg.push(segment[i]);\n          }\n        } else {\n          for (let i = 1; i < segment.length - 1; i++) {\n            seg.unshift(segment[segment.length - 1 - i]);\n          }\n        }\n        this.faces.push(seg);\n        this.segments[idx] = null;\n        this.segmentMapping[first] = undefined;\n        this.segmentMapping[last] = undefined;\n      } else {\n        // we need to merge segments\n        // strategie:\n        // => remove and add them again in special order to induce merge\n        const idxHead = Math.abs(mappingFirst);\n        const idxTail = Math.abs(mappingLast);\n        const segHead = this.segments[idxHead];\n        const segTail = this.segments[idxTail];\n        this.segments[idxHead] = null;\n        this.segments[idxTail] = null;\n        this.segmentMapping[segHead[0]] = undefined;\n        this.segmentMapping[segTail[0]] = undefined;\n        this.segmentMapping[segHead[segHead.length - 1]] = undefined;\n        this.segmentMapping[segTail[segTail.length - 1]] = undefined;\n\n        // This will lead to a single segment\n        this.addSegment(segment);\n        this.addSegment(segHead);\n        this.addSegment(segTail);\n      }\n    } else if (mappingFirst !== undefined) {\n      if (mappingFirst > 0) {\n        // The head of our segment match the tail of the existing one\n        const seg = this.segments[mappingFirst];\n        for (let i = 1; i < segment.length; i++) {\n          seg.push(segment[i]);\n        }\n        // record new tail\n        this.segmentMapping[last] = mappingFirst;\n      } else {\n        // our segment should be reverted and put on the front of the existing one\n        const seg = this.segments[-mappingFirst];\n        // record new head\n        this.segmentMapping[last] = mappingFirst;\n        for (let i = 1; i < segment.length; i++) {\n          seg.unshift(segment[i]);\n        }\n      }\n      // Erase used connection\n      this.segmentMapping[first] = undefined;\n    } else if (mappingLast !== undefined) {\n      if (mappingLast > 0) {\n        // The tail of our segment match the tail of the existing one\n        const seg = this.segments[mappingLast];\n        for (let i = 1; i < segment.length; i++) {\n          seg.push(segment[segment.length - 1 - i]);\n        }\n        // record new tail\n        this.segmentMapping[first] = mappingLast;\n      } else {\n        // our segment should be reverted and put on the front of the existing one\n        const seg = this.segments[-mappingLast];\n\n        // record new head\n        this.segmentMapping[first] = mappingLast;\n        for (let i = 1; i < segment.length; i++) {\n          seg.unshift(segment[segment.length - i - 1]);\n        }\n      }\n      // Erase used connection\n      this.segmentMapping[last] = undefined;\n    } else {\n      // store segment for now\n      const id = this.segments.length;\n      this.segments.push(segment);\n      this.segmentMapping[first] = -id;\n      this.segmentMapping[last] = id;\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n// vtkClosedPolyLineToSurfaceFilter methods\n// ----------------------------------------------------------------------------\n\nfunction vtkClosedPolyLineToSurfaceFilter(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkClosedPolyLineToSurfaceFilter');\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.requestData = (inData, outData) => {\n    // implement requestData\n    const input = inData[0];\n    if (!input) {\n      vtkErrorMacro('Invalid or missing input');\n      return;\n    }\n    const output = vtkPolyData.newInstance();\n    output.shallowCopy(input);\n\n    // Extract faces\n    const agregator = new SegmentAgregator();\n    const lines = input.getLines().getData();\n    let offset = 0;\n    while (offset < lines.length) {\n      const lineSize = lines[offset++];\n      const lineSegment = [];\n      for (let i = 0; i < lineSize; i++) {\n        lineSegment.push(lines[offset + i]);\n      }\n      agregator.addSegment(lineSegment);\n      offset += lineSize;\n    }\n\n    // Create CellArray for polys\n    const {\n      faces\n    } = agregator;\n    let cellArraySize = faces.length;\n    for (let i = 0; i < faces.length; i++) {\n      cellArraySize += faces[i].length;\n    }\n    const cellArray = new Uint16Array(cellArraySize);\n    offset = 0;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      cellArray[offset++] = face.length;\n      for (let j = 0; j < face.length; j++) {\n        cellArray[offset++] = face[j];\n      }\n    }\n    output.setPolys(vtkCellArray.newInstance({\n      values: cellArray,\n      name: 'faces'\n    }));\n    outData[0] = output;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Make this a VTK object\n  macro.obj(publicAPI, model);\n\n  // Also make it an algorithm with one input and one output\n  macro.algo(publicAPI, model, 1, 1);\n\n  // Object specific methods\n  vtkClosedPolyLineToSurfaceFilter(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkClosedPolyLineToSurfaceFilter');\n\n// ----------------------------------------------------------------------------\n\nvar vtkClosedPolyLineToSurfaceFilter$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkClosedPolyLineToSurfaceFilter$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkCubeSource from '../Sources/CubeSource.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageDataOutlineFilter methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageDataOutlineFilter(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageDataOutlineFilter');\n\n  // Capture \"parentClass\" api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.requestData = (inData, outData) => {\n    // implement requestData\n    const input = inData[0];\n    if (!input || !input.isA('vtkImageData')) {\n      vtkErrorMacro('Invalid or missing input');\n      return;\n    }\n\n    // First create a cube polydata in the index-space of the image.\n    // The benefit of using `getSpatialExtent` call is that it automatically\n    // takes care of 0.5 voxel padding as required by an vtkImageData representation.\n    const spatialExt = input.getSpatialExtent();\n    if (!spatialExt) {\n      vtkErrorMacro('Unable to fetch spatial extents of input image.');\n      return;\n    }\n    model._cubeSource.setBounds(spatialExt);\n\n    // Then apply index-to-world transform to the cube to create the outline.\n    model._cubeSource.setMatrix(input.getIndexToWorld());\n    outData[0] = model._cubeSource.getOutputData();\n  };\n  publicAPI.getMTime = () => Math.max(superClass.getMTime(), model._cubeSource.getMTime());\n\n  // Forward calls for [set/get]Generate[Faces/Lines] functions to cubeSource:\n  publicAPI.setGenerateFaces = model._cubeSource.setGenerateFaces;\n  publicAPI.setGenerateLines = model._cubeSource.setGenerateLines;\n  publicAPI.getGenerateFaces = model._cubeSource.getGenerateFaces;\n  publicAPI.getGenerateLines = model._cubeSource.getGenerateLines;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Make this a VTK object\n  macro.obj(publicAPI, model);\n\n  // Also make it an algorithm with one input and one output\n  macro.algo(publicAPI, model, 1, 1);\n\n  // Internal persistent objects\n  model._cubeSource = vtkCubeSource.newInstance();\n  macro.moveToProtected(publicAPI, model, ['cubeSource', 'tmpOut']);\n\n  // Object specific methods\n  vtkImageDataOutlineFilter(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageDataOutlineFilter');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageDataOutlineFilter$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageDataOutlineFilter$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// prettier-ignore\nconst LINE_ARRAY = [2, 0, 1, 2, 2, 3, 2, 4, 5, 2, 6, 7, 2, 0, 2, 2, 1, 3, 2, 4, 6, 2, 5, 7, 2, 0, 4, 2, 1, 5, 2, 2, 6, 2, 3, 7];\n\n// prettier-ignore\nconst POLY_ARRAY = [4, 0, 1, 3, 2, 4, 4, 6, 7, 5, 4, 8, 10, 11, 9, 4, 12, 13, 15, 14, 4, 16, 18, 19, 17, 4, 20, 21, 23, 22];\n\n// ----------------------------------------------------------------------------\n// vtkCubeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCubeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    const polyData = vtkPolyData.newInstance();\n    outData[0] = polyData;\n    const numberOfPoints = 24;\n\n    // Define points\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    polyData.getPoints().setData(points, 3);\n    const normals = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    const normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    polyData.getPointData().setNormals(normalArray);\n    let tcdim = 2;\n    if (model.generate3DTextureCoordinates === true) {\n      tcdim = 3;\n    }\n    const textureCoords = macro.newTypedArray(model.pointType, numberOfPoints * tcdim);\n    const tcoords = vtkDataArray.newInstance({\n      name: 'TextureCoordinates',\n      values: textureCoords,\n      numberOfComponents: tcdim\n    });\n    polyData.getPointData().setTCoords(tcoords);\n    const x = [0.0, 0.0, 0.0];\n    const n = [0.0, 0.0, 0.0];\n    const tc = [0.0, 0.0];\n    let pointIndex = 0;\n    x[0] = -model.xLength / 2.0;\n    n[0] = -1.0;\n    n[1] = 0.0;\n    n[2] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[2] = -model.zLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[0] = (x[2] + 0.5) * (1 - 2 * i);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[0] += model.xLength;\n      n[0] += 2.0;\n    }\n    x[1] = -model.yLength / 2.0;\n    n[1] = -1.0;\n    n[0] = 0.0;\n    n[2] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[0] = -model.xLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[0] = (x[0] + 0.5) * (2 * i - 1);\n        x[2] = -model.zLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[1] = (x[2] + 0.5) * -1;\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[0] += model.xLength;\n      }\n      x[1] += model.yLength;\n      n[1] += 2.0;\n    }\n    x[2] = -model.zLength / 2.0;\n    n[2] = -1.0;\n    n[0] = 0.0;\n    n[1] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[0] = -model.xLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[0] = (x[0] + 0.5) * (2 * i - 1);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * k - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * i - 1;\n          }\n          pointIndex++;\n          x[0] += model.xLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[2] += model.zLength;\n      n[2] += 2.0;\n    }\n\n    // Apply rotation to the points coordinates and normals\n    if (model.rotations) {\n      vtkMatrixBuilder.buildFromDegree().rotateX(model.rotations[0]).rotateY(model.rotations[1]).rotateZ(model.rotations[2]).apply(points).apply(normals);\n    }\n\n    // Apply transformation to the points coordinates\n    if (model.center) {\n      vtkMatrixBuilder.buildFromRadian().translate(...model.center).apply(points);\n    }\n\n    // Apply optional additionally specified matrix transformation\n    if (model.matrix) {\n      vtkMatrixBuilder.buildFromRadian().setMatrix(model.matrix).apply(points);\n\n      // prettier-ignore\n      const rotMatrix = [model.matrix[0], model.matrix[1], model.matrix[2], 0, model.matrix[4], model.matrix[5], model.matrix[6], 0, model.matrix[8], model.matrix[9], model.matrix[10], 0, 0, 0, 0, 1];\n      vtkMatrixBuilder.buildFromRadian().setMatrix(rotMatrix).apply(normals);\n    }\n\n    // Lastly, generate the necessary cell arrays.\n    if (model.generateFaces) {\n      polyData.getPolys().deepCopy(model._polys);\n    } else {\n      polyData.getPolys().initialize();\n    }\n    if (model.generateLines) {\n      polyData.getLines().deepCopy(model._lineCells);\n      // only set normals for faces, not for lines.\n      polyData.getPointData().setNormals(null);\n    } else {\n      polyData.getLines().initialize();\n    }\n    polyData.modified();\n  }\n  publicAPI.setBounds = function () {\n    let boundsArray = [];\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      boundsArray = arguments.length <= 0 ? undefined : arguments[0];\n    } else {\n      for (let i = 0; i < arguments.length; i++) {\n        boundsArray.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    }\n    if (boundsArray.length !== 6) {\n      return;\n    }\n    publicAPI.setXLength(boundsArray[1] - boundsArray[0]);\n    publicAPI.setYLength(boundsArray[3] - boundsArray[2]);\n    publicAPI.setZLength(boundsArray[5] - boundsArray[4]);\n    publicAPI.setCenter([(boundsArray[0] + boundsArray[1]) / 2.0, (boundsArray[2] + boundsArray[3]) / 2.0, (boundsArray[4] + boundsArray[5]) / 2.0]);\n  };\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  xLength: 1.0,\n  yLength: 1.0,\n  zLength: 1.0,\n  pointType: 'Float64Array',\n  generate3DTextureCoordinates: false,\n  generateFaces: true,\n  generateLines: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['xLength', 'yLength', 'zLength', 'generate3DTextureCoordinates', 'generateFaces', 'generateLines']);\n  macro.setGetArray(publicAPI, model, ['center', 'rotations'], 3);\n  macro.setGetArray(publicAPI, model, ['matrix'], 16);\n\n  // Internal persistent/static objects\n  model._polys = vtkCellArray.newInstance({\n    values: Uint16Array.from(POLY_ARRAY)\n  });\n  model._lineCells = vtkCellArray.newInstance({\n    values: Uint16Array.from(LINE_ARRAY)\n  });\n  macro.moveToProtected(publicAPI, model, ['polys', 'lineCells']);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCubeSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCubeSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCubeSource$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkCubeSource$1 as default, extend, newInstance };\n","/**\n * Converts a binary buffer in an ArrayBuffer to a string.\n *\n * Note this does not take encoding into consideration, so don't\n * expect proper Unicode or any other encoding.\n */\nfunction arrayBufferToString(arrayBuffer) {\n  const decoder = new TextDecoder('latin1');\n  return decoder.decode(arrayBuffer);\n}\n\n/**\n * Extracts binary data out of a file ArrayBuffer given a prefix/suffix.\n */\nfunction extractBinary(arrayBuffer, prefixRegex) {\n  let suffixRegex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const str = arrayBufferToString(arrayBuffer);\n  const prefixMatch = prefixRegex.exec(str);\n  if (!prefixMatch) {\n    return {\n      text: str\n    };\n  }\n  const dataStartIndex = prefixMatch.index + prefixMatch[0].length;\n  const strFirstHalf = str.substring(0, dataStartIndex);\n  let retVal = null;\n  const suffixMatch = suffixRegex ? suffixRegex.exec(str) : null;\n  if (suffixMatch) {\n    const strSecondHalf = str.substr(suffixMatch.index);\n    retVal = {\n      text: strFirstHalf + strSecondHalf,\n      binaryBuffer: arrayBuffer.slice(dataStartIndex, suffixMatch.index)\n    };\n  } else {\n    // no suffix, so just take all the data starting from dataStartIndex\n    retVal = {\n      text: strFirstHalf,\n      binaryBuffer: arrayBuffer.slice(dataStartIndex)\n    };\n  }\n  return retVal;\n}\nvar BinaryHelper = {\n  arrayBufferToString,\n  extractBinary\n};\n\nexport { BinaryHelper as default };\n","const TYPE_MAPPING = {};\nfunction has(type) {\n  return !!TYPE_MAPPING[type];\n}\nfunction get() {\n  let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return TYPE_MAPPING[type](options);\n}\nfunction registerType(type, fn) {\n  TYPE_MAPPING[type] = fn;\n}\nvar DataAccessHelper = {\n  get,\n  has,\n  registerType\n};\n\nexport { DataAccessHelper as default, get, has, registerType };\n","import { m as macro } from '../../../macros2.js';\nimport Endian from '../../../Common/Core/Endian.js';\nimport { DataTypeByteSize } from '../../../Common/Core/DataArray/Constants.js';\nimport { has, registerType } from '../DataAccessHelper.js';\n\nconst {\n  vtkErrorMacro,\n  vtkDebugMacro\n} = macro;\nconst REJECT_COMPRESSION = () => {\n  vtkErrorMacro('LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.');\n  return Promise.reject(new Error('LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.'));\n};\n\n/* eslint-disable prefer-promise-reject-errors */\nlet requestCount = 0;\nfunction openAsyncXHR(method, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const xhr = new XMLHttpRequest();\n  xhr.open(method, url, true);\n  if (options.headers) {\n    Object.entries(options.headers).forEach(_ref => {\n      let [key, value] = _ref;\n      return xhr.setRequestHeader(key, value);\n    });\n  }\n  if (options.progressCallback) {\n    xhr.addEventListener('progress', options.progressCallback);\n  }\n  return xhr;\n}\nfunction fetchBinary(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n    xhr.onreadystatechange = e => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            xhr,\n            e\n          });\n        }\n      }\n    };\n\n    // Make request\n    xhr.responseType = 'arraybuffer';\n    xhr.send();\n  });\n}\nfunction fetchArray(instance, baseURL, array) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n  if (array.ref && !array.ref.pending) {\n    return new Promise((resolve, reject) => {\n      const url = [baseURL, array.ref.basepath, array.ref.id].join('/');\n      const xhr = openAsyncXHR('GET', url, options);\n      xhr.onreadystatechange = e => {\n        if (xhr.readyState === 1) {\n          array.ref.pending = true;\n          if (++requestCount === 1 && instance?.invokeBusy) {\n            instance.invokeBusy(true);\n          }\n        }\n        if (xhr.readyState === 4) {\n          array.ref.pending = false;\n          if (xhr.status === 200 || xhr.status === 0) {\n            array.buffer = xhr.response;\n            if (array.ref.encode === 'JSON') {\n              array.values = JSON.parse(array.buffer);\n            } else {\n              if (Endian.ENDIANNESS !== array.ref.encode && Endian.ENDIANNESS) {\n                // Need to swap bytes\n                vtkDebugMacro(`Swap bytes of ${array.name}`);\n                Endian.swapBytes(array.buffer, DataTypeByteSize[array.dataType]);\n              }\n              array.values = macro.newTypedArray(array.dataType, array.buffer);\n            }\n            if (array.values.length !== array.size) {\n              vtkErrorMacro(`Error in FetchArray: ${array.name}, does not have the proper array size. Got ${array.values.length}, instead of ${array.size}`);\n            }\n\n            // Done with the ref and work\n            delete array.ref;\n            if (--requestCount === 0 && instance?.invokeBusy) {\n              instance.invokeBusy(false);\n            }\n            if (instance?.modified) {\n              instance.modified();\n            }\n            resolve(array);\n          } else {\n            reject({\n              xhr,\n              e\n            });\n          }\n        }\n      };\n\n      // Make request\n      xhr.responseType = array.dataType !== 'string' ? 'arraybuffer' : 'text';\n      xhr.send();\n    });\n  }\n  return Promise.resolve(array);\n}\n\n// ----------------------------------------------------------------------------\n\nfunction fetchJSON(instance, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n    xhr.onreadystatechange = e => {\n      if (xhr.readyState === 1) {\n        if (++requestCount === 1 && instance?.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n      }\n      if (xhr.readyState === 4) {\n        if (--requestCount === 0 && instance?.invokeBusy) {\n          instance.invokeBusy(false);\n        }\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(JSON.parse(xhr.responseText));\n        } else {\n          reject({\n            xhr,\n            e\n          });\n        }\n      }\n    };\n\n    // Make request\n    xhr.responseType = 'text';\n    xhr.send();\n  });\n}\n\n// ----------------------------------------------------------------------------\n\nfunction fetchText(instance, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n    xhr.onreadystatechange = e => {\n      if (xhr.readyState === 1) {\n        if (++requestCount === 1 && instance?.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n      }\n      if (xhr.readyState === 4) {\n        if (--requestCount === 0 && instance?.invokeBusy) {\n          instance.invokeBusy(false);\n        }\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(xhr.responseText);\n        } else {\n          reject({\n            xhr,\n            e\n          });\n        }\n      }\n    };\n\n    // Make request\n    xhr.responseType = 'text';\n    xhr.send();\n  });\n}\n\n// ----------------------------------------------------------------------------\n\nfunction fetchImage(instance, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    if (options.crossOrigin) {\n      img.crossOrigin = options.crossOrigin;\n    }\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n/* eslint-enable prefer-promise-reject-errors */\n\n// ----------------------------------------------------------------------------\n\nconst LiteHttpDataAccessHelper = {\n  fetchArray,\n  fetchJSON,\n  fetchText,\n  fetchBinary,\n  // Only for HTTP\n  fetchImage\n};\n\n// The lite version should never override a full feature one...\nif (!has('http')) {\n  registerType('http', options => LiteHttpDataAccessHelper);\n}\n\nexport { LiteHttpDataAccessHelper as default };\n","import BinaryHelper from '../Core/BinaryHelper.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\nconst PLYFormats = {\n  ASCII: 'ascii',\n  BINARY_BIG_ENDIAN: 'binary_big_endian',\n  BINARY_LITTLE_ENDIAN: 'binary_little_endian'\n};\nconst mapping = {\n  diffuse_red: 'red',\n  diffuse_green: 'green',\n  diffuse_blue: 'blue'\n};\nconst patterns = {\n  patternHeader: /ply([\\s\\S]*)end_header\\r?\\n/,\n  patternBody: /end_header\\s([\\s\\S]*)$/\n};\nfunction parseHeader(data) {\n  let headerText = '';\n  let headerLength = 0;\n  const result = patterns.patternHeader.exec(data);\n  if (result !== null) {\n    headerText = result[1];\n    headerLength = result[0].length;\n  }\n  const header = {\n    comments: [],\n    elements: [],\n    headerLength\n  };\n  const lines = headerText.split('\\n');\n  let elem;\n  let lineType;\n  let lineValues;\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trim();\n    if (line !== '') {\n      let property;\n      lineValues = line.split(/\\s+/);\n      lineType = lineValues.shift();\n      line = lineValues.join(' ');\n      switch (lineType) {\n        case 'format':\n          header.format = lineValues[0];\n          header.version = lineValues[1];\n          break;\n        case 'comment':\n          header.comments.push(line);\n          break;\n        case 'element':\n          if (elem !== undefined) {\n            header.elements.push(elem);\n          }\n          elem = {};\n          elem.name = lineValues[0];\n          elem.count = parseInt(lineValues[1], 10);\n          elem.properties = [];\n          break;\n        case 'property':\n          property = {\n            type: lineValues[0]\n          };\n          if (property.type === 'list') {\n            property.name = lineValues[3];\n            property.countType = lineValues[1];\n            property.itemType = lineValues[2];\n          } else {\n            property.name = lineValues[1];\n          }\n          if (property.name in mapping) {\n            property.name = mapping[property.name];\n          }\n          elem.properties.push(property);\n          break;\n        case 'obj_info':\n          header.objInfo = line;\n          break;\n        default:\n          console.warn('unhandled', lineType, lineValues);\n          break;\n      }\n    }\n  }\n  if (elem !== undefined) {\n    header.elements.push(elem);\n  }\n  return header;\n}\nfunction postProcess(buffer, elements) {\n  const vertElement = elements.find(element => element.name === 'vertex');\n  const faceElement = elements.find(element => element.name === 'face');\n  let nbVerts = 0;\n  let nbFaces = 0;\n  if (vertElement) {\n    nbVerts = vertElement.count;\n  }\n  if (faceElement) {\n    nbFaces = faceElement.count;\n  }\n  const pointValues = new Float32Array(nbVerts * 3);\n  const colorArray = new Uint8Array(nbVerts * 3);\n  const tcoordsArray = new Float32Array(nbVerts * 2);\n  const normalsArray = new Float32Array(nbVerts * 3);\n  const hasColor = buffer.colors.length > 0;\n  const hasVertTCoords = buffer.uvs.length > 0;\n  const hasNorms = buffer.normals.length > 0;\n  const hasFaceTCoords = buffer.faceVertexUvs.length > 0;\n  for (let vertIdx = 0; vertIdx < nbVerts; vertIdx++) {\n    let a = vertIdx * 3 + 0;\n    let b = vertIdx * 3 + 1;\n    const c = vertIdx * 3 + 2;\n    pointValues[a] = buffer.vertices[a];\n    pointValues[b] = buffer.vertices[b];\n    pointValues[c] = buffer.vertices[c];\n    if (hasColor) {\n      colorArray[a] = buffer.colors[a];\n      colorArray[b] = buffer.colors[b];\n      colorArray[c] = buffer.colors[c];\n    }\n    if (hasVertTCoords) {\n      a = vertIdx * 2 + 0;\n      b = vertIdx * 2 + 1;\n      tcoordsArray[a] = buffer.uvs[a];\n      tcoordsArray[b] = buffer.uvs[b];\n    }\n    if (hasNorms) {\n      normalsArray[a] = buffer.normals[a];\n      normalsArray[b] = buffer.normals[b];\n      normalsArray[c] = buffer.normals[c];\n    }\n  }\n  if (!hasVertTCoords && hasFaceTCoords) {\n    // don't use array.shift, because buffer.indices will be used later\n    let idxVerts = 0;\n    let idxCoord = 0;\n    for (let faceIdx = 0; faceIdx < nbFaces; ++faceIdx) {\n      const nbFaceVerts = buffer.indices[idxVerts++];\n      const texcoords = buffer.faceVertexUvs[idxCoord++];\n      if (texcoords && nbFaceVerts * 2 === texcoords.length) {\n        // grab the vertex index\n        for (let vertIdx = 0; vertIdx < nbFaceVerts; ++vertIdx) {\n          const vert = buffer.indices[idxVerts++];\n          // new texture stored at the current face\n          tcoordsArray[vert * 2 + 0] = texcoords[vertIdx * 2 + 0];\n          tcoordsArray[vert * 2 + 1] = texcoords[vertIdx * 2 + 1];\n        }\n      } else {\n        idxVerts += nbFaceVerts;\n      }\n    }\n  }\n  const polydata = vtkPolyData.newInstance();\n  polydata.getPoints().setData(pointValues, 3);\n  if (hasColor) {\n    polydata.getPointData().setScalars(vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: colorArray,\n      name: 'Scalars'\n    }));\n  }\n  if (hasVertTCoords || hasFaceTCoords) {\n    const da = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordsArray,\n      name: 'TextureCoordinates'\n    });\n    const cpd = polydata.getPointData();\n    cpd.addArray(da);\n    cpd.setActiveTCoords(da.getName());\n  }\n  if (hasNorms) {\n    polydata.getPointData().setNormals(vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      name: 'Normals',\n      values: normalsArray\n    }));\n  }\n  polydata.getPolys().setData(Uint32Array.from(buffer.indices));\n  return polydata;\n}\nfunction parseNumber(n, type) {\n  let r;\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'short':\n    case 'ushort':\n    case 'int':\n    case 'uint':\n    case 'int8':\n    case 'uint8':\n    case 'int16':\n    case 'uint16':\n    case 'int32':\n    case 'uint32':\n      r = parseInt(n, 10);\n      break;\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      r = parseFloat(n);\n      break;\n    default:\n      console.log('Unsupported type');\n      break;\n  }\n  return r;\n}\nfunction parseElement(properties, line) {\n  const values = line.split(/\\s+/);\n  const element = {};\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list = [];\n      const n = parseNumber(values.shift(), properties[i].countType);\n      for (let j = 0; j < n; j++) {\n        list.push(parseNumber(values.shift(), properties[i].itemType));\n      }\n      element[properties[i].name] = list;\n    } else {\n      element[properties[i].name] = parseNumber(values.shift(), properties[i].type);\n    }\n  }\n  return element;\n}\nfunction handleElement(buffer, name, element) {\n  if (name === 'vertex') {\n    buffer.vertices.push(element.x, element.y, element.z);\n\n    // Normals\n    if ('nx' in element && 'ny' in element && 'nz' in element) {\n      buffer.normals.push(element.nx, element.ny, element.nz);\n    }\n\n    // Uvs\n    if ('s' in element && 't' in element) {\n      buffer.uvs.push(element.s, element.t);\n    } else if ('u' in element && 'v' in element) {\n      buffer.uvs.push(element.u, element.v);\n    } else if ('texture_u' in element && 'texture_v' in element) {\n      buffer.uvs.push(element.texture_u, element.texture_v);\n    }\n\n    // Colors\n    if ('red' in element && 'green' in element && 'blue' in element) {\n      buffer.colors.push(element.red, element.green, element.blue);\n    }\n  } else if (name === 'face') {\n    const vertexIndices = element.vertex_indices || element.vertex_index;\n    const texcoord = element.texcoord;\n    if (vertexIndices && vertexIndices.length > 0) {\n      buffer.indices.push(vertexIndices.length);\n      vertexIndices.forEach((val, idx) => {\n        buffer.indices.push(val);\n      });\n    }\n    buffer.faceVertexUvs.push(texcoord);\n  }\n}\nfunction binaryRead(dataview, at, type, littleEndian) {\n  let r;\n  switch (type) {\n    case 'int8':\n    case 'char':\n      r = [dataview.getInt8(at), 1];\n      break;\n    case 'uint8':\n    case 'uchar':\n      r = [dataview.getUint8(at), 1];\n      break;\n    case 'int16':\n    case 'short':\n      r = [dataview.getInt16(at, littleEndian), 2];\n      break;\n    case 'uint16':\n    case 'ushort':\n      r = [dataview.getUint16(at, littleEndian), 2];\n      break;\n    case 'int32':\n    case 'int':\n      r = [dataview.getInt32(at, littleEndian), 4];\n      break;\n    case 'uint32':\n    case 'uint':\n      r = [dataview.getUint32(at, littleEndian), 4];\n      break;\n    case 'float32':\n    case 'float':\n      r = [dataview.getFloat32(at, littleEndian), 4];\n      break;\n    case 'float64':\n    case 'double':\n      r = [dataview.getFloat64(at, littleEndian), 8];\n      break;\n    default:\n      console.log('Unsupported type');\n      break;\n  }\n  return r;\n}\nfunction binaryReadElement(dataview, at, properties, littleEndian) {\n  const element = {};\n  let result;\n  let read = 0;\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list = [];\n      result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);\n      const n = result[0];\n      read += result[1];\n      for (let j = 0; j < n; j++) {\n        result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);\n        list.push(result[0]);\n        read += result[1];\n      }\n      element[properties[i].name] = list;\n    } else {\n      result = binaryRead(dataview, at + read, properties[i].type, littleEndian);\n      element[properties[i].name] = result[0];\n      read += result[1];\n    }\n  }\n  return [element, read];\n}\n\n// ----------------------------------------------------------------------------\n// vtkPLYReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPLYReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPLYReader');\n\n  // Create default dataAccessHelper if not available\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  }\n\n  // Internal method to fetch Array\n  function fetchData(url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      compression,\n      progressCallback\n    } = model;\n    if (option.binary) {\n      return model.dataAccessHelper.fetchBinary(url, {\n        compression,\n        progressCallback\n      });\n    }\n    return model.dataAccessHelper.fetchText(publicAPI, url, {\n      compression,\n      progressCallback\n    });\n  }\n\n  // Set DataSet url\n  publicAPI.setUrl = function (url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      binary: true\n    };\n    model.url = url;\n\n    // Remove the file in the URL\n    const path = url.split('/');\n    path.pop();\n    model.baseURL = path.join('/');\n    model.compression = option.compression;\n\n    // Fetch metadata\n    return publicAPI.loadData({\n      progressCallback: option.progressCallback,\n      binary: !!option.binary\n    });\n  };\n\n  // Fetch the actual data arrays\n  publicAPI.loadData = function () {\n    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const promise = fetchData(model.url, option);\n    promise.then(publicAPI.parse);\n    return promise;\n  };\n  publicAPI.parse = content => {\n    if (typeof content === 'string') {\n      publicAPI.parseAsText(content);\n    } else {\n      publicAPI.parseAsArrayBuffer(content);\n    }\n  };\n  publicAPI.parseAsArrayBuffer = content => {\n    if (!content) {\n      return;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n\n    // Header\n    const text = BinaryHelper.arrayBufferToString(content);\n    const header = parseHeader(text);\n\n    // ascii/binary detection\n    const isBinary = header.format !== PLYFormats.ASCII;\n\n    // Check if ascii format\n    if (!isBinary) {\n      publicAPI.parseAsText(content);\n      return;\n    }\n    model.parseData = content;\n\n    // Binary parsing\n    const buffer = {\n      indices: [],\n      vertices: [],\n      normals: [],\n      uvs: [],\n      faceVertexUvs: [],\n      colors: []\n    };\n    const littleEndian = header.format === PLYFormats.BINARY_LITTLE_ENDIAN;\n    const arraybuffer = content instanceof ArrayBuffer ? content : content.buffer;\n    const body = new DataView(arraybuffer, header.headerLength);\n    let result;\n    let loc = 0;\n    for (let elem = 0; elem < header.elements.length; elem++) {\n      for (let idx = 0; idx < header.elements[elem].count; idx++) {\n        result = binaryReadElement(body, loc, header.elements[elem].properties, littleEndian);\n        loc += result[1];\n        const element = result[0];\n        handleElement(buffer, header.elements[elem].name, element);\n      }\n    }\n    const polydata = postProcess(buffer, header.elements);\n\n    // Add new output\n    model.output[0] = polydata;\n  };\n  publicAPI.parseAsText = content => {\n    if (!content) {\n      return;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n    model.parseData = content;\n\n    // Header\n    const text = BinaryHelper.arrayBufferToString(content);\n    const header = parseHeader(text);\n\n    // ascii/binary detection\n    const isBinary = header.format !== PLYFormats.ASCII;\n\n    // Check if ascii format\n    if (isBinary) {\n      publicAPI.parseAsArrayBuffer(content);\n      return;\n    }\n\n    // Text parsing\n    const buffer = {\n      indices: [],\n      vertices: [],\n      normals: [],\n      uvs: [],\n      faceVertexUvs: [],\n      colors: []\n    };\n    const result = patterns.patternBody.exec(text);\n    let body = '';\n    if (result !== null) {\n      body = result[1];\n    }\n    const lines = body.split('\\n');\n    let elem = 0;\n    let idx = 0;\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      line = line.trim();\n      if (line !== '') {\n        if (idx >= header.elements[elem].count) {\n          elem++;\n          idx = 0;\n        }\n        const element = parseElement(header.elements[elem].properties, line);\n        handleElement(buffer, header.elements[elem].name, element);\n        idx++;\n      }\n    }\n    const polydata = postProcess(buffer, header.elements);\n\n    // Add new output\n    model.output[0] = polydata;\n  };\n  publicAPI.requestData = (inData, outData) => {\n    publicAPI.parse(model.parseData);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1);\n\n  // vtkPLYReader methods\n  vtkPLYReader(publicAPI, model);\n\n  // To support destructuring\n  if (!model.compression) {\n    model.compression = null;\n  }\n  if (!model.progressCallback) {\n    model.progressCallback = null;\n  }\n}\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPLYReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPLYReader$1 = {\n  extend,\n  newInstance\n};\n\nexport { vtkPLYReader$1 as default, extend, newInstance };\n","import BinaryHelper from '../Core/BinaryHelper.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\nconst {\n  vtkErrorMacro\n} = macro;\nfunction parseHeader(headerString) {\n  const headerSubStr = headerString.split(' ');\n  const fieldValues = headerSubStr.filter(e => e.indexOf('=') > -1);\n  const header = {};\n  for (let i = 0; i < fieldValues.length; ++i) {\n    const fieldValueStr = fieldValues[i];\n    const fieldValueSubStr = fieldValueStr.split('=');\n    if (fieldValueSubStr.length === 2) {\n      header[fieldValueSubStr[0]] = fieldValueSubStr[1];\n    }\n  }\n  return header;\n}\nfunction addValuesToArray(src, dst) {\n  for (let i = 0; i < src.length; i++) {\n    dst.push(src[i]);\n  }\n}\n\n// facet normal ni nj nk\n//     outer loop\n//         vertex v1x v1y v1z\n//         vertex v2x v2y v2z\n//         vertex v3x v3y v3z\n//     endloop\n// endfacet\nfunction readTriangle(lines, offset, points, cellArray, cellNormals) {\n  const normalLine = lines[offset];\n  if (normalLine === undefined) {\n    return -1;\n  }\n  if (normalLine.indexOf('endfacet') !== -1) {\n    return offset + 1;\n  }\n  if (normalLine.indexOf('facet') === -1) {\n    return offset + 1; // Move to next line\n  }\n\n  let nbVertex = 0;\n  let nbConsumedLines = 2;\n  const firstVertexIndex = points.length / 3;\n  const normal = normalLine.split(/[ \\t]+/).filter(i => i).slice(-3).map(Number);\n  addValuesToArray(normal, cellNormals);\n  while (lines[offset + nbConsumedLines].indexOf('vertex') !== -1) {\n    const line = lines[offset + nbConsumedLines];\n    const coords = line.split(/[ \\t]+/).filter(i => i).slice(-3).map(Number);\n    addValuesToArray(coords, points);\n    nbVertex++;\n    nbConsumedLines++;\n  }\n  cellArray.push(nbVertex);\n  for (let i = 0; i < nbVertex; i++) {\n    cellArray.push(firstVertexIndex + i);\n  }\n  while (lines[offset + nbConsumedLines] && lines[offset + nbConsumedLines].indexOf('endfacet') !== -1) {\n    nbConsumedLines++;\n  }\n  // +1 (endfacet) +1 (next facet)\n  return offset + nbConsumedLines + 2;\n}\n\n// ----------------------------------------------------------------------------\n// vtkSTLReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSTLReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSTLReader');\n\n  // Create default dataAccessHelper if not available\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  }\n\n  // Internal method to fetch Array\n  function fetchData(url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const compression = option.compression !== undefined ? option.compression : model.compression;\n    const progressCallback = option.progressCallback !== undefined ? option.progressCallback : model.progressCallback;\n    if (option.binary) {\n      return model.dataAccessHelper.fetchBinary(url, {\n        compression,\n        progressCallback\n      });\n    }\n    return model.dataAccessHelper.fetchText(publicAPI, url, {\n      compression,\n      progressCallback\n    });\n  }\n  function removeDuplicateVertices(tolerance) {\n    const polydata = model.output[0];\n    const points = polydata.getPoints().getData();\n    const faces = polydata.getPolys().getData();\n    if (!points || !faces) {\n      console.warn('No valid polydata.');\n      return;\n    }\n    const vMap = new Map();\n    const vIndexMap = new Map();\n    let vInc = 0;\n    let pointsChanged = false;\n    for (let i = 0; i < points.length; i += 3) {\n      const k1 = (points[i] * 10 ** tolerance).toFixed(0);\n      const k2 = (points[i + 1] * 10 ** tolerance).toFixed(0);\n      const k3 = (points[i + 2] * 10 ** tolerance).toFixed(0);\n      const key = `${k1},${k2},${k3}`;\n      if (vMap.get(key) !== undefined) {\n        vIndexMap.set(i / 3, vMap.get(key));\n        pointsChanged = true;\n      } else {\n        vIndexMap.set(i / 3, vInc);\n        vMap.set(key, vInc);\n        vInc++;\n      }\n    }\n    const outVerts = new Float32Array(vMap.size * 3);\n    const keys = Array.from(vMap.keys());\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const j = vMap.get(k) * 3;\n      const coords = k.split(',').map(e => +e * 10 ** -tolerance);\n      outVerts[j] = coords[0];\n      outVerts[j + 1] = coords[1];\n      outVerts[j + 2] = coords[2];\n    }\n    const outFaces = new Int32Array(faces);\n    for (let i = 0; i < faces.length; i += 4) {\n      outFaces[i] = 3;\n      outFaces[i + 1] = vIndexMap.get(faces[i + 1]);\n      outFaces[i + 2] = vIndexMap.get(faces[i + 2]);\n      outFaces[i + 3] = vIndexMap.get(faces[i + 3]);\n    }\n    polydata.getPoints().setData(outVerts);\n    polydata.getPolys().setData(outFaces);\n    if (pointsChanged) {\n      publicAPI.modified();\n    }\n  }\n\n  // Set DataSet url\n  publicAPI.setUrl = function (url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      binary: true\n    };\n    model.url = url;\n\n    // Remove the file in the URL\n    const path = url.split('/');\n    path.pop();\n    model.baseURL = path.join('/');\n\n    // Fetch metadata\n    return publicAPI.loadData(option);\n  };\n\n  // Fetch the actual data arrays\n  publicAPI.loadData = function () {\n    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const promise = fetchData(model.url, option);\n    promise.then(publicAPI.parse);\n    return promise;\n  };\n  publicAPI.parse = content => {\n    if (typeof content === 'string') {\n      publicAPI.parseAsText(content);\n    } else {\n      publicAPI.parseAsArrayBuffer(content);\n    }\n  };\n  publicAPI.parseAsArrayBuffer = content => {\n    if (!content) {\n      return;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n    model.parseData = content;\n\n    // ascii/binary detection\n    let isBinary = false;\n    // 80=STL header, 4=uint32 of num of triangles (le)\n    const dview = new DataView(content, 0, 80 + 4);\n    const numTriangles = dview.getUint32(80, true);\n    // 50 bytes per triangle\n    isBinary = 84 + numTriangles * 50 === content.byteLength;\n\n    // Check if ascii format\n    if (!isBinary) {\n      publicAPI.parseAsText(BinaryHelper.arrayBufferToString(content));\n      return;\n    }\n\n    // Binary parsing\n    // Header\n    const headerData = content.slice(0, 80);\n    const headerStr = BinaryHelper.arrayBufferToString(headerData);\n    const header = parseHeader(headerStr);\n\n    // Data\n    const dataView = new DataView(content, 84);\n    // global.dataview = dataView;\n    const nbFaces = (content.byteLength - 84) / 50;\n    const pointValues = new Float32Array(nbFaces * 9);\n    const normalValues = new Float32Array(nbFaces * 3);\n    const cellValues = new Uint32Array(nbFaces * 4);\n    const cellDataValues = new Uint16Array(nbFaces);\n    let cellOffset = 0;\n    for (let faceIdx = 0; faceIdx < nbFaces; faceIdx++) {\n      const offset = faceIdx * 50;\n      normalValues[faceIdx * 3 + 0] = dataView.getFloat32(offset + 0, true);\n      normalValues[faceIdx * 3 + 1] = dataView.getFloat32(offset + 4, true);\n      normalValues[faceIdx * 3 + 2] = dataView.getFloat32(offset + 8, true);\n      pointValues[faceIdx * 9 + 0] = dataView.getFloat32(offset + 12, true);\n      pointValues[faceIdx * 9 + 1] = dataView.getFloat32(offset + 16, true);\n      pointValues[faceIdx * 9 + 2] = dataView.getFloat32(offset + 20, true);\n      pointValues[faceIdx * 9 + 3] = dataView.getFloat32(offset + 24, true);\n      pointValues[faceIdx * 9 + 4] = dataView.getFloat32(offset + 28, true);\n      pointValues[faceIdx * 9 + 5] = dataView.getFloat32(offset + 32, true);\n      pointValues[faceIdx * 9 + 6] = dataView.getFloat32(offset + 36, true);\n      pointValues[faceIdx * 9 + 7] = dataView.getFloat32(offset + 40, true);\n      pointValues[faceIdx * 9 + 8] = dataView.getFloat32(offset + 44, true);\n      cellValues[cellOffset++] = 3;\n      cellValues[cellOffset++] = faceIdx * 3 + 0;\n      cellValues[cellOffset++] = faceIdx * 3 + 1;\n      cellValues[cellOffset++] = faceIdx * 3 + 2;\n      cellDataValues[faceIdx] = dataView.getUint16(offset + 48, true);\n    }\n\n    // Rotate points\n    const orientationField = 'SPACE';\n    if (orientationField in header && header[orientationField] !== 'LPS') {\n      const XYZ = header[orientationField];\n      const mat4 = new Float32Array(16);\n      mat4[15] = 1;\n      switch (XYZ[0]) {\n        case 'L':\n          mat4[0] = 1;\n          break;\n        case 'R':\n          mat4[0] = -1;\n          break;\n        default:\n          vtkErrorMacro(`Can not convert STL file from ${XYZ} to LPS space: ` + `permutations not supported. Use itk.js STL reader instead.`);\n          return;\n      }\n      switch (XYZ[1]) {\n        case 'P':\n          mat4[5] = 1;\n          break;\n        case 'A':\n          mat4[5] = -1;\n          break;\n        default:\n          vtkErrorMacro(`Can not convert STL file from ${XYZ} to LPS space: ` + `permutations not supported. Use itk.js STL reader instead.`);\n          return;\n      }\n      switch (XYZ[2]) {\n        case 'S':\n          mat4[10] = 1;\n          break;\n        case 'I':\n          mat4[10] = -1;\n          break;\n        default:\n          vtkErrorMacro(`Can not convert STL file from ${XYZ} to LPS space: ` + `permutations not supported. Use itk.js STL reader instead.`);\n          return;\n      }\n      vtkMatrixBuilder.buildFromDegree().setMatrix(mat4).apply(pointValues).apply(normalValues);\n    }\n    const polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(pointValues, 3);\n    polydata.getPolys().setData(cellValues);\n    polydata.getCellData().setScalars(vtkDataArray.newInstance({\n      name: 'Attribute',\n      values: cellDataValues\n    }));\n    polydata.getCellData().setNormals(vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normalValues,\n      numberOfComponents: 3\n    }));\n\n    // Add new output\n    model.output[0] = polydata;\n    if (model.removeDuplicateVertices >= 0) {\n      removeDuplicateVertices(model.removeDuplicateVertices);\n    }\n  };\n  publicAPI.parseAsText = content => {\n    if (!content) {\n      return;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n    model.parseData = content;\n    const lines = content.split('\\n');\n    let offset = 1;\n    const points = [];\n    const cellArray = [];\n    const cellNormals = [];\n    while (offset !== -1) {\n      offset = readTriangle(lines, offset, points, cellArray, cellNormals);\n    }\n    const polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(Float32Array.from(points), 3);\n    polydata.getPolys().setData(Uint32Array.from(cellArray));\n    polydata.getCellData().setNormals(vtkDataArray.newInstance({\n      name: 'Normals',\n      values: Float32Array.from(cellNormals),\n      numberOfComponents: 3\n    }));\n\n    // Add new output\n    model.output[0] = polydata;\n    if (model.removeDuplicateVertices >= 0) {\n      removeDuplicateVertices(model.removeDuplicateVertices);\n    }\n  };\n  publicAPI.requestData = (inData, outData) => {\n    publicAPI.parse(model.parseData);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n  removeDuplicateVertices: -1\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper', 'removeDuplicateVertices']);\n  macro.algo(publicAPI, model, 0, 1);\n\n  // vtkSTLReader methods\n  vtkSTLReader(publicAPI, model);\n\n  // To support destructuring\n  if (!model.compression) {\n    model.compression = null;\n  }\n  if (!model.progressCallback) {\n    model.progressCallback = null;\n  }\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkSTLReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkSTLReader$1 = {\n  extend,\n  newInstance\n};\n\nexport { vtkSTLReader$1 as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, g as get, e as setGet, f as event } from '../../macros2.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport vtkTexture from '../../Rendering/Core/Texture.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\n// ----------------------------------------------------------------------------\n// vtkMTLReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMTLReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkMTLReader');\n  function imageReady() {\n    model.requestCount--;\n    if (model.requestCount === 0) {\n      publicAPI.invokeBusy(false);\n    }\n  }\n  function parseLine(line) {\n    if (line[0] === '#' || line.length === 0) {\n      return;\n    }\n    const tokens = line.split(/[ \\t]+/).map(s => s.trim()).filter(s => s.length);\n    if (tokens[0] === 'newmtl') {\n      tokens.shift();\n      model.currentMaterial = tokens.join(' ').trim();\n    } else if (model.currentMaterial) {\n      if (tokens.length < 2) {\n        return;\n      }\n      if (!model.materials[model.currentMaterial]) {\n        model.materials[model.currentMaterial] = {};\n      }\n      model.materials[model.currentMaterial][tokens[0]] = tokens.slice(1);\n      if (tokens[0] === 'map_Kd') {\n        const image = new Image();\n        image.onload = () => setTimeout(imageReady, 0);\n        image.src = [model.baseURL, tokens[1]].join('/');\n        model.materials[model.currentMaterial].image = image;\n        model.requestCount++;\n      }\n    }\n  }\n\n  // Create default dataAccessHelper if not available\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  }\n\n  // Internal method to fetch Array\n  function fetchData(url, options) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, options);\n  }\n\n  // Set DataSet url\n  publicAPI.setUrl = function (url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (url.indexOf('.mtl') === -1 && !option.fullpath) {\n      model.baseURL = url;\n      model.url = `${url}/index.mtl`;\n    } else {\n      model.url = url;\n\n      // Remove the file in the URL\n      const path = url.split('/');\n      path.pop();\n      model.baseURL = path.join('/');\n    }\n\n    // Fetch metadata\n    return publicAPI.loadData(option);\n  };\n\n  // Fetch the actual data arrays\n  publicAPI.loadData = option => new Promise((resolve, reject) => {\n    fetchData(model.url, option).then(content => {\n      publicAPI.parseAsText(content);\n      resolve();\n    }, err => {\n      reject();\n    });\n  });\n  publicAPI.parseAsText = content => {\n    publicAPI.modified();\n    model.materials = {};\n    content.split('\\n').forEach(parseLine);\n  };\n\n  // return Busy state\n  publicAPI.isBusy = () => !!model.requestCount;\n  publicAPI.getMaterialNames = () => Object.keys(model.materials);\n  publicAPI.getMaterial = name => model.materials[name];\n  publicAPI.listImages = () => Object.keys(model.materials).map(name => model.materials[name].map_Kd).filter(fileName => !!fileName).map(s => s[0].trim());\n  publicAPI.setImageSrc = (imagePath, src) => new Promise((resolve, reject) => {\n    const selectedName = Object.keys(model.materials).find(name => model.materials[name].map_Kd && model.materials[name].map_Kd[0].trim() === imagePath.trim());\n    const material = model.materials[selectedName];\n    if (material && material.image) {\n      material.image.src = src;\n      material.image.onload = () => setTimeout(resolve, 0);\n    } else {\n      resolve();\n    }\n  });\n  publicAPI.applyMaterialToActor = (name, actor) => {\n    const material = model.materials[name];\n    if (material && actor) {\n      const white = [1, 1, 1];\n      const actorProp = {\n        ambientColor: material.Ka ? material.Ka.map(i => Number(i)) : white,\n        specularColor: material.Ks ? material.Ks.map(i => Number(i)) : white,\n        diffuseColor: material.Kd ? material.Kd.map(i => Number(i)) : white,\n        opacity: material.d ? Number(material.d) : 1,\n        specularPower: material.Ns ? Number(material.Ns) : 1\n      };\n      const illum = Number(material.illum || 2);\n      ['ambient', 'diffuse', 'specular'].forEach((k, idx) => {\n        actorProp[k] = idx <= illum ? 1.0 : 0.0;\n      });\n      if (material.image) {\n        const texture = vtkTexture.newInstance({\n          interpolate: model.interpolateTextures\n        });\n        texture.setImage(material.image);\n        actor.addTexture(texture);\n      }\n      actor.getProperty().set(actorProp);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  numberOfOutputs: 1,\n  requestCount: 0,\n  materials: {},\n  interpolateTextures: true\n  // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  obj(publicAPI, model);\n  get(publicAPI, model, ['url', 'baseURL']);\n  setGet(publicAPI, model, ['dataAccessHelper', 'interpolateTextures', 'splitGroup']);\n  event(publicAPI, model, 'busy');\n\n  // Object methods\n  vtkMTLReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkMTLReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkMTLReader$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkMTLReader$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\n// ----------------------------------------------------------------------------\n\nconst data = {};\n\n// ----------------------------------------------------------------------------\n\nfunction copyVector(src, srcOffset, dst, dstOffset, vectorSize) {\n  for (let i = 0; i < vectorSize; i++) {\n    dst[dstOffset + i] = src[srcOffset + i];\n  }\n}\n\n// ----------------------------------------------------------------------------\n\nfunction begin(splitMode) {\n  data.splitOn = splitMode;\n  data.pieces = [];\n  data.v = [];\n  data.vt = [];\n  data.vn = [];\n  data.f = [[]];\n  data.size = 0;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction faceMap(str) {\n  const idxs = str.split('/').map(i => Number(i));\n  let vertexIdx = idxs[0] - 1;\n  vertexIdx = vertexIdx < 0 ? vertexIdx + 1 + data.v.length / 3 : vertexIdx;\n  let textCoordIdx = idxs[1] ? idxs[1] - 1 : vertexIdx;\n  textCoordIdx = textCoordIdx < 0 ? textCoordIdx + 1 + data.vt.length / 2 : textCoordIdx;\n  let vertexNormal = idxs[2] ? idxs[2] - 1 : vertexIdx;\n  vertexNormal = vertexNormal < 0 ? vertexNormal + 1 + data.vn.length / 3 : vertexNormal;\n  return [vertexIdx, textCoordIdx, vertexNormal];\n}\n\n// ----------------------------------------------------------------------------\n\nfunction parseLine(line) {\n  if (line[0] === '#') {\n    return;\n  }\n  const tokens = line.split(/[ \\t]+/);\n  if (tokens[0] === data.splitOn) {\n    tokens.shift();\n    data.pieces.push(tokens.join(' ').trim());\n    data.f.push([]);\n    data.size++;\n  } else if (tokens[0] === 'v') {\n    data.v.push(Number(tokens[1]));\n    data.v.push(Number(tokens[2]));\n    data.v.push(Number(tokens[3]));\n  } else if (tokens[0] === 'vt') {\n    data.vt.push(Number(tokens[1]));\n    data.vt.push(Number(tokens[2]));\n  } else if (tokens[0] === 'vn') {\n    data.vn.push(Number(tokens[1]));\n    data.vn.push(Number(tokens[2]));\n    data.vn.push(Number(tokens[3]));\n  } else if (tokens[0] === 'f') {\n    // Handle triangles for now\n    if (data.size === 0) {\n      data.size++;\n    }\n    const cells = data.f[data.size - 1];\n    tokens.shift();\n    const faces = tokens.filter(s => s.length > 0 && s !== '\\r');\n    const size = faces.length;\n    cells.push(size);\n    for (let i = 0; i < size; i++) {\n      cells.push(faceMap(faces[i]));\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n\nfunction end(model) {\n  const hasTcoords = !!data.vt.length;\n  const hasNormals = !!data.vn.length;\n  if (model.splitMode) {\n    model.numberOfOutputs = data.size;\n    for (let idx = 0; idx < data.size; idx++) {\n      const polyIn = data.f[idx];\n      const nbElems = polyIn.length;\n      const nbPoints = data.v.length / 3;\n      const keyPointId = {};\n      let pointDuplicatesReferences;\n      if (model.trackDuplicates) {\n        // In trackDuplicates mode, we want the following point layout:\n        // [pt0, pt1, pt2, ... ptN, pt0d1, pt0d2, pt1d1]\n        const pointKeys = [];\n        let duplicatesCount = 0;\n        for (let offset = 0; offset < nbElems;) {\n          const cellSize = polyIn[offset++];\n          for (let pIdx = 0; pIdx < cellSize; pIdx++) {\n            const [vIdx, tcIdx, nIdx] = polyIn[offset++];\n            const key = `${vIdx}/${tcIdx}/${nIdx}`;\n            if (keyPointId[key] === undefined) {\n              if (pointKeys[vIdx] === undefined) {\n                pointKeys[vIdx] = [key];\n              } else {\n                pointKeys[vIdx].push(key);\n                ++duplicatesCount;\n              }\n              // will be overwritten for duplicates\n              keyPointId[key] = vIdx;\n            }\n          }\n        }\n        pointDuplicatesReferences = new Uint16Array(nbPoints + duplicatesCount);\n        let duplicates = 0;\n        for (let pointId = 0; pointId < pointKeys.length; ++pointId) {\n          const usageCount = pointKeys[pointId] ? pointKeys[pointId].length : 0;\n          // Set the first duplicate index on the original point\n          pointDuplicatesReferences[pointId] = usageCount > 1 ? nbPoints + duplicates : pointId;\n          // Set the original index on each duplicated point\n          for (let duplicateId = 1; duplicateId < usageCount; ++duplicateId) {\n            const finalDuplicateId = nbPoints + duplicates++;\n            pointDuplicatesReferences[finalDuplicateId] = pointId;\n            // Associate the duplicate index to the key\n            keyPointId[pointKeys[pointId][duplicateId]] = finalDuplicateId;\n          }\n        }\n      }\n      const ctMapping = {};\n      const polydata = vtkPolyData.newInstance({\n        name: data.pieces[idx]\n      });\n      const pts = [];\n      const tc = [];\n      const normals = [];\n      const polys = [];\n      let offset = 0;\n      while (offset < nbElems) {\n        const cellSize = polyIn[offset];\n        polys.push(cellSize);\n        for (let pIdx = 0; pIdx < cellSize; pIdx++) {\n          const [vIdx, tcIdx, nIdx] = polyIn[offset + pIdx + 1];\n          const key = `${vIdx}/${tcIdx}/${nIdx}`;\n          if (ctMapping[key] === undefined) {\n            const dstOffset = model.trackDuplicates ? keyPointId[key] : pts.length / 3;\n            ctMapping[key] = dstOffset;\n            copyVector(data.v, vIdx * 3, pts, dstOffset * 3, 3);\n            if (hasTcoords) {\n              copyVector(data.vt, tcIdx * 2, tc, dstOffset * 2, 2);\n            }\n            if (hasNormals) {\n              copyVector(data.vn, nIdx * 3, normals, dstOffset * 3, 3);\n            }\n          }\n          polys.push(ctMapping[key]);\n        }\n        offset += cellSize + 1;\n      }\n      polydata.getPoints().setData(Float32Array.from(pts), 3);\n      if (model.trackDuplicates) {\n        const duplicatesArray = vtkDataArray.newInstance({\n          name: 'Duplicates',\n          values: pointDuplicatesReferences\n        });\n        polydata.getPointData().addArray(duplicatesArray);\n      }\n      polydata.getPolys().setData(Uint32Array.from(polys));\n      if (hasTcoords) {\n        const tcoords = vtkDataArray.newInstance({\n          numberOfComponents: 2,\n          values: Float32Array.from(tc),\n          name: 'TextureCoordinates'\n        });\n        polydata.getPointData().setTCoords(tcoords);\n      }\n      if (hasNormals) {\n        const normalsArray = vtkDataArray.newInstance({\n          numberOfComponents: 3,\n          values: Float32Array.from(normals),\n          name: 'Normals'\n        });\n        polydata.getPointData().setNormals(normalsArray);\n      }\n\n      // register in output\n      model.output[idx] = polydata;\n    }\n  } else {\n    model.numberOfOutputs = 1;\n    const polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(Float32Array.from(data.v), 3);\n    if (hasTcoords && data.v.length / 3 === data.vt.length / 2) {\n      const tcoords = vtkDataArray.newInstance({\n        numberOfComponents: 2,\n        values: Float32Array.from(data.vt),\n        name: 'TextureCoordinates'\n      });\n      polydata.getPointData().setTCoords(tcoords);\n    }\n    if (hasNormals && data.v.length === data.vn.length) {\n      const normalsArray = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: Float32Array.from(data.vn),\n        name: 'Normals'\n      });\n      polydata.getPointData().setNormals(normalsArray);\n    }\n    const polys = [];\n    const polyIn = data.f[0];\n    const nbElems = polyIn.length;\n    let offset = 0;\n    while (offset < nbElems) {\n      const cellSize = polyIn[offset];\n      polys.push(cellSize);\n      for (let pIdx = 0; pIdx < cellSize; pIdx++) {\n        const [vIdx] = polyIn[offset + pIdx + 1];\n        polys.push(vIdx);\n      }\n      offset += cellSize + 1;\n    }\n    polydata.getPolys().setData(Uint32Array.from(polys));\n    model.output[0] = polydata;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nfunction getPointDuplicateIds(polyData, pointId) {\n  const res = [];\n  const duplicates = polyData.getPointData().getArrayByName('Duplicates');\n  if (duplicates == null) {\n    return res;\n  }\n  const duplicatesData = duplicates.getData();\n  const originalPointId = Math.min(pointId, duplicatesData[pointId]);\n  res.push(originalPointId);\n  let duplicateId = duplicatesData[originalPointId];\n  if (duplicateId !== originalPointId) {\n    // point has duplicates\n    while (duplicateId < duplicatesData.length && duplicatesData[duplicateId] === originalPointId) {\n      // Duplicated points must be next to each other and original point must\n      // reference first duplicate\n      res.push(duplicateId++);\n    }\n  }\n  return res;\n}\nconst STATIC = {\n  getPointDuplicateIds\n};\n\n// ----------------------------------------------------------------------------\n// vtkOBJReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOBJReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOBJReader');\n\n  // Create default dataAccessHelper if not available\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  }\n\n  // Internal method to fetch Array\n  function fetchData(url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return model.dataAccessHelper.fetchText(publicAPI, url, option);\n  }\n\n  // Set DataSet url\n  publicAPI.setUrl = function (url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (url.indexOf('.obj') === -1 && !option.fullpath) {\n      model.baseURL = url;\n      model.url = `${url}/index.obj`;\n    } else {\n      model.url = url;\n\n      // Remove the file in the URL\n      const path = url.split('/');\n      path.pop();\n      model.baseURL = path.join('/');\n    }\n\n    // Fetch metadata\n    return publicAPI.loadData(option);\n  };\n\n  // Fetch the actual data arrays\n  publicAPI.loadData = function () {\n    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return fetchData(model.url, option).then(content => publicAPI.isDeleted() ? false : publicAPI.parseAsText(content));\n  };\n  publicAPI.parseAsText = content => {\n    if (!content) {\n      return true;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    }\n    model.parseData = content;\n    model.numberOfOutputs = 0;\n    begin(model.splitMode);\n    content.split('\\n').forEach(parseLine);\n    end(model);\n    return true;\n  };\n  publicAPI.requestData = (inData, outData) => {\n    publicAPI.parseAsText(model.parseData);\n  };\n\n  // return Busy state\n  publicAPI.isBusy = () => !!model.requestCount;\n  publicAPI.getNumberOfOutputPorts = () => model.numberOfOutputs;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  numberOfOutputs: 1,\n  requestCount: 0,\n  splitMode: null,\n  trackDuplicates: false\n  // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper', 'splitMode', 'trackDuplicates']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy');\n\n  // Object methods\n  vtkOBJReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOBJReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkOBJReader$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkOBJReader$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkXMLReader from './XMLReader.js';\n\n// ----------------------------------------------------------------------------\n// Global method\n// ----------------------------------------------------------------------------\n\nfunction handleArray(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  const size = Number(piece.getAttribute(`NumberOf${cellType}`));\n  if (size > 0) {\n    const dataArrayElem = piece.getElementsByTagName(cellType)[0].getElementsByTagName('DataArray')[0];\n    const {\n      values,\n      numberOfComponents\n    } = vtkXMLReader.processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer);\n    polydata[`get${cellType}`]().setData(values, numberOfComponents);\n  }\n  return size;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  const size = Number(piece.getAttribute(`NumberOf${cellType}`));\n  if (size > 0) {\n    const values = vtkXMLReader.processCells(size, piece.getElementsByTagName(cellType)[0], compressor, byteOrder, headerType, binaryBuffer);\n    polydata[`get${cellType}`]().setData(values);\n  }\n  return size;\n}\n\n// ----------------------------------------------------------------------------\n// vtkXMLPolyDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLPolyDataReader');\n  publicAPI.parseXML = (rootElem, type, compressor, byteOrder, headerType) => {\n    const datasetElem = rootElem.getElementsByTagName(model.dataType)[0];\n    const pieces = datasetElem.getElementsByTagName('Piece');\n    const nbPieces = pieces.length;\n    for (let outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      // Create dataset\n      const polydata = vtkPolyData.newInstance();\n      const piece = pieces[outputIndex];\n\n      // Points\n      const nbPoints = handleArray(polydata, 'Points', piece, compressor, byteOrder, headerType, model.binaryBuffer);\n\n      // Cells\n      let nbCells = 0;\n      ['Verts', 'Lines', 'Strips', 'Polys'].forEach(cellType => {\n        nbCells += handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, model.binaryBuffer);\n      });\n\n      // Fill data\n      vtkXMLReader.processFieldData(nbPoints, piece.getElementsByTagName('PointData')[0], polydata.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(nbCells, piece.getElementsByTagName('CellData')[0], polydata.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer);\n\n      // Add new output\n      model.output[outputIndex] = polydata;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  dataType: 'PolyData'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLPolyDataReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkXMLPolyDataReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkXMLPolyDataReader$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkXMLPolyDataReader$1 as default, extend, newInstance };\n","import { create } from 'xmlbuilder2';\nimport { decompressSync } from 'fflate';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport Base64 from '../../Common/Core/Base64.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkStringArray from '../../Common/Core/StringArray.js';\nimport BinaryHelper from '../Core/BinaryHelper.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction findAllTags(node, tagName) {\n  return [...node.getElementsByTagName(tagName)];\n}\nfunction findFirstTag(node, tagName) {\n  return findAllTags(node, tagName)[0];\n}\nfunction parseXML(xmlStr) {\n  // see xmlbuilder2 docs on the object format\n  return create(xmlStr);\n}\nfunction extractAppendedData(buffer) {\n  // search for appended data tag\n  const prefixRegex = /^\\s*<AppendedData\\s+encoding=\"raw\">\\s*_/m;\n  const suffixRegex = /\\n\\s*<\\/AppendedData>/m;\n  return BinaryHelper.extractBinary(buffer, prefixRegex, suffixRegex);\n}\n\n// ----------------------------------------------------------------------------\n\nconst TYPED_ARRAY = {\n  Int8: Int8Array,\n  UInt8: Uint8Array,\n  Int16: Int16Array,\n  UInt16: Uint16Array,\n  Int32: Int32Array,\n  UInt32: Uint32Array,\n  Int64: Int32Array,\n  // Not supported with JavaScript will cause error in binary\n  UInt64: Uint32Array,\n  // Not supported with JavaScript will cause error in binary\n  Float32: Float32Array,\n  Float64: Float64Array\n};\n\n// ----------------------------------------------------------------------------\n\nconst TYPED_ARRAY_BYTES = {\n  Int8: 1,\n  UInt8: 1,\n  Int16: 2,\n  UInt16: 2,\n  Int32: 4,\n  UInt32: 4,\n  Int64: 8,\n  // Not supported with JavaScript will cause error in binary\n  UInt64: 8,\n  // Not supported with JavaScript will cause error in binary\n  Float32: 4,\n  Float64: 8\n};\n\n// ----------------------------------------------------------------------------\n\nfunction integer64to32(array) {\n  const maxIdx = array.length - 1; // Skip last\n  return array.filter((v, i) => i < maxIdx && i % 2 === 0);\n}\n\n// ----------------------------------------------------------------------------\n\n/**\n * Reads the data of a length-prefixed blob.\n *\n * Int64 headers and values are not supported.\n *\n * @param {Uint8Array} uint8 a uint8 view of the length-prefixed blob.\n * @param {string} dataType\n * @param {string} headerType either UInt64 or UInt32\n */\nfunction readLengthPrefixedData(uint8, dataType, headerType) {\n  if (!['UInt64', 'UInt32'].includes(headerType)) {\n    throw new Error(`Cannot handle a header type of ${headerType}`);\n  }\n  let HeaderTypedArray = TYPED_ARRAY[headerType];\n  let DataTypedArray = TYPED_ARRAY[dataType];\n  let dataFallbackTo32 = false;\n  if (headerType === 'UInt64') {\n    HeaderTypedArray = TYPED_ARRAY.UInt32;\n  }\n  if (/^U?Int64$/.test(dataType)) {\n    dataFallbackTo32 = true;\n    DataTypedArray = TYPED_ARRAY[dataType.replace('64', '32')];\n  }\n  const {\n    byteOffset\n  } = uint8;\n  const dataWordSize = TYPED_ARRAY_BYTES[dataType];\n  const headerWordSize = TYPED_ARRAY_BYTES[headerType];\n\n  // slice if offset is not word aligned\n  let header;\n  if (byteOffset % headerWordSize === 0) {\n    header = new HeaderTypedArray(uint8.buffer, byteOffset, 1);\n  } else {\n    header = new HeaderTypedArray(uint8.buffer.slice(byteOffset, byteOffset + headerWordSize));\n  }\n  const dataByteLength = Number(header[0]);\n\n  // read values\n  let values;\n  let arraySize = dataByteLength / dataWordSize;\n  if (dataFallbackTo32) {\n    // We are reading int64 data with an int32 typed array.\n    arraySize *= 2;\n  }\n\n  // slice if offset is not word aligned\n  const dataOffset = byteOffset + headerWordSize;\n  if (dataOffset % dataWordSize === 0) {\n    values = new DataTypedArray(uint8.buffer, dataOffset, arraySize);\n  } else {\n    values = new DataTypedArray(uint8.buffer.slice(dataOffset, dataOffset + dataByteLength));\n  }\n  if (dataFallbackTo32) {\n    // remove higher order 32 bits\n    values = integer64to32(values);\n  }\n  return values;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction readerHeader(uint8, headerType) {\n  // We do not handle endianness or if more than 32 bits are needed to encode the data\n  if (headerType === 'UInt64') {\n    const offset = 8;\n    let uint32 = new Uint32Array(uint8.buffer, 0, 6);\n    const nbBlocks = uint32[0];\n    const s1 = uint32[2];\n    const s2 = uint32[4];\n    const resultArray = [offset, nbBlocks, s1, s2];\n    uint32 = new Uint32Array(uint8.buffer, 3 * 8, nbBlocks * 2);\n    for (let i = 0; i < nbBlocks; i++) {\n      resultArray.push(uint32[i * 2]);\n    }\n    return resultArray;\n  }\n  // UInt32\n  let uint32 = new Uint32Array(uint8.buffer, 0, 3);\n  const offset = 4;\n  const nbBlocks = uint32[0];\n  const s1 = uint32[1];\n  const s2 = uint32[2];\n  const resultArray = [offset, nbBlocks, s1, s2];\n  uint32 = new Uint32Array(uint8.buffer, 3 * 4, nbBlocks);\n  for (let i = 0; i < nbBlocks; i++) {\n    resultArray.push(uint32[i]);\n  }\n  return resultArray;\n}\n\n// ----------------------------------------------------------------------------\n\n/**\n * Given the return value of readerHeader, return header byte length.\n */\nfunction getHeaderByteLength(header, headerType) {\n  // ignore the first number, which isn't actually part of the header.\n  const [headerWordSize] = header;\n  return (header.length - 1) * headerWordSize;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction uncompressBlock(compressedUint8, output) {\n  const uncompressedBlock = decompressSync(compressedUint8);\n  output.uint8.set(uncompressedBlock, output.offset);\n  output.offset += uncompressedBlock.length;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction decompressZLib(bytes, headerType) {\n  // ----------------------------------------------------------------------\n  // Layout of the data\n  // header[N, s1, s2, blockSize1, ..., blockSizeN], [padding???], block[compressedData], ..., block[compressedData]\n  // [header] N, s1 and s2 are uint 32 or 64 (defined by header_type=\"UInt64\" attribute on the root node)\n  // [header] s1: uncompress size of each block except the last one\n  // [header] s2: uncompress size of the last blocks\n  // [header] blockSize: size of the block in compressed space that represent to bloc to inflate in zlib. (This also give the offset to the next block)\n  // ----------------------------------------------------------------------\n\n  // Header reading: [offset, numBlocks, s1, s2]\n  const header = readerHeader(bytes, headerType);\n  const nbBlocks = header[1];\n  const s1 = header[2];\n  const s2 = header[3];\n  let dataByteLength = 0;\n  if (nbBlocks > 0) {\n    // If the last block's size is labeled as 0, that means the last block\n    // really has size header[2].\n    if (s2 === 0) {\n      dataByteLength = nbBlocks * s1;\n    } else {\n      dataByteLength = (nbBlocks - 1) * s1 + s2;\n    }\n  }\n  const buffer = new ArrayBuffer(dataByteLength);\n  const output = {\n    offset: 0,\n    uint8: new Uint8Array(buffer)\n  };\n  let offset = getHeaderByteLength(header);\n  // Starting from end of the data header, find the zlib header, which starts with 0x78.\n  // This accounts for any padding between the header and the compressed data.\n  while (offset < bytes.length && bytes[offset] !== 0x78) {\n    offset++;\n  }\n  for (let i = 0; i < nbBlocks; i++) {\n    const blockSize = header[4 + i];\n    const compressedBlock = new Uint8Array(bytes.buffer, offset, blockSize);\n    uncompressBlock(compressedBlock, output);\n    offset += blockSize;\n  }\n  return output.uint8;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer) {\n  const dataType = dataArrayElem.getAttribute('type');\n  const name = dataArrayElem.getAttribute('Name');\n  const format = dataArrayElem.getAttribute('format'); // binary, ascii, appended\n  const numberOfComponents = Number(dataArrayElem.getAttribute('NumberOfComponents') || '1');\n  let values = null;\n  if (format === 'ascii') {\n    values = new TYPED_ARRAY[dataType](size * numberOfComponents);\n    let offset = 0;\n    dataArrayElem.firstChild.nodeValue.split(/[\\\\t \\\\n]+/).forEach(token => {\n      if (token.trim().length) {\n        values[offset++] = Number(token);\n      }\n    });\n  } else if (format === 'binary') {\n    const uint8 = new Uint8Array(Base64.toArrayBuffer(dataArrayElem.firstChild.nodeValue.trim()));\n    if (compressor === 'vtkZLibDataCompressor') {\n      const data = decompressZLib(uint8, headerType);\n      values = new TYPED_ARRAY[dataType](data.buffer);\n\n      // Handle (u)int64 hoping for no overflow...\n      if (/^U?Int64$/.test(dataType)) {\n        values = integer64to32(values);\n      }\n    } else {\n      values = new TYPED_ARRAY[dataType](uint8.buffer, TYPED_ARRAY_BYTES[headerType]);\n\n      // Handle (u)int64 hoping no overflow...\n      if (dataType.indexOf('Int64') !== -1) {\n        values = integer64to32(values);\n      }\n    }\n  } else if (format === 'appended') {\n    const offset = Number(dataArrayElem.getAttribute('offset'));\n    values = readLengthPrefixedData(new Uint8Array(binaryBuffer, offset), dataType, headerType);\n  } else {\n    console.error('Format not supported', format);\n  }\n  return {\n    name,\n    values,\n    numberOfComponents\n  };\n}\n\n// ----------------------------------------------------------------------------\n\nfunction decodeStringArrayFromBytes(bytes) {\n  const decoder = new TextDecoder();\n  const decoded = decoder.decode(bytes);\n\n  // strings are null-terminated\n  return decoded.split('\\x00').slice(0, -1);\n}\n\n// ----------------------------------------------------------------------------\n\nfunction processStringArray(stringArrayElem, compressor, byteOrder, headerType, binaryBuffer) {\n  const name = stringArrayElem.getAttribute('Name');\n  const format = stringArrayElem.getAttribute('format'); // binary, ascii, appended\n  const numberOfComponents = Number(stringArrayElem.getAttribute('NumberOfComponents') || '1');\n  const numberOfTuples = Number(stringArrayElem.getAttribute('NumberOfTuples') || '1');\n  const nbStrings = numberOfTuples * numberOfComponents;\n  const strings = [];\n  if (format === 'ascii') {\n    const tokens = stringArrayElem.firstChild.nodeValue.trim().split(/\\s+/);\n    let tokIdx = 0;\n    const strChars = [];\n    while (strings.length < nbStrings) {\n      const token = Number(tokens[tokIdx++]);\n      if (token === 0) {\n        strings.push(strChars.join(''));\n        strChars.length = 0;\n      } else {\n        strChars.push(String.fromCharCode(token));\n      }\n    }\n  } else if (format === 'binary') {\n    const uint8 = new Uint8Array(Base64.toArrayBuffer(stringArrayElem.firstChild.nodeValue.trim()));\n    if (compressor === 'vtkZLibDataCompressor') {\n      const decompressed = decompressZLib(uint8, headerType);\n      strings.push(...decodeStringArrayFromBytes(decompressed));\n    } else {\n      const strData = readLengthPrefixedData(uint8, 'UInt8', headerType);\n      strings.push(...decodeStringArrayFromBytes(strData));\n    }\n  } else if (format === 'appended') {\n    const offset = Number(stringArrayElem.getAttribute('offset'));\n    const values = readLengthPrefixedData(new Uint8Array(binaryBuffer, offset), 'UInt8', headerType);\n    strings.push(...decodeStringArrayFromBytes(values));\n  } else {\n    macro.vtkErrorMacro(`Format not supported: ${format}`);\n  }\n  return {\n    name,\n    values: strings,\n    numberOfComponents\n  };\n}\n\n// ----------------------------------------------------------------------------\n\nfunction processCells(size, containerElem, compressor, byteOrder, headerType, binaryBuffer) {\n  const arrayElems = {};\n  const dataArrayElems = containerElem.getElementsByTagName('DataArray');\n  for (let elIdx = 0; elIdx < dataArrayElems.length; elIdx++) {\n    const el = dataArrayElems[elIdx];\n    arrayElems[el.getAttribute('Name')] = el;\n  }\n  const offsets = processDataArray(size, arrayElems.offsets, compressor, byteOrder, headerType, binaryBuffer).values;\n  const connectivitySize = offsets[offsets.length - 1];\n  const connectivity = processDataArray(connectivitySize, arrayElems.connectivity, compressor, byteOrder, headerType, binaryBuffer).values;\n  const values = new Uint32Array(size + connectivitySize);\n  let writeOffset = 0;\n  let previousOffset = 0;\n  offsets.forEach(v => {\n    const cellSize = v - previousOffset;\n    values[writeOffset++] = cellSize;\n    for (let i = 0; i < cellSize; i++) {\n      values[writeOffset++] = connectivity[previousOffset + i];\n    }\n\n    // save previous offset\n    previousOffset = v;\n  });\n  return values;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction processFieldData(size, fieldElem, fieldContainer, compressor, byteOrder, headerType, binaryBuffer) {\n  if (fieldElem) {\n    const attributes = ['Scalars', 'Vectors', 'Normals', 'Tensors', 'TCoords'];\n    const nameBinding = {};\n    attributes.forEach(attrName => {\n      const arrayName = fieldElem.getAttribute(attrName);\n      if (arrayName) {\n        nameBinding[arrayName] = fieldContainer[`set${attrName}`];\n      }\n    });\n    const dataArrayElems = fieldElem.getElementsByTagName('DataArray');\n    const nbArrays = dataArrayElems.length;\n    for (let idx = 0; idx < nbArrays; idx++) {\n      const array = dataArrayElems[idx];\n      const dataArray = vtkDataArray.newInstance(processDataArray(size, array, compressor, byteOrder, headerType, binaryBuffer));\n      const name = dataArray.getName();\n      (nameBinding[name] || fieldContainer.addArray)(dataArray);\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\nfunction handleFieldDataArrays(fieldDataElem, compressor, byteOrder, headerType, binaryBuffer) {\n  const dataArrays = [...fieldDataElem.getElementsByTagName('DataArray')].map(daElem => vtkDataArray.newInstance(processDataArray(Number(daElem.getAttribute('NumberOfTuples')), daElem, compressor, byteOrder, headerType, binaryBuffer)));\n  const stringArrays = [...fieldDataElem.getElementsByTagName('Array')].filter(elem => elem.getAttribute('type') === 'String').map(arrElem => {\n    const sa = vtkStringArray.newInstance(processStringArray(arrElem, compressor, byteOrder, headerType, binaryBuffer));\n    return sa;\n  });\n  return [...dataArrays, ...stringArrays];\n}\n\n// ----------------------------------------------------------------------------\n// vtkXMLReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLReader');\n\n  // Create default dataAccessHelper if not available\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  }\n\n  // Internal method to fetch Array\n  function fetchData(url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return model.dataAccessHelper.fetchBinary(url, option);\n  }\n\n  // Set DataSet url\n  publicAPI.setUrl = function (url) {\n    let option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    model.url = url;\n\n    // Remove the file in the URL\n    const path = url.split('/');\n    path.pop();\n    model.baseURL = path.join('/');\n\n    // Fetch metadata\n    return publicAPI.loadData(option);\n  };\n\n  // Fetch the actual data arrays\n  publicAPI.loadData = function () {\n    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return fetchData(model.url, option).then(publicAPI.parseAsArrayBuffer);\n  };\n  publicAPI.parseAsArrayBuffer = arrayBuffer => {\n    if (!arrayBuffer) {\n      return false;\n    }\n    if (arrayBuffer !== model.rawDataBuffer) {\n      publicAPI.modified();\n    } else {\n      return true;\n    }\n    const {\n      text: content,\n      binaryBuffer\n    } = extractAppendedData(arrayBuffer);\n    model.rawDataBuffer = arrayBuffer;\n    model.binaryBuffer = binaryBuffer;\n\n    // Parse data here...\n    const doc = parseXML(content);\n    const root = doc.root();\n    const rootElem = root.node;\n    const type = rootElem.getAttribute('type');\n    const compressor = rootElem.getAttribute('compressor');\n    const byteOrder = rootElem.getAttribute('byte_order');\n    // default to UInt32. I think version 0.1 vtp/vti files default to UInt32.\n    const headerType = rootElem.getAttribute('header_type') || 'UInt32';\n    if (compressor && compressor !== 'vtkZLibDataCompressor') {\n      console.error('Invalid compressor', compressor);\n      return false;\n    }\n    if (byteOrder && byteOrder !== 'LittleEndian') {\n      console.error('Only LittleEndian encoding is supported');\n      return false;\n    }\n    if (type !== model.dataType) {\n      console.error('Invalid data type', type, 'expecting', model.dataType);\n      return false;\n    }\n\n    // appended format\n    if (findFirstTag(rootElem, 'AppendedData')) {\n      const appendedDataElem = findFirstTag(rootElem, 'AppendedData');\n      const encoding = appendedDataElem.getAttribute('encoding');\n      const arrays = root.filter(xmlNode => {\n        const {\n          node\n        } = xmlNode;\n        return node.nodeType === Node.ELEMENT_NODE && node.getAttribute('format') === 'appended' && node.hasAttribute('offset');\n      }, false, true).map(xmlNode => ({\n        node: xmlNode.node,\n        offset: Number(xmlNode.node.getAttribute('offset'))\n      }));\n\n      // sort dataElems by increasing offset\n      arrays.sort((a, b) => a.offset - b.offset);\n      let appendedBuffer = model.binaryBuffer;\n      if (encoding === 'base64') {\n        // substr(1) is to remove the '_' prefix\n        appendedBuffer = appendedDataElem.textContent.trim().substr(1);\n      }\n\n      // get data array chunks\n      const dataArrays = [];\n      for (let i = 0; i < arrays.length; ++i) {\n        const offset = arrays[i].offset;\n        let nextOffset = 0;\n        if (i === arrays.length - 1) {\n          nextOffset = appendedBuffer.length || appendedBuffer.byteLength;\n        } else {\n          nextOffset = arrays[i + 1].offset;\n        }\n        if (encoding === 'base64') {\n          dataArrays.push(new Uint8Array(Base64.toArrayBuffer(appendedBuffer.substring(offset, nextOffset))));\n        } else {\n          // encoding === 'raw'\n          // Need to slice the ArrayBuffer so readerHeader() works properly\n          dataArrays.push(new Uint8Array(appendedBuffer.slice(offset, nextOffset)));\n        }\n      }\n      if (compressor === 'vtkZLibDataCompressor') {\n        for (let arrayidx = 0; arrayidx < dataArrays.length; ++arrayidx) {\n          const dataArray = dataArrays[arrayidx];\n          const uncompressed = decompressZLib(dataArray, headerType);\n          const data = new Uint8Array(uncompressed.length + TYPED_ARRAY_BYTES[headerType]);\n          // set length header\n          // TODO this does not work for lengths that are greater than the max Uint32 value.\n          new TYPED_ARRAY[headerType](data.buffer, 0, 1)[0] = uncompressed.length;\n          data.set(uncompressed, TYPED_ARRAY_BYTES[headerType]);\n          dataArrays[arrayidx] = data;\n        }\n      }\n      const bufferLength = dataArrays.reduce((acc, arr) => acc + arr.length, 0);\n      const buffer = new ArrayBuffer(bufferLength);\n      const view = new Uint8Array(buffer);\n      for (let i = 0, offset = 0; i < dataArrays.length; ++i) {\n        // set correct offsets\n        arrays[i].node.setAttribute('offset', offset);\n        // set final buffer data\n        view.set(dataArrays[i], offset);\n        offset += dataArrays[i].length;\n      }\n      model.binaryBuffer = buffer;\n      if (!model.binaryBuffer) {\n        console.error('Processing appended data format: requires binaryBuffer to parse');\n        return false;\n      }\n    }\n    publicAPI.parseXML(rootElem, type, compressor, byteOrder, headerType);\n    const datasetElem = rootElem.getElementsByTagName(type)[0];\n    const fieldDataElem = datasetElem.getElementsByTagName('FieldData')[0];\n    if (fieldDataElem) {\n      const fieldDataArrays = handleFieldDataArrays(fieldDataElem, compressor, byteOrder, headerType, model.binaryBuffer);\n      for (let i = 0; i < model.output.length; i++) {\n        const fieldData = model.output[i].getFieldData();\n        for (let j = 0; j < fieldDataArrays.length; j++) {\n          fieldData.addArray(fieldDataArrays[j]);\n        }\n      }\n    }\n    return true;\n  };\n  publicAPI.requestData = (inData, outData) => {\n    publicAPI.parseAsArrayBuffer(model.rawDataBuffer);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1);\n\n  // vtkXMLReader methods\n  vtkXMLReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nvar vtkXMLReader$1 = {\n  extend,\n  processDataArray,\n  processFieldData,\n  processCells\n};\n\nexport { vtkXMLReader$1 as default, extend, findAllTags, findFirstTag };\n","import { m as macro } from '../../macros2.js';\nimport vtkAbstractMapper3D from './AbstractMapper3D.js';\nimport { H as createUninitializedBounds } from '../../Common/Core/Math/index.js';\n\n// ----------------------------------------------------------------------------\n// vtkAbstractImageMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractImageMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkAbstractImageMapper');\n  publicAPI.getIsOpaque = () => true;\n  publicAPI.getCurrentImage = () => null;\n  publicAPI.getBoundsForSlice = () => {\n    macro.vtkErrorMacro('vtkAbstractImageMapper.getBoundsForSlice - NOT IMPLEMENTED');\n    return createUninitializedBounds();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  slice: 0,\n  customDisplayExtent: [0, 0, 0, 0, 0, 0],\n  useCustomExtents: false,\n  backgroundColor: [0, 0, 0, 1]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkAbstractMapper3D.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['slice', 'useCustomExtents']);\n  macro.setGetArray(publicAPI, model, ['customDisplayExtent'], 6);\n  macro.setGetArray(publicAPI, model, ['backgroundColor'], 4);\n  vtkAbstractImageMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nvar vtkAbstractImageMapper$1 = {\n  extend\n};\n\nexport { vtkAbstractImageMapper$1 as default, extend };\n","import { vec3 } from 'gl-matrix';\nimport vtkPlane from '../../../Common/DataModel/Plane.js';\n\n/**\n * Perform plane-line intersection, where the line is defined by two points (p1, p2),\n * and the plane is defined by the imageData and slice number.\n *\n * @param {Vector3} p1\n * @param {Vector3} p2\n * @param {vtkImageMapper|vtkImageArrayMapper} mapper\n */\nfunction doPicking(p1, p2, mapper) {\n  const imageData = mapper.getCurrentImage();\n  const extent = imageData.getExtent();\n\n  // Slice origin\n  const ijk = [extent[0], extent[2], extent[4]];\n  const {\n    ijkMode\n  } = mapper.getClosestIJKAxis();\n  let nSlice = mapper.isA('vtkImageArrayMapper') ? mapper.getSubSlice() : mapper.getSlice();\n  if (ijkMode !== mapper.getSlicingMode()) {\n    // If not IJK slicing, get the IJK slice from the XYZ position/slice\n    nSlice = mapper.getSliceAtPosition(nSlice);\n  }\n  ijk[ijkMode] += nSlice;\n  const worldOrigin = [0, 0, 0];\n  imageData.indexToWorld(ijk, worldOrigin);\n\n  // Normal computation\n  ijk[ijkMode] += 1;\n  const worldNormal = [0, 0, 0];\n  imageData.indexToWorld(ijk, worldNormal);\n  worldNormal[0] -= worldOrigin[0];\n  worldNormal[1] -= worldOrigin[1];\n  worldNormal[2] -= worldOrigin[2];\n  vec3.normalize(worldNormal, worldNormal);\n  const intersect = vtkPlane.intersectWithLine(p1, p2, worldOrigin, worldNormal);\n  if (intersect.intersection) {\n    const point = intersect.x;\n    const absoluteIJK = [0, 0, 0];\n    imageData.worldToIndex(point, absoluteIJK);\n    // `t` is the parametric position along the line\n    // defined in Plane.intersectWithLine\n    return {\n      t: intersect.t,\n      absoluteIJK\n    };\n  }\n  return null;\n}\n\n/**\n * Implement point picking for image plane.\n * The plane is defined by the imageData and current slice number,\n * set in the input mapper.\n *\n * @param {Vector3} p1\n * @param {Vector3} p2\n * @param {vtkImageMapper|vtkImageArrayMapper} mapper\n */\nfunction intersectWithLineForPointPicking(p1, p2, mapper) {\n  const pickingData = doPicking(p1, p2, mapper);\n  if (pickingData) {\n    const imageData = mapper.getCurrentImage();\n    const extent = imageData.getExtent();\n\n    // Get closer integer ijk\n    // NB: point picking means closest slice, means rounding\n    const ijk = [Math.round(pickingData.absoluteIJK[0]), Math.round(pickingData.absoluteIJK[1]), Math.round(pickingData.absoluteIJK[2])];\n\n    // Are we outside our actual extent\n    if (ijk[0] < extent[0] || ijk[0] > extent[1] || ijk[1] < extent[2] || ijk[1] > extent[3] || ijk[2] < extent[4] || ijk[2] > extent[5]) {\n      return null;\n    }\n    return {\n      t: pickingData.t,\n      ijk\n    };\n  }\n  return null;\n}\n\n/**\n * Implement cell picking for image plane.\n * The plane is defined by the imageData and current slice number,\n * set in the input mapper.\n *\n * @param {Vector3} p1\n * @param {Vector3} p2\n * @param {vtkImageMapper|vtkImageArrayMapper} mapper\n */\nfunction intersectWithLineForCellPicking(p1, p2, mapper) {\n  const pickingData = doPicking(p1, p2, mapper);\n  if (pickingData) {\n    const imageData = mapper.getCurrentImage();\n    const extent = imageData.getExtent();\n    const absIJK = pickingData.absoluteIJK;\n\n    // Get closer integer ijk\n    // NB: cell picking means closest voxel, means flooring\n    const ijk = [Math.floor(absIJK[0]), Math.floor(absIJK[1]), Math.floor(absIJK[2])];\n\n    // Are we outside our actual extent\n    if (ijk[0] < extent[0] || ijk[0] > extent[1] - 1 || ijk[1] < extent[2] || ijk[1] > extent[3] - 1 || ijk[2] < extent[4] ||\n    // handle single-slice images\n    ijk[2] > (extent[5] ? extent[5] - 1 : extent[5])) {\n      return null;\n    }\n\n    // Parametric coordinates within cell\n    const pCoords = [absIJK[0] - ijk[0], absIJK[1] - ijk[1], absIJK[2] - ijk[2]];\n    return {\n      t: pickingData.t,\n      ijk,\n      pCoords\n    };\n  }\n  return null;\n}\n\nexport { intersectWithLineForCellPicking, intersectWithLineForPointPicking };\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkAbstractMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkAbstractMapper');\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n  publicAPI.addClippingPlane = plane => {\n    if (!plane.isA('vtkPlane')) {\n      return false;\n    }\n    if (!model.clippingPlanes.includes(plane)) {\n      model.clippingPlanes.push(plane);\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getNumberOfClippingPlanes = () => model.clippingPlanes.length;\n  publicAPI.removeAllClippingPlanes = () => {\n    if (model.clippingPlanes.length === 0) {\n      return false;\n    }\n    model.clippingPlanes.length = 0;\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.removeClippingPlane = clippingPlane => {\n    const i = model.clippingPlanes.indexOf(clippingPlane);\n    if (i === -1) {\n      return false;\n    }\n    model.clippingPlanes.splice(i, 1);\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.getClippingPlanes = () => model.clippingPlanes;\n  publicAPI.setClippingPlanes = planes => {\n    if (!planes) {\n      return;\n    }\n    if (!Array.isArray(planes)) {\n      publicAPI.addClippingPlane(planes);\n    } else {\n      const nbPlanes = planes.length;\n      for (let i = 0; i < nbPlanes && i < 6; i++) {\n        publicAPI.addClippingPlane(planes[i]);\n      }\n    }\n  };\n  publicAPI.getClippingPlaneInDataCoords = (propMatrix, i, hnormal) => {\n    const clipPlanes = model.clippingPlanes;\n    const mat = propMatrix;\n    if (clipPlanes) {\n      const n = clipPlanes.length;\n      if (i >= 0 && i < n) {\n        // Get the plane\n        const plane = clipPlanes[i];\n        const normal = plane.getNormal();\n        const origin = plane.getOrigin();\n\n        // Compute the plane equation\n        const v1 = normal[0];\n        const v2 = normal[1];\n        const v3 = normal[2];\n        const v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]);\n\n        // Transform normal from world to data coords\n        hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];\n        hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];\n        hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];\n        hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];\n        return;\n      }\n    }\n    macro.vtkErrorMacro(`Clipping plane index ${i} is out of range.`);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clippingPlanes: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 0);\n  if (!model.clippingPlanes) {\n    model.clippingPlanes = [];\n  }\n  vtkAbstractMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nvar vtkAbstractMapper$1 = {\n  extend\n};\n\nexport { vtkAbstractMapper$1 as default, extend };\n","import { m as macro } from '../../macros2.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport { H as createUninitializedBounds } from '../../Common/Core/Math/index.js';\n\n// ----------------------------------------------------------------------------\n// vtkAbstractMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractMapper3D(publicAPI, model) {\n  publicAPI.getBounds = () => {\n    macro.vtkErrorMacro(`vtkAbstractMapper3D.getBounds - NOT IMPLEMENTED`);\n    return createUninitializedBounds();\n  };\n  publicAPI.getCenter = () => {\n    const bounds = publicAPI.getBounds();\n    model.center = vtkBoundingBox.isValid(bounds) ? vtkBoundingBox.getCenter(bounds) : null;\n    return model.center?.slice();\n  };\n  publicAPI.getLength = () => {\n    const bounds = publicAPI.getBounds();\n    return vtkBoundingBox.getDiagonalLength(bounds);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst defaultValues = initialValues => ({\n  bounds: [...vtkBoundingBox.INIT_BOUNDS],\n  center: [0, 0, 0],\n  viewSpecificProperties: {},\n  ...initialValues\n});\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  // Inheritance\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['viewSpecificProperties']);\n  vtkAbstractMapper3D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nvar vtkAbstractMapper3D$1 = {\n  extend\n};\n\nexport { vtkAbstractMapper3D$1 as default, extend };\n","import { mat4, vec3 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkProp3D from './Prop3D.js';\nimport vtkProperty from './Property.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkActor');\n\n  // Capture 'parentClass' api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getActors = () => [publicAPI];\n  publicAPI.getIsOpaque = () => {\n    if (model.forceOpaque) {\n      return true;\n    }\n    if (model.forceTranslucent) {\n      return false;\n    }\n    // make sure we have a property\n    if (!model.property) {\n      // force creation of a property\n      publicAPI.getProperty();\n    }\n    let isOpaque = model.property.getOpacity() >= 1.0;\n\n    // are we using an opaque texture, if any?\n    isOpaque = isOpaque && (!model.texture || !model.texture.isTranslucent());\n\n    // are we using an opaque scalar array, if any?\n    isOpaque = isOpaque && (!model.mapper || model.mapper.getIsOpaque());\n    return isOpaque;\n  };\n  publicAPI.hasTranslucentPolygonalGeometry = () => {\n    if (model.mapper === null) {\n      return false;\n    }\n    // make sure we have a property\n    if (model.property === null) {\n      // force creation of a property\n      publicAPI.setProperty(publicAPI.makeProperty());\n    }\n\n    // is this actor opaque ?\n    return !publicAPI.getIsOpaque();\n  };\n  publicAPI.makeProperty = vtkProperty.newInstance;\n  publicAPI.getProperty = () => {\n    if (model.property === null) {\n      model.property = publicAPI.makeProperty();\n    }\n    return model.property;\n  };\n  publicAPI.getBounds = () => {\n    if (model.mapper === null) {\n      return model.bounds;\n    }\n\n    // Check for the special case when the mapper's bounds are unknown\n    const bds = model.mapper.getBounds();\n    if (!bds || bds.length !== 6) {\n      return bds;\n    }\n\n    // Check for the special case when the actor is empty.\n    if (bds[0] > bds[1]) {\n      model.mapperBounds = bds.concat(); // copy the mapper's bounds\n      model.bounds = [1, -1, 1, -1, 1, -1];\n      model.boundsMTime.modified();\n      return bds;\n    }\n\n    // Check if we have cached values for these bounds - we cache the\n    // values returned by model.mapper.getBounds() and we store the time\n    // of caching. If the values returned this time are different, or\n    // the modified time of this class is newer than the cached time,\n    // then we need to rebuild.\n    if (!model.mapperBounds || bds[0] !== model.mapperBounds[0] || bds[1] !== model.mapperBounds[1] || bds[2] !== model.mapperBounds[2] || bds[3] !== model.mapperBounds[3] || bds[4] !== model.mapperBounds[4] || bds[5] !== model.mapperBounds[5] || publicAPI.getMTime() > model.boundsMTime.getMTime()) {\n      vtkDebugMacro('Recomputing bounds...');\n      model.mapperBounds = bds.concat(); // copy the mapper's bounds\n      const bbox = [];\n      vtkBoundingBox.getCorners(bds, bbox);\n      publicAPI.computeMatrix();\n      const tmp4 = new Float64Array(16);\n      mat4.transpose(tmp4, model.matrix);\n      bbox.forEach(pt => vec3.transformMat4(pt, pt, tmp4));\n\n      /* eslint-disable no-multi-assign */\n      model.bounds[0] = model.bounds[2] = model.bounds[4] = Number.MAX_VALUE;\n      model.bounds[1] = model.bounds[3] = model.bounds[5] = -Number.MAX_VALUE;\n      /* eslint-enable no-multi-assign */\n\n      model.bounds = model.bounds.map((d, i) => i % 2 === 0 ? bbox.reduce((a, b) => a > b[i / 2] ? b[i / 2] : a, d) : bbox.reduce((a, b) => a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a, d));\n      model.boundsMTime.modified();\n    }\n    return model.bounds;\n  };\n  publicAPI.getMTime = () => {\n    let mt = superClass.getMTime();\n    if (model.property !== null) {\n      const time = model.property.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    if (model.backfaceProperty !== null) {\n      const time = model.backfaceProperty.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.getRedrawMTime = () => {\n    let mt = model.mtime;\n    if (model.mapper !== null) {\n      let time = model.mapper.getMTime();\n      mt = time > mt ? time : mt;\n      if (model.mapper.getInput() !== null) {\n        // FIXME !!! getInputAlgorithm / getInput\n        model.mapper.getInputAlgorithm().update();\n        time = model.mapper.getInput().getMTime();\n        mt = time > mt ? time : mt;\n      }\n    }\n    return mt;\n  };\n  publicAPI.getSupportsSelection = () => model.mapper ? model.mapper.getSupportsSelection() : false;\n  publicAPI.processSelectorPixelBuffers = (selector, pixelOffsets) => {\n    if (model.mapper && model.mapper.processSelectorPixelBuffers) {\n      model.mapper.processSelectorPixelBuffers(selector, pixelOffsets);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  mapper: null,\n  property: null,\n  backfaceProperty: null,\n  forceOpaque: false,\n  forceTranslucent: false,\n  bounds: [1, -1, 1, -1, 1, -1]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkProp3D.extend(publicAPI, model, initialValues);\n\n  // vtkTimeStamp\n  model.boundsMTime = {};\n  macro.obj(model.boundsMTime);\n\n  // Build VTK API\n  macro.set(publicAPI, model, ['property']);\n  macro.setGet(publicAPI, model, ['backfaceProperty', 'forceOpaque', 'forceTranslucent', 'mapper']);\n\n  // Object methods\n  vtkActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkActor');\n\n// ----------------------------------------------------------------------------\n\nvar vtkActor$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkActor$1 as default, extend, newInstance };\n","import { mat4, vec4, vec3, quat } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport { r as radiansFromDegrees, k as add, j as cross } from '../../Common/Core/Math/index.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\n\n/* eslint-disable new-cap */\n\n/*\n * Convenience function to access elements of a gl-matrix.  If it turns\n * out I have rows and columns swapped everywhere, then I'll just change\n * the order of 'row' and 'col' parameters in this function\n */\n// function getMatrixElement(matrix, row, col) {\n//   const idx = (row * 4) + col;\n//   return matrix[idx];\n// }\n\n// ----------------------------------------------------------------------------\n// vtkCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCamera');\n\n  // Set up private variables and methods\n  const origin = new Float64Array(3);\n  const dopbasis = new Float64Array([0.0, 0.0, -1.0]);\n  const upbasis = new Float64Array([0.0, 1.0, 0.0]);\n  const tmpMatrix = mat4.identity(new Float64Array(16));\n  const tmpMatrix2 = mat4.identity(new Float64Array(16));\n  const tmpvec1 = new Float64Array(3);\n  const tmpvec2 = new Float64Array(3);\n  const tmpvec3 = new Float64Array(3);\n  const rotateMatrix = mat4.identity(new Float64Array(16));\n  const trans = mat4.identity(new Float64Array(16));\n  const newPosition = new Float64Array(3);\n  const newFocalPoint = new Float64Array(3);\n\n  // Internal Functions that don't need to be public\n  function computeViewPlaneNormal() {\n    // VPN is -DOP\n    model.viewPlaneNormal[0] = -model.directionOfProjection[0];\n    model.viewPlaneNormal[1] = -model.directionOfProjection[1];\n    model.viewPlaneNormal[2] = -model.directionOfProjection[2];\n  }\n  publicAPI.orthogonalizeViewUp = () => {\n    const vt = publicAPI.getViewMatrix();\n    model.viewUp[0] = vt[4];\n    model.viewUp[1] = vt[5];\n    model.viewUp[2] = vt[6];\n    publicAPI.modified();\n  };\n  publicAPI.setPosition = (x, y, z) => {\n    if (x === model.position[0] && y === model.position[1] && z === model.position[2]) {\n      return;\n    }\n    model.position[0] = x;\n    model.position[1] = y;\n    model.position[2] = z;\n\n    // recompute the focal distance\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n  publicAPI.setFocalPoint = (x, y, z) => {\n    if (x === model.focalPoint[0] && y === model.focalPoint[1] && z === model.focalPoint[2]) {\n      return;\n    }\n    model.focalPoint[0] = x;\n    model.focalPoint[1] = y;\n    model.focalPoint[2] = z;\n\n    // recompute the focal distance\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n  publicAPI.setDistance = d => {\n    if (model.distance === d) {\n      return;\n    }\n    model.distance = d;\n    if (model.distance < 1e-20) {\n      model.distance = 1e-20;\n      vtkDebugMacro('Distance is set to minimum.');\n    }\n\n    // we want to keep the camera pointing in the same direction\n    const vec = model.directionOfProjection;\n\n    // recalculate FocalPoint\n    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // This method must be called when the focal point or camera position changes\n  publicAPI.computeDistance = () => {\n    const dx = model.focalPoint[0] - model.position[0];\n    const dy = model.focalPoint[1] - model.position[1];\n    const dz = model.focalPoint[2] - model.position[2];\n    model.distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n    if (model.distance < 1e-20) {\n      model.distance = 1e-20;\n      vtkDebugMacro('Distance is set to minimum.');\n      const vec = model.directionOfProjection;\n\n      // recalculate FocalPoint\n      model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n      model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n      model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    }\n    model.directionOfProjection[0] = dx / model.distance;\n    model.directionOfProjection[1] = dy / model.distance;\n    model.directionOfProjection[2] = dz / model.distance;\n    computeViewPlaneNormal();\n  };\n\n  //----------------------------------------------------------------------------\n  // Move the position of the camera along the view plane normal. Moving\n  // towards the focal point (e.g., > 1) is a dolly-in, moving away\n  // from the focal point (e.g., < 1) is a dolly-out.\n  publicAPI.dolly = amount => {\n    if (amount <= 0.0) {\n      return;\n    }\n\n    // dolly moves the camera towards the focus\n    const d = model.distance / amount;\n    publicAPI.setPosition(model.focalPoint[0] - d * model.directionOfProjection[0], model.focalPoint[1] - d * model.directionOfProjection[1], model.focalPoint[2] - d * model.directionOfProjection[2]);\n  };\n  publicAPI.roll = angle => {\n    const eye = model.position;\n    const at = model.focalPoint;\n    const up = model.viewUp;\n    const viewUpVec4 = new Float64Array([up[0], up[1], up[2], 0.0]);\n    mat4.identity(rotateMatrix);\n    const viewDir = new Float64Array([at[0] - eye[0], at[1] - eye[1], at[2] - eye[2]]);\n    mat4.rotate(rotateMatrix, rotateMatrix, radiansFromDegrees(angle), viewDir);\n    vec4.transformMat4(viewUpVec4, viewUpVec4, rotateMatrix);\n    model.viewUp[0] = viewUpVec4[0];\n    model.viewUp[1] = viewUpVec4[1];\n    model.viewUp[2] = viewUpVec4[2];\n    publicAPI.modified();\n  };\n  publicAPI.azimuth = angle => {\n    const fp = model.focalPoint;\n    mat4.identity(trans);\n\n    // translate the focal point to the origin,\n    // rotate about view up,\n    // translate back again\n    mat4.translate(trans, trans, fp);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);\n    mat4.translate(trans, trans, [-fp[0], -fp[1], -fp[2]]);\n\n    // apply the transform to the position\n    vec3.transformMat4(newPosition, model.position, trans);\n    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);\n  };\n  publicAPI.yaw = angle => {\n    const position = model.position;\n    mat4.identity(trans);\n\n    // translate the camera to the origin,\n    // rotate about axis,\n    // translate back again\n    mat4.translate(trans, trans, position);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);\n    mat4.translate(trans, trans, [-position[0], -position[1], -position[2]]);\n\n    // apply the transform to the position\n    vec3.transformMat4(newFocalPoint, model.focalPoint, trans);\n    publicAPI.setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);\n  };\n  publicAPI.elevation = angle => {\n    const fp = model.focalPoint;\n\n    // get the eye / camera position from the viewMatrix\n    const vt = publicAPI.getViewMatrix();\n    const axis = [-vt[0], -vt[1], -vt[2]];\n    mat4.identity(trans);\n\n    // translate the focal point to the origin,\n    // rotate about view up,\n    // translate back again\n    mat4.translate(trans, trans, fp);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), axis);\n    mat4.translate(trans, trans, [-fp[0], -fp[1], -fp[2]]);\n\n    // apply the transform to the position\n    vec3.transformMat4(newPosition, model.position, trans);\n    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);\n  };\n  publicAPI.pitch = angle => {\n    const position = model.position;\n    const vt = publicAPI.getViewMatrix();\n    const axis = [vt[0], vt[1], vt[2]];\n    mat4.identity(trans);\n\n    // translate the camera to the origin,\n    // rotate about axis,\n    // translate back again\n    mat4.translate(trans, trans, position);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), axis);\n    mat4.translate(trans, trans, [-position[0], -position[1], -position[2]]);\n\n    // apply the transform to the focal point\n    vec3.transformMat4(newFocalPoint, model.focalPoint, trans);\n    publicAPI.setFocalPoint(...newFocalPoint);\n  };\n  publicAPI.zoom = factor => {\n    if (factor <= 0) {\n      return;\n    }\n    if (model.parallelProjection) {\n      model.parallelScale /= factor;\n    } else {\n      model.viewAngle /= factor;\n    }\n    publicAPI.modified();\n  };\n  publicAPI.translate = (x, y, z) => {\n    const offset = [x, y, z];\n    add(model.position, offset, model.position);\n    add(model.focalPoint, offset, model.focalPoint);\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n  publicAPI.applyTransform = transformMat4 => {\n    const vuOld = [...model.viewUp, 1.0];\n    const posNew = [];\n    const fpNew = [];\n    const vuNew = [];\n    vuOld[0] += model.position[0];\n    vuOld[1] += model.position[1];\n    vuOld[2] += model.position[2];\n    vec4.transformMat4(posNew, [...model.position, 1.0], transformMat4);\n    vec4.transformMat4(fpNew, [...model.focalPoint, 1.0], transformMat4);\n    vec4.transformMat4(vuNew, vuOld, transformMat4);\n    vuNew[0] -= posNew[0];\n    vuNew[1] -= posNew[1];\n    vuNew[2] -= posNew[2];\n    publicAPI.setPosition(...posNew.slice(0, 3));\n    publicAPI.setFocalPoint(...fpNew.slice(0, 3));\n    publicAPI.setViewUp(...vuNew.slice(0, 3));\n  };\n  publicAPI.getThickness = () => model.clippingRange[1] - model.clippingRange[0];\n  publicAPI.setThickness = thickness => {\n    let t = thickness;\n    if (t < 1e-20) {\n      t = 1e-20;\n      vtkDebugMacro('Thickness is set to minimum.');\n    }\n    publicAPI.setClippingRange(model.clippingRange[0], model.clippingRange[0] + t);\n  };\n  publicAPI.setThicknessFromFocalPoint = thickness => {\n    let t = thickness;\n    if (t < 1e-20) {\n      t = 1e-20;\n      vtkDebugMacro('Thickness is set to minimum.');\n    }\n    publicAPI.setClippingRange(model.distance - t / 2, model.distance + t / 2);\n  };\n\n  // Unimplemented functions\n  publicAPI.setRoll = angle => {}; // dependency on GetOrientation() and a model.ViewTransform object, see https://github.com/Kitware/VTK/blob/master/Common/Transforms/vtkTransform.cxx and https://vtk.org/doc/nightly/html/classvtkTransform.html\n  publicAPI.getRoll = () => {};\n  publicAPI.setObliqueAngles = (alpha, beta) => {};\n  publicAPI.getOrientation = () => {};\n  publicAPI.getOrientationWXYZ = () => {};\n  publicAPI.getFrustumPlanes = aspect => {\n    // Return array of 24 params (4 params for each of 6 plane equations)\n  };\n  publicAPI.getCameraLightTransformMatrix = matrix => {\n    mat4.copy(matrix, model.cameraLightTransform);\n    return matrix;\n  };\n  publicAPI.computeCameraLightTransform = () => {\n    // not sure if this is the correct transformation, based on the same funciton in VTK\n    mat4.copy(tmpMatrix, publicAPI.getViewMatrix());\n    mat4.invert(tmpMatrix, tmpMatrix);\n    mat4.fromScaling(tmpMatrix2, [model.distance, model.distance, model.distance]);\n    mat4.multiply(tmpMatrix, tmpMatrix, tmpMatrix2);\n    mat4.identity(model.cameraLightTransform);\n    mat4.translate(model.cameraLightTransform, tmpMatrix, [0.0, 0.0, -1.0]);\n  };\n  publicAPI.deepCopy = sourceCamera => {};\n  publicAPI.physicalOrientationToWorldDirection = ori => {\n    // push the x axis through the orientation quat\n    const oriq = quat.fromValues(ori[0], ori[1], ori[2], ori[3]);\n    const coriq = quat.create();\n    const qdir = quat.fromValues(0.0, 0.0, 1.0, 0.0);\n    quat.conjugate(coriq, oriq);\n\n    // rotate the z axis by the quat\n    quat.multiply(qdir, oriq, qdir);\n    quat.multiply(qdir, qdir, coriq);\n\n    // return the z axis in world coords\n    return [qdir[0], qdir[1], qdir[2]];\n  };\n  publicAPI.getPhysicalToWorldMatrix = result => {\n    publicAPI.getWorldToPhysicalMatrix(result);\n    mat4.invert(result, result);\n  };\n  publicAPI.getWorldToPhysicalMatrix = result => {\n    mat4.identity(result);\n\n    // now the physical to vtk world rotation tform\n    const physVRight = [3];\n    cross(model.physicalViewNorth, model.physicalViewUp, physVRight);\n    result[0] = physVRight[0];\n    result[1] = physVRight[1];\n    result[2] = physVRight[2];\n    result[4] = model.physicalViewUp[0];\n    result[5] = model.physicalViewUp[1];\n    result[6] = model.physicalViewUp[2];\n    result[8] = -model.physicalViewNorth[0];\n    result[9] = -model.physicalViewNorth[1];\n    result[10] = -model.physicalViewNorth[2];\n    mat4.transpose(result, result);\n    vec3.set(tmpvec1, 1 / model.physicalScale, 1 / model.physicalScale, 1 / model.physicalScale);\n    mat4.scale(result, result, tmpvec1);\n    mat4.translate(result, result, model.physicalTranslation);\n  };\n  publicAPI.computeViewParametersFromViewMatrix = vmat => {\n    // invert to get view to world\n    mat4.invert(tmpMatrix, vmat);\n\n    // note with glmatrix operations happen in\n    // the reverse order\n    // mat.scale\n    // mat.translate\n    // will result in the translation then the scale\n    // mat.mult(a,b)\n    // results in perform the B transformation then A\n\n    // then extract the params position, orientation\n    // push 0,0,0 through to get a translation\n    vec3.transformMat4(tmpvec1, origin, tmpMatrix);\n    publicAPI.computeDistance();\n    const oldDist = model.distance;\n    publicAPI.setPosition(tmpvec1[0], tmpvec1[1], tmpvec1[2]);\n\n    // push basis vectors to get orientation\n    vec3.transformMat4(tmpvec2, dopbasis, tmpMatrix);\n    vec3.subtract(tmpvec2, tmpvec2, tmpvec1);\n    vec3.normalize(tmpvec2, tmpvec2);\n    publicAPI.setDirectionOfProjection(tmpvec2[0], tmpvec2[1], tmpvec2[2]);\n    vec3.transformMat4(tmpvec3, upbasis, tmpMatrix);\n    vec3.subtract(tmpvec3, tmpvec3, tmpvec1);\n    vec3.normalize(tmpvec3, tmpvec3);\n    publicAPI.setViewUp(tmpvec3[0], tmpvec3[1], tmpvec3[2]);\n    publicAPI.setDistance(oldDist);\n  };\n\n  // the provided matrix should include\n  // translation and orientation only\n  // mat is physical to view\n  publicAPI.computeViewParametersFromPhysicalMatrix = mat => {\n    // get the WorldToPhysicalMatrix\n    publicAPI.getWorldToPhysicalMatrix(tmpMatrix);\n\n    // first convert the physical -> view matrix to be\n    // world -> view\n    mat4.multiply(tmpMatrix, mat, tmpMatrix);\n    publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);\n  };\n  publicAPI.setViewMatrix = mat => {\n    model.viewMatrix = mat;\n    if (model.viewMatrix) {\n      mat4.copy(tmpMatrix, model.viewMatrix);\n      publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);\n      mat4.transpose(model.viewMatrix, model.viewMatrix);\n    }\n  };\n  publicAPI.getViewMatrix = () => {\n    if (model.viewMatrix) {\n      return model.viewMatrix;\n    }\n    mat4.lookAt(tmpMatrix, model.position,\n    // eye\n    model.focalPoint,\n    // at\n    model.viewUp // up\n    );\n\n    mat4.transpose(tmpMatrix, tmpMatrix);\n    const result = new Float64Array(16);\n    mat4.copy(result, tmpMatrix);\n    return result;\n  };\n  publicAPI.setProjectionMatrix = mat => {\n    model.projectionMatrix = mat;\n  };\n  publicAPI.getProjectionMatrix = (aspect, nearz, farz) => {\n    const result = new Float64Array(16);\n    mat4.identity(result);\n    if (model.projectionMatrix) {\n      const scale = 1 / model.physicalScale;\n      vec3.set(tmpvec1, scale, scale, scale);\n      mat4.copy(result, model.projectionMatrix);\n      mat4.scale(result, result, tmpvec1);\n      mat4.transpose(result, result);\n      return result;\n    }\n    mat4.identity(tmpMatrix);\n\n    // FIXME: Not sure what to do about adjust z buffer here\n    // adjust Z-buffer range\n    // this->ProjectionTransform->AdjustZBuffer( -1, +1, nearz, farz );\n    const cWidth = model.clippingRange[1] - model.clippingRange[0];\n    const cRange = [model.clippingRange[0] + (nearz + 1) * cWidth / 2.0, model.clippingRange[0] + (farz + 1) * cWidth / 2.0];\n    if (model.parallelProjection) {\n      // set up a rectangular parallelipiped\n      const width = model.parallelScale * aspect;\n      const height = model.parallelScale;\n      const xmin = (model.windowCenter[0] - 1.0) * width;\n      const xmax = (model.windowCenter[0] + 1.0) * width;\n      const ymin = (model.windowCenter[1] - 1.0) * height;\n      const ymax = (model.windowCenter[1] + 1.0) * height;\n      mat4.ortho(tmpMatrix, xmin, xmax, ymin, ymax, cRange[0], cRange[1]);\n      mat4.transpose(tmpMatrix, tmpMatrix);\n    } else if (model.useOffAxisProjection) {\n      throw new Error('Off-Axis projection is not supported at this time');\n    } else {\n      const tmp = Math.tan(radiansFromDegrees(model.viewAngle) / 2.0);\n      let width;\n      let height;\n      if (model.useHorizontalViewAngle === true) {\n        width = model.clippingRange[0] * tmp;\n        height = model.clippingRange[0] * tmp / aspect;\n      } else {\n        width = model.clippingRange[0] * tmp * aspect;\n        height = model.clippingRange[0] * tmp;\n      }\n      const xmin = (model.windowCenter[0] - 1.0) * width;\n      const xmax = (model.windowCenter[0] + 1.0) * width;\n      const ymin = (model.windowCenter[1] - 1.0) * height;\n      const ymax = (model.windowCenter[1] + 1.0) * height;\n      const znear = cRange[0];\n      const zfar = cRange[1];\n      tmpMatrix[0] = 2.0 * znear / (xmax - xmin);\n      tmpMatrix[5] = 2.0 * znear / (ymax - ymin);\n      tmpMatrix[2] = (xmin + xmax) / (xmax - xmin);\n      tmpMatrix[6] = (ymin + ymax) / (ymax - ymin);\n      tmpMatrix[10] = -(znear + zfar) / (zfar - znear);\n      tmpMatrix[14] = -1.0;\n      tmpMatrix[11] = -2.0 * znear * zfar / (zfar - znear);\n      tmpMatrix[15] = 0.0;\n    }\n    mat4.copy(result, tmpMatrix);\n    return result;\n  };\n  publicAPI.getCompositeProjectionMatrix = (aspect, nearz, farz) => {\n    const vMat = publicAPI.getViewMatrix();\n    const pMat = publicAPI.getProjectionMatrix(aspect, nearz, farz);\n    // mats are transposed so the order is A then B\n    // we reuse pMat as it is a copy so we can do what we want with it\n    mat4.multiply(pMat, vMat, pMat);\n    return pMat;\n  };\n  publicAPI.setDirectionOfProjection = (x, y, z) => {\n    if (model.directionOfProjection[0] === x && model.directionOfProjection[1] === y && model.directionOfProjection[2] === z) {\n      return;\n    }\n    model.directionOfProjection[0] = x;\n    model.directionOfProjection[1] = y;\n    model.directionOfProjection[2] = z;\n    const vec = model.directionOfProjection;\n\n    // recalculate FocalPoint\n    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    computeViewPlaneNormal();\n  };\n\n  // used to handle convert js device orientation angles\n  // when you use this method the camera will adjust to the\n  // device orientation such that the physicalViewUp you set\n  // in world coordinates looks up, and the physicalViewNorth\n  // you set in world coorindates will (maybe) point north\n  //\n  // NOTE WARNING - much of the documentation out there on how\n  // orientation works is seriously wrong. Even worse the Chrome\n  // device orientation simulator is completely wrong and should\n  // never be used. OMG it is so messed up.\n  //\n  // how it seems to work on iOS is that the device orientation\n  // is specified in extrinsic angles with a alpha, beta, gamma\n  // convention with axes of Z, X, Y (the code below substitutes\n  // the physical coordinate system for these axes to get the right\n  // modified coordinate system.\n  publicAPI.setDeviceAngles = (alpha, beta, gamma, screen) => {\n    const physVRight = [3];\n    cross(model.physicalViewNorth, model.physicalViewUp, physVRight);\n\n    // phone to physical coordinates\n    const rotmat = mat4.identity(new Float64Array(16));\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(alpha), model.physicalViewUp);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(beta), physVRight);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(gamma), model.physicalViewNorth);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(-screen), model.physicalViewUp);\n    const dop = new Float64Array([-model.physicalViewUp[0], -model.physicalViewUp[1], -model.physicalViewUp[2]]);\n    const vup = new Float64Array(model.physicalViewNorth);\n    vec3.transformMat4(dop, dop, rotmat);\n    vec3.transformMat4(vup, vup, rotmat);\n    publicAPI.setDirectionOfProjection(dop[0], dop[1], dop[2]);\n    publicAPI.setViewUp(vup[0], vup[1], vup[2]);\n    publicAPI.modified();\n  };\n  publicAPI.setOrientationWXYZ = (degrees, x, y, z) => {\n    const quatMat = mat4.identity(new Float64Array(16));\n    if (degrees !== 0.0 && (x !== 0.0 || y !== 0.0 || z !== 0.0)) {\n      // convert to radians\n      const angle = radiansFromDegrees(degrees);\n      const q = quat.create();\n      quat.setAxisAngle(q, [x, y, z], angle);\n      mat4.fromQuat(quatMat, q);\n    }\n    const newdop = new Float64Array(3);\n    vec3.transformMat4(newdop, [0.0, 0.0, -1.0], quatMat);\n    const newvup = new Float64Array(3);\n    vec3.transformMat4(newvup, [0.0, 1.0, 0.0], quatMat);\n    publicAPI.setDirectionOfProjection(...newdop);\n    publicAPI.setViewUp(...newvup);\n    publicAPI.modified();\n  };\n  publicAPI.computeClippingRange = bounds => {\n    let vn = null;\n    let position = null;\n    vn = model.viewPlaneNormal;\n    position = model.position;\n    const a = -vn[0];\n    const b = -vn[1];\n    const c = -vn[2];\n    const d = -(a * position[0] + b * position[1] + c * position[2]);\n\n    // Set the max near clipping plane and the min far clipping plane\n    const range = [a * bounds[0] + b * bounds[2] + c * bounds[4] + d, 1e-18];\n\n    // Find the closest / farthest bounding box vertex\n    for (let k = 0; k < 2; k++) {\n      for (let j = 0; j < 2; j++) {\n        for (let i = 0; i < 2; i++) {\n          const dist = a * bounds[i] + b * bounds[2 + j] + c * bounds[4 + k] + d;\n          range[0] = dist < range[0] ? dist : range[0];\n          range[1] = dist > range[1] ? dist : range[1];\n        }\n      }\n    }\n    return range;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  position: [0, 0, 1],\n  focalPoint: [0, 0, 0],\n  viewUp: [0, 1, 0],\n  directionOfProjection: [0, 0, -1],\n  parallelProjection: false,\n  useHorizontalViewAngle: false,\n  viewAngle: 30,\n  parallelScale: 1,\n  clippingRange: [0.01, 1000.01],\n  windowCenter: [0, 0],\n  viewPlaneNormal: [0, 0, 1],\n  useOffAxisProjection: false,\n  screenBottomLeft: [-0.5, -0.5, -0.5],\n  screenBottomRight: [0.5, -0.5, -0.5],\n  screenTopRight: [0.5, 0.5, -0.5],\n  freezeFocalPoint: false,\n  projectionMatrix: null,\n  viewMatrix: null,\n  cameraLightTransform: mat4.create(),\n  // used for world to physical transformations\n  physicalTranslation: [0, 0, 0],\n  physicalScale: 1.0,\n  physicalViewUp: [0, 1, 0],\n  physicalViewNorth: [0, 0, -1]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['distance']);\n  macro.setGet(publicAPI, model, ['parallelProjection', 'useHorizontalViewAngle', 'viewAngle', 'parallelScale', 'useOffAxisProjection', 'freezeFocalPoint', 'physicalScale']);\n  macro.getArray(publicAPI, model, ['directionOfProjection', 'viewPlaneNormal', 'position', 'focalPoint']);\n  macro.setGetArray(publicAPI, model, ['clippingRange', 'windowCenter'], 2);\n  macro.setGetArray(publicAPI, model, ['viewUp', 'screenBottomLeft', 'screenBottomRight', 'screenTopRight', 'physicalTranslation', 'physicalViewUp', 'physicalViewNorth'], 3);\n\n  // Object methods\n  vtkCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCamera');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCamera$1 = {\n  newInstance,\n  extend\n};\n\nexport { DEFAULT_VALUES, vtkCamera$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { h as hsv2rgb, i as isNan, K as floor, L as isInf, M as rgb2hsv, N as rgb2lab, O as lab2rgb } from '../../Common/Core/Math/index.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport Constants from './ColorTransferFunction/Constants.js';\n\nconst {\n  ColorSpace,\n  Scale\n} = Constants;\nconst {\n  ScalarMappingTarget\n} = vtkScalarsToColors;\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-continue                                                */\n\n// Convert to and from a special polar version of CIELAB (useful for creating\n// continuous diverging color maps).\nfunction vtkColorTransferFunctionLabToMsh(lab, msh) {\n  const L = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  const M = Math.sqrt(L * L + a * a + b * b);\n  const s = M > 0.001 ? Math.acos(L / M) : 0.0;\n  const h = s > 0.001 ? Math.atan2(b, a) : 0.0;\n  msh[0] = M;\n  msh[1] = s;\n  msh[2] = h;\n}\nfunction vtkColorTransferFunctionMshToLab(msh, lab) {\n  const M = msh[0];\n  const s = msh[1];\n  const h = msh[2];\n  lab[0] = M * Math.cos(s);\n  lab[1] = M * Math.sin(s) * Math.cos(h);\n  lab[2] = M * Math.sin(s) * Math.sin(h);\n}\n\n// For the case when interpolating from a saturated color to an unsaturated\n// color, find a hue for the unsaturated color that makes sense.\nfunction vtkColorTransferFunctionAdjustHue(msh, unsatM) {\n  if (msh[0] >= unsatM - 0.1) {\n    // The best we can do is hold hue constant.\n    return msh[2];\n  }\n\n  // This equation is designed to make the perceptual change of the\n  // interpolation to be close to constant.\n  const hueSpin = msh[1] * Math.sqrt(unsatM * unsatM - msh[0] * msh[0]) / (msh[0] * Math.sin(msh[1]));\n  // Spin hue away from 0 except in purple hues.\n  if (msh[2] > -0.3 * Math.PI) {\n    return msh[2] + hueSpin;\n  }\n  return msh[2] - hueSpin;\n}\nfunction vtkColorTransferFunctionAngleDiff(a1, a2) {\n  let adiff = a1 - a2;\n  if (adiff < 0.0) {\n    adiff = -adiff;\n  }\n  while (adiff >= 2.0 * Math.PI) {\n    adiff -= 2.0 * Math.PI;\n  }\n  if (adiff > Math.PI) {\n    adiff = 2.0 * Math.PI - adiff;\n  }\n  return adiff;\n}\n\n// Interpolate a diverging color map.\nfunction vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, result) {\n  const lab1 = [];\n  const lab2 = [];\n  rgb2lab(rgb1, lab1);\n  rgb2lab(rgb2, lab2);\n  const msh1 = [];\n  const msh2 = [];\n  vtkColorTransferFunctionLabToMsh(lab1, msh1);\n  vtkColorTransferFunctionLabToMsh(lab2, msh2);\n\n  // If the endpoints are distinct saturated colors, then place white in between\n  // them.\n  let localS = s;\n  if (msh1[1] > 0.05 && msh2[1] > 0.05 && vtkColorTransferFunctionAngleDiff(msh1[2], msh2[2]) > 0.33 * Math.PI) {\n    // Insert the white midpoint by setting one end to white and adjusting the\n    // scalar value.\n    let Mmid = Math.max(msh1[0], msh2[0]);\n    Mmid = Math.max(88.0, Mmid);\n    if (s < 0.5) {\n      msh2[0] = Mmid;\n      msh2[1] = 0.0;\n      msh2[2] = 0.0;\n      localS *= 2.0;\n    } else {\n      msh1[0] = Mmid;\n      msh1[1] = 0.0;\n      msh1[2] = 0.0;\n      localS = 2.0 * localS - 1.0;\n    }\n  }\n\n  // If one color has no saturation, then its hue value is invalid.  In this\n  // case, we want to set it to something logical so that the interpolation of\n  // hue makes sense.\n  if (msh1[1] < 0.05 && msh2[1] > 0.05) {\n    msh1[2] = vtkColorTransferFunctionAdjustHue(msh2, msh1[0]);\n  } else if (msh2[1] < 0.05 && msh1[1] > 0.05) {\n    msh2[2] = vtkColorTransferFunctionAdjustHue(msh1, msh2[0]);\n  }\n  const mshTmp = [];\n  mshTmp[0] = (1 - localS) * msh1[0] + localS * msh2[0];\n  mshTmp[1] = (1 - localS) * msh1[1] + localS * msh2[1];\n  mshTmp[2] = (1 - localS) * msh1[2] + localS * msh2[2];\n\n  // Now convert back to RGB\n  const labTmp = [];\n  vtkColorTransferFunctionMshToLab(mshTmp, labTmp);\n  lab2rgb(labTmp, result);\n}\n\n// ----------------------------------------------------------------------------\n// vtkColorTransferFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkColorTransferFunction(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkColorTransferFunction');\n\n  // Return the number of points which specify this function\n  publicAPI.getSize = () => model.nodes.length;\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPoint = (x, r, g, b) => publicAPI.addRGBPointLong(x, r, g, b, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPointLong = function (x, r, g, b) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    // Error check\n    if (midpoint < 0.0 || midpoint > 1.0) {\n      vtkErrorMacro('Midpoint outside range [0.0, 1.0]');\n      return -1;\n    }\n    if (sharpness < 0.0 || sharpness > 1.0) {\n      vtkErrorMacro('Sharpness outside range [0.0, 1.0]');\n      return -1;\n    }\n\n    // remove any node already at this X location\n    if (!model.allowDuplicateScalars) {\n      publicAPI.removePoint(x);\n    }\n\n    // Create the new node\n    const node = {\n      x,\n      r,\n      g,\n      b,\n      midpoint,\n      sharpness\n    };\n\n    // Add it, then sort to get everything in order\n    model.nodes.push(node);\n    publicAPI.sortAndUpdateRange();\n\n    // We need to find the index of the node we just added in order\n    // to return this value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If we didn't find it, something went horribly wrong so\n    // return -1\n    if (i < model.nodes.length) {\n      return i;\n    }\n    return -1;\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPoint = (x, h, s, v) => publicAPI.addHSVPointLong(x, h, s, v, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPointLong = function (x, h, s, v) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    const rgb = [];\n    const hsv = [h, s, v];\n    hsv2rgb(hsv, rgb);\n    return publicAPI.addRGBPoint(x, rgb[0], rgb[1], rgb[2], midpoint, sharpness);\n  };\n\n  //----------------------------------------------------------------------------\n  // Set nodes directly\n  publicAPI.setNodes = nodes => {\n    if (model.nodes !== nodes) {\n      const before = JSON.stringify(model.nodes);\n      model.nodes = nodes;\n      const after = JSON.stringify(model.nodes);\n      if (publicAPI.sortAndUpdateRange() || before !== after) {\n        publicAPI.modified();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  //----------------------------------------------------------------------------\n  // Sort the vector in increasing order, then fill in\n  // the Range\n  publicAPI.sortAndUpdateRange = () => {\n    const before = JSON.stringify(model.nodes);\n    model.nodes.sort((a, b) => a.x - b.x);\n    const after = JSON.stringify(model.nodes);\n    const modifiedInvoked = publicAPI.updateRange();\n    // If range is updated, Modified() has been called, don't call it again.\n    if (!modifiedInvoked && before !== after) {\n      publicAPI.modified();\n      return true;\n    }\n    return modifiedInvoked;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateRange = () => {\n    const oldRange = [2];\n    oldRange[0] = model.mappingRange[0];\n    oldRange[1] = model.mappingRange[1];\n    const size = model.nodes.length;\n    if (size) {\n      model.mappingRange[0] = model.nodes[0].x;\n      model.mappingRange[1] = model.nodes[size - 1].x;\n    } else {\n      model.mappingRange[0] = 0;\n      model.mappingRange[1] = 0;\n    }\n\n    // If the range is the same, then no need to call Modified()\n    if (oldRange[0] === model.mappingRange[0] && oldRange[1] === model.mappingRange[1]) {\n      return false;\n    }\n    publicAPI.modified();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove a point\n  publicAPI.removePoint = x => {\n    // First find the node since we need to know its\n    // index as our return value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n    const retVal = i;\n\n    // If the node doesn't exist, we return -1\n    if (i >= model.nodes.length) {\n      return -1;\n    }\n\n    // If the first or last point has been removed, then we update the range\n    // No need to sort here as the order of points hasn't changed.\n    let modifiedInvoked = false;\n    model.nodes.splice(i, 1);\n    if (i === 0 || i === model.nodes.length) {\n      modifiedInvoked = publicAPI.updateRange();\n    }\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n    return retVal;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.movePoint = (oldX, newX) => {\n    if (oldX === newX) {\n      // Nothing to do.\n      return;\n    }\n    publicAPI.removePoint(newX);\n    for (let i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === oldX) {\n        model.nodes[i].x = newX;\n        publicAPI.sortAndUpdateRange();\n        break;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove all points\n  publicAPI.removeAllPoints = () => {\n    model.nodes = [];\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in RGB\n  publicAPI.addRGBSegment = (x1, r1, g1, b1, x2, r2, g2, b2) => {\n    // First, find all points in this range and remove them\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= x1 && model.nodes[i].x <= x2) {\n        model.nodes.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    // Now add the points\n    publicAPI.addRGBPointLong(x1, r1, g1, b1, 0.5, 0.0);\n    publicAPI.addRGBPointLong(x2, r2, g2, b2, 0.5, 0.0);\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in HSV\n  publicAPI.addHSVSegment = (x1, h1, s1, v1, x2, h2, s2, v2) => {\n    const hsv1 = [h1, s1, v1];\n    const hsv2 = [h2, s2, v2];\n    const rgb1 = [];\n    const rgb2 = [];\n    hsv2rgb(hsv1, rgb1);\n    hsv2rgb(hsv2, rgb2);\n    publicAPI.addRGBSegment(x1, rgb1[0], rgb1[1], rgb1[2], x2, rgb2[0], rgb2[1], rgb2[2]);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGBA color evaluated at the specified location\n  publicAPI.mapValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return [Math.floor(255.0 * rgb[0] + 0.5), Math.floor(255.0 * rgb[1] + 0.5), Math.floor(255.0 * rgb[2] + 0.5), 255];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGB color evaluated at the specified location\n  publicAPI.getColor = (x, rgb) => {\n    if (model.indexedLookup) {\n      const numNodes = publicAPI.getSize();\n      // todo\n      const idx = publicAPI.getAnnotatedValueIndexInternal(x);\n      if (idx < 0 || numNodes === 0) {\n        const nanColor = publicAPI.getNanColorByReference();\n        rgb[0] = nanColor[0];\n        rgb[1] = nanColor[1];\n        rgb[2] = nanColor[2];\n      } else {\n        const nodeVal = [];\n        publicAPI.getNodeValue(idx % numNodes, nodeVal);\n        // nodeVal[0] is the x value. nodeVal[1...3] is rgb.\n        rgb[0] = nodeVal[1];\n        rgb[1] = nodeVal[2];\n        rgb[2] = nodeVal[3];\n      }\n      return;\n    }\n    publicAPI.getTable(x, x, 1, rgb);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the red color evaluated at the specified location\n  publicAPI.getRedValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[0];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the green color evaluated at the specified location\n  publicAPI.getGreenValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[1];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the blue color evaluated at the specified location\n  publicAPI.getBlueValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[2];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns a table of RGB colors at regular intervals along the function\n  publicAPI.getTable = (xStart_, xEnd_, size, table) => {\n    // To handle BigInt limitation\n    const xStart = Number(xStart_);\n    const xEnd = Number(xEnd_);\n\n    // Special case: If either the start or end is a NaN, then all any\n    // interpolation done on them is also a NaN.  Therefore, fill the table with\n    // the NaN color.\n    if (isNan(xStart) || isNan(xEnd)) {\n      for (let i = 0; i < size; i++) {\n        table[i * 3 + 0] = model.nanColor[0];\n        table[i * 3 + 1] = model.nanColor[1];\n        table[i * 3 + 2] = model.nanColor[2];\n      }\n      return;\n    }\n    let idx = 0;\n    const numNodes = model.nodes.length;\n\n    // Need to keep track of the last value so that\n    // we can fill in table locations past this with\n    // this value if Clamping is On.\n    let lastR = 0.0;\n    let lastG = 0.0;\n    let lastB = 0.0;\n    if (numNodes !== 0) {\n      lastR = model.nodes[numNodes - 1].r;\n      lastG = model.nodes[numNodes - 1].g;\n      lastB = model.nodes[numNodes - 1].b;\n    }\n    let x = 0.0;\n    let x1 = 0.0;\n    let x2 = 0.0;\n    const rgb1 = [0.0, 0.0, 0.0];\n    const rgb2 = [0.0, 0.0, 0.0];\n    let midpoint = 0.0;\n    let sharpness = 0.0;\n    const tmpVec = [];\n\n    // If the scale is logarithmic, make sure the range is valid.\n    let usingLogScale = model.scale === Scale.LOG10;\n    if (usingLogScale) {\n      // Note: This requires range[0] <= range[1].\n      usingLogScale = model.mappingRange[0] > 0.0;\n    }\n    let logStart = 0.0;\n    let logEnd = 0.0;\n    let logX = 0.0;\n    if (usingLogScale) {\n      logStart = Math.log10(xStart);\n      logEnd = Math.log10(xEnd);\n    }\n\n    // For each table entry\n    for (let i = 0; i < size; i++) {\n      // Find our location in the table\n      const tidx = 3 * i;\n\n      // Find our X location. If we are taking only 1 sample, make\n      // it halfway between start and end (usually start and end will\n      // be the same in this case)\n      if (size > 1) {\n        if (usingLogScale) {\n          logX = logStart + i / (size - 1.0) * (logEnd - logStart);\n          x = 10.0 ** logX;\n        } else {\n          x = xStart + i / (size - 1.0) * (xEnd - xStart);\n        }\n      } else if (usingLogScale) {\n        logX = 0.5 * (logStart + logEnd);\n        x = 10.0 ** logX;\n      } else {\n        x = 0.5 * (xStart + xEnd);\n      }\n\n      // Linearly map x from mappingRange to [0, numberOfValues-1],\n      // discretize (round down to the closest integer),\n      // then map back to mappingRange\n      if (model.discretize) {\n        const range = model.mappingRange;\n        if (x >= range[0] && x <= range[1]) {\n          const numberOfValues = model.numberOfValues;\n          const deltaRange = range[1] - range[0];\n          if (numberOfValues <= 1) {\n            x = range[0] + deltaRange / 2.0;\n          } else {\n            // normalize x\n            const xn = (x - range[0]) / deltaRange;\n            // discretize\n            const discretizeIndex = floor(numberOfValues * xn);\n            // get discretized x\n            x = range[0] + discretizeIndex / (numberOfValues - 1) * deltaRange;\n          }\n        }\n      }\n\n      // Do we need to move to the next node?\n      while (idx < numNodes && x > model.nodes[idx].x) {\n        idx++;\n        // If we are at a valid point index, fill in\n        // the value at this node, and the one before (the\n        // two that surround our current sample location)\n        // idx cannot be 0 since we just incremented it.\n        if (idx < numNodes) {\n          x1 = model.nodes[idx - 1].x;\n          x2 = model.nodes[idx].x;\n          if (usingLogScale) {\n            x1 = Math.log10(x1);\n            x2 = Math.log10(x2);\n          }\n          rgb1[0] = model.nodes[idx - 1].r;\n          rgb2[0] = model.nodes[idx].r;\n          rgb1[1] = model.nodes[idx - 1].g;\n          rgb2[1] = model.nodes[idx].g;\n          rgb1[2] = model.nodes[idx - 1].b;\n          rgb2[2] = model.nodes[idx].b;\n\n          // We only need the previous midpoint and sharpness\n          // since these control this region\n          midpoint = model.nodes[idx - 1].midpoint;\n          sharpness = model.nodes[idx - 1].sharpness;\n\n          // Move midpoint away from extreme ends of range to avoid\n          // degenerate math\n          if (midpoint < 0.00001) {\n            midpoint = 0.00001;\n          }\n          if (midpoint > 0.99999) {\n            midpoint = 0.99999;\n          }\n        }\n      }\n\n      // Are we at or past the end? If so, just use the last value\n      if (x > model.mappingRange[1]) {\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseAboveRangeColor()) {\n            table[tidx] = model.aboveRangeColor[0];\n            table[tidx + 1] = model.aboveRangeColor[1];\n            table[tidx + 2] = model.aboveRangeColor[2];\n          } else {\n            table[tidx] = lastR;\n            table[tidx + 1] = lastG;\n            table[tidx + 2] = lastB;\n          }\n        }\n      } else if (x < model.mappingRange[0] || isInf(x) && x < 0) {\n        // we are before the first node? If so, duplicate this node's values.\n        // We have to deal with -inf here\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseBelowRangeColor()) {\n            table[tidx] = model.belowRangeColor[0];\n            table[tidx + 1] = model.belowRangeColor[1];\n            table[tidx + 2] = model.belowRangeColor[2];\n          } else if (numNodes > 0) {\n            table[tidx] = model.nodes[0].r;\n            table[tidx + 1] = model.nodes[0].g;\n            table[tidx + 2] = model.nodes[0].b;\n          }\n        }\n      } else if (idx === 0 && (Math.abs(x - xStart) < 1e-6 || model.discretize)) {\n        if (numNodes > 0) {\n          table[tidx] = model.nodes[0].r;\n          table[tidx + 1] = model.nodes[0].g;\n          table[tidx + 2] = model.nodes[0].b;\n        } else {\n          table[tidx] = 0.0;\n          table[tidx + 1] = 0.0;\n          table[tidx + 2] = 0.0;\n        }\n      } else {\n        // OK, we are between two nodes - interpolate\n        // Our first attempt at a normalized location [0,1] -\n        // we will be modifying this based on midpoint and\n        // sharpness to get the curve shape we want and to have\n        // it pass through (y1+y2)/2 at the midpoint.\n        let s = 0.0;\n        if (usingLogScale) {\n          s = (logX - x1) / (x2 - x1);\n        } else {\n          s = (x - x1) / (x2 - x1);\n        }\n\n        // Readjust based on the midpoint - linear adjustment\n        if (s < midpoint) {\n          s = 0.5 * s / midpoint;\n        } else {\n          s = 0.5 + 0.5 * (s - midpoint) / (1.0 - midpoint);\n        }\n\n        // override for sharpness > 0.99\n        // In this case we just want piecewise constant\n        if (sharpness > 0.99) {\n          // Use the first value since we are below the midpoint\n          if (s < 0.5) {\n            table[tidx] = rgb1[0];\n            table[tidx + 1] = rgb1[1];\n            table[tidx + 2] = rgb1[2];\n            continue;\n          } else {\n            // Use the second value at or above the midpoint\n            table[tidx] = rgb2[0];\n            table[tidx + 1] = rgb2[1];\n            table[tidx + 2] = rgb2[2];\n            continue;\n          }\n        }\n\n        // Override for sharpness < 0.01\n        // In this case we want piecewise linear\n        if (sharpness < 0.01) {\n          // Simple linear interpolation\n          if (model.colorSpace === ColorSpace.RGB) {\n            table[tidx] = (1 - s) * rgb1[0] + s * rgb2[0];\n            table[tidx + 1] = (1 - s) * rgb1[1] + s * rgb2[1];\n            table[tidx + 2] = (1 - s) * rgb1[2] + s * rgb2[2];\n          } else if (model.colorSpace === ColorSpace.HSV) {\n            const hsv1 = [];\n            const hsv2 = [];\n            rgb2hsv(rgb1, hsv1);\n            rgb2hsv(rgb2, hsv2);\n            if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n              if (hsv1[0] > hsv2[0]) {\n                hsv1[0] -= 1.0;\n              } else {\n                hsv2[0] -= 1.0;\n              }\n            }\n            const hsvTmp = [];\n            hsvTmp[0] = (1.0 - s) * hsv1[0] + s * hsv2[0];\n            if (hsvTmp[0] < 0.0) {\n              hsvTmp[0] += 1.0;\n            }\n            hsvTmp[1] = (1.0 - s) * hsv1[1] + s * hsv2[1];\n            hsvTmp[2] = (1.0 - s) * hsv1[2] + s * hsv2[2];\n\n            // Now convert this back to RGB\n            hsv2rgb(hsvTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.LAB) {\n            const lab1 = [];\n            const lab2 = [];\n            rgb2lab(rgb1, lab1);\n            rgb2lab(rgb2, lab2);\n            const labTmp = [];\n            labTmp[0] = (1 - s) * lab1[0] + s * lab2[0];\n            labTmp[1] = (1 - s) * lab1[1] + s * lab2[1];\n            labTmp[2] = (1 - s) * lab1[2] + s * lab2[2];\n\n            // Now convert back to RGB\n            lab2rgb(labTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.DIVERGING) {\n            vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else {\n            vtkErrorMacro('ColorSpace set to invalid value.', model.colorSpace);\n          }\n          continue;\n        }\n\n        // We have a sharpness between [0.01, 0.99] - we will\n        // used a modified hermite curve interpolation where we\n        // derive the slope based on the sharpness, and we compress\n        // the curve non-linearly based on the sharpness\n\n        // First, we will adjust our position based on sharpness in\n        // order to make the curve sharper (closer to piecewise constant)\n        if (s < 0.5) {\n          s = 0.5 * (s * 2.0) ** (1.0 + 10.0 * sharpness);\n        } else if (s > 0.5) {\n          s = 1.0 - 0.5 * ((1.0 - s) * 2) ** (1 + 10.0 * sharpness);\n        }\n\n        // Compute some coefficients we will need for the hermite curve\n        const ss = s * s;\n        const sss = ss * s;\n        const h1 = 2.0 * sss - 3 * ss + 1;\n        const h2 = -2 * sss + 3 * ss;\n        const h3 = sss - 2 * ss + s;\n        const h4 = sss - ss;\n        let slope;\n        let t;\n        if (model.colorSpace === ColorSpace.RGB) {\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = rgb2[j] - rgb1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            table[tidx + j] = h1 * rgb1[j] + h2 * rgb2[j] + h3 * t + h4 * t;\n          }\n        } else if (model.colorSpace === ColorSpace.HSV) {\n          const hsv1 = [];\n          const hsv2 = [];\n          rgb2hsv(rgb1, hsv1);\n          rgb2hsv(rgb2, hsv2);\n          if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n            if (hsv1[0] > hsv2[0]) {\n              hsv1[0] -= 1.0;\n            } else {\n              hsv2[0] -= 1.0;\n            }\n          }\n          const hsvTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = hsv2[j] - hsv1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            hsvTmp[j] = h1 * hsv1[j] + h2 * hsv2[j] + h3 * t + h4 * t;\n            if (j === 0 && hsvTmp[j] < 0.0) {\n              hsvTmp[j] += 1.0;\n            }\n          }\n          // Now convert this back to RGB\n          hsv2rgb(hsvTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.LAB) {\n          const lab1 = [];\n          const lab2 = [];\n          rgb2lab(rgb1, lab1);\n          rgb2lab(rgb2, lab2);\n          const labTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = lab2[j] - lab1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            labTmp[j] = h1 * lab1[j] + h2 * lab2[j] + h3 * t + h4 * t;\n          }\n          // Now convert this back to RGB\n          lab2rgb(labTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.DIVERGING) {\n          // I have not implemented proper interpolation by a hermite curve for\n          // the diverging color map, but I cannot think of a good use case for\n          // that anyway.\n          vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else {\n          vtkErrorMacro('ColorSpace set to invalid value.');\n        }\n\n        // Final error check to make sure we don't go outside [0,1]\n        for (let j = 0; j < 3; j++) {\n          table[tidx + j] = table[tidx + j] < 0.0 ? 0.0 : table[tidx + j];\n          table[tidx + j] = table[tidx + j] > 1.0 ? 1.0 : table[tidx + j];\n        }\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getUint8Table = function (xStart, xEnd, size) {\n    let withAlpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (publicAPI.getMTime() <= model.buildTime && model.tableSize === size && model.tableWithAlpha !== withAlpha) {\n      return model.table;\n    }\n    if (model.nodes.length === 0) {\n      vtkErrorMacro('Attempting to lookup a value with no points in the function');\n      return model.table;\n    }\n    const nbChannels = withAlpha ? 4 : 3;\n    if (model.tableSize !== size || model.tableWithAlpha !== withAlpha) {\n      model.table = new Uint8Array(size * nbChannels);\n      model.tableSize = size;\n      model.tableWithAlpha = withAlpha;\n    }\n    const tmpTable = [];\n    publicAPI.getTable(xStart, xEnd, size, tmpTable);\n    for (let i = 0; i < size; i++) {\n      model.table[i * nbChannels + 0] = Math.floor(tmpTable[i * 3 + 0] * 255.0 + 0.5);\n      model.table[i * nbChannels + 1] = Math.floor(tmpTable[i * 3 + 1] * 255.0 + 0.5);\n      model.table[i * nbChannels + 2] = Math.floor(tmpTable[i * 3 + 2] * 255.0 + 0.5);\n      if (withAlpha) {\n        model.table[i * nbChannels + 3] = 255;\n      }\n    }\n    model.buildTime.modified();\n    return model.table;\n  };\n  publicAPI.buildFunctionFromArray = array => {\n    publicAPI.removeAllPoints();\n    const numComponents = array.getNumberOfComponents();\n    for (let i = 0; i < array.getNumberOfTuples(); i++) {\n      switch (numComponents) {\n        case 3:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 4:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 5:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n        case 6:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n      }\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.buildFunctionFromTable = (xStart, xEnd, size, table) => {\n    let inc = 0.0;\n    publicAPI.removeAllPoints();\n    if (size > 1) {\n      inc = (xEnd - xStart) / (size - 1.0);\n    }\n    for (let i = 0; i < size; i++) {\n      const node = {\n        x: xStart + inc * i,\n        r: table[i * 3],\n        g: table[i * 3 + 1],\n        b: table[i * 3 + 2],\n        sharpness: 0.0,\n        midpoint: 0.5\n      };\n      model.nodes.push(node);\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.getNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    val[0] = model.nodes[index].x;\n    val[1] = model.nodes[index].r;\n    val[2] = model.nodes[index].g;\n    val[3] = model.nodes[index].b;\n    val[4] = model.nodes[index].midpoint;\n    val[5] = model.nodes[index].sharpness;\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.setNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    const oldX = model.nodes[index].x;\n    model.nodes[index].x = val[0];\n    model.nodes[index].r = val[1];\n    model.nodes[index].g = val[2];\n    model.nodes[index].b = val[3];\n    model.nodes[index].midpoint = val[4];\n    model.nodes[index].sharpness = val[5];\n    if (oldX !== val[0]) {\n      // The point has been moved, the order of points or the range might have\n      // been modified.\n      publicAPI.sortAndUpdateRange();\n      // No need to call Modified() here because SortAndUpdateRange() has done it\n      // already.\n    } else {\n      publicAPI.modified();\n    }\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getNumberOfAvailableColors = () => {\n    if (model.indexedLookup && publicAPI.getSize()) {\n      return publicAPI.getSize();\n    }\n    if (model.tableSize) {\n      // Not sure if this is correct since it is only set if\n      // \"const unsigned char *::GetTable(double xStart, double xEnd,int size)\"\n      // has been called.\n      return model.tableSize;\n    }\n    const nNodes = model.nodes?.length ?? 0;\n    // The minimum is 4094 colors so that it fills in the 4096 texels texture in `mapScalarsToTexture`\n    return Math.max(4094, nNodes);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getIndexedColor = (idx, rgba) => {\n    const n = publicAPI.getSize();\n    if (n > 0 && idx >= 0) {\n      const nodeValue = [];\n      publicAPI.getNodeValue(idx % n, nodeValue);\n      for (let j = 0; j < 3; ++j) {\n        rgba[j] = nodeValue[j + 1];\n      }\n      rgba[3] = 1.0; // NodeColor is RGB-only.\n      return;\n    }\n    const nanColor = publicAPI.getNanColorByReference();\n    rgba[0] = nanColor[0];\n    rgba[1] = nanColor[1];\n    rgba[2] = nanColor[2];\n    rgba[3] = 1.0; // NanColor is RGB-only.\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.fillFromDataPointer = (nb, ptr) => {\n    if (nb <= 0 || !ptr) {\n      return;\n    }\n    publicAPI.removeAllPoints();\n    for (let i = 0; i < nb; i++) {\n      publicAPI.addRGBPoint(ptr[i * 4], ptr[i * 4 + 1], ptr[i * 4 + 2], ptr[i * 4 + 3]);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setMappingRange = (min, max) => {\n    const range = [min, max];\n    const originalRange = publicAPI.getRange();\n    if (originalRange[1] === range[1] && originalRange[0] === range[0]) {\n      return;\n    }\n    if (range[1] === range[0]) {\n      vtkErrorMacro('attempt to set zero width color range');\n      return;\n    }\n    const scale = (range[1] - range[0]) / (originalRange[1] - originalRange[0]);\n    const shift = range[0] - originalRange[0] * scale;\n    for (let i = 0; i < model.nodes.length; ++i) {\n      model.nodes[i].x = model.nodes[i].x * scale + shift;\n    }\n    model.mappingRange[0] = range[0];\n    model.mappingRange[1] = range[1];\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.adjustRange = range => {\n    const functionRange = publicAPI.getRange();\n\n    // Make sure we have points at each end of the range\n    const rgb = [];\n    if (functionRange[0] < range[0]) {\n      publicAPI.getColor(range[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    }\n    if (functionRange[1] > range[1]) {\n      publicAPI.getColor(range[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    }\n\n    // Remove all points out-of-range\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= range[0] && model.nodes[i].x <= range[1]) {\n        model.nodes.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    return 1;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.estimateMinNumberOfSamples = (x1, x2) => {\n    const d = publicAPI.findMinimumXDistance();\n    return Math.ceil((x2 - x1) / d);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.findMinimumXDistance = () => {\n    if (model.nodes.length < 2) {\n      return -1.0;\n    }\n    let distance = Number.MAX_VALUE;\n    for (let i = 0; i < model.nodes.length - 1; i++) {\n      const currentDist = model.nodes[i + 1].x - model.nodes[i].x;\n      if (currentDist < distance) {\n        distance = currentDist;\n      }\n    }\n    return distance;\n  };\n  publicAPI.mapScalarsThroughTable = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkDebugMacro('Transfer Function Has No Points!');\n      return;\n    }\n    if (model.indexedLookup) {\n      publicAPI.mapDataIndexed(input, output, outFormat, inputOffset);\n    } else {\n      publicAPI.mapData(input, output, outFormat, inputOffset);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.mapData = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkWarningMacro('Transfer Function Has No Points!');\n      return;\n    }\n    const alpha = Math.floor(publicAPI.getAlpha() * 255.0 + 0.5);\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    const rgb = [];\n    if (outFormat === ScalarMappingTarget.RGBA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 4] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 4 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 4 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n        outputV[i * 4 + 3] = alpha;\n      }\n    }\n    if (outFormat === ScalarMappingTarget.RGB) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 3] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 3 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 3 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE_ALPHA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 2] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n        outputV[i * 2 + 1] = alpha;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.applyColorMap = colorMap => {\n    const oldColorSpace = JSON.stringify(model.colorSpace);\n    if (colorMap.ColorSpace) {\n      model.colorSpace = ColorSpace[colorMap.ColorSpace.toUpperCase()];\n      if (model.colorSpace === undefined) {\n        vtkErrorMacro(`ColorSpace ${colorMap.ColorSpace} not supported, using RGB instead`);\n        model.colorSpace = ColorSpace.RGB;\n      }\n    }\n    let isModified = oldColorSpace !== JSON.stringify(model.colorSpace);\n    const oldNanColor = isModified || JSON.stringify(model.nanColor);\n    if (colorMap.NanColor) {\n      model.nanColor = [].concat(colorMap.NanColor);\n      while (model.nanColor.length < 4) {\n        model.nanColor.push(1.0);\n      }\n    }\n    isModified = isModified || oldNanColor !== JSON.stringify(model.nanColor);\n    const oldNodes = isModified || JSON.stringify(model.nodes);\n    if (colorMap.RGBPoints) {\n      const size = colorMap.RGBPoints.length;\n      model.nodes = [];\n      const midpoint = 0.5;\n      const sharpness = 0.0;\n      for (let i = 0; i < size; i += 4) {\n        model.nodes.push({\n          x: colorMap.RGBPoints[i],\n          r: colorMap.RGBPoints[i + 1],\n          g: colorMap.RGBPoints[i + 2],\n          b: colorMap.RGBPoints[i + 3],\n          midpoint,\n          sharpness\n        });\n      }\n    }\n    const modifiedInvoked = publicAPI.sortAndUpdateRange();\n    const callModified = !modifiedInvoked && (isModified || oldNodes !== JSON.stringify(model.nodes));\n    if (callModified) publicAPI.modified();\n    return modifiedInvoked || callModified;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clamping: true,\n  colorSpace: ColorSpace.RGB,\n  hSVWrap: true,\n  scale: Scale.LINEAR,\n  nanColor: null,\n  belowRangeColor: null,\n  aboveRangeColor: null,\n  useAboveRangeColor: false,\n  useBelowRangeColor: false,\n  allowDuplicateScalars: false,\n  table: null,\n  tableSize: 0,\n  buildTime: null,\n  nodes: null,\n  discretize: false,\n  numberOfValues: 256\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkScalarsToColors.extend(publicAPI, model, initialValues);\n\n  // Internal objects initialization\n  model.table = [];\n  model.nodes = [];\n  model.nanColor = [0.5, 0.0, 0.0, 1.0];\n  model.belowRangeColor = [0.0, 0.0, 0.0, 1.0];\n  model.aboveRangeColor = [1.0, 1.0, 1.0, 1.0];\n  model.buildTime = {};\n  macro.obj(model.buildTime);\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['buildTime', 'mappingRange']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['useAboveRangeColor', 'useBelowRangeColor', 'discretize', 'numberOfValues', {\n    type: 'enum',\n    name: 'colorSpace',\n    enum: ColorSpace\n  }, {\n    type: 'enum',\n    name: 'scale',\n    enum: Scale\n  }]);\n  macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkColorTransferFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkColorTransferFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkColorTransferFunction$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkColorTransferFunction$1 as default, extend, newInstance };\n","import { v as vtkColorMaps$1 } from './ColorMaps.json.js';\n\nconst presetMap = Object.create(null);\nvtkColorMaps$1.filter(p => p.RGBPoints).filter(p => p.ColorSpace !== 'CIELAB').forEach(p => {\n  presetMap[p.Name] = p;\n});\n\n// ----------------------------------------------------------------------------\n\nconst rgbPresetNames = Object.keys(presetMap);\nrgbPresetNames.sort();\n\n// ----------------------------------------------------------------------------\n\nfunction getPresetByName(name) {\n  return presetMap[name];\n}\n\n// ----------------------------------------------------------------------------\n\nfunction addPreset(preset) {\n  if (!preset.RGBPoints || preset.ColorSpace === 'CIELAB') {\n    return;\n  }\n  if (!presetMap[preset.Name]) {\n    rgbPresetNames.push(preset.Name);\n    rgbPresetNames.sort();\n  }\n  presetMap[preset.Name] = preset;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction removePresetByName(name) {\n  const index = rgbPresetNames.indexOf(name);\n  if (index > -1) {\n    rgbPresetNames.splice(index, 1);\n  }\n  delete presetMap[name];\n}\n\n// ----------------------------------------------------------------------------\n\nvar vtkColorMaps = {\n  addPreset,\n  removePresetByName,\n  getPresetByName,\n  rgbPresetNames\n};\n\nexport { vtkColorMaps as default };\n","var vtkColorMaps = [\n\t{\n\t\tName: \"KAAMS\",\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.63,\n\t\t\t0.63,\n\t\t\t1,\n\t\t\t0.67,\n\t\t\t0.5,\n\t\t\t0.33,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0.75,\n\t\t\t0.53,\n\t\t\t0.35,\n\t\t\t0.7,\n\t\t\t1,\n\t\t\t0.75,\n\t\t\t0.5\n\t\t],\n\t\tAnnotations: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t2,\n\t\t\t2,\n\t\t\t3,\n\t\t\t3,\n\t\t\t4,\n\t\t\t4,\n\t\t\t5,\n\t\t\t5,\n\t\t\t6,\n\t\t\t6,\n\t\t\t7,\n\t\t\t7,\n\t\t\t8,\n\t\t\t8,\n\t\t\t9,\n\t\t\t9,\n\t\t\t10,\n\t\t\t10,\n\t\t\t11,\n\t\t\t11\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Diverging\",\n\t\tName: \"Cool to Warm\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.23137254902,\n\t\t\t0.298039215686,\n\t\t\t0.752941176471,\n\t\t\t0.5,\n\t\t\t0.865,\n\t\t\t0.865,\n\t\t\t0.865,\n\t\t\t1,\n\t\t\t0.705882352941,\n\t\t\t0.0156862745098,\n\t\t\t0.149019607843\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Cool to Warm (Extended)\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.34902,\n\t\t\t0.03125,\n\t\t\t0.039216,\n\t\t\t0.062745,\n\t\t\t0.380392,\n\t\t\t0.0625,\n\t\t\t0.062745,\n\t\t\t0.117647,\n\t\t\t0.411765,\n\t\t\t0.09375,\n\t\t\t0.090196,\n\t\t\t0.184314,\n\t\t\t0.45098,\n\t\t\t0.125,\n\t\t\t0.12549,\n\t\t\t0.262745,\n\t\t\t0.501961,\n\t\t\t0.15625,\n\t\t\t0.160784,\n\t\t\t0.337255,\n\t\t\t0.541176,\n\t\t\t0.1875,\n\t\t\t0.2,\n\t\t\t0.396078,\n\t\t\t0.568627,\n\t\t\t0.21875,\n\t\t\t0.239216,\n\t\t\t0.454902,\n\t\t\t0.6,\n\t\t\t0.25,\n\t\t\t0.286275,\n\t\t\t0.521569,\n\t\t\t0.65098,\n\t\t\t0.28125,\n\t\t\t0.337255,\n\t\t\t0.592157,\n\t\t\t0.701961,\n\t\t\t0.3125,\n\t\t\t0.388235,\n\t\t\t0.654902,\n\t\t\t0.74902,\n\t\t\t0.34375,\n\t\t\t0.466667,\n\t\t\t0.737255,\n\t\t\t0.819608,\n\t\t\t0.375,\n\t\t\t0.572549,\n\t\t\t0.819608,\n\t\t\t0.878431,\n\t\t\t0.40625,\n\t\t\t0.654902,\n\t\t\t0.866667,\n\t\t\t0.909804,\n\t\t\t0.4375,\n\t\t\t0.752941,\n\t\t\t0.917647,\n\t\t\t0.941176,\n\t\t\t0.46875,\n\t\t\t0.823529,\n\t\t\t0.956863,\n\t\t\t0.968627,\n\t\t\t0.5,\n\t\t\t0.988235,\n\t\t\t0.960784,\n\t\t\t0.901961,\n\t\t\t0.5,\n\t\t\t0.941176,\n\t\t\t0.984314,\n\t\t\t0.988235,\n\t\t\t0.52,\n\t\t\t0.988235,\n\t\t\t0.945098,\n\t\t\t0.85098,\n\t\t\t0.54,\n\t\t\t0.980392,\n\t\t\t0.898039,\n\t\t\t0.784314,\n\t\t\t0.5625,\n\t\t\t0.968627,\n\t\t\t0.835294,\n\t\t\t0.698039,\n\t\t\t0.59375,\n\t\t\t0.94902,\n\t\t\t0.733333,\n\t\t\t0.588235,\n\t\t\t0.625,\n\t\t\t0.929412,\n\t\t\t0.65098,\n\t\t\t0.509804,\n\t\t\t0.65625,\n\t\t\t0.909804,\n\t\t\t0.564706,\n\t\t\t0.435294,\n\t\t\t0.6875,\n\t\t\t0.878431,\n\t\t\t0.458824,\n\t\t\t0.352941,\n\t\t\t0.71875,\n\t\t\t0.839216,\n\t\t\t0.388235,\n\t\t\t0.286275,\n\t\t\t0.75,\n\t\t\t0.760784,\n\t\t\t0.294118,\n\t\t\t0.211765,\n\t\t\t0.78125,\n\t\t\t0.701961,\n\t\t\t0.211765,\n\t\t\t0.168627,\n\t\t\t0.8125,\n\t\t\t0.65098,\n\t\t\t0.156863,\n\t\t\t0.129412,\n\t\t\t0.84375,\n\t\t\t0.6,\n\t\t\t0.094118,\n\t\t\t0.094118,\n\t\t\t0.875,\n\t\t\t0.54902,\n\t\t\t0.066667,\n\t\t\t0.098039,\n\t\t\t0.90625,\n\t\t\t0.501961,\n\t\t\t0.05098,\n\t\t\t0.12549,\n\t\t\t0.9375,\n\t\t\t0.45098,\n\t\t\t0.054902,\n\t\t\t0.172549,\n\t\t\t0.96875,\n\t\t\t0.4,\n\t\t\t0.054902,\n\t\t\t0.192157,\n\t\t\t1,\n\t\t\t0.34902,\n\t\t\t0.070588,\n\t\t\t0.211765\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Diverging\",\n\t\tName: \"Warm to Cool\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.705882352941,\n\t\t\t0.0156862745098,\n\t\t\t0.149019607843,\n\t\t\t0.5,\n\t\t\t0.865,\n\t\t\t0.865,\n\t\t\t0.865,\n\t\t\t1,\n\t\t\t0.23137254902,\n\t\t\t0.298039215686,\n\t\t\t0.752941176471\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Warm to Cool (Extended)\",\n\t\tNanColor: [\n\t\t\t0.250004,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.34902,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.025,\n\t\t\t0.4,\n\t\t\t0.00392157,\n\t\t\t0.101961,\n\t\t\t0.05,\n\t\t\t0.470588,\n\t\t\t0.0156863,\n\t\t\t0.0901961,\n\t\t\t0.075,\n\t\t\t0.54902,\n\t\t\t0.027451,\n\t\t\t0.0705882,\n\t\t\t0.1,\n\t\t\t0.619608,\n\t\t\t0.0627451,\n\t\t\t0.0431373,\n\t\t\t0.125,\n\t\t\t0.690196,\n\t\t\t0.12549,\n\t\t\t0.0627451,\n\t\t\t0.15,\n\t\t\t0.741176,\n\t\t\t0.184314,\n\t\t\t0.0745098,\n\t\t\t0.175,\n\t\t\t0.788235,\n\t\t\t0.266667,\n\t\t\t0.0941176,\n\t\t\t0.2,\n\t\t\t0.811765,\n\t\t\t0.345098,\n\t\t\t0.113725,\n\t\t\t0.225,\n\t\t\t0.831373,\n\t\t\t0.411765,\n\t\t\t0.133333,\n\t\t\t0.25,\n\t\t\t0.85098,\n\t\t\t0.47451,\n\t\t\t0.145098,\n\t\t\t0.275,\n\t\t\t0.870588,\n\t\t\t0.54902,\n\t\t\t0.156863,\n\t\t\t0.3,\n\t\t\t0.878431,\n\t\t\t0.619608,\n\t\t\t0.168627,\n\t\t\t0.325,\n\t\t\t0.890196,\n\t\t\t0.658824,\n\t\t\t0.196078,\n\t\t\t0.35,\n\t\t\t0.909804,\n\t\t\t0.717647,\n\t\t\t0.235294,\n\t\t\t0.375,\n\t\t\t0.929412,\n\t\t\t0.776471,\n\t\t\t0.278431,\n\t\t\t0.395522,\n\t\t\t0.94902,\n\t\t\t0.823529,\n\t\t\t0.321569,\n\t\t\t0.418905,\n\t\t\t0.968627,\n\t\t\t0.87451,\n\t\t\t0.407843,\n\t\t\t0.444278,\n\t\t\t0.980392,\n\t\t\t0.917647,\n\t\t\t0.509804,\n\t\t\t0.470149,\n\t\t\t0.988235,\n\t\t\t0.956863,\n\t\t\t0.643137,\n\t\t\t0.483582,\n\t\t\t0.992157,\n\t\t\t0.964706,\n\t\t\t0.713725,\n\t\t\t0.499,\n\t\t\t0.988235,\n\t\t\t0.980392,\n\t\t\t0.870588,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.501,\n\t\t\t0.913725,\n\t\t\t0.988235,\n\t\t\t0.937255,\n\t\t\t0.516418,\n\t\t\t0.827451,\n\t\t\t0.980392,\n\t\t\t0.886275,\n\t\t\t0.531343,\n\t\t\t0.764706,\n\t\t\t0.980392,\n\t\t\t0.866667,\n\t\t\t0.546766,\n\t\t\t0.658824,\n\t\t\t0.980392,\n\t\t\t0.843137,\n\t\t\t0.564179,\n\t\t\t0.572549,\n\t\t\t0.964706,\n\t\t\t0.835294,\n\t\t\t0.587562,\n\t\t\t0.423529,\n\t\t\t0.941176,\n\t\t\t0.87451,\n\t\t\t0.60597,\n\t\t\t0.262745,\n\t\t\t0.901961,\n\t\t\t0.862745,\n\t\t\t0.629851,\n\t\t\t0.0705882,\n\t\t\t0.854902,\n\t\t\t0.870588,\n\t\t\t0.651741,\n\t\t\t0.0509804,\n\t\t\t0.8,\n\t\t\t0.85098,\n\t\t\t0.681592,\n\t\t\t0.0235294,\n\t\t\t0.709804,\n\t\t\t0.831373,\n\t\t\t0.712935,\n\t\t\t0.0313725,\n\t\t\t0.615686,\n\t\t\t0.811765,\n\t\t\t0.75,\n\t\t\t0.0313725,\n\t\t\t0.537255,\n\t\t\t0.788235,\n\t\t\t0.775,\n\t\t\t0.0392157,\n\t\t\t0.466667,\n\t\t\t0.768627,\n\t\t\t0.8,\n\t\t\t0.0509804,\n\t\t\t0.396078,\n\t\t\t0.741176,\n\t\t\t0.825,\n\t\t\t0.054902,\n\t\t\t0.317647,\n\t\t\t0.709804,\n\t\t\t0.85,\n\t\t\t0.054902,\n\t\t\t0.243137,\n\t\t\t0.678431,\n\t\t\t0.875,\n\t\t\t0.0431373,\n\t\t\t0.164706,\n\t\t\t0.639216,\n\t\t\t0.9,\n\t\t\t0.0313725,\n\t\t\t0.0980392,\n\t\t\t0.6,\n\t\t\t0.925,\n\t\t\t0.0392157,\n\t\t\t0.0392157,\n\t\t\t0.560784,\n\t\t\t0.95,\n\t\t\t0.105882,\n\t\t\t0.0509804,\n\t\t\t0.509804,\n\t\t\t0.975,\n\t\t\t0.113725,\n\t\t\t0.0235294,\n\t\t\t0.45098,\n\t\t\t1,\n\t\t\t0.12549,\n\t\t\t0,\n\t\t\t0.380392\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Rainbow Desaturated\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.278431372549,\n\t\t\t0.278431372549,\n\t\t\t0.858823529412,\n\t\t\t0.143,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.360784313725,\n\t\t\t0.285,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.429,\n\t\t\t0,\n\t\t\t0.501960784314,\n\t\t\t0,\n\t\t\t0.571,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.714,\n\t\t\t1,\n\t\t\t0.380392156863,\n\t\t\t0,\n\t\t\t0.857,\n\t\t\t0.419607843137,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.878431372549,\n\t\t\t0.301960784314,\n\t\t\t0.301960784314\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Cold and Hot\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.45,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.501960784314,\n\t\t\t0.55,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Black-Body Radiation\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.498039215686,\n\t\t\t1\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.4,\n\t\t\t0.901960784314,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.8,\n\t\t\t0.901960784314,\n\t\t\t0.901960784314,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"X Ray\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Grayscale\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"BkRd\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t1\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"BkGn\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0,\n\t\t\t1\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"BkBu\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"BkMa\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"BkCy\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t1\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Black, Blue and White\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.333,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.501960784314,\n\t\t\t0.666,\n\t\t\t0,\n\t\t\t0.501960784314,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Black, Orange and White\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.333,\n\t\t\t0.501960784314,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.666,\n\t\t\t1,\n\t\t\t0.501960784314,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Linear YGB 1211g\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.988235,\n\t\t\t0.968627,\n\t\t\t0.02,\n\t\t\t1,\n\t\t\t0.952941,\n\t\t\t0.878431,\n\t\t\t0.05,\n\t\t\t0.968627,\n\t\t\t0.905882,\n\t\t\t0.776471,\n\t\t\t0.1,\n\t\t\t0.94902,\n\t\t\t0.898039,\n\t\t\t0.647059,\n\t\t\t0.15,\n\t\t\t0.901961,\n\t\t\t0.878431,\n\t\t\t0.556863,\n\t\t\t0.2,\n\t\t\t0.847059,\n\t\t\t0.858824,\n\t\t\t0.482353,\n\t\t\t0.25,\n\t\t\t0.690196,\n\t\t\t0.819608,\n\t\t\t0.435294,\n\t\t\t0.3,\n\t\t\t0.513725,\n\t\t\t0.768627,\n\t\t\t0.384314,\n\t\t\t0.35,\n\t\t\t0.337255,\n\t\t\t0.721569,\n\t\t\t0.337255,\n\t\t\t0.4,\n\t\t\t0.278431,\n\t\t\t0.658824,\n\t\t\t0.392157,\n\t\t\t0.45,\n\t\t\t0.231373,\n\t\t\t0.639216,\n\t\t\t0.435294,\n\t\t\t0.5,\n\t\t\t0.203922,\n\t\t\t0.6,\n\t\t\t0.486275,\n\t\t\t0.55,\n\t\t\t0.172549,\n\t\t\t0.568627,\n\t\t\t0.537255,\n\t\t\t0.6,\n\t\t\t0.141176,\n\t\t\t0.517647,\n\t\t\t0.54902,\n\t\t\t0.65,\n\t\t\t0.133333,\n\t\t\t0.458824,\n\t\t\t0.541176,\n\t\t\t0.7,\n\t\t\t0.12549,\n\t\t\t0.396078,\n\t\t\t0.529412,\n\t\t\t0.75,\n\t\t\t0.117647,\n\t\t\t0.321569,\n\t\t\t0.521569,\n\t\t\t0.8,\n\t\t\t0.121569,\n\t\t\t0.258824,\n\t\t\t0.509804,\n\t\t\t0.85,\n\t\t\t0.133333,\n\t\t\t0.227451,\n\t\t\t0.501961,\n\t\t\t0.9,\n\t\t\t0.145098,\n\t\t\t0.192157,\n\t\t\t0.490196,\n\t\t\t0.95,\n\t\t\t0.188235,\n\t\t\t0.164706,\n\t\t\t0.470588,\n\t\t\t1,\n\t\t\t0.258824,\n\t\t\t0.196078,\n\t\t\t0.439216\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"CIELAB\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Linear Green (Gr4L)\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.054902,\n\t\t\t0.109804,\n\t\t\t0.121569,\n\t\t\t0.05,\n\t\t\t0.07451,\n\t\t\t0.172549,\n\t\t\t0.180392,\n\t\t\t0.1,\n\t\t\t0.086275,\n\t\t\t0.231373,\n\t\t\t0.219608,\n\t\t\t0.15,\n\t\t\t0.094118,\n\t\t\t0.278431,\n\t\t\t0.25098,\n\t\t\t0.2,\n\t\t\t0.109804,\n\t\t\t0.34902,\n\t\t\t0.278431,\n\t\t\t0.25,\n\t\t\t0.113725,\n\t\t\t0.4,\n\t\t\t0.278431,\n\t\t\t0.3,\n\t\t\t0.117647,\n\t\t\t0.45098,\n\t\t\t0.270588,\n\t\t\t0.35,\n\t\t\t0.117647,\n\t\t\t0.490196,\n\t\t\t0.243137,\n\t\t\t0.4,\n\t\t\t0.113725,\n\t\t\t0.521569,\n\t\t\t0.203922,\n\t\t\t0.45,\n\t\t\t0.109804,\n\t\t\t0.54902,\n\t\t\t0.152941,\n\t\t\t0.5,\n\t\t\t0.082353,\n\t\t\t0.588235,\n\t\t\t0.082353,\n\t\t\t0.55,\n\t\t\t0.109804,\n\t\t\t0.631373,\n\t\t\t0.05098,\n\t\t\t0.6,\n\t\t\t0.211765,\n\t\t\t0.678431,\n\t\t\t0.082353,\n\t\t\t0.65,\n\t\t\t0.317647,\n\t\t\t0.721569,\n\t\t\t0.113725,\n\t\t\t0.7,\n\t\t\t0.431373,\n\t\t\t0.760784,\n\t\t\t0.160784,\n\t\t\t0.75,\n\t\t\t0.556863,\n\t\t\t0.8,\n\t\t\t0.239216,\n\t\t\t0.8,\n\t\t\t0.666667,\n\t\t\t0.839216,\n\t\t\t0.294118,\n\t\t\t0.85,\n\t\t\t0.784314,\n\t\t\t0.878431,\n\t\t\t0.396078,\n\t\t\t0.9,\n\t\t\t0.886275,\n\t\t\t0.921569,\n\t\t\t0.533333,\n\t\t\t0.95,\n\t\t\t0.960784,\n\t\t\t0.94902,\n\t\t\t0.670588,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.984314,\n\t\t\t0.901961\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Linear Blue (8_31f)\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.960784,\n\t\t\t1,\n\t\t\t0.980392,\n\t\t\t0.05,\n\t\t\t0.815686,\n\t\t\t0.960784,\n\t\t\t0.913725,\n\t\t\t0.1,\n\t\t\t0.670588,\n\t\t\t0.929412,\n\t\t\t0.870588,\n\t\t\t0.15,\n\t\t\t0.556863,\n\t\t\t0.901961,\n\t\t\t0.843137,\n\t\t\t0.2,\n\t\t\t0.478431,\n\t\t\t0.870588,\n\t\t\t0.823529,\n\t\t\t0.25,\n\t\t\t0.439216,\n\t\t\t0.831373,\n\t\t\t0.803922,\n\t\t\t0.3,\n\t\t\t0.4,\n\t\t\t0.8,\n\t\t\t0.788235,\n\t\t\t0.35,\n\t\t\t0.376471,\n\t\t\t0.768627,\n\t\t\t0.768627,\n\t\t\t0.4,\n\t\t\t0.34902,\n\t\t\t0.709804,\n\t\t\t0.729412,\n\t\t\t0.45,\n\t\t\t0.32549,\n\t\t\t0.654902,\n\t\t\t0.690196,\n\t\t\t0.5,\n\t\t\t0.301961,\n\t\t\t0.607843,\n\t\t\t0.658824,\n\t\t\t0.55,\n\t\t\t0.247059,\n\t\t\t0.545098,\n\t\t\t0.619608,\n\t\t\t0.6,\n\t\t\t0.239216,\n\t\t\t0.494118,\n\t\t\t0.580392,\n\t\t\t0.65,\n\t\t\t0.227451,\n\t\t\t0.439216,\n\t\t\t0.541176,\n\t\t\t0.7,\n\t\t\t0.227451,\n\t\t\t0.403922,\n\t\t\t0.521569,\n\t\t\t0.75,\n\t\t\t0.231373,\n\t\t\t0.368627,\n\t\t\t0.501961,\n\t\t\t0.8,\n\t\t\t0.227451,\n\t\t\t0.321569,\n\t\t\t0.470588,\n\t\t\t0.85,\n\t\t\t0.219608,\n\t\t\t0.282353,\n\t\t\t0.439216,\n\t\t\t0.9,\n\t\t\t0.192157,\n\t\t\t0.235294,\n\t\t\t0.4,\n\t\t\t0.95,\n\t\t\t0.160784,\n\t\t\t0.184314,\n\t\t\t0.34902,\n\t\t\t1,\n\t\t\t0.133333,\n\t\t\t0.12549,\n\t\t\t0.301961\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"HSV\",\n\t\tName: \"Blue to Red Rainbow\",\n\t\tNanColor: [\n\t\t\t0.498039215686,\n\t\t\t0.498039215686,\n\t\t\t0.498039215686\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"HSV\",\n\t\tName: \"Red to Blue Rainbow\",\n\t\tNanColor: [\n\t\t\t0.498039215686,\n\t\t\t0.498039215686,\n\t\t\t0.498039215686\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Rainbow Blended White\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.17,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.34,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.67,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.84,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.878431372549,\n\t\t\t0,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Rainbow Blended Grey\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.317647058824,\n\t\t\t0.341176470588,\n\t\t\t0.43137254902,\n\t\t\t0.17,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.34,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.67,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.84,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.878431372549,\n\t\t\t0,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Rainbow Blended Black\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.17,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.34,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.67,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.84,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.878431372549,\n\t\t\t0,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Blue to Yellow\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.0392156862745,\n\t\t\t0.0392156862745,\n\t\t\t0.949019607843,\n\t\t\t1,\n\t\t\t0.949019607843,\n\t\t\t0.949019607843,\n\t\t\t0.0392156862745\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"HSV\",\n\t\tName: \"blot\",\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.166,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.167,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.332,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.333,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.501,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.666,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.667,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.832,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.833,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"CIELab Blue to Red\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.6,\n\t\t\t0.749019607843,\n\t\t\t1,\n\t\t\t0.76862745098,\n\t\t\t0.466666666667,\n\t\t\t0.341176470588\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"jet\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.5625,\n\t\t\t-0.777778,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t-0.269841,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t-0.015873,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0.238095,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.746032,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"rainbow\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t-0.5,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_rainbow_bright\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.32549,\n\t\t\t0.14902,\n\t\t\t0.960784,\n\t\t\t-0.866221,\n\t\t\t0.297047,\n\t\t\t0.375586,\n\t\t\t0.963836,\n\t\t\t-0.732441,\n\t\t\t0.180302,\n\t\t\t0.536818,\n\t\t\t0.964627,\n\t\t\t-0.598662,\n\t\t\t0.1302,\n\t\t\t0.649207,\n\t\t\t0.929647,\n\t\t\t-0.464883,\n\t\t\t0.0445143,\n\t\t\t0.749654,\n\t\t\t0.855998,\n\t\t\t-0.331104,\n\t\t\t0.0271325,\n\t\t\t0.830713,\n\t\t\t0.721527,\n\t\t\t-0.197324,\n\t\t\t0.259504,\n\t\t\t0.866145,\n\t\t\t0.543555,\n\t\t\t-0.0635452,\n\t\t\t0.428364,\n\t\t\t0.890725,\n\t\t\t0.329819,\n\t\t\t0.0702341,\n\t\t\t0.568503,\n\t\t\t0.898508,\n\t\t\t0.187623,\n\t\t\t0.204013,\n\t\t\t0.738259,\n\t\t\t0.890317,\n\t\t\t0.0825461,\n\t\t\t0.337793,\n\t\t\t0.84546,\n\t\t\t0.86136,\n\t\t\t0.0147555,\n\t\t\t0.471572,\n\t\t\t0.912191,\n\t\t\t0.808018,\n\t\t\t0,\n\t\t\t0.605351,\n\t\t\t0.962848,\n\t\t\t0.710445,\n\t\t\t0,\n\t\t\t0.73913,\n\t\t\t0.999469,\n\t\t\t0.600258,\n\t\t\t0.0176284,\n\t\t\t0.87291,\n\t\t\t0.994156,\n\t\t\t0.445975,\n\t\t\t0.193912,\n\t\t\t1,\n\t\t\t0.980407,\n\t\t\t0.247105,\n\t\t\t0.262699\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_rainbow_dark\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.423499,\n\t\t\t-0.866221,\n\t\t\t0,\n\t\t\t0.119346,\n\t\t\t0.529237,\n\t\t\t-0.732441,\n\t\t\t0,\n\t\t\t0.238691,\n\t\t\t0.634976,\n\t\t\t-0.598662,\n\t\t\t0,\n\t\t\t0.346852,\n\t\t\t0.68788,\n\t\t\t-0.464883,\n\t\t\t0,\n\t\t\t0.45022,\n\t\t\t0.718141,\n\t\t\t-0.331104,\n\t\t\t0,\n\t\t\t0.553554,\n\t\t\t0.664839,\n\t\t\t-0.197324,\n\t\t\t0,\n\t\t\t0.651082,\n\t\t\t0.519303,\n\t\t\t-0.0635452,\n\t\t\t0.115841,\n\t\t\t0.72479,\n\t\t\t0.352857,\n\t\t\t0.0702341,\n\t\t\t0.326771,\n\t\t\t0.781195,\n\t\t\t0.140187,\n\t\t\t0.204013,\n\t\t\t0.522765,\n\t\t\t0.798524,\n\t\t\t0.0284624,\n\t\t\t0.337793,\n\t\t\t0.703162,\n\t\t\t0.788685,\n\t\t\t0.00885756,\n\t\t\t0.471572,\n\t\t\t0.845118,\n\t\t\t0.751133,\n\t\t\t0,\n\t\t\t0.605351,\n\t\t\t0.955734,\n\t\t\t0.690825,\n\t\t\t0,\n\t\t\t0.73913,\n\t\t\t0.995402,\n\t\t\t0.567916,\n\t\t\t0.0618524,\n\t\t\t0.87291,\n\t\t\t0.987712,\n\t\t\t0.403398,\n\t\t\t0.164851,\n\t\t\t1,\n\t\t\t0.980407,\n\t\t\t0.247105,\n\t\t\t0.262699\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"nic_CubicL\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.479965,\n\t\t\t0.0118108,\n\t\t\t0.5307,\n\t\t\t-0.87451,\n\t\t\t0.522213,\n\t\t\t0.0551282,\n\t\t\t0.706919,\n\t\t\t-0.74902,\n\t\t\t0.50839,\n\t\t\t0.237278,\n\t\t\t0.867764,\n\t\t\t-0.623529,\n\t\t\t0.451617,\n\t\t\t0.373834,\n\t\t\t0.987255,\n\t\t\t-0.498039,\n\t\t\t0.39365,\n\t\t\t0.497255,\n\t\t\t0.97506,\n\t\t\t-0.372549,\n\t\t\t0.328631,\n\t\t\t0.599639,\n\t\t\t0.891843,\n\t\t\t-0.247059,\n\t\t\t0.250043,\n\t\t\t0.690286,\n\t\t\t0.778553,\n\t\t\t-0.121569,\n\t\t\t0.249656,\n\t\t\t0.764905,\n\t\t\t0.645857,\n\t\t\t0.00392157,\n\t\t\t0.297954,\n\t\t\t0.821466,\n\t\t\t0.50449,\n\t\t\t0.129412,\n\t\t\t0.337509,\n\t\t\t0.872595,\n\t\t\t0.358447,\n\t\t\t0.254902,\n\t\t\t0.430011,\n\t\t\t0.913789,\n\t\t\t0.297079,\n\t\t\t0.380392,\n\t\t\t0.587191,\n\t\t\t0.931381,\n\t\t\t0.333353,\n\t\t\t0.505882,\n\t\t\t0.727937,\n\t\t\t0.93591,\n\t\t\t0.353742,\n\t\t\t0.631373,\n\t\t\t0.826403,\n\t\t\t0.921081,\n\t\t\t0.365066,\n\t\t\t0.756863,\n\t\t\t0.893201,\n\t\t\t0.846317,\n\t\t\t0.372662,\n\t\t\t0.882353,\n\t\t\t0.965347,\n\t\t\t0.73884,\n\t\t\t0.378506,\n\t\t\t1,\n\t\t\t0.983235,\n\t\t\t0.597451,\n\t\t\t0.366856\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"nic_CubicYF\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.5151,\n\t\t\t0.0482,\n\t\t\t0.6697,\n\t\t\t-0.87451,\n\t\t\t0.520711,\n\t\t\t0.168955,\n\t\t\t0.800574,\n\t\t\t-0.74902,\n\t\t\t0.493694,\n\t\t\t0.278596,\n\t\t\t0.911824,\n\t\t\t-0.623529,\n\t\t\t0.440026,\n\t\t\t0.369475,\n\t\t\t0.984978,\n\t\t\t-0.498039,\n\t\t\t0.398932,\n\t\t\t0.457593,\n\t\t\t0.987053,\n\t\t\t-0.372549,\n\t\t\t0.350651,\n\t\t\t0.540644,\n\t\t\t0.929608,\n\t\t\t-0.247059,\n\t\t\t0.298827,\n\t\t\t0.615625,\n\t\t\t0.857729,\n\t\t\t-0.121569,\n\t\t\t0.239928,\n\t\t\t0.685061,\n\t\t\t0.769531,\n\t\t\t0.00392157,\n\t\t\t0.228832,\n\t\t\t0.739349,\n\t\t\t0.673287,\n\t\t\t0.129412,\n\t\t\t0.263297,\n\t\t\t0.78608,\n\t\t\t0.569988,\n\t\t\t0.254902,\n\t\t\t0.298107,\n\t\t\t0.828337,\n\t\t\t0.460214,\n\t\t\t0.380392,\n\t\t\t0.33092,\n\t\t\t0.864071,\n\t\t\t0.352674,\n\t\t\t0.505882,\n\t\t\t0.38306,\n\t\t\t0.898169,\n\t\t\t0.287309,\n\t\t\t0.631373,\n\t\t\t0.49023,\n\t\t\t0.917481,\n\t\t\t0.307961,\n\t\t\t0.756863,\n\t\t\t0.62372,\n\t\t\t0.926026,\n\t\t\t0.332309,\n\t\t\t0.882353,\n\t\t\t0.717458,\n\t\t\t0.92527,\n\t\t\t0.342476,\n\t\t\t1,\n\t\t\t0.8,\n\t\t\t0.9255,\n\t\t\t0.3529\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"gist_earth\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.239216,\n\t\t\t0.027451,\n\t\t\t0.415686,\n\t\t\t-0.74902,\n\t\t\t0.0901961,\n\t\t\t0.254902,\n\t\t\t0.556863,\n\t\t\t-0.623529,\n\t\t\t0.0941176,\n\t\t\t0.352941,\n\t\t\t0.54902,\n\t\t\t-0.498039,\n\t\t\t0.105882,\n\t\t\t0.435294,\n\t\t\t0.533333,\n\t\t\t-0.372549,\n\t\t\t0.12549,\n\t\t\t0.52549,\n\t\t\t0.501961,\n\t\t\t-0.247059,\n\t\t\t0.156863,\n\t\t\t0.596078,\n\t\t\t0.443137,\n\t\t\t-0.121569,\n\t\t\t0.196078,\n\t\t\t0.65098,\n\t\t\t0.380392,\n\t\t\t0.00392157,\n\t\t\t0.282353,\n\t\t\t0.717647,\n\t\t\t0.301961,\n\t\t\t0.129412,\n\t\t\t0.466667,\n\t\t\t0.772549,\n\t\t\t0.27451,\n\t\t\t0.254902,\n\t\t\t0.678431,\n\t\t\t0.784314,\n\t\t\t0.309804,\n\t\t\t0.380392,\n\t\t\t0.901961,\n\t\t\t0.756863,\n\t\t\t0.376471,\n\t\t\t0.505882,\n\t\t\t0.992157,\n\t\t\t0.705882,\n\t\t\t0.521569,\n\t\t\t0.631373,\n\t\t\t1,\n\t\t\t0.721569,\n\t\t\t0.701961,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.784314,\n\t\t\t0.784314,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.866667,\n\t\t\t0.866667,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"2hot\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.0416667,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.873016,\n\t\t\t0.208333,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.746032,\n\t\t\t0.375,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.619048,\n\t\t\t0.541667,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.492063,\n\t\t\t0.708333,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.365079,\n\t\t\t0.854137,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.238095,\n\t\t\t0.937488,\n\t\t\t0.039062,\n\t\t\t0,\n\t\t\t-0.111111,\n\t\t\t1,\n\t\t\t0.208333,\n\t\t\t0,\n\t\t\t0.015873,\n\t\t\t1,\n\t\t\t0.375,\n\t\t\t0,\n\t\t\t0.142857,\n\t\t\t1,\n\t\t\t0.541667,\n\t\t\t0,\n\t\t\t0.269841,\n\t\t\t1,\n\t\t\t0.708333,\n\t\t\t0,\n\t\t\t0.396825,\n\t\t\t1,\n\t\t\t0.858805,\n\t\t\t0.03125,\n\t\t\t0.52381,\n\t\t\t1,\n\t\t\t0.947392,\n\t\t\t0.15625,\n\t\t\t0.650794,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.3125,\n\t\t\t0.777778,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.5625,\n\t\t\t0.904762,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8125,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_red2yellow_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t7.54296e-7,\n\t\t\t0,\n\t\t\t0.0000109827,\n\t\t\t-0.87451,\n\t\t\t0.18285,\n\t\t\t0.0264094,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.3066,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0.422841,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0.522945,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0.605721,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0.672502,\n\t\t\t0.14168,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.728167,\n\t\t\t0.244025,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.781215,\n\t\t\t0.333454,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.825,\n\t\t\t0.423586,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.855893,\n\t\t\t0.516793,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t0.880491,\n\t\t\t0.608846,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t0.910305,\n\t\t\t0.695505,\n\t\t\t0,\n\t\t\t0.631373,\n\t\t\t0.94109,\n\t\t\t0.779067,\n\t\t\t0.223528,\n\t\t\t0.756863,\n\t\t\t0.967873,\n\t\t\t0.858572,\n\t\t\t0.473521,\n\t\t\t0.882353,\n\t\t\t0.986815,\n\t\t\t0.933211,\n\t\t\t0.751583,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999997\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_marine2gold_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t1.11641e-7,\n\t\t\t0,\n\t\t\t0.00000162551,\n\t\t\t-0.87451,\n\t\t\t0.0413146,\n\t\t\t0.0619808,\n\t\t\t0.209857,\n\t\t\t-0.74902,\n\t\t\t0.0185557,\n\t\t\t0.101341,\n\t\t\t0.350684,\n\t\t\t-0.623529,\n\t\t\t0.00486405,\n\t\t\t0.149847,\n\t\t\t0.461054,\n\t\t\t-0.498039,\n\t\t\t0.0836345,\n\t\t\t0.210845,\n\t\t\t0.517906,\n\t\t\t-0.372549,\n\t\t\t0.173222,\n\t\t\t0.276134,\n\t\t\t0.541793,\n\t\t\t-0.247059,\n\t\t\t0.259857,\n\t\t\t0.343877,\n\t\t\t0.535869,\n\t\t\t-0.121569,\n\t\t\t0.362299,\n\t\t\t0.408124,\n\t\t\t0.504293,\n\t\t\t0.00392157,\n\t\t\t0.468266,\n\t\t\t0.468276,\n\t\t\t0.468257,\n\t\t\t0.129412,\n\t\t\t0.582781,\n\t\t\t0.527545,\n\t\t\t0.374914,\n\t\t\t0.254902,\n\t\t\t0.691591,\n\t\t\t0.585251,\n\t\t\t0.274266,\n\t\t\t0.380392,\n\t\t\t0.784454,\n\t\t\t0.645091,\n\t\t\t0.247332,\n\t\t\t0.505882,\n\t\t\t0.862299,\n\t\t\t0.710383,\n\t\t\t0.27518,\n\t\t\t0.631373,\n\t\t\t0.920863,\n\t\t\t0.782923,\n\t\t\t0.351563,\n\t\t\t0.756863,\n\t\t\t0.955792,\n\t\t\t0.859699,\n\t\t\t0.533541,\n\t\t\t0.882353,\n\t\t\t0.976162,\n\t\t\t0.93433,\n\t\t\t0.780671,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999983\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue2gold_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.0742735,\n\t\t\t0.0440331,\n\t\t\t0.230013,\n\t\t\t-0.74902,\n\t\t\t0.125276,\n\t\t\t0.0258685,\n\t\t\t0.415826,\n\t\t\t-0.623529,\n\t\t\t0.143879,\n\t\t\t0.0163031,\n\t\t\t0.591346,\n\t\t\t-0.498039,\n\t\t\t0.212261,\n\t\t\t0.0627855,\n\t\t\t0.705239,\n\t\t\t-0.372549,\n\t\t\t0.306048,\n\t\t\t0.141178,\n\t\t\t0.763636,\n\t\t\t-0.247059,\n\t\t\t0.391537,\n\t\t\t0.232286,\n\t\t\t0.773263,\n\t\t\t-0.121569,\n\t\t\t0.461734,\n\t\t\t0.336633,\n\t\t\t0.708321,\n\t\t\t0.00392157,\n\t\t\t0.54209,\n\t\t\t0.427581,\n\t\t\t0.590007,\n\t\t\t0.129412,\n\t\t\t0.61704,\n\t\t\t0.508623,\n\t\t\t0.460978,\n\t\t\t0.254902,\n\t\t\t0.702703,\n\t\t\t0.579586,\n\t\t\t0.309117,\n\t\t\t0.380392,\n\t\t\t0.790336,\n\t\t\t0.644811,\n\t\t\t0.170397,\n\t\t\t0.505882,\n\t\t\t0.870173,\n\t\t\t0.710733,\n\t\t\t0.117134,\n\t\t\t0.631373,\n\t\t\t0.93656,\n\t\t\t0.781991,\n\t\t\t0.157144,\n\t\t\t0.756863,\n\t\t\t0.965672,\n\t\t\t0.862068,\n\t\t\t0.409836,\n\t\t\t0.882353,\n\t\t\t0.985751,\n\t\t\t0.936296,\n\t\t\t0.714162,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999999\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_sapphire2gold_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.107704,\n\t\t\t0.107708,\n\t\t\t0.107694,\n\t\t\t-0.87451,\n\t\t\t0.1851,\n\t\t\t0.112354,\n\t\t\t0.308554,\n\t\t\t-0.74902,\n\t\t\t0.236782,\n\t\t\t0.114233,\n\t\t\t0.48788,\n\t\t\t-0.623529,\n\t\t\t0.28296,\n\t\t\t0.126187,\n\t\t\t0.639464,\n\t\t\t-0.498039,\n\t\t\t0.344787,\n\t\t\t0.171643,\n\t\t\t0.739713,\n\t\t\t-0.372549,\n\t\t\t0.413325,\n\t\t\t0.242371,\n\t\t\t0.76913,\n\t\t\t-0.247059,\n\t\t\t0.481863,\n\t\t\t0.3131,\n\t\t\t0.719841,\n\t\t\t-0.121569,\n\t\t\t0.550402,\n\t\t\t0.383829,\n\t\t\t0.612222,\n\t\t\t0.00392157,\n\t\t\t0.61894,\n\t\t\t0.454558,\n\t\t\t0.51126,\n\t\t\t0.129412,\n\t\t\t0.687478,\n\t\t\t0.525287,\n\t\t\t0.39993,\n\t\t\t0.254902,\n\t\t\t0.756017,\n\t\t\t0.596016,\n\t\t\t0.289923,\n\t\t\t0.380392,\n\t\t\t0.824555,\n\t\t\t0.666745,\n\t\t\t0.255498,\n\t\t\t0.505882,\n\t\t\t0.892979,\n\t\t\t0.736822,\n\t\t\t0.27696,\n\t\t\t0.631373,\n\t\t\t0.938851,\n\t\t\t0.804966,\n\t\t\t0.351734,\n\t\t\t0.756863,\n\t\t\t0.966491,\n\t\t\t0.874853,\n\t\t\t0.53572,\n\t\t\t0.882353,\n\t\t\t0.982105,\n\t\t\t0.94153,\n\t\t\t0.782579,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999986\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_red2purple_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.167793,\n\t\t\t0.0166271,\n\t\t\t0.0431278,\n\t\t\t-0.74902,\n\t\t\t0.262608,\n\t\t\t0.0107595,\n\t\t\t0.0791181,\n\t\t\t-0.623529,\n\t\t\t0.351902,\n\t\t\t0.0101858,\n\t\t\t0.100926,\n\t\t\t-0.498039,\n\t\t\t0.441257,\n\t\t\t0.0160835,\n\t\t\t0.131919,\n\t\t\t-0.372549,\n\t\t\t0.5221,\n\t\t\t0.0555972,\n\t\t\t0.195625,\n\t\t\t-0.247059,\n\t\t\t0.593852,\n\t\t\t0.104294,\n\t\t\t0.310234,\n\t\t\t-0.121569,\n\t\t\t0.654628,\n\t\t\t0.158115,\n\t\t\t0.448486,\n\t\t\t0.00392157,\n\t\t\t0.707443,\n\t\t\t0.220914,\n\t\t\t0.570253,\n\t\t\t0.129412,\n\t\t\t0.749504,\n\t\t\t0.293268,\n\t\t\t0.67897,\n\t\t\t0.254902,\n\t\t\t0.781587,\n\t\t\t0.370517,\n\t\t\t0.779269,\n\t\t\t0.380392,\n\t\t\t0.809951,\n\t\t\t0.451099,\n\t\t\t0.855831,\n\t\t\t0.505882,\n\t\t\t0.84424,\n\t\t\t0.531462,\n\t\t\t0.900451,\n\t\t\t0.631373,\n\t\t\t0.865174,\n\t\t\t0.620901,\n\t\t\t0.91606,\n\t\t\t0.756863,\n\t\t\t0.875041,\n\t\t\t0.714054,\n\t\t\t0.910284,\n\t\t\t0.882353,\n\t\t\t0.880764,\n\t\t\t0.80554,\n\t\t\t0.896276,\n\t\t\t1,\n\t\t\t0.887572,\n\t\t\t0.887591,\n\t\t\t0.887556\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_purple2pink_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.117562,\n\t\t\t0.0291202,\n\t\t\t0.175876,\n\t\t\t-0.74902,\n\t\t\t0.178368,\n\t\t\t0.0458476,\n\t\t\t0.285454,\n\t\t\t-0.623529,\n\t\t\t0.237731,\n\t\t\t0.0680173,\n\t\t\t0.387717,\n\t\t\t-0.498039,\n\t\t\t0.300877,\n\t\t\t0.0956291,\n\t\t\t0.484802,\n\t\t\t-0.372549,\n\t\t\t0.370929,\n\t\t\t0.136858,\n\t\t\t0.554985,\n\t\t\t-0.247059,\n\t\t\t0.449033,\n\t\t\t0.189273,\n\t\t\t0.58863,\n\t\t\t-0.121569,\n\t\t\t0.529971,\n\t\t\t0.245796,\n\t\t\t0.598587,\n\t\t\t0.00392157,\n\t\t\t0.609914,\n\t\t\t0.300643,\n\t\t\t0.610244,\n\t\t\t0.129412,\n\t\t\t0.697079,\n\t\t\t0.351286,\n\t\t\t0.616371,\n\t\t\t0.254902,\n\t\t\t0.785858,\n\t\t\t0.401991,\n\t\t\t0.617376,\n\t\t\t0.380392,\n\t\t\t0.862517,\n\t\t\t0.45745,\n\t\t\t0.64463,\n\t\t\t0.505882,\n\t\t\t0.91359,\n\t\t\t0.525462,\n\t\t\t0.705336,\n\t\t\t0.631373,\n\t\t\t0.932583,\n\t\t\t0.61064,\n\t\t\t0.767412,\n\t\t\t0.756863,\n\t\t\t0.922478,\n\t\t\t0.706966,\n\t\t\t0.817522,\n\t\t\t0.882353,\n\t\t\t0.901302,\n\t\t\t0.803071,\n\t\t\t0.856311,\n\t\t\t1,\n\t\t\t0.887571,\n\t\t\t0.887591,\n\t\t\t0.887549\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_pbj_lin\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.091821,\n\t\t\t0.0611476,\n\t\t\t0.10617,\n\t\t\t-0.74902,\n\t\t\t0.160311,\n\t\t\t0.0900022,\n\t\t\t0.192713,\n\t\t\t-0.623529,\n\t\t\t0.22484,\n\t\t\t0.12126,\n\t\t\t0.272128,\n\t\t\t-0.498039,\n\t\t\t0.291263,\n\t\t\t0.157469,\n\t\t\t0.340828,\n\t\t\t-0.372549,\n\t\t\t0.360015,\n\t\t\t0.200388,\n\t\t\t0.388903,\n\t\t\t-0.247059,\n\t\t\t0.437497,\n\t\t\t0.250058,\n\t\t\t0.387201,\n\t\t\t-0.121569,\n\t\t\t0.512636,\n\t\t\t0.304969,\n\t\t\t0.355955,\n\t\t\t0.00392157,\n\t\t\t0.582603,\n\t\t\t0.360874,\n\t\t\t0.33488,\n\t\t\t0.129412,\n\t\t\t0.655126,\n\t\t\t0.416374,\n\t\t\t0.306351,\n\t\t\t0.254902,\n\t\t\t0.725889,\n\t\t\t0.473329,\n\t\t\t0.279051,\n\t\t\t0.380392,\n\t\t\t0.778125,\n\t\t\t0.537928,\n\t\t\t0.302697,\n\t\t\t0.505882,\n\t\t\t0.815894,\n\t\t\t0.606931,\n\t\t\t0.382431,\n\t\t\t0.631373,\n\t\t\t0.839159,\n\t\t\t0.679308,\n\t\t\t0.497608,\n\t\t\t0.756863,\n\t\t\t0.854748,\n\t\t\t0.751666,\n\t\t\t0.631792,\n\t\t\t0.882353,\n\t\t\t0.869483,\n\t\t\t0.822508,\n\t\t\t0.768592,\n\t\t\t1,\n\t\t\t0.887572,\n\t\t\t0.887589,\n\t\t\t0.887565\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue2green_muted\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.107704,\n\t\t\t0.107708,\n\t\t\t0.107695,\n\t\t\t-0.87451,\n\t\t\t0.141522,\n\t\t\t0.13066,\n\t\t\t0.270741,\n\t\t\t-0.74902,\n\t\t\t0.180123,\n\t\t\t0.146119,\n\t\t\t0.42308,\n\t\t\t-0.623529,\n\t\t\t0.210161,\n\t\t\t0.169674,\n\t\t\t0.551795,\n\t\t\t-0.498039,\n\t\t\t0.239701,\n\t\t\t0.212939,\n\t\t\t0.634969,\n\t\t\t-0.372549,\n\t\t\t0.253916,\n\t\t\t0.282947,\n\t\t\t0.653641,\n\t\t\t-0.247059,\n\t\t\t0.242791,\n\t\t\t0.366933,\n\t\t\t0.608521,\n\t\t\t-0.121569,\n\t\t\t0.226302,\n\t\t\t0.446776,\n\t\t\t0.52693,\n\t\t\t0.00392157,\n\t\t\t0.236237,\n\t\t\t0.514689,\n\t\t\t0.458798,\n\t\t\t0.129412,\n\t\t\t0.274641,\n\t\t\t0.577589,\n\t\t\t0.376069,\n\t\t\t0.254902,\n\t\t\t0.349625,\n\t\t\t0.633993,\n\t\t\t0.288131,\n\t\t\t0.380392,\n\t\t\t0.4437,\n\t\t\t0.683677,\n\t\t\t0.260497,\n\t\t\t0.505882,\n\t\t\t0.536247,\n\t\t\t0.731214,\n\t\t\t0.285424,\n\t\t\t0.631373,\n\t\t\t0.628472,\n\t\t\t0.777128,\n\t\t\t0.349151,\n\t\t\t0.756863,\n\t\t\t0.718259,\n\t\t\t0.819287,\n\t\t\t0.496825,\n\t\t\t0.882353,\n\t\t\t0.804768,\n\t\t\t0.856164,\n\t\t\t0.703299,\n\t\t\t1,\n\t\t\t0.887571,\n\t\t\t0.887591,\n\t\t\t0.887548\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue2green_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t3.63578e-7,\n\t\t\t0,\n\t\t\t0.00000529374,\n\t\t\t-0.87451,\n\t\t\t0.0539915,\n\t\t\t0.0577948,\n\t\t\t0.212806,\n\t\t\t-0.74902,\n\t\t\t0.0620393,\n\t\t\t0.0758942,\n\t\t\t0.388959,\n\t\t\t-0.623529,\n\t\t\t0.0697499,\n\t\t\t0.102032,\n\t\t\t0.54177,\n\t\t\t-0.498039,\n\t\t\t0.113295,\n\t\t\t0.156156,\n\t\t\t0.64334,\n\t\t\t-0.372549,\n\t\t\t0.152047,\n\t\t\t0.243196,\n\t\t\t0.670283,\n\t\t\t-0.247059,\n\t\t\t0.158096,\n\t\t\t0.344084,\n\t\t\t0.622864,\n\t\t\t-0.121569,\n\t\t\t0.151142,\n\t\t\t0.43922,\n\t\t\t0.532767,\n\t\t\t0.00392157,\n\t\t\t0.17155,\n\t\t\t0.521588,\n\t\t\t0.457719,\n\t\t\t0.129412,\n\t\t\t0.225861,\n\t\t\t0.599141,\n\t\t\t0.363997,\n\t\t\t0.254902,\n\t\t\t0.32328,\n\t\t\t0.67007,\n\t\t\t0.259083,\n\t\t\t0.380392,\n\t\t\t0.442344,\n\t\t\t0.733697,\n\t\t\t0.223754,\n\t\t\t0.505882,\n\t\t\t0.558409,\n\t\t\t0.794941,\n\t\t\t0.257411,\n\t\t\t0.631373,\n\t\t\t0.673875,\n\t\t\t0.854344,\n\t\t\t0.340822,\n\t\t\t0.756863,\n\t\t\t0.787244,\n\t\t\t0.909326,\n\t\t\t0.524717,\n\t\t\t0.882353,\n\t\t\t0.896483,\n\t\t\t0.958063,\n\t\t\t0.775914,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999982\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GREEN-WHITE_LINEAR\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0.062745,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0,\n\t\t\t0.12549,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0,\n\t\t\t0.188235,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0,\n\t\t\t0.25098,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0,\n\t\t\t0.313725,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0,\n\t\t\t0.376471,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.094118,\n\t\t\t0.439216,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.196078,\n\t\t\t0.501961,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.294118,\n\t\t\t0.564706,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.396078,\n\t\t\t0.627451,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t0.498039,\n\t\t\t0.690196,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t0.6,\n\t\t\t0.752941,\n\t\t\t0.145098,\n\t\t\t0.631373,\n\t\t\t0.701961,\n\t\t\t0.815686,\n\t\t\t0.364706,\n\t\t\t0.756863,\n\t\t\t0.8,\n\t\t\t0.878431,\n\t\t\t0.580392,\n\t\t\t0.882353,\n\t\t\t0.901961,\n\t\t\t0.941176,\n\t\t\t0.796078,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_green2yellow_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0.105542,\n\t\t\t0.0603919,\n\t\t\t-0.74902,\n\t\t\t0,\n\t\t\t0.159454,\n\t\t\t0.104148,\n\t\t\t-0.623529,\n\t\t\t0,\n\t\t\t0.219502,\n\t\t\t0.15542,\n\t\t\t-0.498039,\n\t\t\t0,\n\t\t\t0.282276,\n\t\t\t0.203811,\n\t\t\t-0.372549,\n\t\t\t0,\n\t\t\t0.346331,\n\t\t\t0.235652,\n\t\t\t-0.247059,\n\t\t\t0,\n\t\t\t0.411765,\n\t\t\t0.235428,\n\t\t\t-0.121569,\n\t\t\t0,\n\t\t\t0.477177,\n\t\t\t0.217977,\n\t\t\t0.00392157,\n\t\t\t0.0593644,\n\t\t\t0.541635,\n\t\t\t0.21361,\n\t\t\t0.129412,\n\t\t\t0.233081,\n\t\t\t0.604722,\n\t\t\t0.210591,\n\t\t\t0.254902,\n\t\t\t0.369803,\n\t\t\t0.664942,\n\t\t\t0.226536,\n\t\t\t0.380392,\n\t\t\t0.498446,\n\t\t\t0.722367,\n\t\t\t0.288237,\n\t\t\t0.505882,\n\t\t\t0.601929,\n\t\t\t0.782244,\n\t\t\t0.380815,\n\t\t\t0.631373,\n\t\t\t0.703207,\n\t\t\t0.840497,\n\t\t\t0.512134,\n\t\t\t0.756863,\n\t\t\t0.803186,\n\t\t\t0.896433,\n\t\t\t0.674462,\n\t\t\t0.882353,\n\t\t\t0.903834,\n\t\t\t0.950266,\n\t\t\t0.846715,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999981\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"blue2cyan\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0.152941,\n\t\t\t0.364706,\n\t\t\t-0.74902,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.470588,\n\t\t\t-0.623529,\n\t\t\t0,\n\t\t\t0.34902,\n\t\t\t0.572549,\n\t\t\t-0.498039,\n\t\t\t0,\n\t\t\t0.443137,\n\t\t\t0.670588,\n\t\t\t-0.372549,\n\t\t\t0,\n\t\t\t0.537255,\n\t\t\t0.772549,\n\t\t\t-0.247059,\n\t\t\t0,\n\t\t\t0.627451,\n\t\t\t0.870588,\n\t\t\t-0.121569,\n\t\t\t0,\n\t\t\t0.717647,\n\t\t\t0.964706,\n\t\t\t0.00392157,\n\t\t\t0.0784314,\n\t\t\t0.772549,\n\t\t\t1,\n\t\t\t0.129412,\n\t\t\t0.207843,\n\t\t\t0.858824,\n\t\t\t1,\n\t\t\t0.254902,\n\t\t\t0.32549,\n\t\t\t0.941176,\n\t\t\t1,\n\t\t\t0.380392,\n\t\t\t0.45098,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.505882,\n\t\t\t0.560784,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.631373,\n\t\t\t0.662745,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.756863,\n\t\t\t0.760784,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.882353,\n\t\t\t0.870588,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue2cyan_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t4.05298e-7,\n\t\t\t0,\n\t\t\t0.0000059012,\n\t\t\t-0.87451,\n\t\t\t0.0207526,\n\t\t\t0.0740933,\n\t\t\t0.18093,\n\t\t\t-0.74902,\n\t\t\t0,\n\t\t\t0.121033,\n\t\t\t0.30343,\n\t\t\t-0.623529,\n\t\t\t0,\n\t\t\t0.166892,\n\t\t\t0.416095,\n\t\t\t-0.498039,\n\t\t\t0,\n\t\t\t0.216768,\n\t\t\t0.524796,\n\t\t\t-0.372549,\n\t\t\t0.0164769,\n\t\t\t0.275471,\n\t\t\t0.608585,\n\t\t\t-0.247059,\n\t\t\t0.0544527,\n\t\t\t0.344824,\n\t\t\t0.659267,\n\t\t\t-0.121569,\n\t\t\t0.0880643,\n\t\t\t0.419118,\n\t\t\t0.688675,\n\t\t\t0.00392157,\n\t\t\t0.127938,\n\t\t\t0.492556,\n\t\t\t0.720256,\n\t\t\t0.129412,\n\t\t\t0.149476,\n\t\t\t0.566946,\n\t\t\t0.756918,\n\t\t\t0.254902,\n\t\t\t0.188961,\n\t\t\t0.641333,\n\t\t\t0.792122,\n\t\t\t0.380392,\n\t\t\t0.245482,\n\t\t\t0.715336,\n\t\t\t0.827609,\n\t\t\t0.505882,\n\t\t\t0.329216,\n\t\t\t0.786235,\n\t\t\t0.874761,\n\t\t\t0.631373,\n\t\t\t0.453558,\n\t\t\t0.852803,\n\t\t\t0.918466,\n\t\t\t0.756863,\n\t\t\t0.626281,\n\t\t\t0.910493,\n\t\t\t0.954,\n\t\t\t0.882353,\n\t\t\t0.82257,\n\t\t\t0.958709,\n\t\t\t0.980146,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999989\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.0425591,\n\t\t\t0.0763529,\n\t\t\t0.150682,\n\t\t\t-0.74902,\n\t\t\t0.0569472,\n\t\t\t0.119154,\n\t\t\t0.275403,\n\t\t\t-0.623529,\n\t\t\t0.0635978,\n\t\t\t0.164772,\n\t\t\t0.395427,\n\t\t\t-0.498039,\n\t\t\t0.0774342,\n\t\t\t0.213851,\n\t\t\t0.510014,\n\t\t\t-0.372549,\n\t\t\t0.106815,\n\t\t\t0.267034,\n\t\t\t0.615102,\n\t\t\t-0.247059,\n\t\t\t0.122093,\n\t\t\t0.324649,\n\t\t\t0.720068,\n\t\t\t-0.121569,\n\t\t\t0.160851,\n\t\t\t0.387068,\n\t\t\t0.806956,\n\t\t\t0.00392157,\n\t\t\t0.213754,\n\t\t\t0.453516,\n\t\t\t0.878012,\n\t\t\t0.129412,\n\t\t\t0.26722,\n\t\t\t0.524656,\n\t\t\t0.932436,\n\t\t\t0.254902,\n\t\t\t0.326844,\n\t\t\t0.599279,\n\t\t\t0.968038,\n\t\t\t0.380392,\n\t\t\t0.403403,\n\t\t\t0.674712,\n\t\t\t0.984784,\n\t\t\t0.505882,\n\t\t\t0.499703,\n\t\t\t0.745519,\n\t\t\t1,\n\t\t\t0.631373,\n\t\t\t0.615055,\n\t\t\t0.813983,\n\t\t\t1,\n\t\t\t0.756863,\n\t\t\t0.74405,\n\t\t\t0.879228,\n\t\t\t1,\n\t\t\t0.882353,\n\t\t\t0.877909,\n\t\t\t0.941913,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999996\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BLUE-WHITE\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.082353,\n\t\t\t-0.74902,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.168627,\n\t\t\t-0.623529,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t-0.498039,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.337255,\n\t\t\t-0.372549,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.423529,\n\t\t\t-0.247059,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.509804,\n\t\t\t-0.121569,\n\t\t\t0,\n\t\t\t0.101961,\n\t\t\t0.592157,\n\t\t\t0.00392157,\n\t\t\t0,\n\t\t\t0.203922,\n\t\t\t0.678431,\n\t\t\t0.129412,\n\t\t\t0,\n\t\t\t0.301961,\n\t\t\t0.764706,\n\t\t\t0.254902,\n\t\t\t0,\n\t\t\t0.403922,\n\t\t\t0.85098,\n\t\t\t0.380392,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t0.933333,\n\t\t\t0.505882,\n\t\t\t0,\n\t\t\t0.603922,\n\t\t\t1,\n\t\t\t0.631373,\n\t\t\t0.254902,\n\t\t\t0.705882,\n\t\t\t1,\n\t\t\t0.756863,\n\t\t\t0.509804,\n\t\t\t0.807843,\n\t\t\t1,\n\t\t\t0.882353,\n\t\t\t0.764706,\n\t\t\t0.905882,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_purple_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t4.264e-8,\n\t\t\t0,\n\t\t\t6.20844e-7,\n\t\t\t-0.87451,\n\t\t\t0.100579,\n\t\t\t0.0593111,\n\t\t\t0.145666,\n\t\t\t-0.74902,\n\t\t\t0.167794,\n\t\t\t0.0889224,\n\t\t\t0.254953,\n\t\t\t-0.623529,\n\t\t\t0.231446,\n\t\t\t0.123339,\n\t\t\t0.360511,\n\t\t\t-0.498039,\n\t\t\t0.296699,\n\t\t\t0.163027,\n\t\t\t0.461278,\n\t\t\t-0.372549,\n\t\t\t0.363211,\n\t\t\t0.209286,\n\t\t\t0.55306,\n\t\t\t-0.247059,\n\t\t\t0.431136,\n\t\t\t0.260776,\n\t\t\t0.637195,\n\t\t\t-0.121569,\n\t\t\t0.498202,\n\t\t\t0.320012,\n\t\t\t0.705799,\n\t\t\t0.00392157,\n\t\t\t0.567456,\n\t\t\t0.380459,\n\t\t\t0.778091,\n\t\t\t0.129412,\n\t\t\t0.629381,\n\t\t\t0.445284,\n\t\t\t0.8448,\n\t\t\t0.254902,\n\t\t\t0.688373,\n\t\t\t0.517374,\n\t\t\t0.895694,\n\t\t\t0.380392,\n\t\t\t0.74891,\n\t\t\t0.590906,\n\t\t\t0.93976,\n\t\t\t0.505882,\n\t\t\t0.805017,\n\t\t\t0.667956,\n\t\t\t0.977626,\n\t\t\t0.631373,\n\t\t\t0.850914,\n\t\t\t0.752618,\n\t\t\t0.992396,\n\t\t\t0.756863,\n\t\t\t0.89724,\n\t\t\t0.838454,\n\t\t\t0.994093,\n\t\t\t0.882353,\n\t\t\t0.948461,\n\t\t\t0.922603,\n\t\t\t0.994449,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999967\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_magenta_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.0000254023,\n\t\t\t-0.87451,\n\t\t\t0.128696,\n\t\t\t0.0456782,\n\t\t\t0.11635,\n\t\t\t-0.74902,\n\t\t\t0.228133,\n\t\t\t0.0476299,\n\t\t\t0.201452,\n\t\t\t-0.623529,\n\t\t\t0.327273,\n\t\t\t0.0374065,\n\t\t\t0.282107,\n\t\t\t-0.498039,\n\t\t\t0.420953,\n\t\t\t0.0408166,\n\t\t\t0.35709,\n\t\t\t-0.372549,\n\t\t\t0.511562,\n\t\t\t0.0642203,\n\t\t\t0.430511,\n\t\t\t-0.247059,\n\t\t\t0.599552,\n\t\t\t0.102686,\n\t\t\t0.504257,\n\t\t\t-0.121569,\n\t\t\t0.684646,\n\t\t\t0.150536,\n\t\t\t0.579429,\n\t\t\t0.00392157,\n\t\t\t0.765817,\n\t\t\t0.205978,\n\t\t\t0.656062,\n\t\t\t0.129412,\n\t\t\t0.839176,\n\t\t\t0.27229,\n\t\t\t0.731807,\n\t\t\t0.254902,\n\t\t\t0.89536,\n\t\t\t0.357594,\n\t\t\t0.797309,\n\t\t\t0.380392,\n\t\t\t0.930238,\n\t\t\t0.457825,\n\t\t\t0.846984,\n\t\t\t0.505882,\n\t\t\t0.945921,\n\t\t\t0.564536,\n\t\t\t0.880571,\n\t\t\t0.631373,\n\t\t\t0.948995,\n\t\t\t0.670753,\n\t\t\t0.902279,\n\t\t\t0.756863,\n\t\t\t0.947124,\n\t\t\t0.772819,\n\t\t\t0.918171,\n\t\t\t0.882353,\n\t\t\t0.947265,\n\t\t\t0.869424,\n\t\t\t0.934352,\n\t\t\t1,\n\t\t\t0.954719,\n\t\t\t0.95475,\n\t\t\t0.954726\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"magenta\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.364706,\n\t\t\t0,\n\t\t\t0.152941,\n\t\t\t-0.74902,\n\t\t\t0.470588,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t-0.623529,\n\t\t\t0.572549,\n\t\t\t0,\n\t\t\t0.34902,\n\t\t\t-0.498039,\n\t\t\t0.670588,\n\t\t\t0,\n\t\t\t0.443137,\n\t\t\t-0.372549,\n\t\t\t0.772549,\n\t\t\t0,\n\t\t\t0.537255,\n\t\t\t-0.247059,\n\t\t\t0.870588,\n\t\t\t0,\n\t\t\t0.627451,\n\t\t\t-0.121569,\n\t\t\t0.964706,\n\t\t\t0,\n\t\t\t0.717647,\n\t\t\t0.00392157,\n\t\t\t1,\n\t\t\t0.0784314,\n\t\t\t0.772549,\n\t\t\t0.129412,\n\t\t\t1,\n\t\t\t0.207843,\n\t\t\t0.858824,\n\t\t\t0.254902,\n\t\t\t1,\n\t\t\t0.32549,\n\t\t\t0.941176,\n\t\t\t0.380392,\n\t\t\t1,\n\t\t\t0.45098,\n\t\t\t1,\n\t\t\t0.505882,\n\t\t\t1,\n\t\t\t0.560784,\n\t\t\t1,\n\t\t\t0.631373,\n\t\t\t1,\n\t\t\t0.662745,\n\t\t\t1,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.760784,\n\t\t\t1,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.870588,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"RED-PURPLE\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.188235,\n\t\t\t0,\n\t\t\t0.007843,\n\t\t\t-0.74902,\n\t\t\t0.345098,\n\t\t\t0,\n\t\t\t0.035294,\n\t\t\t-0.623529,\n\t\t\t0.439216,\n\t\t\t0,\n\t\t\t0.098039,\n\t\t\t-0.498039,\n\t\t\t0.533333,\n\t\t\t0,\n\t\t\t0.152941,\n\t\t\t-0.372549,\n\t\t\t0.627451,\n\t\t\t0.015686,\n\t\t\t0.211765,\n\t\t\t-0.247059,\n\t\t\t0.721569,\n\t\t\t0.031373,\n\t\t\t0.266667,\n\t\t\t-0.121569,\n\t\t\t0.8,\n\t\t\t0.047059,\n\t\t\t0.329412,\n\t\t\t0.00392157,\n\t\t\t0.862745,\n\t\t\t0.047059,\n\t\t\t0.403922,\n\t\t\t0.129412,\n\t\t\t0.941176,\n\t\t\t0.062745,\n\t\t\t0.466667,\n\t\t\t0.254902,\n\t\t\t0.988235,\n\t\t\t0.078431,\n\t\t\t0.54902,\n\t\t\t0.380392,\n\t\t\t0.988235,\n\t\t\t0.141176,\n\t\t\t0.643137,\n\t\t\t0.505882,\n\t\t\t0.988235,\n\t\t\t0.25098,\n\t\t\t0.729412,\n\t\t\t0.631373,\n\t\t\t0.988235,\n\t\t\t0.376471,\n\t\t\t0.811765,\n\t\t\t0.756863,\n\t\t\t0.988235,\n\t\t\t0.54902,\n\t\t\t0.886275,\n\t\t\t0.882353,\n\t\t\t0.988235,\n\t\t\t0.752941,\n\t\t\t0.952941,\n\t\t\t1,\n\t\t\t0.996078,\n\t\t\t0.996078,\n\t\t\t0.996078\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_red_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.147204,\n\t\t\t0.0480135,\n\t\t\t0.0401815,\n\t\t\t-0.74902,\n\t\t\t0.253411,\n\t\t\t0.0617478,\n\t\t\t0.0301333,\n\t\t\t-0.623529,\n\t\t\t0.356059,\n\t\t\t0.0746331,\n\t\t\t0.0446897,\n\t\t\t-0.498039,\n\t\t\t0.457731,\n\t\t\t0.0934935,\n\t\t\t0.0636931,\n\t\t\t-0.372549,\n\t\t\t0.557199,\n\t\t\t0.122714,\n\t\t\t0.0860013,\n\t\t\t-0.247059,\n\t\t\t0.665179,\n\t\t\t0.144238,\n\t\t\t0.105585,\n\t\t\t-0.121569,\n\t\t\t0.763833,\n\t\t\t0.187056,\n\t\t\t0.138326,\n\t\t\t0.00392157,\n\t\t\t0.847035,\n\t\t\t0.254558,\n\t\t\t0.189407,\n\t\t\t0.129412,\n\t\t\t0.905663,\n\t\t\t0.345937,\n\t\t\t0.258215,\n\t\t\t0.254902,\n\t\t\t0.941431,\n\t\t\t0.447111,\n\t\t\t0.346277,\n\t\t\t0.380392,\n\t\t\t0.962608,\n\t\t\t0.546927,\n\t\t\t0.457571,\n\t\t\t0.505882,\n\t\t\t0.987833,\n\t\t\t0.637276,\n\t\t\t0.569944,\n\t\t\t0.631373,\n\t\t\t0.994202,\n\t\t\t0.732176,\n\t\t\t0.687958,\n\t\t\t0.756863,\n\t\t\t0.993304,\n\t\t\t0.826268,\n\t\t\t0.800567,\n\t\t\t0.882353,\n\t\t\t0.994413,\n\t\t\t0.917205,\n\t\t\t0.906393,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.999979\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"RED_TEMPERATURE\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.090196,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.180392,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0.270588,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0.360784,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0.45098,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0.545098,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.635294,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.72549,\n\t\t\t0.058824,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.815686,\n\t\t\t0.176471,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.905882,\n\t\t\t0.294118,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t1,\n\t\t\t0.411765,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t1,\n\t\t\t0.533333,\n\t\t\t0.027451,\n\t\t\t0.631373,\n\t\t\t1,\n\t\t\t0.65098,\n\t\t\t0.27451,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.768627,\n\t\t\t0.521569,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.886275,\n\t\t\t0.768627,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_orange_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.0000253806,\n\t\t\t-0.87451,\n\t\t\t0.135871,\n\t\t\t0.0593824,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.224328,\n\t\t\t0.0907216,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0.318083,\n\t\t\t0.119647,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0.414443,\n\t\t\t0.150246,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0.511077,\n\t\t\t0.184884,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0.605501,\n\t\t\t0.226033,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.695274,\n\t\t\t0.275491,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.777826,\n\t\t\t0.334445,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.851498,\n\t\t\t0.402441,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.915899,\n\t\t\t0.47759,\n\t\t\t0.000602975,\n\t\t\t0.380392,\n\t\t\t0.971984,\n\t\t\t0.557882,\n\t\t\t0.0361443,\n\t\t\t0.505882,\n\t\t\t1,\n\t\t\t0.641287,\n\t\t\t0.135967,\n\t\t\t0.631373,\n\t\t\t1,\n\t\t\t0.725198,\n\t\t\t0.27997,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.808205,\n\t\t\t0.438135,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.89306,\n\t\t\t0.587036,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.977928,\n\t\t\t0.721599\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"heated_object\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.34902,\n\t\t\t0.0862745,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.45098,\n\t\t\t0.172549,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0.52549,\n\t\t\t0.231373,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0.580392,\n\t\t\t0.278431,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0.623529,\n\t\t\t0.313725,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0.670588,\n\t\t\t0.352941,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.717647,\n\t\t\t0.392157,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.772549,\n\t\t\t0.439216,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.839216,\n\t\t\t0.494118,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.901961,\n\t\t\t0.541176,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t0.968627,\n\t\t\t0.6,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t1,\n\t\t\t0.658824,\n\t\t\t0,\n\t\t\t0.631373,\n\t\t\t1,\n\t\t\t0.721569,\n\t\t\t0,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.827451,\n\t\t\t0.298039,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.976471,\n\t\t\t0.72549,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_gold_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.0000190933,\n\t\t\t-0.87451,\n\t\t\t0.128363,\n\t\t\t0.0636265,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.193795,\n\t\t\t0.111057,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0.25976,\n\t\t\t0.15987,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0.328546,\n\t\t\t0.210589,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0.399726,\n\t\t\t0.26332,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0.472969,\n\t\t\t0.318261,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.546245,\n\t\t\t0.375827,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.61745,\n\t\t\t0.436719,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.685545,\n\t\t\t0.501113,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.749578,\n\t\t\t0.568799,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t0.80962,\n\t\t\t0.6394,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t0.865572,\n\t\t\t0.712699,\n\t\t\t0.10257,\n\t\t\t0.631373,\n\t\t\t0.917709,\n\t\t\t0.787569,\n\t\t\t0.233665,\n\t\t\t0.756863,\n\t\t\t0.966914,\n\t\t\t0.863138,\n\t\t\t0.369608,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.939405,\n\t\t\t0.496104,\n\t\t\t1,\n\t\t\t0.999225,\n\t\t\t1,\n\t\t\t0.612275\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_brown_BW\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t3.3216e-7,\n\t\t\t0,\n\t\t\t0.00000483629,\n\t\t\t-0.87451,\n\t\t\t0.14693,\n\t\t\t0.0518172,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.225806,\n\t\t\t0.0814996,\n\t\t\t0,\n\t\t\t-0.623529,\n\t\t\t0.301681,\n\t\t\t0.111452,\n\t\t\t0,\n\t\t\t-0.498039,\n\t\t\t0.370487,\n\t\t\t0.150664,\n\t\t\t0,\n\t\t\t-0.372549,\n\t\t\t0.43108,\n\t\t\t0.199477,\n\t\t\t0,\n\t\t\t-0.247059,\n\t\t\t0.4849,\n\t\t\t0.255107,\n\t\t\t0,\n\t\t\t-0.121569,\n\t\t\t0.536798,\n\t\t\t0.313486,\n\t\t\t0,\n\t\t\t0.00392157,\n\t\t\t0.59286,\n\t\t\t0.371167,\n\t\t\t0,\n\t\t\t0.129412,\n\t\t\t0.653119,\n\t\t\t0.428135,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.714589,\n\t\t\t0.485917,\n\t\t\t0.0379541,\n\t\t\t0.380392,\n\t\t\t0.774667,\n\t\t\t0.54565,\n\t\t\t0.116634,\n\t\t\t0.505882,\n\t\t\t0.831222,\n\t\t\t0.608047,\n\t\t\t0.183895,\n\t\t\t0.631373,\n\t\t\t0.880305,\n\t\t\t0.674199,\n\t\t\t0.260298,\n\t\t\t0.756863,\n\t\t\t0.922314,\n\t\t\t0.742472,\n\t\t\t0.367086,\n\t\t\t0.882353,\n\t\t\t0.959408,\n\t\t\t0.811222,\n\t\t\t0.497258,\n\t\t\t1,\n\t\t\t0.993548,\n\t\t\t0.875183,\n\t\t\t0.622093\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"copper_Matlab\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.0784314,\n\t\t\t0.0501961,\n\t\t\t0.0313725,\n\t\t\t-0.74902,\n\t\t\t0.156863,\n\t\t\t0.100392,\n\t\t\t0.0627451,\n\t\t\t-0.623529,\n\t\t\t0.235294,\n\t\t\t0.150588,\n\t\t\t0.0941176,\n\t\t\t-0.498039,\n\t\t\t0.313725,\n\t\t\t0.200784,\n\t\t\t0.12549,\n\t\t\t-0.372549,\n\t\t\t0.392157,\n\t\t\t0.25098,\n\t\t\t0.156863,\n\t\t\t-0.247059,\n\t\t\t0.470588,\n\t\t\t0.301176,\n\t\t\t0.188235,\n\t\t\t-0.121569,\n\t\t\t0.54902,\n\t\t\t0.351373,\n\t\t\t0.219608,\n\t\t\t0.00392157,\n\t\t\t0.627451,\n\t\t\t0.401569,\n\t\t\t0.25098,\n\t\t\t0.129412,\n\t\t\t0.705882,\n\t\t\t0.451765,\n\t\t\t0.282353,\n\t\t\t0.254902,\n\t\t\t0.784314,\n\t\t\t0.501961,\n\t\t\t0.313725,\n\t\t\t0.380392,\n\t\t\t0.862745,\n\t\t\t0.552157,\n\t\t\t0.345098,\n\t\t\t0.505882,\n\t\t\t0.941176,\n\t\t\t0.602353,\n\t\t\t0.376471,\n\t\t\t0.631373,\n\t\t\t1,\n\t\t\t0.652549,\n\t\t\t0.407843,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.702745,\n\t\t\t0.439216,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.752941,\n\t\t\t0.470588,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8,\n\t\t\t0.5\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"pink_Matlab\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.312416,\n\t\t\t0.204524,\n\t\t\t0.204524,\n\t\t\t-0.74902,\n\t\t\t0.441822,\n\t\t\t0.289241,\n\t\t\t0.289241,\n\t\t\t-0.623529,\n\t\t\t0.54112,\n\t\t\t0.354246,\n\t\t\t0.354246,\n\t\t\t-0.498039,\n\t\t\t0.624831,\n\t\t\t0.409048,\n\t\t\t0.409048,\n\t\t\t-0.372549,\n\t\t\t0.698582,\n\t\t\t0.45733,\n\t\t\t0.45733,\n\t\t\t-0.247059,\n\t\t\t0.764404,\n\t\t\t0.502282,\n\t\t\t0.500979,\n\t\t\t-0.121569,\n\t\t\t0.791292,\n\t\t\t0.591516,\n\t\t\t0.54112,\n\t\t\t0.00392157,\n\t\t\t0.817297,\n\t\t\t0.66895,\n\t\t\t0.578481,\n\t\t\t0.129412,\n\t\t\t0.842499,\n\t\t\t0.738308,\n\t\t\t0.613572,\n\t\t\t0.254902,\n\t\t\t0.866968,\n\t\t\t0.801687,\n\t\t\t0.646762,\n\t\t\t0.380392,\n\t\t\t0.890766,\n\t\t\t0.86041,\n\t\t\t0.678329,\n\t\t\t0.505882,\n\t\t\t0.913944,\n\t\t\t0.913944,\n\t\t\t0.711254,\n\t\t\t0.631373,\n\t\t\t0.936549,\n\t\t\t0.936549,\n\t\t\t0.79459,\n\t\t\t0.756863,\n\t\t\t0.958621,\n\t\t\t0.958621,\n\t\t\t0.869979,\n\t\t\t0.882353,\n\t\t\t0.980196,\n\t\t\t0.980196,\n\t\t\t0.939336,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"bone_Matlab\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.054902,\n\t\t\t0.054902,\n\t\t\t0.075817,\n\t\t\t-0.74902,\n\t\t\t0.109804,\n\t\t\t0.109804,\n\t\t\t0.151634,\n\t\t\t-0.623529,\n\t\t\t0.164706,\n\t\t\t0.164706,\n\t\t\t0.227451,\n\t\t\t-0.498039,\n\t\t\t0.219608,\n\t\t\t0.219608,\n\t\t\t0.303268,\n\t\t\t-0.372549,\n\t\t\t0.27451,\n\t\t\t0.27451,\n\t\t\t0.379085,\n\t\t\t-0.247059,\n\t\t\t0.329412,\n\t\t\t0.329902,\n\t\t\t0.454412,\n\t\t\t-0.121569,\n\t\t\t0.384314,\n\t\t\t0.405719,\n\t\t\t0.509314,\n\t\t\t0.00392157,\n\t\t\t0.439216,\n\t\t\t0.481536,\n\t\t\t0.564216,\n\t\t\t0.129412,\n\t\t\t0.494118,\n\t\t\t0.557353,\n\t\t\t0.619118,\n\t\t\t0.254902,\n\t\t\t0.54902,\n\t\t\t0.63317,\n\t\t\t0.67402,\n\t\t\t0.380392,\n\t\t\t0.603922,\n\t\t\t0.708987,\n\t\t\t0.728922,\n\t\t\t0.505882,\n\t\t\t0.660294,\n\t\t\t0.783824,\n\t\t\t0.783824,\n\t\t\t0.631373,\n\t\t\t0.746569,\n\t\t\t0.838725,\n\t\t\t0.838725,\n\t\t\t0.756863,\n\t\t\t0.832843,\n\t\t\t0.893627,\n\t\t\t0.893627,\n\t\t\t0.882353,\n\t\t\t0.919118,\n\t\t\t0.948529,\n\t\t\t0.948529,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"gray_Matlab\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.0627451,\n\t\t\t0.0627451,\n\t\t\t0.0627451,\n\t\t\t-0.74902,\n\t\t\t0.12549,\n\t\t\t0.12549,\n\t\t\t0.12549,\n\t\t\t-0.623529,\n\t\t\t0.188235,\n\t\t\t0.188235,\n\t\t\t0.188235,\n\t\t\t-0.498039,\n\t\t\t0.25098,\n\t\t\t0.25098,\n\t\t\t0.25098,\n\t\t\t-0.372549,\n\t\t\t0.313725,\n\t\t\t0.313725,\n\t\t\t0.313725,\n\t\t\t-0.247059,\n\t\t\t0.376471,\n\t\t\t0.376471,\n\t\t\t0.376471,\n\t\t\t-0.121569,\n\t\t\t0.439216,\n\t\t\t0.439216,\n\t\t\t0.439216,\n\t\t\t0.00392157,\n\t\t\t0.501961,\n\t\t\t0.501961,\n\t\t\t0.501961,\n\t\t\t0.129412,\n\t\t\t0.564706,\n\t\t\t0.564706,\n\t\t\t0.564706,\n\t\t\t0.254902,\n\t\t\t0.627451,\n\t\t\t0.627451,\n\t\t\t0.627451,\n\t\t\t0.380392,\n\t\t\t0.690196,\n\t\t\t0.690196,\n\t\t\t0.690196,\n\t\t\t0.505882,\n\t\t\t0.752941,\n\t\t\t0.752941,\n\t\t\t0.752941,\n\t\t\t0.631373,\n\t\t\t0.815686,\n\t\t\t0.815686,\n\t\t\t0.815686,\n\t\t\t0.756863,\n\t\t\t0.878431,\n\t\t\t0.878431,\n\t\t\t0.878431,\n\t\t\t0.882353,\n\t\t\t0.941176,\n\t\t\t0.941176,\n\t\t\t0.941176,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Purples\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.247059,\n\t\t\t0,\n\t\t\t0.490196,\n\t\t\t-0.87451,\n\t\t\t0.288397,\n\t\t\t0.07677,\n\t\t\t0.525629,\n\t\t\t-0.74902,\n\t\t\t0.32975,\n\t\t\t0.153587,\n\t\t\t0.561092,\n\t\t\t-0.623529,\n\t\t\t0.373057,\n\t\t\t0.236263,\n\t\t\t0.600461,\n\t\t\t-0.498039,\n\t\t\t0.416363,\n\t\t\t0.319,\n\t\t\t0.639923,\n\t\t\t-0.372549,\n\t\t\t0.459669,\n\t\t\t0.405613,\n\t\t\t0.685198,\n\t\t\t-0.247059,\n\t\t\t0.503345,\n\t\t\t0.491534,\n\t\t\t0.730058,\n\t\t\t-0.121569,\n\t\t\t0.562399,\n\t\t\t0.54862,\n\t\t\t0.757616,\n\t\t\t0.00392157,\n\t\t\t0.621453,\n\t\t\t0.606075,\n\t\t\t0.785544,\n\t\t\t0.129412,\n\t\t\t0.680508,\n\t\t\t0.674971,\n\t\t\t0.824914,\n\t\t\t0.254902,\n\t\t\t0.739562,\n\t\t\t0.743406,\n\t\t\t0.863899,\n\t\t\t0.380392,\n\t\t\t0.798616,\n\t\t\t0.800492,\n\t\t\t0.893426,\n\t\t\t0.505882,\n\t\t\t0.85684,\n\t\t\t0.856655,\n\t\t\t0.922491,\n\t\t\t0.631373,\n\t\t\t0.898178,\n\t\t\t0.894056,\n\t\t\t0.942176,\n\t\t\t0.756863,\n\t\t\t0.938654,\n\t\t\t0.930919,\n\t\t\t0.961646,\n\t\t\t0.882353,\n\t\t\t0.964245,\n\t\t\t0.958478,\n\t\t\t0.977393,\n\t\t\t1,\n\t\t\t0.988235,\n\t\t\t0.984314,\n\t\t\t0.992157\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Blues\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.031373,\n\t\t\t0.188235,\n\t\t\t0.419608,\n\t\t\t-0.87451,\n\t\t\t0.031373,\n\t\t\t0.253195,\n\t\t\t0.516063,\n\t\t\t-0.74902,\n\t\t\t0.031757,\n\t\t\t0.318139,\n\t\t\t0.612149,\n\t\t\t-0.623529,\n\t\t\t0.080969,\n\t\t\t0.38113,\n\t\t\t0.661361,\n\t\t\t-0.498039,\n\t\t\t0.130427,\n\t\t\t0.444152,\n\t\t\t0.710327,\n\t\t\t-0.372549,\n\t\t\t0.195386,\n\t\t\t0.509112,\n\t\t\t0.743791,\n\t\t\t-0.247059,\n\t\t\t0.260715,\n\t\t\t0.573841,\n\t\t\t0.777209,\n\t\t\t-0.121569,\n\t\t\t0.341423,\n\t\t\t0.628958,\n\t\t\t0.808704,\n\t\t\t0.00392157,\n\t\t\t0.422745,\n\t\t\t0.684075,\n\t\t\t0.839892,\n\t\t\t0.129412,\n\t\t\t0.523137,\n\t\t\t0.739193,\n\t\t\t0.861546,\n\t\t\t0.254902,\n\t\t\t0.622684,\n\t\t\t0.793464,\n\t\t\t0.883429,\n\t\t\t0.380392,\n\t\t\t0.701423,\n\t\t\t0.826928,\n\t\t\t0.910988,\n\t\t\t0.505882,\n\t\t\t0.778685,\n\t\t\t0.8603,\n\t\t\t0.937993,\n\t\t\t0.631373,\n\t\t\t0.825928,\n\t\t\t0.891795,\n\t\t\t0.953741,\n\t\t\t0.756863,\n\t\t\t0.87328,\n\t\t\t0.923291,\n\t\t\t0.969489,\n\t\t\t0.882353,\n\t\t\t0.922491,\n\t\t\t0.954787,\n\t\t\t0.985236,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.984314,\n\t\t\t1\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Greens\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0.266667,\n\t\t\t0.105882,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0.347374,\n\t\t\t0.139346,\n\t\t\t-0.74902,\n\t\t\t0.000538,\n\t\t\t0.427912,\n\t\t\t0.172933,\n\t\t\t-0.623529,\n\t\t\t0.069435,\n\t\t\t0.486967,\n\t\t\t0.222145,\n\t\t\t-0.498039,\n\t\t\t0.138178,\n\t\t\t0.546082,\n\t\t\t0.271326,\n\t\t\t-0.372549,\n\t\t\t0.197232,\n\t\t\t0.609073,\n\t\t\t0.31857,\n\t\t\t-0.247059,\n\t\t\t0.257255,\n\t\t\t0.671742,\n\t\t\t0.365859,\n\t\t\t-0.121569,\n\t\t\t0.357647,\n\t\t\t0.720953,\n\t\t\t0.415071,\n\t\t\t0.00392157,\n\t\t\t0.45767,\n\t\t\t0.769919,\n\t\t\t0.465021,\n\t\t\t0.129412,\n\t\t\t0.546251,\n\t\t\t0.811257,\n\t\t\t0.537855,\n\t\t\t0.254902,\n\t\t\t0.634295,\n\t\t\t0.852211,\n\t\t\t0.610688,\n\t\t\t0.380392,\n\t\t\t0.709097,\n\t\t\t0.883706,\n\t\t\t0.683522,\n\t\t\t0.505882,\n\t\t\t0.78316,\n\t\t\t0.914833,\n\t\t\t0.755894,\n\t\t\t0.631373,\n\t\t\t0.842215,\n\t\t\t0.938454,\n\t\t\t0.818885,\n\t\t\t0.756863,\n\t\t\t0.899977,\n\t\t\t0.961538,\n\t\t\t0.880692,\n\t\t\t0.882353,\n\t\t\t0.935409,\n\t\t\t0.975317,\n\t\t\t0.92203,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.988235,\n\t\t\t0.960784\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"PuBu\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.301961,\n\t\t\t0,\n\t\t\t0.294118,\n\t\t\t-0.87451,\n\t\t\t0.404321,\n\t\t\t0.029527,\n\t\t\t0.390573,\n\t\t\t-0.74902,\n\t\t\t0.50599,\n\t\t\t0.059592,\n\t\t\t0.486782,\n\t\t\t-0.623529,\n\t\t\t0.519769,\n\t\t\t0.158016,\n\t\t\t0.551742,\n\t\t\t-0.498039,\n\t\t\t0.533456,\n\t\t\t0.256194,\n\t\t\t0.616301,\n\t\t\t-0.372549,\n\t\t\t0.54133,\n\t\t\t0.33887,\n\t\t\t0.655671,\n\t\t\t-0.247059,\n\t\t\t0.54902,\n\t\t\t0.421592,\n\t\t\t0.695087,\n\t\t\t-0.121569,\n\t\t\t0.54902,\n\t\t\t0.506236,\n\t\t\t0.736424,\n\t\t\t0.00392157,\n\t\t\t0.550127,\n\t\t\t0.590573,\n\t\t\t0.777701,\n\t\t\t0.129412,\n\t\t\t0.585559,\n\t\t\t0.665375,\n\t\t\t0.81707,\n\t\t\t0.254902,\n\t\t\t0.622145,\n\t\t\t0.739023,\n\t\t\t0.855825,\n\t\t\t0.380392,\n\t\t\t0.687105,\n\t\t\t0.784298,\n\t\t\t0.879446,\n\t\t\t0.505882,\n\t\t\t0.752065,\n\t\t\t0.829758,\n\t\t\t0.903253,\n\t\t\t0.631373,\n\t\t\t0.817024,\n\t\t\t0.87897,\n\t\t\t0.930811,\n\t\t\t0.756863,\n\t\t\t0.880907,\n\t\t\t0.927213,\n\t\t\t0.957832,\n\t\t\t0.882353,\n\t\t\t0.926182,\n\t\t\t0.958708,\n\t\t\t0.975548,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.988235,\n\t\t\t0.992157\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BuPu\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.007843,\n\t\t\t0.219608,\n\t\t\t0.345098,\n\t\t\t-0.87451,\n\t\t\t0.01178,\n\t\t\t0.286536,\n\t\t\t0.449427,\n\t\t\t-0.74902,\n\t\t\t0.015702,\n\t\t\t0.35328,\n\t\t\t0.553479,\n\t\t\t-0.623529,\n\t\t\t0.01767,\n\t\t\t0.396586,\n\t\t\t0.622376,\n\t\t\t-0.498039,\n\t\t\t0.021115,\n\t\t\t0.4402,\n\t\t\t0.690688,\n\t\t\t-0.372549,\n\t\t\t0.11757,\n\t\t\t0.503191,\n\t\t\t0.722184,\n\t\t\t-0.247059,\n\t\t\t0.214625,\n\t\t\t0.565859,\n\t\t\t0.753633,\n\t\t\t-0.121569,\n\t\t\t0.336671,\n\t\t\t0.615071,\n\t\t\t0.78316,\n\t\t\t0.00392157,\n\t\t\t0.457978,\n\t\t\t0.663975,\n\t\t\t0.812503,\n\t\t\t0.129412,\n\t\t\t0.556401,\n\t\t\t0.703345,\n\t\t\t0.836125,\n\t\t\t0.254902,\n\t\t\t0.65421,\n\t\t\t0.742714,\n\t\t\t0.859669,\n\t\t\t0.380392,\n\t\t\t0.736886,\n\t\t\t0.782084,\n\t\t\t0.881323,\n\t\t\t0.505882,\n\t\t\t0.81827,\n\t\t\t0.821638,\n\t\t\t0.903068,\n\t\t\t0.631373,\n\t\t\t0.873387,\n\t\t\t0.864944,\n\t\t\t0.92669,\n\t\t\t0.756863,\n\t\t\t0.927536,\n\t\t\t0.907605,\n\t\t\t0.949988,\n\t\t\t0.882353,\n\t\t\t0.964937,\n\t\t\t0.9391,\n\t\t\t0.967705,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.984314\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BuGn\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.031373,\n\t\t\t0.25098,\n\t\t\t0.505882,\n\t\t\t-0.87451,\n\t\t\t0.031373,\n\t\t\t0.329719,\n\t\t\t0.590527,\n\t\t\t-0.74902,\n\t\t\t0.031911,\n\t\t\t0.408397,\n\t\t\t0.674787,\n\t\t\t-0.623529,\n\t\t\t0.100807,\n\t\t\t0.479262,\n\t\t\t0.710219,\n\t\t\t-0.498039,\n\t\t\t0.169704,\n\t\t\t0.550219,\n\t\t\t0.745744,\n\t\t\t-0.372549,\n\t\t\t0.238601,\n\t\t\t0.62699,\n\t\t\t0.787082,\n\t\t\t-0.247059,\n\t\t\t0.307958,\n\t\t\t0.703114,\n\t\t\t0.826759,\n\t\t\t-0.121569,\n\t\t\t0.39654,\n\t\t\t0.752326,\n\t\t\t0.797232,\n\t\t\t0.00392157,\n\t\t\t0.485121,\n\t\t\t0.801046,\n\t\t\t0.767705,\n\t\t\t0.129412,\n\t\t\t0.573702,\n\t\t\t0.83451,\n\t\t\t0.738178,\n\t\t\t0.254902,\n\t\t\t0.661592,\n\t\t\t0.867743,\n\t\t\t0.711034,\n\t\t\t0.380392,\n\t\t\t0.732457,\n\t\t\t0.895302,\n\t\t\t0.74253,\n\t\t\t0.505882,\n\t\t\t0.801845,\n\t\t\t0.922307,\n\t\t\t0.774579,\n\t\t\t0.631373,\n\t\t\t0.841215,\n\t\t\t0.938055,\n\t\t\t0.817885,\n\t\t\t0.756863,\n\t\t\t0.880907,\n\t\t\t0.95391,\n\t\t\t0.861084,\n\t\t\t0.882353,\n\t\t\t0.926182,\n\t\t\t0.971626,\n\t\t\t0.902422,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.988235,\n\t\t\t0.941176\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GnBu\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0.266667,\n\t\t\t0.105882,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0.347374,\n\t\t\t0.139346,\n\t\t\t-0.74902,\n\t\t\t0.000538,\n\t\t\t0.427912,\n\t\t\t0.172933,\n\t\t\t-0.623529,\n\t\t\t0.069435,\n\t\t\t0.486967,\n\t\t\t0.222145,\n\t\t\t-0.498039,\n\t\t\t0.138178,\n\t\t\t0.546175,\n\t\t\t0.272095,\n\t\t\t-0.372549,\n\t\t\t0.197232,\n\t\t\t0.615071,\n\t\t\t0.368551,\n\t\t\t-0.247059,\n\t\t\t0.256609,\n\t\t\t0.683276,\n\t\t\t0.464867,\n\t\t\t-0.121569,\n\t\t\t0.329443,\n\t\t\t0.722645,\n\t\t\t0.555417,\n\t\t\t0.00392157,\n\t\t\t0.403137,\n\t\t\t0.762138,\n\t\t\t0.645413,\n\t\t\t0.129412,\n\t\t\t0.503529,\n\t\t\t0.805444,\n\t\t\t0.718247,\n\t\t\t0.254902,\n\t\t\t0.603922,\n\t\t\t0.848597,\n\t\t\t0.790465,\n\t\t\t0.380392,\n\t\t\t0.704314,\n\t\t\t0.887966,\n\t\t\t0.847551,\n\t\t\t0.505882,\n\t\t\t0.802307,\n\t\t\t0.926321,\n\t\t\t0.903714,\n\t\t\t0.631373,\n\t\t\t0.851519,\n\t\t\t0.944037,\n\t\t\t0.941115,\n\t\t\t0.756863,\n\t\t\t0.899977,\n\t\t\t0.961538,\n\t\t\t0.976901,\n\t\t\t0.882353,\n\t\t\t0.935409,\n\t\t\t0.975317,\n\t\t\t0.984775,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.988235,\n\t\t\t0.992157\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GnBuPu\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.003922,\n\t\t\t0.27451,\n\t\t\t0.211765,\n\t\t\t-0.87451,\n\t\t\t0.003922,\n\t\t\t0.349312,\n\t\t\t0.280661,\n\t\t\t-0.74902,\n\t\t\t0.003937,\n\t\t\t0.423852,\n\t\t\t0.349773,\n\t\t\t-0.623529,\n\t\t\t0.005905,\n\t\t\t0.46519,\n\t\t\t0.446228,\n\t\t\t-0.498039,\n\t\t\t0.009443,\n\t\t\t0.506344,\n\t\t\t0.542837,\n\t\t\t-0.372549,\n\t\t\t0.111803,\n\t\t\t0.535871,\n\t\t\t0.649135,\n\t\t\t-0.247059,\n\t\t\t0.214025,\n\t\t\t0.565859,\n\t\t\t0.753633,\n\t\t\t-0.121569,\n\t\t\t0.310481,\n\t\t\t0.615071,\n\t\t\t0.78316,\n\t\t\t0.00392157,\n\t\t\t0.407797,\n\t\t\t0.663975,\n\t\t\t0.812503,\n\t\t\t0.129412,\n\t\t\t0.531811,\n\t\t\t0.703345,\n\t\t\t0.836125,\n\t\t\t0.254902,\n\t\t\t0.65421,\n\t\t\t0.742714,\n\t\t\t0.859669,\n\t\t\t0.380392,\n\t\t\t0.736886,\n\t\t\t0.782084,\n\t\t\t0.881323,\n\t\t\t0.505882,\n\t\t\t0.81827,\n\t\t\t0.821176,\n\t\t\t0.902884,\n\t\t\t0.631373,\n\t\t\t0.873387,\n\t\t\t0.854641,\n\t\t\t0.922568,\n\t\t\t0.756863,\n\t\t\t0.927536,\n\t\t\t0.888535,\n\t\t\t0.942361,\n\t\t\t0.882353,\n\t\t\t0.964937,\n\t\t\t0.929873,\n\t\t\t0.964014,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.984314\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BuGnYl\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.031373,\n\t\t\t0.113725,\n\t\t\t0.345098,\n\t\t\t-0.87451,\n\t\t\t0.088458,\n\t\t\t0.159,\n\t\t\t0.463206,\n\t\t\t-0.74902,\n\t\t\t0.145052,\n\t\t\t0.204567,\n\t\t\t0.5807,\n\t\t\t-0.623529,\n\t\t\t0.139146,\n\t\t\t0.287243,\n\t\t\t0.620069,\n\t\t\t-0.498039,\n\t\t\t0.13318,\n\t\t\t0.370196,\n\t\t\t0.659562,\n\t\t\t-0.372549,\n\t\t\t0.123337,\n\t\t\t0.470588,\n\t\t\t0.706805,\n\t\t\t-0.247059,\n\t\t\t0.115386,\n\t\t\t0.570335,\n\t\t\t0.753126,\n\t\t\t-0.121569,\n\t\t\t0.186251,\n\t\t\t0.643168,\n\t\t\t0.761,\n\t\t\t0.00392157,\n\t\t\t0.258716,\n\t\t\t0.71514,\n\t\t\t0.768074,\n\t\t\t0.129412,\n\t\t\t0.380761,\n\t\t\t0.760415,\n\t\t\t0.750358,\n\t\t\t0.254902,\n\t\t\t0.503576,\n\t\t\t0.806075,\n\t\t\t0.732795,\n\t\t\t0.380392,\n\t\t\t0.645306,\n\t\t\t0.861192,\n\t\t\t0.719016,\n\t\t\t0.505882,\n\t\t\t0.783899,\n\t\t\t0.91511,\n\t\t\t0.705606,\n\t\t\t0.631373,\n\t\t\t0.858701,\n\t\t\t0.944637,\n\t\t\t0.6997,\n\t\t\t0.756863,\n\t\t\t0.931349,\n\t\t\t0.973303,\n\t\t\t0.698424,\n\t\t\t0.882353,\n\t\t\t0.966782,\n\t\t\t0.987082,\n\t\t\t0.777163,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.85098\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"PuRd\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.286275,\n\t\t\t0,\n\t\t\t0.415686,\n\t\t\t-0.87451,\n\t\t\t0.38273,\n\t\t\t0.001968,\n\t\t\t0.441276,\n\t\t\t-0.74902,\n\t\t\t0.479231,\n\t\t\t0.003922,\n\t\t\t0.466774,\n\t\t\t-0.623529,\n\t\t\t0.581592,\n\t\t\t0.003922,\n\t\t\t0.480554,\n\t\t\t-0.498039,\n\t\t\t0.683799,\n\t\t\t0.00549,\n\t\t\t0.494887,\n\t\t\t-0.372549,\n\t\t\t0.776317,\n\t\t\t0.105882,\n\t\t\t0.544098,\n\t\t\t-0.247059,\n\t\t\t0.867866,\n\t\t\t0.206321,\n\t\t\t0.592618,\n\t\t\t-0.121569,\n\t\t\t0.919047,\n\t\t\t0.308681,\n\t\t\t0.612303,\n\t\t\t0.00392157,\n\t\t\t0.968812,\n\t\t\t0.411226,\n\t\t\t0.632603,\n\t\t\t0.129412,\n\t\t\t0.974717,\n\t\t\t0.519493,\n\t\t\t0.671972,\n\t\t\t0.254902,\n\t\t\t0.980546,\n\t\t\t0.626451,\n\t\t\t0.71065,\n\t\t\t0.380392,\n\t\t\t0.984483,\n\t\t\t0.701253,\n\t\t\t0.732303,\n\t\t\t0.505882,\n\t\t\t0.988328,\n\t\t\t0.77504,\n\t\t\t0.755617,\n\t\t\t0.631373,\n\t\t\t0.990296,\n\t\t\t0.828189,\n\t\t\t0.812703,\n\t\t\t0.756863,\n\t\t\t0.992372,\n\t\t\t0.880907,\n\t\t\t0.869035,\n\t\t\t0.882353,\n\t\t\t0.996309,\n\t\t\t0.926182,\n\t\t\t0.912341,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.952941\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"RdPu\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.403922,\n\t\t\t0,\n\t\t\t0.121569,\n\t\t\t-0.87451,\n\t\t\t0.500377,\n\t\t\t0,\n\t\t\t0.192434,\n\t\t\t-0.74902,\n\t\t\t0.596909,\n\t\t\t0.000277,\n\t\t\t0.263037,\n\t\t\t-0.623529,\n\t\t\t0.703206,\n\t\t\t0.035709,\n\t\t\t0.300438,\n\t\t\t-0.498039,\n\t\t\t0.808612,\n\t\t\t0.071296,\n\t\t\t0.338854,\n\t\t\t-0.372549,\n\t\t\t0.857824,\n\t\t\t0.116571,\n\t\t\t0.441215,\n\t\t\t-0.247059,\n\t\t\t0.905513,\n\t\t\t0.163552,\n\t\t\t0.54293,\n\t\t\t-0.121569,\n\t\t\t0.889765,\n\t\t\t0.281661,\n\t\t\t0.617732,\n\t\t\t0.00392157,\n\t\t\t0.873156,\n\t\t\t0.39897,\n\t\t\t0.691611,\n\t\t\t0.129412,\n\t\t\t0.82985,\n\t\t\t0.491488,\n\t\t\t0.736886,\n\t\t\t0.254902,\n\t\t\t0.789081,\n\t\t\t0.583237,\n\t\t\t0.781853,\n\t\t\t0.380392,\n\t\t\t0.810734,\n\t\t\t0.656071,\n\t\t\t0.819254,\n\t\t\t0.505882,\n\t\t\t0.833126,\n\t\t\t0.729181,\n\t\t\t0.85684,\n\t\t\t0.631373,\n\t\t\t0.870527,\n\t\t\t0.80792,\n\t\t\t0.898178,\n\t\t\t0.756863,\n\t\t\t0.907605,\n\t\t\t0.884398,\n\t\t\t0.938331,\n\t\t\t0.882353,\n\t\t\t0.9391,\n\t\t\t0.921799,\n\t\t\t0.958016,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.956863,\n\t\t\t0.976471\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Oranges\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.498039,\n\t\t\t0.152941,\n\t\t\t0.015686,\n\t\t\t-0.87451,\n\t\t\t0.57481,\n\t\t\t0.182468,\n\t\t\t0.013718,\n\t\t\t-0.74902,\n\t\t\t0.651765,\n\t\t\t0.212042,\n\t\t\t0.011734,\n\t\t\t-0.623529,\n\t\t\t0.752157,\n\t\t\t0.247474,\n\t\t\t0.007797,\n\t\t\t-0.498039,\n\t\t\t0.851719,\n\t\t\t0.283368,\n\t\t\t0.004475,\n\t\t\t-0.372549,\n\t\t\t0.898962,\n\t\t\t0.348328,\n\t\t\t0.039908,\n\t\t\t-0.247059,\n\t\t\t0.945652,\n\t\t\t0.413426,\n\t\t\t0.076401,\n\t\t\t-0.121569,\n\t\t\t0.969273,\n\t\t\t0.484291,\n\t\t\t0.157109,\n\t\t\t0.00392157,\n\t\t\t0.992157,\n\t\t\t0.554971,\n\t\t\t0.238185,\n\t\t\t0.129412,\n\t\t\t0.992157,\n\t\t\t0.619931,\n\t\t\t0.330704,\n\t\t\t0.254902,\n\t\t\t0.992157,\n\t\t\t0.684967,\n\t\t\t0.423837,\n\t\t\t0.380392,\n\t\t\t0.992157,\n\t\t\t0.751895,\n\t\t\t0.532103,\n\t\t\t0.505882,\n\t\t\t0.992249,\n\t\t\t0.817716,\n\t\t\t0.639354,\n\t\t\t0.631373,\n\t\t\t0.994218,\n\t\t\t0.861023,\n\t\t\t0.725967,\n\t\t\t0.756863,\n\t\t\t0.996186,\n\t\t\t0.903576,\n\t\t\t0.810965,\n\t\t\t0.882353,\n\t\t\t0.998155,\n\t\t\t0.933103,\n\t\t\t0.868051,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.960784,\n\t\t\t0.921569\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Reds\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.403922,\n\t\t\t0,\n\t\t\t0.05098,\n\t\t\t-0.87451,\n\t\t\t0.525967,\n\t\t\t0.029527,\n\t\t\t0.066728,\n\t\t\t-0.74902,\n\t\t\t0.647643,\n\t\t\t0.058962,\n\t\t\t0.082476,\n\t\t\t-0.623529,\n\t\t\t0.722445,\n\t\t\t0.076678,\n\t\t\t0.098224,\n\t\t\t-0.498039,\n\t\t\t0.797186,\n\t\t\t0.095194,\n\t\t\t0.114187,\n\t\t\t-0.372549,\n\t\t\t0.868051,\n\t\t\t0.164091,\n\t\t\t0.143714,\n\t\t\t-0.247059,\n\t\t\t0.937809,\n\t\t\t0.233541,\n\t\t\t0.173933,\n\t\t\t-0.121569,\n\t\t\t0.96143,\n\t\t\t0.326059,\n\t\t\t0.232987,\n\t\t\t0.00392157,\n\t\t\t0.984375,\n\t\t\t0.418147,\n\t\t\t0.292657,\n\t\t\t0.129412,\n\t\t\t0.986344,\n\t\t\t0.496886,\n\t\t\t0.371396,\n\t\t\t0.254902,\n\t\t\t0.988235,\n\t\t\t0.575702,\n\t\t\t0.450673,\n\t\t\t0.380392,\n\t\t\t0.988235,\n\t\t\t0.656409,\n\t\t\t0.543191,\n\t\t\t0.505882,\n\t\t\t0.98842,\n\t\t\t0.736747,\n\t\t\t0.635894,\n\t\t\t0.631373,\n\t\t\t0.992357,\n\t\t\t0.809581,\n\t\t\t0.732349,\n\t\t\t0.756863,\n\t\t\t0.996186,\n\t\t\t0.880692,\n\t\t\t0.826759,\n\t\t\t0.882353,\n\t\t\t0.998155,\n\t\t\t0.92203,\n\t\t\t0.885813,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.960784,\n\t\t\t0.941176\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"RdOr\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.498039,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.87451,\n\t\t\t0.6004,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.74902,\n\t\t\t0.702514,\n\t\t\t0.000738,\n\t\t\t0.000477,\n\t\t\t-0.623529,\n\t\t\t0.773379,\n\t\t\t0.095225,\n\t\t\t0.061499,\n\t\t\t-0.498039,\n\t\t\t0.843875,\n\t\t\t0.189865,\n\t\t\t0.12283,\n\t\t\t-0.372549,\n\t\t\t0.891119,\n\t\t\t0.294195,\n\t\t\t0.203537,\n\t\t\t-0.247059,\n\t\t\t0.937855,\n\t\t\t0.397924,\n\t\t\t0.283137,\n\t\t\t-0.121569,\n\t\t\t0.963445,\n\t\t\t0.476663,\n\t\t\t0.316601,\n\t\t\t0.00392157,\n\t\t\t0.988297,\n\t\t\t0.555771,\n\t\t\t0.351665,\n\t\t\t0.129412,\n\t\t\t0.990265,\n\t\t\t0.646321,\n\t\t\t0.436309,\n\t\t\t0.254902,\n\t\t\t0.992157,\n\t\t\t0.735256,\n\t\t\t0.519646,\n\t\t\t0.380392,\n\t\t\t0.992157,\n\t\t\t0.784468,\n\t\t\t0.570827,\n\t\t\t0.505882,\n\t\t\t0.992249,\n\t\t\t0.833218,\n\t\t\t0.623483,\n\t\t\t0.631373,\n\t\t\t0.994218,\n\t\t\t0.872587,\n\t\t\t0.706159,\n\t\t\t0.756863,\n\t\t\t0.996186,\n\t\t\t0.911419,\n\t\t\t0.788189,\n\t\t\t0.882353,\n\t\t\t0.998155,\n\t\t\t0.940946,\n\t\t\t0.859054,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.968627,\n\t\t\t0.92549\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BrOrYl\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.4,\n\t\t\t0.145098,\n\t\t\t0.023529,\n\t\t\t-0.87451,\n\t\t\t0.500392,\n\t\t\t0.174625,\n\t\t\t0.019592,\n\t\t\t-0.74902,\n\t\t\t0.600784,\n\t\t\t0.204291,\n\t\t\t0.015656,\n\t\t\t-0.623529,\n\t\t\t0.701176,\n\t\t\t0.251534,\n\t\t\t0.011719,\n\t\t\t-0.498039,\n\t\t\t0.800984,\n\t\t\t0.299146,\n\t\t\t0.008397,\n\t\t\t-0.372549,\n\t\t\t0.863975,\n\t\t\t0.370012,\n\t\t\t0.043829,\n\t\t\t-0.247059,\n\t\t\t0.926321,\n\t\t\t0.441107,\n\t\t\t0.0794,\n\t\t\t-0.121569,\n\t\t\t0.961753,\n\t\t\t0.521815,\n\t\t\t0.120738,\n\t\t\t0.00392157,\n\t\t\t0.996078,\n\t\t\t0.602645,\n\t\t\t0.163122,\n\t\t\t0.129412,\n\t\t\t0.996078,\n\t\t\t0.68729,\n\t\t\t0.237924,\n\t\t\t0.254902,\n\t\t\t0.996078,\n\t\t\t0.771011,\n\t\t\t0.314879,\n\t\t\t0.380392,\n\t\t\t0.996078,\n\t\t\t0.832034,\n\t\t\t0.444798,\n\t\t\t0.505882,\n\t\t\t0.996171,\n\t\t\t0.892042,\n\t\t\t0.572595,\n\t\t\t0.631373,\n\t\t\t0.998139,\n\t\t\t0.931411,\n\t\t\t0.65724,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.969489,\n\t\t\t0.741669,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.985236,\n\t\t\t0.822376,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.898039\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"RdOrYl\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.501961,\n\t\t\t0,\n\t\t\t0.14902,\n\t\t\t-0.87451,\n\t\t\t0.622038,\n\t\t\t0,\n\t\t\t0.14902,\n\t\t\t-0.74902,\n\t\t\t0.741761,\n\t\t\t0.0004,\n\t\t\t0.148866,\n\t\t\t-0.623529,\n\t\t\t0.816563,\n\t\t\t0.05158,\n\t\t\t0.129181,\n\t\t\t-0.498039,\n\t\t\t0.890965,\n\t\t\t0.10356,\n\t\t\t0.110235,\n\t\t\t-0.372549,\n\t\t\t0.940177,\n\t\t\t0.205921,\n\t\t\t0.137793,\n\t\t\t-0.247059,\n\t\t\t0.988281,\n\t\t\t0.308789,\n\t\t\t0.165536,\n\t\t\t-0.121569,\n\t\t\t0.99025,\n\t\t\t0.432803,\n\t\t\t0.200969,\n\t\t\t0.00392157,\n\t\t\t0.992218,\n\t\t\t0.555217,\n\t\t\t0.236278,\n\t\t\t0.129412,\n\t\t\t0.994187,\n\t\t\t0.628051,\n\t\t\t0.267774,\n\t\t\t0.254902,\n\t\t\t0.996078,\n\t\t\t0.701038,\n\t\t\t0.301269,\n\t\t\t0.380392,\n\t\t\t0.996078,\n\t\t\t0.777809,\n\t\t\t0.383945,\n\t\t\t0.505882,\n\t\t\t0.996171,\n\t\t\t0.852826,\n\t\t\t0.466621,\n\t\t\t0.631373,\n\t\t\t0.998139,\n\t\t\t0.892195,\n\t\t\t0.549296,\n\t\t\t0.756863,\n\t\t\t1,\n\t\t\t0.931349,\n\t\t\t0.632188,\n\t\t\t0.882353,\n\t\t\t1,\n\t\t\t0.966782,\n\t\t\t0.7188,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"CIELab_blue2red\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0.6,\n\t\t\t0.74902,\n\t\t\t1,\n\t\t\t0.76863,\n\t\t\t0.46667,\n\t\t\t0.34118\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"blue2yellow\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.5,\n\t\t\t0.5,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue2gold\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.175119,\n\t\t\t0.0438468,\n\t\t\t1,\n\t\t\t-0.874016,\n\t\t\t0.22383,\n\t\t\t0.159771,\n\t\t\t0.94557,\n\t\t\t-0.748031,\n\t\t\t0.27254,\n\t\t\t0.233611,\n\t\t\t0.891216,\n\t\t\t-0.622047,\n\t\t\t0.321251,\n\t\t\t0.296526,\n\t\t\t0.836857,\n\t\t\t-0.496063,\n\t\t\t0.369962,\n\t\t\t0.354296,\n\t\t\t0.782359,\n\t\t\t-0.370079,\n\t\t\t0.418672,\n\t\t\t0.409139,\n\t\t\t0.72754,\n\t\t\t-0.244094,\n\t\t\t0.467383,\n\t\t\t0.462152,\n\t\t\t0.672148,\n\t\t\t-0.11811,\n\t\t\t0.51609,\n\t\t\t0.51396,\n\t\t\t0.615825,\n\t\t\t0.00787402,\n\t\t\t0.572863,\n\t\t\t0.55452,\n\t\t\t0.559172,\n\t\t\t0.133858,\n\t\t\t0.630269,\n\t\t\t0.593822,\n\t\t\t0.517729,\n\t\t\t0.259843,\n\t\t\t0.689588,\n\t\t\t0.624668,\n\t\t\t0.47446,\n\t\t\t0.385827,\n\t\t\t0.745394,\n\t\t\t0.656113,\n\t\t\t0.428638,\n\t\t\t0.511811,\n\t\t\t0.798624,\n\t\t\t0.688104,\n\t\t\t0.379105,\n\t\t\t0.637795,\n\t\t\t0.849926,\n\t\t\t0.720593,\n\t\t\t0.323834,\n\t\t\t0.76378,\n\t\t\t0.899765,\n\t\t\t0.753543,\n\t\t\t0.258657,\n\t\t\t0.889764,\n\t\t\t0.948487,\n\t\t\t0.78692,\n\t\t\t0.171778,\n\t\t\t1,\n\t\t\t0.990413,\n\t\t\t0.816451,\n\t\t\t0.00729848\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_blue2yellow\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.0830122,\n\t\t\t0,\n\t\t\t0.495617,\n\t\t\t-0.87451,\n\t\t\t0.141973,\n\t\t\t0.0551288,\n\t\t\t0.57363,\n\t\t\t-0.74902,\n\t\t\t0.193048,\n\t\t\t0.110258,\n\t\t\t0.604561,\n\t\t\t-0.623529,\n\t\t\t0.234231,\n\t\t\t0.165386,\n\t\t\t0.57643,\n\t\t\t-0.498039,\n\t\t\t0.275413,\n\t\t\t0.220515,\n\t\t\t0.548299,\n\t\t\t-0.372549,\n\t\t\t0.316596,\n\t\t\t0.275644,\n\t\t\t0.520169,\n\t\t\t-0.247059,\n\t\t\t0.357778,\n\t\t\t0.330773,\n\t\t\t0.492038,\n\t\t\t-0.121569,\n\t\t\t0.398961,\n\t\t\t0.385901,\n\t\t\t0.463908,\n\t\t\t0.00392157,\n\t\t\t0.449929,\n\t\t\t0.438487,\n\t\t\t0.426815,\n\t\t\t0.129412,\n\t\t\t0.511572,\n\t\t\t0.488299,\n\t\t\t0.379944,\n\t\t\t0.254902,\n\t\t\t0.581222,\n\t\t\t0.53603,\n\t\t\t0.325741,\n\t\t\t0.380392,\n\t\t\t0.650871,\n\t\t\t0.583761,\n\t\t\t0.271538,\n\t\t\t0.505882,\n\t\t\t0.720521,\n\t\t\t0.631493,\n\t\t\t0.217335,\n\t\t\t0.631373,\n\t\t\t0.79017,\n\t\t\t0.679224,\n\t\t\t0.163132,\n\t\t\t0.756863,\n\t\t\t0.85982,\n\t\t\t0.726955,\n\t\t\t0.108929,\n\t\t\t0.882353,\n\t\t\t0.910254,\n\t\t\t0.774159,\n\t\t\t0.14112,\n\t\t\t1,\n\t\t\t0.927513,\n\t\t\t0.81759,\n\t\t\t0.306289\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_cyan2orange\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.0471513,\n\t\t\t0.213874,\n\t\t\t0.414329,\n\t\t\t-0.87451,\n\t\t\t0.0674702,\n\t\t\t0.256648,\n\t\t\t0.439027,\n\t\t\t-0.74902,\n\t\t\t0.0959957,\n\t\t\t0.299331,\n\t\t\t0.462089,\n\t\t\t-0.623529,\n\t\t\t0.132428,\n\t\t\t0.341872,\n\t\t\t0.483212,\n\t\t\t-0.498039,\n\t\t\t0.188743,\n\t\t\t0.38277,\n\t\t\t0.500597,\n\t\t\t-0.372549,\n\t\t\t0.268511,\n\t\t\t0.420229,\n\t\t\t0.512179,\n\t\t\t-0.247059,\n\t\t\t0.352945,\n\t\t\t0.455602,\n\t\t\t0.519101,\n\t\t\t-0.121569,\n\t\t\t0.43893,\n\t\t\t0.489368,\n\t\t\t0.521538,\n\t\t\t0.00392157,\n\t\t\t0.522445,\n\t\t\t0.522495,\n\t\t\t0.522436,\n\t\t\t0.129412,\n\t\t\t0.600089,\n\t\t\t0.555682,\n\t\t\t0.53205,\n\t\t\t0.254902,\n\t\t\t0.67988,\n\t\t\t0.587981,\n\t\t\t0.539163,\n\t\t\t0.380392,\n\t\t\t0.761011,\n\t\t\t0.619586,\n\t\t\t0.544439,\n\t\t\t0.505882,\n\t\t\t0.84278,\n\t\t\t0.650741,\n\t\t\t0.548567,\n\t\t\t0.631373,\n\t\t\t0.910713,\n\t\t\t0.687347,\n\t\t\t0.557822,\n\t\t\t0.756863,\n\t\t\t0.952232,\n\t\t\t0.734972,\n\t\t\t0.577775,\n\t\t\t0.882353,\n\t\t\t0.975642,\n\t\t\t0.789858,\n\t\t\t0.604868,\n\t\t\t1,\n\t\t\t0.990752,\n\t\t\t0.843643,\n\t\t\t0.632857\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_purple2green\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.235006,\n\t\t\t0.0483128,\n\t\t\t0.530899,\n\t\t\t-0.87451,\n\t\t\t0.302968,\n\t\t\t0.108419,\n\t\t\t0.552391,\n\t\t\t-0.74902,\n\t\t\t0.360241,\n\t\t\t0.166059,\n\t\t\t0.569502,\n\t\t\t-0.623529,\n\t\t\t0.406746,\n\t\t\t0.226782,\n\t\t\t0.579373,\n\t\t\t-0.498039,\n\t\t\t0.444073,\n\t\t\t0.28964,\n\t\t\t0.582094,\n\t\t\t-0.372549,\n\t\t\t0.473648,\n\t\t\t0.353774,\n\t\t\t0.577947,\n\t\t\t-0.247059,\n\t\t\t0.497636,\n\t\t\t0.418154,\n\t\t\t0.567911,\n\t\t\t-0.121569,\n\t\t\t0.519086,\n\t\t\t0.481741,\n\t\t\t0.553968,\n\t\t\t0.00392157,\n\t\t\t0.542884,\n\t\t\t0.542914,\n\t\t\t0.542875,\n\t\t\t0.129412,\n\t\t\t0.566303,\n\t\t\t0.603989,\n\t\t\t0.527499,\n\t\t\t0.254902,\n\t\t\t0.595218,\n\t\t\t0.662965,\n\t\t\t0.516857,\n\t\t\t0.380392,\n\t\t\t0.628641,\n\t\t\t0.720701,\n\t\t\t0.510673,\n\t\t\t0.505882,\n\t\t\t0.665373,\n\t\t\t0.777849,\n\t\t\t0.508165,\n\t\t\t0.631373,\n\t\t\t0.704182,\n\t\t\t0.834921,\n\t\t\t0.508303,\n\t\t\t0.756863,\n\t\t\t0.743846,\n\t\t\t0.892328,\n\t\t\t0.50999,\n\t\t\t0.882353,\n\t\t\t0.783158,\n\t\t\t0.950422,\n\t\t\t0.512181,\n\t\t\t1,\n\t\t\t0.818617,\n\t\t\t1,\n\t\t\t0.513888\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_purple2green_dark\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.107656,\n\t\t\t0,\n\t\t\t0.428682,\n\t\t\t-0.87451,\n\t\t\t0.1924,\n\t\t\t0,\n\t\t\t0.449799,\n\t\t\t-0.74902,\n\t\t\t0.255118,\n\t\t\t0.0648939,\n\t\t\t0.466726,\n\t\t\t-0.623529,\n\t\t\t0.304256,\n\t\t\t0.133066,\n\t\t\t0.476703,\n\t\t\t-0.498039,\n\t\t\t0.343202,\n\t\t\t0.19716,\n\t\t\t0.479793,\n\t\t\t-0.372549,\n\t\t\t0.373876,\n\t\t\t0.260353,\n\t\t\t0.476241,\n\t\t\t-0.247059,\n\t\t\t0.398497,\n\t\t\t0.322872,\n\t\t\t0.466953,\n\t\t\t-0.121569,\n\t\t\t0.420016,\n\t\t\t0.384252,\n\t\t\t0.453785,\n\t\t\t0.00392157,\n\t\t\t0.44319,\n\t\t\t0.443216,\n\t\t\t0.443186,\n\t\t\t0.129412,\n\t\t\t0.465553,\n\t\t\t0.502139,\n\t\t\t0.428233,\n\t\t\t0.254902,\n\t\t\t0.492959,\n\t\t\t0.559151,\n\t\t\t0.417591,\n\t\t\t0.380392,\n\t\t\t0.524654,\n\t\t\t0.615092,\n\t\t\t0.411016,\n\t\t\t0.505882,\n\t\t\t0.55959,\n\t\t\t0.670583,\n\t\t\t0.40779,\n\t\t\t0.631373,\n\t\t\t0.596614,\n\t\t\t0.726102,\n\t\t\t0.406948,\n\t\t\t0.756863,\n\t\t\t0.634544,\n\t\t\t0.782032,\n\t\t\t0.407439,\n\t\t\t0.882353,\n\t\t\t0.672183,\n\t\t\t0.838703,\n\t\t\t0.408237,\n\t\t\t1,\n\t\t\t0.706131,\n\t\t\t0.892759,\n\t\t\t0.408452\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"coolwarm\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.229806,\n\t\t\t0.298718,\n\t\t\t0.753683,\n\t\t\t-0.875,\n\t\t\t0.303869,\n\t\t\t0.406535,\n\t\t\t0.844959,\n\t\t\t-0.75,\n\t\t\t0.383013,\n\t\t\t0.509419,\n\t\t\t0.917388,\n\t\t\t-0.625,\n\t\t\t0.466667,\n\t\t\t0.604563,\n\t\t\t0.968155,\n\t\t\t-0.5,\n\t\t\t0.552953,\n\t\t\t0.688929,\n\t\t\t0.995376,\n\t\t\t-0.375,\n\t\t\t0.639176,\n\t\t\t0.7596,\n\t\t\t0.998151,\n\t\t\t-0.25,\n\t\t\t0.722193,\n\t\t\t0.813953,\n\t\t\t0.976575,\n\t\t\t-0.125,\n\t\t\t0.798692,\n\t\t\t0.849786,\n\t\t\t0.931689,\n\t\t\t0,\n\t\t\t0.865395,\n\t\t\t0.86541,\n\t\t\t0.865396,\n\t\t\t0.125,\n\t\t\t0.924128,\n\t\t\t0.827385,\n\t\t\t0.774508,\n\t\t\t0.25,\n\t\t\t0.958853,\n\t\t\t0.769768,\n\t\t\t0.678008,\n\t\t\t0.375,\n\t\t\t0.969954,\n\t\t\t0.694267,\n\t\t\t0.579375,\n\t\t\t0.5,\n\t\t\t0.958003,\n\t\t\t0.602842,\n\t\t\t0.481776,\n\t\t\t0.625,\n\t\t\t0.923945,\n\t\t\t0.497309,\n\t\t\t0.38797,\n\t\t\t0.75,\n\t\t\t0.869187,\n\t\t\t0.378313,\n\t\t\t0.300267,\n\t\t\t0.875,\n\t\t\t0.795632,\n\t\t\t0.241284,\n\t\t\t0.220526,\n\t\t\t1,\n\t\t\t0.705673,\n\t\t\t0.0155562,\n\t\t\t0.150233\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BuRd\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.019608,\n\t\t\t0.188235,\n\t\t\t0.380392,\n\t\t\t-0.87451,\n\t\t\t0.088504,\n\t\t\t0.321107,\n\t\t\t0.564937,\n\t\t\t-0.74902,\n\t\t\t0.163399,\n\t\t\t0.444983,\n\t\t\t0.697501,\n\t\t\t-0.623529,\n\t\t\t0.247059,\n\t\t\t0.555709,\n\t\t\t0.754095,\n\t\t\t-0.498039,\n\t\t\t0.420684,\n\t\t\t0.676432,\n\t\t\t0.818685,\n\t\t\t-0.372549,\n\t\t\t0.606459,\n\t\t\t0.789773,\n\t\t\t0.880277,\n\t\t\t-0.247059,\n\t\t\t0.761476,\n\t\t\t0.868512,\n\t\t\t0.924567,\n\t\t\t-0.121569,\n\t\t\t0.878047,\n\t\t\t0.925721,\n\t\t\t0.951942,\n\t\t\t0.00392157,\n\t\t\t0.969089,\n\t\t\t0.966474,\n\t\t\t0.964937,\n\t\t\t0.129412,\n\t\t\t0.983852,\n\t\t\t0.897578,\n\t\t\t0.846828,\n\t\t\t0.254902,\n\t\t\t0.982468,\n\t\t\t0.800692,\n\t\t\t0.706113,\n\t\t\t0.380392,\n\t\t\t0.960323,\n\t\t\t0.66782,\n\t\t\t0.536332,\n\t\t\t0.505882,\n\t\t\t0.894579,\n\t\t\t0.503806,\n\t\t\t0.399769,\n\t\t\t0.631373,\n\t\t\t0.81707,\n\t\t\t0.33218,\n\t\t\t0.281046,\n\t\t\t0.756863,\n\t\t\t0.728489,\n\t\t\t0.155017,\n\t\t\t0.197386,\n\t\t\t0.882353,\n\t\t\t0.576932,\n\t\t\t0.055363,\n\t\t\t0.14925,\n\t\t\t1,\n\t\t\t0.403922,\n\t\t\t0,\n\t\t\t0.121569\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Spectral_lowBlue\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.368627,\n\t\t\t0.309804,\n\t\t\t0.635294,\n\t\t\t-0.87451,\n\t\t\t0.260361,\n\t\t\t0.450058,\n\t\t\t0.70173,\n\t\t\t-0.74902,\n\t\t\t0.248058,\n\t\t\t0.591311,\n\t\t\t0.717186,\n\t\t\t-0.623529,\n\t\t\t0.376009,\n\t\t\t0.734025,\n\t\t\t0.658132,\n\t\t\t-0.498039,\n\t\t\t0.537947,\n\t\t\t0.814764,\n\t\t\t0.64506,\n\t\t\t-0.372549,\n\t\t\t0.702345,\n\t\t\t0.879585,\n\t\t\t0.636678,\n\t\t\t-0.247059,\n\t\t\t0.84752,\n\t\t\t0.938639,\n\t\t\t0.607151,\n\t\t\t-0.121569,\n\t\t\t0.940408,\n\t\t\t0.976163,\n\t\t\t0.656055,\n\t\t\t0.00392157,\n\t\t\t0.999923,\n\t\t\t0.997616,\n\t\t\t0.745021,\n\t\t\t0.129412,\n\t\t\t0.997463,\n\t\t\t0.921338,\n\t\t\t0.61707,\n\t\t\t0.254902,\n\t\t\t0.995002,\n\t\t\t0.824606,\n\t\t\t0.499885,\n\t\t\t0.380392,\n\t\t\t0.992541,\n\t\t\t0.701576,\n\t\t\t0.39654,\n\t\t\t0.505882,\n\t\t\t0.973472,\n\t\t\t0.547405,\n\t\t\t0.318108,\n\t\t\t0.631373,\n\t\t\t0.937793,\n\t\t\t0.398539,\n\t\t\t0.270127,\n\t\t\t0.756863,\n\t\t\t0.861515,\n\t\t\t0.282891,\n\t\t\t0.299654,\n\t\t\t0.882353,\n\t\t\t0.746482,\n\t\t\t0.144637,\n\t\t\t0.288812,\n\t\t\t1,\n\t\t\t0.619608,\n\t\t\t0.003922,\n\t\t\t0.258824\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GnRP\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0.266667,\n\t\t\t0.105882,\n\t\t\t-0.87451,\n\t\t\t0.066436,\n\t\t\t0.394617,\n\t\t\t0.174779,\n\t\t\t-0.74902,\n\t\t\t0.168858,\n\t\t\t0.524567,\n\t\t\t0.25767,\n\t\t\t-0.623529,\n\t\t\t0.323875,\n\t\t\t0.657439,\n\t\t\t0.361015,\n\t\t\t-0.498039,\n\t\t\t0.504883,\n\t\t\t0.772318,\n\t\t\t0.506344,\n\t\t\t-0.372549,\n\t\t\t0.678431,\n\t\t\t0.870127,\n\t\t\t0.654902,\n\t\t\t-0.247059,\n\t\t\t0.803922,\n\t\t\t0.921799,\n\t\t\t0.780392,\n\t\t\t-0.121569,\n\t\t\t0.897116,\n\t\t\t0.951942,\n\t\t\t0.882814,\n\t\t\t0.00392157,\n\t\t\t0.967397,\n\t\t\t0.965936,\n\t\t\t0.967474,\n\t\t\t0.129412,\n\t\t\t0.928028,\n\t\t\t0.879815,\n\t\t\t0.930565,\n\t\t\t0.254902,\n\t\t\t0.866052,\n\t\t\t0.780777,\n\t\t\t0.882891,\n\t\t\t0.380392,\n\t\t\t0.77501,\n\t\t\t0.665129,\n\t\t\t0.821376,\n\t\t\t0.505882,\n\t\t\t0.675663,\n\t\t\t0.537024,\n\t\t\t0.737024,\n\t\t\t0.631373,\n\t\t\t0.57847,\n\t\t\t0.396155,\n\t\t\t0.645982,\n\t\t\t0.756863,\n\t\t\t0.492349,\n\t\t\t0.223914,\n\t\t\t0.547559,\n\t\t\t0.882353,\n\t\t\t0.375548,\n\t\t\t0.096886,\n\t\t\t0.423299,\n\t\t\t1,\n\t\t\t0.25098,\n\t\t\t0,\n\t\t\t0.294118\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GYPi\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.152941,\n\t\t\t0.392157,\n\t\t\t0.098039,\n\t\t\t-0.87451,\n\t\t\t0.246444,\n\t\t\t0.505344,\n\t\t\t0.117724,\n\t\t\t-0.74902,\n\t\t\t0.351942,\n\t\t\t0.614533,\n\t\t\t0.161399,\n\t\t\t-0.623529,\n\t\t\t0.474971,\n\t\t\t0.717878,\n\t\t\t0.240138,\n\t\t\t-0.498039,\n\t\t\t0.611995,\n\t\t\t0.811226,\n\t\t\t0.392849,\n\t\t\t-0.372549,\n\t\t\t0.746328,\n\t\t\t0.893118,\n\t\t\t0.565321,\n\t\t\t-0.247059,\n\t\t\t0.859516,\n\t\t\t0.94233,\n\t\t\t0.747405,\n\t\t\t-0.121569,\n\t\t\t0.928105,\n\t\t\t0.96386,\n\t\t\t0.875663,\n\t\t\t0.00392157,\n\t\t\t0.969089,\n\t\t\t0.966859,\n\t\t\t0.968012,\n\t\t\t0.129412,\n\t\t\t0.983852,\n\t\t\t0.910265,\n\t\t\t0.948328,\n\t\t\t0.254902,\n\t\t\t0.979239,\n\t\t\t0.833218,\n\t\t\t0.914648,\n\t\t\t0.380392,\n\t\t\t0.949712,\n\t\t\t0.729873,\n\t\t\t0.862976,\n\t\t\t0.505882,\n\t\t\t0.905652,\n\t\t\t0.58293,\n\t\t\t0.763552,\n\t\t\t0.631373,\n\t\t\t0.85521,\n\t\t\t0.410073,\n\t\t\t0.652211,\n\t\t\t0.756863,\n\t\t\t0.793695,\n\t\t\t0.183699,\n\t\t\t0.531642,\n\t\t\t0.882353,\n\t\t\t0.683737,\n\t\t\t0.063899,\n\t\t\t0.420761,\n\t\t\t1,\n\t\t\t0.556863,\n\t\t\t0.003922,\n\t\t\t0.321569\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GnYlRd\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0.407843,\n\t\t\t0.215686,\n\t\t\t-0.87451,\n\t\t\t0.063975,\n\t\t\t0.525952,\n\t\t\t0.277201,\n\t\t\t-0.74902,\n\t\t\t0.177932,\n\t\t\t0.633064,\n\t\t\t0.332718,\n\t\t\t-0.623529,\n\t\t\t0.364937,\n\t\t\t0.724106,\n\t\t\t0.379469,\n\t\t\t-0.498039,\n\t\t\t0.527951,\n\t\t\t0.797155,\n\t\t\t0.40223,\n\t\t\t-0.372549,\n\t\t\t0.678431,\n\t\t\t0.862822,\n\t\t\t0.433449,\n\t\t\t-0.247059,\n\t\t\t0.803922,\n\t\t\t0.916955,\n\t\t\t0.514648,\n\t\t\t-0.121569,\n\t\t\t0.909419,\n\t\t\t0.961861,\n\t\t\t0.625067,\n\t\t\t0.00392157,\n\t\t\t0.999923,\n\t\t\t0.997616,\n\t\t\t0.745021,\n\t\t\t0.129412,\n\t\t\t0.997463,\n\t\t\t0.921338,\n\t\t\t0.61707,\n\t\t\t0.254902,\n\t\t\t0.995002,\n\t\t\t0.824606,\n\t\t\t0.499885,\n\t\t\t0.380392,\n\t\t\t0.992541,\n\t\t\t0.701576,\n\t\t\t0.39654,\n\t\t\t0.505882,\n\t\t\t0.973472,\n\t\t\t0.547405,\n\t\t\t0.318108,\n\t\t\t0.631373,\n\t\t\t0.939023,\n\t\t\t0.389927,\n\t\t\t0.245521,\n\t\t\t0.756863,\n\t\t\t0.867666,\n\t\t\t0.239831,\n\t\t\t0.176624,\n\t\t\t0.882353,\n\t\t\t0.762399,\n\t\t\t0.110727,\n\t\t\t0.151326,\n\t\t\t1,\n\t\t\t0.647059,\n\t\t\t0,\n\t\t\t0.14902\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GBBr\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0,\n\t\t\t0.235294,\n\t\t\t0.188235,\n\t\t\t-0.87451,\n\t\t\t0.002461,\n\t\t\t0.338639,\n\t\t\t0.301423,\n\t\t\t-0.74902,\n\t\t\t0.055902,\n\t\t\t0.448981,\n\t\t\t0.417609,\n\t\t\t-0.623529,\n\t\t\t0.183852,\n\t\t\t0.56955,\n\t\t\t0.538178,\n\t\t\t-0.498039,\n\t\t\t0.357785,\n\t\t\t0.700115,\n\t\t\t0.660746,\n\t\t\t-0.372549,\n\t\t\t0.540177,\n\t\t\t0.819531,\n\t\t\t0.77624,\n\t\t\t-0.247059,\n\t\t\t0.714879,\n\t\t\t0.890888,\n\t\t\t0.864821,\n\t\t\t-0.121569,\n\t\t\t0.851134,\n\t\t\t0.934564,\n\t\t\t0.922645,\n\t\t\t0.00392157,\n\t\t\t0.960861,\n\t\t\t0.959785,\n\t\t\t0.95694,\n\t\t\t0.129412,\n\t\t\t0.963322,\n\t\t\t0.927797,\n\t\t\t0.83391,\n\t\t\t0.254902,\n\t\t\t0.939946,\n\t\t\t0.868897,\n\t\t\t0.68935,\n\t\t\t0.380392,\n\t\t\t0.883353,\n\t\t\t0.775394,\n\t\t\t0.517109,\n\t\t\t0.505882,\n\t\t\t0.808074,\n\t\t\t0.625836,\n\t\t\t0.324106,\n\t\t\t0.631373,\n\t\t\t0.717647,\n\t\t\t0.476355,\n\t\t\t0.15494,\n\t\t\t0.756863,\n\t\t\t0.592157,\n\t\t\t0.358247,\n\t\t\t0.06882,\n\t\t\t0.882353,\n\t\t\t0.458593,\n\t\t\t0.26436,\n\t\t\t0.031142,\n\t\t\t1,\n\t\t\t0.329412,\n\t\t\t0.188235,\n\t\t\t0.019608\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"PuOr\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.498039,\n\t\t\t0.231373,\n\t\t\t0.031373,\n\t\t\t-0.87451,\n\t\t\t0.62599,\n\t\t\t0.30273,\n\t\t\t0.026451,\n\t\t\t-0.74902,\n\t\t\t0.746943,\n\t\t\t0.387082,\n\t\t\t0.037524,\n\t\t\t-0.623529,\n\t\t\t0.85767,\n\t\t\t0.490427,\n\t\t\t0.071972,\n\t\t\t-0.498039,\n\t\t\t0.936409,\n\t\t\t0.617762,\n\t\t\t0.236371,\n\t\t\t-0.372549,\n\t\t\t0.992695,\n\t\t\t0.743099,\n\t\t\t0.43291,\n\t\t\t-0.247059,\n\t\t\t0.995156,\n\t\t\t0.841523,\n\t\t\t0.63714,\n\t\t\t-0.121569,\n\t\t\t0.985313,\n\t\t\t0.913802,\n\t\t\t0.813687,\n\t\t\t0.00392157,\n\t\t\t0.966244,\n\t\t\t0.966398,\n\t\t\t0.967705,\n\t\t\t0.129412,\n\t\t\t0.889965,\n\t\t\t0.89504,\n\t\t\t0.938178,\n\t\t\t0.254902,\n\t\t\t0.806151,\n\t\t\t0.804306,\n\t\t\t0.894656,\n\t\t\t0.380392,\n\t\t\t0.712649,\n\t\t\t0.688658,\n\t\t\t0.833141,\n\t\t\t0.505882,\n\t\t\t0.594233,\n\t\t\t0.554325,\n\t\t\t0.744637,\n\t\t\t0.631373,\n\t\t\t0.474894,\n\t\t\t0.404229,\n\t\t\t0.652364,\n\t\t\t0.756863,\n\t\t\t0.366628,\n\t\t\t0.217224,\n\t\t\t0.563783,\n\t\t\t0.882353,\n\t\t\t0.266436,\n\t\t\t0.089965,\n\t\t\t0.434833,\n\t\t\t1,\n\t\t\t0.176471,\n\t\t\t0,\n\t\t\t0.294118\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"PRGn\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.25098,\n\t\t\t0,\n\t\t\t0.294118,\n\t\t\t-0.87451,\n\t\t\t0.383852,\n\t\t\t0.103345,\n\t\t\t0.431911,\n\t\t\t-0.74902,\n\t\t\t0.497732,\n\t\t\t0.234679,\n\t\t\t0.55371,\n\t\t\t-0.623529,\n\t\t\t0.583852,\n\t\t\t0.40692,\n\t\t\t0.652134,\n\t\t\t-0.498039,\n\t\t\t0.681968,\n\t\t\t0.545175,\n\t\t\t0.742561,\n\t\t\t-0.372549,\n\t\t\t0.7807,\n\t\t\t0.672357,\n\t\t\t0.825221,\n\t\t\t-0.247059,\n\t\t\t0.871742,\n\t\t\t0.788005,\n\t\t\t0.886736,\n\t\t\t-0.121569,\n\t\t\t0.930488,\n\t\t\t0.885198,\n\t\t\t0.932872,\n\t\t\t0.00392157,\n\t\t\t0.966321,\n\t\t\t0.968089,\n\t\t\t0.965859,\n\t\t\t0.129412,\n\t\t\t0.892503,\n\t\t\t0.950865,\n\t\t\t0.877278,\n\t\t\t0.254902,\n\t\t\t0.796078,\n\t\t\t0.91857,\n\t\t\t0.772549,\n\t\t\t0.380392,\n\t\t\t0.670588,\n\t\t\t0.866897,\n\t\t\t0.647059,\n\t\t\t0.505882,\n\t\t\t0.493195,\n\t\t\t0.765398,\n\t\t\t0.496655,\n\t\t\t0.631373,\n\t\t\t0.314187,\n\t\t\t0.649135,\n\t\t\t0.354556,\n\t\t\t0.756863,\n\t\t\t0.15917,\n\t\t\t0.516263,\n\t\t\t0.251211,\n\t\t\t0.882353,\n\t\t\t0.062284,\n\t\t\t0.386621,\n\t\t\t0.170473,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.266667,\n\t\t\t0.105882\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"PiYG\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.556863,\n\t\t\t0.003922,\n\t\t\t0.321569,\n\t\t\t-0.87451,\n\t\t\t0.692195,\n\t\t\t0.067897,\n\t\t\t0.427374,\n\t\t\t-0.74902,\n\t\t\t0.797539,\n\t\t\t0.197847,\n\t\t\t0.539177,\n\t\t\t-0.623529,\n\t\t\t0.859054,\n\t\t\t0.424221,\n\t\t\t0.659746,\n\t\t\t-0.498039,\n\t\t\t0.908574,\n\t\t\t0.592618,\n\t\t\t0.770319,\n\t\t\t-0.372549,\n\t\t\t0.951557,\n\t\t\t0.736332,\n\t\t\t0.866205,\n\t\t\t-0.247059,\n\t\t\t0.981084,\n\t\t\t0.839677,\n\t\t\t0.917878,\n\t\t\t-0.121569,\n\t\t\t0.98293,\n\t\t\t0.913802,\n\t\t\t0.949558,\n\t\t\t0.00392157,\n\t\t\t0.96732,\n\t\t\t0.968474,\n\t\t\t0.965629,\n\t\t\t0.129412,\n\t\t\t0.92549,\n\t\t\t0.963552,\n\t\t\t0.869666,\n\t\t\t0.254902,\n\t\t\t0.852441,\n\t\t\t0.939254,\n\t\t\t0.736025,\n\t\t\t0.380392,\n\t\t\t0.739254,\n\t\t\t0.890042,\n\t\t\t0.553941,\n\t\t\t0.505882,\n\t\t\t0.60323,\n\t\t\t0.805536,\n\t\t\t0.382238,\n\t\t\t0.631373,\n\t\t\t0.467282,\n\t\t\t0.711419,\n\t\t\t0.235217,\n\t\t\t0.756863,\n\t\t\t0.344252,\n\t\t\t0.608074,\n\t\t\t0.156478,\n\t\t\t0.882353,\n\t\t\t0.2406,\n\t\t\t0.49827,\n\t\t\t0.116494,\n\t\t\t1,\n\t\t\t0.152941,\n\t\t\t0.392157,\n\t\t\t0.098039\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"OrPu\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.176471,\n\t\t\t0,\n\t\t\t0.294118,\n\t\t\t-0.87451,\n\t\t\t0.272434,\n\t\t\t0.095963,\n\t\t\t0.444214,\n\t\t\t-0.74902,\n\t\t\t0.373395,\n\t\t\t0.228912,\n\t\t\t0.56932,\n\t\t\t-0.623529,\n\t\t\t0.481661,\n\t\t\t0.415917,\n\t\t\t0.657901,\n\t\t\t-0.498039,\n\t\t\t0.601922,\n\t\t\t0.562937,\n\t\t\t0.750481,\n\t\t\t-0.372549,\n\t\t\t0.718493,\n\t\t\t0.695886,\n\t\t\t0.836986,\n\t\t\t-0.247059,\n\t\t\t0.811995,\n\t\t\t0.811534,\n\t\t\t0.898501,\n\t\t\t-0.121569,\n\t\t\t0.894733,\n\t\t\t0.8995,\n\t\t\t0.940023,\n\t\t\t0.00392157,\n\t\t\t0.969166,\n\t\t\t0.966859,\n\t\t\t0.963629,\n\t\t\t0.129412,\n\t\t\t0.98639,\n\t\t\t0.910265,\n\t\t\t0.803691,\n\t\t\t0.254902,\n\t\t\t0.995002,\n\t\t\t0.835371,\n\t\t\t0.624375,\n\t\t\t0.380392,\n\t\t\t0.992541,\n\t\t\t0.736947,\n\t\t\t0.420146,\n\t\t\t0.505882,\n\t\t\t0.931949,\n\t\t\t0.609458,\n\t\t\t0.224221,\n\t\t\t0.631373,\n\t\t\t0.85075,\n\t\t\t0.483968,\n\t\t\t0.069819,\n\t\t\t0.756863,\n\t\t\t0.740023,\n\t\t\t0.380623,\n\t\t\t0.035371,\n\t\t\t0.882353,\n\t\t\t0.617993,\n\t\t\t0.29827,\n\t\t\t0.026759,\n\t\t\t1,\n\t\t\t0.498039,\n\t\t\t0.231373,\n\t\t\t0.031373\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"BrBG\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.329412,\n\t\t\t0.188235,\n\t\t\t0.019608,\n\t\t\t-0.87451,\n\t\t\t0.467205,\n\t\t\t0.269435,\n\t\t\t0.031911,\n\t\t\t-0.74902,\n\t\t\t0.6,\n\t\t\t0.365629,\n\t\t\t0.074202,\n\t\t\t-0.623529,\n\t\t\t0.72549,\n\t\t\t0.483737,\n\t\t\t0.160323,\n\t\t\t-0.498039,\n\t\t\t0.812995,\n\t\t\t0.635832,\n\t\t\t0.336409,\n\t\t\t-0.372549,\n\t\t\t0.88689,\n\t\t\t0.781238,\n\t\t\t0.527874,\n\t\t\t-0.247059,\n\t\t\t0.943483,\n\t\t\t0.87474,\n\t\t\t0.700115,\n\t\t\t-0.121569,\n\t\t\t0.963168,\n\t\t\t0.929796,\n\t\t\t0.841599,\n\t\t\t0.00392157,\n\t\t\t0.957247,\n\t\t\t0.959938,\n\t\t\t0.959554,\n\t\t\t0.129412,\n\t\t\t0.84406,\n\t\t\t0.932872,\n\t\t\t0.920185,\n\t\t\t0.254902,\n\t\t\t0.70396,\n\t\t\t0.886428,\n\t\t\t0.859285,\n\t\t\t0.380392,\n\t\t\t0.529258,\n\t\t\t0.815071,\n\t\t\t0.770704,\n\t\t\t0.505882,\n\t\t\t0.346251,\n\t\t\t0.691811,\n\t\t\t0.653057,\n\t\t\t0.631373,\n\t\t\t0.175855,\n\t\t\t0.562015,\n\t\t\t0.530642,\n\t\t\t0.756863,\n\t\t\t0.047905,\n\t\t\t0.441446,\n\t\t\t0.410073,\n\t\t\t0.882353,\n\t\t\t0.002307,\n\t\t\t0.33218,\n\t\t\t0.294348,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.235294,\n\t\t\t0.188235\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"GyRd\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.101961,\n\t\t\t0.101961,\n\t\t\t0.101961,\n\t\t\t-0.87451,\n\t\t\t0.227451,\n\t\t\t0.227451,\n\t\t\t0.227451,\n\t\t\t-0.74902,\n\t\t\t0.359939,\n\t\t\t0.359939,\n\t\t\t0.359939,\n\t\t\t-0.623529,\n\t\t\t0.502653,\n\t\t\t0.502653,\n\t\t\t0.502653,\n\t\t\t-0.498039,\n\t\t\t0.631373,\n\t\t\t0.631373,\n\t\t\t0.631373,\n\t\t\t-0.372549,\n\t\t\t0.749865,\n\t\t\t0.749865,\n\t\t\t0.749865,\n\t\t\t-0.247059,\n\t\t\t0.843368,\n\t\t\t0.843368,\n\t\t\t0.843368,\n\t\t\t-0.121569,\n\t\t\t0.926105,\n\t\t\t0.926105,\n\t\t\t0.926105,\n\t\t\t0.00392157,\n\t\t\t0.999846,\n\t\t\t0.997232,\n\t\t\t0.995694,\n\t\t\t0.129412,\n\t\t\t0.994925,\n\t\t\t0.908651,\n\t\t\t0.857901,\n\t\t\t0.254902,\n\t\t\t0.982468,\n\t\t\t0.800692,\n\t\t\t0.706113,\n\t\t\t0.380392,\n\t\t\t0.960323,\n\t\t\t0.66782,\n\t\t\t0.536332,\n\t\t\t0.505882,\n\t\t\t0.894579,\n\t\t\t0.503806,\n\t\t\t0.399769,\n\t\t\t0.631373,\n\t\t\t0.81707,\n\t\t\t0.33218,\n\t\t\t0.281046,\n\t\t\t0.756863,\n\t\t\t0.728489,\n\t\t\t0.155017,\n\t\t\t0.197386,\n\t\t\t0.882353,\n\t\t\t0.576932,\n\t\t\t0.055363,\n\t\t\t0.14925,\n\t\t\t1,\n\t\t\t0.403922,\n\t\t\t0,\n\t\t\t0.121569\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_divHi_purpleGreen\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.297553,\n\t\t\t0,\n\t\t\t0.489074,\n\t\t\t-0.87451,\n\t\t\t0.40259,\n\t\t\t0.151146,\n\t\t\t0.567754,\n\t\t\t-0.74902,\n\t\t\t0.516038,\n\t\t\t0.284843,\n\t\t\t0.658231,\n\t\t\t-0.623529,\n\t\t\t0.629783,\n\t\t\t0.423646,\n\t\t\t0.750938,\n\t\t\t-0.498039,\n\t\t\t0.735198,\n\t\t\t0.563697,\n\t\t\t0.835956,\n\t\t\t-0.372549,\n\t\t\t0.82408,\n\t\t\t0.695541,\n\t\t\t0.903582,\n\t\t\t-0.247059,\n\t\t\t0.889091,\n\t\t\t0.807454,\n\t\t\t0.944862,\n\t\t\t-0.121569,\n\t\t\t0.92334,\n\t\t\t0.886917,\n\t\t\t0.951839,\n\t\t\t0.00392157,\n\t\t\t0.921045,\n\t\t\t0.921084,\n\t\t\t0.921003,\n\t\t\t0.129412,\n\t\t\t0.877324,\n\t\t\t0.907455,\n\t\t\t0.845381,\n\t\t\t0.254902,\n\t\t\t0.797649,\n\t\t\t0.849713,\n\t\t\t0.734695,\n\t\t\t0.380392,\n\t\t\t0.691646,\n\t\t\t0.75964,\n\t\t\t0.600532,\n\t\t\t0.505882,\n\t\t\t0.568981,\n\t\t\t0.649159,\n\t\t\t0.453807,\n\t\t\t0.631373,\n\t\t\t0.438945,\n\t\t\t0.529756,\n\t\t\t0.304259,\n\t\t\t0.756863,\n\t\t\t0.30973,\n\t\t\t0.412001,\n\t\t\t0.158303,\n\t\t\t0.882353,\n\t\t\t0.187078,\n\t\t\t0.305111,\n\t\t\t0.00251458,\n\t\t\t1,\n\t\t\t0.101655,\n\t\t\t0.220836,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_divHi_purpleGreen_dim\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.404088,\n\t\t\t0.131038,\n\t\t\t0.592767,\n\t\t\t-0.87451,\n\t\t\t0.486469,\n\t\t\t0.230957,\n\t\t\t0.651243,\n\t\t\t-0.74902,\n\t\t\t0.575165,\n\t\t\t0.339335,\n\t\t\t0.717723,\n\t\t\t-0.623529,\n\t\t\t0.662741,\n\t\t\t0.454332,\n\t\t\t0.784263,\n\t\t\t-0.498039,\n\t\t\t0.742071,\n\t\t\t0.570213,\n\t\t\t0.842918,\n\t\t\t-0.372549,\n\t\t\t0.806935,\n\t\t\t0.678992,\n\t\t\t0.886227,\n\t\t\t-0.247059,\n\t\t\t0.852219,\n\t\t\t0.771315,\n\t\t\t0.90763,\n\t\t\t-0.121569,\n\t\t\t0.873345,\n\t\t\t0.837327,\n\t\t\t0.901572,\n\t\t\t0.00392157,\n\t\t\t0.866783,\n\t\t\t0.86682,\n\t\t\t0.866745,\n\t\t\t0.129412,\n\t\t\t0.82839,\n\t\t\t0.858225,\n\t\t\t0.796812,\n\t\t\t0.254902,\n\t\t\t0.762578,\n\t\t\t0.814287,\n\t\t\t0.700202,\n\t\t\t0.380392,\n\t\t\t0.676429,\n\t\t\t0.744229,\n\t\t\t0.585735,\n\t\t\t0.505882,\n\t\t\t0.577033,\n\t\t\t0.65732,\n\t\t\t0.461526,\n\t\t\t0.631373,\n\t\t\t0.47128,\n\t\t\t0.562476,\n\t\t\t0.33476,\n\t\t\t0.756863,\n\t\t\t0.365461,\n\t\t\t0.467957,\n\t\t\t0.21076,\n\t\t\t0.882353,\n\t\t\t0.264758,\n\t\t\t0.381138,\n\t\t\t0.0878313,\n\t\t\t1,\n\t\t\t0.182591,\n\t\t\t0.312249,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_divLow_icePeach\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.480048,\n\t\t\t0.817441,\n\t\t\t0.998056,\n\t\t\t-0.87451,\n\t\t\t0.425898,\n\t\t\t0.726921,\n\t\t\t0.883187,\n\t\t\t-0.74902,\n\t\t\t0.366682,\n\t\t\t0.629445,\n\t\t\t0.761936,\n\t\t\t-0.623529,\n\t\t\t0.308756,\n\t\t\t0.531002,\n\t\t\t0.640217,\n\t\t\t-0.498039,\n\t\t\t0.258021,\n\t\t\t0.43705,\n\t\t\t0.523433,\n\t\t\t-0.372549,\n\t\t\t0.219244,\n\t\t\t0.352381,\n\t\t\t0.416348,\n\t\t\t-0.247059,\n\t\t\t0.195127,\n\t\t\t0.281032,\n\t\t\t0.322979,\n\t\t\t-0.121569,\n\t\t\t0.186286,\n\t\t\t0.22627,\n\t\t\t0.246525,\n\t\t\t0.00392157,\n\t\t\t0.192352,\n\t\t\t0.19236,\n\t\t\t0.192364,\n\t\t\t0.129412,\n\t\t\t0.255927,\n\t\t\t0.214469,\n\t\t\t0.191756,\n\t\t\t0.254902,\n\t\t\t0.340459,\n\t\t\t0.254426,\n\t\t\t0.206666,\n\t\t\t0.380392,\n\t\t\t0.444655,\n\t\t\t0.309315,\n\t\t\t0.234029,\n\t\t\t0.505882,\n\t\t\t0.565353,\n\t\t\t0.376004,\n\t\t\t0.270969,\n\t\t\t0.631373,\n\t\t\t0.697917,\n\t\t\t0.450748,\n\t\t\t0.314293,\n\t\t\t0.756863,\n\t\t\t0.836657,\n\t\t\t0.529064,\n\t\t\t0.360227,\n\t\t\t0.882353,\n\t\t\t0.972695,\n\t\t\t0.614884,\n\t\t\t0.413123,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.705904,\n\t\t\t0.472699\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_divLow_purpleGreen\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.956034,\n\t\t\t0.666487,\n\t\t\t0.952663,\n\t\t\t-0.87451,\n\t\t\t0.874457,\n\t\t\t0.572698,\n\t\t\t0.936352,\n\t\t\t-0.74902,\n\t\t\t0.753465,\n\t\t\t0.488253,\n\t\t\t0.909063,\n\t\t\t-0.623529,\n\t\t\t0.63309,\n\t\t\t0.413507,\n\t\t\t0.763833,\n\t\t\t-0.498039,\n\t\t\t0.514491,\n\t\t\t0.345878,\n\t\t\t0.620015,\n\t\t\t-0.372549,\n\t\t\t0.405008,\n\t\t\t0.288141,\n\t\t\t0.484376,\n\t\t\t-0.247059,\n\t\t\t0.311388,\n\t\t\t0.241986,\n\t\t\t0.363556,\n\t\t\t-0.121569,\n\t\t\t0.238722,\n\t\t\t0.209044,\n\t\t\t0.263449,\n\t\t\t0.00392157,\n\t\t\t0.192352,\n\t\t\t0.192366,\n\t\t\t0.192362,\n\t\t\t0.129412,\n\t\t\t0.200379,\n\t\t\t0.233201,\n\t\t\t0.168618,\n\t\t\t0.254902,\n\t\t\t0.230151,\n\t\t\t0.291737,\n\t\t\t0.165227,\n\t\t\t0.380392,\n\t\t\t0.279481,\n\t\t\t0.366076,\n\t\t\t0.178607,\n\t\t\t0.505882,\n\t\t\t0.344927,\n\t\t\t0.453267,\n\t\t\t0.205703,\n\t\t\t0.631373,\n\t\t\t0.421554,\n\t\t\t0.549449,\n\t\t\t0.242643,\n\t\t\t0.756863,\n\t\t\t0.503334,\n\t\t\t0.649999,\n\t\t\t0.284377,\n\t\t\t0.882353,\n\t\t\t0.583497,\n\t\t\t0.749672,\n\t\t\t0.324969,\n\t\t\t1,\n\t\t\t0.650705,\n\t\t\t0.837228,\n\t\t\t0.356264\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Haze_green\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t1,\n\t\t\t0.835294,\n\t\t\t0.886275,\n\t\t\t-0.87451,\n\t\t\t0.937255,\n\t\t\t0.756863,\n\t\t\t0.870443,\n\t\t\t-0.74902,\n\t\t\t0.875817,\n\t\t\t0.666376,\n\t\t\t0.857807,\n\t\t\t-0.623529,\n\t\t\t0.778359,\n\t\t\t0.583007,\n\t\t\t0.808134,\n\t\t\t-0.498039,\n\t\t\t0.676253,\n\t\t\t0.494118,\n\t\t\t0.745098,\n\t\t\t-0.372549,\n\t\t\t0.561365,\n\t\t\t0.390123,\n\t\t\t0.682353,\n\t\t\t-0.247059,\n\t\t\t0.438344,\n\t\t\t0.262745,\n\t\t\t0.621496,\n\t\t\t-0.121569,\n\t\t\t0.321133,\n\t\t\t0.141031,\n\t\t\t0.558751,\n\t\t\t0.00392157,\n\t\t\t0.203922,\n\t\t\t0.0217865,\n\t\t\t0.495861,\n\t\t\t0.129412,\n\t\t\t0.265505,\n\t\t\t0.129412,\n\t\t\t0.433261,\n\t\t\t0.254902,\n\t\t\t0.311692,\n\t\t\t0.255338,\n\t\t\t0.37008,\n\t\t\t0.380392,\n\t\t\t0.356282,\n\t\t\t0.377342,\n\t\t\t0.310821,\n\t\t\t0.505882,\n\t\t\t0.39971,\n\t\t\t0.488889,\n\t\t\t0.258243,\n\t\t\t0.631373,\n\t\t\t0.442556,\n\t\t\t0.604357,\n\t\t\t0.205519,\n\t\t\t0.756863,\n\t\t\t0.48671,\n\t\t\t0.71968,\n\t\t\t0.152941,\n\t\t\t0.882353,\n\t\t\t0.529847,\n\t\t\t0.830356,\n\t\t\t0.100944,\n\t\t\t1,\n\t\t\t0.572549,\n\t\t\t0.933333,\n\t\t\t0.054902\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Haze_lime\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.704034,\n\t\t\t0.784196,\n\t\t\t1,\n\t\t\t-0.87451,\n\t\t\t0.633111,\n\t\t\t0.691418,\n\t\t\t0.956078,\n\t\t\t-0.74902,\n\t\t\t0.564021,\n\t\t\t0.600606,\n\t\t\t0.912157,\n\t\t\t-0.623529,\n\t\t\t0.496827,\n\t\t\t0.51189,\n\t\t\t0.868235,\n\t\t\t-0.498039,\n\t\t\t0.43157,\n\t\t\t0.425416,\n\t\t\t0.824314,\n\t\t\t-0.372549,\n\t\t\t0.368248,\n\t\t\t0.341347,\n\t\t\t0.780392,\n\t\t\t-0.247059,\n\t\t\t0.306767,\n\t\t\t0.259855,\n\t\t\t0.736471,\n\t\t\t-0.121569,\n\t\t\t0.246862,\n\t\t\t0.181069,\n\t\t\t0.692549,\n\t\t\t0.00392157,\n\t\t\t0.191619,\n\t\t\t0.109542,\n\t\t\t0.648627,\n\t\t\t0.129412,\n\t\t\t0.257404,\n\t\t\t0.194031,\n\t\t\t0.604706,\n\t\t\t0.254902,\n\t\t\t0.321794,\n\t\t\t0.278775,\n\t\t\t0.560784,\n\t\t\t0.380392,\n\t\t\t0.387909,\n\t\t\t0.364617,\n\t\t\t0.516863,\n\t\t\t0.505882,\n\t\t\t0.456569,\n\t\t\t0.451881,\n\t\t\t0.472941,\n\t\t\t0.631373,\n\t\t\t0.527424,\n\t\t\t0.540773,\n\t\t\t0.42902,\n\t\t\t0.756863,\n\t\t\t0.599759,\n\t\t\t0.631427,\n\t\t\t0.385098,\n\t\t\t0.882353,\n\t\t\t0.673065,\n\t\t\t0.723898,\n\t\t\t0.341176,\n\t\t\t1,\n\t\t\t0.742751,\n\t\t\t0.812252,\n\t\t\t0.3\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"Haze\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t1,\n\t\t\t0.835294,\n\t\t\t0.996078,\n\t\t\t-0.00392157,\n\t\t\t0.023529,\n\t\t\t0.141176,\n\t\t\t0.498039,\n\t\t\t0.00392157,\n\t\t\t0.015686,\n\t\t\t0.137255,\n\t\t\t0.494118,\n\t\t\t1,\n\t\t\t0.984314,\n\t\t\t0.764706,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"Haze_cyan\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.956863,\n\t\t\t1,\n\t\t\t0.835294,\n\t\t\t-0.87451,\n\t\t\t0.933188,\n\t\t\t0.921714,\n\t\t\t0.760784,\n\t\t\t-0.74902,\n\t\t\t0.870588,\n\t\t\t0.803486,\n\t\t\t0.671605,\n\t\t\t-0.623529,\n\t\t\t0.807843,\n\t\t\t0.684096,\n\t\t\t0.583297,\n\t\t\t-0.498039,\n\t\t\t0.745098,\n\t\t\t0.569208,\n\t\t\t0.494118,\n\t\t\t-0.372549,\n\t\t\t0.682353,\n\t\t\t0.437763,\n\t\t\t0.390123,\n\t\t\t-0.247059,\n\t\t\t0.621496,\n\t\t\t0.288163,\n\t\t\t0.262745,\n\t\t\t-0.121569,\n\t\t\t0.558751,\n\t\t\t0.144517,\n\t\t\t0.141031,\n\t\t\t0.00392157,\n\t\t\t0.495861,\n\t\t\t0.0217865,\n\t\t\t0.0413943,\n\t\t\t0.129412,\n\t\t\t0.433261,\n\t\t\t0.137255,\n\t\t\t0.129412,\n\t\t\t0.254902,\n\t\t\t0.37008,\n\t\t\t0.263181,\n\t\t\t0.255338,\n\t\t\t0.380392,\n\t\t\t0.306318,\n\t\t\t0.381845,\n\t\t\t0.372694,\n\t\t\t0.505882,\n\t\t\t0.243137,\n\t\t\t0.503994,\n\t\t\t0.494263,\n\t\t\t0.631373,\n\t\t\t0.180392,\n\t\t\t0.629484,\n\t\t\t0.619753,\n\t\t\t0.756863,\n\t\t\t0.117647,\n\t\t\t0.754975,\n\t\t\t0.747131,\n\t\t\t0.882353,\n\t\t\t0.054902,\n\t\t\t0.876398,\n\t\t\t0.866812,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.988235,\n\t\t\t0.976471\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"nic_Edge\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.191208,\n\t\t\t0.191208,\n\t\t\t0.191208,\n\t\t\t-0.87451,\n\t\t\t0.239484,\n\t\t\t0.00545035,\n\t\t\t0.614821,\n\t\t\t-0.74902,\n\t\t\t0.220593,\n\t\t\t0.0617459,\n\t\t\t0.863547,\n\t\t\t-0.623529,\n\t\t\t0.17509,\n\t\t\t0.278988,\n\t\t\t0.97794,\n\t\t\t-0.498039,\n\t\t\t0.143526,\n\t\t\t0.576069,\n\t\t\t0.998553,\n\t\t\t-0.372549,\n\t\t\t0.166456,\n\t\t\t0.871883,\n\t\t\t0.96594,\n\t\t\t-0.247059,\n\t\t\t0.376202,\n\t\t\t0.993555,\n\t\t\t0.981833,\n\t\t\t-0.121569,\n\t\t\t0.681996,\n\t\t\t0.991297,\n\t\t\t0.999239,\n\t\t\t0.00392157,\n\t\t\t0.954172,\n\t\t\t0.952734,\n\t\t\t0.94374,\n\t\t\t0.129412,\n\t\t\t0.999735,\n\t\t\t0.99301,\n\t\t\t0.662896,\n\t\t\t0.254902,\n\t\t\t0.979399,\n\t\t\t0.991466,\n\t\t\t0.357973,\n\t\t\t0.380392,\n\t\t\t0.968771,\n\t\t\t0.854967,\n\t\t\t0.162659,\n\t\t\t0.505882,\n\t\t\t0.999245,\n\t\t\t0.556697,\n\t\t\t0.144323,\n\t\t\t0.631373,\n\t\t\t0.973959,\n\t\t\t0.26223,\n\t\t\t0.177946,\n\t\t\t0.756863,\n\t\t\t0.852358,\n\t\t\t0.0526707,\n\t\t\t0.222974,\n\t\t\t0.882353,\n\t\t\t0.593889,\n\t\t\t0.00912724,\n\t\t\t0.238855,\n\t\t\t1,\n\t\t\t0.191208,\n\t\t\t0.191208,\n\t\t\t0.191208\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_iceFire_H\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t4.05432e-7,\n\t\t\t0,\n\t\t\t0.00000590122,\n\t\t\t-0.87451,\n\t\t\t0,\n\t\t\t0.120401,\n\t\t\t0.302675,\n\t\t\t-0.74902,\n\t\t\t0,\n\t\t\t0.216583,\n\t\t\t0.524574,\n\t\t\t-0.623529,\n\t\t\t0.0552475,\n\t\t\t0.345025,\n\t\t\t0.6595,\n\t\t\t-0.498039,\n\t\t\t0.128047,\n\t\t\t0.492588,\n\t\t\t0.720288,\n\t\t\t-0.372549,\n\t\t\t0.188955,\n\t\t\t0.641309,\n\t\t\t0.792092,\n\t\t\t-0.247059,\n\t\t\t0.327673,\n\t\t\t0.784935,\n\t\t\t0.873434,\n\t\t\t-0.121569,\n\t\t\t0.60824,\n\t\t\t0.892164,\n\t\t\t0.935547,\n\t\t\t0.00392157,\n\t\t\t0.881371,\n\t\t\t0.912178,\n\t\t\t0.818099,\n\t\t\t0.129412,\n\t\t\t0.951407,\n\t\t\t0.835621,\n\t\t\t0.449279,\n\t\t\t0.254902,\n\t\t\t0.904481,\n\t\t\t0.690489,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t0.85407,\n\t\t\t0.510864,\n\t\t\t0,\n\t\t\t0.505882,\n\t\t\t0.777093,\n\t\t\t0.33018,\n\t\t\t0.00088199,\n\t\t\t0.631373,\n\t\t\t0.672862,\n\t\t\t0.139087,\n\t\t\t0.00269398,\n\t\t\t0.756863,\n\t\t\t0.508815,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.882353,\n\t\t\t0.299417,\n\t\t\t0.000366289,\n\t\t\t0.000547829,\n\t\t\t1,\n\t\t\t0.0157519,\n\t\t\t0.00332021,\n\t\t\t4.55569e-8\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"erdc_iceFire_L\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.870485,\n\t\t\t0.913768,\n\t\t\t0.832905,\n\t\t\t-0.87451,\n\t\t\t0.586919,\n\t\t\t0.887865,\n\t\t\t0.934003,\n\t\t\t-0.74902,\n\t\t\t0.31583,\n\t\t\t0.776442,\n\t\t\t0.867858,\n\t\t\t-0.623529,\n\t\t\t0.18302,\n\t\t\t0.632034,\n\t\t\t0.787722,\n\t\t\t-0.498039,\n\t\t\t0.117909,\n\t\t\t0.484134,\n\t\t\t0.713825,\n\t\t\t-0.372549,\n\t\t\t0.0507239,\n\t\t\t0.335979,\n\t\t\t0.654741,\n\t\t\t-0.247059,\n\t\t\t0,\n\t\t\t0.209874,\n\t\t\t0.511832,\n\t\t\t-0.121569,\n\t\t\t0,\n\t\t\t0.114689,\n\t\t\t0.28935,\n\t\t\t0.00392157,\n\t\t\t0.0157519,\n\t\t\t0.00332021,\n\t\t\t4.55569e-8,\n\t\t\t0.129412,\n\t\t\t0.312914,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.254902,\n\t\t\t0.520865,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.380392,\n\t\t\t0.680105,\n\t\t\t0.15255,\n\t\t\t0.0025996,\n\t\t\t0.505882,\n\t\t\t0.785109,\n\t\t\t0.339479,\n\t\t\t0.000797922,\n\t\t\t0.631373,\n\t\t\t0.857354,\n\t\t\t0.522494,\n\t\t\t0,\n\t\t\t0.756863,\n\t\t\t0.910974,\n\t\t\t0.699774,\n\t\t\t0,\n\t\t\t0.882353,\n\t\t\t0.951921,\n\t\t\t0.842817,\n\t\t\t0.478545,\n\t\t\t1,\n\t\t\t0.881371,\n\t\t\t0.912178,\n\t\t\t0.818099\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"RGB\",\n\t\tName: \"hsv\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-0.666666,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t-0.333333,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.33333,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.66666,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tName: \"hue_L60\",\n\t\tRGBPoints: [\n\t\t\t-1,\n\t\t\t0.964784,\n\t\t\t0.400592,\n\t\t\t0.349549,\n\t\t\t-0.87451,\n\t\t\t0.964915,\n\t\t\t0.372498,\n\t\t\t0.53785,\n\t\t\t-0.74902,\n\t\t\t0.892353,\n\t\t\t0.401039,\n\t\t\t0.759569,\n\t\t\t-0.623529,\n\t\t\t0.79263,\n\t\t\t0.446956,\n\t\t\t0.903017,\n\t\t\t-0.498039,\n\t\t\t0.682208,\n\t\t\t0.49954,\n\t\t\t0.966673,\n\t\t\t-0.372549,\n\t\t\t0.56392,\n\t\t\t0.553082,\n\t\t\t0.968836,\n\t\t\t-0.247059,\n\t\t\t0.442031,\n\t\t\t0.606396,\n\t\t\t0.901601,\n\t\t\t-0.121569,\n\t\t\t0.305499,\n\t\t\t0.65701,\n\t\t\t0.765784,\n\t\t\t0.00392157,\n\t\t\t0.197251,\n\t\t\t0.687914,\n\t\t\t0.620914,\n\t\t\t0.129412,\n\t\t\t0.193882,\n\t\t\t0.701887,\n\t\t\t0.472654,\n\t\t\t0.254902,\n\t\t\t0.249866,\n\t\t\t0.706123,\n\t\t\t0.320005,\n\t\t\t0.380392,\n\t\t\t0.35132,\n\t\t\t0.697417,\n\t\t\t0.202919,\n\t\t\t0.505882,\n\t\t\t0.498097,\n\t\t\t0.669467,\n\t\t\t0.125232,\n\t\t\t0.631373,\n\t\t\t0.637477,\n\t\t\t0.626239,\n\t\t\t0.107431,\n\t\t\t0.756863,\n\t\t\t0.762115,\n\t\t\t0.56872,\n\t\t\t0.155812,\n\t\t\t0.882353,\n\t\t\t0.889434,\n\t\t\t0.481116,\n\t\t\t0.240445,\n\t\t\t1,\n\t\t\t0.964784,\n\t\t\t0.400592,\n\t\t\t0.349549\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.8941176470588236,\n\t\t\t0.1019607843137255,\n\t\t\t0.1098039215686274,\n\t\t\t0.2156862745098039,\n\t\t\t0.4941176470588236,\n\t\t\t0.7215686274509804,\n\t\t\t0.3019607843137255,\n\t\t\t0.6862745098039216,\n\t\t\t0.2901960784313726,\n\t\t\t0.596078431372549,\n\t\t\t0.3058823529411765,\n\t\t\t0.6392156862745098,\n\t\t\t1,\n\t\t\t0.4980392156862745,\n\t\t\t0,\n\t\t\t0.6509803921568628,\n\t\t\t0.3372549019607843,\n\t\t\t0.1568627450980392\n\t\t],\n\t\tName: \"Spectrum\",\n\t\tNanColor: [\n\t\t\t0.6509803921568628,\n\t\t\t0.3372549019607843,\n\t\t\t0.1568627450980392\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4745098039215686,\n\t\t\t0.09019607843137255,\n\t\t\t0.09019607843137255,\n\t\t\t0.7098039215686275,\n\t\t\t0.00392156862745098,\n\t\t\t0.00392156862745098,\n\t\t\t0.9372549019607843,\n\t\t\t0.2784313725490196,\n\t\t\t0.09803921568627451,\n\t\t\t0.9764705882352941,\n\t\t\t0.5137254901960784,\n\t\t\t0.1411764705882353,\n\t\t\t1,\n\t\t\t0.7058823529411765,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.8980392156862745,\n\t\t\t0.02352941176470588\n\t\t],\n\t\tName: \"Warm\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0.8980392156862745,\n\t\t\t0.02352941176470588\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4588235294117647,\n\t\t\t0.6941176470588235,\n\t\t\t0.00392156862745098,\n\t\t\t0.3450980392156863,\n\t\t\t0.5019607843137255,\n\t\t\t0.1607843137254902,\n\t\t\t0.3137254901960784,\n\t\t\t0.8431372549019608,\n\t\t\t0.7490196078431373,\n\t\t\t0.1098039215686274,\n\t\t\t0.5843137254901961,\n\t\t\t0.803921568627451,\n\t\t\t0.2313725490196079,\n\t\t\t0.407843137254902,\n\t\t\t0.6705882352941176,\n\t\t\t0.6039215686274509,\n\t\t\t0.407843137254902,\n\t\t\t1,\n\t\t\t0.3725490196078431,\n\t\t\t0.2,\n\t\t\t0.5019607843137255\n\t\t],\n\t\tName: \"Cool\",\n\t\tNanColor: [\n\t\t\t0.3725490196078431,\n\t\t\t0.2,\n\t\t\t0.5019607843137255\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.2313725490196079,\n\t\t\t0.407843137254902,\n\t\t\t0.6705882352941176,\n\t\t\t0.1098039215686274,\n\t\t\t0.5843137254901961,\n\t\t\t0.803921568627451,\n\t\t\t0.3058823529411765,\n\t\t\t0.8509803921568627,\n\t\t\t0.9176470588235294,\n\t\t\t0.4509803921568628,\n\t\t\t0.6039215686274509,\n\t\t\t0.8352941176470589,\n\t\t\t0.2588235294117647,\n\t\t\t0.2392156862745098,\n\t\t\t0.6627450980392157,\n\t\t\t0.3137254901960784,\n\t\t\t0.3294117647058823,\n\t\t\t0.5294117647058824,\n\t\t\t0.06274509803921569,\n\t\t\t0.1647058823529412,\n\t\t\t0.3215686274509804\n\t\t],\n\t\tName: \"Blues\",\n\t\tNanColor: [\n\t\t\t0.06274509803921569,\n\t\t\t0.1647058823529412,\n\t\t\t0.3215686274509804\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.1098039215686274,\n\t\t\t0.5843137254901961,\n\t\t\t0.803921568627451,\n\t\t\t0.2313725490196079,\n\t\t\t0.407843137254902,\n\t\t\t0.6705882352941176,\n\t\t\t0.4,\n\t\t\t0.2431372549019608,\n\t\t\t0.7176470588235294,\n\t\t\t0.6352941176470588,\n\t\t\t0.3294117647058823,\n\t\t\t0.8117647058823529,\n\t\t\t0.8705882352941177,\n\t\t\t0.3803921568627451,\n\t\t\t0.807843137254902,\n\t\t\t0.8627450980392157,\n\t\t\t0.3803921568627451,\n\t\t\t0.5843137254901961,\n\t\t\t0.2392156862745098,\n\t\t\t0.06274509803921569,\n\t\t\t0.3215686274509804\n\t\t],\n\t\tName: \"Wild Flower\",\n\t\tNanColor: [\n\t\t\t0.2392156862745098,\n\t\t\t0.06274509803921569,\n\t\t\t0.3215686274509804\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.396078431372549,\n\t\t\t0.4862745098039216,\n\t\t\t0.2156862745098039,\n\t\t\t0.4588235294117647,\n\t\t\t0.6941176470588235,\n\t\t\t0.00392156862745098,\n\t\t\t0.6980392156862745,\n\t\t\t0.7294117647058823,\n\t\t\t0.1882352941176471,\n\t\t\t1,\n\t\t\t0.8980392156862745,\n\t\t\t0.02352941176470588,\n\t\t\t1,\n\t\t\t0.7058823529411765,\n\t\t\t0,\n\t\t\t0.9764705882352941,\n\t\t\t0.5137254901960784,\n\t\t\t0.1411764705882353\n\t\t],\n\t\tName: \"Citrus\",\n\t\tNanColor: [\n\t\t\t0.9764705882352941,\n\t\t\t0.5137254901960784,\n\t\t\t0.1411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4980392156862745,\n\t\t\t0.2313725490196079,\n\t\t\t0.03137254901960784,\n\t\t\t0.7019607843137254,\n\t\t\t0.3450980392156863,\n\t\t\t0.02352941176470588,\n\t\t\t0.8784313725490196,\n\t\t\t0.5098039215686274,\n\t\t\t0.0784313725490196,\n\t\t\t0.9921568627450981,\n\t\t\t0.7215686274509804,\n\t\t\t0.3882352941176471,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.7137254901960784,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.8470588235294118,\n\t\t\t0.8549019607843137,\n\t\t\t0.9215686274509803,\n\t\t\t0.6980392156862745,\n\t\t\t0.6705882352941176,\n\t\t\t0.8235294117647058,\n\t\t\t0.5019607843137255,\n\t\t\t0.4509803921568628,\n\t\t\t0.6745098039215687,\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333,\n\t\t\t0.1764705882352941,\n\t\t\t0,\n\t\t\t0.2941176470588235\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (11)\",\n\t\tNanColor: [\n\t\t\t0.1764705882352941,\n\t\t\t0,\n\t\t\t0.2941176470588235\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4980392156862745,\n\t\t\t0.2313725490196079,\n\t\t\t0.03137254901960784,\n\t\t\t0.7019607843137254,\n\t\t\t0.3450980392156863,\n\t\t\t0.02352941176470588,\n\t\t\t0.8784313725490196,\n\t\t\t0.5098039215686274,\n\t\t\t0.0784313725490196,\n\t\t\t0.9921568627450981,\n\t\t\t0.7215686274509804,\n\t\t\t0.3882352941176471,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.7137254901960784,\n\t\t\t0.8470588235294118,\n\t\t\t0.8549019607843137,\n\t\t\t0.9215686274509803,\n\t\t\t0.6980392156862745,\n\t\t\t0.6705882352941176,\n\t\t\t0.8235294117647058,\n\t\t\t0.5019607843137255,\n\t\t\t0.4509803921568628,\n\t\t\t0.6745098039215687,\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333,\n\t\t\t0.1764705882352941,\n\t\t\t0,\n\t\t\t0.2941176470588235\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (10)\",\n\t\tNanColor: [\n\t\t\t0.1764705882352941,\n\t\t\t0,\n\t\t\t0.2941176470588235\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.7019607843137254,\n\t\t\t0.3450980392156863,\n\t\t\t0.02352941176470588,\n\t\t\t0.8784313725490196,\n\t\t\t0.5098039215686274,\n\t\t\t0.0784313725490196,\n\t\t\t0.9921568627450981,\n\t\t\t0.7215686274509804,\n\t\t\t0.3882352941176471,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.7137254901960784,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.8470588235294118,\n\t\t\t0.8549019607843137,\n\t\t\t0.9215686274509803,\n\t\t\t0.6980392156862745,\n\t\t\t0.6705882352941176,\n\t\t\t0.8235294117647058,\n\t\t\t0.5019607843137255,\n\t\t\t0.4509803921568628,\n\t\t\t0.6745098039215687,\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (9)\",\n\t\tNanColor: [\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.7019607843137254,\n\t\t\t0.3450980392156863,\n\t\t\t0.02352941176470588,\n\t\t\t0.8784313725490196,\n\t\t\t0.5098039215686274,\n\t\t\t0.0784313725490196,\n\t\t\t0.9921568627450981,\n\t\t\t0.7215686274509804,\n\t\t\t0.3882352941176471,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.7137254901960784,\n\t\t\t0.8470588235294118,\n\t\t\t0.8549019607843137,\n\t\t\t0.9215686274509803,\n\t\t\t0.6980392156862745,\n\t\t\t0.6705882352941176,\n\t\t\t0.8235294117647058,\n\t\t\t0.5019607843137255,\n\t\t\t0.4509803921568628,\n\t\t\t0.6745098039215687,\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (8)\",\n\t\tNanColor: [\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.7019607843137254,\n\t\t\t0.3450980392156863,\n\t\t\t0.02352941176470588,\n\t\t\t0.9450980392156862,\n\t\t\t0.6392156862745098,\n\t\t\t0.2509803921568627,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.7137254901960784,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.8470588235294118,\n\t\t\t0.8549019607843137,\n\t\t\t0.9215686274509803,\n\t\t\t0.6,\n\t\t\t0.5568627450980392,\n\t\t\t0.7647058823529411,\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (7)\",\n\t\tNanColor: [\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.7019607843137254,\n\t\t\t0.3450980392156863,\n\t\t\t0.02352941176470588,\n\t\t\t0.9450980392156862,\n\t\t\t0.6392156862745098,\n\t\t\t0.2509803921568627,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.7137254901960784,\n\t\t\t0.8470588235294118,\n\t\t\t0.8549019607843137,\n\t\t\t0.9215686274509803,\n\t\t\t0.6,\n\t\t\t0.5568627450980392,\n\t\t\t0.7647058823529411,\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (6)\",\n\t\tNanColor: [\n\t\t\t0.3294117647058823,\n\t\t\t0.1529411764705882,\n\t\t\t0.5333333333333333\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9019607843137255,\n\t\t\t0.3803921568627451,\n\t\t\t0.00392156862745098,\n\t\t\t0.9921568627450981,\n\t\t\t0.7215686274509804,\n\t\t\t0.3882352941176471,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.6980392156862745,\n\t\t\t0.6705882352941176,\n\t\t\t0.8235294117647058,\n\t\t\t0.3686274509803922,\n\t\t\t0.2352941176470588,\n\t\t\t0.6\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (5)\",\n\t\tNanColor: [\n\t\t\t0.3686274509803922,\n\t\t\t0.2352941176470588,\n\t\t\t0.6\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9019607843137255,\n\t\t\t0.3803921568627451,\n\t\t\t0.00392156862745098,\n\t\t\t0.9921568627450981,\n\t\t\t0.7215686274509804,\n\t\t\t0.3882352941176471,\n\t\t\t0.6980392156862745,\n\t\t\t0.6705882352941176,\n\t\t\t0.8235294117647058,\n\t\t\t0.3686274509803922,\n\t\t\t0.2352941176470588,\n\t\t\t0.6\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (4)\",\n\t\tNanColor: [\n\t\t\t0.3686274509803922,\n\t\t\t0.2352941176470588,\n\t\t\t0.6\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9450980392156862,\n\t\t\t0.6392156862745098,\n\t\t\t0.2509803921568627,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.9686274509803922,\n\t\t\t0.6,\n\t\t\t0.5568627450980392,\n\t\t\t0.7647058823529411\n\t\t],\n\t\tName: \"Brewer Diverging Purple-Orange (3)\",\n\t\tNanColor: [\n\t\t\t0.6,\n\t\t\t0.5568627450980392,\n\t\t\t0.7647058823529411\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.6196078431372549,\n\t\t\t0.00392156862745098,\n\t\t\t0.2588235294117647,\n\t\t\t0.8352941176470589,\n\t\t\t0.2431372549019608,\n\t\t\t0.3098039215686275,\n\t\t\t0.9568627450980393,\n\t\t\t0.4274509803921568,\n\t\t\t0.2627450980392157,\n\t\t\t0.9921568627450981,\n\t\t\t0.6823529411764706,\n\t\t\t0.3803921568627451,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.5450980392156862,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7490196078431373,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.596078431372549,\n\t\t\t0.6705882352941176,\n\t\t\t0.8666666666666667,\n\t\t\t0.6431372549019608,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6470588235294118,\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353,\n\t\t\t0.3686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.6352941176470588\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (11)\",\n\t\tNanColor: [\n\t\t\t0.3686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.6352941176470588\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.6196078431372549,\n\t\t\t0.00392156862745098,\n\t\t\t0.2588235294117647,\n\t\t\t0.8352941176470589,\n\t\t\t0.2431372549019608,\n\t\t\t0.3098039215686275,\n\t\t\t0.9568627450980393,\n\t\t\t0.4274509803921568,\n\t\t\t0.2627450980392157,\n\t\t\t0.9921568627450981,\n\t\t\t0.6823529411764706,\n\t\t\t0.3803921568627451,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.5450980392156862,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.596078431372549,\n\t\t\t0.6705882352941176,\n\t\t\t0.8666666666666667,\n\t\t\t0.6431372549019608,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6470588235294118,\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353,\n\t\t\t0.3686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.6352941176470588\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (10)\",\n\t\tNanColor: [\n\t\t\t0.3686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.6352941176470588\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8352941176470589,\n\t\t\t0.2431372549019608,\n\t\t\t0.3098039215686275,\n\t\t\t0.9568627450980393,\n\t\t\t0.4274509803921568,\n\t\t\t0.2627450980392157,\n\t\t\t0.9921568627450981,\n\t\t\t0.6823529411764706,\n\t\t\t0.3803921568627451,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.5450980392156862,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7490196078431373,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.596078431372549,\n\t\t\t0.6705882352941176,\n\t\t\t0.8666666666666667,\n\t\t\t0.6431372549019608,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6470588235294118,\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (9)\",\n\t\tNanColor: [\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8352941176470589,\n\t\t\t0.2431372549019608,\n\t\t\t0.3098039215686275,\n\t\t\t0.9568627450980393,\n\t\t\t0.4274509803921568,\n\t\t\t0.2627450980392157,\n\t\t\t0.9921568627450981,\n\t\t\t0.6823529411764706,\n\t\t\t0.3803921568627451,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.5450980392156862,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.596078431372549,\n\t\t\t0.6705882352941176,\n\t\t\t0.8666666666666667,\n\t\t\t0.6431372549019608,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6470588235294118,\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (8)\",\n\t\tNanColor: [\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8352941176470589,\n\t\t\t0.2431372549019608,\n\t\t\t0.3098039215686275,\n\t\t\t0.9882352941176471,\n\t\t\t0.5529411764705883,\n\t\t\t0.3490196078431372,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.5450980392156862,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7490196078431373,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.596078431372549,\n\t\t\t0.6,\n\t\t\t0.8352941176470589,\n\t\t\t0.5803921568627451,\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (7)\",\n\t\tNanColor: [\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8352941176470589,\n\t\t\t0.2431372549019608,\n\t\t\t0.3098039215686275,\n\t\t\t0.9882352941176471,\n\t\t\t0.5529411764705883,\n\t\t\t0.3490196078431372,\n\t\t\t0.996078431372549,\n\t\t\t0.8784313725490196,\n\t\t\t0.5450980392156862,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.596078431372549,\n\t\t\t0.6,\n\t\t\t0.8352941176470589,\n\t\t\t0.5803921568627451,\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (6)\",\n\t\tNanColor: [\n\t\t\t0.196078431372549,\n\t\t\t0.5333333333333333,\n\t\t\t0.7411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8431372549019608,\n\t\t\t0.09803921568627451,\n\t\t\t0.1098039215686274,\n\t\t\t0.9921568627450981,\n\t\t\t0.6823529411764706,\n\t\t\t0.3803921568627451,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7490196078431373,\n\t\t\t0.6705882352941176,\n\t\t\t0.8666666666666667,\n\t\t\t0.6431372549019608,\n\t\t\t0.1686274509803922,\n\t\t\t0.5137254901960784,\n\t\t\t0.7294117647058823\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (5)\",\n\t\tNanColor: [\n\t\t\t0.1686274509803922,\n\t\t\t0.5137254901960784,\n\t\t\t0.7294117647058823\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8431372549019608,\n\t\t\t0.09803921568627451,\n\t\t\t0.1098039215686274,\n\t\t\t0.9921568627450981,\n\t\t\t0.6823529411764706,\n\t\t\t0.3803921568627451,\n\t\t\t0.6705882352941176,\n\t\t\t0.8666666666666667,\n\t\t\t0.6431372549019608,\n\t\t\t0.1686274509803922,\n\t\t\t0.5137254901960784,\n\t\t\t0.7294117647058823\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (4)\",\n\t\tNanColor: [\n\t\t\t0.1686274509803922,\n\t\t\t0.5137254901960784,\n\t\t\t0.7294117647058823\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9882352941176471,\n\t\t\t0.5529411764705883,\n\t\t\t0.3490196078431372,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7490196078431373,\n\t\t\t0.6,\n\t\t\t0.8352941176470589,\n\t\t\t0.5803921568627451\n\t\t],\n\t\tName: \"Brewer Diverging Spectral (3)\",\n\t\tNanColor: [\n\t\t\t0.6,\n\t\t\t0.8352941176470589,\n\t\t\t0.5803921568627451\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.3294117647058823,\n\t\t\t0.1882352941176471,\n\t\t\t0.0196078431372549,\n\t\t\t0.5490196078431373,\n\t\t\t0.3176470588235294,\n\t\t\t0.0392156862745098,\n\t\t\t0.7490196078431373,\n\t\t\t0.5058823529411764,\n\t\t\t0.1764705882352941,\n\t\t\t0.8745098039215686,\n\t\t\t0.7607843137254902,\n\t\t\t0.4901960784313725,\n\t\t\t0.9647058823529412,\n\t\t\t0.9098039215686274,\n\t\t\t0.7647058823529411,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.7803921568627451,\n\t\t\t0.9176470588235294,\n\t\t\t0.8980392156862745,\n\t\t\t0.5019607843137255,\n\t\t\t0.803921568627451,\n\t\t\t0.7568627450980392,\n\t\t\t0.207843137254902,\n\t\t\t0.592156862745098,\n\t\t\t0.5607843137254902,\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922,\n\t\t\t0,\n\t\t\t0.2352941176470588,\n\t\t\t0.1882352941176471\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (11)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.2352941176470588,\n\t\t\t0.1882352941176471\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.3294117647058823,\n\t\t\t0.1882352941176471,\n\t\t\t0.0196078431372549,\n\t\t\t0.5490196078431373,\n\t\t\t0.3176470588235294,\n\t\t\t0.0392156862745098,\n\t\t\t0.7490196078431373,\n\t\t\t0.5058823529411764,\n\t\t\t0.1764705882352941,\n\t\t\t0.8745098039215686,\n\t\t\t0.7607843137254902,\n\t\t\t0.4901960784313725,\n\t\t\t0.9647058823529412,\n\t\t\t0.9098039215686274,\n\t\t\t0.7647058823529411,\n\t\t\t0.7803921568627451,\n\t\t\t0.9176470588235294,\n\t\t\t0.8980392156862745,\n\t\t\t0.5019607843137255,\n\t\t\t0.803921568627451,\n\t\t\t0.7568627450980392,\n\t\t\t0.207843137254902,\n\t\t\t0.592156862745098,\n\t\t\t0.5607843137254902,\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922,\n\t\t\t0,\n\t\t\t0.2352941176470588,\n\t\t\t0.1882352941176471\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (10)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.2352941176470588,\n\t\t\t0.1882352941176471\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.5490196078431373,\n\t\t\t0.3176470588235294,\n\t\t\t0.0392156862745098,\n\t\t\t0.7490196078431373,\n\t\t\t0.5058823529411764,\n\t\t\t0.1764705882352941,\n\t\t\t0.8745098039215686,\n\t\t\t0.7607843137254902,\n\t\t\t0.4901960784313725,\n\t\t\t0.9647058823529412,\n\t\t\t0.9098039215686274,\n\t\t\t0.7647058823529411,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.7803921568627451,\n\t\t\t0.9176470588235294,\n\t\t\t0.8980392156862745,\n\t\t\t0.5019607843137255,\n\t\t\t0.803921568627451,\n\t\t\t0.7568627450980392,\n\t\t\t0.207843137254902,\n\t\t\t0.592156862745098,\n\t\t\t0.5607843137254902,\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (9)\",\n\t\tNanColor: [\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.5490196078431373,\n\t\t\t0.3176470588235294,\n\t\t\t0.0392156862745098,\n\t\t\t0.7490196078431373,\n\t\t\t0.5058823529411764,\n\t\t\t0.1764705882352941,\n\t\t\t0.8745098039215686,\n\t\t\t0.7607843137254902,\n\t\t\t0.4901960784313725,\n\t\t\t0.9647058823529412,\n\t\t\t0.9098039215686274,\n\t\t\t0.7647058823529411,\n\t\t\t0.7803921568627451,\n\t\t\t0.9176470588235294,\n\t\t\t0.8980392156862745,\n\t\t\t0.5019607843137255,\n\t\t\t0.803921568627451,\n\t\t\t0.7568627450980392,\n\t\t\t0.207843137254902,\n\t\t\t0.592156862745098,\n\t\t\t0.5607843137254902,\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (8)\",\n\t\tNanColor: [\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.5490196078431373,\n\t\t\t0.3176470588235294,\n\t\t\t0.0392156862745098,\n\t\t\t0.8470588235294118,\n\t\t\t0.7019607843137254,\n\t\t\t0.396078431372549,\n\t\t\t0.9647058823529412,\n\t\t\t0.9098039215686274,\n\t\t\t0.7647058823529411,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.7803921568627451,\n\t\t\t0.9176470588235294,\n\t\t\t0.8980392156862745,\n\t\t\t0.3529411764705883,\n\t\t\t0.7058823529411765,\n\t\t\t0.6745098039215687,\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (7)\",\n\t\tNanColor: [\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.5490196078431373,\n\t\t\t0.3176470588235294,\n\t\t\t0.0392156862745098,\n\t\t\t0.8470588235294118,\n\t\t\t0.7019607843137254,\n\t\t\t0.396078431372549,\n\t\t\t0.9647058823529412,\n\t\t\t0.9098039215686274,\n\t\t\t0.7647058823529411,\n\t\t\t0.7803921568627451,\n\t\t\t0.9176470588235294,\n\t\t\t0.8980392156862745,\n\t\t\t0.3529411764705883,\n\t\t\t0.7058823529411765,\n\t\t\t0.6745098039215687,\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (6)\",\n\t\tNanColor: [\n\t\t\t0.00392156862745098,\n\t\t\t0.4,\n\t\t\t0.3686274509803922\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.6509803921568628,\n\t\t\t0.3803921568627451,\n\t\t\t0.1019607843137255,\n\t\t\t0.8745098039215686,\n\t\t\t0.7607843137254902,\n\t\t\t0.4901960784313725,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.5019607843137255,\n\t\t\t0.803921568627451,\n\t\t\t0.7568627450980392,\n\t\t\t0.00392156862745098,\n\t\t\t0.5215686274509804,\n\t\t\t0.4431372549019608\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (5)\",\n\t\tNanColor: [\n\t\t\t0.00392156862745098,\n\t\t\t0.5215686274509804,\n\t\t\t0.4431372549019608\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.6509803921568628,\n\t\t\t0.3803921568627451,\n\t\t\t0.1019607843137255,\n\t\t\t0.8745098039215686,\n\t\t\t0.7607843137254902,\n\t\t\t0.4901960784313725,\n\t\t\t0.5019607843137255,\n\t\t\t0.803921568627451,\n\t\t\t0.7568627450980392,\n\t\t\t0.00392156862745098,\n\t\t\t0.5215686274509804,\n\t\t\t0.4431372549019608\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (4)\",\n\t\tNanColor: [\n\t\t\t0.00392156862745098,\n\t\t\t0.5215686274509804,\n\t\t\t0.4431372549019608\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8470588235294118,\n\t\t\t0.7019607843137254,\n\t\t\t0.396078431372549,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.9607843137254902,\n\t\t\t0.3529411764705883,\n\t\t\t0.7058823529411765,\n\t\t\t0.6745098039215687\n\t\t],\n\t\tName: \"Brewer Diverging Brown-Blue-Green (3)\",\n\t\tNanColor: [\n\t\t\t0.3529411764705883,\n\t\t\t0.7058823529411765,\n\t\t\t0.6745098039215687\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9686274509803922,\n\t\t\t0.9882352941176471,\n\t\t\t0.9921568627450981,\n\t\t\t0.8980392156862745,\n\t\t\t0.9607843137254902,\n\t\t\t0.9764705882352941,\n\t\t\t0.8,\n\t\t\t0.9254901960784314,\n\t\t\t0.9019607843137255,\n\t\t\t0.6,\n\t\t\t0.8470588235294118,\n\t\t\t0.788235294117647,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6431372549019608,\n\t\t\t0.2549019607843137,\n\t\t\t0.6823529411764706,\n\t\t\t0.4627450980392157,\n\t\t\t0.1372549019607843,\n\t\t\t0.5450980392156862,\n\t\t\t0.2705882352941176,\n\t\t\t0,\n\t\t\t0.4274509803921568,\n\t\t\t0.1725490196078431,\n\t\t\t0,\n\t\t\t0.2666666666666667,\n\t\t\t0.1058823529411765\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (9)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.2666666666666667,\n\t\t\t0.1058823529411765\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9686274509803922,\n\t\t\t0.9882352941176471,\n\t\t\t0.9921568627450981,\n\t\t\t0.8980392156862745,\n\t\t\t0.9607843137254902,\n\t\t\t0.9764705882352941,\n\t\t\t0.8,\n\t\t\t0.9254901960784314,\n\t\t\t0.9019607843137255,\n\t\t\t0.6,\n\t\t\t0.8470588235294118,\n\t\t\t0.788235294117647,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6431372549019608,\n\t\t\t0.2549019607843137,\n\t\t\t0.6823529411764706,\n\t\t\t0.4627450980392157,\n\t\t\t0.1372549019607843,\n\t\t\t0.5450980392156862,\n\t\t\t0.2705882352941176,\n\t\t\t0,\n\t\t\t0.3450980392156863,\n\t\t\t0.1411764705882353\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (8)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.3450980392156863,\n\t\t\t0.1411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.8,\n\t\t\t0.9254901960784314,\n\t\t\t0.9019607843137255,\n\t\t\t0.8,\n\t\t\t0.9254901960784314,\n\t\t\t0.9019607843137255,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6431372549019608,\n\t\t\t0.2549019607843137,\n\t\t\t0.6823529411764706,\n\t\t\t0.4627450980392157,\n\t\t\t0.1372549019607843,\n\t\t\t0.5450980392156862,\n\t\t\t0.2705882352941176,\n\t\t\t0,\n\t\t\t0.3450980392156863,\n\t\t\t0.1411764705882353\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (7)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.3450980392156863,\n\t\t\t0.1411764705882353\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.8,\n\t\t\t0.9254901960784314,\n\t\t\t0.9019607843137255,\n\t\t\t0.6,\n\t\t\t0.8470588235294118,\n\t\t\t0.788235294117647,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6431372549019608,\n\t\t\t0.1725490196078431,\n\t\t\t0.6352941176470588,\n\t\t\t0.3725490196078431,\n\t\t\t0,\n\t\t\t0.4274509803921568,\n\t\t\t0.1725490196078431\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (6)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.4274509803921568,\n\t\t\t0.1725490196078431\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.6980392156862745,\n\t\t\t0.8862745098039215,\n\t\t\t0.8862745098039215,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6431372549019608,\n\t\t\t0.1725490196078431,\n\t\t\t0.6352941176470588,\n\t\t\t0.3725490196078431,\n\t\t\t0,\n\t\t\t0.4274509803921568,\n\t\t\t0.1725490196078431\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (5)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t0.4274509803921568,\n\t\t\t0.1725490196078431\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.6980392156862745,\n\t\t\t0.8862745098039215,\n\t\t\t0.8862745098039215,\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6431372549019608,\n\t\t\t0.1372549019607843,\n\t\t\t0.5450980392156862,\n\t\t\t0.2705882352941176\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (4)\",\n\t\tNanColor: [\n\t\t\t0.1372549019607843,\n\t\t\t0.5450980392156862,\n\t\t\t0.2705882352941176\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8980392156862745,\n\t\t\t0.9607843137254902,\n\t\t\t0.9764705882352941,\n\t\t\t0.6,\n\t\t\t0.8470588235294118,\n\t\t\t0.788235294117647,\n\t\t\t0.1725490196078431,\n\t\t\t0.6352941176470588,\n\t\t\t0.3725490196078431\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Green (3)\",\n\t\tNanColor: [\n\t\t\t0.1725490196078431,\n\t\t\t0.6352941176470588,\n\t\t\t0.3725490196078431\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8980392156862745,\n\t\t\t1,\n\t\t\t0.9686274509803922,\n\t\t\t0.7372549019607844,\n\t\t\t0.996078431372549,\n\t\t\t0.8901960784313725,\n\t\t\t0.5686274509803921,\n\t\t\t0.996078431372549,\n\t\t\t0.7686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.996078431372549,\n\t\t\t0.6,\n\t\t\t0.1607843137254902,\n\t\t\t0.9254901960784314,\n\t\t\t0.4392156862745098,\n\t\t\t0.0784313725490196,\n\t\t\t0.8,\n\t\t\t0.2980392156862745,\n\t\t\t0.00784313725490196,\n\t\t\t0.6,\n\t\t\t0.203921568627451,\n\t\t\t0.01568627450980392,\n\t\t\t0.4,\n\t\t\t0.1450980392156863,\n\t\t\t0.02352941176470588\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (9)\",\n\t\tNanColor: [\n\t\t\t0.4,\n\t\t\t0.1450980392156863,\n\t\t\t0.02352941176470588\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8980392156862745,\n\t\t\t1,\n\t\t\t0.9686274509803922,\n\t\t\t0.7372549019607844,\n\t\t\t0.996078431372549,\n\t\t\t0.8901960784313725,\n\t\t\t0.5686274509803921,\n\t\t\t0.996078431372549,\n\t\t\t0.7686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.996078431372549,\n\t\t\t0.6,\n\t\t\t0.1607843137254902,\n\t\t\t0.9254901960784314,\n\t\t\t0.4392156862745098,\n\t\t\t0.0784313725490196,\n\t\t\t0.8,\n\t\t\t0.2980392156862745,\n\t\t\t0.00784313725490196,\n\t\t\t0.5490196078431373,\n\t\t\t0.1764705882352941,\n\t\t\t0.01568627450980392\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (8)\",\n\t\tNanColor: [\n\t\t\t0.5490196078431373,\n\t\t\t0.1764705882352941,\n\t\t\t0.01568627450980392\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8313725490196079,\n\t\t\t0.996078431372549,\n\t\t\t0.8901960784313725,\n\t\t\t0.5686274509803921,\n\t\t\t0.996078431372549,\n\t\t\t0.7686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.996078431372549,\n\t\t\t0.6,\n\t\t\t0.1607843137254902,\n\t\t\t0.9254901960784314,\n\t\t\t0.4392156862745098,\n\t\t\t0.0784313725490196,\n\t\t\t0.8,\n\t\t\t0.2980392156862745,\n\t\t\t0.00784313725490196,\n\t\t\t0.5490196078431373,\n\t\t\t0.1764705882352941,\n\t\t\t0.01568627450980392\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (7)\",\n\t\tNanColor: [\n\t\t\t0.5490196078431373,\n\t\t\t0.1764705882352941,\n\t\t\t0.01568627450980392\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8313725490196079,\n\t\t\t0.996078431372549,\n\t\t\t0.8901960784313725,\n\t\t\t0.5686274509803921,\n\t\t\t0.996078431372549,\n\t\t\t0.7686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.996078431372549,\n\t\t\t0.6,\n\t\t\t0.1607843137254902,\n\t\t\t0.8509803921568627,\n\t\t\t0.3725490196078431,\n\t\t\t0.05490196078431372,\n\t\t\t0.6,\n\t\t\t0.203921568627451,\n\t\t\t0.01568627450980392\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (6)\",\n\t\tNanColor: [\n\t\t\t0.6,\n\t\t\t0.203921568627451,\n\t\t\t0.01568627450980392\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8313725490196079,\n\t\t\t0.996078431372549,\n\t\t\t0.8509803921568627,\n\t\t\t0.5568627450980392,\n\t\t\t0.996078431372549,\n\t\t\t0.6,\n\t\t\t0.1607843137254902,\n\t\t\t0.8509803921568627,\n\t\t\t0.3725490196078431,\n\t\t\t0.05490196078431372,\n\t\t\t0.6,\n\t\t\t0.203921568627451,\n\t\t\t0.01568627450980392\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (5)\",\n\t\tNanColor: [\n\t\t\t0.6,\n\t\t\t0.203921568627451,\n\t\t\t0.01568627450980392\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8313725490196079,\n\t\t\t0.996078431372549,\n\t\t\t0.8509803921568627,\n\t\t\t0.5568627450980392,\n\t\t\t0.996078431372549,\n\t\t\t0.6,\n\t\t\t0.1607843137254902,\n\t\t\t0.8,\n\t\t\t0.2980392156862745,\n\t\t\t0.00784313725490196\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (4)\",\n\t\tNanColor: [\n\t\t\t0.8,\n\t\t\t0.2980392156862745,\n\t\t\t0.00784313725490196\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t0.9686274509803922,\n\t\t\t0.7372549019607844,\n\t\t\t0.996078431372549,\n\t\t\t0.7686274509803922,\n\t\t\t0.3098039215686275,\n\t\t\t0.8509803921568627,\n\t\t\t0.3725490196078431,\n\t\t\t0.05490196078431372\n\t\t],\n\t\tName: \"Brewer Sequential Yellow-Orange-Brown (3)\",\n\t\tNanColor: [\n\t\t\t0.8509803921568627,\n\t\t\t0.3725490196078431,\n\t\t\t0.05490196078431372\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9686274509803922,\n\t\t\t0.9882352941176471,\n\t\t\t0.9921568627450981,\n\t\t\t0.8784313725490196,\n\t\t\t0.9254901960784314,\n\t\t\t0.9568627450980393,\n\t\t\t0.7490196078431373,\n\t\t\t0.8274509803921568,\n\t\t\t0.9019607843137255,\n\t\t\t0.6196078431372549,\n\t\t\t0.7372549019607844,\n\t\t\t0.8549019607843137,\n\t\t\t0.5490196078431373,\n\t\t\t0.5882352941176471,\n\t\t\t0.7764705882352941,\n\t\t\t0.5490196078431373,\n\t\t\t0.4196078431372549,\n\t\t\t0.6941176470588235,\n\t\t\t0.5333333333333333,\n\t\t\t0.2549019607843137,\n\t\t\t0.615686274509804,\n\t\t\t0.5058823529411764,\n\t\t\t0.05882352941176471,\n\t\t\t0.4862745098039216,\n\t\t\t0.3019607843137255,\n\t\t\t0,\n\t\t\t0.2941176470588235\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (9)\",\n\t\tNanColor: [\n\t\t\t0.3019607843137255,\n\t\t\t0,\n\t\t\t0.2941176470588235\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9686274509803922,\n\t\t\t0.9882352941176471,\n\t\t\t0.9921568627450981,\n\t\t\t0.8784313725490196,\n\t\t\t0.9254901960784314,\n\t\t\t0.9568627450980393,\n\t\t\t0.7490196078431373,\n\t\t\t0.8274509803921568,\n\t\t\t0.9019607843137255,\n\t\t\t0.6196078431372549,\n\t\t\t0.7372549019607844,\n\t\t\t0.8549019607843137,\n\t\t\t0.5490196078431373,\n\t\t\t0.5882352941176471,\n\t\t\t0.7764705882352941,\n\t\t\t0.5490196078431373,\n\t\t\t0.4196078431372549,\n\t\t\t0.6941176470588235,\n\t\t\t0.5333333333333333,\n\t\t\t0.2549019607843137,\n\t\t\t0.615686274509804,\n\t\t\t0.4313725490196079,\n\t\t\t0.00392156862745098,\n\t\t\t0.4196078431372549\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (8)\",\n\t\tNanColor: [\n\t\t\t0.4313725490196079,\n\t\t\t0.00392156862745098,\n\t\t\t0.4196078431372549\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.7490196078431373,\n\t\t\t0.8274509803921568,\n\t\t\t0.9019607843137255,\n\t\t\t0.6196078431372549,\n\t\t\t0.7372549019607844,\n\t\t\t0.8549019607843137,\n\t\t\t0.5490196078431373,\n\t\t\t0.5882352941176471,\n\t\t\t0.7764705882352941,\n\t\t\t0.5490196078431373,\n\t\t\t0.4196078431372549,\n\t\t\t0.6941176470588235,\n\t\t\t0.5333333333333333,\n\t\t\t0.2549019607843137,\n\t\t\t0.615686274509804,\n\t\t\t0.4313725490196079,\n\t\t\t0.00392156862745098,\n\t\t\t0.4196078431372549\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (7)\",\n\t\tNanColor: [\n\t\t\t0.4313725490196079,\n\t\t\t0.00392156862745098,\n\t\t\t0.4196078431372549\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.7490196078431373,\n\t\t\t0.8274509803921568,\n\t\t\t0.9019607843137255,\n\t\t\t0.6196078431372549,\n\t\t\t0.7372549019607844,\n\t\t\t0.8549019607843137,\n\t\t\t0.5490196078431373,\n\t\t\t0.5882352941176471,\n\t\t\t0.7764705882352941,\n\t\t\t0.5333333333333333,\n\t\t\t0.3372549019607843,\n\t\t\t0.6549019607843137,\n\t\t\t0.5058823529411764,\n\t\t\t0.05882352941176471,\n\t\t\t0.4862745098039216\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (6)\",\n\t\tNanColor: [\n\t\t\t0.5058823529411764,\n\t\t\t0.05882352941176471,\n\t\t\t0.4862745098039216\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.7019607843137254,\n\t\t\t0.803921568627451,\n\t\t\t0.8901960784313725,\n\t\t\t0.5490196078431373,\n\t\t\t0.5882352941176471,\n\t\t\t0.7764705882352941,\n\t\t\t0.5333333333333333,\n\t\t\t0.3372549019607843,\n\t\t\t0.6549019607843137,\n\t\t\t0.5058823529411764,\n\t\t\t0.05882352941176471,\n\t\t\t0.4862745098039216\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (5)\",\n\t\tNanColor: [\n\t\t\t0.5058823529411764,\n\t\t\t0.05882352941176471,\n\t\t\t0.4862745098039216\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.9294117647058824,\n\t\t\t0.9725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.7019607843137254,\n\t\t\t0.803921568627451,\n\t\t\t0.8901960784313725,\n\t\t\t0.5490196078431373,\n\t\t\t0.5882352941176471,\n\t\t\t0.7764705882352941,\n\t\t\t0.5333333333333333,\n\t\t\t0.2549019607843137,\n\t\t\t0.615686274509804\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (4)\",\n\t\tNanColor: [\n\t\t\t0.5333333333333333,\n\t\t\t0.2549019607843137,\n\t\t\t0.615686274509804\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8784313725490196,\n\t\t\t0.9254901960784314,\n\t\t\t0.9568627450980393,\n\t\t\t0.6196078431372549,\n\t\t\t0.7372549019607844,\n\t\t\t0.8549019607843137,\n\t\t\t0.5333333333333333,\n\t\t\t0.3372549019607843,\n\t\t\t0.6549019607843137\n\t\t],\n\t\tName: \"Brewer Sequential Blue-Purple (3)\",\n\t\tNanColor: [\n\t\t\t0.5333333333333333,\n\t\t\t0.3372549019607843,\n\t\t\t0.6549019607843137\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4980392156862745,\n\t\t\t0.788235294117647,\n\t\t\t0.4980392156862745,\n\t\t\t0.7450980392156863,\n\t\t\t0.6823529411764706,\n\t\t\t0.8313725490196079,\n\t\t\t0.9921568627450981,\n\t\t\t0.7529411764705882,\n\t\t\t0.5254901960784314,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.6,\n\t\t\t0.2196078431372549,\n\t\t\t0.4235294117647059,\n\t\t\t0.6901960784313725,\n\t\t\t0.9411764705882353,\n\t\t\t0.00784313725490196,\n\t\t\t0.4980392156862745,\n\t\t\t0.7490196078431373,\n\t\t\t0.3568627450980392,\n\t\t\t0.09019607843137255,\n\t\t\t0.4,\n\t\t\t0.4,\n\t\t\t0.4\n\t\t],\n\t\tName: \"Brewer Qualitative Accent\",\n\t\tNanColor: [\n\t\t\t0.4,\n\t\t\t0.4,\n\t\t\t0.4\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.1058823529411765,\n\t\t\t0.6196078431372549,\n\t\t\t0.4666666666666667,\n\t\t\t0.8509803921568627,\n\t\t\t0.3725490196078431,\n\t\t\t0.00784313725490196,\n\t\t\t0.4588235294117647,\n\t\t\t0.4392156862745098,\n\t\t\t0.7019607843137254,\n\t\t\t0.9058823529411765,\n\t\t\t0.1607843137254902,\n\t\t\t0.5411764705882353,\n\t\t\t0.4,\n\t\t\t0.6509803921568628,\n\t\t\t0.1176470588235294,\n\t\t\t0.9019607843137255,\n\t\t\t0.6705882352941176,\n\t\t\t0.00784313725490196,\n\t\t\t0.6509803921568628,\n\t\t\t0.4627450980392157,\n\t\t\t0.1137254901960784,\n\t\t\t0.4,\n\t\t\t0.4,\n\t\t\t0.4\n\t\t],\n\t\tName: \"Brewer Qualitative Dark2\",\n\t\tNanColor: [\n\t\t\t0.4,\n\t\t\t0.4,\n\t\t\t0.4\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4,\n\t\t\t0.7607843137254902,\n\t\t\t0.6470588235294118,\n\t\t\t0.9882352941176471,\n\t\t\t0.5529411764705883,\n\t\t\t0.3843137254901961,\n\t\t\t0.5529411764705883,\n\t\t\t0.6274509803921569,\n\t\t\t0.796078431372549,\n\t\t\t0.9058823529411765,\n\t\t\t0.5411764705882353,\n\t\t\t0.7647058823529411,\n\t\t\t0.6509803921568628,\n\t\t\t0.8470588235294118,\n\t\t\t0.3294117647058823,\n\t\t\t1,\n\t\t\t0.8509803921568627,\n\t\t\t0.1843137254901961,\n\t\t\t0.8980392156862745,\n\t\t\t0.7686274509803922,\n\t\t\t0.5803921568627451,\n\t\t\t0.7019607843137254,\n\t\t\t0.7019607843137254,\n\t\t\t0.7019607843137254\n\t\t],\n\t\tName: \"Brewer Qualitative Set2\",\n\t\tNanColor: [\n\t\t\t0.7019607843137254,\n\t\t\t0.7019607843137254,\n\t\t\t0.7019607843137254\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.7019607843137254,\n\t\t\t0.8862745098039215,\n\t\t\t0.803921568627451,\n\t\t\t0.9921568627450981,\n\t\t\t0.803921568627451,\n\t\t\t0.6745098039215687,\n\t\t\t0.796078431372549,\n\t\t\t0.8352941176470589,\n\t\t\t0.9098039215686274,\n\t\t\t0.9568627450980393,\n\t\t\t0.792156862745098,\n\t\t\t0.8941176470588236,\n\t\t\t0.9019607843137255,\n\t\t\t0.9607843137254902,\n\t\t\t0.788235294117647,\n\t\t\t1,\n\t\t\t0.9490196078431372,\n\t\t\t0.6823529411764706,\n\t\t\t0.9450980392156862,\n\t\t\t0.8862745098039215,\n\t\t\t0.8,\n\t\t\t0.8,\n\t\t\t0.8,\n\t\t\t0.8\n\t\t],\n\t\tName: \"Brewer Qualitative Pastel2\",\n\t\tNanColor: [\n\t\t\t0.8,\n\t\t\t0.8,\n\t\t\t0.8\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.984313725490196,\n\t\t\t0.7058823529411765,\n\t\t\t0.6823529411764706,\n\t\t\t0.7019607843137254,\n\t\t\t0.803921568627451,\n\t\t\t0.8901960784313725,\n\t\t\t0.8,\n\t\t\t0.9215686274509803,\n\t\t\t0.7725490196078432,\n\t\t\t0.8705882352941177,\n\t\t\t0.796078431372549,\n\t\t\t0.8941176470588236,\n\t\t\t0.996078431372549,\n\t\t\t0.8509803921568627,\n\t\t\t0.6509803921568628,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8,\n\t\t\t0.8980392156862745,\n\t\t\t0.8470588235294118,\n\t\t\t0.7411764705882353,\n\t\t\t0.9921568627450981,\n\t\t\t0.8549019607843137,\n\t\t\t0.9254901960784314,\n\t\t\t0.9490196078431372,\n\t\t\t0.9490196078431372,\n\t\t\t0.9490196078431372\n\t\t],\n\t\tName: \"Brewer Qualitative Pastel1\",\n\t\tNanColor: [\n\t\t\t0.9490196078431372,\n\t\t\t0.9490196078431372,\n\t\t\t0.9490196078431372\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.8941176470588236,\n\t\t\t0.1019607843137255,\n\t\t\t0.1098039215686274,\n\t\t\t0.2156862745098039,\n\t\t\t0.4941176470588236,\n\t\t\t0.7215686274509804,\n\t\t\t0.3019607843137255,\n\t\t\t0.6862745098039216,\n\t\t\t0.2901960784313726,\n\t\t\t0.596078431372549,\n\t\t\t0.3058823529411765,\n\t\t\t0.6392156862745098,\n\t\t\t1,\n\t\t\t0.4980392156862745,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.2,\n\t\t\t0.6509803921568628,\n\t\t\t0.3372549019607843,\n\t\t\t0.1568627450980392,\n\t\t\t0.9686274509803922,\n\t\t\t0.5058823529411764,\n\t\t\t0.7490196078431373,\n\t\t\t0.6,\n\t\t\t0.6,\n\t\t\t0.6\n\t\t],\n\t\tName: \"Brewer Qualitative Set1\",\n\t\tNanColor: [\n\t\t\t0.6,\n\t\t\t0.6,\n\t\t\t0.6\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.6509803921568628,\n\t\t\t0.807843137254902,\n\t\t\t0.8901960784313725,\n\t\t\t0.1215686274509804,\n\t\t\t0.4705882352941176,\n\t\t\t0.7058823529411765,\n\t\t\t0.6980392156862745,\n\t\t\t0.8745098039215686,\n\t\t\t0.5411764705882353,\n\t\t\t0.2,\n\t\t\t0.6274509803921569,\n\t\t\t0.1725490196078431,\n\t\t\t0.984313725490196,\n\t\t\t0.6039215686274509,\n\t\t\t0.6,\n\t\t\t0.8901960784313725,\n\t\t\t0.1019607843137255,\n\t\t\t0.1098039215686274,\n\t\t\t0.9921568627450981,\n\t\t\t0.7490196078431373,\n\t\t\t0.4352941176470588,\n\t\t\t1,\n\t\t\t0.4980392156862745,\n\t\t\t0,\n\t\t\t0.792156862745098,\n\t\t\t0.6980392156862745,\n\t\t\t0.8392156862745098,\n\t\t\t0.4156862745098039,\n\t\t\t0.2392156862745098,\n\t\t\t0.6039215686274509,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.6\n\t\t],\n\t\tName: \"Brewer Qualitative Paired\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.6\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.5529411764705883,\n\t\t\t0.8274509803921568,\n\t\t\t0.7803921568627451,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7019607843137254,\n\t\t\t0.7450980392156863,\n\t\t\t0.7294117647058823,\n\t\t\t0.8549019607843137,\n\t\t\t0.984313725490196,\n\t\t\t0.5019607843137255,\n\t\t\t0.4470588235294118,\n\t\t\t0.5019607843137255,\n\t\t\t0.6941176470588235,\n\t\t\t0.8274509803921568,\n\t\t\t0.9921568627450981,\n\t\t\t0.7058823529411765,\n\t\t\t0.3843137254901961,\n\t\t\t0.7019607843137254,\n\t\t\t0.8705882352941177,\n\t\t\t0.4117647058823529,\n\t\t\t0.9882352941176471,\n\t\t\t0.803921568627451,\n\t\t\t0.8980392156862745,\n\t\t\t0.8509803921568627,\n\t\t\t0.8509803921568627,\n\t\t\t0.8509803921568627,\n\t\t\t0.7372549019607844,\n\t\t\t0.5019607843137255,\n\t\t\t0.7411764705882353,\n\t\t\t0.8,\n\t\t\t0.9215686274509803,\n\t\t\t0.7725490196078432,\n\t\t\t1,\n\t\t\t0.9294117647058824,\n\t\t\t0.4352941176470588\n\t\t],\n\t\tName: \"Brewer Qualitative Set3\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0.9294117647058824,\n\t\t\t0.4352941176470588\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t1,\n\t\t\t0,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.862745,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.695201,\n\t\t\t0\n\t\t],\n\t\tName: \"Traffic Lights\",\n\t\tNanColor: [\n\t\t\t0.803922,\n\t\t\t0,\n\t\t\t0.803922\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.908659,\n\t\t\t0.604013,\n\t\t\t0.581857,\n\t\t\t1,\n\t\t\t0.862745,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0.695201,\n\t\t\t0\n\t\t],\n\t\tName: \"Traffic Lights For Deuteranopes\",\n\t\tNanColor: [\n\t\t\t0.803922,\n\t\t\t0,\n\t\t\t0.803922\n\t\t]\n\t},\n\t{\n\t\tIndexedColors: [\n\t\t\t0.4196078431372549,\n\t\t\t0,\n\t\t\t0.07058823529411765,\n\t\t\t0.9019607843137255,\n\t\t\t0.9411764705882353,\n\t\t\t0.0196078431372549,\n\t\t\t0.01568627450980392,\n\t\t\t0.6196078431372549,\n\t\t\t0.00784313725490196\n\t\t],\n\t\tName: \"Traffic Lights For Deuteranopes 2\",\n\t\tNanColor: [\n\t\t\t0.803922,\n\t\t\t0,\n\t\t\t0.803922\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Muted Blue-Green\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.109804,\n\t\t\t0.27451,\n\t\t\t0.301961,\n\t\t\t0.02,\n\t\t\t0.129412,\n\t\t\t0.309804,\n\t\t\t0.341176,\n\t\t\t0.05,\n\t\t\t0.14902,\n\t\t\t0.341176,\n\t\t\t0.380392,\n\t\t\t0.1,\n\t\t\t0.188235,\n\t\t\t0.403922,\n\t\t\t0.458824,\n\t\t\t0.15,\n\t\t\t0.227451,\n\t\t\t0.447059,\n\t\t\t0.521569,\n\t\t\t0.2,\n\t\t\t0.290196,\n\t\t\t0.494118,\n\t\t\t0.588235,\n\t\t\t0.25,\n\t\t\t0.368627,\n\t\t\t0.552941,\n\t\t\t0.670588,\n\t\t\t0.3,\n\t\t\t0.458824,\n\t\t\t0.619608,\n\t\t\t0.74902,\n\t\t\t0.35,\n\t\t\t0.588235,\n\t\t\t0.713725,\n\t\t\t0.85098,\n\t\t\t0.4,\n\t\t\t0.72549,\n\t\t\t0.815686,\n\t\t\t0.941176,\n\t\t\t0.45,\n\t\t\t0.831373,\n\t\t\t0.882353,\n\t\t\t0.980392,\n\t\t\t0.475,\n\t\t\t0.909804,\n\t\t\t0.933333,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0.980392,\n\t\t\t0.984314,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0.996078,\n\t\t\t1,\n\t\t\t0.94902,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.980392,\n\t\t\t0.5,\n\t\t\t0.980392,\n\t\t\t0.984314,\n\t\t\t1,\n\t\t\t0.525,\n\t\t\t0.972549,\n\t\t\t0.988235,\n\t\t\t0.890196,\n\t\t\t0.55,\n\t\t\t0.917647,\n\t\t\t0.960784,\n\t\t\t0.835294,\n\t\t\t0.6,\n\t\t\t0.835294,\n\t\t\t0.921569,\n\t\t\t0.772549,\n\t\t\t0.65,\n\t\t\t0.768627,\n\t\t\t0.901961,\n\t\t\t0.737255,\n\t\t\t0.7,\n\t\t\t0.670588,\n\t\t\t0.831373,\n\t\t\t0.654902,\n\t\t\t0.75,\n\t\t\t0.576471,\n\t\t\t0.760784,\n\t\t\t0.584314,\n\t\t\t0.8,\n\t\t\t0.498039,\n\t\t\t0.678431,\n\t\t\t0.521569,\n\t\t\t0.85,\n\t\t\t0.392157,\n\t\t\t0.560784,\n\t\t\t0.427451,\n\t\t\t0.9,\n\t\t\t0.294118,\n\t\t\t0.45098,\n\t\t\t0.333333,\n\t\t\t0.95,\n\t\t\t0.211765,\n\t\t\t0.34902,\n\t\t\t0.254902,\n\t\t\t1,\n\t\t\t0.152941,\n\t\t\t0.278431,\n\t\t\t0.196078\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Green-Blue Asymmetric Divergent (62Blbc)\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.121569,\n\t\t\t0.2,\n\t\t\t0.145098,\n\t\t\t0.05,\n\t\t\t0.196078,\n\t\t\t0.301961,\n\t\t\t0.223529,\n\t\t\t0.1,\n\t\t\t0.258824,\n\t\t\t0.4,\n\t\t\t0.278431,\n\t\t\t0.2,\n\t\t\t0.341176,\n\t\t\t0.54902,\n\t\t\t0.341176,\n\t\t\t0.25,\n\t\t\t0.419608,\n\t\t\t0.619608,\n\t\t\t0.376471,\n\t\t\t0.3,\n\t\t\t0.545098,\n\t\t\t0.701961,\n\t\t\t0.392157,\n\t\t\t0.35,\n\t\t\t0.643137,\n\t\t\t0.780392,\n\t\t\t0.403922,\n\t\t\t0.4,\n\t\t\t0.729412,\n\t\t\t0.819608,\n\t\t\t0.45098,\n\t\t\t0.45,\n\t\t\t0.811765,\n\t\t\t0.870588,\n\t\t\t0.521569,\n\t\t\t0.5,\n\t\t\t0.898039,\n\t\t\t0.909804,\n\t\t\t0.564706,\n\t\t\t0.55,\n\t\t\t0.941176,\n\t\t\t0.92549,\n\t\t\t0.686275,\n\t\t\t0.6,\n\t\t\t0.960784,\n\t\t\t0.94902,\n\t\t\t0.776471,\n\t\t\t0.64,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.65,\n\t\t\t0.890196,\n\t\t\t0.988235,\n\t\t\t0.972549,\n\t\t\t0.7,\n\t\t\t0.721569,\n\t\t\t0.894118,\n\t\t\t0.901961,\n\t\t\t0.75,\n\t\t\t0.631373,\n\t\t\t0.823529,\n\t\t\t0.839216,\n\t\t\t0.8,\n\t\t\t0.517647,\n\t\t\t0.662745,\n\t\t\t0.701961,\n\t\t\t0.85,\n\t\t\t0.384314,\n\t\t\t0.494118,\n\t\t\t0.54902,\n\t\t\t0.9,\n\t\t\t0.298039,\n\t\t\t0.360784,\n\t\t\t0.45098,\n\t\t\t0.95,\n\t\t\t0.223529,\n\t\t\t0.25098,\n\t\t\t0.34902,\n\t\t\t0.99,\n\t\t\t0.156863,\n\t\t\t0.172549,\n\t\t\t0.25098,\n\t\t\t1,\n\t\t\t0.137255,\n\t\t\t0.137255,\n\t\t\t0.188235\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Asymmtrical Earth Tones (6_21b)\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.141176,\n\t\t\t0.14902,\n\t\t\t0.2,\n\t\t\t0.05,\n\t\t\t0.215686,\n\t\t\t0.258824,\n\t\t\t0.321569,\n\t\t\t0.1,\n\t\t\t0.243137,\n\t\t\t0.368627,\n\t\t\t0.380392,\n\t\t\t0.15,\n\t\t\t0.27451,\n\t\t\t0.439216,\n\t\t\t0.4,\n\t\t\t0.2,\n\t\t\t0.32549,\n\t\t\t0.501961,\n\t\t\t0.384314,\n\t\t\t0.25,\n\t\t\t0.403922,\n\t\t\t0.6,\n\t\t\t0.419608,\n\t\t\t0.3,\n\t\t\t0.486275,\n\t\t\t0.701961,\n\t\t\t0.454902,\n\t\t\t0.35,\n\t\t\t0.556863,\n\t\t\t0.74902,\n\t\t\t0.494118,\n\t\t\t0.4,\n\t\t\t0.670588,\n\t\t\t0.8,\n\t\t\t0.545098,\n\t\t\t0.5,\n\t\t\t0.854902,\n\t\t\t0.901961,\n\t\t\t0.631373,\n\t\t\t0.55,\n\t\t\t0.92549,\n\t\t\t0.941176,\n\t\t\t0.694118,\n\t\t\t0.6,\n\t\t\t0.960784,\n\t\t\t0.94902,\n\t\t\t0.776471,\n\t\t\t0.65,\n\t\t\t0.988235,\n\t\t\t0.968627,\n\t\t\t0.909804,\n\t\t\t0.7,\n\t\t\t0.839216,\n\t\t\t0.815686,\n\t\t\t0.772549,\n\t\t\t0.75,\n\t\t\t0.701961,\n\t\t\t0.662745,\n\t\t\t0.615686,\n\t\t\t0.8,\n\t\t\t0.6,\n\t\t\t0.529412,\n\t\t\t0.478431,\n\t\t\t0.85,\n\t\t\t0.501961,\n\t\t\t0.403922,\n\t\t\t0.360784,\n\t\t\t0.9,\n\t\t\t0.439216,\n\t\t\t0.313725,\n\t\t\t0.290196,\n\t\t\t1,\n\t\t\t0.301961,\n\t\t\t0.164706,\n\t\t\t0.176471\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Lab\",\n\t\tCreator: \"Francesca Samsel\",\n\t\tName: \"Yellow 15\",\n\t\tNanColor: [\n\t\t\t0.25,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.988235,\n\t\t\t0.002,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.988235,\n\t\t\t0.05,\n\t\t\t0.984314,\n\t\t\t0.988235,\n\t\t\t0.843137,\n\t\t\t0.1,\n\t\t\t0.988235,\n\t\t\t0.988235,\n\t\t\t0.741176,\n\t\t\t0.15,\n\t\t\t0.980392,\n\t\t\t0.968627,\n\t\t\t0.654902,\n\t\t\t0.2,\n\t\t\t0.980392,\n\t\t\t0.945098,\n\t\t\t0.576471,\n\t\t\t0.25,\n\t\t\t0.968627,\n\t\t\t0.905882,\n\t\t\t0.486275,\n\t\t\t0.3,\n\t\t\t0.968627,\n\t\t\t0.862745,\n\t\t\t0.388235,\n\t\t\t0.35,\n\t\t\t0.960784,\n\t\t\t0.803922,\n\t\t\t0.286275,\n\t\t\t0.4,\n\t\t\t0.94902,\n\t\t\t0.741176,\n\t\t\t0.219608,\n\t\t\t0.45,\n\t\t\t0.941176,\n\t\t\t0.678431,\n\t\t\t0.14902,\n\t\t\t0.5,\n\t\t\t0.929412,\n\t\t\t0.607843,\n\t\t\t0.094118,\n\t\t\t0.55,\n\t\t\t0.921569,\n\t\t\t0.545098,\n\t\t\t0.054902,\n\t\t\t0.6,\n\t\t\t0.909804,\n\t\t\t0.486275,\n\t\t\t0.035294,\n\t\t\t0.65,\n\t\t\t0.890196,\n\t\t\t0.411765,\n\t\t\t0.019608,\n\t\t\t0.7,\n\t\t\t0.8,\n\t\t\t0.305882,\n\t\t\t0,\n\t\t\t0.75,\n\t\t\t0.760784,\n\t\t\t0.239216,\n\t\t\t0,\n\t\t\t0.8,\n\t\t\t0.678431,\n\t\t\t0.180392,\n\t\t\t0.011765,\n\t\t\t0.85,\n\t\t\t0.6,\n\t\t\t0.121569,\n\t\t\t0.023529,\n\t\t\t0.9,\n\t\t\t0.501961,\n\t\t\t0.054902,\n\t\t\t0.031373,\n\t\t\t0.95,\n\t\t\t0.4,\n\t\t\t0.039216,\n\t\t\t0.058824,\n\t\t\t1,\n\t\t\t0.301961,\n\t\t\t0.047059,\n\t\t\t0.090196\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Diverging\",\n\t\tName: \"Magma (matplotlib)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tSource: \"https://github.com/BIDS/colormap/blob/master/colormaps.py\",\n\t\tLicense: \"CC0\",\n\t\tCreator: \"Nathaniel J. Smith & Stefan van der Walt\",\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.001462,\n\t\t\t0.000466,\n\t\t\t0.013866,\n\t\t\t0.003922,\n\t\t\t0.002258,\n\t\t\t0.001295,\n\t\t\t0.018331,\n\t\t\t0.007843,\n\t\t\t0.003279,\n\t\t\t0.002305,\n\t\t\t0.023708,\n\t\t\t0.011765,\n\t\t\t0.004512,\n\t\t\t0.00349,\n\t\t\t0.029965,\n\t\t\t0.015686,\n\t\t\t0.00595,\n\t\t\t0.004843,\n\t\t\t0.03713,\n\t\t\t0.019608,\n\t\t\t0.007588,\n\t\t\t0.006356,\n\t\t\t0.044973,\n\t\t\t0.023529,\n\t\t\t0.009426,\n\t\t\t0.008022,\n\t\t\t0.052844,\n\t\t\t0.027451,\n\t\t\t0.011465,\n\t\t\t0.009828,\n\t\t\t0.06075,\n\t\t\t0.031373,\n\t\t\t0.013708,\n\t\t\t0.011771,\n\t\t\t0.068667,\n\t\t\t0.035294,\n\t\t\t0.016156,\n\t\t\t0.01384,\n\t\t\t0.076603,\n\t\t\t0.039216,\n\t\t\t0.018815,\n\t\t\t0.016026,\n\t\t\t0.084584,\n\t\t\t0.043137,\n\t\t\t0.021692,\n\t\t\t0.01832,\n\t\t\t0.09261,\n\t\t\t0.047059,\n\t\t\t0.024792,\n\t\t\t0.020715,\n\t\t\t0.100676,\n\t\t\t0.05098,\n\t\t\t0.028123,\n\t\t\t0.023201,\n\t\t\t0.108787,\n\t\t\t0.054902,\n\t\t\t0.031696,\n\t\t\t0.025765,\n\t\t\t0.116965,\n\t\t\t0.058824,\n\t\t\t0.03552,\n\t\t\t0.028397,\n\t\t\t0.125209,\n\t\t\t0.062745,\n\t\t\t0.039608,\n\t\t\t0.03109,\n\t\t\t0.133515,\n\t\t\t0.066667,\n\t\t\t0.04383,\n\t\t\t0.03383,\n\t\t\t0.141886,\n\t\t\t0.070588,\n\t\t\t0.048062,\n\t\t\t0.036607,\n\t\t\t0.150327,\n\t\t\t0.07451,\n\t\t\t0.05232,\n\t\t\t0.039407,\n\t\t\t0.158841,\n\t\t\t0.078431,\n\t\t\t0.056615,\n\t\t\t0.04216,\n\t\t\t0.167446,\n\t\t\t0.082353,\n\t\t\t0.060949,\n\t\t\t0.044794,\n\t\t\t0.176129,\n\t\t\t0.086275,\n\t\t\t0.06533,\n\t\t\t0.047318,\n\t\t\t0.184892,\n\t\t\t0.090196,\n\t\t\t0.069764,\n\t\t\t0.049726,\n\t\t\t0.193735,\n\t\t\t0.094118,\n\t\t\t0.074257,\n\t\t\t0.052017,\n\t\t\t0.20266,\n\t\t\t0.098039,\n\t\t\t0.078815,\n\t\t\t0.054184,\n\t\t\t0.211667,\n\t\t\t0.101961,\n\t\t\t0.083446,\n\t\t\t0.056225,\n\t\t\t0.220755,\n\t\t\t0.105882,\n\t\t\t0.088155,\n\t\t\t0.058133,\n\t\t\t0.229922,\n\t\t\t0.109804,\n\t\t\t0.092949,\n\t\t\t0.059904,\n\t\t\t0.239164,\n\t\t\t0.113725,\n\t\t\t0.097833,\n\t\t\t0.061531,\n\t\t\t0.248477,\n\t\t\t0.117647,\n\t\t\t0.102815,\n\t\t\t0.06301,\n\t\t\t0.257854,\n\t\t\t0.121569,\n\t\t\t0.107899,\n\t\t\t0.064335,\n\t\t\t0.267289,\n\t\t\t0.12549,\n\t\t\t0.113094,\n\t\t\t0.065492,\n\t\t\t0.276784,\n\t\t\t0.129412,\n\t\t\t0.118405,\n\t\t\t0.066479,\n\t\t\t0.286321,\n\t\t\t0.133333,\n\t\t\t0.123833,\n\t\t\t0.067295,\n\t\t\t0.295879,\n\t\t\t0.137255,\n\t\t\t0.12938,\n\t\t\t0.067935,\n\t\t\t0.305443,\n\t\t\t0.141176,\n\t\t\t0.135053,\n\t\t\t0.068391,\n\t\t\t0.315,\n\t\t\t0.145098,\n\t\t\t0.140858,\n\t\t\t0.068654,\n\t\t\t0.324538,\n\t\t\t0.14902,\n\t\t\t0.146785,\n\t\t\t0.068738,\n\t\t\t0.334011,\n\t\t\t0.152941,\n\t\t\t0.152839,\n\t\t\t0.068637,\n\t\t\t0.343404,\n\t\t\t0.156863,\n\t\t\t0.159018,\n\t\t\t0.068354,\n\t\t\t0.352688,\n\t\t\t0.160784,\n\t\t\t0.165308,\n\t\t\t0.067911,\n\t\t\t0.361816,\n\t\t\t0.164706,\n\t\t\t0.171713,\n\t\t\t0.067305,\n\t\t\t0.370771,\n\t\t\t0.168627,\n\t\t\t0.178212,\n\t\t\t0.066576,\n\t\t\t0.379497,\n\t\t\t0.172549,\n\t\t\t0.184801,\n\t\t\t0.065732,\n\t\t\t0.387973,\n\t\t\t0.176471,\n\t\t\t0.19146,\n\t\t\t0.064818,\n\t\t\t0.396152,\n\t\t\t0.180392,\n\t\t\t0.198177,\n\t\t\t0.063862,\n\t\t\t0.404009,\n\t\t\t0.184314,\n\t\t\t0.204935,\n\t\t\t0.062907,\n\t\t\t0.411514,\n\t\t\t0.188235,\n\t\t\t0.211718,\n\t\t\t0.061992,\n\t\t\t0.418647,\n\t\t\t0.192157,\n\t\t\t0.218512,\n\t\t\t0.061158,\n\t\t\t0.425392,\n\t\t\t0.196078,\n\t\t\t0.225302,\n\t\t\t0.060445,\n\t\t\t0.431742,\n\t\t\t0.2,\n\t\t\t0.232077,\n\t\t\t0.059889,\n\t\t\t0.437695,\n\t\t\t0.203922,\n\t\t\t0.238826,\n\t\t\t0.059517,\n\t\t\t0.443256,\n\t\t\t0.207843,\n\t\t\t0.245543,\n\t\t\t0.059352,\n\t\t\t0.448436,\n\t\t\t0.211765,\n\t\t\t0.25222,\n\t\t\t0.059415,\n\t\t\t0.453248,\n\t\t\t0.215686,\n\t\t\t0.258857,\n\t\t\t0.059706,\n\t\t\t0.45771,\n\t\t\t0.219608,\n\t\t\t0.265447,\n\t\t\t0.060237,\n\t\t\t0.46184,\n\t\t\t0.223529,\n\t\t\t0.271994,\n\t\t\t0.060994,\n\t\t\t0.46566,\n\t\t\t0.227451,\n\t\t\t0.278493,\n\t\t\t0.061978,\n\t\t\t0.46919,\n\t\t\t0.231373,\n\t\t\t0.284951,\n\t\t\t0.063168,\n\t\t\t0.472451,\n\t\t\t0.235294,\n\t\t\t0.291366,\n\t\t\t0.064553,\n\t\t\t0.475462,\n\t\t\t0.239216,\n\t\t\t0.29774,\n\t\t\t0.066117,\n\t\t\t0.478243,\n\t\t\t0.243137,\n\t\t\t0.304081,\n\t\t\t0.067835,\n\t\t\t0.480812,\n\t\t\t0.247059,\n\t\t\t0.310382,\n\t\t\t0.069702,\n\t\t\t0.483186,\n\t\t\t0.25098,\n\t\t\t0.316654,\n\t\t\t0.07169,\n\t\t\t0.48538,\n\t\t\t0.254902,\n\t\t\t0.322899,\n\t\t\t0.073782,\n\t\t\t0.487408,\n\t\t\t0.258824,\n\t\t\t0.329114,\n\t\t\t0.075972,\n\t\t\t0.489287,\n\t\t\t0.262745,\n\t\t\t0.335308,\n\t\t\t0.078236,\n\t\t\t0.491024,\n\t\t\t0.266667,\n\t\t\t0.341482,\n\t\t\t0.080564,\n\t\t\t0.492631,\n\t\t\t0.270588,\n\t\t\t0.347636,\n\t\t\t0.082946,\n\t\t\t0.494121,\n\t\t\t0.27451,\n\t\t\t0.353773,\n\t\t\t0.085373,\n\t\t\t0.495501,\n\t\t\t0.278431,\n\t\t\t0.359898,\n\t\t\t0.087831,\n\t\t\t0.496778,\n\t\t\t0.282353,\n\t\t\t0.366012,\n\t\t\t0.090314,\n\t\t\t0.49796,\n\t\t\t0.286275,\n\t\t\t0.372116,\n\t\t\t0.092816,\n\t\t\t0.499053,\n\t\t\t0.290196,\n\t\t\t0.378211,\n\t\t\t0.095332,\n\t\t\t0.500067,\n\t\t\t0.294118,\n\t\t\t0.384299,\n\t\t\t0.097855,\n\t\t\t0.501002,\n\t\t\t0.298039,\n\t\t\t0.390384,\n\t\t\t0.100379,\n\t\t\t0.501864,\n\t\t\t0.301961,\n\t\t\t0.396467,\n\t\t\t0.102902,\n\t\t\t0.502658,\n\t\t\t0.305882,\n\t\t\t0.402548,\n\t\t\t0.10542,\n\t\t\t0.503386,\n\t\t\t0.309804,\n\t\t\t0.408629,\n\t\t\t0.10793,\n\t\t\t0.504052,\n\t\t\t0.313725,\n\t\t\t0.414709,\n\t\t\t0.110431,\n\t\t\t0.504662,\n\t\t\t0.317647,\n\t\t\t0.420791,\n\t\t\t0.11292,\n\t\t\t0.505215,\n\t\t\t0.321569,\n\t\t\t0.426877,\n\t\t\t0.115395,\n\t\t\t0.505714,\n\t\t\t0.32549,\n\t\t\t0.432967,\n\t\t\t0.117855,\n\t\t\t0.50616,\n\t\t\t0.329412,\n\t\t\t0.439062,\n\t\t\t0.120298,\n\t\t\t0.506555,\n\t\t\t0.333333,\n\t\t\t0.445163,\n\t\t\t0.122724,\n\t\t\t0.506901,\n\t\t\t0.337255,\n\t\t\t0.451271,\n\t\t\t0.125132,\n\t\t\t0.507198,\n\t\t\t0.341176,\n\t\t\t0.457386,\n\t\t\t0.127522,\n\t\t\t0.507448,\n\t\t\t0.345098,\n\t\t\t0.463508,\n\t\t\t0.129893,\n\t\t\t0.507652,\n\t\t\t0.34902,\n\t\t\t0.46964,\n\t\t\t0.132245,\n\t\t\t0.507809,\n\t\t\t0.352941,\n\t\t\t0.47578,\n\t\t\t0.134577,\n\t\t\t0.507921,\n\t\t\t0.356863,\n\t\t\t0.481929,\n\t\t\t0.136891,\n\t\t\t0.507989,\n\t\t\t0.360784,\n\t\t\t0.488088,\n\t\t\t0.139186,\n\t\t\t0.508011,\n\t\t\t0.364706,\n\t\t\t0.494258,\n\t\t\t0.141462,\n\t\t\t0.507988,\n\t\t\t0.368627,\n\t\t\t0.500438,\n\t\t\t0.143719,\n\t\t\t0.50792,\n\t\t\t0.372549,\n\t\t\t0.506629,\n\t\t\t0.145958,\n\t\t\t0.507806,\n\t\t\t0.376471,\n\t\t\t0.512831,\n\t\t\t0.148179,\n\t\t\t0.507648,\n\t\t\t0.380392,\n\t\t\t0.519045,\n\t\t\t0.150383,\n\t\t\t0.507443,\n\t\t\t0.384314,\n\t\t\t0.52527,\n\t\t\t0.152569,\n\t\t\t0.507192,\n\t\t\t0.388235,\n\t\t\t0.531507,\n\t\t\t0.154739,\n\t\t\t0.506895,\n\t\t\t0.392157,\n\t\t\t0.537755,\n\t\t\t0.156894,\n\t\t\t0.506551,\n\t\t\t0.396078,\n\t\t\t0.544015,\n\t\t\t0.159033,\n\t\t\t0.506159,\n\t\t\t0.4,\n\t\t\t0.550287,\n\t\t\t0.161158,\n\t\t\t0.505719,\n\t\t\t0.403922,\n\t\t\t0.556571,\n\t\t\t0.163269,\n\t\t\t0.50523,\n\t\t\t0.407843,\n\t\t\t0.562866,\n\t\t\t0.165368,\n\t\t\t0.504692,\n\t\t\t0.411765,\n\t\t\t0.569172,\n\t\t\t0.167454,\n\t\t\t0.504105,\n\t\t\t0.415686,\n\t\t\t0.57549,\n\t\t\t0.16953,\n\t\t\t0.503466,\n\t\t\t0.419608,\n\t\t\t0.581819,\n\t\t\t0.171596,\n\t\t\t0.502777,\n\t\t\t0.423529,\n\t\t\t0.588158,\n\t\t\t0.173652,\n\t\t\t0.502035,\n\t\t\t0.427451,\n\t\t\t0.594508,\n\t\t\t0.175701,\n\t\t\t0.501241,\n\t\t\t0.431373,\n\t\t\t0.600868,\n\t\t\t0.177743,\n\t\t\t0.500394,\n\t\t\t0.435294,\n\t\t\t0.607238,\n\t\t\t0.179779,\n\t\t\t0.499492,\n\t\t\t0.439216,\n\t\t\t0.613617,\n\t\t\t0.181811,\n\t\t\t0.498536,\n\t\t\t0.443137,\n\t\t\t0.620005,\n\t\t\t0.18384,\n\t\t\t0.497524,\n\t\t\t0.447059,\n\t\t\t0.626401,\n\t\t\t0.185867,\n\t\t\t0.496456,\n\t\t\t0.45098,\n\t\t\t0.632805,\n\t\t\t0.187893,\n\t\t\t0.495332,\n\t\t\t0.454902,\n\t\t\t0.639216,\n\t\t\t0.189921,\n\t\t\t0.49415,\n\t\t\t0.458824,\n\t\t\t0.645633,\n\t\t\t0.191952,\n\t\t\t0.49291,\n\t\t\t0.462745,\n\t\t\t0.652056,\n\t\t\t0.193986,\n\t\t\t0.491611,\n\t\t\t0.466667,\n\t\t\t0.658483,\n\t\t\t0.196027,\n\t\t\t0.490253,\n\t\t\t0.470588,\n\t\t\t0.664915,\n\t\t\t0.198075,\n\t\t\t0.488836,\n\t\t\t0.47451,\n\t\t\t0.671349,\n\t\t\t0.200133,\n\t\t\t0.487358,\n\t\t\t0.478431,\n\t\t\t0.677786,\n\t\t\t0.202203,\n\t\t\t0.485819,\n\t\t\t0.482353,\n\t\t\t0.684224,\n\t\t\t0.204286,\n\t\t\t0.484219,\n\t\t\t0.486275,\n\t\t\t0.690661,\n\t\t\t0.206384,\n\t\t\t0.482558,\n\t\t\t0.490196,\n\t\t\t0.697098,\n\t\t\t0.208501,\n\t\t\t0.480835,\n\t\t\t0.494118,\n\t\t\t0.703532,\n\t\t\t0.210638,\n\t\t\t0.479049,\n\t\t\t0.498039,\n\t\t\t0.709962,\n\t\t\t0.212797,\n\t\t\t0.477201,\n\t\t\t0.501961,\n\t\t\t0.716387,\n\t\t\t0.214982,\n\t\t\t0.47529,\n\t\t\t0.505882,\n\t\t\t0.722805,\n\t\t\t0.217194,\n\t\t\t0.473316,\n\t\t\t0.509804,\n\t\t\t0.729216,\n\t\t\t0.219437,\n\t\t\t0.471279,\n\t\t\t0.513725,\n\t\t\t0.735616,\n\t\t\t0.221713,\n\t\t\t0.46918,\n\t\t\t0.517647,\n\t\t\t0.742004,\n\t\t\t0.224025,\n\t\t\t0.467018,\n\t\t\t0.521569,\n\t\t\t0.748378,\n\t\t\t0.226377,\n\t\t\t0.464794,\n\t\t\t0.52549,\n\t\t\t0.754737,\n\t\t\t0.228772,\n\t\t\t0.462509,\n\t\t\t0.529412,\n\t\t\t0.761077,\n\t\t\t0.231214,\n\t\t\t0.460162,\n\t\t\t0.533333,\n\t\t\t0.767398,\n\t\t\t0.233705,\n\t\t\t0.457755,\n\t\t\t0.537255,\n\t\t\t0.773695,\n\t\t\t0.236249,\n\t\t\t0.455289,\n\t\t\t0.541176,\n\t\t\t0.779968,\n\t\t\t0.238851,\n\t\t\t0.452765,\n\t\t\t0.545098,\n\t\t\t0.786212,\n\t\t\t0.241514,\n\t\t\t0.450184,\n\t\t\t0.54902,\n\t\t\t0.792427,\n\t\t\t0.244242,\n\t\t\t0.447543,\n\t\t\t0.552941,\n\t\t\t0.798608,\n\t\t\t0.24704,\n\t\t\t0.444848,\n\t\t\t0.556863,\n\t\t\t0.804752,\n\t\t\t0.249911,\n\t\t\t0.442102,\n\t\t\t0.560784,\n\t\t\t0.810855,\n\t\t\t0.252861,\n\t\t\t0.439305,\n\t\t\t0.564706,\n\t\t\t0.816914,\n\t\t\t0.255895,\n\t\t\t0.436461,\n\t\t\t0.568627,\n\t\t\t0.822926,\n\t\t\t0.259016,\n\t\t\t0.433573,\n\t\t\t0.572549,\n\t\t\t0.828886,\n\t\t\t0.262229,\n\t\t\t0.430644,\n\t\t\t0.576471,\n\t\t\t0.834791,\n\t\t\t0.26554,\n\t\t\t0.427671,\n\t\t\t0.580392,\n\t\t\t0.840636,\n\t\t\t0.268953,\n\t\t\t0.424666,\n\t\t\t0.584314,\n\t\t\t0.846416,\n\t\t\t0.272473,\n\t\t\t0.421631,\n\t\t\t0.588235,\n\t\t\t0.852126,\n\t\t\t0.276106,\n\t\t\t0.418573,\n\t\t\t0.592157,\n\t\t\t0.857763,\n\t\t\t0.279857,\n\t\t\t0.415496,\n\t\t\t0.596078,\n\t\t\t0.86332,\n\t\t\t0.283729,\n\t\t\t0.412403,\n\t\t\t0.6,\n\t\t\t0.868793,\n\t\t\t0.287728,\n\t\t\t0.409303,\n\t\t\t0.603922,\n\t\t\t0.874176,\n\t\t\t0.291859,\n\t\t\t0.406205,\n\t\t\t0.607843,\n\t\t\t0.879464,\n\t\t\t0.296125,\n\t\t\t0.403118,\n\t\t\t0.611765,\n\t\t\t0.884651,\n\t\t\t0.30053,\n\t\t\t0.400047,\n\t\t\t0.615686,\n\t\t\t0.889731,\n\t\t\t0.305079,\n\t\t\t0.397002,\n\t\t\t0.619608,\n\t\t\t0.8947,\n\t\t\t0.309773,\n\t\t\t0.393995,\n\t\t\t0.623529,\n\t\t\t0.899552,\n\t\t\t0.314616,\n\t\t\t0.391037,\n\t\t\t0.627451,\n\t\t\t0.904281,\n\t\t\t0.31961,\n\t\t\t0.388137,\n\t\t\t0.631373,\n\t\t\t0.908884,\n\t\t\t0.324755,\n\t\t\t0.385308,\n\t\t\t0.635294,\n\t\t\t0.913354,\n\t\t\t0.330052,\n\t\t\t0.382563,\n\t\t\t0.639216,\n\t\t\t0.917689,\n\t\t\t0.3355,\n\t\t\t0.379915,\n\t\t\t0.643137,\n\t\t\t0.921884,\n\t\t\t0.341098,\n\t\t\t0.377376,\n\t\t\t0.647059,\n\t\t\t0.925937,\n\t\t\t0.346844,\n\t\t\t0.374959,\n\t\t\t0.65098,\n\t\t\t0.929845,\n\t\t\t0.352734,\n\t\t\t0.372677,\n\t\t\t0.654902,\n\t\t\t0.933606,\n\t\t\t0.358764,\n\t\t\t0.370541,\n\t\t\t0.658824,\n\t\t\t0.937221,\n\t\t\t0.364929,\n\t\t\t0.368567,\n\t\t\t0.662745,\n\t\t\t0.940687,\n\t\t\t0.371224,\n\t\t\t0.366762,\n\t\t\t0.666667,\n\t\t\t0.944006,\n\t\t\t0.377643,\n\t\t\t0.365136,\n\t\t\t0.670588,\n\t\t\t0.94718,\n\t\t\t0.384178,\n\t\t\t0.363701,\n\t\t\t0.67451,\n\t\t\t0.95021,\n\t\t\t0.39082,\n\t\t\t0.362468,\n\t\t\t0.678431,\n\t\t\t0.953099,\n\t\t\t0.397563,\n\t\t\t0.361438,\n\t\t\t0.682353,\n\t\t\t0.955849,\n\t\t\t0.4044,\n\t\t\t0.360619,\n\t\t\t0.686275,\n\t\t\t0.958464,\n\t\t\t0.411324,\n\t\t\t0.360014,\n\t\t\t0.690196,\n\t\t\t0.960949,\n\t\t\t0.418323,\n\t\t\t0.35963,\n\t\t\t0.694118,\n\t\t\t0.96331,\n\t\t\t0.42539,\n\t\t\t0.359469,\n\t\t\t0.698039,\n\t\t\t0.965549,\n\t\t\t0.432519,\n\t\t\t0.359529,\n\t\t\t0.701961,\n\t\t\t0.967671,\n\t\t\t0.439703,\n\t\t\t0.35981,\n\t\t\t0.705882,\n\t\t\t0.96968,\n\t\t\t0.446936,\n\t\t\t0.360311,\n\t\t\t0.709804,\n\t\t\t0.971582,\n\t\t\t0.45421,\n\t\t\t0.36103,\n\t\t\t0.713725,\n\t\t\t0.973381,\n\t\t\t0.46152,\n\t\t\t0.361965,\n\t\t\t0.717647,\n\t\t\t0.975082,\n\t\t\t0.468861,\n\t\t\t0.363111,\n\t\t\t0.721569,\n\t\t\t0.97669,\n\t\t\t0.476226,\n\t\t\t0.364466,\n\t\t\t0.72549,\n\t\t\t0.97821,\n\t\t\t0.483612,\n\t\t\t0.366025,\n\t\t\t0.729412,\n\t\t\t0.979645,\n\t\t\t0.491014,\n\t\t\t0.367783,\n\t\t\t0.733333,\n\t\t\t0.981,\n\t\t\t0.498428,\n\t\t\t0.369734,\n\t\t\t0.737255,\n\t\t\t0.982279,\n\t\t\t0.505851,\n\t\t\t0.371874,\n\t\t\t0.741176,\n\t\t\t0.983485,\n\t\t\t0.51328,\n\t\t\t0.374198,\n\t\t\t0.745098,\n\t\t\t0.984622,\n\t\t\t0.520713,\n\t\t\t0.376698,\n\t\t\t0.74902,\n\t\t\t0.985693,\n\t\t\t0.528148,\n\t\t\t0.379371,\n\t\t\t0.752941,\n\t\t\t0.9867,\n\t\t\t0.535582,\n\t\t\t0.38221,\n\t\t\t0.756863,\n\t\t\t0.987646,\n\t\t\t0.543015,\n\t\t\t0.38521,\n\t\t\t0.760784,\n\t\t\t0.988533,\n\t\t\t0.550446,\n\t\t\t0.388365,\n\t\t\t0.764706,\n\t\t\t0.989363,\n\t\t\t0.557873,\n\t\t\t0.391671,\n\t\t\t0.768627,\n\t\t\t0.990138,\n\t\t\t0.565296,\n\t\t\t0.395122,\n\t\t\t0.772549,\n\t\t\t0.990871,\n\t\t\t0.572706,\n\t\t\t0.398714,\n\t\t\t0.776471,\n\t\t\t0.991558,\n\t\t\t0.580107,\n\t\t\t0.402441,\n\t\t\t0.780392,\n\t\t\t0.992196,\n\t\t\t0.587502,\n\t\t\t0.406299,\n\t\t\t0.784314,\n\t\t\t0.992785,\n\t\t\t0.594891,\n\t\t\t0.410283,\n\t\t\t0.788235,\n\t\t\t0.993326,\n\t\t\t0.602275,\n\t\t\t0.41439,\n\t\t\t0.792157,\n\t\t\t0.993834,\n\t\t\t0.609644,\n\t\t\t0.418613,\n\t\t\t0.796078,\n\t\t\t0.994309,\n\t\t\t0.616999,\n\t\t\t0.42295,\n\t\t\t0.8,\n\t\t\t0.994738,\n\t\t\t0.62435,\n\t\t\t0.427397,\n\t\t\t0.803922,\n\t\t\t0.995122,\n\t\t\t0.631696,\n\t\t\t0.431951,\n\t\t\t0.807843,\n\t\t\t0.99548,\n\t\t\t0.639027,\n\t\t\t0.436607,\n\t\t\t0.811765,\n\t\t\t0.99581,\n\t\t\t0.646344,\n\t\t\t0.441361,\n\t\t\t0.815686,\n\t\t\t0.996096,\n\t\t\t0.653659,\n\t\t\t0.446213,\n\t\t\t0.819608,\n\t\t\t0.996341,\n\t\t\t0.660969,\n\t\t\t0.45116,\n\t\t\t0.823529,\n\t\t\t0.99658,\n\t\t\t0.668256,\n\t\t\t0.456192,\n\t\t\t0.827451,\n\t\t\t0.996775,\n\t\t\t0.675541,\n\t\t\t0.461314,\n\t\t\t0.831373,\n\t\t\t0.996925,\n\t\t\t0.682828,\n\t\t\t0.466526,\n\t\t\t0.835294,\n\t\t\t0.997077,\n\t\t\t0.690088,\n\t\t\t0.471811,\n\t\t\t0.839216,\n\t\t\t0.997186,\n\t\t\t0.697349,\n\t\t\t0.477182,\n\t\t\t0.843137,\n\t\t\t0.997254,\n\t\t\t0.704611,\n\t\t\t0.482635,\n\t\t\t0.847059,\n\t\t\t0.997325,\n\t\t\t0.711848,\n\t\t\t0.488154,\n\t\t\t0.85098,\n\t\t\t0.997351,\n\t\t\t0.719089,\n\t\t\t0.493755,\n\t\t\t0.854902,\n\t\t\t0.997351,\n\t\t\t0.726324,\n\t\t\t0.499428,\n\t\t\t0.858824,\n\t\t\t0.997341,\n\t\t\t0.733545,\n\t\t\t0.505167,\n\t\t\t0.862745,\n\t\t\t0.997285,\n\t\t\t0.740772,\n\t\t\t0.510983,\n\t\t\t0.866667,\n\t\t\t0.997228,\n\t\t\t0.747981,\n\t\t\t0.516859,\n\t\t\t0.870588,\n\t\t\t0.997138,\n\t\t\t0.75519,\n\t\t\t0.522806,\n\t\t\t0.87451,\n\t\t\t0.997019,\n\t\t\t0.762398,\n\t\t\t0.528821,\n\t\t\t0.878431,\n\t\t\t0.996898,\n\t\t\t0.769591,\n\t\t\t0.534892,\n\t\t\t0.882353,\n\t\t\t0.996727,\n\t\t\t0.776795,\n\t\t\t0.541039,\n\t\t\t0.886275,\n\t\t\t0.996571,\n\t\t\t0.783977,\n\t\t\t0.547233,\n\t\t\t0.890196,\n\t\t\t0.996369,\n\t\t\t0.791167,\n\t\t\t0.553499,\n\t\t\t0.894118,\n\t\t\t0.996162,\n\t\t\t0.798348,\n\t\t\t0.55982,\n\t\t\t0.898039,\n\t\t\t0.995932,\n\t\t\t0.805527,\n\t\t\t0.566202,\n\t\t\t0.901961,\n\t\t\t0.99568,\n\t\t\t0.812706,\n\t\t\t0.572645,\n\t\t\t0.905882,\n\t\t\t0.995424,\n\t\t\t0.819875,\n\t\t\t0.57914,\n\t\t\t0.909804,\n\t\t\t0.995131,\n\t\t\t0.827052,\n\t\t\t0.585701,\n\t\t\t0.913725,\n\t\t\t0.994851,\n\t\t\t0.834213,\n\t\t\t0.592307,\n\t\t\t0.917647,\n\t\t\t0.994524,\n\t\t\t0.841387,\n\t\t\t0.598983,\n\t\t\t0.921569,\n\t\t\t0.994222,\n\t\t\t0.84854,\n\t\t\t0.605696,\n\t\t\t0.92549,\n\t\t\t0.993866,\n\t\t\t0.855711,\n\t\t\t0.612482,\n\t\t\t0.929412,\n\t\t\t0.993545,\n\t\t\t0.862859,\n\t\t\t0.619299,\n\t\t\t0.933333,\n\t\t\t0.99317,\n\t\t\t0.870024,\n\t\t\t0.626189,\n\t\t\t0.937255,\n\t\t\t0.992831,\n\t\t\t0.877168,\n\t\t\t0.633109,\n\t\t\t0.941176,\n\t\t\t0.99244,\n\t\t\t0.88433,\n\t\t\t0.640099,\n\t\t\t0.945098,\n\t\t\t0.992089,\n\t\t\t0.89147,\n\t\t\t0.647116,\n\t\t\t0.94902,\n\t\t\t0.991688,\n\t\t\t0.898627,\n\t\t\t0.654202,\n\t\t\t0.952941,\n\t\t\t0.991332,\n\t\t\t0.905763,\n\t\t\t0.661309,\n\t\t\t0.956863,\n\t\t\t0.99093,\n\t\t\t0.912915,\n\t\t\t0.668481,\n\t\t\t0.960784,\n\t\t\t0.99057,\n\t\t\t0.920049,\n\t\t\t0.675675,\n\t\t\t0.964706,\n\t\t\t0.990175,\n\t\t\t0.927196,\n\t\t\t0.682926,\n\t\t\t0.968627,\n\t\t\t0.989815,\n\t\t\t0.934329,\n\t\t\t0.690198,\n\t\t\t0.972549,\n\t\t\t0.989434,\n\t\t\t0.94147,\n\t\t\t0.697519,\n\t\t\t0.976471,\n\t\t\t0.989077,\n\t\t\t0.948604,\n\t\t\t0.704863,\n\t\t\t0.980392,\n\t\t\t0.988717,\n\t\t\t0.955742,\n\t\t\t0.712242,\n\t\t\t0.984314,\n\t\t\t0.988367,\n\t\t\t0.962878,\n\t\t\t0.719649,\n\t\t\t0.988235,\n\t\t\t0.988033,\n\t\t\t0.970012,\n\t\t\t0.727077,\n\t\t\t0.992157,\n\t\t\t0.987691,\n\t\t\t0.977154,\n\t\t\t0.734536,\n\t\t\t0.996078,\n\t\t\t0.987387,\n\t\t\t0.984288,\n\t\t\t0.742002,\n\t\t\t1,\n\t\t\t0.987053,\n\t\t\t0.991438,\n\t\t\t0.749504\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Diverging\",\n\t\tName: \"Inferno (matplotlib)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tSource: \"https://github.com/BIDS/colormap/blob/master/colormaps.py\",\n\t\tLicense: \"CC0\",\n\t\tCreator: \"Nathaniel J. Smith & Stefan van der Walt\",\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.001462,\n\t\t\t0.000466,\n\t\t\t0.013866,\n\t\t\t0.003922,\n\t\t\t0.002267,\n\t\t\t0.00127,\n\t\t\t0.01857,\n\t\t\t0.007843,\n\t\t\t0.003299,\n\t\t\t0.002249,\n\t\t\t0.024239,\n\t\t\t0.011765,\n\t\t\t0.004547,\n\t\t\t0.003392,\n\t\t\t0.030909,\n\t\t\t0.015686,\n\t\t\t0.006006,\n\t\t\t0.004692,\n\t\t\t0.038558,\n\t\t\t0.019608,\n\t\t\t0.007676,\n\t\t\t0.006136,\n\t\t\t0.046836,\n\t\t\t0.023529,\n\t\t\t0.009561,\n\t\t\t0.007713,\n\t\t\t0.055143,\n\t\t\t0.027451,\n\t\t\t0.011663,\n\t\t\t0.009417,\n\t\t\t0.06346,\n\t\t\t0.031373,\n\t\t\t0.013995,\n\t\t\t0.011225,\n\t\t\t0.071862,\n\t\t\t0.035294,\n\t\t\t0.016561,\n\t\t\t0.013136,\n\t\t\t0.080282,\n\t\t\t0.039216,\n\t\t\t0.019373,\n\t\t\t0.015133,\n\t\t\t0.088767,\n\t\t\t0.043137,\n\t\t\t0.022447,\n\t\t\t0.017199,\n\t\t\t0.097327,\n\t\t\t0.047059,\n\t\t\t0.025793,\n\t\t\t0.019331,\n\t\t\t0.10593,\n\t\t\t0.05098,\n\t\t\t0.029432,\n\t\t\t0.021503,\n\t\t\t0.114621,\n\t\t\t0.054902,\n\t\t\t0.033385,\n\t\t\t0.023702,\n\t\t\t0.123397,\n\t\t\t0.058824,\n\t\t\t0.037668,\n\t\t\t0.025921,\n\t\t\t0.132232,\n\t\t\t0.062745,\n\t\t\t0.042253,\n\t\t\t0.028139,\n\t\t\t0.141141,\n\t\t\t0.066667,\n\t\t\t0.046915,\n\t\t\t0.030324,\n\t\t\t0.150164,\n\t\t\t0.070588,\n\t\t\t0.051644,\n\t\t\t0.032474,\n\t\t\t0.159254,\n\t\t\t0.07451,\n\t\t\t0.056449,\n\t\t\t0.034569,\n\t\t\t0.168414,\n\t\t\t0.078431,\n\t\t\t0.06134,\n\t\t\t0.03659,\n\t\t\t0.177642,\n\t\t\t0.082353,\n\t\t\t0.066331,\n\t\t\t0.038504,\n\t\t\t0.186962,\n\t\t\t0.086275,\n\t\t\t0.071429,\n\t\t\t0.040294,\n\t\t\t0.196354,\n\t\t\t0.090196,\n\t\t\t0.076637,\n\t\t\t0.041905,\n\t\t\t0.205799,\n\t\t\t0.094118,\n\t\t\t0.081962,\n\t\t\t0.043328,\n\t\t\t0.215289,\n\t\t\t0.098039,\n\t\t\t0.087411,\n\t\t\t0.044556,\n\t\t\t0.224813,\n\t\t\t0.101961,\n\t\t\t0.09299,\n\t\t\t0.045583,\n\t\t\t0.234358,\n\t\t\t0.105882,\n\t\t\t0.098702,\n\t\t\t0.046402,\n\t\t\t0.243904,\n\t\t\t0.109804,\n\t\t\t0.104551,\n\t\t\t0.047008,\n\t\t\t0.25343,\n\t\t\t0.113725,\n\t\t\t0.110536,\n\t\t\t0.047399,\n\t\t\t0.262912,\n\t\t\t0.117647,\n\t\t\t0.116656,\n\t\t\t0.047574,\n\t\t\t0.272321,\n\t\t\t0.121569,\n\t\t\t0.122908,\n\t\t\t0.047536,\n\t\t\t0.281624,\n\t\t\t0.12549,\n\t\t\t0.129285,\n\t\t\t0.047293,\n\t\t\t0.290788,\n\t\t\t0.129412,\n\t\t\t0.135778,\n\t\t\t0.046856,\n\t\t\t0.299776,\n\t\t\t0.133333,\n\t\t\t0.142378,\n\t\t\t0.046242,\n\t\t\t0.308553,\n\t\t\t0.137255,\n\t\t\t0.149073,\n\t\t\t0.045468,\n\t\t\t0.317085,\n\t\t\t0.141176,\n\t\t\t0.15585,\n\t\t\t0.044559,\n\t\t\t0.325338,\n\t\t\t0.145098,\n\t\t\t0.162689,\n\t\t\t0.043554,\n\t\t\t0.333277,\n\t\t\t0.14902,\n\t\t\t0.169575,\n\t\t\t0.042489,\n\t\t\t0.340874,\n\t\t\t0.152941,\n\t\t\t0.176493,\n\t\t\t0.041402,\n\t\t\t0.348111,\n\t\t\t0.156863,\n\t\t\t0.183429,\n\t\t\t0.040329,\n\t\t\t0.354971,\n\t\t\t0.160784,\n\t\t\t0.190367,\n\t\t\t0.039309,\n\t\t\t0.361447,\n\t\t\t0.164706,\n\t\t\t0.197297,\n\t\t\t0.0384,\n\t\t\t0.367535,\n\t\t\t0.168627,\n\t\t\t0.204209,\n\t\t\t0.037632,\n\t\t\t0.373238,\n\t\t\t0.172549,\n\t\t\t0.211095,\n\t\t\t0.03703,\n\t\t\t0.378563,\n\t\t\t0.176471,\n\t\t\t0.217949,\n\t\t\t0.036615,\n\t\t\t0.383522,\n\t\t\t0.180392,\n\t\t\t0.224763,\n\t\t\t0.036405,\n\t\t\t0.388129,\n\t\t\t0.184314,\n\t\t\t0.231538,\n\t\t\t0.036405,\n\t\t\t0.3924,\n\t\t\t0.188235,\n\t\t\t0.238273,\n\t\t\t0.036621,\n\t\t\t0.396353,\n\t\t\t0.192157,\n\t\t\t0.244967,\n\t\t\t0.037055,\n\t\t\t0.400007,\n\t\t\t0.196078,\n\t\t\t0.25162,\n\t\t\t0.037705,\n\t\t\t0.403378,\n\t\t\t0.2,\n\t\t\t0.258234,\n\t\t\t0.038571,\n\t\t\t0.406485,\n\t\t\t0.203922,\n\t\t\t0.26481,\n\t\t\t0.039647,\n\t\t\t0.409345,\n\t\t\t0.207843,\n\t\t\t0.271347,\n\t\t\t0.040922,\n\t\t\t0.411976,\n\t\t\t0.211765,\n\t\t\t0.27785,\n\t\t\t0.042353,\n\t\t\t0.414392,\n\t\t\t0.215686,\n\t\t\t0.284321,\n\t\t\t0.043933,\n\t\t\t0.416608,\n\t\t\t0.219608,\n\t\t\t0.290763,\n\t\t\t0.045644,\n\t\t\t0.418637,\n\t\t\t0.223529,\n\t\t\t0.297178,\n\t\t\t0.04747,\n\t\t\t0.420491,\n\t\t\t0.227451,\n\t\t\t0.303568,\n\t\t\t0.049396,\n\t\t\t0.422182,\n\t\t\t0.231373,\n\t\t\t0.309935,\n\t\t\t0.051407,\n\t\t\t0.423721,\n\t\t\t0.235294,\n\t\t\t0.316282,\n\t\t\t0.05349,\n\t\t\t0.425116,\n\t\t\t0.239216,\n\t\t\t0.32261,\n\t\t\t0.055634,\n\t\t\t0.426377,\n\t\t\t0.243137,\n\t\t\t0.328921,\n\t\t\t0.057827,\n\t\t\t0.427511,\n\t\t\t0.247059,\n\t\t\t0.335217,\n\t\t\t0.06006,\n\t\t\t0.428524,\n\t\t\t0.25098,\n\t\t\t0.3415,\n\t\t\t0.062325,\n\t\t\t0.429425,\n\t\t\t0.254902,\n\t\t\t0.347771,\n\t\t\t0.064616,\n\t\t\t0.430217,\n\t\t\t0.258824,\n\t\t\t0.354032,\n\t\t\t0.066925,\n\t\t\t0.430906,\n\t\t\t0.262745,\n\t\t\t0.360284,\n\t\t\t0.069247,\n\t\t\t0.431497,\n\t\t\t0.266667,\n\t\t\t0.366529,\n\t\t\t0.071579,\n\t\t\t0.431994,\n\t\t\t0.270588,\n\t\t\t0.372768,\n\t\t\t0.073915,\n\t\t\t0.4324,\n\t\t\t0.27451,\n\t\t\t0.379001,\n\t\t\t0.076253,\n\t\t\t0.432719,\n\t\t\t0.278431,\n\t\t\t0.385228,\n\t\t\t0.078591,\n\t\t\t0.432955,\n\t\t\t0.282353,\n\t\t\t0.391453,\n\t\t\t0.080927,\n\t\t\t0.433109,\n\t\t\t0.286275,\n\t\t\t0.397674,\n\t\t\t0.083257,\n\t\t\t0.433183,\n\t\t\t0.290196,\n\t\t\t0.403894,\n\t\t\t0.08558,\n\t\t\t0.433179,\n\t\t\t0.294118,\n\t\t\t0.410113,\n\t\t\t0.087896,\n\t\t\t0.433098,\n\t\t\t0.298039,\n\t\t\t0.416331,\n\t\t\t0.090203,\n\t\t\t0.432943,\n\t\t\t0.301961,\n\t\t\t0.422549,\n\t\t\t0.092501,\n\t\t\t0.432714,\n\t\t\t0.305882,\n\t\t\t0.428768,\n\t\t\t0.09479,\n\t\t\t0.432412,\n\t\t\t0.309804,\n\t\t\t0.434987,\n\t\t\t0.097069,\n\t\t\t0.432039,\n\t\t\t0.313725,\n\t\t\t0.441207,\n\t\t\t0.099338,\n\t\t\t0.431594,\n\t\t\t0.317647,\n\t\t\t0.447428,\n\t\t\t0.101597,\n\t\t\t0.43108,\n\t\t\t0.321569,\n\t\t\t0.453651,\n\t\t\t0.103848,\n\t\t\t0.430498,\n\t\t\t0.32549,\n\t\t\t0.459875,\n\t\t\t0.106089,\n\t\t\t0.429846,\n\t\t\t0.329412,\n\t\t\t0.4661,\n\t\t\t0.108322,\n\t\t\t0.429125,\n\t\t\t0.333333,\n\t\t\t0.472328,\n\t\t\t0.110547,\n\t\t\t0.428334,\n\t\t\t0.337255,\n\t\t\t0.478558,\n\t\t\t0.112764,\n\t\t\t0.427475,\n\t\t\t0.341176,\n\t\t\t0.484789,\n\t\t\t0.114974,\n\t\t\t0.426548,\n\t\t\t0.345098,\n\t\t\t0.491022,\n\t\t\t0.117179,\n\t\t\t0.425552,\n\t\t\t0.34902,\n\t\t\t0.497257,\n\t\t\t0.119379,\n\t\t\t0.424488,\n\t\t\t0.352941,\n\t\t\t0.503493,\n\t\t\t0.121575,\n\t\t\t0.423356,\n\t\t\t0.356863,\n\t\t\t0.50973,\n\t\t\t0.123769,\n\t\t\t0.422156,\n\t\t\t0.360784,\n\t\t\t0.515967,\n\t\t\t0.12596,\n\t\t\t0.420887,\n\t\t\t0.364706,\n\t\t\t0.522206,\n\t\t\t0.12815,\n\t\t\t0.419549,\n\t\t\t0.368627,\n\t\t\t0.528444,\n\t\t\t0.130341,\n\t\t\t0.418142,\n\t\t\t0.372549,\n\t\t\t0.534683,\n\t\t\t0.132534,\n\t\t\t0.416667,\n\t\t\t0.376471,\n\t\t\t0.54092,\n\t\t\t0.134729,\n\t\t\t0.415123,\n\t\t\t0.380392,\n\t\t\t0.547157,\n\t\t\t0.136929,\n\t\t\t0.413511,\n\t\t\t0.384314,\n\t\t\t0.553392,\n\t\t\t0.139134,\n\t\t\t0.411829,\n\t\t\t0.388235,\n\t\t\t0.559624,\n\t\t\t0.141346,\n\t\t\t0.410078,\n\t\t\t0.392157,\n\t\t\t0.565854,\n\t\t\t0.143567,\n\t\t\t0.408258,\n\t\t\t0.396078,\n\t\t\t0.572081,\n\t\t\t0.145797,\n\t\t\t0.406369,\n\t\t\t0.4,\n\t\t\t0.578304,\n\t\t\t0.148039,\n\t\t\t0.404411,\n\t\t\t0.403922,\n\t\t\t0.584521,\n\t\t\t0.150294,\n\t\t\t0.402385,\n\t\t\t0.407843,\n\t\t\t0.590734,\n\t\t\t0.152563,\n\t\t\t0.40029,\n\t\t\t0.411765,\n\t\t\t0.59694,\n\t\t\t0.154848,\n\t\t\t0.398125,\n\t\t\t0.415686,\n\t\t\t0.603139,\n\t\t\t0.157151,\n\t\t\t0.395891,\n\t\t\t0.419608,\n\t\t\t0.60933,\n\t\t\t0.159474,\n\t\t\t0.393589,\n\t\t\t0.423529,\n\t\t\t0.615513,\n\t\t\t0.161817,\n\t\t\t0.391219,\n\t\t\t0.427451,\n\t\t\t0.621685,\n\t\t\t0.164184,\n\t\t\t0.388781,\n\t\t\t0.431373,\n\t\t\t0.627847,\n\t\t\t0.166575,\n\t\t\t0.386276,\n\t\t\t0.435294,\n\t\t\t0.633998,\n\t\t\t0.168992,\n\t\t\t0.383704,\n\t\t\t0.439216,\n\t\t\t0.640135,\n\t\t\t0.171438,\n\t\t\t0.381065,\n\t\t\t0.443137,\n\t\t\t0.64626,\n\t\t\t0.173914,\n\t\t\t0.378359,\n\t\t\t0.447059,\n\t\t\t0.652369,\n\t\t\t0.176421,\n\t\t\t0.375586,\n\t\t\t0.45098,\n\t\t\t0.658463,\n\t\t\t0.178962,\n\t\t\t0.372748,\n\t\t\t0.454902,\n\t\t\t0.66454,\n\t\t\t0.181539,\n\t\t\t0.369846,\n\t\t\t0.458824,\n\t\t\t0.670599,\n\t\t\t0.184153,\n\t\t\t0.366879,\n\t\t\t0.462745,\n\t\t\t0.676638,\n\t\t\t0.186807,\n\t\t\t0.363849,\n\t\t\t0.466667,\n\t\t\t0.682656,\n\t\t\t0.189501,\n\t\t\t0.360757,\n\t\t\t0.470588,\n\t\t\t0.688653,\n\t\t\t0.192239,\n\t\t\t0.357603,\n\t\t\t0.47451,\n\t\t\t0.694627,\n\t\t\t0.195021,\n\t\t\t0.354388,\n\t\t\t0.478431,\n\t\t\t0.700576,\n\t\t\t0.197851,\n\t\t\t0.351113,\n\t\t\t0.482353,\n\t\t\t0.7065,\n\t\t\t0.200728,\n\t\t\t0.347777,\n\t\t\t0.486275,\n\t\t\t0.712396,\n\t\t\t0.203656,\n\t\t\t0.344383,\n\t\t\t0.490196,\n\t\t\t0.718264,\n\t\t\t0.206636,\n\t\t\t0.340931,\n\t\t\t0.494118,\n\t\t\t0.724103,\n\t\t\t0.20967,\n\t\t\t0.337424,\n\t\t\t0.498039,\n\t\t\t0.729909,\n\t\t\t0.212759,\n\t\t\t0.333861,\n\t\t\t0.501961,\n\t\t\t0.735683,\n\t\t\t0.215906,\n\t\t\t0.330245,\n\t\t\t0.505882,\n\t\t\t0.741423,\n\t\t\t0.219112,\n\t\t\t0.326576,\n\t\t\t0.509804,\n\t\t\t0.747127,\n\t\t\t0.222378,\n\t\t\t0.322856,\n\t\t\t0.513725,\n\t\t\t0.752794,\n\t\t\t0.225706,\n\t\t\t0.319085,\n\t\t\t0.517647,\n\t\t\t0.758422,\n\t\t\t0.229097,\n\t\t\t0.315266,\n\t\t\t0.521569,\n\t\t\t0.76401,\n\t\t\t0.232554,\n\t\t\t0.311399,\n\t\t\t0.52549,\n\t\t\t0.769556,\n\t\t\t0.236077,\n\t\t\t0.307485,\n\t\t\t0.529412,\n\t\t\t0.775059,\n\t\t\t0.239667,\n\t\t\t0.303526,\n\t\t\t0.533333,\n\t\t\t0.780517,\n\t\t\t0.243327,\n\t\t\t0.299523,\n\t\t\t0.537255,\n\t\t\t0.785929,\n\t\t\t0.247056,\n\t\t\t0.295477,\n\t\t\t0.541176,\n\t\t\t0.791293,\n\t\t\t0.250856,\n\t\t\t0.29139,\n\t\t\t0.545098,\n\t\t\t0.796607,\n\t\t\t0.254728,\n\t\t\t0.287264,\n\t\t\t0.54902,\n\t\t\t0.801871,\n\t\t\t0.258674,\n\t\t\t0.283099,\n\t\t\t0.552941,\n\t\t\t0.807082,\n\t\t\t0.262692,\n\t\t\t0.278898,\n\t\t\t0.556863,\n\t\t\t0.812239,\n\t\t\t0.266786,\n\t\t\t0.274661,\n\t\t\t0.560784,\n\t\t\t0.817341,\n\t\t\t0.270954,\n\t\t\t0.27039,\n\t\t\t0.564706,\n\t\t\t0.822386,\n\t\t\t0.275197,\n\t\t\t0.266085,\n\t\t\t0.568627,\n\t\t\t0.827372,\n\t\t\t0.279517,\n\t\t\t0.26175,\n\t\t\t0.572549,\n\t\t\t0.832299,\n\t\t\t0.283913,\n\t\t\t0.257383,\n\t\t\t0.576471,\n\t\t\t0.837165,\n\t\t\t0.288385,\n\t\t\t0.252988,\n\t\t\t0.580392,\n\t\t\t0.841969,\n\t\t\t0.292933,\n\t\t\t0.248564,\n\t\t\t0.584314,\n\t\t\t0.846709,\n\t\t\t0.297559,\n\t\t\t0.244113,\n\t\t\t0.588235,\n\t\t\t0.851384,\n\t\t\t0.30226,\n\t\t\t0.239636,\n\t\t\t0.592157,\n\t\t\t0.855992,\n\t\t\t0.307038,\n\t\t\t0.235133,\n\t\t\t0.596078,\n\t\t\t0.860533,\n\t\t\t0.311892,\n\t\t\t0.230606,\n\t\t\t0.6,\n\t\t\t0.865006,\n\t\t\t0.316822,\n\t\t\t0.226055,\n\t\t\t0.603922,\n\t\t\t0.869409,\n\t\t\t0.321827,\n\t\t\t0.221482,\n\t\t\t0.607843,\n\t\t\t0.873741,\n\t\t\t0.326906,\n\t\t\t0.216886,\n\t\t\t0.611765,\n\t\t\t0.878001,\n\t\t\t0.33206,\n\t\t\t0.212268,\n\t\t\t0.615686,\n\t\t\t0.882188,\n\t\t\t0.337287,\n\t\t\t0.207628,\n\t\t\t0.619608,\n\t\t\t0.886302,\n\t\t\t0.342586,\n\t\t\t0.202968,\n\t\t\t0.623529,\n\t\t\t0.890341,\n\t\t\t0.347957,\n\t\t\t0.198286,\n\t\t\t0.627451,\n\t\t\t0.894305,\n\t\t\t0.353399,\n\t\t\t0.193584,\n\t\t\t0.631373,\n\t\t\t0.898192,\n\t\t\t0.358911,\n\t\t\t0.18886,\n\t\t\t0.635294,\n\t\t\t0.902003,\n\t\t\t0.364492,\n\t\t\t0.184116,\n\t\t\t0.639216,\n\t\t\t0.905735,\n\t\t\t0.37014,\n\t\t\t0.17935,\n\t\t\t0.643137,\n\t\t\t0.90939,\n\t\t\t0.375856,\n\t\t\t0.174563,\n\t\t\t0.647059,\n\t\t\t0.912966,\n\t\t\t0.381636,\n\t\t\t0.169755,\n\t\t\t0.65098,\n\t\t\t0.916462,\n\t\t\t0.387481,\n\t\t\t0.164924,\n\t\t\t0.654902,\n\t\t\t0.919879,\n\t\t\t0.393389,\n\t\t\t0.16007,\n\t\t\t0.658824,\n\t\t\t0.923215,\n\t\t\t0.399359,\n\t\t\t0.155193,\n\t\t\t0.662745,\n\t\t\t0.92647,\n\t\t\t0.405389,\n\t\t\t0.150292,\n\t\t\t0.666667,\n\t\t\t0.929644,\n\t\t\t0.411479,\n\t\t\t0.145367,\n\t\t\t0.670588,\n\t\t\t0.932737,\n\t\t\t0.417627,\n\t\t\t0.140417,\n\t\t\t0.67451,\n\t\t\t0.935747,\n\t\t\t0.423831,\n\t\t\t0.13544,\n\t\t\t0.678431,\n\t\t\t0.938675,\n\t\t\t0.430091,\n\t\t\t0.130438,\n\t\t\t0.682353,\n\t\t\t0.941521,\n\t\t\t0.436405,\n\t\t\t0.125409,\n\t\t\t0.686275,\n\t\t\t0.944285,\n\t\t\t0.442772,\n\t\t\t0.120354,\n\t\t\t0.690196,\n\t\t\t0.946965,\n\t\t\t0.449191,\n\t\t\t0.115272,\n\t\t\t0.694118,\n\t\t\t0.949562,\n\t\t\t0.45566,\n\t\t\t0.110164,\n\t\t\t0.698039,\n\t\t\t0.952075,\n\t\t\t0.462178,\n\t\t\t0.105031,\n\t\t\t0.701961,\n\t\t\t0.954506,\n\t\t\t0.468744,\n\t\t\t0.099874,\n\t\t\t0.705882,\n\t\t\t0.956852,\n\t\t\t0.475356,\n\t\t\t0.094695,\n\t\t\t0.709804,\n\t\t\t0.959114,\n\t\t\t0.482014,\n\t\t\t0.089499,\n\t\t\t0.713725,\n\t\t\t0.961293,\n\t\t\t0.488716,\n\t\t\t0.084289,\n\t\t\t0.717647,\n\t\t\t0.963387,\n\t\t\t0.495462,\n\t\t\t0.079073,\n\t\t\t0.721569,\n\t\t\t0.965397,\n\t\t\t0.502249,\n\t\t\t0.073859,\n\t\t\t0.72549,\n\t\t\t0.967322,\n\t\t\t0.509078,\n\t\t\t0.068659,\n\t\t\t0.729412,\n\t\t\t0.969163,\n\t\t\t0.515946,\n\t\t\t0.063488,\n\t\t\t0.733333,\n\t\t\t0.970919,\n\t\t\t0.522853,\n\t\t\t0.058367,\n\t\t\t0.737255,\n\t\t\t0.97259,\n\t\t\t0.529798,\n\t\t\t0.053324,\n\t\t\t0.741176,\n\t\t\t0.974176,\n\t\t\t0.53678,\n\t\t\t0.048392,\n\t\t\t0.745098,\n\t\t\t0.975677,\n\t\t\t0.543798,\n\t\t\t0.043618,\n\t\t\t0.74902,\n\t\t\t0.977092,\n\t\t\t0.55085,\n\t\t\t0.03905,\n\t\t\t0.752941,\n\t\t\t0.978422,\n\t\t\t0.557937,\n\t\t\t0.034931,\n\t\t\t0.756863,\n\t\t\t0.979666,\n\t\t\t0.565057,\n\t\t\t0.031409,\n\t\t\t0.760784,\n\t\t\t0.980824,\n\t\t\t0.572209,\n\t\t\t0.028508,\n\t\t\t0.764706,\n\t\t\t0.981895,\n\t\t\t0.579392,\n\t\t\t0.02625,\n\t\t\t0.768627,\n\t\t\t0.982881,\n\t\t\t0.586606,\n\t\t\t0.024661,\n\t\t\t0.772549,\n\t\t\t0.983779,\n\t\t\t0.593849,\n\t\t\t0.02377,\n\t\t\t0.776471,\n\t\t\t0.984591,\n\t\t\t0.601122,\n\t\t\t0.023606,\n\t\t\t0.780392,\n\t\t\t0.985315,\n\t\t\t0.608422,\n\t\t\t0.024202,\n\t\t\t0.784314,\n\t\t\t0.985952,\n\t\t\t0.61575,\n\t\t\t0.025592,\n\t\t\t0.788235,\n\t\t\t0.986502,\n\t\t\t0.623105,\n\t\t\t0.027814,\n\t\t\t0.792157,\n\t\t\t0.986964,\n\t\t\t0.630485,\n\t\t\t0.030908,\n\t\t\t0.796078,\n\t\t\t0.987337,\n\t\t\t0.63789,\n\t\t\t0.034916,\n\t\t\t0.8,\n\t\t\t0.987622,\n\t\t\t0.64532,\n\t\t\t0.039886,\n\t\t\t0.803922,\n\t\t\t0.987819,\n\t\t\t0.652773,\n\t\t\t0.045581,\n\t\t\t0.807843,\n\t\t\t0.987926,\n\t\t\t0.66025,\n\t\t\t0.05175,\n\t\t\t0.811765,\n\t\t\t0.987945,\n\t\t\t0.667748,\n\t\t\t0.058329,\n\t\t\t0.815686,\n\t\t\t0.987874,\n\t\t\t0.675267,\n\t\t\t0.065257,\n\t\t\t0.819608,\n\t\t\t0.987714,\n\t\t\t0.682807,\n\t\t\t0.072489,\n\t\t\t0.823529,\n\t\t\t0.987464,\n\t\t\t0.690366,\n\t\t\t0.07999,\n\t\t\t0.827451,\n\t\t\t0.987124,\n\t\t\t0.697944,\n\t\t\t0.087731,\n\t\t\t0.831373,\n\t\t\t0.986694,\n\t\t\t0.70554,\n\t\t\t0.095694,\n\t\t\t0.835294,\n\t\t\t0.986175,\n\t\t\t0.713153,\n\t\t\t0.103863,\n\t\t\t0.839216,\n\t\t\t0.985566,\n\t\t\t0.720782,\n\t\t\t0.112229,\n\t\t\t0.843137,\n\t\t\t0.984865,\n\t\t\t0.728427,\n\t\t\t0.120785,\n\t\t\t0.847059,\n\t\t\t0.984075,\n\t\t\t0.736087,\n\t\t\t0.129527,\n\t\t\t0.85098,\n\t\t\t0.983196,\n\t\t\t0.743758,\n\t\t\t0.138453,\n\t\t\t0.854902,\n\t\t\t0.982228,\n\t\t\t0.751442,\n\t\t\t0.147565,\n\t\t\t0.858824,\n\t\t\t0.981173,\n\t\t\t0.759135,\n\t\t\t0.156863,\n\t\t\t0.862745,\n\t\t\t0.980032,\n\t\t\t0.766837,\n\t\t\t0.166353,\n\t\t\t0.866667,\n\t\t\t0.978806,\n\t\t\t0.774545,\n\t\t\t0.176037,\n\t\t\t0.870588,\n\t\t\t0.977497,\n\t\t\t0.782258,\n\t\t\t0.185923,\n\t\t\t0.87451,\n\t\t\t0.976108,\n\t\t\t0.789974,\n\t\t\t0.196018,\n\t\t\t0.878431,\n\t\t\t0.974638,\n\t\t\t0.797692,\n\t\t\t0.206332,\n\t\t\t0.882353,\n\t\t\t0.973088,\n\t\t\t0.805409,\n\t\t\t0.216877,\n\t\t\t0.886275,\n\t\t\t0.971468,\n\t\t\t0.813122,\n\t\t\t0.227658,\n\t\t\t0.890196,\n\t\t\t0.969783,\n\t\t\t0.820825,\n\t\t\t0.238686,\n\t\t\t0.894118,\n\t\t\t0.968041,\n\t\t\t0.828515,\n\t\t\t0.249972,\n\t\t\t0.898039,\n\t\t\t0.966243,\n\t\t\t0.836191,\n\t\t\t0.261534,\n\t\t\t0.901961,\n\t\t\t0.964394,\n\t\t\t0.843848,\n\t\t\t0.273391,\n\t\t\t0.905882,\n\t\t\t0.962517,\n\t\t\t0.851476,\n\t\t\t0.285546,\n\t\t\t0.909804,\n\t\t\t0.960626,\n\t\t\t0.859069,\n\t\t\t0.29801,\n\t\t\t0.913725,\n\t\t\t0.95872,\n\t\t\t0.866624,\n\t\t\t0.31082,\n\t\t\t0.917647,\n\t\t\t0.956834,\n\t\t\t0.874129,\n\t\t\t0.323974,\n\t\t\t0.921569,\n\t\t\t0.954997,\n\t\t\t0.881569,\n\t\t\t0.337475,\n\t\t\t0.92549,\n\t\t\t0.953215,\n\t\t\t0.888942,\n\t\t\t0.351369,\n\t\t\t0.929412,\n\t\t\t0.951546,\n\t\t\t0.896226,\n\t\t\t0.365627,\n\t\t\t0.933333,\n\t\t\t0.950018,\n\t\t\t0.903409,\n\t\t\t0.380271,\n\t\t\t0.937255,\n\t\t\t0.948683,\n\t\t\t0.910473,\n\t\t\t0.395289,\n\t\t\t0.941176,\n\t\t\t0.947594,\n\t\t\t0.917399,\n\t\t\t0.410665,\n\t\t\t0.945098,\n\t\t\t0.946809,\n\t\t\t0.924168,\n\t\t\t0.426373,\n\t\t\t0.94902,\n\t\t\t0.946392,\n\t\t\t0.930761,\n\t\t\t0.442367,\n\t\t\t0.952941,\n\t\t\t0.946403,\n\t\t\t0.937159,\n\t\t\t0.458592,\n\t\t\t0.956863,\n\t\t\t0.946903,\n\t\t\t0.943348,\n\t\t\t0.47497,\n\t\t\t0.960784,\n\t\t\t0.947937,\n\t\t\t0.949318,\n\t\t\t0.491426,\n\t\t\t0.964706,\n\t\t\t0.949545,\n\t\t\t0.955063,\n\t\t\t0.50786,\n\t\t\t0.968627,\n\t\t\t0.95174,\n\t\t\t0.960587,\n\t\t\t0.524203,\n\t\t\t0.972549,\n\t\t\t0.954529,\n\t\t\t0.965896,\n\t\t\t0.540361,\n\t\t\t0.976471,\n\t\t\t0.957896,\n\t\t\t0.971003,\n\t\t\t0.556275,\n\t\t\t0.980392,\n\t\t\t0.961812,\n\t\t\t0.975924,\n\t\t\t0.571925,\n\t\t\t0.984314,\n\t\t\t0.966249,\n\t\t\t0.980678,\n\t\t\t0.587206,\n\t\t\t0.988235,\n\t\t\t0.971162,\n\t\t\t0.985282,\n\t\t\t0.602154,\n\t\t\t0.992157,\n\t\t\t0.976511,\n\t\t\t0.989753,\n\t\t\t0.61676,\n\t\t\t0.996078,\n\t\t\t0.982257,\n\t\t\t0.994109,\n\t\t\t0.631017,\n\t\t\t1,\n\t\t\t0.988362,\n\t\t\t0.998364,\n\t\t\t0.644924\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Diverging\",\n\t\tName: \"Plasma (matplotlib)\",\n\t\tNanColor: [\n\t\t\t0,\n\t\t\t1,\n\t\t\t0\n\t\t],\n\t\tSource: \"https://github.com/BIDS/colormap/blob/master/colormaps.py\",\n\t\tLicense: \"CC0\",\n\t\tCreator: \"Nathaniel J. Smith & Stefan van der Walt\",\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.050383,\n\t\t\t0.029803,\n\t\t\t0.527975,\n\t\t\t0.003922,\n\t\t\t0.063536,\n\t\t\t0.028426,\n\t\t\t0.533124,\n\t\t\t0.007843,\n\t\t\t0.075353,\n\t\t\t0.027206,\n\t\t\t0.538007,\n\t\t\t0.011765,\n\t\t\t0.086222,\n\t\t\t0.026125,\n\t\t\t0.542658,\n\t\t\t0.015686,\n\t\t\t0.096379,\n\t\t\t0.025165,\n\t\t\t0.547103,\n\t\t\t0.019608,\n\t\t\t0.10598,\n\t\t\t0.024309,\n\t\t\t0.551368,\n\t\t\t0.023529,\n\t\t\t0.115124,\n\t\t\t0.023556,\n\t\t\t0.555468,\n\t\t\t0.027451,\n\t\t\t0.123903,\n\t\t\t0.022878,\n\t\t\t0.559423,\n\t\t\t0.031373,\n\t\t\t0.132381,\n\t\t\t0.022258,\n\t\t\t0.56325,\n\t\t\t0.035294,\n\t\t\t0.140603,\n\t\t\t0.021687,\n\t\t\t0.566959,\n\t\t\t0.039216,\n\t\t\t0.148607,\n\t\t\t0.021154,\n\t\t\t0.570562,\n\t\t\t0.043137,\n\t\t\t0.156421,\n\t\t\t0.020651,\n\t\t\t0.574065,\n\t\t\t0.047059,\n\t\t\t0.16407,\n\t\t\t0.020171,\n\t\t\t0.577478,\n\t\t\t0.05098,\n\t\t\t0.171574,\n\t\t\t0.019706,\n\t\t\t0.580806,\n\t\t\t0.054902,\n\t\t\t0.17895,\n\t\t\t0.019252,\n\t\t\t0.584054,\n\t\t\t0.058824,\n\t\t\t0.186213,\n\t\t\t0.018803,\n\t\t\t0.587228,\n\t\t\t0.062745,\n\t\t\t0.193374,\n\t\t\t0.018354,\n\t\t\t0.59033,\n\t\t\t0.066667,\n\t\t\t0.200445,\n\t\t\t0.017902,\n\t\t\t0.593364,\n\t\t\t0.070588,\n\t\t\t0.207435,\n\t\t\t0.017442,\n\t\t\t0.596333,\n\t\t\t0.07451,\n\t\t\t0.21435,\n\t\t\t0.016973,\n\t\t\t0.599239,\n\t\t\t0.078431,\n\t\t\t0.221197,\n\t\t\t0.016497,\n\t\t\t0.602083,\n\t\t\t0.082353,\n\t\t\t0.227983,\n\t\t\t0.016007,\n\t\t\t0.604867,\n\t\t\t0.086275,\n\t\t\t0.234715,\n\t\t\t0.015502,\n\t\t\t0.607592,\n\t\t\t0.090196,\n\t\t\t0.241396,\n\t\t\t0.014979,\n\t\t\t0.610259,\n\t\t\t0.094118,\n\t\t\t0.248032,\n\t\t\t0.014439,\n\t\t\t0.612868,\n\t\t\t0.098039,\n\t\t\t0.254627,\n\t\t\t0.013882,\n\t\t\t0.615419,\n\t\t\t0.101961,\n\t\t\t0.261183,\n\t\t\t0.013308,\n\t\t\t0.617911,\n\t\t\t0.105882,\n\t\t\t0.267703,\n\t\t\t0.012716,\n\t\t\t0.620346,\n\t\t\t0.109804,\n\t\t\t0.274191,\n\t\t\t0.012109,\n\t\t\t0.622722,\n\t\t\t0.113725,\n\t\t\t0.280648,\n\t\t\t0.011488,\n\t\t\t0.625038,\n\t\t\t0.117647,\n\t\t\t0.287076,\n\t\t\t0.010855,\n\t\t\t0.627295,\n\t\t\t0.121569,\n\t\t\t0.293478,\n\t\t\t0.010213,\n\t\t\t0.62949,\n\t\t\t0.12549,\n\t\t\t0.299855,\n\t\t\t0.009561,\n\t\t\t0.631624,\n\t\t\t0.129412,\n\t\t\t0.30621,\n\t\t\t0.008902,\n\t\t\t0.633694,\n\t\t\t0.133333,\n\t\t\t0.312543,\n\t\t\t0.008239,\n\t\t\t0.6357,\n\t\t\t0.137255,\n\t\t\t0.318856,\n\t\t\t0.007576,\n\t\t\t0.63764,\n\t\t\t0.141176,\n\t\t\t0.32515,\n\t\t\t0.006915,\n\t\t\t0.639512,\n\t\t\t0.145098,\n\t\t\t0.331426,\n\t\t\t0.006261,\n\t\t\t0.641316,\n\t\t\t0.14902,\n\t\t\t0.337683,\n\t\t\t0.005618,\n\t\t\t0.643049,\n\t\t\t0.152941,\n\t\t\t0.343925,\n\t\t\t0.004991,\n\t\t\t0.64471,\n\t\t\t0.156863,\n\t\t\t0.35015,\n\t\t\t0.004382,\n\t\t\t0.646298,\n\t\t\t0.160784,\n\t\t\t0.356359,\n\t\t\t0.003798,\n\t\t\t0.64781,\n\t\t\t0.164706,\n\t\t\t0.362553,\n\t\t\t0.003243,\n\t\t\t0.649245,\n\t\t\t0.168627,\n\t\t\t0.368733,\n\t\t\t0.002724,\n\t\t\t0.650601,\n\t\t\t0.172549,\n\t\t\t0.374897,\n\t\t\t0.002245,\n\t\t\t0.651876,\n\t\t\t0.176471,\n\t\t\t0.381047,\n\t\t\t0.001814,\n\t\t\t0.653068,\n\t\t\t0.180392,\n\t\t\t0.387183,\n\t\t\t0.001434,\n\t\t\t0.654177,\n\t\t\t0.184314,\n\t\t\t0.393304,\n\t\t\t0.001114,\n\t\t\t0.655199,\n\t\t\t0.188235,\n\t\t\t0.399411,\n\t\t\t0.000859,\n\t\t\t0.656133,\n\t\t\t0.192157,\n\t\t\t0.405503,\n\t\t\t0.000678,\n\t\t\t0.656977,\n\t\t\t0.196078,\n\t\t\t0.41158,\n\t\t\t0.000577,\n\t\t\t0.65773,\n\t\t\t0.2,\n\t\t\t0.417642,\n\t\t\t0.000564,\n\t\t\t0.65839,\n\t\t\t0.203922,\n\t\t\t0.423689,\n\t\t\t0.000646,\n\t\t\t0.658956,\n\t\t\t0.207843,\n\t\t\t0.429719,\n\t\t\t0.000831,\n\t\t\t0.659425,\n\t\t\t0.211765,\n\t\t\t0.435734,\n\t\t\t0.001127,\n\t\t\t0.659797,\n\t\t\t0.215686,\n\t\t\t0.441732,\n\t\t\t0.00154,\n\t\t\t0.660069,\n\t\t\t0.219608,\n\t\t\t0.447714,\n\t\t\t0.00208,\n\t\t\t0.66024,\n\t\t\t0.223529,\n\t\t\t0.453677,\n\t\t\t0.002755,\n\t\t\t0.66031,\n\t\t\t0.227451,\n\t\t\t0.459623,\n\t\t\t0.003574,\n\t\t\t0.660277,\n\t\t\t0.231373,\n\t\t\t0.46555,\n\t\t\t0.004545,\n\t\t\t0.660139,\n\t\t\t0.235294,\n\t\t\t0.471457,\n\t\t\t0.005678,\n\t\t\t0.659897,\n\t\t\t0.239216,\n\t\t\t0.477344,\n\t\t\t0.00698,\n\t\t\t0.659549,\n\t\t\t0.243137,\n\t\t\t0.48321,\n\t\t\t0.00846,\n\t\t\t0.659095,\n\t\t\t0.247059,\n\t\t\t0.489055,\n\t\t\t0.010127,\n\t\t\t0.658534,\n\t\t\t0.25098,\n\t\t\t0.494877,\n\t\t\t0.01199,\n\t\t\t0.657865,\n\t\t\t0.254902,\n\t\t\t0.500678,\n\t\t\t0.014055,\n\t\t\t0.657088,\n\t\t\t0.258824,\n\t\t\t0.506454,\n\t\t\t0.016333,\n\t\t\t0.656202,\n\t\t\t0.262745,\n\t\t\t0.512206,\n\t\t\t0.018833,\n\t\t\t0.655209,\n\t\t\t0.266667,\n\t\t\t0.517933,\n\t\t\t0.021563,\n\t\t\t0.654109,\n\t\t\t0.270588,\n\t\t\t0.523633,\n\t\t\t0.024532,\n\t\t\t0.652901,\n\t\t\t0.27451,\n\t\t\t0.529306,\n\t\t\t0.027747,\n\t\t\t0.651586,\n\t\t\t0.278431,\n\t\t\t0.534952,\n\t\t\t0.031217,\n\t\t\t0.650165,\n\t\t\t0.282353,\n\t\t\t0.54057,\n\t\t\t0.03495,\n\t\t\t0.64864,\n\t\t\t0.286275,\n\t\t\t0.546157,\n\t\t\t0.038954,\n\t\t\t0.64701,\n\t\t\t0.290196,\n\t\t\t0.551715,\n\t\t\t0.043136,\n\t\t\t0.645277,\n\t\t\t0.294118,\n\t\t\t0.557243,\n\t\t\t0.047331,\n\t\t\t0.643443,\n\t\t\t0.298039,\n\t\t\t0.562738,\n\t\t\t0.051545,\n\t\t\t0.641509,\n\t\t\t0.301961,\n\t\t\t0.568201,\n\t\t\t0.055778,\n\t\t\t0.639477,\n\t\t\t0.305882,\n\t\t\t0.573632,\n\t\t\t0.060028,\n\t\t\t0.637349,\n\t\t\t0.309804,\n\t\t\t0.579029,\n\t\t\t0.064296,\n\t\t\t0.635126,\n\t\t\t0.313725,\n\t\t\t0.584391,\n\t\t\t0.068579,\n\t\t\t0.632812,\n\t\t\t0.317647,\n\t\t\t0.589719,\n\t\t\t0.072878,\n\t\t\t0.630408,\n\t\t\t0.321569,\n\t\t\t0.595011,\n\t\t\t0.07719,\n\t\t\t0.627917,\n\t\t\t0.32549,\n\t\t\t0.600266,\n\t\t\t0.081516,\n\t\t\t0.625342,\n\t\t\t0.329412,\n\t\t\t0.605485,\n\t\t\t0.085854,\n\t\t\t0.622686,\n\t\t\t0.333333,\n\t\t\t0.610667,\n\t\t\t0.090204,\n\t\t\t0.619951,\n\t\t\t0.337255,\n\t\t\t0.615812,\n\t\t\t0.094564,\n\t\t\t0.61714,\n\t\t\t0.341176,\n\t\t\t0.620919,\n\t\t\t0.098934,\n\t\t\t0.614257,\n\t\t\t0.345098,\n\t\t\t0.625987,\n\t\t\t0.103312,\n\t\t\t0.611305,\n\t\t\t0.34902,\n\t\t\t0.631017,\n\t\t\t0.107699,\n\t\t\t0.608287,\n\t\t\t0.352941,\n\t\t\t0.636008,\n\t\t\t0.112092,\n\t\t\t0.605205,\n\t\t\t0.356863,\n\t\t\t0.640959,\n\t\t\t0.116492,\n\t\t\t0.602065,\n\t\t\t0.360784,\n\t\t\t0.645872,\n\t\t\t0.120898,\n\t\t\t0.598867,\n\t\t\t0.364706,\n\t\t\t0.650746,\n\t\t\t0.125309,\n\t\t\t0.595617,\n\t\t\t0.368627,\n\t\t\t0.65558,\n\t\t\t0.129725,\n\t\t\t0.592317,\n\t\t\t0.372549,\n\t\t\t0.660374,\n\t\t\t0.134144,\n\t\t\t0.588971,\n\t\t\t0.376471,\n\t\t\t0.665129,\n\t\t\t0.138566,\n\t\t\t0.585582,\n\t\t\t0.380392,\n\t\t\t0.669845,\n\t\t\t0.142992,\n\t\t\t0.582154,\n\t\t\t0.384314,\n\t\t\t0.674522,\n\t\t\t0.147419,\n\t\t\t0.578688,\n\t\t\t0.388235,\n\t\t\t0.67916,\n\t\t\t0.151848,\n\t\t\t0.575189,\n\t\t\t0.392157,\n\t\t\t0.683758,\n\t\t\t0.156278,\n\t\t\t0.57166,\n\t\t\t0.396078,\n\t\t\t0.688318,\n\t\t\t0.160709,\n\t\t\t0.568103,\n\t\t\t0.4,\n\t\t\t0.69284,\n\t\t\t0.165141,\n\t\t\t0.564522,\n\t\t\t0.403922,\n\t\t\t0.697324,\n\t\t\t0.169573,\n\t\t\t0.560919,\n\t\t\t0.407843,\n\t\t\t0.701769,\n\t\t\t0.174005,\n\t\t\t0.557296,\n\t\t\t0.411765,\n\t\t\t0.706178,\n\t\t\t0.178437,\n\t\t\t0.553657,\n\t\t\t0.415686,\n\t\t\t0.710549,\n\t\t\t0.182868,\n\t\t\t0.550004,\n\t\t\t0.419608,\n\t\t\t0.714883,\n\t\t\t0.187299,\n\t\t\t0.546338,\n\t\t\t0.423529,\n\t\t\t0.719181,\n\t\t\t0.191729,\n\t\t\t0.542663,\n\t\t\t0.427451,\n\t\t\t0.723444,\n\t\t\t0.196158,\n\t\t\t0.538981,\n\t\t\t0.431373,\n\t\t\t0.72767,\n\t\t\t0.200586,\n\t\t\t0.535293,\n\t\t\t0.435294,\n\t\t\t0.731862,\n\t\t\t0.205013,\n\t\t\t0.531601,\n\t\t\t0.439216,\n\t\t\t0.736019,\n\t\t\t0.209439,\n\t\t\t0.527908,\n\t\t\t0.443137,\n\t\t\t0.740143,\n\t\t\t0.213864,\n\t\t\t0.524216,\n\t\t\t0.447059,\n\t\t\t0.744232,\n\t\t\t0.218288,\n\t\t\t0.520524,\n\t\t\t0.45098,\n\t\t\t0.748289,\n\t\t\t0.222711,\n\t\t\t0.516834,\n\t\t\t0.454902,\n\t\t\t0.752312,\n\t\t\t0.227133,\n\t\t\t0.513149,\n\t\t\t0.458824,\n\t\t\t0.756304,\n\t\t\t0.231555,\n\t\t\t0.509468,\n\t\t\t0.462745,\n\t\t\t0.760264,\n\t\t\t0.235976,\n\t\t\t0.505794,\n\t\t\t0.466667,\n\t\t\t0.764193,\n\t\t\t0.240396,\n\t\t\t0.502126,\n\t\t\t0.470588,\n\t\t\t0.76809,\n\t\t\t0.244817,\n\t\t\t0.498465,\n\t\t\t0.47451,\n\t\t\t0.771958,\n\t\t\t0.249237,\n\t\t\t0.494813,\n\t\t\t0.478431,\n\t\t\t0.775796,\n\t\t\t0.253658,\n\t\t\t0.491171,\n\t\t\t0.482353,\n\t\t\t0.779604,\n\t\t\t0.258078,\n\t\t\t0.487539,\n\t\t\t0.486275,\n\t\t\t0.783383,\n\t\t\t0.2625,\n\t\t\t0.483918,\n\t\t\t0.490196,\n\t\t\t0.787133,\n\t\t\t0.266922,\n\t\t\t0.480307,\n\t\t\t0.494118,\n\t\t\t0.790855,\n\t\t\t0.271345,\n\t\t\t0.476706,\n\t\t\t0.498039,\n\t\t\t0.794549,\n\t\t\t0.27577,\n\t\t\t0.473117,\n\t\t\t0.501961,\n\t\t\t0.798216,\n\t\t\t0.280197,\n\t\t\t0.469538,\n\t\t\t0.505882,\n\t\t\t0.801855,\n\t\t\t0.284626,\n\t\t\t0.465971,\n\t\t\t0.509804,\n\t\t\t0.805467,\n\t\t\t0.289057,\n\t\t\t0.462415,\n\t\t\t0.513725,\n\t\t\t0.809052,\n\t\t\t0.293491,\n\t\t\t0.45887,\n\t\t\t0.517647,\n\t\t\t0.812612,\n\t\t\t0.297928,\n\t\t\t0.455338,\n\t\t\t0.521569,\n\t\t\t0.816144,\n\t\t\t0.302368,\n\t\t\t0.451816,\n\t\t\t0.52549,\n\t\t\t0.819651,\n\t\t\t0.306812,\n\t\t\t0.448306,\n\t\t\t0.529412,\n\t\t\t0.823132,\n\t\t\t0.311261,\n\t\t\t0.444806,\n\t\t\t0.533333,\n\t\t\t0.826588,\n\t\t\t0.315714,\n\t\t\t0.441316,\n\t\t\t0.537255,\n\t\t\t0.830018,\n\t\t\t0.320172,\n\t\t\t0.437836,\n\t\t\t0.541176,\n\t\t\t0.833422,\n\t\t\t0.324635,\n\t\t\t0.434366,\n\t\t\t0.545098,\n\t\t\t0.836801,\n\t\t\t0.329105,\n\t\t\t0.430905,\n\t\t\t0.54902,\n\t\t\t0.840155,\n\t\t\t0.33358,\n\t\t\t0.427455,\n\t\t\t0.552941,\n\t\t\t0.843484,\n\t\t\t0.338062,\n\t\t\t0.424013,\n\t\t\t0.556863,\n\t\t\t0.846788,\n\t\t\t0.342551,\n\t\t\t0.420579,\n\t\t\t0.560784,\n\t\t\t0.850066,\n\t\t\t0.347048,\n\t\t\t0.417153,\n\t\t\t0.564706,\n\t\t\t0.853319,\n\t\t\t0.351553,\n\t\t\t0.413734,\n\t\t\t0.568627,\n\t\t\t0.856547,\n\t\t\t0.356066,\n\t\t\t0.410322,\n\t\t\t0.572549,\n\t\t\t0.85975,\n\t\t\t0.360588,\n\t\t\t0.406917,\n\t\t\t0.576471,\n\t\t\t0.862927,\n\t\t\t0.365119,\n\t\t\t0.403519,\n\t\t\t0.580392,\n\t\t\t0.866078,\n\t\t\t0.36966,\n\t\t\t0.400126,\n\t\t\t0.584314,\n\t\t\t0.869203,\n\t\t\t0.374212,\n\t\t\t0.396738,\n\t\t\t0.588235,\n\t\t\t0.872303,\n\t\t\t0.378774,\n\t\t\t0.393355,\n\t\t\t0.592157,\n\t\t\t0.875376,\n\t\t\t0.383347,\n\t\t\t0.389976,\n\t\t\t0.596078,\n\t\t\t0.878423,\n\t\t\t0.387932,\n\t\t\t0.3866,\n\t\t\t0.6,\n\t\t\t0.881443,\n\t\t\t0.392529,\n\t\t\t0.383229,\n\t\t\t0.603922,\n\t\t\t0.884436,\n\t\t\t0.397139,\n\t\t\t0.37986,\n\t\t\t0.607843,\n\t\t\t0.887402,\n\t\t\t0.401762,\n\t\t\t0.376494,\n\t\t\t0.611765,\n\t\t\t0.89034,\n\t\t\t0.406398,\n\t\t\t0.37313,\n\t\t\t0.615686,\n\t\t\t0.89325,\n\t\t\t0.411048,\n\t\t\t0.369768,\n\t\t\t0.619608,\n\t\t\t0.896131,\n\t\t\t0.415712,\n\t\t\t0.366407,\n\t\t\t0.623529,\n\t\t\t0.898984,\n\t\t\t0.420392,\n\t\t\t0.363047,\n\t\t\t0.627451,\n\t\t\t0.901807,\n\t\t\t0.425087,\n\t\t\t0.359688,\n\t\t\t0.631373,\n\t\t\t0.904601,\n\t\t\t0.429797,\n\t\t\t0.356329,\n\t\t\t0.635294,\n\t\t\t0.907365,\n\t\t\t0.434524,\n\t\t\t0.35297,\n\t\t\t0.639216,\n\t\t\t0.910098,\n\t\t\t0.439268,\n\t\t\t0.34961,\n\t\t\t0.643137,\n\t\t\t0.9128,\n\t\t\t0.444029,\n\t\t\t0.346251,\n\t\t\t0.647059,\n\t\t\t0.915471,\n\t\t\t0.448807,\n\t\t\t0.34289,\n\t\t\t0.65098,\n\t\t\t0.918109,\n\t\t\t0.453603,\n\t\t\t0.339529,\n\t\t\t0.654902,\n\t\t\t0.920714,\n\t\t\t0.458417,\n\t\t\t0.336166,\n\t\t\t0.658824,\n\t\t\t0.923287,\n\t\t\t0.463251,\n\t\t\t0.332801,\n\t\t\t0.662745,\n\t\t\t0.925825,\n\t\t\t0.468103,\n\t\t\t0.329435,\n\t\t\t0.666667,\n\t\t\t0.928329,\n\t\t\t0.472975,\n\t\t\t0.326067,\n\t\t\t0.670588,\n\t\t\t0.930798,\n\t\t\t0.477867,\n\t\t\t0.322697,\n\t\t\t0.67451,\n\t\t\t0.933232,\n\t\t\t0.48278,\n\t\t\t0.319325,\n\t\t\t0.678431,\n\t\t\t0.93563,\n\t\t\t0.487712,\n\t\t\t0.315952,\n\t\t\t0.682353,\n\t\t\t0.93799,\n\t\t\t0.492667,\n\t\t\t0.312575,\n\t\t\t0.686275,\n\t\t\t0.940313,\n\t\t\t0.497642,\n\t\t\t0.309197,\n\t\t\t0.690196,\n\t\t\t0.942598,\n\t\t\t0.502639,\n\t\t\t0.305816,\n\t\t\t0.694118,\n\t\t\t0.944844,\n\t\t\t0.507658,\n\t\t\t0.302433,\n\t\t\t0.698039,\n\t\t\t0.947051,\n\t\t\t0.512699,\n\t\t\t0.299049,\n\t\t\t0.701961,\n\t\t\t0.949217,\n\t\t\t0.517763,\n\t\t\t0.295662,\n\t\t\t0.705882,\n\t\t\t0.951344,\n\t\t\t0.52285,\n\t\t\t0.292275,\n\t\t\t0.709804,\n\t\t\t0.953428,\n\t\t\t0.52796,\n\t\t\t0.288883,\n\t\t\t0.713725,\n\t\t\t0.95547,\n\t\t\t0.533093,\n\t\t\t0.28549,\n\t\t\t0.717647,\n\t\t\t0.957469,\n\t\t\t0.53825,\n\t\t\t0.282096,\n\t\t\t0.721569,\n\t\t\t0.959424,\n\t\t\t0.543431,\n\t\t\t0.278701,\n\t\t\t0.72549,\n\t\t\t0.961336,\n\t\t\t0.548636,\n\t\t\t0.275305,\n\t\t\t0.729412,\n\t\t\t0.963203,\n\t\t\t0.553865,\n\t\t\t0.271909,\n\t\t\t0.733333,\n\t\t\t0.965024,\n\t\t\t0.559118,\n\t\t\t0.268513,\n\t\t\t0.737255,\n\t\t\t0.966798,\n\t\t\t0.564396,\n\t\t\t0.265118,\n\t\t\t0.741176,\n\t\t\t0.968526,\n\t\t\t0.5697,\n\t\t\t0.261721,\n\t\t\t0.745098,\n\t\t\t0.970205,\n\t\t\t0.575028,\n\t\t\t0.258325,\n\t\t\t0.74902,\n\t\t\t0.971835,\n\t\t\t0.580382,\n\t\t\t0.254931,\n\t\t\t0.752941,\n\t\t\t0.973416,\n\t\t\t0.585761,\n\t\t\t0.25154,\n\t\t\t0.756863,\n\t\t\t0.974947,\n\t\t\t0.591165,\n\t\t\t0.248151,\n\t\t\t0.760784,\n\t\t\t0.976428,\n\t\t\t0.596595,\n\t\t\t0.244767,\n\t\t\t0.764706,\n\t\t\t0.977856,\n\t\t\t0.602051,\n\t\t\t0.241387,\n\t\t\t0.768627,\n\t\t\t0.979233,\n\t\t\t0.607532,\n\t\t\t0.238013,\n\t\t\t0.772549,\n\t\t\t0.980556,\n\t\t\t0.613039,\n\t\t\t0.234646,\n\t\t\t0.776471,\n\t\t\t0.981826,\n\t\t\t0.618572,\n\t\t\t0.231287,\n\t\t\t0.780392,\n\t\t\t0.983041,\n\t\t\t0.624131,\n\t\t\t0.227937,\n\t\t\t0.784314,\n\t\t\t0.984199,\n\t\t\t0.629718,\n\t\t\t0.224595,\n\t\t\t0.788235,\n\t\t\t0.985301,\n\t\t\t0.63533,\n\t\t\t0.221265,\n\t\t\t0.792157,\n\t\t\t0.986345,\n\t\t\t0.640969,\n\t\t\t0.217948,\n\t\t\t0.796078,\n\t\t\t0.987332,\n\t\t\t0.646633,\n\t\t\t0.214648,\n\t\t\t0.8,\n\t\t\t0.98826,\n\t\t\t0.652325,\n\t\t\t0.211364,\n\t\t\t0.803922,\n\t\t\t0.989128,\n\t\t\t0.658043,\n\t\t\t0.2081,\n\t\t\t0.807843,\n\t\t\t0.989935,\n\t\t\t0.663787,\n\t\t\t0.204859,\n\t\t\t0.811765,\n\t\t\t0.990681,\n\t\t\t0.669558,\n\t\t\t0.201642,\n\t\t\t0.815686,\n\t\t\t0.991365,\n\t\t\t0.675355,\n\t\t\t0.198453,\n\t\t\t0.819608,\n\t\t\t0.991985,\n\t\t\t0.681179,\n\t\t\t0.195295,\n\t\t\t0.823529,\n\t\t\t0.992541,\n\t\t\t0.68703,\n\t\t\t0.19217,\n\t\t\t0.827451,\n\t\t\t0.993032,\n\t\t\t0.692907,\n\t\t\t0.189084,\n\t\t\t0.831373,\n\t\t\t0.993456,\n\t\t\t0.69881,\n\t\t\t0.186041,\n\t\t\t0.835294,\n\t\t\t0.993814,\n\t\t\t0.704741,\n\t\t\t0.183043,\n\t\t\t0.839216,\n\t\t\t0.994103,\n\t\t\t0.710698,\n\t\t\t0.180097,\n\t\t\t0.843137,\n\t\t\t0.994324,\n\t\t\t0.716681,\n\t\t\t0.177208,\n\t\t\t0.847059,\n\t\t\t0.994474,\n\t\t\t0.722691,\n\t\t\t0.174381,\n\t\t\t0.85098,\n\t\t\t0.994553,\n\t\t\t0.728728,\n\t\t\t0.171622,\n\t\t\t0.854902,\n\t\t\t0.994561,\n\t\t\t0.734791,\n\t\t\t0.168938,\n\t\t\t0.858824,\n\t\t\t0.994495,\n\t\t\t0.74088,\n\t\t\t0.166335,\n\t\t\t0.862745,\n\t\t\t0.994355,\n\t\t\t0.746995,\n\t\t\t0.163821,\n\t\t\t0.866667,\n\t\t\t0.994141,\n\t\t\t0.753137,\n\t\t\t0.161404,\n\t\t\t0.870588,\n\t\t\t0.993851,\n\t\t\t0.759304,\n\t\t\t0.159092,\n\t\t\t0.87451,\n\t\t\t0.993482,\n\t\t\t0.765499,\n\t\t\t0.156891,\n\t\t\t0.878431,\n\t\t\t0.993033,\n\t\t\t0.77172,\n\t\t\t0.154808,\n\t\t\t0.882353,\n\t\t\t0.992505,\n\t\t\t0.777967,\n\t\t\t0.152855,\n\t\t\t0.886275,\n\t\t\t0.991897,\n\t\t\t0.784239,\n\t\t\t0.151042,\n\t\t\t0.890196,\n\t\t\t0.991209,\n\t\t\t0.790537,\n\t\t\t0.149377,\n\t\t\t0.894118,\n\t\t\t0.990439,\n\t\t\t0.796859,\n\t\t\t0.14787,\n\t\t\t0.898039,\n\t\t\t0.989587,\n\t\t\t0.803205,\n\t\t\t0.146529,\n\t\t\t0.901961,\n\t\t\t0.988648,\n\t\t\t0.809579,\n\t\t\t0.145357,\n\t\t\t0.905882,\n\t\t\t0.987621,\n\t\t\t0.815978,\n\t\t\t0.144363,\n\t\t\t0.909804,\n\t\t\t0.986509,\n\t\t\t0.822401,\n\t\t\t0.143557,\n\t\t\t0.913725,\n\t\t\t0.985314,\n\t\t\t0.828846,\n\t\t\t0.142945,\n\t\t\t0.917647,\n\t\t\t0.984031,\n\t\t\t0.835315,\n\t\t\t0.142528,\n\t\t\t0.921569,\n\t\t\t0.982653,\n\t\t\t0.841812,\n\t\t\t0.142303,\n\t\t\t0.92549,\n\t\t\t0.98119,\n\t\t\t0.848329,\n\t\t\t0.142279,\n\t\t\t0.929412,\n\t\t\t0.979644,\n\t\t\t0.854866,\n\t\t\t0.142453,\n\t\t\t0.933333,\n\t\t\t0.977995,\n\t\t\t0.861432,\n\t\t\t0.142808,\n\t\t\t0.937255,\n\t\t\t0.976265,\n\t\t\t0.868016,\n\t\t\t0.143351,\n\t\t\t0.941176,\n\t\t\t0.974443,\n\t\t\t0.874622,\n\t\t\t0.144061,\n\t\t\t0.945098,\n\t\t\t0.97253,\n\t\t\t0.88125,\n\t\t\t0.144923,\n\t\t\t0.94902,\n\t\t\t0.970533,\n\t\t\t0.887896,\n\t\t\t0.145919,\n\t\t\t0.952941,\n\t\t\t0.968443,\n\t\t\t0.894564,\n\t\t\t0.147014,\n\t\t\t0.956863,\n\t\t\t0.966271,\n\t\t\t0.901249,\n\t\t\t0.14818,\n\t\t\t0.960784,\n\t\t\t0.964021,\n\t\t\t0.90795,\n\t\t\t0.14937,\n\t\t\t0.964706,\n\t\t\t0.961681,\n\t\t\t0.914672,\n\t\t\t0.15052,\n\t\t\t0.968627,\n\t\t\t0.959276,\n\t\t\t0.921407,\n\t\t\t0.151566,\n\t\t\t0.972549,\n\t\t\t0.956808,\n\t\t\t0.928152,\n\t\t\t0.152409,\n\t\t\t0.976471,\n\t\t\t0.954287,\n\t\t\t0.934908,\n\t\t\t0.152921,\n\t\t\t0.980392,\n\t\t\t0.951726,\n\t\t\t0.941671,\n\t\t\t0.152925,\n\t\t\t0.984314,\n\t\t\t0.949151,\n\t\t\t0.948435,\n\t\t\t0.152178,\n\t\t\t0.988235,\n\t\t\t0.946602,\n\t\t\t0.95519,\n\t\t\t0.150328,\n\t\t\t0.992157,\n\t\t\t0.944152,\n\t\t\t0.961916,\n\t\t\t0.146861,\n\t\t\t0.996078,\n\t\t\t0.941896,\n\t\t\t0.96859,\n\t\t\t0.140956,\n\t\t\t1,\n\t\t\t0.940015,\n\t\t\t0.975158,\n\t\t\t0.131326\n\t\t]\n\t},\n\t{\n\t\tColorSpace: \"Diverging\",\n\t\tName: \"Viridis (matplotlib)\",\n\t\tNanColor: [\n\t\t\t1,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tSource: \"https://github.com/BIDS/colormap/blob/master/colormaps.py\",\n\t\tLicense: \"CC0\",\n\t\tCreator: \"Eric Firing\",\n\t\tRGBPoints: [\n\t\t\t0,\n\t\t\t0.267004,\n\t\t\t0.004874,\n\t\t\t0.329415,\n\t\t\t0.003922,\n\t\t\t0.26851,\n\t\t\t0.009605,\n\t\t\t0.335427,\n\t\t\t0.007843,\n\t\t\t0.269944,\n\t\t\t0.014625,\n\t\t\t0.341379,\n\t\t\t0.011765,\n\t\t\t0.271305,\n\t\t\t0.019942,\n\t\t\t0.347269,\n\t\t\t0.015686,\n\t\t\t0.272594,\n\t\t\t0.025563,\n\t\t\t0.353093,\n\t\t\t0.019608,\n\t\t\t0.273809,\n\t\t\t0.031497,\n\t\t\t0.358853,\n\t\t\t0.023529,\n\t\t\t0.274952,\n\t\t\t0.037752,\n\t\t\t0.364543,\n\t\t\t0.027451,\n\t\t\t0.276022,\n\t\t\t0.044167,\n\t\t\t0.370164,\n\t\t\t0.031373,\n\t\t\t0.277018,\n\t\t\t0.050344,\n\t\t\t0.375715,\n\t\t\t0.035294,\n\t\t\t0.277941,\n\t\t\t0.056324,\n\t\t\t0.381191,\n\t\t\t0.039216,\n\t\t\t0.278791,\n\t\t\t0.062145,\n\t\t\t0.386592,\n\t\t\t0.043137,\n\t\t\t0.279566,\n\t\t\t0.067836,\n\t\t\t0.391917,\n\t\t\t0.047059,\n\t\t\t0.280267,\n\t\t\t0.073417,\n\t\t\t0.397163,\n\t\t\t0.05098,\n\t\t\t0.280894,\n\t\t\t0.078907,\n\t\t\t0.402329,\n\t\t\t0.054902,\n\t\t\t0.281446,\n\t\t\t0.08432,\n\t\t\t0.407414,\n\t\t\t0.058824,\n\t\t\t0.281924,\n\t\t\t0.089666,\n\t\t\t0.412415,\n\t\t\t0.062745,\n\t\t\t0.282327,\n\t\t\t0.094955,\n\t\t\t0.417331,\n\t\t\t0.066667,\n\t\t\t0.282656,\n\t\t\t0.100196,\n\t\t\t0.42216,\n\t\t\t0.070588,\n\t\t\t0.28291,\n\t\t\t0.105393,\n\t\t\t0.426902,\n\t\t\t0.07451,\n\t\t\t0.283091,\n\t\t\t0.110553,\n\t\t\t0.431554,\n\t\t\t0.078431,\n\t\t\t0.283197,\n\t\t\t0.11568,\n\t\t\t0.436115,\n\t\t\t0.082353,\n\t\t\t0.283229,\n\t\t\t0.120777,\n\t\t\t0.440584,\n\t\t\t0.086275,\n\t\t\t0.283187,\n\t\t\t0.125848,\n\t\t\t0.44496,\n\t\t\t0.090196,\n\t\t\t0.283072,\n\t\t\t0.130895,\n\t\t\t0.449241,\n\t\t\t0.094118,\n\t\t\t0.282884,\n\t\t\t0.13592,\n\t\t\t0.453427,\n\t\t\t0.098039,\n\t\t\t0.282623,\n\t\t\t0.140926,\n\t\t\t0.457517,\n\t\t\t0.101961,\n\t\t\t0.28229,\n\t\t\t0.145912,\n\t\t\t0.46151,\n\t\t\t0.105882,\n\t\t\t0.281887,\n\t\t\t0.150881,\n\t\t\t0.465405,\n\t\t\t0.109804,\n\t\t\t0.281412,\n\t\t\t0.155834,\n\t\t\t0.469201,\n\t\t\t0.113725,\n\t\t\t0.280868,\n\t\t\t0.160771,\n\t\t\t0.472899,\n\t\t\t0.117647,\n\t\t\t0.280255,\n\t\t\t0.165693,\n\t\t\t0.476498,\n\t\t\t0.121569,\n\t\t\t0.279574,\n\t\t\t0.170599,\n\t\t\t0.479997,\n\t\t\t0.12549,\n\t\t\t0.278826,\n\t\t\t0.17549,\n\t\t\t0.483397,\n\t\t\t0.129412,\n\t\t\t0.278012,\n\t\t\t0.180367,\n\t\t\t0.486697,\n\t\t\t0.133333,\n\t\t\t0.277134,\n\t\t\t0.185228,\n\t\t\t0.489898,\n\t\t\t0.137255,\n\t\t\t0.276194,\n\t\t\t0.190074,\n\t\t\t0.493001,\n\t\t\t0.141176,\n\t\t\t0.275191,\n\t\t\t0.194905,\n\t\t\t0.496005,\n\t\t\t0.145098,\n\t\t\t0.274128,\n\t\t\t0.199721,\n\t\t\t0.498911,\n\t\t\t0.14902,\n\t\t\t0.273006,\n\t\t\t0.20452,\n\t\t\t0.501721,\n\t\t\t0.152941,\n\t\t\t0.271828,\n\t\t\t0.209303,\n\t\t\t0.504434,\n\t\t\t0.156863,\n\t\t\t0.270595,\n\t\t\t0.214069,\n\t\t\t0.507052,\n\t\t\t0.160784,\n\t\t\t0.269308,\n\t\t\t0.218818,\n\t\t\t0.509577,\n\t\t\t0.164706,\n\t\t\t0.267968,\n\t\t\t0.223549,\n\t\t\t0.512008,\n\t\t\t0.168627,\n\t\t\t0.26658,\n\t\t\t0.228262,\n\t\t\t0.514349,\n\t\t\t0.172549,\n\t\t\t0.265145,\n\t\t\t0.232956,\n\t\t\t0.516599,\n\t\t\t0.176471,\n\t\t\t0.263663,\n\t\t\t0.237631,\n\t\t\t0.518762,\n\t\t\t0.180392,\n\t\t\t0.262138,\n\t\t\t0.242286,\n\t\t\t0.520837,\n\t\t\t0.184314,\n\t\t\t0.260571,\n\t\t\t0.246922,\n\t\t\t0.522828,\n\t\t\t0.188235,\n\t\t\t0.258965,\n\t\t\t0.251537,\n\t\t\t0.524736,\n\t\t\t0.192157,\n\t\t\t0.257322,\n\t\t\t0.25613,\n\t\t\t0.526563,\n\t\t\t0.196078,\n\t\t\t0.255645,\n\t\t\t0.260703,\n\t\t\t0.528312,\n\t\t\t0.2,\n\t\t\t0.253935,\n\t\t\t0.265254,\n\t\t\t0.529983,\n\t\t\t0.203922,\n\t\t\t0.252194,\n\t\t\t0.269783,\n\t\t\t0.531579,\n\t\t\t0.207843,\n\t\t\t0.250425,\n\t\t\t0.27429,\n\t\t\t0.533103,\n\t\t\t0.211765,\n\t\t\t0.248629,\n\t\t\t0.278775,\n\t\t\t0.534556,\n\t\t\t0.215686,\n\t\t\t0.246811,\n\t\t\t0.283237,\n\t\t\t0.535941,\n\t\t\t0.219608,\n\t\t\t0.244972,\n\t\t\t0.287675,\n\t\t\t0.53726,\n\t\t\t0.223529,\n\t\t\t0.243113,\n\t\t\t0.292092,\n\t\t\t0.538516,\n\t\t\t0.227451,\n\t\t\t0.241237,\n\t\t\t0.296485,\n\t\t\t0.539709,\n\t\t\t0.231373,\n\t\t\t0.239346,\n\t\t\t0.300855,\n\t\t\t0.540844,\n\t\t\t0.235294,\n\t\t\t0.237441,\n\t\t\t0.305202,\n\t\t\t0.541921,\n\t\t\t0.239216,\n\t\t\t0.235526,\n\t\t\t0.309527,\n\t\t\t0.542944,\n\t\t\t0.243137,\n\t\t\t0.233603,\n\t\t\t0.313828,\n\t\t\t0.543914,\n\t\t\t0.247059,\n\t\t\t0.231674,\n\t\t\t0.318106,\n\t\t\t0.544834,\n\t\t\t0.25098,\n\t\t\t0.229739,\n\t\t\t0.322361,\n\t\t\t0.545706,\n\t\t\t0.254902,\n\t\t\t0.227802,\n\t\t\t0.326594,\n\t\t\t0.546532,\n\t\t\t0.258824,\n\t\t\t0.225863,\n\t\t\t0.330805,\n\t\t\t0.547314,\n\t\t\t0.262745,\n\t\t\t0.223925,\n\t\t\t0.334994,\n\t\t\t0.548053,\n\t\t\t0.266667,\n\t\t\t0.221989,\n\t\t\t0.339161,\n\t\t\t0.548752,\n\t\t\t0.270588,\n\t\t\t0.220057,\n\t\t\t0.343307,\n\t\t\t0.549413,\n\t\t\t0.27451,\n\t\t\t0.21813,\n\t\t\t0.347432,\n\t\t\t0.550038,\n\t\t\t0.278431,\n\t\t\t0.21621,\n\t\t\t0.351535,\n\t\t\t0.550627,\n\t\t\t0.282353,\n\t\t\t0.214298,\n\t\t\t0.355619,\n\t\t\t0.551184,\n\t\t\t0.286275,\n\t\t\t0.212395,\n\t\t\t0.359683,\n\t\t\t0.55171,\n\t\t\t0.290196,\n\t\t\t0.210503,\n\t\t\t0.363727,\n\t\t\t0.552206,\n\t\t\t0.294118,\n\t\t\t0.208623,\n\t\t\t0.367752,\n\t\t\t0.552675,\n\t\t\t0.298039,\n\t\t\t0.206756,\n\t\t\t0.371758,\n\t\t\t0.553117,\n\t\t\t0.301961,\n\t\t\t0.204903,\n\t\t\t0.375746,\n\t\t\t0.553533,\n\t\t\t0.305882,\n\t\t\t0.203063,\n\t\t\t0.379716,\n\t\t\t0.553925,\n\t\t\t0.309804,\n\t\t\t0.201239,\n\t\t\t0.38367,\n\t\t\t0.554294,\n\t\t\t0.313725,\n\t\t\t0.19943,\n\t\t\t0.387607,\n\t\t\t0.554642,\n\t\t\t0.317647,\n\t\t\t0.197636,\n\t\t\t0.391528,\n\t\t\t0.554969,\n\t\t\t0.321569,\n\t\t\t0.19586,\n\t\t\t0.395433,\n\t\t\t0.555276,\n\t\t\t0.32549,\n\t\t\t0.1941,\n\t\t\t0.399323,\n\t\t\t0.555565,\n\t\t\t0.329412,\n\t\t\t0.192357,\n\t\t\t0.403199,\n\t\t\t0.555836,\n\t\t\t0.333333,\n\t\t\t0.190631,\n\t\t\t0.407061,\n\t\t\t0.556089,\n\t\t\t0.337255,\n\t\t\t0.188923,\n\t\t\t0.41091,\n\t\t\t0.556326,\n\t\t\t0.341176,\n\t\t\t0.187231,\n\t\t\t0.414746,\n\t\t\t0.556547,\n\t\t\t0.345098,\n\t\t\t0.185556,\n\t\t\t0.41857,\n\t\t\t0.556753,\n\t\t\t0.34902,\n\t\t\t0.183898,\n\t\t\t0.422383,\n\t\t\t0.556944,\n\t\t\t0.352941,\n\t\t\t0.182256,\n\t\t\t0.426184,\n\t\t\t0.55712,\n\t\t\t0.356863,\n\t\t\t0.180629,\n\t\t\t0.429975,\n\t\t\t0.557282,\n\t\t\t0.360784,\n\t\t\t0.179019,\n\t\t\t0.433756,\n\t\t\t0.55743,\n\t\t\t0.364706,\n\t\t\t0.177423,\n\t\t\t0.437527,\n\t\t\t0.557565,\n\t\t\t0.368627,\n\t\t\t0.175841,\n\t\t\t0.44129,\n\t\t\t0.557685,\n\t\t\t0.372549,\n\t\t\t0.174274,\n\t\t\t0.445044,\n\t\t\t0.557792,\n\t\t\t0.376471,\n\t\t\t0.172719,\n\t\t\t0.448791,\n\t\t\t0.557885,\n\t\t\t0.380392,\n\t\t\t0.171176,\n\t\t\t0.45253,\n\t\t\t0.557965,\n\t\t\t0.384314,\n\t\t\t0.169646,\n\t\t\t0.456262,\n\t\t\t0.55803,\n\t\t\t0.388235,\n\t\t\t0.168126,\n\t\t\t0.459988,\n\t\t\t0.558082,\n\t\t\t0.392157,\n\t\t\t0.166617,\n\t\t\t0.463708,\n\t\t\t0.558119,\n\t\t\t0.396078,\n\t\t\t0.165117,\n\t\t\t0.467423,\n\t\t\t0.558141,\n\t\t\t0.4,\n\t\t\t0.163625,\n\t\t\t0.471133,\n\t\t\t0.558148,\n\t\t\t0.403922,\n\t\t\t0.162142,\n\t\t\t0.474838,\n\t\t\t0.55814,\n\t\t\t0.407843,\n\t\t\t0.160665,\n\t\t\t0.47854,\n\t\t\t0.558115,\n\t\t\t0.411765,\n\t\t\t0.159194,\n\t\t\t0.482237,\n\t\t\t0.558073,\n\t\t\t0.415686,\n\t\t\t0.157729,\n\t\t\t0.485932,\n\t\t\t0.558013,\n\t\t\t0.419608,\n\t\t\t0.15627,\n\t\t\t0.489624,\n\t\t\t0.557936,\n\t\t\t0.423529,\n\t\t\t0.154815,\n\t\t\t0.493313,\n\t\t\t0.55784,\n\t\t\t0.427451,\n\t\t\t0.153364,\n\t\t\t0.497,\n\t\t\t0.557724,\n\t\t\t0.431373,\n\t\t\t0.151918,\n\t\t\t0.500685,\n\t\t\t0.557587,\n\t\t\t0.435294,\n\t\t\t0.150476,\n\t\t\t0.504369,\n\t\t\t0.55743,\n\t\t\t0.439216,\n\t\t\t0.149039,\n\t\t\t0.508051,\n\t\t\t0.55725,\n\t\t\t0.443137,\n\t\t\t0.147607,\n\t\t\t0.511733,\n\t\t\t0.557049,\n\t\t\t0.447059,\n\t\t\t0.14618,\n\t\t\t0.515413,\n\t\t\t0.556823,\n\t\t\t0.45098,\n\t\t\t0.144759,\n\t\t\t0.519093,\n\t\t\t0.556572,\n\t\t\t0.454902,\n\t\t\t0.143343,\n\t\t\t0.522773,\n\t\t\t0.556295,\n\t\t\t0.458824,\n\t\t\t0.141935,\n\t\t\t0.526453,\n\t\t\t0.555991,\n\t\t\t0.462745,\n\t\t\t0.140536,\n\t\t\t0.530132,\n\t\t\t0.555659,\n\t\t\t0.466667,\n\t\t\t0.139147,\n\t\t\t0.533812,\n\t\t\t0.555298,\n\t\t\t0.470588,\n\t\t\t0.13777,\n\t\t\t0.537492,\n\t\t\t0.554906,\n\t\t\t0.47451,\n\t\t\t0.136408,\n\t\t\t0.541173,\n\t\t\t0.554483,\n\t\t\t0.478431,\n\t\t\t0.135066,\n\t\t\t0.544853,\n\t\t\t0.554029,\n\t\t\t0.482353,\n\t\t\t0.133743,\n\t\t\t0.548535,\n\t\t\t0.553541,\n\t\t\t0.486275,\n\t\t\t0.132444,\n\t\t\t0.552216,\n\t\t\t0.553018,\n\t\t\t0.490196,\n\t\t\t0.131172,\n\t\t\t0.555899,\n\t\t\t0.552459,\n\t\t\t0.494118,\n\t\t\t0.129933,\n\t\t\t0.559582,\n\t\t\t0.551864,\n\t\t\t0.498039,\n\t\t\t0.128729,\n\t\t\t0.563265,\n\t\t\t0.551229,\n\t\t\t0.501961,\n\t\t\t0.127568,\n\t\t\t0.566949,\n\t\t\t0.550556,\n\t\t\t0.505882,\n\t\t\t0.126453,\n\t\t\t0.570633,\n\t\t\t0.549841,\n\t\t\t0.509804,\n\t\t\t0.125394,\n\t\t\t0.574318,\n\t\t\t0.549086,\n\t\t\t0.513725,\n\t\t\t0.124395,\n\t\t\t0.578002,\n\t\t\t0.548287,\n\t\t\t0.517647,\n\t\t\t0.123463,\n\t\t\t0.581687,\n\t\t\t0.547445,\n\t\t\t0.521569,\n\t\t\t0.122606,\n\t\t\t0.585371,\n\t\t\t0.546557,\n\t\t\t0.52549,\n\t\t\t0.121831,\n\t\t\t0.589055,\n\t\t\t0.545623,\n\t\t\t0.529412,\n\t\t\t0.121148,\n\t\t\t0.592739,\n\t\t\t0.544641,\n\t\t\t0.533333,\n\t\t\t0.120565,\n\t\t\t0.596422,\n\t\t\t0.543611,\n\t\t\t0.537255,\n\t\t\t0.120092,\n\t\t\t0.600104,\n\t\t\t0.54253,\n\t\t\t0.541176,\n\t\t\t0.119738,\n\t\t\t0.603785,\n\t\t\t0.5414,\n\t\t\t0.545098,\n\t\t\t0.119512,\n\t\t\t0.607464,\n\t\t\t0.540218,\n\t\t\t0.54902,\n\t\t\t0.119423,\n\t\t\t0.611141,\n\t\t\t0.538982,\n\t\t\t0.552941,\n\t\t\t0.119483,\n\t\t\t0.614817,\n\t\t\t0.537692,\n\t\t\t0.556863,\n\t\t\t0.119699,\n\t\t\t0.61849,\n\t\t\t0.536347,\n\t\t\t0.560784,\n\t\t\t0.120081,\n\t\t\t0.622161,\n\t\t\t0.534946,\n\t\t\t0.564706,\n\t\t\t0.120638,\n\t\t\t0.625828,\n\t\t\t0.533488,\n\t\t\t0.568627,\n\t\t\t0.12138,\n\t\t\t0.629492,\n\t\t\t0.531973,\n\t\t\t0.572549,\n\t\t\t0.122312,\n\t\t\t0.633153,\n\t\t\t0.530398,\n\t\t\t0.576471,\n\t\t\t0.123444,\n\t\t\t0.636809,\n\t\t\t0.528763,\n\t\t\t0.580392,\n\t\t\t0.12478,\n\t\t\t0.640461,\n\t\t\t0.527068,\n\t\t\t0.584314,\n\t\t\t0.126326,\n\t\t\t0.644107,\n\t\t\t0.525311,\n\t\t\t0.588235,\n\t\t\t0.128087,\n\t\t\t0.647749,\n\t\t\t0.523491,\n\t\t\t0.592157,\n\t\t\t0.130067,\n\t\t\t0.651384,\n\t\t\t0.521608,\n\t\t\t0.596078,\n\t\t\t0.132268,\n\t\t\t0.655014,\n\t\t\t0.519661,\n\t\t\t0.6,\n\t\t\t0.134692,\n\t\t\t0.658636,\n\t\t\t0.517649,\n\t\t\t0.603922,\n\t\t\t0.137339,\n\t\t\t0.662252,\n\t\t\t0.515571,\n\t\t\t0.607843,\n\t\t\t0.14021,\n\t\t\t0.665859,\n\t\t\t0.513427,\n\t\t\t0.611765,\n\t\t\t0.143303,\n\t\t\t0.669459,\n\t\t\t0.511215,\n\t\t\t0.615686,\n\t\t\t0.146616,\n\t\t\t0.67305,\n\t\t\t0.508936,\n\t\t\t0.619608,\n\t\t\t0.150148,\n\t\t\t0.676631,\n\t\t\t0.506589,\n\t\t\t0.623529,\n\t\t\t0.153894,\n\t\t\t0.680203,\n\t\t\t0.504172,\n\t\t\t0.627451,\n\t\t\t0.157851,\n\t\t\t0.683765,\n\t\t\t0.501686,\n\t\t\t0.631373,\n\t\t\t0.162016,\n\t\t\t0.687316,\n\t\t\t0.499129,\n\t\t\t0.635294,\n\t\t\t0.166383,\n\t\t\t0.690856,\n\t\t\t0.496502,\n\t\t\t0.639216,\n\t\t\t0.170948,\n\t\t\t0.694384,\n\t\t\t0.493803,\n\t\t\t0.643137,\n\t\t\t0.175707,\n\t\t\t0.6979,\n\t\t\t0.491033,\n\t\t\t0.647059,\n\t\t\t0.180653,\n\t\t\t0.701402,\n\t\t\t0.488189,\n\t\t\t0.65098,\n\t\t\t0.185783,\n\t\t\t0.704891,\n\t\t\t0.485273,\n\t\t\t0.654902,\n\t\t\t0.19109,\n\t\t\t0.708366,\n\t\t\t0.482284,\n\t\t\t0.658824,\n\t\t\t0.196571,\n\t\t\t0.711827,\n\t\t\t0.479221,\n\t\t\t0.662745,\n\t\t\t0.202219,\n\t\t\t0.715272,\n\t\t\t0.476084,\n\t\t\t0.666667,\n\t\t\t0.20803,\n\t\t\t0.718701,\n\t\t\t0.472873,\n\t\t\t0.670588,\n\t\t\t0.214,\n\t\t\t0.722114,\n\t\t\t0.469588,\n\t\t\t0.67451,\n\t\t\t0.220124,\n\t\t\t0.725509,\n\t\t\t0.466226,\n\t\t\t0.678431,\n\t\t\t0.226397,\n\t\t\t0.728888,\n\t\t\t0.462789,\n\t\t\t0.682353,\n\t\t\t0.232815,\n\t\t\t0.732247,\n\t\t\t0.459277,\n\t\t\t0.686275,\n\t\t\t0.239374,\n\t\t\t0.735588,\n\t\t\t0.455688,\n\t\t\t0.690196,\n\t\t\t0.24607,\n\t\t\t0.73891,\n\t\t\t0.452024,\n\t\t\t0.694118,\n\t\t\t0.252899,\n\t\t\t0.742211,\n\t\t\t0.448284,\n\t\t\t0.698039,\n\t\t\t0.259857,\n\t\t\t0.745492,\n\t\t\t0.444467,\n\t\t\t0.701961,\n\t\t\t0.266941,\n\t\t\t0.748751,\n\t\t\t0.440573,\n\t\t\t0.705882,\n\t\t\t0.274149,\n\t\t\t0.751988,\n\t\t\t0.436601,\n\t\t\t0.709804,\n\t\t\t0.281477,\n\t\t\t0.755203,\n\t\t\t0.432552,\n\t\t\t0.713725,\n\t\t\t0.288921,\n\t\t\t0.758394,\n\t\t\t0.428426,\n\t\t\t0.717647,\n\t\t\t0.296479,\n\t\t\t0.761561,\n\t\t\t0.424223,\n\t\t\t0.721569,\n\t\t\t0.304148,\n\t\t\t0.764704,\n\t\t\t0.419943,\n\t\t\t0.72549,\n\t\t\t0.311925,\n\t\t\t0.767822,\n\t\t\t0.415586,\n\t\t\t0.729412,\n\t\t\t0.319809,\n\t\t\t0.770914,\n\t\t\t0.411152,\n\t\t\t0.733333,\n\t\t\t0.327796,\n\t\t\t0.77398,\n\t\t\t0.40664,\n\t\t\t0.737255,\n\t\t\t0.335885,\n\t\t\t0.777018,\n\t\t\t0.402049,\n\t\t\t0.741176,\n\t\t\t0.344074,\n\t\t\t0.780029,\n\t\t\t0.397381,\n\t\t\t0.745098,\n\t\t\t0.35236,\n\t\t\t0.783011,\n\t\t\t0.392636,\n\t\t\t0.74902,\n\t\t\t0.360741,\n\t\t\t0.785964,\n\t\t\t0.387814,\n\t\t\t0.752941,\n\t\t\t0.369214,\n\t\t\t0.788888,\n\t\t\t0.382914,\n\t\t\t0.756863,\n\t\t\t0.377779,\n\t\t\t0.791781,\n\t\t\t0.377939,\n\t\t\t0.760784,\n\t\t\t0.386433,\n\t\t\t0.794644,\n\t\t\t0.372886,\n\t\t\t0.764706,\n\t\t\t0.395174,\n\t\t\t0.797475,\n\t\t\t0.367757,\n\t\t\t0.768627,\n\t\t\t0.404001,\n\t\t\t0.800275,\n\t\t\t0.362552,\n\t\t\t0.772549,\n\t\t\t0.412913,\n\t\t\t0.803041,\n\t\t\t0.357269,\n\t\t\t0.776471,\n\t\t\t0.421908,\n\t\t\t0.805774,\n\t\t\t0.35191,\n\t\t\t0.780392,\n\t\t\t0.430983,\n\t\t\t0.808473,\n\t\t\t0.346476,\n\t\t\t0.784314,\n\t\t\t0.440137,\n\t\t\t0.811138,\n\t\t\t0.340967,\n\t\t\t0.788235,\n\t\t\t0.449368,\n\t\t\t0.813768,\n\t\t\t0.335384,\n\t\t\t0.792157,\n\t\t\t0.458674,\n\t\t\t0.816363,\n\t\t\t0.329727,\n\t\t\t0.796078,\n\t\t\t0.468053,\n\t\t\t0.818921,\n\t\t\t0.323998,\n\t\t\t0.8,\n\t\t\t0.477504,\n\t\t\t0.821444,\n\t\t\t0.318195,\n\t\t\t0.803922,\n\t\t\t0.487026,\n\t\t\t0.823929,\n\t\t\t0.312321,\n\t\t\t0.807843,\n\t\t\t0.496615,\n\t\t\t0.826376,\n\t\t\t0.306377,\n\t\t\t0.811765,\n\t\t\t0.506271,\n\t\t\t0.828786,\n\t\t\t0.300362,\n\t\t\t0.815686,\n\t\t\t0.515992,\n\t\t\t0.831158,\n\t\t\t0.294279,\n\t\t\t0.819608,\n\t\t\t0.525776,\n\t\t\t0.833491,\n\t\t\t0.288127,\n\t\t\t0.823529,\n\t\t\t0.535621,\n\t\t\t0.835785,\n\t\t\t0.281908,\n\t\t\t0.827451,\n\t\t\t0.545524,\n\t\t\t0.838039,\n\t\t\t0.275626,\n\t\t\t0.831373,\n\t\t\t0.555484,\n\t\t\t0.840254,\n\t\t\t0.269281,\n\t\t\t0.835294,\n\t\t\t0.565498,\n\t\t\t0.84243,\n\t\t\t0.262877,\n\t\t\t0.839216,\n\t\t\t0.575563,\n\t\t\t0.844566,\n\t\t\t0.256415,\n\t\t\t0.843137,\n\t\t\t0.585678,\n\t\t\t0.846661,\n\t\t\t0.249897,\n\t\t\t0.847059,\n\t\t\t0.595839,\n\t\t\t0.848717,\n\t\t\t0.243329,\n\t\t\t0.85098,\n\t\t\t0.606045,\n\t\t\t0.850733,\n\t\t\t0.236712,\n\t\t\t0.854902,\n\t\t\t0.616293,\n\t\t\t0.852709,\n\t\t\t0.230052,\n\t\t\t0.858824,\n\t\t\t0.626579,\n\t\t\t0.854645,\n\t\t\t0.223353,\n\t\t\t0.862745,\n\t\t\t0.636902,\n\t\t\t0.856542,\n\t\t\t0.21662,\n\t\t\t0.866667,\n\t\t\t0.647257,\n\t\t\t0.8584,\n\t\t\t0.209861,\n\t\t\t0.870588,\n\t\t\t0.657642,\n\t\t\t0.860219,\n\t\t\t0.203082,\n\t\t\t0.87451,\n\t\t\t0.668054,\n\t\t\t0.861999,\n\t\t\t0.196293,\n\t\t\t0.878431,\n\t\t\t0.678489,\n\t\t\t0.863742,\n\t\t\t0.189503,\n\t\t\t0.882353,\n\t\t\t0.688944,\n\t\t\t0.865448,\n\t\t\t0.182725,\n\t\t\t0.886275,\n\t\t\t0.699415,\n\t\t\t0.867117,\n\t\t\t0.175971,\n\t\t\t0.890196,\n\t\t\t0.709898,\n\t\t\t0.868751,\n\t\t\t0.169257,\n\t\t\t0.894118,\n\t\t\t0.720391,\n\t\t\t0.87035,\n\t\t\t0.162603,\n\t\t\t0.898039,\n\t\t\t0.730889,\n\t\t\t0.871916,\n\t\t\t0.156029,\n\t\t\t0.901961,\n\t\t\t0.741388,\n\t\t\t0.873449,\n\t\t\t0.149561,\n\t\t\t0.905882,\n\t\t\t0.751884,\n\t\t\t0.874951,\n\t\t\t0.143228,\n\t\t\t0.909804,\n\t\t\t0.762373,\n\t\t\t0.876424,\n\t\t\t0.137064,\n\t\t\t0.913725,\n\t\t\t0.772852,\n\t\t\t0.877868,\n\t\t\t0.131109,\n\t\t\t0.917647,\n\t\t\t0.783315,\n\t\t\t0.879285,\n\t\t\t0.125405,\n\t\t\t0.921569,\n\t\t\t0.79376,\n\t\t\t0.880678,\n\t\t\t0.120005,\n\t\t\t0.92549,\n\t\t\t0.804182,\n\t\t\t0.882046,\n\t\t\t0.114965,\n\t\t\t0.929412,\n\t\t\t0.814576,\n\t\t\t0.883393,\n\t\t\t0.110347,\n\t\t\t0.933333,\n\t\t\t0.82494,\n\t\t\t0.88472,\n\t\t\t0.106217,\n\t\t\t0.937255,\n\t\t\t0.83527,\n\t\t\t0.886029,\n\t\t\t0.102646,\n\t\t\t0.941176,\n\t\t\t0.845561,\n\t\t\t0.887322,\n\t\t\t0.099702,\n\t\t\t0.945098,\n\t\t\t0.85581,\n\t\t\t0.888601,\n\t\t\t0.097452,\n\t\t\t0.94902,\n\t\t\t0.866013,\n\t\t\t0.889868,\n\t\t\t0.095953,\n\t\t\t0.952941,\n\t\t\t0.876168,\n\t\t\t0.891125,\n\t\t\t0.09525,\n\t\t\t0.956863,\n\t\t\t0.886271,\n\t\t\t0.892374,\n\t\t\t0.095374,\n\t\t\t0.960784,\n\t\t\t0.89632,\n\t\t\t0.893616,\n\t\t\t0.096335,\n\t\t\t0.964706,\n\t\t\t0.906311,\n\t\t\t0.894855,\n\t\t\t0.098125,\n\t\t\t0.968627,\n\t\t\t0.916242,\n\t\t\t0.896091,\n\t\t\t0.100717,\n\t\t\t0.972549,\n\t\t\t0.926106,\n\t\t\t0.89733,\n\t\t\t0.104071,\n\t\t\t0.976471,\n\t\t\t0.935904,\n\t\t\t0.89857,\n\t\t\t0.108131,\n\t\t\t0.980392,\n\t\t\t0.945636,\n\t\t\t0.899815,\n\t\t\t0.112838,\n\t\t\t0.984314,\n\t\t\t0.9553,\n\t\t\t0.901065,\n\t\t\t0.118128,\n\t\t\t0.988235,\n\t\t\t0.964894,\n\t\t\t0.902323,\n\t\t\t0.123941,\n\t\t\t0.992157,\n\t\t\t0.974417,\n\t\t\t0.90359,\n\t\t\t0.130215,\n\t\t\t0.996078,\n\t\t\t0.983868,\n\t\t\t0.904867,\n\t\t\t0.136897,\n\t\t\t1,\n\t\t\t0.993248,\n\t\t\t0.906157,\n\t\t\t0.143936\n\t\t]\n\t},\n\t{\n\t\tShowIndexedColorActiveValues: 1,\n\t\tIndexedColors: [\n\t\t\t0.07,\n\t\t\t0.5,\n\t\t\t0.7,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.85,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.8,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t0.76,\n\t\t\t1,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.71,\n\t\t\t0.71,\n\t\t\t0.5,\n\t\t\t0.5,\n\t\t\t0.5,\n\t\t\t0.05,\n\t\t\t0.05,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.05,\n\t\t\t0.05,\n\t\t\t0.7,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.7,\n\t\t\t0.89,\n\t\t\t0.96,\n\t\t\t0.67,\n\t\t\t0.36,\n\t\t\t0.95,\n\t\t\t0.54,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.75,\n\t\t\t0.65,\n\t\t\t0.65,\n\t\t\t0.5,\n\t\t\t0.6,\n\t\t\t0.6,\n\t\t\t1,\n\t\t\t0.5,\n\t\t\t0,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.19,\n\t\t\t0.12,\n\t\t\t0.94,\n\t\t\t0.12,\n\t\t\t0.5,\n\t\t\t0.82,\n\t\t\t0.89,\n\t\t\t0.56,\n\t\t\t0.25,\n\t\t\t0.83,\n\t\t\t0.24,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.9,\n\t\t\t0.9,\n\t\t\t0.9,\n\t\t\t0.75,\n\t\t\t0.76,\n\t\t\t0.78,\n\t\t\t0.65,\n\t\t\t0.65,\n\t\t\t0.67,\n\t\t\t0.54,\n\t\t\t0.6,\n\t\t\t0.78,\n\t\t\t0.61,\n\t\t\t0.48,\n\t\t\t0.78,\n\t\t\t0.5,\n\t\t\t0.48,\n\t\t\t0.78,\n\t\t\t0.44,\n\t\t\t0.48,\n\t\t\t0.78,\n\t\t\t0.36,\n\t\t\t0.48,\n\t\t\t0.76,\n\t\t\t1,\n\t\t\t0.48,\n\t\t\t0.38,\n\t\t\t0.49,\n\t\t\t0.5,\n\t\t\t0.69,\n\t\t\t0.76,\n\t\t\t0.56,\n\t\t\t0.56,\n\t\t\t0.4,\n\t\t\t0.56,\n\t\t\t0.56,\n\t\t\t0.74,\n\t\t\t0.5,\n\t\t\t0.89,\n\t\t\t1,\n\t\t\t0.63,\n\t\t\t0,\n\t\t\t0.65,\n\t\t\t0.16,\n\t\t\t0.16,\n\t\t\t0.36,\n\t\t\t0.72,\n\t\t\t0.82,\n\t\t\t0.44,\n\t\t\t0.18,\n\t\t\t0.69,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.58,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.58,\n\t\t\t0.88,\n\t\t\t0.88,\n\t\t\t0.45,\n\t\t\t0.76,\n\t\t\t0.79,\n\t\t\t0.33,\n\t\t\t0.71,\n\t\t\t0.71,\n\t\t\t0.23,\n\t\t\t0.62,\n\t\t\t0.62,\n\t\t\t0.14,\n\t\t\t0.56,\n\t\t\t0.56,\n\t\t\t0.04,\n\t\t\t0.49,\n\t\t\t0.55,\n\t\t\t0,\n\t\t\t0.41,\n\t\t\t0.52,\n\t\t\t0.88,\n\t\t\t0.88,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.85,\n\t\t\t0.56,\n\t\t\t0.65,\n\t\t\t0.46,\n\t\t\t0.45,\n\t\t\t0.4,\n\t\t\t0.5,\n\t\t\t0.5,\n\t\t\t0.62,\n\t\t\t0.39,\n\t\t\t0.71,\n\t\t\t0.83,\n\t\t\t0.48,\n\t\t\t0,\n\t\t\t0.58,\n\t\t\t0,\n\t\t\t0.58,\n\t\t\t0.26,\n\t\t\t0.62,\n\t\t\t0.69,\n\t\t\t0.34,\n\t\t\t0.09,\n\t\t\t0.56,\n\t\t\t0,\n\t\t\t0.79,\n\t\t\t0,\n\t\t\t0.44,\n\t\t\t0.83,\n\t\t\t1,\n\t\t\t1,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.85,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.78,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.64,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.56,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.38,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.27,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.19,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0.12,\n\t\t\t1,\n\t\t\t0.78,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0.61,\n\t\t\t0,\n\t\t\t0.9,\n\t\t\t0.46,\n\t\t\t0,\n\t\t\t0.83,\n\t\t\t0.32,\n\t\t\t0,\n\t\t\t0.75,\n\t\t\t0.22,\n\t\t\t0,\n\t\t\t0.67,\n\t\t\t0.14,\n\t\t\t0.3,\n\t\t\t0.76,\n\t\t\t1,\n\t\t\t0.3,\n\t\t\t0.65,\n\t\t\t1,\n\t\t\t0.13,\n\t\t\t0.58,\n\t\t\t0.84,\n\t\t\t0.15,\n\t\t\t0.49,\n\t\t\t0.67,\n\t\t\t0.15,\n\t\t\t0.4,\n\t\t\t0.59,\n\t\t\t0.09,\n\t\t\t0.33,\n\t\t\t0.53,\n\t\t\t0.96,\n\t\t\t0.93,\n\t\t\t0.82,\n\t\t\t0.8,\n\t\t\t0.82,\n\t\t\t0.12,\n\t\t\t0.71,\n\t\t\t0.71,\n\t\t\t0.76,\n\t\t\t0.65,\n\t\t\t0.33,\n\t\t\t0.3,\n\t\t\t0.34,\n\t\t\t0.35,\n\t\t\t0.38,\n\t\t\t0.62,\n\t\t\t0.31,\n\t\t\t0.71,\n\t\t\t0.67,\n\t\t\t0.36,\n\t\t\t0,\n\t\t\t0.46,\n\t\t\t0.31,\n\t\t\t0.27,\n\t\t\t0.26,\n\t\t\t0.51,\n\t\t\t0.59,\n\t\t\t0.26,\n\t\t\t0,\n\t\t\t0.4,\n\t\t\t0,\n\t\t\t0.49,\n\t\t\t0,\n\t\t\t0.44,\n\t\t\t0.67,\n\t\t\t0.98,\n\t\t\t0,\n\t\t\t0.73,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.63,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.56,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.5,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.42,\n\t\t\t1,\n\t\t\t0.33,\n\t\t\t0.36,\n\t\t\t0.95,\n\t\t\t0.47,\n\t\t\t0.36,\n\t\t\t0.89,\n\t\t\t0.54,\n\t\t\t0.31,\n\t\t\t0.89,\n\t\t\t0.63,\n\t\t\t0.21,\n\t\t\t0.83,\n\t\t\t0.7,\n\t\t\t0.12,\n\t\t\t0.83,\n\t\t\t0.7,\n\t\t\t0.12,\n\t\t\t0.73,\n\t\t\t0.7,\n\t\t\t0.05,\n\t\t\t0.65,\n\t\t\t0.74,\n\t\t\t0.05,\n\t\t\t0.53,\n\t\t\t0.78,\n\t\t\t0,\n\t\t\t0.4,\n\t\t\t0.8,\n\t\t\t0,\n\t\t\t0.35,\n\t\t\t0.82,\n\t\t\t0,\n\t\t\t0.31,\n\t\t\t0.85,\n\t\t\t0,\n\t\t\t0.27,\n\t\t\t0.88,\n\t\t\t0,\n\t\t\t0.22,\n\t\t\t0.9,\n\t\t\t0,\n\t\t\t0.18,\n\t\t\t0.91,\n\t\t\t0,\n\t\t\t0.15,\n\t\t\t0.92,\n\t\t\t0,\n\t\t\t0.14,\n\t\t\t0.93,\n\t\t\t0,\n\t\t\t0.13,\n\t\t\t0.94,\n\t\t\t0,\n\t\t\t0.12,\n\t\t\t0.95,\n\t\t\t0,\n\t\t\t0.11,\n\t\t\t0.96,\n\t\t\t0,\n\t\t\t0.1,\n\t\t\t0.97,\n\t\t\t0,\n\t\t\t0.09,\n\t\t\t0.98,\n\t\t\t0,\n\t\t\t0.08,\n\t\t\t0.99,\n\t\t\t0,\n\t\t\t0.07,\n\t\t\t1,\n\t\t\t0,\n\t\t\t0.06\n\t\t],\n\t\tAnnotations: [\n\t\t\t0,\n\t\t\t\"Xx\",\n\t\t\t1,\n\t\t\t\"H\",\n\t\t\t2,\n\t\t\t\"He\",\n\t\t\t3,\n\t\t\t\"Li\",\n\t\t\t4,\n\t\t\t\"Be\",\n\t\t\t5,\n\t\t\t\"B\",\n\t\t\t6,\n\t\t\t\"C\",\n\t\t\t7,\n\t\t\t\"N\",\n\t\t\t8,\n\t\t\t\"O\",\n\t\t\t9,\n\t\t\t\"F\",\n\t\t\t10,\n\t\t\t\"Ne\",\n\t\t\t11,\n\t\t\t\"Na\",\n\t\t\t12,\n\t\t\t\"Mg\",\n\t\t\t13,\n\t\t\t\"Al\",\n\t\t\t14,\n\t\t\t\"Si\",\n\t\t\t15,\n\t\t\t\"P\",\n\t\t\t16,\n\t\t\t\"S\",\n\t\t\t17,\n\t\t\t\"Cl\",\n\t\t\t18,\n\t\t\t\"Ar\",\n\t\t\t19,\n\t\t\t\"K\",\n\t\t\t20,\n\t\t\t\"Ca\",\n\t\t\t21,\n\t\t\t\"Sc\",\n\t\t\t22,\n\t\t\t\"Ti\",\n\t\t\t23,\n\t\t\t\"V\",\n\t\t\t24,\n\t\t\t\"Cr\",\n\t\t\t25,\n\t\t\t\"Mn\",\n\t\t\t26,\n\t\t\t\"Fe\",\n\t\t\t27,\n\t\t\t\"Co\",\n\t\t\t28,\n\t\t\t\"Ni\",\n\t\t\t29,\n\t\t\t\"Cu\",\n\t\t\t30,\n\t\t\t\"Zn\",\n\t\t\t31,\n\t\t\t\"Ga\",\n\t\t\t32,\n\t\t\t\"Ge\",\n\t\t\t33,\n\t\t\t\"As\",\n\t\t\t34,\n\t\t\t\"Se\",\n\t\t\t35,\n\t\t\t\"Br\",\n\t\t\t36,\n\t\t\t\"Kr\",\n\t\t\t37,\n\t\t\t\"Rb\",\n\t\t\t38,\n\t\t\t\"Sr\",\n\t\t\t39,\n\t\t\t\"Y\",\n\t\t\t40,\n\t\t\t\"Zr\",\n\t\t\t41,\n\t\t\t\"Nb\",\n\t\t\t42,\n\t\t\t\"Mo\",\n\t\t\t43,\n\t\t\t\"Tc\",\n\t\t\t44,\n\t\t\t\"Ru\",\n\t\t\t45,\n\t\t\t\"Rh\",\n\t\t\t46,\n\t\t\t\"Pd\",\n\t\t\t47,\n\t\t\t\"Ag\",\n\t\t\t48,\n\t\t\t\"Cd\",\n\t\t\t49,\n\t\t\t\"In\",\n\t\t\t50,\n\t\t\t\"Sn\",\n\t\t\t51,\n\t\t\t\"Sb\",\n\t\t\t52,\n\t\t\t\"Te\",\n\t\t\t53,\n\t\t\t\"I\",\n\t\t\t54,\n\t\t\t\"Xe\",\n\t\t\t55,\n\t\t\t\"Cs\",\n\t\t\t56,\n\t\t\t\"Ba\",\n\t\t\t57,\n\t\t\t\"La\",\n\t\t\t58,\n\t\t\t\"Ce\",\n\t\t\t59,\n\t\t\t\"Pr\",\n\t\t\t60,\n\t\t\t\"Nd\",\n\t\t\t61,\n\t\t\t\"Pm\",\n\t\t\t62,\n\t\t\t\"Sm\",\n\t\t\t63,\n\t\t\t\"Eu\",\n\t\t\t64,\n\t\t\t\"Gd\",\n\t\t\t65,\n\t\t\t\"Tb\",\n\t\t\t66,\n\t\t\t\"Dy\",\n\t\t\t67,\n\t\t\t\"Ho\",\n\t\t\t68,\n\t\t\t\"Er\",\n\t\t\t69,\n\t\t\t\"Tm\",\n\t\t\t70,\n\t\t\t\"Yb\",\n\t\t\t71,\n\t\t\t\"Lu\",\n\t\t\t72,\n\t\t\t\"Hf\",\n\t\t\t73,\n\t\t\t\"Ta\",\n\t\t\t74,\n\t\t\t\"W\",\n\t\t\t75,\n\t\t\t\"Re\",\n\t\t\t76,\n\t\t\t\"Os\",\n\t\t\t77,\n\t\t\t\"Ir\",\n\t\t\t78,\n\t\t\t\"Pt\",\n\t\t\t79,\n\t\t\t\"Au\",\n\t\t\t80,\n\t\t\t\"Hg\",\n\t\t\t81,\n\t\t\t\"Tl\",\n\t\t\t82,\n\t\t\t\"Pb\",\n\t\t\t83,\n\t\t\t\"Bi\",\n\t\t\t84,\n\t\t\t\"Po\",\n\t\t\t85,\n\t\t\t\"At\",\n\t\t\t86,\n\t\t\t\"Rn\",\n\t\t\t87,\n\t\t\t\"Fr\",\n\t\t\t88,\n\t\t\t\"Ra\",\n\t\t\t89,\n\t\t\t\"Ac\",\n\t\t\t90,\n\t\t\t\"Th\",\n\t\t\t91,\n\t\t\t\"Pa\",\n\t\t\t92,\n\t\t\t\"U\",\n\t\t\t93,\n\t\t\t\"Np\",\n\t\t\t94,\n\t\t\t\"Pu\",\n\t\t\t95,\n\t\t\t\"Am\",\n\t\t\t96,\n\t\t\t\"Cm\",\n\t\t\t97,\n\t\t\t\"Bk\",\n\t\t\t98,\n\t\t\t\"Cf\",\n\t\t\t99,\n\t\t\t\"Es\",\n\t\t\t100,\n\t\t\t\"Fm\",\n\t\t\t101,\n\t\t\t\"Md\",\n\t\t\t102,\n\t\t\t\"No\",\n\t\t\t103,\n\t\t\t\"Lr\",\n\t\t\t104,\n\t\t\t\"Rf\",\n\t\t\t105,\n\t\t\t\"Db\",\n\t\t\t106,\n\t\t\t\"Sg\",\n\t\t\t107,\n\t\t\t\"Bh\",\n\t\t\t108,\n\t\t\t\"Hs\",\n\t\t\t109,\n\t\t\t\"Mt\",\n\t\t\t110,\n\t\t\t\"Ds\",\n\t\t\t111,\n\t\t\t\"Rg\",\n\t\t\t112,\n\t\t\t\"Cn\",\n\t\t\t113,\n\t\t\t\"Uut\",\n\t\t\t114,\n\t\t\t\"Uuq\",\n\t\t\t115,\n\t\t\t\"Uup\",\n\t\t\t116,\n\t\t\t\"Uuh\",\n\t\t\t117,\n\t\t\t\"Uus\",\n\t\t\t118,\n\t\t\t\"Uuo\"\n\t\t],\n\t\tName: \"BlueObeliskElements\"\n\t}\n];\n\nexport { vtkColorMaps as v };\n","const ColorSpace = {\n  RGB: 0,\n  HSV: 1,\n  LAB: 2,\n  DIVERGING: 3\n};\nconst Scale = {\n  LINEAR: 0,\n  LOG10: 1\n};\nvar Constants = {\n  ColorSpace,\n  Scale\n};\n\nexport { ColorSpace, Scale, Constants as default };\n","import { vec3, mat4 } from 'gl-matrix';\nimport * as d3 from 'd3-scale';\nimport { Q as normalize2D, R as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkActor from './Actor.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkMapper from './Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkTexture from './Texture.js';\n\n// ----------------------------------------------------------------------------\n// vtkCubeAxesActor\n// ----------------------------------------------------------------------------\n// faces are -x x -y y -z z\n// point 0 is 0,0,0 and then +x fastest changing, +y then +z\nconst faceNormals = [[-1, 0, 0], [1, 0, 0], [0, -1, 0], [0, 1, 0], [0, 0, -1], [0, 0, 1]];\nconst faceEdges = [[8, 7, 11, 3], [9, 1, 10, 5], [4, 9, 0, 8], [2, 11, 6, 10], [0, 3, 2, 1], [4, 5, 6, 7]];\nconst edgePoints = [[0, 1], [1, 3], [2, 3], [0, 2], [4, 5], [5, 7], [6, 7], [4, 6], [0, 4], [1, 5], [3, 7], [2, 6]];\nconst edgeAxes = [0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2];\nconst faceAxes = [[1, 2], [1, 2], [0, 2], [0, 2], [0, 1], [0, 1]];\n\n//\n// Developer note: This class is broken into the main class and a helper\n// class. The main class holds view independent properties (those properties\n// that do not change as the view's resolution/aspect ratio change). The\n// helper class is instantiated one per view and holds properties that can\n// depend on view specific values such as resolution. The helper class code\n// could have been left to the View specific implementation (such as\n// vtkWebGPUCubeAxesActor) but is instead placed here to it can be shared by\n// multiple rendering backends.\n//\n\n// some shared temp variables to reduce heap allocs\nconst ptv3 = new Float64Array(3);\nconst pt2v3 = new Float64Array(3);\nconst tmpv3 = new Float64Array(3);\nconst tmp2v3 = new Float64Array(3);\nconst xDir = new Float64Array(3);\nconst yDir = new Float64Array(3);\nconst invmat = new Float64Array(16);\nfunction applyTextStyle(ctx, style) {\n  ctx.strokeStyle = style.strokeColor;\n  ctx.lineWidth = style.strokeSize;\n  ctx.fillStyle = style.fontColor;\n  ctx.font = `${style.fontStyle} ${style.fontSize}px ${style.fontFamily}`;\n}\nfunction defaultGenerateTicks(dataBounds) {\n  const ticks = [];\n  const tickStrings = [];\n  for (let i = 0; i < 3; i++) {\n    const scale = d3.scaleLinear().domain([dataBounds[i * 2], dataBounds[i * 2 + 1]]);\n    ticks[i] = scale.ticks(5);\n    const format = scale.tickFormat(5);\n    tickStrings[i] = ticks[i].map(format);\n  }\n  return {\n    ticks,\n    tickStrings\n  };\n}\n\n// many properties of this actor depend on the API specific view The main\n// dependency being the resolution as that drives what font sizes to use.\n// Bacause of this we need to do some of the calculations in a API specific\n// subclass. But... we don't want a lot of duplicated code between WebGL and\n// WebGPU for example so we have this helper class, that is designed to be\n// fairly API independent so that API specific views can call this to do\n// most of the work.\nfunction vtkCubeAxesActorHelper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeAxesActorHelper');\n  publicAPI.setRenderable = renderable => {\n    if (model.renderable === renderable) {\n      return;\n    }\n    model.renderable = renderable;\n    model.tmActor.addTexture(model.renderable.getTmTexture());\n    model.tmActor.setProperty(renderable.getProperty());\n    model.tmActor.setParentProp(renderable);\n    publicAPI.modified();\n  };\n\n  // called by updateTexturePolyData\n  publicAPI.createPolyDataForOneLabel = (text, pos, cmat, imat, dir, offset, results) => {\n    const value = model.renderable.get_tmAtlas().get(text);\n    if (!value) {\n      return;\n    }\n    const coords = model.renderable.getTextPolyData().getPoints().getData();\n\n    // compute pixel to distance factors\n    const size = model.lastSize;\n    ptv3[0] = coords[pos * 3];\n    ptv3[1] = coords[pos * 3 + 1];\n    ptv3[2] = coords[pos * 3 + 2];\n    vec3.transformMat4(tmpv3, ptv3, cmat);\n    // moving 0.1 in NDC\n    tmpv3[0] += 0.1;\n    vec3.transformMat4(pt2v3, tmpv3, imat);\n    // results in WC move of\n    vec3.subtract(xDir, pt2v3, ptv3);\n    tmpv3[0] -= 0.1;\n    tmpv3[1] += 0.1;\n    vec3.transformMat4(pt2v3, tmpv3, imat);\n    // results in WC move of\n    vec3.subtract(yDir, pt2v3, ptv3);\n    for (let i = 0; i < 3; i++) {\n      xDir[i] /= 0.5 * 0.1 * size[0];\n      yDir[i] /= 0.5 * 0.1 * size[1];\n    }\n\n    // have to find the four corners of the texture polygon for this label\n    // convert anchor point to View Coords\n    let ptIdx = results.ptIdx;\n    let cellIdx = results.cellIdx;\n    ptv3[0] = coords[pos * 3];\n    ptv3[1] = coords[pos * 3 + 1];\n    ptv3[2] = coords[pos * 3 + 2];\n    // horizontal left, right, or middle alignment based on dir[0]\n    if (dir[0] < -0.5) {\n      vec3.scale(tmpv3, xDir, dir[0] * offset - value.width);\n    } else if (dir[0] > 0.5) {\n      vec3.scale(tmpv3, xDir, dir[0] * offset);\n    } else {\n      vec3.scale(tmpv3, xDir, dir[0] * offset - value.width / 2.0);\n    }\n    vec3.add(ptv3, ptv3, tmpv3);\n    vec3.scale(tmpv3, yDir, dir[1] * offset - value.height / 2.0);\n    vec3.add(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[0];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[1];\n    ptIdx++;\n    vec3.scale(tmpv3, xDir, value.width);\n    vec3.add(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[2];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[3];\n    ptIdx++;\n    vec3.scale(tmpv3, yDir, value.height);\n    vec3.add(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[4];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[5];\n    ptIdx++;\n    vec3.scale(tmpv3, xDir, value.width);\n    vec3.subtract(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[6];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[7];\n    ptIdx++;\n\n    // add the two triangles to represent the quad\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 3;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 2;\n    cellIdx++;\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 2;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 1;\n    results.ptIdx += 4;\n    results.cellIdx += 2;\n  };\n\n  // update the polydata associated with drawing the text labels\n  // specifically the quads used for each label and their associated tcoords\n  // etc. This changes every time the camera viewpoint changes\n  publicAPI.updateTexturePolyData = () => {\n    const cmat = model.camera.getCompositeProjectionMatrix(model.lastAspectRatio, -1, 1);\n    mat4.transpose(cmat, cmat);\n\n    // update the polydata\n    const numLabels = model.renderable.getTextValues().length;\n    const numPts = numLabels * 4;\n    const numTris = numLabels * 2;\n    const points = new Float64Array(numPts * 3);\n    const polys = new Uint16Array(numTris * 4);\n    const tcoords = new Float32Array(numPts * 2);\n    mat4.invert(invmat, cmat);\n    const results = {\n      ptIdx: 0,\n      cellIdx: 0,\n      polys,\n      points,\n      tcoords\n    };\n    let ptIdx = 0;\n    let textIdx = 0;\n    let axisIdx = 0;\n    const coords = model.renderable.getTextPolyData().getPoints().getData();\n    const textValues = model.renderable.getTextValues();\n    while (ptIdx < coords.length / 3) {\n      // compute the direction to move out\n      ptv3[0] = coords[ptIdx * 3];\n      ptv3[1] = coords[ptIdx * 3 + 1];\n      ptv3[2] = coords[ptIdx * 3 + 2];\n      vec3.transformMat4(tmpv3, ptv3, cmat);\n      ptv3[0] = coords[ptIdx * 3 + 3];\n      ptv3[1] = coords[ptIdx * 3 + 4];\n      ptv3[2] = coords[ptIdx * 3 + 5];\n      vec3.transformMat4(tmp2v3, ptv3, cmat);\n      vec3.subtract(tmpv3, tmpv3, tmp2v3);\n      const dir = [tmpv3[0], tmpv3[1]];\n      normalize2D(dir);\n\n      // write the axis label\n      publicAPI.createPolyDataForOneLabel(textValues[textIdx], ptIdx, cmat, invmat, dir, model.renderable.getAxisTitlePixelOffset(), results);\n      ptIdx += 2;\n      textIdx++;\n\n      // write the tick labels\n      for (let t = 0; t < model.renderable.getTickCounts()[axisIdx]; t++) {\n        publicAPI.createPolyDataForOneLabel(textValues[textIdx], ptIdx, cmat, invmat, dir, model.renderable.getTickLabelPixelOffset(), results);\n        ptIdx++;\n        textIdx++;\n      }\n      axisIdx++;\n    }\n    const tcoordDA = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoords,\n      name: 'TextureCoordinates'\n    });\n    model.tmPolyData.getPointData().setTCoords(tcoordDA);\n    model.tmPolyData.getPoints().setData(points, 3);\n    model.tmPolyData.getPoints().modified();\n    model.tmPolyData.getPolys().setData(polys, 1);\n    model.tmPolyData.getPolys().modified();\n    model.tmPolyData.modified();\n  };\n  publicAPI.updateAPISpecificData = (size, camera, renderWindow) => {\n    // has the size changed?\n    if (model.lastSize[0] !== size[0] || model.lastSize[1] !== size[1]) {\n      model.lastSize[0] = size[0];\n      model.lastSize[1] = size[1];\n      model.lastAspectRatio = size[0] / size[1];\n      model.forceUpdate = true;\n    }\n    model.camera = camera;\n\n    // compute bounds for label quads whenever the camera changes\n    publicAPI.updateTexturePolyData();\n  };\n}\nconst newCubeAxesActorHelper = macro.newInstance(function (publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    renderable: null\n  };\n  Object.assign(model, {}, initialValues);\n\n  // Inheritance\n  macro.obj(publicAPI, model);\n  model.tmPolyData = vtkPolyData.newInstance();\n  model.tmMapper = vtkMapper.newInstance();\n  model.tmMapper.setInputData(model.tmPolyData);\n  model.tmActor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n  model.tmActor.setMapper(model.tmMapper);\n  macro.setGet(publicAPI, model, ['renderable']);\n  macro.get(publicAPI, model, ['lastSize', 'lastAspectRatio', 'axisTextStyle', 'tickTextStyle', 'tmActor', 'ticks']);\n  model.forceUpdate = false;\n  model.lastRedrawTime = {};\n  macro.obj(model.lastRedrawTime, {\n    mtime: 0\n  });\n  model.lastRebuildTime = {};\n  macro.obj(model.lastRebuildTime, {\n    mtime: 0\n  });\n  model.lastSize = [-1, -1];\n\n  // internal variables\n  model.lastTickBounds = [];\n  vtkCubeAxesActorHelper(publicAPI, model);\n}, 'vtkCubeAxesActorHelper');\nfunction vtkCubeAxesActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeAxesActor');\n  publicAPI.setCamera = cam => {\n    if (model.camera === cam) {\n      return;\n    }\n    if (model.cameraModifiedSub) {\n      model.cameraModifiedSub.unsubscribe();\n      model.cameraModifiedSub = null;\n    }\n    model.camera = cam;\n    if (cam) {\n      model.cameraModifiedSub = cam.onModified(publicAPI.update);\n    }\n    publicAPI.update();\n    publicAPI.modified();\n  };\n\n  // estimate from a camera model what faces to draw\n  // return true if the list of faces to draw has changed\n  publicAPI.computeFacesToDraw = () => {\n    const cmat = model.camera.getViewMatrix();\n    mat4.transpose(cmat, cmat);\n    let changed = false;\n    const length = vtkBoundingBox.getDiagonalLength(model.dataBounds);\n    const faceDot = Math.sin(model.faceVisibilityAngle * Math.PI / 180.0);\n    for (let f = 0; f < 6; f++) {\n      let drawit = false;\n      const faceAxis = Math.floor(f / 2);\n      const otherAxis1 = (faceAxis + 1) % 3;\n      const otherAxis2 = (faceAxis + 2) % 3;\n      // only for non degenerate axes\n      if (model.dataBounds[otherAxis1 * 2] !== model.dataBounds[otherAxis1 * 2 + 1] && model.dataBounds[otherAxis2 * 2] !== model.dataBounds[otherAxis2 * 2 + 1]) {\n        // for each face transform the center and off center to get a direction vector\n        ptv3[faceAxis] = model.dataBounds[f] - 0.1 * length * faceNormals[f][faceAxis];\n        ptv3[otherAxis1] = 0.5 * (model.dataBounds[otherAxis1 * 2] + model.dataBounds[otherAxis1 * 2 + 1]);\n        ptv3[otherAxis2] = 0.5 * (model.dataBounds[otherAxis2 * 2] + model.dataBounds[otherAxis2 * 2 + 1]);\n        vec3.transformMat4(tmpv3, ptv3, cmat);\n        ptv3[faceAxis] = model.dataBounds[f];\n        vec3.transformMat4(tmp2v3, ptv3, cmat);\n        vec3.subtract(tmpv3, tmp2v3, tmpv3);\n        vec3.normalize(tmpv3, tmpv3);\n        // tmpv3 now holds the face normal vector\n        drawit = tmpv3[2] > faceDot;\n        // for perspctive we need the view direction to the plane\n        if (!model.camera.getParallelProjection()) {\n          vec3.normalize(tmp2v3, tmp2v3);\n          drawit = vec3.dot(tmp2v3, tmpv3) > faceDot;\n        }\n      }\n      if (drawit !== model.lastFacesToDraw[f]) {\n        model.lastFacesToDraw[f] = drawit;\n        changed = true;\n      }\n    }\n    return changed;\n  };\n\n  // update the polydata that represents the boundingd edges and gridlines\n  publicAPI.updatePolyData = (facesToDraw, edgesToDraw, ticks) => {\n    // compute the number of points and lines required\n    let numPts = 0;\n    let numLines = 0;\n    numPts += 8; // always start with the 8 cube points\n\n    // count edgesToDraw\n    let numEdgesToDraw = 0;\n    for (let e = 0; e < 12; e++) {\n      if (edgesToDraw[e] > 0) {\n        numEdgesToDraw++;\n      }\n    }\n    numLines += numEdgesToDraw;\n\n    // add values for gridlines\n    if (model.gridLines) {\n      for (let f = 0; f < 6; f++) {\n        if (facesToDraw[f]) {\n          numPts += ticks[faceAxes[f][0]].length * 2 + ticks[faceAxes[f][1]].length * 2;\n          numLines += ticks[faceAxes[f][0]].length + ticks[faceAxes[f][1]].length;\n        }\n      }\n    }\n\n    // now allocate the memory\n    const points = new Float64Array(numPts * 3);\n    const lines = new Uint32Array(numLines * 3);\n    let ptIdx = 0;\n    let lineIdx = 0;\n\n    // add the 8 corner points\n    for (let z = 0; z < 2; z++) {\n      for (let y = 0; y < 2; y++) {\n        for (let x = 0; x < 2; x++) {\n          points[ptIdx * 3] = model.dataBounds[x];\n          points[ptIdx * 3 + 1] = model.dataBounds[2 + y];\n          points[ptIdx * 3 + 2] = model.dataBounds[4 + z];\n          ptIdx++;\n        }\n      }\n    }\n\n    // draw the edges\n    for (let e = 0; e < 12; e++) {\n      if (edgesToDraw[e] > 0) {\n        lines[lineIdx * 3] = 2;\n        lines[lineIdx * 3 + 1] = edgePoints[e][0];\n        lines[lineIdx * 3 + 2] = edgePoints[e][1];\n        lineIdx++;\n      }\n    }\n\n    // now handle gridlines\n    // grid lines are tick[axis1] + ticks[axes2] lines each having two points\n    // for simplicity we don;t worry about duplicating points, this is tiny\n\n    if (model.gridLines) {\n      // for each visible face\n      // add the points\n      for (let f = 0; f < 6; f++) {\n        if (facesToDraw[f]) {\n          const faceIdx = Math.floor(f / 2);\n          let aticks = ticks[faceAxes[f][0]];\n          for (let t = 0; t < aticks.length; t++) {\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[f];\n            points[ptIdx * 3 + faceAxes[f][0]] = aticks[t];\n            points[ptIdx * 3 + faceAxes[f][1]] = model.dataBounds[faceAxes[f][1] * 2];\n            ptIdx++;\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[f];\n            points[ptIdx * 3 + faceAxes[f][0]] = aticks[t];\n            points[ptIdx * 3 + faceAxes[f][1]] = model.dataBounds[faceAxes[f][1] * 2 + 1];\n            ptIdx++;\n            lines[lineIdx * 3] = 2;\n            lines[lineIdx * 3 + 1] = ptIdx - 2;\n            lines[lineIdx * 3 + 2] = ptIdx - 1;\n            lineIdx++;\n          }\n          aticks = ticks[faceAxes[f][1]];\n          for (let t = 0; t < aticks.length; t++) {\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[f];\n            points[ptIdx * 3 + faceAxes[f][1]] = aticks[t];\n            points[ptIdx * 3 + faceAxes[f][0]] = model.dataBounds[faceAxes[f][0] * 2];\n            ptIdx++;\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[f];\n            points[ptIdx * 3 + faceAxes[f][1]] = aticks[t];\n            points[ptIdx * 3 + faceAxes[f][0]] = model.dataBounds[faceAxes[f][0] * 2 + 1];\n            ptIdx++;\n            lines[lineIdx * 3] = 2;\n            lines[lineIdx * 3 + 1] = ptIdx - 2;\n            lines[lineIdx * 3 + 2] = ptIdx - 1;\n            lineIdx++;\n          }\n        }\n      }\n    }\n    model.polyData.getPoints().setData(points, 3);\n    model.polyData.getPoints().modified();\n    model.polyData.getLines().setData(lines, 1);\n    model.polyData.getLines().modified();\n    model.polyData.modified();\n  };\n\n  // update the data that represents where to put the labels\n  // in world coordinates. This only changes when faces to draw changes\n  // of dataBounds changes\n  publicAPI.updateTextData = (facesToDraw, edgesToDraw, ticks, tickStrings) => {\n    // count outside edgesToDraw\n    let textPointCount = 0;\n    for (let e = 0; e < 12; e++) {\n      if (edgesToDraw[e] === 1) {\n        textPointCount += 2;\n        textPointCount += ticks[edgeAxes[e]].length;\n      }\n    }\n    const points = model.polyData.getPoints().getData();\n    const textPoints = new Float64Array(textPointCount * 3);\n    let ptIdx = 0;\n    let textIdx = 0;\n    let axisCount = 0;\n    for (let f = 0; f < 6; f++) {\n      if (facesToDraw[f]) {\n        for (let e = 0; e < 4; e++) {\n          const edgeIdx = faceEdges[f][e];\n          if (edgesToDraw[edgeIdx] === 1) {\n            const edgeAxis = edgeAxes[edgeIdx];\n            // add a middle point on the edge\n            const ptIdx1 = edgePoints[edgeIdx][0] * 3;\n            const ptIdx2 = edgePoints[edgeIdx][1] * 3;\n            textPoints[ptIdx * 3] = 0.5 * (points[ptIdx1] + points[ptIdx2]);\n            textPoints[ptIdx * 3 + 1] = 0.5 * (points[ptIdx1 + 1] + points[ptIdx2 + 1]);\n            textPoints[ptIdx * 3 + 2] = 0.5 * (points[ptIdx1 + 2] + points[ptIdx2 + 2]);\n            ptIdx++;\n            // add a middle face point, we use this to\n            // move the labels away from the edge in the right direction\n            const faceIdx = Math.floor(f / 2);\n            textPoints[ptIdx * 3 + faceIdx] = model.dataBounds[f];\n            textPoints[ptIdx * 3 + faceAxes[f][0]] = 0.5 * (model.dataBounds[faceAxes[f][0] * 2] + model.dataBounds[faceAxes[f][0] * 2 + 1]);\n            textPoints[ptIdx * 3 + faceAxes[f][1]] = 0.5 * (model.dataBounds[faceAxes[f][1] * 2] + model.dataBounds[faceAxes[f][1] * 2 + 1]);\n            ptIdx++;\n            // set the text\n            model.textValues[textIdx] = model.axisLabels[edgeAxis];\n            textIdx++;\n\n            // now add the tick marks along the edgeAxis\n            const otherAxis1 = (edgeAxis + 1) % 3;\n            const otherAxis2 = (edgeAxis + 2) % 3;\n            const aticks = ticks[edgeAxis];\n            const atickStrings = tickStrings[edgeAxis];\n            model.tickCounts[axisCount] = aticks.length;\n            for (let t = 0; t < aticks.length; t++) {\n              textPoints[ptIdx * 3 + edgeAxis] = aticks[t];\n              textPoints[ptIdx * 3 + otherAxis1] = points[ptIdx1 + otherAxis1];\n              textPoints[ptIdx * 3 + otherAxis2] = points[ptIdx1 + otherAxis2];\n              ptIdx++;\n              // set the text\n              model.textValues[textIdx] = atickStrings[t];\n              textIdx++;\n            }\n            axisCount++;\n          }\n        }\n      }\n    }\n    model.textPolyData.getPoints().setData(textPoints, 3);\n    model.textPolyData.modified();\n  };\n\n  // main method to rebuild the cube axes, gets called on camera modify\n  // and changes to key members\n  publicAPI.update = () => {\n    // Can't do anything if we don't have a camera...\n    if (!model.camera) {\n      return;\n    }\n\n    // compute what faces to draw\n    const facesChanged = publicAPI.computeFacesToDraw();\n    const facesToDraw = model.lastFacesToDraw;\n\n    // have the bounds changed?\n    let boundsChanged = false;\n    for (let i = 0; i < 6; i++) {\n      if (model.dataBounds[i] !== model.lastTickBounds[i]) {\n        boundsChanged = true;\n        model.lastTickBounds[i] = model.dataBounds[i];\n      }\n    }\n\n    // did something significant change? If so rebuild a lot of things\n    if (facesChanged || boundsChanged || model.forceUpdate) {\n      // compute the edges to draw\n      // for each drawn face, mark edges, all single mark edges we draw\n      const edgesToDraw = new Array(12).fill(0);\n      for (let f = 0; f < 6; f++) {\n        if (facesToDraw[f]) {\n          for (let e = 0; e < 4; e++) {\n            edgesToDraw[faceEdges[f][e]]++;\n          }\n        }\n      }\n\n      // compute tick marks for axes\n      const t = model.generateTicks(model.dataBounds);\n\n      // update gridlines / edge lines\n      publicAPI.updatePolyData(facesToDraw, edgesToDraw, t.ticks);\n\n      // compute label world coords and text\n      publicAPI.updateTextData(facesToDraw, edgesToDraw, t.ticks, t.tickStrings);\n\n      // rebuild the texture only when force or changed bounds, face\n      // visibility changes do to change the atlas\n      if (boundsChanged || model.forceUpdate) {\n        publicAPI.updateTextureAtlas(t.tickStrings);\n      }\n    }\n    model.forceUpdate = false;\n  };\n\n  // create the texture map atlas that contains the rendering of\n  // all the text strings. Only needs to be called when the text strings\n  // have changed (labels and ticks)\n  publicAPI.updateTextureAtlas = tickStrings => {\n    // compute the width and height we need\n\n    // set the text properties\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n\n    // first the three labels\n    model._tmAtlas.clear();\n    let maxWidth = 0;\n    let totalHeight = 1; // start one pixel in so we have a border\n    for (let i = 0; i < 3; i++) {\n      if (!model._tmAtlas.has(model.axisLabels[i])) {\n        applyTextStyle(model.tmContext, model.axisTextStyle);\n        const metrics = model.tmContext.measureText(model.axisLabels[i]);\n        const entry = {\n          height: metrics.actualBoundingBoxAscent + 2,\n          startingHeight: totalHeight,\n          width: metrics.width + 2,\n          textStyle: model.axisTextStyle\n        };\n        model._tmAtlas.set(model.axisLabels[i], entry);\n        totalHeight += entry.height;\n        if (maxWidth < entry.width) {\n          maxWidth = entry.width;\n        }\n      }\n      // and the ticks\n      applyTextStyle(model.tmContext, model.tickTextStyle);\n      for (let t = 0; t < tickStrings[i].length; t++) {\n        if (!model._tmAtlas.has(tickStrings[i][t])) {\n          const metrics = model.tmContext.measureText(tickStrings[i][t]);\n          const entry = {\n            height: metrics.actualBoundingBoxAscent + 2,\n            startingHeight: totalHeight,\n            width: metrics.width + 2,\n            textStyle: model.tickTextStyle\n          };\n          model._tmAtlas.set(tickStrings[i][t], entry);\n          totalHeight += entry.height;\n          if (maxWidth < entry.width) {\n            maxWidth = entry.width;\n          }\n        }\n      }\n    }\n\n    // always use power of two to avoid interpolation\n    // in cases where PO2 is required\n    maxWidth = nearestPowerOfTwo(maxWidth);\n    totalHeight = nearestPowerOfTwo(totalHeight);\n\n    // set the tcoord values\n    model._tmAtlas.forEach(value => {\n      value.tcoords = [0.0, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight) / totalHeight, 0.0, (totalHeight - value.startingHeight) / totalHeight];\n    });\n\n    // make sure we have power of two dimensions\n    model.tmCanvas.width = maxWidth;\n    model.tmCanvas.height = totalHeight;\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n    model.tmContext.clearRect(0, 0, maxWidth, totalHeight);\n\n    // draw the text onto the texture\n    model._tmAtlas.forEach((value, key) => {\n      applyTextStyle(model.tmContext, value.textStyle);\n      model.tmContext.fillText(key, 1, value.startingHeight + value.height - 1);\n    });\n    model.tmTexture.setCanvas(model.tmCanvas);\n    model.tmTexture.modified();\n  };\n\n  // Make sure the data is correct\n  publicAPI.onModified(() => {\n    model.forceUpdate = true;\n    publicAPI.update();\n  });\n  publicAPI.setTickTextStyle = tickStyle => {\n    model.tickTextStyle = {\n      ...model.tickTextStyle,\n      ...tickStyle\n    };\n    publicAPI.modified();\n  };\n  publicAPI.setAxisTextStyle = axisStyle => {\n    model.axisTextStyle = {\n      ...model.axisTextStyle,\n      ...axisStyle\n    };\n    publicAPI.modified();\n  };\n  publicAPI.get_tmAtlas = () => model._tmAtlas;\n\n  // try to get the bounds for the annotation. This is complicated\n  // as it relies on the pixel size of the window. Every time the camera\n  // changes the bounds change. This method simplifies by just expanding\n  // the grid bounds by a user specified factor.\n  publicAPI.getBounds = () => {\n    publicAPI.update();\n    vtkBoundingBox.setBounds(model.bounds, model.gridActor.getBounds());\n    vtkBoundingBox.scaleAboutCenter(model.bounds, model.boundsScaleFactor, model.boundsScaleFactor, model.boundsScaleFactor);\n    return model.bounds;\n  };\n\n  // Make sure the grid share the actor property\n  const _setProp = macro.chain(publicAPI.setProperty, model.gridActor.setProperty);\n  publicAPI.setProperty = p => _setProp(p)[0];\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(publicAPI, model, initialValues) {\n  return {\n    boundsScaleFactor: 1.3,\n    camera: null,\n    dataBounds: [...vtkBoundingBox.INIT_BOUNDS],\n    faceVisibilityAngle: 8,\n    gridLines: true,\n    axisLabels: null,\n    axisTitlePixelOffset: 35.0,\n    tickLabelPixelOffset: 12.0,\n    generateTicks: defaultGenerateTicks,\n    ...initialValues,\n    axisTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 18,\n      fontFamily: 'serif',\n      ...initialValues?.axisTextStyle\n    },\n    tickTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 14,\n      fontFamily: 'serif',\n      ...initialValues?.tickTextStyle\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Inheritance\n  vtkActor.extend(publicAPI, model, defaultValues(publicAPI, model, initialValues));\n\n  // internal variables\n  model.lastFacesToDraw = [false, false, false, false, false, false];\n  model.axisLabels = ['X-Axis', 'Y-Axis', 'Z-Axis'];\n  model.tickCounts = [];\n  model.textValues = [];\n  model.lastTickBounds = [];\n  model.tmCanvas = document.createElement('canvas');\n  model.tmContext = model.tmCanvas.getContext('2d');\n  model._tmAtlas = new Map();\n\n  // for texture atlas\n  model.tmTexture = vtkTexture.newInstance({\n    resizable: true\n  });\n  model.tmTexture.setInterpolate(false);\n  publicAPI.getProperty().setDiffuse(0.0);\n  publicAPI.getProperty().setAmbient(1.0);\n  model.gridMapper = vtkMapper.newInstance();\n  model.polyData = vtkPolyData.newInstance();\n  model.gridMapper.setInputData(model.polyData);\n  model.gridActor = vtkActor.newInstance();\n  model.gridActor.setMapper(model.gridMapper);\n  model.gridActor.setProperty(publicAPI.getProperty());\n  model.gridActor.setParentProp(publicAPI);\n  model.textPolyData = vtkPolyData.newInstance();\n  macro.setGet(publicAPI, model, ['axisTitlePixelOffset', 'boundsScaleFactor', 'faceVisibilityAngle', 'gridLines', 'tickLabelPixelOffset', 'generateTicks']);\n  macro.setGetArray(publicAPI, model, ['dataBounds'], 6);\n  macro.setGetArray(publicAPI, model, ['axisLabels'], 3);\n  macro.get(publicAPI, model, ['axisTextStyle', 'tickTextStyle', 'camera', 'tmTexture', 'textValues', 'textPolyData', 'tickCounts', 'gridActor']);\n\n  // Object methods\n  vtkCubeAxesActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCubeAxesActor');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCubeAxesActor$1 = {\n  newInstance,\n  extend,\n  newCubeAxesActorHelper,\n  defaultGenerateTicks\n};\n\nexport { vtkCubeAxesActor$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\n\nconst {\n  FieldAssociations\n} = vtkDataSet;\n\n// ----------------------------------------------------------------------------\n// vtkHardwareSelector methods\n// ----------------------------------------------------------------------------\n\nfunction vtkHardwareSelector(publicAPI, model) {\n  model.classHierarchy.push('vtkHardwareSelector');\n\n  // get the source data that is used for generating a selection. This\n  // must be called at least once before calling generateSelection. In\n  // raster based backends this method will capture the buffers. You can\n  // call this once and then make multiple calls to generateSelection.\n  publicAPI.getSourceDataAsync = async (renderer, fx1, fy1, fx2, fy2) => {};\n  publicAPI.selectAsync = async (renderer, fx1, fy1, fx2, fy2) => {\n    const srcData = await publicAPI.getSourceDataAsync(renderer, fx1, fy1, fx2, fy2);\n    if (srcData) {\n      return srcData.generateSelection(fx1, fy1, fx2, fy2);\n    }\n    return [];\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  fieldAssociation: FieldAssociations.FIELD_ASSOCIATION_CELLS,\n  captureZValues: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['fieldAssociation', 'captureZValues']);\n\n  // Object methods\n  vtkHardwareSelector(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkHardwareSelector');\n\n// ----------------------------------------------------------------------------\n\nvar vtkHardwareSelector$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkHardwareSelector$1 as default, extend, newInstance };\n","const ProjectionMode = {\n  MAX: 0,\n  MIN: 1,\n  AVERAGE: 2\n};\nvar Constants = {\n  ProjectionMode\n};\n\nexport { ProjectionMode, Constants as default };\n","import Constants from './ImageMapper/Constants.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkAbstractImageMapper from './AbstractImageMapper.js';\nimport { intersectWithLineForPointPicking, intersectWithLineForCellPicking } from './AbstractImageMapper/helper.js';\nimport { E as clampValue, S as multiply3x3_vect3, H as createUninitializedBounds, T as getSparseOrthogonalMatrix } from '../../Common/Core/Math/index.js';\nimport CoincidentTopologyHelper from './Mapper/CoincidentTopologyHelper.js';\n\nconst {\n  staticOffsetAPI,\n  otherStaticMethods\n} = CoincidentTopologyHelper;\nconst {\n  SlicingMode\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// vtkImageMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageMapper');\n  publicAPI.getSliceAtPosition = pos => {\n    const image = publicAPI.getCurrentImage();\n    let pos3;\n    if (pos.length === 3) {\n      pos3 = pos;\n    } else if (Number.isFinite(pos)) {\n      const bds = image.getBounds();\n      switch (model.slicingMode) {\n        case SlicingMode.X:\n          pos3 = [pos, (bds[3] + bds[2]) / 2, (bds[5] + bds[4]) / 2];\n          break;\n        case SlicingMode.Y:\n          pos3 = [(bds[1] + bds[0]) / 2, pos, (bds[5] + bds[4]) / 2];\n          break;\n        case SlicingMode.Z:\n          pos3 = [(bds[1] + bds[0]) / 2, (bds[3] + bds[2]) / 2, pos];\n          break;\n      }\n    }\n    const ijk = [0, 0, 0];\n    image.worldToIndex(pos3, ijk);\n    const ex = image.getExtent();\n    const {\n      ijkMode\n    } = publicAPI.getClosestIJKAxis();\n    let slice = 0;\n    switch (ijkMode) {\n      case SlicingMode.I:\n        slice = clampValue(ijk[0], ex[0], ex[1]);\n        break;\n      case SlicingMode.J:\n        slice = clampValue(ijk[1], ex[2], ex[3]);\n        break;\n      case SlicingMode.K:\n        slice = clampValue(ijk[2], ex[4], ex[5]);\n        break;\n      default:\n        return 0;\n    }\n    return slice;\n  };\n  publicAPI.setSliceFromCamera = cam => {\n    const fp = cam.getFocalPoint();\n    switch (model.slicingMode) {\n      case SlicingMode.I:\n      case SlicingMode.J:\n      case SlicingMode.K:\n        {\n          const slice = publicAPI.getSliceAtPosition(fp);\n          publicAPI.setSlice(slice);\n        }\n        break;\n      case SlicingMode.X:\n        publicAPI.setSlice(fp[0]);\n        break;\n      case SlicingMode.Y:\n        publicAPI.setSlice(fp[1]);\n        break;\n      case SlicingMode.Z:\n        publicAPI.setSlice(fp[2]);\n        break;\n    }\n  };\n  publicAPI.setXSlice = id => {\n    publicAPI.setSlicingMode(SlicingMode.X);\n    publicAPI.setSlice(id);\n  };\n  publicAPI.setYSlice = id => {\n    publicAPI.setSlicingMode(SlicingMode.Y);\n    publicAPI.setSlice(id);\n  };\n  publicAPI.setZSlice = id => {\n    publicAPI.setSlicingMode(SlicingMode.Z);\n    publicAPI.setSlice(id);\n  };\n  publicAPI.setISlice = id => {\n    publicAPI.setSlicingMode(SlicingMode.I);\n    publicAPI.setSlice(id);\n  };\n  publicAPI.setJSlice = id => {\n    publicAPI.setSlicingMode(SlicingMode.J);\n    publicAPI.setSlice(id);\n  };\n  publicAPI.setKSlice = id => {\n    publicAPI.setSlicingMode(SlicingMode.K);\n    publicAPI.setSlice(id);\n  };\n  publicAPI.getSlicingModeNormal = () => {\n    const out = [0, 0, 0];\n    const mat3 = publicAPI.getCurrentImage().getDirection();\n    switch (model.slicingMode) {\n      case SlicingMode.X:\n        out[0] = 1;\n        break;\n      case SlicingMode.Y:\n        out[1] = 1;\n        break;\n      case SlicingMode.Z:\n        out[2] = 1;\n        break;\n      case SlicingMode.I:\n        multiply3x3_vect3(mat3, [1, 0, 0], out);\n        break;\n      case SlicingMode.J:\n        multiply3x3_vect3(mat3, [0, 1, 0], out);\n        break;\n      case SlicingMode.K:\n        multiply3x3_vect3(mat3, [0, 0, 1], out);\n        break;\n    }\n    return out;\n  };\n  function computeClosestIJKAxis() {\n    let xyzMode;\n    switch (model.slicingMode) {\n      case SlicingMode.X:\n        xyzMode = 0;\n        break;\n      case SlicingMode.Y:\n        xyzMode = 1;\n        break;\n      case SlicingMode.Z:\n        xyzMode = 2;\n        break;\n      default:\n        model.closestIJKAxis = {\n          ijkMode: model.slicingMode,\n          flip: false\n        };\n        return;\n    }\n\n    // The direction matrix in vtkImageData is the indexToWorld rotation matrix\n    // with a column-major data layout since it is stored as a WebGL matrix.\n    const direction = publicAPI.getCurrentImage().getDirection();\n    const newMatrix = getSparseOrthogonalMatrix(direction);\n    // With {foo}Vector filled with 0s except at {foo}Mode position where it is 1\n    // We have xyzVector = (+/-) newMatrix * ijkVector\n    let ijkMode = 0;\n    for (; ijkMode < 3; ++ijkMode) {\n      if (newMatrix[xyzMode + 3 * ijkMode] !== 0) {\n        break;\n      }\n    }\n    const flip = newMatrix[xyzMode + 3 * ijkMode] < 0;\n    model.closestIJKAxis = {\n      ijkMode,\n      flip\n    };\n  }\n  publicAPI.setSlicingMode = mode => {\n    if (model.slicingMode === mode) {\n      return;\n    }\n    model.slicingMode = mode;\n    if (publicAPI.getCurrentImage()) {\n      computeClosestIJKAxis();\n    }\n    publicAPI.modified();\n  };\n  publicAPI.getClosestIJKAxis = () => {\n    if ((model.closestIJKAxis === undefined || model.closestIJKAxis.ijkMode === SlicingMode.NONE) && publicAPI.getCurrentImage()) {\n      computeClosestIJKAxis();\n    }\n    return model.closestIJKAxis;\n  };\n  publicAPI.getBounds = () => {\n    const image = publicAPI.getCurrentImage();\n    if (!image) {\n      return createUninitializedBounds();\n    }\n    if (!model.useCustomExtents) {\n      return image.getBounds();\n    }\n    const ex = model.customDisplayExtent.slice();\n    const {\n      ijkMode\n    } = publicAPI.getClosestIJKAxis();\n    let nSlice = model.slice;\n    if (ijkMode !== model.slicingMode) {\n      // If not IJK slicing, get the IJK slice from the XYZ position/slice\n      nSlice = publicAPI.getSliceAtPosition(model.slice);\n    }\n    switch (ijkMode) {\n      case SlicingMode.I:\n        ex[0] = nSlice;\n        ex[1] = nSlice;\n        break;\n      case SlicingMode.J:\n        ex[2] = nSlice;\n        ex[3] = nSlice;\n        break;\n      case SlicingMode.K:\n        ex[4] = nSlice;\n        ex[5] = nSlice;\n        break;\n    }\n    return image.extentToBounds(ex);\n  };\n  publicAPI.getBoundsForSlice = function () {\n    let slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.slice;\n    let halfThickness = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const image = publicAPI.getCurrentImage();\n    if (!image) {\n      return createUninitializedBounds();\n    }\n    const extent = image.getSpatialExtent();\n    const {\n      ijkMode\n    } = publicAPI.getClosestIJKAxis();\n    let nSlice = slice;\n    if (ijkMode !== model.slicingMode) {\n      // If not IJK slicing, get the IJK slice from the XYZ position/slice\n      nSlice = publicAPI.getSliceAtPosition(slice);\n    }\n    switch (ijkMode) {\n      case SlicingMode.I:\n        extent[0] = nSlice - halfThickness;\n        extent[1] = nSlice + halfThickness;\n        break;\n      case SlicingMode.J:\n        extent[2] = nSlice - halfThickness;\n        extent[3] = nSlice + halfThickness;\n        break;\n      case SlicingMode.K:\n        extent[4] = nSlice - halfThickness;\n        extent[5] = nSlice + halfThickness;\n        break;\n    }\n    return image.extentToBounds(extent);\n  };\n  publicAPI.intersectWithLineForPointPicking = (p1, p2) => intersectWithLineForPointPicking(p1, p2, publicAPI);\n  publicAPI.intersectWithLineForCellPicking = (p1, p2) => intersectWithLineForCellPicking(p1, p2, publicAPI);\n  publicAPI.getCurrentImage = () => publicAPI.getInputData();\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  slicingMode: SlicingMode.NONE,\n  closestIJKAxis: {\n    ijkMode: SlicingMode.NONE,\n    flip: false\n  },\n  renderToRectangle: false,\n  sliceAtFocalPoint: false,\n  preferSizeOverAccuracy: false // Whether to use halfFloat representation of float, when it is inaccurate\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkAbstractImageMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['slicingMode']);\n  macro.setGet(publicAPI, model, ['closestIJKAxis', 'renderToRectangle', 'sliceAtFocalPoint', 'preferSizeOverAccuracy']);\n  CoincidentTopologyHelper.implementCoincidentTopologyMethods(publicAPI, model);\n\n  // Object methods\n  vtkImageMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageMapper$1 = {\n  newInstance,\n  extend,\n  ...staticOffsetAPI,\n  ...otherStaticMethods,\n  ...Constants\n};\n\nexport { vtkImageMapper$1 as default, extend, newInstance };\n","const SlicingMode = {\n  NONE: -1,\n  I: 0,\n  J: 1,\n  K: 2,\n  X: 3,\n  Y: 4,\n  Z: 5\n};\nvar Constants = {\n  SlicingMode\n};\n\nexport { SlicingMode, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './ImageProperty/Constants.js';\n\nconst {\n  InterpolationType\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\nconst VTK_MAX_VRCOMP = 4;\n\n// ----------------------------------------------------------------------------\n// vtkImageProperty methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageProperty(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageProperty');\n  publicAPI.getMTime = () => {\n    let mTime = model.mtime;\n    let time;\n    for (let index = 0; index < VTK_MAX_VRCOMP; index++) {\n      // Color MTimes\n      if (model.componentData[index].rGBTransferFunction) {\n        // time that RGB transfer function was last modified\n        time = model.componentData[index].rGBTransferFunction.getMTime();\n        mTime = mTime > time ? mTime : time;\n      }\n\n      // Piecewise function MTimes\n      if (model.componentData[index].piecewiseFunction) {\n        // time that weighting function was last modified\n        time = model.componentData[index].piecewiseFunction.getMTime();\n        mTime = mTime > time ? mTime : time;\n      }\n    }\n    return mTime;\n  };\n\n  // Set the color of a volume to an RGB transfer function\n  publicAPI.setRGBTransferFunction = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    // backwards compatible call without the component index\n    let idx = index;\n    let transferFunc = func;\n    if (!Number.isInteger(index)) {\n      transferFunc = index;\n      idx = 0;\n    }\n    if (model.componentData[idx].rGBTransferFunction !== transferFunc) {\n      model.componentData[idx].rGBTransferFunction = transferFunc;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n\n  // Get the currently set RGB transfer function.\n  publicAPI.getRGBTransferFunction = function () {\n    let idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return model.componentData[idx].rGBTransferFunction;\n  };\n\n  // Set the piecewise function\n  publicAPI.setPiecewiseFunction = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let idx = index;\n    let transferFunc = func;\n    if (!Number.isInteger(index)) {\n      transferFunc = index;\n      idx = 0;\n    }\n    if (model.componentData[idx].piecewiseFunction !== transferFunc) {\n      model.componentData[idx].piecewiseFunction = transferFunc;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n\n  // Get the component weighting function.\n  publicAPI.getPiecewiseFunction = function () {\n    let idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return model.componentData[idx].piecewiseFunction;\n  };\n\n  // Alias to set the piecewise function\n  publicAPI.setScalarOpacity = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    // backwards compatible call without the component index\n    let idx = index;\n    let transferFunc = func;\n    if (!Number.isInteger(index)) {\n      transferFunc = index;\n      idx = 0;\n    }\n    return publicAPI.setPiecewiseFunction(idx, transferFunc);\n  };\n\n  // Alias to get the piecewise function (backwards compatibility)\n  publicAPI.getScalarOpacity = function () {\n    let idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return publicAPI.getPiecewiseFunction(idx);\n  };\n  publicAPI.setComponentWeight = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return false;\n    }\n    const val = Math.min(1, Math.max(0, value));\n    if (model.componentData[index].componentWeight !== val) {\n      model.componentData[index].componentWeight = val;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getComponentWeight = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return 0.0;\n    }\n    return model.componentData[index].componentWeight;\n  };\n  publicAPI.setInterpolationTypeToNearest = () => publicAPI.setInterpolationType(InterpolationType.NEAREST);\n  publicAPI.setInterpolationTypeToLinear = () => publicAPI.setInterpolationType(InterpolationType.LINEAR);\n  publicAPI.getInterpolationTypeAsString = () => macro.enumToString(InterpolationType, model.interpolationType);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  independentComponents: false,\n  interpolationType: InterpolationType.LINEAR,\n  colorWindow: 255,\n  colorLevel: 127.5,\n  ambient: 1.0,\n  diffuse: 0.0,\n  opacity: 1.0,\n  useLookupTableScalarRange: false,\n  useLabelOutline: false,\n  labelOutlineThickness: [1],\n  labelOutlineOpacity: 1.0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  if (!model.componentData) {\n    model.componentData = [];\n    for (let i = 0; i < VTK_MAX_VRCOMP; i++) {\n      model.componentData.push({\n        rGBTransferFunction: null,\n        piecewiseFunction: null,\n        componentWeight: 1.0\n      });\n    }\n  }\n  macro.setGet(publicAPI, model, ['independentComponents', 'interpolationType', 'colorWindow', 'colorLevel', 'ambient', 'diffuse', 'opacity', 'useLookupTableScalarRange', 'useLabelOutline', 'labelOutlineOpacity']);\n  macro.setGetArray(publicAPI, model, ['labelOutlineThickness']);\n\n  // Object methods\n  vtkImageProperty(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageProperty');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageProperty$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageProperty$1 as default, extend, newInstance };\n","const InterpolationType = {\n  NEAREST: 0,\n  LINEAR: 1\n};\nvar Constants = {\n  InterpolationType\n};\n\nexport { InterpolationType, Constants as default };\n","import { mat4 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkProp3D from './Prop3D.js';\nimport vtkImageProperty from './ImageProperty.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageSlice methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageSlice(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageSlice');\n  publicAPI.getActors = () => publicAPI;\n  publicAPI.getImages = () => publicAPI;\n  publicAPI.getIsOpaque = () => {\n    if (model.forceOpaque) {\n      return true;\n    }\n    if (model.forceTranslucent) {\n      return false;\n    }\n    // make sure we have a property\n    if (!model.property) {\n      // force creation of a property\n      publicAPI.getProperty();\n    }\n    let isOpaque = model.property.getOpacity() >= 1.0;\n\n    // are we using an opaque scalar array, if any?\n    isOpaque = isOpaque && (!model.mapper || model.mapper.getIsOpaque());\n    return isOpaque;\n  };\n\n  // Always render during opaque pass, to keep the behavior\n  // predictable and because depth-peeling kills alpha-blending.\n  // In the future, the Renderer should render images in layers,\n  // i.e. where each image will have a layer number assigned to it,\n  // and the Renderer will do the images in their own pass.\n  publicAPI.hasTranslucentPolygonalGeometry = () => false;\n  publicAPI.makeProperty = vtkImageProperty.newInstance;\n  publicAPI.getProperty = () => {\n    if (model.property === null) {\n      model.property = publicAPI.makeProperty();\n    }\n    return model.property;\n  };\n  publicAPI.getBounds = () => {\n    if (model.mapper === null) {\n      return model.bounds;\n    }\n\n    // Check for the special case when the mapper's bounds are unknown\n    const bds = model.mapper.getBounds();\n    if (!bds || bds.length !== 6) {\n      return bds;\n    }\n\n    // Check for the special case when the actor is empty.\n    if (bds[0] > bds[1]) {\n      model.mapperBounds = bds.concat(); // copy the mapper's bounds\n      model.bounds = [1, -1, 1, -1, 1, -1];\n      model.boundsMTime.modified();\n      return bds;\n    }\n\n    // Check if we have cached values for these bounds - we cache the\n    // values returned by model.mapper.getBounds() and we store the time\n    // of caching. If the values returned this time are different, or\n    // the modified time of this class is newer than the cached time,\n    // then we need to rebuild.\n    const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n    if (!model.mapperBounds || !zip([bds, model.mapperBounds]).reduce((a, b) => a && b[0] === b[1], true) || publicAPI.getMTime() > model.boundsMTime.getMTime()) {\n      vtkDebugMacro('Recomputing bounds...');\n      model.mapperBounds = bds.map(x => x);\n      publicAPI.computeMatrix();\n      const tmp4 = new Float64Array(16);\n      mat4.transpose(tmp4, model.matrix);\n      vtkBoundingBox.transformBounds(bds, tmp4, model.bounds);\n      model.boundsMTime.modified();\n    }\n    return model.bounds;\n  };\n  publicAPI.getBoundsForSlice = (slice, thickness) => {\n    // Check for the special case when the mapper's bounds are unknown\n    const bds = model.mapper.getBoundsForSlice(slice, thickness);\n    // Check for the special case when the actor is empty.\n    if (!vtkBoundingBox.isValid(bds)) {\n      return bds;\n    }\n    publicAPI.computeMatrix();\n    const tmp4 = new Float64Array(16);\n    mat4.transpose(tmp4, model.matrix);\n    const newBounds = vtkBoundingBox.transformBounds(bds, tmp4);\n    return newBounds;\n  };\n\n  //----------------------------------------------------------------------------\n  // Get the minimum X bound\n  publicAPI.getMinXBound = () => publicAPI.getBounds()[0];\n\n  // Get the maximum X bound\n  publicAPI.getMaxXBound = () => publicAPI.getBounds()[1];\n\n  // Get the minimum Y bound\n  publicAPI.getMinYBound = () => publicAPI.getBounds()[2];\n\n  // Get the maximum Y bound\n  publicAPI.getMaxYBound = () => publicAPI.getBounds()[3];\n\n  // Get the minimum Z bound\n  publicAPI.getMinZBound = () => publicAPI.getBounds()[4];\n\n  // Get the maximum Z bound\n  publicAPI.getMaxZBound = () => publicAPI.getBounds()[5];\n  publicAPI.getMTime = () => {\n    let mt = model.mtime;\n    if (model.property !== null) {\n      const time = model.property.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.getRedrawMTime = () => {\n    let mt = model.mtime;\n    if (model.mapper !== null) {\n      let time = model.mapper.getMTime();\n      mt = time > mt ? time : mt;\n      if (model.mapper.getInput() !== null) {\n        // FIXME !!! getInputAlgorithm / getInput\n        model.mapper.getInputAlgorithm().update();\n        time = model.mapper.getInput().getMTime();\n        mt = time > mt ? time : mt;\n      }\n    }\n    if (model.property !== null) {\n      let time = model.property.getMTime();\n      mt = time > mt ? time : mt;\n      if (model.property.getRGBTransferFunction() !== null) {\n        time = model.property.getRGBTransferFunction().getMTime();\n        mt = time > mt ? time : mt;\n      }\n    }\n    return mt;\n  };\n  publicAPI.getSupportsSelection = () => model.mapper ? model.mapper.getSupportsSelection() : false;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  mapper: null,\n  property: null,\n  forceOpaque: false,\n  forceTranslucent: false,\n  bounds: [...vtkBoundingBox.INIT_BOUNDS]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkProp3D.extend(publicAPI, model, initialValues);\n\n  // vtkTimeStamp\n  model.boundsMTime = {};\n  macro.obj(model.boundsMTime);\n\n  // Build VTK API\n  macro.set(publicAPI, model, ['property']);\n  macro.setGet(publicAPI, model, ['mapper', 'forceOpaque', 'forceTranslucent']);\n  macro.getArray(publicAPI, model, ['bounds'], 6);\n\n  // Object methods\n  vtkImageSlice(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageSlice');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageSlice$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageSlice$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { l as normalize, r as radiansFromDegrees } from '../../Common/Core/Math/index.js';\nimport { vec3 } from 'gl-matrix';\n\n// ----------------------------------------------------------------------------\n\nconst LIGHT_TYPES = ['HeadLight', 'CameraLight', 'SceneLight'];\n\n// ----------------------------------------------------------------------------\n// vtkLight methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLight(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLight');\n  const tmpVec = new Float64Array(3);\n  publicAPI.getTransformedPosition = () => {\n    if (model.transformMatrix) {\n      vec3.transformMat4(tmpVec, model.position, model.transformMatrix);\n    } else {\n      vec3.set(tmpVec, model.position[0], model.position[1], model.position[2]);\n    }\n    return tmpVec;\n  };\n  publicAPI.getTransformedFocalPoint = () => {\n    if (model.transformMatrix) {\n      vec3.transformMat4(tmpVec, model.focalPoint, model.transformMatrix);\n    } else {\n      vec3.set(tmpVec, model.focalPoint[0], model.focalPoint[1], model.focalPoint[2]);\n    }\n    return tmpVec;\n  };\n  publicAPI.getDirection = () => {\n    if (model.directionMTime < model.mtime) {\n      vec3.sub(model.direction, model.focalPoint, model.position);\n      normalize(model.direction);\n      model.directionMTime = model.mtime;\n    }\n    return model.direction;\n  };\n\n  // Sets the direction from a vec3 instead of a focal point\n  publicAPI.setDirection = directionVector => {\n    const newFocalPoint = new Float64Array(3);\n    vec3.sub(newFocalPoint, model.position, directionVector);\n    model.focalPoint = newFocalPoint;\n  };\n  publicAPI.setDirectionAngle = (elevation, azimuth) => {\n    const elevationRadians = radiansFromDegrees(elevation);\n    const azimuthRadians = radiansFromDegrees(azimuth);\n    publicAPI.setPosition(Math.cos(elevationRadians) * Math.sin(azimuthRadians), Math.sin(elevationRadians), Math.cos(elevationRadians) * Math.cos(azimuthRadians));\n    publicAPI.setFocalPoint(0, 0, 0);\n    publicAPI.setPositional(0);\n  };\n  publicAPI.setLightTypeToHeadLight = () => {\n    publicAPI.setLightType('HeadLight');\n  };\n  publicAPI.setLightTypeToCameraLight = () => {\n    publicAPI.setLightType('CameraLight');\n  };\n  publicAPI.setLightTypeToSceneLight = () => {\n    publicAPI.setTransformMatrix(null);\n    publicAPI.setLightType('SceneLight');\n  };\n  publicAPI.lightTypeIsHeadLight = () => model.lightType === 'HeadLight';\n  publicAPI.lightTypeIsSceneLight = () => model.lightType === 'SceneLight';\n  publicAPI.lightTypeIsCameraLight = () => model.lightType === 'CameraLight';\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  switch: true,\n  intensity: 1,\n  color: [1, 1, 1],\n  position: [0, 0, 1],\n  focalPoint: [0, 0, 0],\n  positional: false,\n  exponent: 1,\n  coneAngle: 30,\n  coneFalloff: 5,\n  attenuationValues: [1, 0, 0],\n  transformMatrix: null,\n  lightType: 'SceneLight',\n  shadowAttenuation: 1,\n  direction: [0, 0, 0],\n  directionMTime: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['intensity', 'switch', 'positional', 'exponent', 'coneAngle', 'coneFalloff', 'transformMatrix', 'lightType', 'shadowAttenuation', 'attenuationValues']);\n  macro.setGetArray(publicAPI, model, ['color', 'position', 'focalPoint', 'attenuationValues'], 3);\n\n  // Object methods\n  vtkLight(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkLight');\n\n// ----------------------------------------------------------------------------\n\nvar vtkLight$1 = {\n  newInstance,\n  extend,\n  LIGHT_TYPES\n};\n\nexport { LIGHT_TYPES, vtkLight$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkAbstractMapper3D from './AbstractMapper3D.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkImageData from '../../Common/DataModel/ImageData.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport { H as createUninitializedBounds, i as isNan } from '../../Common/Core/Math/index.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors/Constants.js';\nimport CoincidentTopologyHelper from './Mapper/CoincidentTopologyHelper.js';\nimport Constants from './Mapper/Constants.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\nimport { PassTypes } from '../OpenGL/HardwareSelector/Constants.js';\n\nconst {\n  FieldAssociations\n} = vtkDataSet;\nconst {\n  staticOffsetAPI,\n  otherStaticMethods\n} = CoincidentTopologyHelper;\nconst {\n  ColorMode,\n  ScalarMode,\n  GetArray\n} = Constants;\nconst {\n  VectorMode\n} = vtkScalarsToColors;\nconst {\n  VtkDataTypes\n} = vtkDataArray;\n\n// ----------------------------------------------------------------------------\n\nfunction notImplemented(method) {\n  return () => macro.vtkErrorMacro(`vtkMapper::${method} - NOT IMPLEMENTED`);\n}\n\n/**\n * Increase by one the 3D coordinates\n * It will follow a zigzag pattern so that each coordinate is the neighbor of the next coordinate\n * This enables interpolation between two texels without issues\n * Note: texture coordinates can't be interpolated using this pattern\n * @param {vec3} coordinates The 3D coordinates using integers for each coorinate\n * @param {vec3} dimensions The 3D dimensions of the volume\n */\nfunction updateZigzaggingCoordinates(coordinates, dimensions) {\n  const directionX = coordinates[1] % 2 === 0 ? 1 : -1;\n  coordinates[0] += directionX;\n  if (coordinates[0] >= dimensions[0] || coordinates[0] < 0) {\n    const directionY = coordinates[2] % 2 === 0 ? 1 : -1;\n    coordinates[0] -= directionX;\n    coordinates[1] += directionY;\n    if (coordinates[1] >= dimensions[1] || coordinates[1] < 0) {\n      coordinates[1] -= directionY;\n      coordinates[2]++;\n    }\n  }\n}\n\n/**\n * Returns the index in the array representing the volume from a 3D coordinate\n * @param {vec3} coordinates The 3D integer coordinates\n * @param {vec3} dimensions The 3D dimensions of the volume\n * @returns The index in a flat array representing the volume\n */\nfunction getIndexFromCoordinates(coordinates, dimensions) {\n  return coordinates[0] + dimensions[0] * (coordinates[1] + dimensions[1] * coordinates[2]);\n}\n\n/**\n * Write texture coordinates for the given `texelIndexPosition` in `textureCoordinate`.\n * The `texelIndexPosition` is a floating point number that represents the distance in index space\n * from the center of the first texel to the final output position.\n * The output is given in texture coordinates and not in index coordinates (this is done at the very end of the function)\n * @param {vec3} textureCoordinate The output texture coordinates (to avoid allocating a new Array)\n * @param {Number} texelIndexPosition The floating point distance from the center of the first texel, following a zigzag pattern\n * @param {vec3} dimensions The 3D dimensions of the volume\n */\nfunction getZigZagTextureCoordinatesFromTexelPosition(textureCoordinate, texelIndexPosition, dimensions) {\n  // First compute the integer textureCoordinate\n  const intTexelIndex = Math.floor(texelIndexPosition);\n  const xCoordBeforeWrap = intTexelIndex % (2 * dimensions[0]);\n  let xDirection;\n  let xEndFlag;\n  if (xCoordBeforeWrap < dimensions[0]) {\n    textureCoordinate[0] = xCoordBeforeWrap;\n    xDirection = 1;\n    xEndFlag = textureCoordinate[0] === dimensions[0] - 1;\n  } else {\n    textureCoordinate[0] = 2 * dimensions[0] - 1 - xCoordBeforeWrap;\n    xDirection = -1;\n    xEndFlag = textureCoordinate[0] === 0;\n  }\n  const intRowIndex = Math.floor(intTexelIndex / dimensions[0]);\n  const yCoordBeforeWrap = intRowIndex % (2 * dimensions[1]);\n  let yDirection;\n  let yEndFlag;\n  if (yCoordBeforeWrap < dimensions[1]) {\n    textureCoordinate[1] = yCoordBeforeWrap;\n    yDirection = 1;\n    yEndFlag = textureCoordinate[1] === dimensions[1] - 1;\n  } else {\n    textureCoordinate[1] = 2 * dimensions[1] - 1 - yCoordBeforeWrap;\n    yDirection = -1;\n    yEndFlag = textureCoordinate[1] === 0;\n  }\n  textureCoordinate[2] = Math.floor(intRowIndex / dimensions[1]);\n\n  // Now add the remainder either in x, y or z\n  const remainder = texelIndexPosition - intTexelIndex;\n  if (xEndFlag) {\n    if (yEndFlag) {\n      textureCoordinate[2] += remainder;\n    } else {\n      textureCoordinate[1] += yDirection * remainder;\n    }\n  } else {\n    textureCoordinate[0] += xDirection * remainder;\n  }\n\n  // textureCoordinates are in index space, convert to texture space\n  textureCoordinate[0] = (textureCoordinate[0] + 0.5) / dimensions[0];\n  textureCoordinate[1] = (textureCoordinate[1] + 0.5) / dimensions[1];\n  textureCoordinate[2] = (textureCoordinate[2] + 0.5) / dimensions[2];\n}\n\n// Associate an input vtkDataArray to an object { stringHash, textureCoordinates }\n// A single dataArray only caches one array of texture coordinates, so this cache is useless when\n// the input data array is used with two different lookup tables (which is very unlikely)\nconst colorTextureCoordinatesCache = new WeakMap();\n/**\n * The minimum of the range is mapped to the center of the first texel excluding min texel (texel at index distance 1)\n * The maximum of the range is mapped to the center of the last texel excluding max and NaN texels (texel at index distance numberOfColorsInRange)\n * The result is cached, and is reused if the arguments are the same and the input doesn't change\n * @param {vtkDataArray} input The input data array used for coloring\n * @param {Number} component The component of the input data array that is used for coloring (-1 for magnitude of the vectors)\n * @param {Range} range The range of the scalars\n * @param {Number} numberOfColorsInRange The number of colors that are used in the range\n * @param {vec3} dimensions The dimensions of the texture\n * @param {boolean} useLogScale If log scale should be used to transform input scalars\n * @param {boolean} useZigzagPattern If a zigzag pattern should be used. Otherwise 1 row for colors (including min and max) and 1 row for NaN are used.\n * @returns A vtkDataArray containing the texture coordinates (2D or 3D)\n */\nfunction getOrCreateColorTextureCoordinates(input, component, range, numberOfColorsInRange, dimensions, useLogScale, useZigzagPattern) {\n  // Caching using the \"arguments\" special object (because it is a pure function)\n  const argStrings = new Array(arguments.length);\n  for (let argIndex = 0; argIndex < arguments.length; ++argIndex) {\n    // eslint-disable-next-line prefer-rest-params\n    const arg = arguments[argIndex];\n    argStrings[argIndex] = arg.getMTime?.() ?? arg;\n  }\n  const stringHash = argStrings.join('/');\n  const cachedResult = colorTextureCoordinatesCache.get(input);\n  if (cachedResult && cachedResult.stringHash === stringHash) {\n    return cachedResult.textureCoordinates;\n  }\n\n  // The range used for computing coordinates have to change\n  // slightly to accommodate the special above- and below-range\n  // colors that are the first and last texels, respectively.\n  const scalarTexelWidth = (range[1] - range[0]) / (numberOfColorsInRange - 1);\n  const [paddedRangeMin, paddedRangeMax] = [range[0] - scalarTexelWidth, range[1] + scalarTexelWidth];\n\n  // Use the center of the voxel\n  const textureSOrigin = paddedRangeMin - 0.5 * scalarTexelWidth;\n  const textureSCoeff = 1.0 / (paddedRangeMax - paddedRangeMin + scalarTexelWidth);\n\n  // Compute in index space first\n  const texelIndexOrigin = paddedRangeMin;\n  const texelIndexCoeff = (numberOfColorsInRange + 1) / (paddedRangeMax - paddedRangeMin);\n  const inputV = input.getData();\n  const numScalars = input.getNumberOfTuples();\n  const numComps = input.getNumberOfComponents();\n  const useMagnitude = component < 0 || component >= numComps;\n  const numberOfOutputComponents = dimensions[2] <= 1 ? 2 : 3;\n  const output = vtkDataArray.newInstance({\n    numberOfComponents: numberOfOutputComponents,\n    values: new Float32Array(numScalars * numberOfOutputComponents)\n  });\n  const outputV = output.getData();\n  const nanTextureCoordinate = [0, 0, 0];\n  // Distance of NaN from the beginning:\n  // min: 0, ...colorsInRange, max: numberOfColorsInRange + 1, NaN = numberOfColorsInRange + 2\n  getZigZagTextureCoordinatesFromTexelPosition(nanTextureCoordinate, numberOfColorsInRange + 2, dimensions);\n\n  // Set a texture coordinate in the output for each tuple in the input\n  let inputIdx = 0;\n  let outputIdx = 0;\n  const textureCoordinate = [0.5, 0.5, 0.5];\n  for (let scalarIdx = 0; scalarIdx < numScalars; ++scalarIdx) {\n    // Get scalar value from magnitude or a single component\n    let scalarValue;\n    if (useMagnitude) {\n      let sum = 0;\n      for (let compIdx = 0; compIdx < numComps; ++compIdx) {\n        const compValue = inputV[inputIdx + compIdx];\n        sum += compValue * compValue;\n      }\n      scalarValue = Math.sqrt(sum);\n    } else {\n      scalarValue = inputV[inputIdx + component];\n    }\n    inputIdx += numComps;\n\n    // Apply log scale if necessary\n    if (useLogScale) {\n      scalarValue = vtkLookupTable.applyLogScale(scalarValue, range, range);\n    }\n\n    // Convert to texture coordinates and update output\n    if (isNan(scalarValue)) {\n      // Last texels are NaN colors (there is at least one NaN color)\n      textureCoordinate[0] = nanTextureCoordinate[0];\n      textureCoordinate[1] = nanTextureCoordinate[1];\n      textureCoordinate[2] = nanTextureCoordinate[2];\n    } else if (useZigzagPattern) {\n      // Texel position is in [0, numberOfColorsInRange + 1]\n      let texelIndexPosition = (scalarValue - texelIndexOrigin) * texelIndexCoeff;\n      if (texelIndexPosition < 1) {\n        // Use min color when smaller than range\n        texelIndexPosition = 0;\n      } else if (texelIndexPosition > numberOfColorsInRange) {\n        // Use max color when greater than range\n        texelIndexPosition = numberOfColorsInRange + 1;\n      }\n\n      // Convert the texel position into texture coordinate following a zigzag pattern\n      getZigZagTextureCoordinatesFromTexelPosition(textureCoordinate, texelIndexPosition, dimensions);\n    } else {\n      // 0.0 in t coordinate means not NaN.  So why am I setting it to 0.49?\n      // Because when you are mapping scalars and you have a NaN adjacent to\n      // anything else, the interpolation everywhere should be NaN.  Thus, I\n      // want the NaN color everywhere except right on the non-NaN neighbors.\n      // To simulate this, I set the t coord for the real numbers close to\n      // the threshold so that the interpolation almost immediately looks up\n      // the NaN value.\n      textureCoordinate[1] = 0.49;\n\n      // Some implementations apparently don't handle relatively large\n      // numbers (compared to the range [0.0, 1.0]) very well. In fact,\n      // values above 1122.0f appear to cause texture wrap-around on\n      // some systems even when edge clamping is enabled. Why 1122.0f? I\n      // don't know. For safety, we'll clamp at +/- 1000. This will\n      // result in incorrect images when the texture value should be\n      // above or below 1000, but I don't have a better solution.\n      const textureS = (scalarValue - textureSOrigin) * textureSCoeff;\n      if (textureS > 1000.0) {\n        textureCoordinate[0] = 1000.0;\n      } else if (textureS < -1000.0) {\n        textureCoordinate[0] = -1000.0;\n      } else {\n        textureCoordinate[0] = textureS;\n      }\n    }\n    for (let i = 0; i < numberOfOutputComponents; ++i) {\n      outputV[outputIdx++] = textureCoordinate[i];\n    }\n  }\n  colorTextureCoordinatesCache.set(input, {\n    stringHash,\n    textureCoordinates: output\n  });\n  return output;\n}\n\n// ----------------------------------------------------------------------------\n// vtkMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkMapper');\n  publicAPI.getBounds = () => {\n    const input = publicAPI.getInputData();\n    if (!input) {\n      model.bounds = createUninitializedBounds();\n    } else {\n      if (!model.static) {\n        publicAPI.update();\n      }\n      model.bounds = input.getBounds();\n    }\n    return model.bounds;\n  };\n  publicAPI.setForceCompileOnly = v => {\n    model.forceCompileOnly = v;\n    // make sure we do NOT call modified()\n  };\n\n  publicAPI.setSelectionWebGLIdsToVTKIds = selectionWebGLIdsToVTKIds => {\n    model.selectionWebGLIdsToVTKIds = selectionWebGLIdsToVTKIds;\n    // make sure we do NOT call modified()\n    // this attribute is only used when processing a selection made with the hardware selector\n    // the mtime of the mapper doesn't need to be changed\n  };\n\n  publicAPI.createDefaultLookupTable = () => {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n  publicAPI.getColorModeAsString = () => macro.enumToString(ColorMode, model.colorMode);\n  publicAPI.setColorModeToDefault = () => publicAPI.setColorMode(0);\n  publicAPI.setColorModeToMapScalars = () => publicAPI.setColorMode(1);\n  publicAPI.setColorModeToDirectScalars = () => publicAPI.setColorMode(2);\n  publicAPI.getScalarModeAsString = () => macro.enumToString(ScalarMode, model.scalarMode);\n  publicAPI.setScalarModeToDefault = () => publicAPI.setScalarMode(0);\n  publicAPI.setScalarModeToUsePointData = () => publicAPI.setScalarMode(1);\n  publicAPI.setScalarModeToUseCellData = () => publicAPI.setScalarMode(2);\n  publicAPI.setScalarModeToUsePointFieldData = () => publicAPI.setScalarMode(3);\n  publicAPI.setScalarModeToUseCellFieldData = () => publicAPI.setScalarMode(4);\n  publicAPI.setScalarModeToUseFieldData = () => publicAPI.setScalarMode(5);\n  publicAPI.getAbstractScalars = (input, scalarMode, arrayAccessMode, arrayId, arrayName) => {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFlag: false\n      };\n    }\n    let scalars = null;\n    let cellFlag = false;\n\n    // get and scalar data according to scalar mode\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      const pd = input.getPointData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      const cd = input.getCellData();\n      cellFlag = true;\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      const fd = input.getFieldData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n    return {\n      scalars,\n      cellFlag\n    };\n  };\n  publicAPI.mapScalars = (input, alpha) => {\n    const {\n      scalars,\n      cellFlag\n    } = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName);\n    model.areScalarsMappedFromCells = cellFlag;\n    if (!scalars) {\n      model.colorCoordinates = null;\n      model.colorTextureMap = null;\n      model.colorMapColors = null;\n      return;\n    }\n\n    // we want to only recompute when something has changed\n    const toString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n    if (model.colorBuildString === toString) return;\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n\n    // Decide between texture color or vertex color.\n    // Cell data always uses vertex color.\n    // Only point data can use both texture and vertex coloring.\n    if (publicAPI.canUseTextureMapForColoring(scalars, cellFlag)) {\n      model.mapScalarsToTexture(scalars, cellFlag, alpha);\n    } else {\n      model.colorCoordinates = null;\n      model.colorTextureMap = null;\n      const lut = publicAPI.getLookupTable();\n      if (lut) {\n        // Ensure that the lookup table is built\n        lut.build();\n        model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n      }\n    }\n    model.colorBuildString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n  };\n\n  // Protected method\n  model.mapScalarsToTexture = (scalars, cellFlag, alpha) => {\n    const range = model.lookupTable.getRange();\n    const useLogScale = model.lookupTable.usingLogScale();\n    if (useLogScale) {\n      // convert range to log.\n      vtkLookupTable.getLogRange(range, range);\n    }\n    const origAlpha = model.lookupTable.getAlpha();\n\n    // Get rid of vertex color array.  Only texture or vertex coloring\n    // can be active at one time.  The existence of the array is the\n    // signal to use that technique.\n    model.colorMapColors = null;\n\n    // If the lookup table has changed, then recreate the color texture map.\n    // Set a new lookup table changes this->MTime.\n    if (model.colorTextureMap == null || publicAPI.getMTime() > model.colorTextureMap.getMTime() || model.lookupTable.getMTime() > model.colorTextureMap.getMTime() || model.lookupTable.getAlpha() !== alpha) {\n      model.lookupTable.setAlpha(alpha);\n      model.colorTextureMap = null;\n\n      // Get the texture map from the lookup table.\n      // Create a dummy ramp of scalars.\n      // In the future, we could extend vtkScalarsToColors.\n      model.lookupTable.build();\n      const numberOfAvailableColors = model.lookupTable.getNumberOfAvailableColors();\n\n      // Maximum dimensions and number of colors in range\n      const maxTextureWidthForCells = 2048;\n      const maxColorsInRangeForCells = maxTextureWidthForCells ** 3 - 3; // 3D but keep a color for min, max and NaN\n      const maxTextureWidthForPoints = 4096;\n      const maxColorsInRangeForPoints = maxTextureWidthForPoints - 2; // 1D but keep a color for min and max (NaN is in a different row)\n      // Minimum number of colors in range (excluding special colors like minColor, maxColor and NaNColor)\n      const minColorsInRange = 2;\n      // Maximum number of colors, limited by the maximum possible texture size\n      const maxColorsInRange = cellFlag ? maxColorsInRangeForCells : maxColorsInRangeForPoints;\n      model.numberOfColorsInRange = Math.min(Math.max(numberOfAvailableColors, minColorsInRange), maxColorsInRange);\n      const numberOfColorsForCells = model.numberOfColorsInRange + 3; // Add min, max and NaN\n      const numberOfColorsInUpperRowForPoints = model.numberOfColorsInRange + 2; // Add min and max ; the lower row will be used for NaN color\n      const textureDimensions = cellFlag ? [Math.min(Math.ceil(numberOfColorsForCells / maxTextureWidthForCells ** 0), maxTextureWidthForCells), Math.min(Math.ceil(numberOfColorsForCells / maxTextureWidthForCells ** 1), maxTextureWidthForCells), Math.min(Math.ceil(numberOfColorsForCells / maxTextureWidthForCells ** 2), maxTextureWidthForCells)] : [numberOfColorsInUpperRowForPoints, 2, 1];\n      const textureSize = textureDimensions[0] * textureDimensions[1] * textureDimensions[2];\n      const scalarsArray = new Float64Array(textureSize);\n\n      // Colors for NaN by default\n      scalarsArray.fill(NaN);\n\n      // Colors in range\n      // Add 2 to also get color for min and max\n      const numberOfNonSpecialColors = model.numberOfColorsInRange;\n      const numberOfNonNaNColors = numberOfNonSpecialColors + 2;\n      const textureCoordinates = [0, 0, 0];\n      const rangeMin = range[0];\n      const rangeDifference = range[1] - range[0];\n      for (let i = 0; i < numberOfNonNaNColors; ++i) {\n        const scalarsArrayIndex = getIndexFromCoordinates(textureCoordinates, textureDimensions);\n\n        // Minus 1 start at min color\n        const scalarValue = rangeMin + rangeDifference * (i - 1) / (numberOfNonSpecialColors - 1);\n        scalarsArray[scalarsArrayIndex] = useLogScale ? 10.0 ** scalarValue : scalarValue;\n\n        // Colors are zigzagging to allow interpolation between two neighbor colors when coloring cells\n        updateZigzaggingCoordinates(textureCoordinates, textureDimensions);\n      }\n      const scalarsDataArray = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: scalarsArray\n      });\n      const colorsDataArray = model.lookupTable.mapScalars(scalarsDataArray, model.colorMode, 0);\n      model.colorTextureMap = vtkImageData.newInstance();\n      model.colorTextureMap.setDimensions(textureDimensions);\n      model.colorTextureMap.getPointData().setScalars(colorsDataArray);\n      model.lookupTable.setAlpha(origAlpha);\n    }\n\n    // Although I like the feature of applying magnitude to single component\n    // scalars, it is not how the old MapScalars for vertex coloring works.\n    const scalarComponent = model.lookupTable.getVectorMode() === VectorMode.MAGNITUDE && scalars.getNumberOfComponents() > 1 ? -1 : model.lookupTable.getVectorComponent();\n\n    // Create new coordinates if necessary, this function uses cache if possible.\n    // A zigzag pattern can't be used with point data, as interpolation of texture coordinates will be wrong\n    // A zigzag pattern can be used with cell data, as there will be no texture coordinates interpolation\n    // The texture generated using a zigzag pattern in one dimension is the same as without zigzag\n    // Therefore, the same code can be used for texture generation of point/cell data but not for texture coordinates\n    model.colorCoordinates = getOrCreateColorTextureCoordinates(scalars, scalarComponent, range, model.numberOfColorsInRange, model.colorTextureMap.getDimensions(), useLogScale, cellFlag);\n  };\n  publicAPI.getIsOpaque = () => {\n    const input = publicAPI.getInputData();\n    const gasResult = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName);\n    const scalars = gasResult.scalars;\n    if (!model.scalarVisibility || scalars == null) {\n      // No scalar colors.\n      return true;\n    }\n    const lut = publicAPI.getLookupTable();\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      return lut.areScalarsOpaque(scalars, model.colorMode, -1);\n    }\n    return true;\n  };\n  publicAPI.canUseTextureMapForColoring = (scalars, cellFlag) => {\n    if (cellFlag && !(model.colorMode === ColorMode.DIRECT_SCALARS)) {\n      return true; // cell data always use textures.\n    }\n\n    if (!model.interpolateScalarsBeforeMapping) {\n      return false; // user doesn't want us to use texture maps at all.\n    }\n\n    // index color does not use textures\n    if (model.lookupTable && model.lookupTable.getIndexedLookup()) {\n      return false;\n    }\n    if (!scalars) {\n      // no scalars on this dataset, we don't care if texture is used at all.\n      return false;\n    }\n    if (model.colorMode === ColorMode.DEFAULT && scalars.getDataType() === VtkDataTypes.UNSIGNED_CHAR || model.colorMode === ColorMode.DIRECT_SCALARS) {\n      // Don't use texture is direct coloring using RGB unsigned chars is\n      // requested.\n      return false;\n    }\n    return true;\n  };\n  publicAPI.clearColorArrays = () => {\n    model.colorMapColors = null;\n    model.colorCoordinates = null;\n    model.colorTextureMap = null;\n  };\n  publicAPI.getLookupTable = () => {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n    return model.lookupTable;\n  };\n  publicAPI.getMTime = () => {\n    let mt = model.mtime;\n    if (model.lookupTable !== null) {\n      const time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.getPrimitiveCount = () => {\n    const input = publicAPI.getInputData();\n    const pcount = {\n      points: input.getPoints().getNumberOfValues() / 3,\n      verts: input.getVerts().getNumberOfValues() - input.getVerts().getNumberOfCells(),\n      lines: input.getLines().getNumberOfValues() - 2 * input.getLines().getNumberOfCells(),\n      triangles: input.getPolys().getNumberOfValues() - 3 * input.getPolys().getNumberOfCells()\n    };\n    return pcount;\n  };\n  publicAPI.acquireInvertibleLookupTable = notImplemented('AcquireInvertibleLookupTable');\n  publicAPI.valueToColor = notImplemented('ValueToColor');\n  publicAPI.colorToValue = notImplemented('ColorToValue');\n  publicAPI.useInvertibleColorFor = notImplemented('UseInvertibleColorFor');\n  publicAPI.clearInvertibleColor = notImplemented('ClearInvertibleColor');\n  publicAPI.processSelectorPixelBuffers = (selector, pixelOffsets) => {\n    /* eslint-disable no-bitwise */\n    if (!selector || !model.selectionWebGLIdsToVTKIds || !model.populateSelectionSettings) {\n      return;\n    }\n    const rawLowData = selector.getRawPixelBuffer(PassTypes.ID_LOW24);\n    const rawHighData = selector.getRawPixelBuffer(PassTypes.ID_HIGH24);\n    const currentPass = selector.getCurrentPass();\n    const fieldAssociation = selector.getFieldAssociation();\n    let idMap = null;\n    if (fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      idMap = model.selectionWebGLIdsToVTKIds.points;\n    } else if (fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_CELLS) {\n      idMap = model.selectionWebGLIdsToVTKIds.cells;\n    }\n    if (!idMap) {\n      return;\n    }\n    pixelOffsets.forEach(pos => {\n      if (currentPass === PassTypes.ID_LOW24) {\n        let inValue = 0;\n        if (rawHighData) {\n          inValue += rawHighData[pos];\n          inValue *= 256;\n        }\n        inValue += rawLowData[pos + 2];\n        inValue *= 256;\n        inValue += rawLowData[pos + 1];\n        inValue *= 256;\n        inValue += rawLowData[pos];\n        const outValue = idMap[inValue];\n        const lowData = selector.getPixelBuffer(PassTypes.ID_LOW24);\n        lowData[pos] = outValue & 0xff;\n        lowData[pos + 1] = (outValue & 0xff00) >> 8;\n        lowData[pos + 2] = (outValue & 0xff0000) >> 16;\n      } else if (currentPass === PassTypes.ID_HIGH24 && rawHighData) {\n        let inValue = 0;\n        inValue += rawHighData[pos];\n        inValue *= 256;\n        inValue += rawLowData[pos + 2];\n        inValue *= 256;\n        inValue += rawLowData[pos + 1];\n        inValue *= 256;\n        inValue += rawLowData[pos];\n        const outValue = idMap[inValue];\n        const highData = selector.getPixelBuffer(PassTypes.ID_HIGH24);\n        highData[pos] = (outValue & 0xff000000) >> 24;\n      }\n    });\n    /* eslint-enable no-bitwise */\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorMapColors: null,\n  // Same as this->Colors\n  areScalarsMappedFromCells: false,\n  static: false,\n  lookupTable: null,\n  scalarVisibility: true,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n\n  renderTime: 0,\n  colorByArrayName: null,\n  fieldDataTupleId: -1,\n  populateSelectionSettings: true,\n  selectionWebGLIdsToVTKIds: null,\n  interpolateScalarsBeforeMapping: false,\n  colorCoordinates: null,\n  colorTextureMap: null,\n  numberOfColorsInRange: 0,\n  forceCompileOnly: 0,\n  useInvertibleColors: false,\n  invertibleScalars: null,\n  customShaderAttributes: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkAbstractMapper3D.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['areScalarsMappedFromCells', 'colorCoordinates', 'colorMapColors', 'colorTextureMap', 'numberOfColorsInRange', 'selectionWebGLIdsToVTKIds']);\n  macro.setGet(publicAPI, model, ['colorByArrayName', 'arrayAccessMode', 'colorMode', 'fieldDataTupleId', 'interpolateScalarsBeforeMapping', 'lookupTable', 'populateSelectionSettings', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'useLookupTableScalarRange', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n  CoincidentTopologyHelper.implementCoincidentTopologyMethods(publicAPI, model);\n\n  // Object methods\n  vtkMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkMapper$1 = {\n  newInstance,\n  extend,\n  ...staticOffsetAPI,\n  ...otherStaticMethods,\n  ...Constants\n};\n\nexport { vtkMapper$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport Constants from './Mapper/Constants.js';\n\nconst {\n  ColorMode,\n  ScalarMode,\n  GetArray\n} = Constants;\n\n// ---------------------------------------------------------------------------\n// vtkMapper2D methods\n// ---------------------------------------------------------------------------\n\nfunction vtkMapper2D(publicAPI, model) {\n  // Set out className\n  model.classHierarchy.push('vtkMapper2D');\n  publicAPI.createDefaultLookupTable = () => {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n  publicAPI.getColorModeAsString = () => macro.enumToString(ColorMode, model.colorMode);\n  publicAPI.setColorModeToDefault = () => publicAPI.setColorMode(0);\n  publicAPI.setColorModeToMapScalars = () => publicAPI.setColorMode(1);\n  publicAPI.setColorModeToDirectScalars = () => publicAPI.setColorMode(2);\n  publicAPI.getScalarModeAsString = () => macro.enumToString(ScalarMode, model.scalarMode);\n  publicAPI.setScalarModeToDefault = () => publicAPI.setScalarMode(0);\n  publicAPI.setScalarModeToUsePointData = () => publicAPI.setScalarMode(1);\n  publicAPI.setScalarModeToUseCellData = () => publicAPI.setScalarMode(2);\n  publicAPI.setScalarModeToUsePointFieldData = () => publicAPI.setScalarMode(3);\n  publicAPI.setScalarModeToUseCellFieldData = () => publicAPI.setScalarMode(4);\n  publicAPI.setScalarModeToUseFieldData = () => publicAPI.setScalarMode(5);\n  publicAPI.getAbstractScalars = (input, scalarMode, arrayAccessMode, arrayId, arrayName) => {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFLag: false\n      };\n    }\n    let scalars = null;\n    let cellFlag = false;\n\n    // get scalar data and point/cell attribute according to scalar mode\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      const pd = input.getPointData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      const cd = input.getCellData();\n      cellFlag = true;\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      const fd = input.getFieldData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n    return {\n      scalars,\n      cellFlag\n    };\n  };\n  publicAPI.getLookupTable = () => {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n    return model.lookupTable;\n  };\n  publicAPI.getMTime = () => {\n    let mt = model.mtime;\n    if (model.lookupTable !== null) {\n      const time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.mapScalars = (input, alpha) => {\n    const scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;\n    if (!scalars) {\n      model.colorMapColors = null;\n      return;\n    }\n\n    // we want to only recompute when something has changed\n    const toString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n    if (model.colorBuildString === toString) return;\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n    const lut = publicAPI.getLookupTable();\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n    }\n    model.colorBuildString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n  };\n  publicAPI.getPrimitiveCount = () => {\n    const input = publicAPI.getInputData();\n    const pcount = {\n      points: input.getPoints().getNumberOfValues() / 3,\n      verts: input.getVerts().getNumberOfValues() - input.getVerts().getNumberOfCells(),\n      lines: input.getLines().getNumberOfValues() - 2 * input.getLines().getNumberOfCells(),\n      triangles: input.getPolys().getNumberOfValues() - 3 * input.getPolys().getNumberOfCells()\n    };\n    return pcount;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  static: false,\n  lookupTable: null,\n  scalarVisibility: false,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n\n  renderTime: 0,\n  colorByArrayName: null,\n  transformCoordinate: null,\n  viewSpecificProperties: null,\n  customShaderAttributes: []\n};\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorMapColors']);\n  macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n  if (!model.viewSpecificProperties) {\n    model.viewSpecificProperties = {};\n  }\n\n  // Object methods\n  vtkMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkMapper2D$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkMapper2D$1 as default, extend, newInstance };\n","import otherStaticMethods, { Resolve } from './Static.js';\nexport { Resolve } from './Static.js';\nimport { m as macro } from '../../../macros2.js';\n\n/* eslint-disable arrow-body-style */\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach(item => {\n    publicAPI[`get${item.method}`] = () => model[item.key];\n    publicAPI[`set${item.method}`] = macro.objectSetterMap.object(publicAPI, model, {\n      name: item.key,\n      params: ['factor', 'offset']\n    });\n  });\n}\nconst CATEGORIES = ['Polygon', 'Line', 'Point'];\n\n// CoincidentTopology static methods ------------------------------------------\n\nconst staticOffsetModel = {\n  Polygon: {\n    factor: 2,\n    offset: 0\n  },\n  Line: {\n    factor: 1,\n    offset: -1\n  },\n  Point: {\n    factor: 0,\n    offset: -2\n  }\n};\nconst noOp = () => undefined;\nconst staticOffsetAPI = {\n  modified: noOp\n};\naddCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(key => ({\n  key,\n  method: `ResolveCoincidentTopology${key}OffsetParameters`\n})));\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']);\n\n  // Relative methods\n  model.topologyOffset = {\n    Polygon: {\n      factor: 0,\n      offset: 0\n    },\n    Line: {\n      factor: 0,\n      offset: 0\n    },\n    Point: {\n      factor: 0,\n      offset: 0\n    }\n  };\n\n  // Add Static methods to our instance\n  Object.keys(otherStaticMethods).forEach(methodName => {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).filter(methodName => methodName !== 'modified') // don't override instance's modified\n  .forEach(methodName => {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(key => ({\n    key,\n    method: `RelativeCoincidentTopology${key}OffsetParameters`\n  })));\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyLineOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyPointOffsetParameter = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n}\nvar CoincidentTopologyHelper = {\n  implementCoincidentTopologyMethods,\n  staticOffsetAPI,\n  otherStaticMethods,\n  CATEGORIES,\n  Resolve\n};\n\nexport { CATEGORIES, CoincidentTopologyHelper as default };\n","const ColorMode = {\n  DEFAULT: 0,\n  MAP_SCALARS: 1,\n  DIRECT_SCALARS: 2\n};\nconst ScalarMode = {\n  DEFAULT: 0,\n  USE_POINT_DATA: 1,\n  USE_CELL_DATA: 2,\n  USE_POINT_FIELD_DATA: 3,\n  USE_CELL_FIELD_DATA: 4,\n  USE_FIELD_DATA: 5\n};\nconst GetArray = {\n  BY_ID: 0,\n  BY_NAME: 1\n};\nvar Constants = {\n  ColorMode,\n  GetArray,\n  ScalarMode\n};\n\nexport { ColorMode, GetArray, ScalarMode, Constants as default };\n","const Resolve = {\n  Off: 0,\n  PolygonOffset: 1\n};\nlet resolveCoincidentTopologyPolygonOffsetFaces = Resolve.PolygonOffset;\nlet resolveCoincidentTopology = Resolve.Off;\nconst RESOLVE_COINCIDENT_TOPOLOGY_MODE = ['VTK_RESOLVE_OFF', 'VTK_RESOLVE_POLYGON_OFFSET'];\nfunction getResolveCoincidentTopologyPolygonOffsetFaces() {\n  return resolveCoincidentTopologyPolygonOffsetFaces;\n}\nfunction setResolveCoincidentTopologyPolygonOffsetFaces(value) {\n  const changed = resolveCoincidentTopologyPolygonOffsetFaces === value;\n  resolveCoincidentTopologyPolygonOffsetFaces = value;\n  return changed;\n}\nfunction getResolveCoincidentTopology() {\n  return resolveCoincidentTopology;\n}\nfunction setResolveCoincidentTopology() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  const changed = resolveCoincidentTopology === mode;\n  resolveCoincidentTopology = mode;\n  return changed;\n}\nfunction setResolveCoincidentTopologyToDefault() {\n  return setResolveCoincidentTopology(Resolve.Off);\n}\nfunction setResolveCoincidentTopologyToOff() {\n  return setResolveCoincidentTopology(Resolve.Off);\n}\nfunction setResolveCoincidentTopologyToPolygonOffset() {\n  return setResolveCoincidentTopology(Resolve.PolygonOffset);\n}\nfunction getResolveCoincidentTopologyAsString() {\n  return RESOLVE_COINCIDENT_TOPOLOGY_MODE[resolveCoincidentTopology];\n}\nvar otherStaticMethods = {\n  Resolve,\n  getResolveCoincidentTopologyAsString,\n  getResolveCoincidentTopologyPolygonOffsetFaces,\n  getResolveCoincidentTopology,\n  setResolveCoincidentTopology,\n  setResolveCoincidentTopologyPolygonOffsetFaces,\n  setResolveCoincidentTopologyToDefault,\n  setResolveCoincidentTopologyToOff,\n  setResolveCoincidentTopologyToPolygonOffset\n};\n\nexport { RESOLVE_COINCIDENT_TOPOLOGY_MODE, Resolve, otherStaticMethods as default, getResolveCoincidentTopology, getResolveCoincidentTopologyAsString, getResolveCoincidentTopologyPolygonOffsetFaces, setResolveCoincidentTopology, setResolveCoincidentTopologyPolygonOffsetFaces, setResolveCoincidentTopologyToDefault, setResolveCoincidentTopologyToOff, setResolveCoincidentTopologyToPolygonOffset };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './Prop/Constants.js';\n\nconst {\n  CoordinateSystem\n} = Constants;\nfunction notImplemented(method) {\n  return () => macro.vtkErrorMacro(`vtkProp::${method} - NOT IMPLEMENTED`);\n}\n\n// ----------------------------------------------------------------------------\n// vtkProp methods\n// ----------------------------------------------------------------------------\n\nfunction vtkProp(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkProp');\n  publicAPI.getMTime = () => {\n    let m1 = model.mtime;\n    for (let index = 0; index < model.textures.length; ++index) {\n      const m2 = model.textures[index].getMTime();\n      if (m2 > m1) {\n        m1 = m2;\n      }\n    }\n    return m1;\n  };\n  publicAPI.processSelectorPixelBuffers = (selector, pixeloffsets) => {};\n  publicAPI.getNestedProps = () => null;\n  publicAPI.getActors = () => [];\n  publicAPI.getActors2D = () => [];\n  publicAPI.getVolumes = () => [];\n  publicAPI.pick = notImplemented('pick');\n  publicAPI.hasKey = notImplemented('hasKey');\n  publicAPI.getNestedVisibility = () => model.visibility && (!model._parentProp || model._parentProp.getNestedVisibility());\n  publicAPI.getNestedPickable = () => model.pickable && (!model._parentProp || model._parentProp.getNestedPickable());\n  publicAPI.getNestedDragable = () => model.dragable && (!model._parentProp || model._parentProp.getNestedDragable());\n  publicAPI.getRedrawMTime = () => model.mtime;\n  publicAPI.setEstimatedRenderTime = t => {\n    model.estimatedRenderTime = t;\n    model.savedEstimatedRenderTime = t;\n  };\n  publicAPI.restoreEstimatedRenderTime = () => {\n    model.estimatedRenderTime = model.savedEstimatedRenderTime;\n  };\n  publicAPI.addEstimatedRenderTime = t => {\n    model.estimatedRenderTime += t;\n  };\n  publicAPI.setAllocatedRenderTime = t => {\n    model.allocatedRenderTime = t;\n    model.savedEstimatedRenderTime = model.estimatedRenderTime;\n    model.estimatedRenderTime = 0;\n  };\n  publicAPI.getSupportsSelection = () => false;\n  publicAPI.getTextures = () => model.textures;\n  publicAPI.hasTexture = texture => model.textures.indexOf(texture) !== -1;\n  publicAPI.addTexture = texture => {\n    if (texture && !publicAPI.hasTexture(texture)) {\n      model.textures = model.textures.concat(texture);\n      publicAPI.modified();\n    }\n  };\n  publicAPI.removeTexture = texture => {\n    const newTextureList = model.textures.filter(item => item !== texture);\n    if (model.textures.length !== newTextureList.length) {\n      model.textures = newTextureList;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.removeAllTextures = () => {\n    model.textures = [];\n    publicAPI.modified();\n  };\n\n  // not all mappers support all coordinate systems\n  publicAPI.setCoordinateSystemToWorld = () => publicAPI.setCoordinateSystem(CoordinateSystem.WORLD);\n  publicAPI.setCoordinateSystemToDisplay = () => publicAPI.setCoordinateSystem(CoordinateSystem.DISPLAY);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // _parentProp: null,\n  allocatedRenderTime: 10,\n  coordinateSystem: CoordinateSystem.WORLD,\n  dragable: true,\n  estimatedRenderTime: 0,\n  paths: null,\n  pickable: true,\n  renderTimeMultiplier: 1,\n  savedEstimatedRenderTime: 0,\n  textures: [],\n  useBounds: true,\n  visibility: true\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['estimatedRenderTime', 'allocatedRenderTime']);\n  macro.setGet(publicAPI, model, ['_parentProp', 'coordinateSystem', 'dragable', 'pickable', 'renderTimeMultiplier', 'useBounds', 'visibility']);\n  macro.moveToProtected(publicAPI, model, ['parentProp']);\n\n  // Object methods\n  vtkProp(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkProp');\n\n// ----------------------------------------------------------------------------\n\nvar vtkProp$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkProp$1 as default, extend, newInstance };\n","import { mat4, quat } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport { A as degreesFromRadians, r as radiansFromDegrees, a as areMatricesEqual } from '../../Common/Core/Math/index.js';\nimport vtkProp from './Prop.js';\n\nconst VTK_EPSILON = 1e-6;\n\n// ----------------------------------------------------------------------------\n// vtkProp3D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkProp3D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkProp3D');\n  publicAPI.addPosition = deltaXYZ => {\n    model.position = model.position.map((value, index) => value + deltaXYZ[index]);\n    publicAPI.modified();\n  };\n  publicAPI.getOrientationWXYZ = () => {\n    const q = quat.create();\n    mat4.getRotation(q, model.rotation);\n    const oaxis = new Float64Array(3);\n    const w = quat.getAxisAngle(oaxis, q);\n    return [degreesFromRadians(w), oaxis[0], oaxis[1], oaxis[2]];\n  };\n  publicAPI.getOrientationQuaternion = function () {\n    let out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return mat4.getRotation(out, model.rotation);\n  };\n  publicAPI.rotateX = val => {\n    if (val === 0.0) {\n      return;\n    }\n    mat4.rotateX(model.rotation, model.rotation, radiansFromDegrees(val));\n    publicAPI.modified();\n  };\n  publicAPI.rotateY = val => {\n    if (val === 0.0) {\n      return;\n    }\n    mat4.rotateY(model.rotation, model.rotation, radiansFromDegrees(val));\n    publicAPI.modified();\n  };\n  publicAPI.rotateZ = val => {\n    if (val === 0.0) {\n      return;\n    }\n    mat4.rotateZ(model.rotation, model.rotation, radiansFromDegrees(val));\n    publicAPI.modified();\n  };\n  publicAPI.rotateWXYZ = (degrees, x, y, z) => {\n    if (degrees === 0.0 || x === 0.0 && y === 0.0 && z === 0.0) {\n      return;\n    }\n\n    // convert to radians\n    const angle = radiansFromDegrees(degrees);\n    const q = quat.create();\n    quat.setAxisAngle(q, [x, y, z], angle);\n    const quatMat = new Float64Array(16);\n    mat4.fromQuat(quatMat, q);\n    mat4.multiply(model.rotation, model.rotation, quatMat);\n    publicAPI.modified();\n  };\n  publicAPI.rotateQuaternion = orientationQuaternion => {\n    if (Math.abs(orientationQuaternion[3]) >= 1 - VTK_EPSILON) {\n      return;\n    }\n    const oriQuatMat = mat4.fromQuat(new Float64Array(16), orientationQuaternion);\n    mat4.multiply(model.rotation, model.rotation, oriQuatMat);\n    publicAPI.modified();\n  };\n  publicAPI.setOrientation = (x, y, z) => {\n    if (x === model.orientation[0] && y === model.orientation[1] && z === model.orientation[2]) {\n      return false;\n    }\n    model.orientation = [x, y, z];\n    mat4.identity(model.rotation);\n    publicAPI.rotateZ(z);\n    publicAPI.rotateX(x);\n    publicAPI.rotateY(y);\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.setUserMatrix = matrix => {\n    if (areMatricesEqual(model.userMatrix, matrix)) {\n      return false;\n    }\n    mat4.copy(model.userMatrix, matrix);\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.getMatrix = () => {\n    publicAPI.computeMatrix();\n    return model.matrix;\n  };\n  publicAPI.computeMatrix = () => {\n    // check whether or not need to rebuild the matrix\n    if (publicAPI.getMTime() > model.matrixMTime.getMTime()) {\n      mat4.identity(model.matrix);\n      if (model.userMatrix) {\n        mat4.multiply(model.matrix, model.matrix, model.userMatrix);\n      }\n      mat4.translate(model.matrix, model.matrix, model.origin);\n      mat4.translate(model.matrix, model.matrix, model.position);\n      mat4.multiply(model.matrix, model.matrix, model.rotation);\n      mat4.scale(model.matrix, model.matrix, model.scale);\n      mat4.translate(model.matrix, model.matrix, [-model.origin[0], -model.origin[1], -model.origin[2]]);\n      mat4.transpose(model.matrix, model.matrix);\n\n      // check for identity\n      model.isIdentity = true;\n      for (let i = 0; i < 4; ++i) {\n        for (let j = 0; j < 4; ++j) {\n          if ((i === j ? 1.0 : 0.0) !== model.matrix[i + j * 4]) {\n            model.isIdentity = false;\n          }\n        }\n      }\n      model.matrixMTime.modified();\n    }\n  };\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(model.bounds);\n  publicAPI.getLength = () => vtkBoundingBox.getLength(model.bounds);\n  publicAPI.getXRange = () => vtkBoundingBox.getXRange(model.bounds);\n  publicAPI.getYRange = () => vtkBoundingBox.getYRange(model.bounds);\n  publicAPI.getZRange = () => vtkBoundingBox.getZRange(model.bounds);\n  publicAPI.getUserMatrix = () => model.userMatrix;\n  function updateIdentityFlag() {\n    publicAPI.computeMatrix();\n  }\n  publicAPI.onModified(updateIdentityFlag);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  origin: [0, 0, 0],\n  position: [0, 0, 0],\n  orientation: [0, 0, 0],\n  rotation: null,\n  scale: [1, 1, 1],\n  bounds: [1, -1, 1, -1, 1, -1],\n  userMatrix: null,\n  userMatrixMTime: null,\n  cachedProp3D: null,\n  isIdentity: true,\n  matrixMTime: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkProp.extend(publicAPI, model, initialValues);\n  model.matrixMTime = {};\n  macro.obj(model.matrixMTime);\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['bounds', 'isIdentity']);\n  macro.getArray(publicAPI, model, ['orientation']);\n  macro.setGetArray(publicAPI, model, ['origin', 'position', 'scale'], 3);\n\n  // Object internal instance\n  model.matrix = mat4.identity(new Float64Array(16));\n  model.rotation = mat4.identity(new Float64Array(16));\n  model.userMatrix = mat4.identity(new Float64Array(16));\n  model.transform = null; // FIXME\n\n  // Object methods\n  vtkProp3D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkProp3D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkProp3D$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkProp3D$1 as default, extend, newInstance };\n","const CoordinateSystem = {\n  DISPLAY: 0,\n  WORLD: 1\n};\nvar Constants = {\n  CoordinateSystem\n};\n\nexport { CoordinateSystem, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport PropertyConst from './Property/Constants.js';\n\nconst {\n  Representation,\n  Interpolation\n} = PropertyConst;\nfunction notImplemented(method) {\n  return () => macro.vtkErrorMacro(`vtkProperty::${method} - NOT IMPLEMENTED`);\n}\n\n// ----------------------------------------------------------------------------\n// vtkProperty methods\n// ----------------------------------------------------------------------------\n\nfunction vtkProperty(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkProperty');\n  publicAPI.setColor = (r, g, b) => {\n    if (Array.isArray(r)) {\n      if (model.color[0] !== r[0] || model.color[1] !== r[1] || model.color[2] !== r[2]) {\n        model.color[0] = r[0];\n        model.color[1] = r[1];\n        model.color[2] = r[2];\n        publicAPI.modified();\n      }\n    } else if (model.color[0] !== r || model.color[1] !== g || model.color[2] !== b) {\n      model.color[0] = r;\n      model.color[1] = g;\n      model.color[2] = b;\n      publicAPI.modified();\n    }\n    publicAPI.setDiffuseColor(model.color);\n    publicAPI.setAmbientColor(model.color);\n    publicAPI.setSpecularColor(model.color);\n  };\n  publicAPI.computeCompositeColor = notImplemented('ComputeCompositeColor');\n  publicAPI.getColor = () => {\n    // Inline computeCompositeColor\n    let norm = 0.0;\n    if (model.ambient + model.diffuse + model.specular > 0) {\n      norm = 1.0 / (model.ambient + model.diffuse + model.specular);\n    }\n    for (let i = 0; i < 3; i++) {\n      model.color[i] = norm * (model.ambient * model.ambientColor[i] + model.diffuse * model.diffuseColor[i] + model.specular * model.specularColor[i]);\n    }\n    return [].concat(model.color);\n  };\n  publicAPI.setSpecularPower = specularPower => {\n    const roughness = 1 / Math.max(1.0, specularPower);\n    if (model.roughness !== roughness || model.specularPower !== specularPower) {\n      model.specularPower = specularPower; // Specular power still needs to be set as long as webgl is using it (otherwise testShaderReplacementsClear fails)\n      model.roughness = roughness;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.addShaderVariable = notImplemented('AddShaderVariable');\n  publicAPI.setInterpolationToFlat = () => publicAPI.setInterpolation(Interpolation.FLAT);\n  publicAPI.setInterpolationToGouraud = () => publicAPI.setInterpolation(Interpolation.GOURAUD);\n  publicAPI.setInterpolationToPhong = () => publicAPI.setInterpolation(Interpolation.PHONG);\n  publicAPI.getInterpolationAsString = () => macro.enumToString(Interpolation, model.interpolation);\n  publicAPI.setRepresentationToWireframe = () => publicAPI.setRepresentation(Representation.WIREFRAME);\n  publicAPI.setRepresentationToSurface = () => publicAPI.setRepresentation(Representation.SURFACE);\n  publicAPI.setRepresentationToPoints = () => publicAPI.setRepresentation(Representation.POINTS);\n  publicAPI.getRepresentationAsString = () => macro.enumToString(Representation, model.representation);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  color: [1, 1, 1],\n  ambientColor: [1, 1, 1],\n  diffuseColor: [1, 1, 1],\n  specularColor: [1, 1, 1],\n  edgeColor: [0, 0, 0],\n  ambient: 0,\n  diffuse: 1,\n  metallic: 0,\n  roughness: 0.6,\n  normalStrength: 1,\n  emission: 1,\n  baseIOR: 1.45,\n  specular: 0,\n  specularPower: 1,\n  opacity: 1,\n  interpolation: Interpolation.GOURAUD,\n  representation: Representation.SURFACE,\n  edgeVisibility: false,\n  backfaceCulling: false,\n  frontfaceCulling: false,\n  pointSize: 1,\n  lineWidth: 1,\n  lighting: true,\n  shading: false,\n  materialName: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['lighting', 'interpolation', 'ambient', 'diffuse', 'metallic', 'roughness', 'normalStrength', 'emission', 'baseIOR', 'specular', 'specularPower', 'opacity', 'edgeVisibility', 'lineWidth', 'pointSize', 'backfaceCulling', 'frontfaceCulling', 'representation', 'diffuseTexture', 'metallicTexture', 'roughnessTexture', 'normalTexture', 'ambientOcclusionTexture', 'emissionTexture']);\n  macro.setGetArray(publicAPI, model, ['ambientColor', 'specularColor', 'diffuseColor', 'edgeColor'], 3);\n\n  // Object methods\n  vtkProperty(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkProperty');\n\n// ----------------------------------------------------------------------------\n\nvar vtkProperty$1 = {\n  newInstance,\n  extend,\n  ...PropertyConst\n};\n\nexport { vtkProperty$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './Property2D/Constants.js';\nimport { Representation } from './Property/Constants.js';\n\nconst {\n  DisplayLocation\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// vtkProperty2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkProperty2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkProperty2D');\n  publicAPI.setDisplayLocationToBackground = () => publicAPI.setDisplayLocation(DisplayLocation.BACKGROUND);\n  publicAPI.setDisplayLocationToForeground = () => publicAPI.setDisplayLocation(DisplayLocation.FOREGROUND);\n  publicAPI.setRepresentationToWireframe = () => publicAPI.setRepresentation(Representation.WIREFRAME);\n  publicAPI.setRepresentationToSurface = () => publicAPI.setRepresentation(Representation.SURFACE);\n  publicAPI.setRepresentationToPoints = () => publicAPI.setRepresentation(Representation.POINTS);\n  publicAPI.getRepresentationAsString = () => macro.enumToString(Representation, model.representation);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  color: [1, 1, 1],\n  opacity: 1,\n  pointSize: 1,\n  lineWidth: 1,\n  representation: Representation.SURFACE,\n  displayLocation: DisplayLocation.FOREGROUND\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['opacity', 'lineWidth', 'pointSize', 'displayLocation', 'representation']);\n  macro.setGetArray(publicAPI, model, ['color'], 3);\n\n  // Object methods\n  vtkProperty2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkProperty2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkProperty2D$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkProperty2D$1 as default, extend, newInstance };\n","const DisplayLocation = {\n  BACKGROUND: 0,\n  FOREGROUND: 1\n};\nvar Constants = {\n  DisplayLocation\n};\n\nexport { DisplayLocation, Constants as default };\n","const Shading = {\n  FLAT: 0,\n  GOURAUD: 1,\n  PHONG: 2\n};\nconst Representation = {\n  POINTS: 0,\n  WIREFRAME: 1,\n  SURFACE: 2\n};\nconst Interpolation = Shading;\nvar PropertyConst = {\n  Shading,\n  Representation,\n  Interpolation\n};\n\nexport { Interpolation, Representation, Shading, PropertyConst as default };\n","import { m as macro } from '../../macros2.js';\n\nconst DEFAULT_VIEW_API = 'WebGL';\nconst VIEW_CONSTRUCTORS = Object.create(null);\n\n// ----------------------------------------------------------------------------\n// static methods\n// ----------------------------------------------------------------------------\n\nfunction registerViewConstructor(name, constructor) {\n  VIEW_CONSTRUCTORS[name] = constructor;\n}\nfunction listViewAPIs() {\n  return Object.keys(VIEW_CONSTRUCTORS);\n}\nfunction newAPISpecificView(name) {\n  let initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return VIEW_CONSTRUCTORS[name] && VIEW_CONSTRUCTORS[name](initialValues);\n}\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindow');\n\n  // Add renderer\n  publicAPI.addRenderer = renderer => {\n    if (publicAPI.hasRenderer(renderer)) {\n      return;\n    }\n    renderer.setRenderWindow(publicAPI);\n    model.renderers.push(renderer);\n\n    // for (this->Renderers->InitTraversal(rsit);\n    //      (aren = this->Renderers->GetNextRenderer(rsit)); )\n    //   {\n    //   aren->SetAllocatedRenderTime\n    //     (1.0/(this->DesiredUpdateRate*this->Renderers->GetNumberOfItems()));\n    //   }\n\n    publicAPI.modified();\n  };\n\n  // Remove renderer\n  publicAPI.removeRenderer = renderer => {\n    model.renderers = model.renderers.filter(r => r !== renderer);\n    publicAPI.modified();\n  };\n  publicAPI.hasRenderer = ren => model.renderers.indexOf(ren) !== -1;\n\n  // get an API specific view of this data\n  publicAPI.newAPISpecificView = function (name) {\n    let initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return newAPISpecificView(name || model.defaultViewAPI, initialValues);\n  };\n\n  // Add renderer\n  publicAPI.addView = view => {\n    if (publicAPI.hasView(view)) {\n      return;\n    }\n    view.setRenderable(publicAPI);\n    model._views.push(view);\n    publicAPI.modified();\n  };\n\n  // Remove renderer\n  publicAPI.removeView = view => {\n    model._views = model._views.filter(r => r !== view);\n    publicAPI.modified();\n  };\n  publicAPI.hasView = view => model._views.indexOf(view) !== -1;\n\n  // handle any pre render initializations\n  publicAPI.preRender = () => {\n    model.renderers.forEach(ren => {\n      // make sure we have a camera\n      if (!ren.isActiveCameraCreated()) {\n        ren.resetCamera();\n      }\n    });\n  };\n  publicAPI.render = () => {\n    publicAPI.preRender();\n    if (model.interactor) {\n      model.interactor.render();\n    } else {\n      model._views.forEach(view => view.traverseAllPasses());\n    }\n  };\n  publicAPI.getStatistics = () => {\n    const results = {\n      propCount: 0,\n      invisiblePropCount: 0,\n      gpuMemoryMB: 0\n    };\n    model._views.forEach(v => {\n      if (v.getGraphicsMemoryInfo) results.gpuMemoryMB += v.getGraphicsMemoryInfo() / 1e6;\n    });\n    model.renderers.forEach(ren => {\n      const props = ren.getViewProps();\n      const gren = model._views[0].getViewNodeFor(ren);\n      props.forEach(prop => {\n        if (prop.getVisibility()) {\n          results.propCount += 1;\n          const mpr = prop.getMapper && prop.getMapper();\n          if (mpr && mpr.getPrimitiveCount) {\n            const gmpr = gren.getViewNodeFor(mpr);\n            if (gmpr) {\n              if (gmpr.getAllocatedGPUMemoryInBytes) {\n                results.gpuMemoryMB += gmpr.getAllocatedGPUMemoryInBytes() / 1e6;\n              }\n              const pcount = mpr.getPrimitiveCount();\n              Object.keys(pcount).forEach(keyName => {\n                if (!results[keyName]) {\n                  results[keyName] = 0;\n                }\n                results[keyName] += pcount[keyName];\n              });\n            }\n          }\n        } else {\n          results.invisiblePropCount += 1;\n        }\n      });\n    });\n    results.str = Object.keys(results).map(keyName => `${keyName}: ${results[keyName]}`).join('\\n');\n    return results;\n  };\n  publicAPI.captureImages = function () {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    macro.setImmediate(publicAPI.render);\n    return model._views.map(view => view.captureNextImage ? view.captureNextImage(format, opts) : undefined).filter(i => !!i);\n  };\n  publicAPI.addRenderWindow = child => {\n    if (model.childRenderWindows.includes(child)) {\n      return false;\n    }\n    model.childRenderWindows.push(child);\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.removeRenderWindow = child => {\n    const childIndex = model.childRenderWindows.findIndex(x => x === child);\n    if (childIndex < 0) {\n      return false;\n    }\n    model.childRenderWindows.splice(childIndex, 1);\n    publicAPI.modified();\n    return true;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  defaultViewAPI: DEFAULT_VIEW_API,\n  renderers: [],\n  views: [],\n  interactor: null,\n  neverRendered: true,\n  numberOfLayers: 1,\n  childRenderWindows: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['interactor', 'numberOfLayers', '_views', 'defaultViewAPI']);\n  macro.get(publicAPI, model, ['neverRendered']);\n  macro.getArray(publicAPI, model, ['renderers', 'childRenderWindows']);\n  macro.moveToProtected(publicAPI, model, ['views']);\n  macro.event(publicAPI, model, 'completion');\n\n  // Object methods\n  vtkRenderWindow(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkRenderWindow');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderWindow$1 = {\n  newInstance,\n  extend,\n  registerViewConstructor,\n  listViewAPIs,\n  newAPISpecificView\n};\n\nexport { vtkRenderWindow$1 as default, extend, listViewAPIs, newAPISpecificView, newInstance, registerViewConstructor };\n","import { m as macro } from '../../macros2.js';\nimport { A as degreesFromRadians } from '../../Common/Core/Math/index.js';\nimport Constants from './RenderWindowInteractor/Constants.js';\n\nconst {\n  Device,\n  Input\n} = Constants;\nconst {\n  vtkWarningMacro,\n  vtkErrorMacro,\n  normalizeWheel,\n  vtkOnceErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst EMPTY_MOUSE_EVENT = {\n  ctrlKey: false,\n  altKey: false,\n  shiftKey: false\n};\nconst deviceInputMap = {\n  'xr-standard': [Input.Trigger, Input.Grip, Input.TrackPad, Input.Thumbstick, Input.A, Input.B]\n};\nconst handledEvents = ['StartAnimation', 'Animation', 'EndAnimation', 'PointerEnter', 'PointerLeave', 'MouseEnter', 'MouseLeave', 'StartMouseMove', 'MouseMove', 'EndMouseMove', 'LeftButtonPress', 'LeftButtonRelease', 'MiddleButtonPress', 'MiddleButtonRelease', 'RightButtonPress', 'RightButtonRelease', 'KeyPress', 'KeyDown', 'KeyUp', 'StartMouseWheel', 'MouseWheel', 'EndMouseWheel', 'StartPinch', 'Pinch', 'EndPinch', 'StartPan', 'Pan', 'EndPan', 'StartRotate', 'Rotate', 'EndRotate', 'Button3D', 'Move3D', 'StartPointerLock', 'EndPointerLock', 'StartInteraction', 'Interaction', 'EndInteraction', 'AnimationFrameRateUpdate'];\nfunction preventDefault(event) {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n}\nfunction pointerCacheToPositions(cache) {\n  const positions = Object.create(null);\n  cache.forEach(_ref => {\n    let {\n      pointerId,\n      position\n    } = _ref;\n    positions[pointerId] = position;\n  });\n  return positions;\n}\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindowInteractor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderWindowInteractor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindowInteractor');\n\n  // Capture \"parentClass\" api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n\n  // Initialize list of requesters\n  const animationRequesters = new Set();\n\n  // map from pointerId to { pointerId: number, position: [x, y] }\n  const pointerCache = new Map();\n\n  // Factor to apply on wheel spin.\n  let wheelCoefficient = 1;\n\n  // Public API methods\n\n  //----------------------------------------------------------------------\n  publicAPI.start = () => {\n    // Let the compositing handle the event loop if it wants to.\n    // if (publicAPI.HasObserver(vtkCommand::StartEvent) && !publicAPI.HandleEventLoop) {\n    //   publicAPI.invokeEvent({ type: 'StartEvent' });\n    //   return;\n    // }\n\n    // As a convenience, initialize if we aren't initialized yet.\n    if (!model.initialized) {\n      publicAPI.initialize();\n      if (!model.initialized) {\n        return;\n      }\n    }\n    // Pass execution to the subclass which will run the event loop,\n    // this will not return until TerminateApp is called.\n    publicAPI.startEventLoop();\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.setRenderWindow = aren => {\n    vtkErrorMacro('you want to call setView(view) instead of setRenderWindow on a vtk.js interactor');\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.setInteractorStyle = style => {\n    if (model.interactorStyle !== style) {\n      if (model.interactorStyle != null) {\n        model.interactorStyle.setInteractor(null);\n      }\n      model.interactorStyle = style;\n      if (model.interactorStyle != null) {\n        if (model.interactorStyle.getInteractor() !== publicAPI) {\n          model.interactorStyle.setInteractor(publicAPI);\n        }\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------\n  publicAPI.initialize = () => {\n    model.initialized = true;\n    publicAPI.enable();\n    publicAPI.render();\n  };\n  publicAPI.enable = () => publicAPI.setEnabled(true);\n  publicAPI.disable = () => publicAPI.setEnabled(false);\n  publicAPI.startEventLoop = () => vtkWarningMacro('empty event loop');\n  function updateCurrentRenderer(x, y) {\n    if (!model._forcedRenderer) {\n      model.currentRenderer = publicAPI.findPokedRenderer(x, y);\n    }\n  }\n  publicAPI.getCurrentRenderer = () => {\n    if (model.currentRenderer) {\n      return model.currentRenderer;\n    }\n    updateCurrentRenderer(0, 0);\n    return model.currentRenderer;\n  };\n  function _getScreenEventPositionFor(source) {\n    const canvas = model._view.getCanvas();\n    const bounds = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / bounds.width;\n    const scaleY = canvas.height / bounds.height;\n    const position = {\n      x: scaleX * (source.clientX - bounds.left),\n      y: scaleY * (bounds.height - source.clientY + bounds.top),\n      z: 0\n    };\n\n    // if multitouch, do not update the current renderer\n    if (pointerCache.size <= 1 || !model.currentRenderer) {\n      updateCurrentRenderer(position.x, position.y);\n    }\n    return position;\n  }\n  // Allow user to override it\n  const getScreenEventPositionFor = model._getScreenEventPositionFor || _getScreenEventPositionFor;\n  function getModifierKeysFor(event) {\n    return {\n      controlKey: event.ctrlKey,\n      altKey: event.altKey,\n      shiftKey: event.shiftKey\n    };\n  }\n  function getKeysFor(event) {\n    const modifierKeys = getModifierKeysFor(event);\n    const keys = {\n      key: event.key,\n      keyCode: event.charCode,\n      ...modifierKeys\n    };\n    return keys;\n  }\n  function getDeviceTypeFor(event) {\n    return event.pointerType || '';\n  }\n  const _bindEvents = () => {\n    if (model.container === null) {\n      return;\n    }\n    const {\n      container\n    } = model;\n    container.addEventListener('contextmenu', preventDefault);\n    container.addEventListener('wheel', publicAPI.handleWheel);\n    container.addEventListener('DOMMouseScroll', publicAPI.handleWheel);\n    container.addEventListener('pointerenter', publicAPI.handlePointerEnter);\n    container.addEventListener('pointerleave', publicAPI.handlePointerLeave);\n    container.addEventListener('pointermove', publicAPI.handlePointerMove, {\n      passive: false\n    });\n    container.addEventListener('pointerdown', publicAPI.handlePointerDown, {\n      passive: false\n    });\n    container.addEventListener('pointerup', publicAPI.handlePointerUp);\n    container.addEventListener('pointercancel', publicAPI.handlePointerCancel);\n    document.addEventListener('keypress', publicAPI.handleKeyPress);\n    document.addEventListener('keydown', publicAPI.handleKeyDown);\n    document.addEventListener('keyup', publicAPI.handleKeyUp);\n    document.addEventListener('pointerlockchange', publicAPI.handlePointerLockChange);\n\n    // using touchAction is more performant than preventDefault\n    // in a touchstart handler.\n    container.style.touchAction = 'none';\n    container.style.userSelect = 'none';\n    // disables tap highlight for when cursor is pointer\n    container.style.webkitTapHighlightColor = 'rgba(0,0,0,0)';\n  };\n\n  // For backward compatibility.\n  // Necessary for using unbind/bindEvent without calling setContainer.\n  publicAPI.bindEvents = container => {\n    if (container === null) {\n      return;\n    }\n    const res = superClass.setContainer(container);\n    if (res) {\n      _bindEvents();\n    }\n  };\n  const _unbindEvents = () => {\n    // Clear any previous timeouts and state variables that control mouse / touchpad behavior.\n    clearTimeout(model.moveTimeoutID);\n    clearTimeout(model.wheelTimeoutID);\n    model.moveTimeoutID = 0;\n    model.wheelTimeoutID = 0;\n    wheelCoefficient = 1.0;\n    const {\n      container\n    } = model;\n    if (container) {\n      container.removeEventListener('contextmenu', preventDefault);\n      container.removeEventListener('wheel', publicAPI.handleWheel);\n      container.removeEventListener('DOMMouseScroll', publicAPI.handleWheel);\n      container.removeEventListener('pointerenter', publicAPI.handlePointerEnter);\n      container.removeEventListener('pointerleave', publicAPI.handlePointerLeave);\n      container.removeEventListener('pointermove', publicAPI.handlePointerMove, {\n        passive: false\n      });\n      container.removeEventListener('pointerdown', publicAPI.handlePointerDown, {\n        passive: false\n      });\n      container.removeEventListener('pointerup', publicAPI.handlePointerUp);\n      container.removeEventListener('pointercancel', publicAPI.handlePointerCancel);\n    }\n    document.removeEventListener('keypress', publicAPI.handleKeyPress);\n    document.removeEventListener('keydown', publicAPI.handleKeyDown);\n    document.removeEventListener('keyup', publicAPI.handleKeyUp);\n    document.removeEventListener('pointerlockchange', publicAPI.handlePointerLockChange);\n    pointerCache.clear();\n  };\n  publicAPI.unbindEvents = () => {\n    _unbindEvents();\n    superClass.setContainer(null);\n  };\n  publicAPI.handleKeyPress = event => {\n    const data = getKeysFor(event);\n    publicAPI.keyPressEvent(data);\n  };\n  publicAPI.handleKeyDown = event => {\n    const data = getKeysFor(event);\n    publicAPI.keyDownEvent(data);\n  };\n  publicAPI.handleKeyUp = event => {\n    const data = getKeysFor(event);\n    publicAPI.keyUpEvent(data);\n  };\n  publicAPI.handlePointerEnter = event => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    publicAPI.pointerEnterEvent(callData);\n    if (callData.deviceType === 'mouse') {\n      publicAPI.mouseEnterEvent(callData);\n    }\n  };\n  publicAPI.handlePointerLeave = event => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    publicAPI.pointerLeaveEvent(callData);\n    if (callData.deviceType === 'mouse') {\n      publicAPI.mouseLeaveEvent(callData);\n    }\n  };\n  publicAPI.handlePointerDown = event => {\n    if (event.button > 2 || publicAPI.isPointerLocked()) {\n      // ignore events from extra mouse buttons such as `back` and `forward`\n      return;\n    }\n    if (model.preventDefaultOnPointerDown) {\n      preventDefault(event);\n    }\n    if (event.target.hasPointerCapture(event.pointerId)) {\n      event.target.releasePointerCapture(event.pointerId);\n    }\n    model.container.setPointerCapture(event.pointerId);\n    if (pointerCache.has(event.pointerId)) {\n      vtkWarningMacro('[RenderWindowInteractor] duplicate pointerId detected');\n    }\n    pointerCache.set(event.pointerId, {\n      pointerId: event.pointerId,\n      position: getScreenEventPositionFor(event)\n    });\n    switch (event.pointerType) {\n      case 'pen':\n      case 'touch':\n        publicAPI.handleTouchStart(event);\n        break;\n      case 'mouse':\n      default:\n        publicAPI.handleMouseDown(event);\n        break;\n    }\n  };\n  publicAPI.handlePointerUp = event => {\n    if (pointerCache.has(event.pointerId)) {\n      if (model.preventDefaultOnPointerUp) {\n        preventDefault(event);\n      }\n      pointerCache.delete(event.pointerId);\n      model.container.releasePointerCapture(event.pointerId);\n      switch (event.pointerType) {\n        case 'pen':\n        case 'touch':\n          publicAPI.handleTouchEnd(event);\n          break;\n        case 'mouse':\n        default:\n          publicAPI.handleMouseUp(event);\n          break;\n      }\n    }\n  };\n  publicAPI.handlePointerCancel = event => {\n    if (pointerCache.has(event.pointerId)) {\n      pointerCache.delete(event.pointerId);\n      switch (event.pointerType) {\n        case 'pen':\n        case 'touch':\n          publicAPI.handleTouchEnd(event);\n          break;\n        case 'mouse':\n        default:\n          publicAPI.handleMouseUp(event);\n          break;\n      }\n    }\n  };\n  publicAPI.handlePointerMove = event => {\n    if (pointerCache.has(event.pointerId)) {\n      const pointer = pointerCache.get(event.pointerId);\n      pointer.position = getScreenEventPositionFor(event);\n    }\n    switch (event.pointerType) {\n      case 'pen':\n      case 'touch':\n        publicAPI.handleTouchMove(event);\n        break;\n      case 'mouse':\n      default:\n        publicAPI.handleMouseMove(event);\n        break;\n    }\n  };\n  publicAPI.handleMouseDown = event => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    switch (event.button) {\n      case 0:\n        publicAPI.leftButtonPressEvent(callData);\n        break;\n      case 1:\n        publicAPI.middleButtonPressEvent(callData);\n        break;\n      case 2:\n        publicAPI.rightButtonPressEvent(callData);\n        break;\n      default:\n        vtkErrorMacro(`Unknown mouse button pressed: ${event.button}`);\n        break;\n    }\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.requestPointerLock = () => {\n    if (model.container) {\n      model.container.requestPointerLock();\n    }\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.exitPointerLock = () => document.exitPointerLock?.();\n\n  //----------------------------------------------------------------------\n  publicAPI.isPointerLocked = () => !!model.container && document.pointerLockElement === model.container;\n\n  //----------------------------------------------------------------------\n  publicAPI.handlePointerLockChange = () => {\n    if (publicAPI.isPointerLocked()) {\n      publicAPI.startPointerLockEvent();\n    } else {\n      publicAPI.endPointerLockEvent();\n    }\n  };\n\n  //----------------------------------------------------------------------\n  function forceRender() {\n    if (model._view && model.enabled && model.enableRender) {\n      model.inRender = true;\n      model._view.traverseAllPasses();\n      model.inRender = false;\n    }\n    // outside the above test so that third-party code can redirect\n    // the render to the appropriate class\n    publicAPI.invokeRenderEvent();\n  }\n  publicAPI.requestAnimation = requestor => {\n    if (requestor === undefined) {\n      vtkErrorMacro(`undefined requester, can not start animating`);\n      return;\n    }\n    if (animationRequesters.has(requestor)) {\n      vtkWarningMacro(`requester is already registered for animating`);\n      return;\n    }\n    animationRequesters.add(requestor);\n    if (!model.animationRequest && animationRequesters.size === 1 && !model.xrAnimation) {\n      model._animationStartTime = Date.now();\n      model._animationFrameCount = 0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n      publicAPI.startAnimationEvent();\n    }\n  };\n\n  // continue animating for at least the specified duration of\n  // milliseconds.\n  publicAPI.extendAnimation = duration => {\n    const newEnd = Date.now() + duration;\n    model._animationExtendedEnd = Math.max(model._animationExtendedEnd, newEnd);\n    if (!model.animationRequest && animationRequesters.size === 0 && !model.xrAnimation) {\n      model._animationStartTime = Date.now();\n      model._animationFrameCount = 0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n      publicAPI.startAnimationEvent();\n    }\n  };\n  publicAPI.isAnimating = () => model.xrAnimation || model.animationRequest !== null;\n  publicAPI.cancelAnimation = function (requestor) {\n    let skipWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!animationRequesters.has(requestor)) {\n      if (!skipWarning) {\n        const requestStr = requestor && requestor.getClassName ? requestor.getClassName() : requestor;\n        vtkWarningMacro(`${requestStr} did not request an animation`);\n      }\n      return;\n    }\n    animationRequesters.delete(requestor);\n    if (model.animationRequest && animationRequesters.size === 0 && Date.now() > model._animationExtendedEnd) {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n      publicAPI.endAnimationEvent();\n      publicAPI.render();\n    }\n  };\n  publicAPI.switchToXRAnimation = () => {\n    // cancel existing animation if any\n    if (model.animationRequest) {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n    }\n    model.xrAnimation = true;\n  };\n  publicAPI.returnFromXRAnimation = () => {\n    model.xrAnimation = false;\n    if (animationRequesters.size !== 0) {\n      model.recentAnimationFrameRate = 10.0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n    }\n  };\n  publicAPI.updateXRGamepads = (xrSession, xrFrame, xrRefSpace) => {\n    // watch for when buttons change state and fire events\n    xrSession.inputSources.forEach(inputSource => {\n      const gripPose = inputSource.gripSpace == null ? null : xrFrame.getPose(inputSource.gripSpace, xrRefSpace);\n      const targetRayPose = inputSource.gripSpace == null ? null : xrFrame.getPose(inputSource.targetRaySpace, xrRefSpace);\n      const gamepad = inputSource.gamepad;\n      const hand = inputSource.handedness;\n      if (!gamepad) {\n        return;\n      }\n      if (!(gamepad.index in model.lastGamepadValues)) {\n        model.lastGamepadValues[gamepad.index] = {\n          left: {\n            buttons: {}\n          },\n          right: {\n            buttons: {}\n          },\n          none: {\n            buttons: {}\n          }\n        };\n      }\n      for (let buttonIdx = 0; buttonIdx < gamepad.buttons.length; ++buttonIdx) {\n        if (!(buttonIdx in model.lastGamepadValues[gamepad.index][hand].buttons)) {\n          model.lastGamepadValues[gamepad.index][hand].buttons[buttonIdx] = false;\n        }\n        if (model.lastGamepadValues[gamepad.index][hand].buttons[buttonIdx] !== gamepad.buttons[buttonIdx].pressed && gripPose != null) {\n          publicAPI.button3DEvent({\n            gamepad,\n            position: gripPose.transform.position,\n            orientation: gripPose.transform.orientation,\n            targetPosition: targetRayPose.transform.position,\n            targetOrientation: targetRayPose.transform.orientation,\n            pressed: gamepad.buttons[buttonIdx].pressed,\n            device: inputSource.handedness === 'left' ? Device.LeftController : Device.RightController,\n            input: deviceInputMap[gamepad.mapping] && deviceInputMap[gamepad.mapping][buttonIdx] ? deviceInputMap[gamepad.mapping][buttonIdx] : Input.Trigger\n          });\n          model.lastGamepadValues[gamepad.index][hand].buttons[buttonIdx] = gamepad.buttons[buttonIdx].pressed;\n        }\n        if (model.lastGamepadValues[gamepad.index][hand].buttons[buttonIdx] && gripPose != null) {\n          publicAPI.move3DEvent({\n            gamepad,\n            position: gripPose.transform.position,\n            orientation: gripPose.transform.orientation,\n            targetPosition: targetRayPose.transform.position,\n            targetOrientation: targetRayPose.transform.orientation,\n            device: inputSource.handedness === 'left' ? Device.LeftController : Device.RightController\n          });\n        }\n      }\n    });\n  };\n  publicAPI.handleMouseMove = event => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    if (model.moveTimeoutID === 0) {\n      publicAPI.startMouseMoveEvent(callData);\n    } else {\n      publicAPI.mouseMoveEvent(callData);\n      clearTimeout(model.moveTimeoutID);\n    }\n\n    // start a timer to keep us animating while we get mouse move events\n    model.moveTimeoutID = setTimeout(() => {\n      publicAPI.endMouseMoveEvent();\n      model.moveTimeoutID = 0;\n    }, 200);\n  };\n  publicAPI.handleAnimation = () => {\n    const currTime = Date.now();\n    model._animationFrameCount++;\n    if (currTime - model._animationStartTime > 1000.0 && model._animationFrameCount > 1) {\n      model.recentAnimationFrameRate = 1000.0 * (model._animationFrameCount - 1) / (currTime - model._animationStartTime);\n      model.lastFrameTime = 1.0 / model.recentAnimationFrameRate;\n      publicAPI.animationFrameRateUpdateEvent();\n      model._animationStartTime = currTime;\n      model._animationFrameCount = 1;\n    }\n    publicAPI.animationEvent();\n    forceRender();\n    if (animationRequesters.size > 0 || Date.now() < model._animationExtendedEnd) {\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n    } else {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n      publicAPI.endAnimationEvent();\n      publicAPI.render();\n    }\n  };\n  publicAPI.handleWheel = event => {\n    preventDefault(event);\n\n    /**\n     * wheel event values can vary significantly across browsers, platforms\n     * and devices [1]. `normalizeWheel` uses facebook's solution from their\n     * fixed-data-table repository [2].\n     *\n     * [1] https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel\n     * [2] https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n     *\n     * This code will return an object with properties:\n     *\n     *   spinX   -- normalized spin speed (use for zoom) - x plane\n     *   spinY   -- \" - y plane\n     *   pixelX  -- normalized distance (to pixels) - x plane\n     *   pixelY  -- \" - y plane\n     *\n     */\n    const callData = {\n      ...normalizeWheel(event),\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n\n    // Wheel events are thought to scroll pages (i.e. multiple lines at once).\n    // See normalizeWheel() documentation for more context.\n    // While trackpad wheel events are many small (<1) wheel spins,\n    // mouse wheel events have absolute spin values higher than 1.\n    // Here the first spin value is \"recorded\", and used to normalize\n    // all the following mouse wheel events.\n    if (model.wheelTimeoutID === 0) {\n      // we attempt to distinguish between trackpads and mice\n      // .3 will be larger than the first trackpad event,\n      // but small enough to detect some common edge case mice\n      if (Math.abs(callData.spinY) >= 0.3) {\n        // Event is coming from mouse wheel\n        wheelCoefficient = Math.abs(callData.spinY);\n      } else {\n        // Event is coming from trackpad\n        wheelCoefficient = 1;\n      }\n    }\n    callData.spinY /= wheelCoefficient;\n    if (model.wheelTimeoutID === 0) {\n      publicAPI.startMouseWheelEvent(callData);\n      publicAPI.mouseWheelEvent(callData);\n    } else {\n      publicAPI.mouseWheelEvent(callData);\n      clearTimeout(model.wheelTimeoutID);\n    }\n    if (model.mouseScrollDebounceByPass) {\n      publicAPI.extendAnimation(600);\n      publicAPI.endMouseWheelEvent();\n      model.wheelTimeoutID = 0;\n    } else {\n      // start a timer to keep us animating while we get wheel events\n      model.wheelTimeoutID = setTimeout(() => {\n        publicAPI.extendAnimation(600);\n        publicAPI.endMouseWheelEvent();\n        model.wheelTimeoutID = 0;\n      }, 200);\n    }\n  };\n  publicAPI.handleMouseUp = event => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    switch (event.button) {\n      case 0:\n        publicAPI.leftButtonReleaseEvent(callData);\n        break;\n      case 1:\n        publicAPI.middleButtonReleaseEvent(callData);\n        break;\n      case 2:\n        publicAPI.rightButtonReleaseEvent(callData);\n        break;\n      default:\n        vtkErrorMacro(`Unknown mouse button released: ${event.button}`);\n        break;\n    }\n  };\n  publicAPI.handleTouchStart = event => {\n    const pointers = [...pointerCache.values()];\n    // If multitouch\n    if (model.recognizeGestures && pointers.length > 1) {\n      const positions = pointerCacheToPositions(pointerCache);\n      // did we just transition to multitouch?\n      if (pointers.length === 2) {\n        const callData = {\n          ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: pointers[0].position,\n          deviceType: getDeviceTypeFor(event)\n        };\n        publicAPI.leftButtonReleaseEvent(callData);\n      }\n      // handle the gesture\n      publicAPI.recognizeGesture('TouchStart', positions);\n    } else if (pointers.length === 1) {\n      const callData = {\n        ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: getScreenEventPositionFor(event),\n        deviceType: getDeviceTypeFor(event)\n      };\n      publicAPI.leftButtonPressEvent(callData);\n    }\n  };\n  publicAPI.handleTouchMove = event => {\n    const pointers = [...pointerCache.values()];\n    if (model.recognizeGestures && pointers.length > 1) {\n      const positions = pointerCacheToPositions(pointerCache);\n      publicAPI.recognizeGesture('TouchMove', positions);\n    } else if (pointers.length === 1) {\n      const callData = {\n        ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: pointers[0].position,\n        deviceType: getDeviceTypeFor(event)\n      };\n      publicAPI.mouseMoveEvent(callData);\n    }\n  };\n  publicAPI.handleTouchEnd = event => {\n    const pointers = [...pointerCache.values()];\n    if (model.recognizeGestures) {\n      // No more fingers down\n      if (pointers.length === 0) {\n        const callData = {\n          ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: getScreenEventPositionFor(event),\n          deviceType: getDeviceTypeFor(event)\n        };\n        publicAPI.leftButtonReleaseEvent(callData);\n      } else if (pointers.length === 1) {\n        // If one finger left, end touch and start button press\n        const positions = pointerCacheToPositions(pointerCache);\n        publicAPI.recognizeGesture('TouchEnd', positions);\n        const callData = {\n          ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: pointers[0].position,\n          deviceType: getDeviceTypeFor(event)\n        };\n        publicAPI.leftButtonPressEvent(callData);\n      } else {\n        // If more than one finger left, keep touch move\n        const positions = pointerCacheToPositions(pointerCache);\n        publicAPI.recognizeGesture('TouchMove', positions);\n      }\n    } else if (pointers.length === 1) {\n      const callData = {\n        ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: pointers[0].position,\n        deviceType: getDeviceTypeFor(event)\n      };\n      publicAPI.leftButtonReleaseEvent(callData);\n    }\n  };\n  publicAPI.setView = val => {\n    if (model._view === val) {\n      return;\n    }\n    model._view = val;\n    model._view.getRenderable().setInteractor(publicAPI);\n    publicAPI.modified();\n  };\n  publicAPI.getFirstRenderer = () => model._view?.getRenderable()?.getRenderersByReference()?.[0];\n  publicAPI.findPokedRenderer = function () {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (!model._view) {\n      return null;\n    }\n    // The original order of renderers needs to remain as\n    // the first one is the one we want to manipulate the camera on.\n    const rc = model._view?.getRenderable()?.getRenderers();\n    if (!rc || rc.length === 0) {\n      return null;\n    }\n    rc.sort((a, b) => a.getLayer() - b.getLayer());\n    let interactiveren = null;\n    let viewportren = null;\n    let currentRenderer = null;\n    let count = rc.length;\n    while (count--) {\n      const aren = rc[count];\n      if (model._view.isInViewport(x, y, aren) && aren.getInteractive()) {\n        currentRenderer = aren;\n        break;\n      }\n      if (interactiveren === null && aren.getInteractive()) {\n        // Save this renderer in case we can't find one in the viewport that\n        // is interactive.\n        interactiveren = aren;\n      }\n      if (viewportren === null && model._view.isInViewport(x, y, aren)) {\n        // Save this renderer in case we can't find one in the viewport that\n        // is interactive.\n        viewportren = aren;\n      }\n    }\n\n    // We must have a value.  If we found an interactive renderer before, that's\n    // better than a non-interactive renderer.\n    if (currentRenderer === null) {\n      currentRenderer = interactiveren;\n    }\n\n    // We must have a value.  If we found a renderer that is in the viewport,\n    // that is better than any old viewport (but not as good as an interactive\n    // one).\n    if (currentRenderer === null) {\n      currentRenderer = viewportren;\n    }\n\n    // We must have a value - take anything.\n    if (currentRenderer == null) {\n      currentRenderer = rc[0];\n    }\n    return currentRenderer;\n  };\n\n  // only render if we are not animating. If we are animating\n  // then renders will happen naturally anyhow and we definitely\n  // do not want extra renders as the make the apparent interaction\n  // rate slower.\n  publicAPI.render = () => {\n    if (!publicAPI.isAnimating() && !model.inRender) {\n      forceRender();\n    }\n  };\n\n  // create the generic Event methods\n  handledEvents.forEach(eventName => {\n    const lowerFirst = eventName.charAt(0).toLowerCase() + eventName.slice(1);\n    publicAPI[`${lowerFirst}Event`] = arg => {\n      // Check that interactor enabled\n      if (!model.enabled) {\n        return;\n      }\n\n      // Check that a poked renderer exists\n      const renderer = publicAPI.getCurrentRenderer();\n      if (!renderer) {\n        vtkOnceErrorMacro(`\n          Can not forward events without a current renderer on the interactor.\n        `);\n        return;\n      }\n\n      // Pass the eventName and the poked renderer\n      const callData = {\n        type: eventName,\n        pokedRenderer: model.currentRenderer,\n        firstRenderer: publicAPI.getFirstRenderer(),\n        // Add the arguments to the call data\n        ...arg\n      };\n\n      // Call invoke\n      publicAPI[`invoke${eventName}`](callData);\n    };\n  });\n\n  // we know we are in multitouch now, so start recognizing\n  publicAPI.recognizeGesture = (event, positions) => {\n    // more than two pointers we ignore\n    if (Object.keys(positions).length > 2) {\n      return;\n    }\n    if (!model.startingEventPositions) {\n      model.startingEventPositions = {};\n    }\n\n    // store the initial positions\n    if (event === 'TouchStart') {\n      Object.keys(positions).forEach(key => {\n        model.startingEventPositions[key] = positions[key];\n      });\n      // we do not know what the gesture is yet\n      model.currentGesture = 'Start';\n      return;\n    }\n\n    // end the gesture if needed\n    if (event === 'TouchEnd') {\n      if (model.currentGesture === 'Pinch') {\n        publicAPI.render();\n        publicAPI.endPinchEvent();\n      }\n      if (model.currentGesture === 'Rotate') {\n        publicAPI.render();\n        publicAPI.endRotateEvent();\n      }\n      if (model.currentGesture === 'Pan') {\n        publicAPI.render();\n        publicAPI.endPanEvent();\n      }\n      model.currentGesture = 'Start';\n      model.startingEventPositions = {};\n      return;\n    }\n\n    // what are the two pointers we are working with\n    let count = 0;\n    const posVals = [];\n    const startVals = [];\n    Object.keys(positions).forEach(key => {\n      posVals[count] = positions[key];\n      startVals[count] = model.startingEventPositions[key];\n      count++;\n    });\n\n    // The meat of the algorithm\n    // on move events we analyze them to determine what type\n    // of movement it is and then deal with it.\n    // calculate the distances\n    const originalDistance = Math.sqrt((startVals[0].x - startVals[1].x) * (startVals[0].x - startVals[1].x) + (startVals[0].y - startVals[1].y) * (startVals[0].y - startVals[1].y));\n    const newDistance = Math.sqrt((posVals[0].x - posVals[1].x) * (posVals[0].x - posVals[1].x) + (posVals[0].y - posVals[1].y) * (posVals[0].y - posVals[1].y));\n\n    // calculate rotations\n    let originalAngle = degreesFromRadians(Math.atan2(startVals[1].y - startVals[0].y, startVals[1].x - startVals[0].x));\n    let newAngle = degreesFromRadians(Math.atan2(posVals[1].y - posVals[0].y, posVals[1].x - posVals[0].x));\n\n    // angles are cyclic so watch for that, 1 and 359 are only 2 apart :)\n    let angleDeviation = newAngle - originalAngle;\n    newAngle = newAngle + 180.0 >= 360.0 ? newAngle - 180.0 : newAngle + 180.0;\n    originalAngle = originalAngle + 180.0 >= 360.0 ? originalAngle - 180.0 : originalAngle + 180.0;\n    if (Math.abs(newAngle - originalAngle) < Math.abs(angleDeviation)) {\n      angleDeviation = newAngle - originalAngle;\n    }\n\n    // calculate the translations\n    const trans = [];\n    trans[0] = (posVals[0].x - startVals[0].x + posVals[1].x - startVals[1].x) / 2.0;\n    trans[1] = (posVals[0].y - startVals[0].y + posVals[1].y - startVals[1].y) / 2.0;\n    if (event === 'TouchMove') {\n      // OK we want to\n      // - immediately respond to the user\n      // - allow the user to zoom without panning (saves focal point)\n      // - allow the user to rotate without panning (saves focal point)\n\n      // do we know what gesture we are doing yet? If not\n      // see if we can figure it out\n      if (model.currentGesture === 'Start') {\n        // pinch is a move to/from the center point\n        // rotate is a move along the circumference\n        // pan is a move of the center point\n        // compute the distance along each of these axes in pixels\n        // the first to break thresh wins\n        let thresh = 0.01 * Math.sqrt(model.container.clientWidth * model.container.clientWidth + model.container.clientHeight * model.container.clientHeight);\n        if (thresh < 15.0) {\n          thresh = 15.0;\n        }\n        const pinchDistance = Math.abs(newDistance - originalDistance);\n        const rotateDistance = newDistance * 3.1415926 * Math.abs(angleDeviation) / 360.0;\n        const panDistance = Math.sqrt(trans[0] * trans[0] + trans[1] * trans[1]);\n        if (pinchDistance > thresh && pinchDistance > rotateDistance && pinchDistance > panDistance) {\n          model.currentGesture = 'Pinch';\n          const callData = {\n            scale: 1.0,\n            touches: positions\n          };\n          publicAPI.startPinchEvent(callData);\n        } else if (rotateDistance > thresh && rotateDistance > panDistance) {\n          model.currentGesture = 'Rotate';\n          const callData = {\n            rotation: 0.0,\n            touches: positions\n          };\n          publicAPI.startRotateEvent(callData);\n        } else if (panDistance > thresh) {\n          model.currentGesture = 'Pan';\n          const callData = {\n            translation: [0, 0],\n            touches: positions\n          };\n          publicAPI.startPanEvent(callData);\n        }\n      } else {\n        // if we have found a specific type of movement then\n        // handle it\n        if (model.currentGesture === 'Rotate') {\n          const callData = {\n            rotation: angleDeviation,\n            touches: positions\n          };\n          publicAPI.rotateEvent(callData);\n        }\n        if (model.currentGesture === 'Pinch') {\n          const callData = {\n            scale: newDistance / originalDistance,\n            touches: positions\n          };\n          publicAPI.pinchEvent(callData);\n        }\n        if (model.currentGesture === 'Pan') {\n          const callData = {\n            translation: trans,\n            touches: positions\n          };\n          publicAPI.panEvent(callData);\n        }\n      }\n    }\n  };\n  publicAPI.handleVisibilityChange = () => {\n    model._animationStartTime = Date.now();\n    model._animationFrameCount = 0;\n  };\n  publicAPI.setCurrentRenderer = r => {\n    model._forcedRenderer = !!r;\n    model.currentRenderer = r;\n  };\n  publicAPI.setContainer = container => {\n    _unbindEvents();\n    const res = superClass.setContainer(container ?? null);\n    if (res) {\n      _bindEvents();\n    }\n    return res;\n  };\n\n  // Stop animating if the renderWindowInteractor is deleted.\n  publicAPI.delete = () => {\n    while (animationRequesters.size) {\n      publicAPI.cancelAnimation(animationRequesters.values().next().value);\n    }\n    if (typeof document.hidden !== 'undefined') {\n      document.removeEventListener('visibilitychange', publicAPI.handleVisibilityChange);\n    }\n    if (model.container) {\n      publicAPI.setContainer(null);\n    }\n    superClass.delete();\n  };\n\n  // Use the Page Visibility API to detect when we switch away from or back to\n  // this tab, and reset the animationFrameStart. When tabs are not active, browsers\n  // will stop calling requestAnimationFrame callbacks.\n  if (typeof document.hidden !== 'undefined') {\n    document.addEventListener('visibilitychange', publicAPI.handleVisibilityChange, false);\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  renderWindow: null,\n  interactorStyle: null,\n  picker: null,\n  pickingManager: null,\n  initialized: false,\n  enabled: false,\n  enableRender: true,\n  currentRenderer: null,\n  lightFollowCamera: true,\n  desiredUpdateRate: 30.0,\n  stillUpdateRate: 2.0,\n  container: null,\n  // _view: null,\n  recognizeGestures: true,\n  currentGesture: 'Start',\n  animationRequest: null,\n  lastFrameTime: 0.1,\n  recentAnimationFrameRate: 10.0,\n  wheelTimeoutID: 0,\n  moveTimeoutID: 0,\n  lastGamepadValues: {},\n  preventDefaultOnPointerDown: false,\n  preventDefaultOnPointerUp: false,\n  mouseScrollDebounceByPass: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  // run animation at least until this time\n  model._animationExtendedEnd = 0;\n  macro.event(publicAPI, model, 'RenderEvent');\n  handledEvents.forEach(eventName => macro.event(publicAPI, model, eventName));\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['initialized', 'interactorStyle', 'lastFrameTime', 'recentAnimationFrameRate', '_view']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['container', 'lightFollowCamera', 'enabled', 'enableRender', 'recognizeGestures', 'desiredUpdateRate', 'stillUpdateRate', 'picker', 'preventDefaultOnPointerDown', 'preventDefaultOnPointerUp', 'mouseScrollDebounceByPass']);\n  macro.moveToProtected(publicAPI, model, ['view']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkRenderWindowInteractor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkRenderWindowInteractor');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderWindowInteractor$1 = {\n  newInstance,\n  extend,\n  handledEvents,\n  ...Constants\n};\n\nexport { vtkRenderWindowInteractor$1 as default, extend, newInstance };\n","const Device = {\n  Unknown: 0,\n  LeftController: 1,\n  RightController: 2\n};\nconst Input = {\n  Unknown: 0,\n  Trigger: 1,\n  TrackPad: 2,\n  Grip: 3,\n  Thumbstick: 4,\n  A: 5,\n  B: 6,\n  ApplicationMenu: 7 // Not exposed in WebXR API\n};\n\nconst Axis = {\n  Unknown: 0,\n  TouchpadX: 1,\n  TouchpadY: 2,\n  ThumbstickX: 3,\n  ThumbstickY: 4\n};\nvar Constants = {\n  Device,\n  Input,\n  Axis\n};\n\nexport { Axis, Device, Input, Constants as default };\n","import { mat4, vec3 } from 'gl-matrix';\nimport { n as newInstance$1, g as get, e as setGet, k as getArray, l as setGetArray, i as moveToProtected, c as macro } from '../../macros2.js';\nimport vtkCamera from './Camera.js';\nimport vtkLight from './Light.js';\nimport { U as areBoundsInitialized, u as uninitializeBounds, r as radiansFromDegrees, d as dot, H as createUninitializedBounds } from '../../Common/Core/Math/index.js';\nimport vtkViewport from './Viewport.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\n\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkRenderer::${method} - NOT IMPLEMENTED`);\n}\n\n// ----------------------------------------------------------------------------\n// vtkRenderer methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderer');\n\n  // Events\n  const COMPUTE_VISIBLE_PROP_BOUNDS_EVENT = {\n    type: 'ComputeVisiblePropBoundsEvent',\n    renderer: publicAPI\n  };\n  const RESET_CAMERA_CLIPPING_RANGE_EVENT = {\n    type: 'ResetCameraClippingRangeEvent',\n    renderer: publicAPI\n  };\n  const RESET_CAMERA_EVENT = {\n    type: 'ResetCameraEvent',\n    renderer: publicAPI\n  };\n  publicAPI.updateCamera = () => {\n    if (!model.activeCamera) {\n      vtkDebugMacro('No cameras are on, creating one.');\n      // the get method will automagically create a camera\n      // and reset it since one hasn't been specified yet.\n      publicAPI.getActiveCameraAndResetIfCreated();\n    }\n\n    // update the viewing transformation\n    model.activeCamera.render(publicAPI);\n    return true;\n  };\n  publicAPI.updateLightsGeometryToFollowCamera = () => {\n    // only update the light's geometry if this Renderer is tracking\n    // this lights.  That allows one renderer to view the lights that\n    // another renderer is setting up.\n    const camera = publicAPI.getActiveCameraAndResetIfCreated();\n    model.lights.forEach(light => {\n      if (light.lightTypeIsSceneLight()) ; else if (light.lightTypeIsHeadLight()) {\n        // update position and orientation of light to match camera.\n        light.setPositionFrom(camera.getPositionByReference());\n        light.setFocalPointFrom(camera.getFocalPointByReference());\n        light.modified(camera.getMTime());\n      } else if (light.lightTypeIsCameraLight()) {\n        light.setTransformMatrix(camera.getCameraLightTransformMatrix(mat4.create()));\n      } else {\n        vtkErrorMacro('light has unknown light type', light.get());\n      }\n    });\n  };\n  publicAPI.updateLightGeometry = () => {\n    if (model.lightFollowCamera) {\n      // only update the light's geometry if this Renderer is tracking\n      // this lights.  That allows one renderer to view the lights that\n      // another renderer is setting up.\n      return publicAPI.updateLightsGeometryToFollowCamera();\n    }\n    return true;\n  };\n  publicAPI.allocateTime = notImplemented('allocateTime');\n  publicAPI.updateGeometry = notImplemented('updateGeometry');\n  publicAPI.getVTKWindow = () => model._renderWindow;\n  publicAPI.setLayer = layer => {\n    vtkDebugMacro(publicAPI.getClassName(), publicAPI, 'setting Layer to ', layer);\n    if (model.layer !== layer) {\n      model.layer = layer;\n      publicAPI.modified();\n    }\n    publicAPI.setPreserveColorBuffer(!!layer);\n  };\n  publicAPI.setActiveCamera = camera => {\n    if (model.activeCamera === camera) {\n      return false;\n    }\n    model.activeCamera = camera;\n    publicAPI.modified();\n    publicAPI.invokeEvent({\n      type: 'ActiveCameraEvent',\n      camera\n    });\n    return true;\n  };\n  publicAPI.makeCamera = () => {\n    const camera = vtkCamera.newInstance();\n    publicAPI.invokeEvent({\n      type: 'CreateCameraEvent',\n      camera\n    });\n    return camera;\n  };\n\n  // Replace the set/get macro method\n  publicAPI.getActiveCamera = () => {\n    if (!model.activeCamera) {\n      model.activeCamera = publicAPI.makeCamera();\n    }\n    return model.activeCamera;\n  };\n  publicAPI.getActiveCameraAndResetIfCreated = () => {\n    if (!model.activeCamera) {\n      publicAPI.getActiveCamera();\n      publicAPI.resetCamera();\n    }\n    return model.activeCamera;\n  };\n  publicAPI.getActors = () => {\n    model.actors = [];\n    model.props.forEach(prop => {\n      model.actors = model.actors.concat(prop.getActors());\n    });\n    return model.actors;\n  };\n  publicAPI.addActor = publicAPI.addViewProp;\n  publicAPI.removeActor = actor => {\n    model.actors = model.actors.filter(a => a !== actor);\n    publicAPI.removeViewProp(actor);\n    publicAPI.modified();\n  };\n  publicAPI.removeAllActors = () => {\n    const actors = publicAPI.getActors();\n    actors.forEach(actor => {\n      publicAPI.removeViewProp(actor);\n    });\n    model.actors = [];\n    publicAPI.modified();\n  };\n  publicAPI.getVolumes = () => {\n    model.volumes = [];\n    model.props.forEach(prop => {\n      model.volumes = model.volumes.concat(prop.getVolumes());\n    });\n    return model.volumes;\n  };\n  publicAPI.addVolume = publicAPI.addViewProp;\n  publicAPI.removeVolume = volume => {\n    model.volumes = model.volumes.filter(v => v !== volume);\n    publicAPI.removeViewProp(volume);\n    publicAPI.modified();\n  };\n  publicAPI.removeAllVolumes = () => {\n    const volumes = publicAPI.getVolumes();\n    volumes.forEach(volume => {\n      publicAPI.removeViewProp(volume);\n    });\n    model.volumes = [];\n    publicAPI.modified();\n  };\n  publicAPI.hasLight = light => model.lights.includes(light);\n  publicAPI.addLight = light => {\n    if (light && !publicAPI.hasLight(light)) {\n      model.lights.push(light);\n      publicAPI.modified();\n    }\n  };\n  publicAPI.removeLight = light => {\n    model.lights = model.lights.filter(l => l !== light);\n    publicAPI.modified();\n  };\n  publicAPI.removeAllLights = () => {\n    model.lights = [];\n    publicAPI.modified();\n  };\n  publicAPI.setLightCollection = lights => {\n    model.lights = lights;\n    publicAPI.modified();\n  };\n  publicAPI.makeLight = vtkLight.newInstance;\n  publicAPI.createLight = () => {\n    if (!model.automaticLightCreation) {\n      return;\n    }\n    if (model._createdLight) {\n      publicAPI.removeLight(model._createdLight);\n      model._createdLight.delete();\n      model._createdLight = null;\n    }\n    model._createdLight = publicAPI.makeLight();\n    publicAPI.addLight(model._createdLight);\n    model._createdLight.setLightTypeToHeadLight();\n\n    // set these values just to have a good default should LightFollowCamera\n    // be turned off.\n    model._createdLight.setPosition(publicAPI.getActiveCamera().getPosition());\n    model._createdLight.setFocalPoint(publicAPI.getActiveCamera().getFocalPoint());\n  };\n\n  // requires the aspect ratio of the viewport as X/Y\n  publicAPI.normalizedDisplayToWorld = (x, y, z, aspect) => {\n    let vpd = publicAPI.normalizedDisplayToProjection(x, y, z);\n    vpd = publicAPI.projectionToView(vpd[0], vpd[1], vpd[2], aspect);\n    return publicAPI.viewToWorld(vpd[0], vpd[1], vpd[2]);\n  };\n\n  // requires the aspect ratio of the viewport as X/Y\n  publicAPI.worldToNormalizedDisplay = (x, y, z, aspect) => {\n    let vpd = publicAPI.worldToView(x, y, z);\n    vpd = publicAPI.viewToProjection(vpd[0], vpd[1], vpd[2], aspect);\n    return publicAPI.projectionToNormalizedDisplay(vpd[0], vpd[1], vpd[2]);\n  };\n\n  // requires the aspect ratio of the viewport as X/Y\n  publicAPI.viewToWorld = (x, y, z) => {\n    if (model.activeCamera === null) {\n      vtkErrorMacro('ViewToWorld: no active camera, cannot compute view to world, returning 0,0,0');\n      return [0, 0, 0];\n    }\n\n    // get the view matrix from the active camera\n    const matrix = model.activeCamera.getViewMatrix();\n    mat4.invert(matrix, matrix);\n    mat4.transpose(matrix, matrix);\n\n    // Transform point to world coordinates\n    const result = new Float64Array([x, y, z]);\n    vec3.transformMat4(result, result, matrix);\n    return result;\n  };\n  publicAPI.projectionToView = (x, y, z, aspect) => {\n    if (model.activeCamera === null) {\n      vtkErrorMacro('ProjectionToView: no active camera, cannot compute projection to view, returning 0,0,0');\n      return [0, 0, 0];\n    }\n\n    // get the projection transformation from the active camera\n    const matrix = model.activeCamera.getProjectionMatrix(aspect, -1.0, 1.0);\n    mat4.invert(matrix, matrix);\n    mat4.transpose(matrix, matrix);\n\n    // Transform point to world coordinates\n    const result = new Float64Array([x, y, z]);\n    vec3.transformMat4(result, result, matrix);\n    return result;\n  };\n\n  // Convert world point coordinates to view coordinates.\n  publicAPI.worldToView = (x, y, z) => {\n    if (model.activeCamera === null) {\n      vtkErrorMacro('WorldToView: no active camera, cannot compute view to world, returning 0,0,0');\n      return [0, 0, 0];\n    }\n\n    // get the view transformation from the active camera\n    const matrix = model.activeCamera.getViewMatrix();\n    mat4.transpose(matrix, matrix);\n    const result = new Float64Array([x, y, z]);\n    vec3.transformMat4(result, result, matrix);\n    return result;\n  };\n\n  // Convert world point coordinates to view coordinates.\n  // requires the aspect ratio of the viewport as X/Y\n  publicAPI.viewToProjection = (x, y, z, aspect) => {\n    if (model.activeCamera === null) {\n      vtkErrorMacro('ViewToProjection: no active camera, cannot compute view to projection, returning 0,0,0');\n      return [0, 0, 0];\n    }\n\n    // get the projeciton transformation from the active camera\n    const matrix = model.activeCamera.getProjectionMatrix(aspect, -1.0, 1.0);\n    mat4.transpose(matrix, matrix);\n    const result = new Float64Array([x, y, z]);\n    vec3.transformMat4(result, result, matrix);\n    return result;\n  };\n  publicAPI.computeVisiblePropBounds = () => {\n    model.allBounds[0] = vtkBoundingBox.INIT_BOUNDS[0];\n    model.allBounds[1] = vtkBoundingBox.INIT_BOUNDS[1];\n    model.allBounds[2] = vtkBoundingBox.INIT_BOUNDS[2];\n    model.allBounds[3] = vtkBoundingBox.INIT_BOUNDS[3];\n    model.allBounds[4] = vtkBoundingBox.INIT_BOUNDS[4];\n    model.allBounds[5] = vtkBoundingBox.INIT_BOUNDS[5];\n    let nothingVisible = true;\n    publicAPI.invokeEvent(COMPUTE_VISIBLE_PROP_BOUNDS_EVENT);\n\n    // loop through all props\n    for (let index = 0; index < model.props.length; ++index) {\n      const prop = model.props[index];\n      if (prop.getVisibility() && prop.getUseBounds()) {\n        const bounds = prop.getBounds();\n        if (bounds && areBoundsInitialized(bounds)) {\n          nothingVisible = false;\n          if (bounds[0] < model.allBounds[0]) {\n            model.allBounds[0] = bounds[0];\n          }\n          if (bounds[1] > model.allBounds[1]) {\n            model.allBounds[1] = bounds[1];\n          }\n          if (bounds[2] < model.allBounds[2]) {\n            model.allBounds[2] = bounds[2];\n          }\n          if (bounds[3] > model.allBounds[3]) {\n            model.allBounds[3] = bounds[3];\n          }\n          if (bounds[4] < model.allBounds[4]) {\n            model.allBounds[4] = bounds[4];\n          }\n          if (bounds[5] > model.allBounds[5]) {\n            model.allBounds[5] = bounds[5];\n          }\n        }\n      }\n    }\n    if (nothingVisible) {\n      uninitializeBounds(model.allBounds);\n      vtkDebugMacro(\"Can't compute bounds, no 3D props are visible\");\n    }\n    return model.allBounds;\n  };\n  publicAPI.resetCamera = function () {\n    let bounds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const boundsToUse = bounds || publicAPI.computeVisiblePropBounds();\n    const center = [0, 0, 0];\n    if (!areBoundsInitialized(boundsToUse)) {\n      vtkDebugMacro('Cannot reset camera!');\n      return false;\n    }\n    let vn = null;\n    if (publicAPI.getActiveCamera()) {\n      vn = model.activeCamera.getViewPlaneNormal();\n    } else {\n      vtkErrorMacro('Trying to reset non-existent camera');\n      return false;\n    }\n\n    // Reset the perspective zoom factors, otherwise subsequent zooms will cause\n    // the view angle to become very small and cause bad depth sorting.\n    model.activeCamera.setViewAngle(30.0);\n    center[0] = (boundsToUse[0] + boundsToUse[1]) / 2.0;\n    center[1] = (boundsToUse[2] + boundsToUse[3]) / 2.0;\n    center[2] = (boundsToUse[4] + boundsToUse[5]) / 2.0;\n    let w1 = boundsToUse[1] - boundsToUse[0];\n    let w2 = boundsToUse[3] - boundsToUse[2];\n    let w3 = boundsToUse[5] - boundsToUse[4];\n    w1 *= w1;\n    w2 *= w2;\n    w3 *= w3;\n    let radius = w1 + w2 + w3;\n\n    // If we have just a single point, pick a radius of 1.0\n    radius = radius === 0 ? 1.0 : radius;\n\n    // compute the radius of the enclosing sphere\n    radius = Math.sqrt(radius) * 0.5;\n\n    // default so that the bounding sphere fits within the view fustrum\n\n    // compute the distance from the intersection of the view frustum with the\n    // bounding sphere. Basically in 2D draw a circle representing the bounding\n    // sphere in 2D then draw a horizontal line going out from the center of\n    // the circle. That is the camera view. Then draw a line from the camera\n    // position to the point where it intersects the circle. (it will be tangent\n    // to the circle at this point, this is important, only go to the tangent\n    // point, do not draw all the way to the view plane). Then draw the radius\n    // from the tangent point to the center of the circle. You will note that\n    // this forms a right triangle with one side being the radius, another being\n    // the target distance for the camera, then just find the target dist using\n    // a sin.\n    const angle = radiansFromDegrees(model.activeCamera.getViewAngle());\n    const parallelScale = radius;\n    const distance = radius / Math.sin(angle * 0.5);\n\n    // check view-up vector against view plane normal\n    const vup = model.activeCamera.getViewUp();\n    if (Math.abs(dot(vup, vn)) > 0.999) {\n      vtkWarningMacro('Resetting view-up since view plane normal is parallel');\n      model.activeCamera.setViewUp(-vup[2], vup[0], vup[1]);\n    }\n\n    // update the camera\n    model.activeCamera.setFocalPoint(center[0], center[1], center[2]);\n    model.activeCamera.setPosition(center[0] + distance * vn[0], center[1] + distance * vn[1], center[2] + distance * vn[2]);\n    publicAPI.resetCameraClippingRange(boundsToUse);\n\n    // setup default parallel scale\n    model.activeCamera.setParallelScale(parallelScale);\n\n    // update reasonable world to physical values\n    model.activeCamera.setPhysicalScale(radius);\n    model.activeCamera.setPhysicalTranslation(-center[0], -center[1], -center[2]);\n\n    // Here to let parallel/distributed compositing intercept\n    // and do the right thing.\n    publicAPI.invokeEvent(RESET_CAMERA_EVENT);\n    return true;\n  };\n  publicAPI.resetCameraClippingRange = function () {\n    let bounds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const boundsToUse = bounds || publicAPI.computeVisiblePropBounds();\n    if (!areBoundsInitialized(boundsToUse)) {\n      vtkDebugMacro('Cannot reset camera clipping range!');\n      return false;\n    }\n\n    // Make sure we have an active camera\n    publicAPI.getActiveCameraAndResetIfCreated();\n    if (!model.activeCamera) {\n      vtkErrorMacro('Trying to reset clipping range of non-existent camera');\n      return false;\n    }\n\n    // Get the exact range for the bounds\n    const range = model.activeCamera.computeClippingRange(boundsToUse);\n\n    // do not let far - near be less than 0.1 of the window height\n    // this is for cases such as 2D images which may have zero range\n    let minGap = 0.0;\n    if (model.activeCamera.getParallelProjection()) {\n      minGap = 0.2 * model.activeCamera.getParallelScale();\n    } else {\n      const angle = radiansFromDegrees(model.activeCamera.getViewAngle());\n      minGap = 0.2 * Math.tan(angle / 2.0) * range[1];\n    }\n    if (range[1] - range[0] < minGap) {\n      minGap = minGap - range[1] + range[0];\n      range[1] += minGap / 2.0;\n      range[0] -= minGap / 2.0;\n    }\n\n    // Do not let the range behind the camera throw off the calculation.\n    if (range[0] < 0.0) {\n      range[0] = 0.0;\n    }\n\n    // Give ourselves a little breathing room\n    range[0] = 0.99 * range[0] - (range[1] - range[0]) * model.clippingRangeExpansion;\n    range[1] = 1.01 * range[1] + (range[1] - range[0]) * model.clippingRangeExpansion;\n\n    // Make sure near is not bigger than far\n    range[0] = range[0] >= range[1] ? 0.01 * range[1] : range[0];\n\n    // Make sure near is at least some fraction of far - this prevents near\n    // from being behind the camera or too close in front. How close is too\n    // close depends on the resolution of the depth buffer\n    if (!model.nearClippingPlaneTolerance) {\n      model.nearClippingPlaneTolerance = 0.01;\n    }\n\n    // make sure the front clipping range is not too far from the far clippnig\n    // range, this is to make sure that the zbuffer resolution is effectively\n    // used\n    if (range[0] < model.nearClippingPlaneTolerance * range[1]) {\n      range[0] = model.nearClippingPlaneTolerance * range[1];\n    }\n    model.activeCamera.setClippingRange(range[0], range[1]);\n\n    // Here to let parallel/distributed compositing intercept\n    // and do the right thing.\n    publicAPI.invokeEvent(RESET_CAMERA_CLIPPING_RANGE_EVENT);\n    return false;\n  };\n  publicAPI.setRenderWindow = renderWindow => {\n    if (renderWindow !== model._renderWindow) {\n      model._vtkWindow = renderWindow;\n      model._renderWindow = renderWindow;\n    }\n  };\n  publicAPI.visibleActorCount = () => model.props.filter(prop => prop.getVisibility()).length;\n  publicAPI.visibleVolumeCount = publicAPI.visibleActorCount;\n  publicAPI.getMTime = () => {\n    let m1 = model.mtime;\n    const m2 = model.activeCamera ? model.activeCamera.getMTime() : 0;\n    if (m2 > m1) {\n      m1 = m2;\n    }\n    const m3 = model._createdLight ? model._createdLight.getMTime() : 0;\n    if (m3 > m1) {\n      m1 = m3;\n    }\n    return m1;\n  };\n  publicAPI.getTransparent = () => !!model.preserveColorBuffer;\n  publicAPI.isActiveCameraCreated = () => !!model.activeCamera;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  pickedProp: null,\n  activeCamera: null,\n  allBounds: [],\n  ambient: [1, 1, 1],\n  allocatedRenderTime: 100,\n  timeFactor: 1,\n  automaticLightCreation: true,\n  twoSidedLighting: true,\n  lastRenderTimeInSeconds: -1,\n  renderWindow: null,\n  lights: [],\n  actors: [],\n  volumes: [],\n  lightFollowCamera: true,\n  numberOfPropsRendered: 0,\n  propArray: null,\n  pathArray: null,\n  layer: 0,\n  preserveColorBuffer: false,\n  preserveDepthBuffer: false,\n  computeVisiblePropBounds: createUninitializedBounds(),\n  interactive: true,\n  nearClippingPlaneTolerance: 0,\n  clippingRangeExpansion: 0.05,\n  erase: true,\n  draw: true,\n  useShadows: false,\n  useDepthPeeling: false,\n  occlusionRatio: 0,\n  maximumNumberOfPeels: 4,\n  selector: null,\n  delegate: null,\n  texturedBackground: false,\n  backgroundTexture: null,\n  environmentTexture: null,\n  environmentTextureDiffuseStrength: 1,\n  environmentTextureSpecularStrength: 1,\n  useEnvironmentTextureAsBackground: false,\n  pass: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewport.extend(publicAPI, model, initialValues);\n\n  // make sure background has 4 entries. Default to opaque black\n  if (!model.background) model.background = [0, 0, 0, 1];\n  while (model.background.length < 3) model.background.push(0);\n  if (model.background.length === 3) model.background.push(1);\n\n  // Build VTK API\n  get(publicAPI, model, ['_renderWindow', 'allocatedRenderTime', 'timeFactor', 'lastRenderTimeInSeconds', 'numberOfPropsRendered', 'lastRenderingUsedDepthPeeling', 'selector']);\n  setGet(publicAPI, model, ['twoSidedLighting', 'lightFollowCamera', 'automaticLightCreation', 'erase', 'draw', 'nearClippingPlaneTolerance', 'clippingRangeExpansion', 'backingStore', 'interactive', 'layer', 'preserveColorBuffer', 'preserveDepthBuffer', 'useDepthPeeling', 'occlusionRatio', 'maximumNumberOfPeels', 'delegate', 'backgroundTexture', 'texturedBackground', 'environmentTexture', 'environmentTextureDiffuseStrength', 'environmentTextureSpecularStrength', 'useEnvironmentTextureAsBackground', 'useShadows', 'pass']);\n  getArray(publicAPI, model, ['actors', 'volumes', 'lights']);\n  setGetArray(publicAPI, model, ['background'], 4, 1.0);\n  moveToProtected(publicAPI, model, ['renderWindow']);\n\n  // Object methods\n  vtkRenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkRenderer');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderer$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkRenderer$1 as default, extend, newInstance };\n","import * as d3 from 'd3-scale';\nimport { R as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkActor from './Actor.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport vtkMapper from './Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkTexture from './Texture.js';\n\nconst {\n  VectorMode\n} = vtkScalarsToColors;\n\n// ----------------------------------------------------------------------------\n// vtkScalarBarActor\n//\n// Note log scales are currently not supported\n//\n// Developer note: This class is broken into the main class and a helper\n// class. The main class holds view independent properties (those properties\n// that do not change as the view's resolution/aspect ratio change). The\n// helper class is instantiated one per view and holds properties that can\n// depend on view specific values such as resolution. The helper class code\n// could have been left to the View specific implementation (such as\n// vtkWebGPUScalarBarActor) but is instead placed here to it can be shared by\n// multiple rendering backends.\n//\n// ----------------------------------------------------------------------------\n\nfunction applyTextStyle(ctx, style) {\n  ctx.strokeStyle = style.strokeColor;\n  ctx.lineWidth = style.strokeSize;\n  ctx.fillStyle = style.fontColor;\n  ctx.font = `${style.fontStyle} ${style.fontSize}px ${style.fontFamily}`;\n}\n\n// ----------------------------------------------------------------------------\n// Default autoLayout function\n// ----------------------------------------------------------------------------\n\n// compute good values to use based on window size etc a bunch of heuristics\n// here with hand tuned constants These values worked for me but really this\n// method could be redically changed. The basic gist is\n// 1) compute a resonable font size\n// 2) render the text atlas using those font sizes\n// 3) pick horizontal or vertical bsed on window size\n// 4) based on the size of the title and tick labels rendered\n//    compute the box size and position such that\n//    the text will all fit nicely and the bar will be a resonable size\n// 5) compute the bar segments based on the above settings\n//\n// Note that this function can and should read values from the\n// ScalarBarActor but should only write values to the view dependent helper\n// instance that is provided as those values are the ones that will be used\n// for rendering.\n//\nfunction defaultAutoLayout(publicAPI, model) {\n  return helper => {\n    // we don't do a linear scale, the proportions for\n    // a 700 pixel window differ from a 1400\n    const lastSize = helper.getLastSize();\n    const xAxisAdjust = (lastSize[0] / 700) ** 0.8;\n    const yAxisAdjust = (lastSize[1] / 700) ** 0.8;\n    const minAdjust = Math.min(xAxisAdjust, yAxisAdjust);\n    const axisTextStyle = helper.getAxisTextStyle();\n    const tickTextStyle = helper.getTickTextStyle();\n    Object.assign(axisTextStyle, model.axisTextStyle);\n    Object.assign(tickTextStyle, model.tickTextStyle);\n\n    // compute a reasonable font size first\n    axisTextStyle.fontSize = Math.max(24 * minAdjust, 12);\n    if (helper.getLastAspectRatio() > 1.0) {\n      tickTextStyle.fontSize = Math.max(20 * minAdjust, 10);\n    } else {\n      tickTextStyle.fontSize = Math.max(16 * minAdjust, 10);\n    }\n\n    // rebuild the text atlas\n    const textSizes = helper.updateTextureAtlas();\n\n    // now compute the boxSize and pixel offsets, different algorithm\n    // for horizonal versus vertical\n    helper.setTopTitle(false);\n    const boxSize = helper.getBoxSizeByReference();\n\n    // if vertical\n    if (helper.getLastAspectRatio() > 1.0) {\n      helper.setTickLabelPixelOffset(0.3 * tickTextStyle.fontSize);\n\n      // if the title will fit within the width of the bar then that looks\n      // nicer to put it at the top (helper.topTitle), otherwise rotate it\n      // and place it sideways\n      if (textSizes.titleWidth <= textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) {\n        helper.setTopTitle(true);\n        helper.setAxisTitlePixelOffset(0.2 * tickTextStyle.fontSize);\n        boxSize[0] = 2.0 * (textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) / lastSize[0];\n        helper.setBoxPosition([0.98 - boxSize[0], -0.92]);\n      } else {\n        helper.setAxisTitlePixelOffset(0.2 * tickTextStyle.fontSize);\n        boxSize[0] = 2.0 * (textSizes.titleHeight + helper.getAxisTitlePixelOffset() + textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) / lastSize[0];\n        helper.setBoxPosition([0.99 - boxSize[0], -0.92]);\n      }\n      boxSize[1] = Math.max(1.2, Math.min(1.84 / yAxisAdjust, 1.84));\n    } else {\n      // horizontal\n      helper.setAxisTitlePixelOffset(1.2 * tickTextStyle.fontSize);\n      helper.setTickLabelPixelOffset(0.1 * tickTextStyle.fontSize);\n      const titleHeight =\n      // total offset from top of bar (includes ticks)\n      2.0 * (0.8 * tickTextStyle.fontSize + textSizes.titleHeight + helper.getAxisTitlePixelOffset()) / lastSize[1];\n      const tickWidth = 2.0 * textSizes.tickWidth / lastSize[0];\n      boxSize[0] = Math.min(1.9, Math.max(1.4, 1.4 * tickWidth * (helper.getTicks().length + 3)));\n      boxSize[1] = titleHeight;\n      helper.setBoxPosition([-0.5 * boxSize[0], -0.97]);\n    }\n\n    // recomute bar segments based on positioning\n    helper.recomputeBarSegments(textSizes);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Default generateTicks function\n// ----------------------------------------------------------------------------\n\n// This function returns the default function used to generate vtkScalarBarActor ticks.\n// The default function makes use of d3.scaleLinear() to generate 5 tick marks between\n// the minimum and maximum values of the scalar bar. Customize this behavior by passing\n// a function to vtkScalarBarActor.newInstance({ generateTicks: customGenerateTicks })\n// or by calling scalarBarActor.setGenerateTicks(customGenerateTicks).\nfunction defaultGenerateTicks(publicApi, model) {\n  return helper => {\n    const lastTickBounds = helper.getLastTickBounds();\n    const scale = d3.scaleLinear().domain([lastTickBounds[0], lastTickBounds[1]]);\n    const ticks = scale.ticks(5);\n    const format = scale.tickFormat(5);\n    helper.setTicks(ticks);\n    helper.setTickStrings(ticks.map(format));\n  };\n}\n\n// many properties of this actor depend on the API specific view The main\n// dependency being the resolution as that drives what font sizes to use.\n// Bacause of this we need to do some of the calculations in a API specific\n// subclass. But... we don't want a lot of duplicated code between WebGL and\n// WebGPU for example so we have this helper class, that is designed to be\n// fairly API independent so that API specific views can call this to do\n// most of the work.\nfunction vtkScalarBarActorHelper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarBarActorHelper');\n  publicAPI.setRenderable = renderable => {\n    if (model.renderable === renderable) {\n      return;\n    }\n    model.renderable = renderable;\n    model.barActor.setProperty(renderable.getProperty());\n    model.barActor.setParentProp(renderable);\n    model.barActor.setCoordinateSystemToDisplay();\n    model.tmActor.setProperty(renderable.getProperty());\n    model.tmActor.setParentProp(renderable);\n    model.tmActor.setCoordinateSystemToDisplay();\n    model.generateTicks = renderable.generateTicks;\n    model.axisTextStyle = {\n      ...renderable.getAxisTextStyle()\n    };\n    model.tickTextStyle = {\n      ...renderable.getTickTextStyle()\n    };\n    publicAPI.modified();\n  };\n  publicAPI.updateAPISpecificData = (size, camera, renderWindow) => {\n    // has the size changed?\n    if (model.lastSize[0] !== size[0] || model.lastSize[1] !== size[1]) {\n      model.lastSize[0] = size[0];\n      model.lastSize[1] = size[1];\n      model.lastAspectRatio = size[0] / size[1];\n      model.forceUpdate = true;\n    }\n    const scalarsToColors = model.renderable.getScalarsToColors();\n    if (!scalarsToColors || !model.renderable.getVisibility()) {\n      return;\n    }\n\n    // make sure the lut is assigned to our mapper\n    model.barMapper.setLookupTable(scalarsToColors);\n\n    // camera should be the same for all views\n    model.camera = camera;\n    model.renderWindow = renderWindow;\n\n    // did something significant change? If so rebuild a lot of things\n    if (model.forceUpdate || Math.max(scalarsToColors.getMTime(), publicAPI.getMTime(), model.renderable.getMTime()) > model.lastRebuildTime.getMTime()) {\n      const range = scalarsToColors.getMappingRange();\n      model.lastTickBounds = [...range];\n\n      // compute tick marks for axes (update for log scale)\n      model.renderable.getGenerateTicks()(publicAPI);\n      if (model.renderable.getAutomated()) {\n        model.renderable.getAutoLayout()(publicAPI);\n      } else {\n        // copy values from renderable\n        model.axisTextStyle = {\n          ...model.renderable.getAxisTextStyle()\n        };\n        model.tickTextStyle = {\n          ...model.renderable.getTickTextStyle()\n        };\n        model.barPosition = [...model.renderable.getBarPosition()];\n        model.barSize = [...model.renderable.getBarSize()];\n        model.boxPosition = [...model.renderable.getBoxPosition()];\n        model.boxSize = [...model.renderable.getBoxSize()];\n        model.axisTitlePixelOffset = model.renderable.getAxisTitlePixelOffset();\n        model.tickLabelPixelOffset = model.renderable.getTickLabelPixelOffset();\n\n        // rebuild the texture only when force or changed bounds, face\n        // visibility changes do to change the atlas\n        const textSizes = publicAPI.updateTextureAtlas();\n\n        // recompute bar segments based on positioning\n        publicAPI.recomputeBarSegments(textSizes);\n      }\n      publicAPI.updatePolyDataForLabels();\n      publicAPI.updatePolyDataForBarSegments();\n      model.lastRebuildTime.modified();\n      model.forceUpdate = false;\n    }\n  };\n\n  // create the texture map atlas that contains the rendering of\n  // all the text strings. Only needs to be called when the text strings\n  // have changed (labels and ticks)\n  publicAPI.updateTextureAtlas = () => {\n    // set the text properties\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n\n    // return some factors about the text atlas\n    const results = {};\n\n    // first the axislabel\n    const newTmAtlas = new Map();\n    let maxWidth = 0;\n    let totalHeight = 1; // start one pixel in so we have a border\n    applyTextStyle(model.tmContext, model.axisTextStyle);\n    let metrics = model.tmContext.measureText(model.renderable.getAxisLabel());\n    let entry = {\n      height: metrics.actualBoundingBoxAscent + 2,\n      startingHeight: totalHeight,\n      width: metrics.width + 2,\n      textStyle: model.axisTextStyle\n    };\n    newTmAtlas.set(model.renderable.getAxisLabel(), entry);\n    totalHeight += entry.height;\n    maxWidth = entry.width;\n    results.titleWidth = entry.width;\n    results.titleHeight = entry.height;\n\n    // and the ticks, NaN Below and Above\n    results.tickWidth = 0;\n    results.tickHeight = 0;\n    applyTextStyle(model.tmContext, model.tickTextStyle);\n    const strings = [...publicAPI.getTickStrings(), 'NaN', 'Below', 'Above'];\n    for (let t = 0; t < strings.length; t++) {\n      if (!newTmAtlas.has(strings[t])) {\n        metrics = model.tmContext.measureText(strings[t]);\n        entry = {\n          height: metrics.actualBoundingBoxAscent + 2,\n          startingHeight: totalHeight,\n          width: metrics.width + 2,\n          textStyle: model.tickTextStyle\n        };\n        newTmAtlas.set(strings[t], entry);\n        totalHeight += entry.height;\n        if (maxWidth < entry.width) {\n          maxWidth = entry.width;\n        }\n        if (results.tickWidth < entry.width) {\n          results.tickWidth = entry.width;\n        }\n        if (results.tickHeight < entry.height) {\n          results.tickHeight = entry.height;\n        }\n      }\n    }\n\n    // always use power of two to avoid interpolation\n    // in cases where PO2 is required\n    maxWidth = nearestPowerOfTwo(maxWidth);\n    totalHeight = nearestPowerOfTwo(totalHeight);\n\n    // set the tcoord values\n    newTmAtlas.forEach(value => {\n      value.tcoords = [0.0, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight) / totalHeight, 0.0, (totalHeight - value.startingHeight) / totalHeight];\n    });\n\n    // make sure we have power of two dimensions\n    model.tmCanvas.width = maxWidth;\n    model.tmCanvas.height = totalHeight;\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n    model.tmContext.clearRect(0, 0, maxWidth, totalHeight);\n\n    // draw the text onto the texture\n    newTmAtlas.forEach((value, key) => {\n      applyTextStyle(model.tmContext, value.textStyle);\n      model.tmContext.fillText(key, 1, value.startingHeight + value.height - 1);\n    });\n    model.tmTexture.setCanvas(model.tmCanvas);\n    // mark as modified since the canvas typically doesn't change\n    model.tmTexture.modified();\n    model._tmAtlas = newTmAtlas;\n    return results;\n  };\n  publicAPI.computeBarSize = textSizes => {\n    // compute orientation\n    model.vertical = model.boxSize[1] > model.boxSize[0];\n    const tickHeight = 2.0 * textSizes.tickHeight / model.lastSize[1];\n    const segSize = [1, 1];\n\n    // horizontal and vertical have different astetics so adjust based on\n    // orientation\n    if (model.vertical) {\n      const tickWidth = 2.0 * (textSizes.tickWidth + model.tickLabelPixelOffset) / model.lastSize[0];\n      if (model.topTitle) {\n        const titleHeight = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[1];\n        model.barSize[0] = model.boxSize[0] - tickWidth;\n        model.barSize[1] = model.boxSize[1] - titleHeight;\n      } else {\n        // rotated title so width is based off height\n        const titleWidth = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[0];\n        model.barSize[0] = model.boxSize[0] - titleWidth - tickWidth;\n        model.barSize[1] = model.boxSize[1];\n      }\n      model.barPosition[0] = model.boxPosition[0] + tickWidth;\n      model.barPosition[1] = model.boxPosition[1];\n      segSize[1] = tickHeight;\n    } else {\n      const tickWidth = (2.0 * textSizes.tickWidth - 8) / model.lastSize[0];\n      const titleHeight = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[1];\n      model.barSize[0] = model.boxSize[0];\n      model.barPosition[0] = model.boxPosition[0];\n      model.barSize[1] = model.boxSize[1] - titleHeight;\n      model.barPosition[1] = model.boxPosition[1];\n      segSize[0] = tickWidth;\n    }\n    return segSize;\n  };\n\n  // based on all the settins compute a barSegments array\n  // containing the segments of the scalar bar\n  // each segment contains\n  //   corners[4][2]\n  //   title - e.g. NaN, Above, ticks\n  //   scalars - the normalized scalars values to use for that segment\n  //\n  // Note that the bar consumes the space in the box that remains after\n  // leaving room for the text labels\n  publicAPI.recomputeBarSegments = textSizes => {\n    // first compute the barSize/Position\n    const segSize = publicAPI.computeBarSize(textSizes);\n    model.barSegments = [];\n    const startPos = [0.0, 0.0];\n\n    // horizontal and vertical have different astetics so adjust based on\n    // orientation\n    const barAxis = model.vertical ? 1 : 0;\n    const segSpace = model.vertical ? 0.01 : 0.02;\n    function pushSeg(title, scalars) {\n      model.barSegments.push({\n        corners: [[...startPos], [startPos[0] + segSize[0], startPos[1]], [startPos[0] + segSize[0], startPos[1] + segSize[1]], [startPos[0], startPos[1] + segSize[1]]],\n        scalars,\n        title\n      });\n      startPos[barAxis] += segSize[barAxis] + segSpace;\n    }\n    if (model.renderable.getDrawNanAnnotation() && model.renderable.getScalarsToColors().getNanColor()) {\n      pushSeg('NaN', [NaN, NaN, NaN, NaN]);\n    }\n    if (model.renderable.getDrawBelowRangeSwatch() && model.renderable.getScalarsToColors().getUseBelowRangeColor?.()) {\n      pushSeg('Below', [-0.1, -0.1, -0.1, -0.1]);\n    }\n    const haveAbove = model.renderable.getScalarsToColors().getUseAboveRangeColor?.();\n\n    // extra space around the ticks section\n    startPos[barAxis] += segSpace;\n    const oldSegSize = segSize[barAxis];\n    segSize[barAxis] = haveAbove ? 1.0 - 2.0 * segSpace - segSize[barAxis] - startPos[barAxis] : 1.0 - segSpace - startPos[barAxis];\n    pushSeg('ticks', model.vertical ? [0, 0, 0.995, 0.995] : [0, 0.995, 0.995, 0]);\n    if (model.renderable.getDrawAboveRangeSwatch() && haveAbove) {\n      segSize[barAxis] = oldSegSize;\n      startPos[barAxis] += segSpace;\n      pushSeg('Above', [1.1, 1.1, 1.1, 1.1]);\n    }\n  };\n\n  // called by updatePolyDataForLabels\n  // modifies class constants tmp2v3\n  const tmp2v3 = new Float64Array(3);\n\n  // anchor point = pos\n  // H alignment = left, middle, right\n  // V alignment = bottom, middle, top\n  // Text Orientation = horizontal, vertical\n  // orientation\n  publicAPI.createPolyDataForOneLabel = (text, pos, alignment, orientation, offset, results) => {\n    const value = model._tmAtlas.get(text);\n    if (!value) {\n      return;\n    }\n    // have to find the four corners of the texture polygon for this label\n    let ptIdx = results.ptIdx;\n    let cellIdx = results.cellIdx;\n\n    // get achor point in pixels\n    tmp2v3[0] = (0.5 * pos[0] + 0.5) * model.lastSize[0];\n    tmp2v3[1] = (0.5 * pos[1] + 0.5) * model.lastSize[1];\n    tmp2v3[2] = pos[2];\n    tmp2v3[0] += offset[0];\n    tmp2v3[1] += offset[1];\n\n    // get text size in display pixels\n    const textSize = [];\n    const textAxes = orientation === 'vertical' ? [1, 0] : [0, 1];\n    if (orientation === 'vertical') {\n      textSize[0] = value.width;\n      textSize[1] = -value.height;\n      // update anchor point based on alignment\n      if (alignment[0] === 'middle') {\n        tmp2v3[1] -= value.width / 2.0;\n      } else if (alignment[0] === 'right') {\n        tmp2v3[1] -= value.width;\n      }\n      if (alignment[1] === 'middle') {\n        tmp2v3[0] += value.height / 2.0;\n      } else if (alignment[1] === 'top') {\n        tmp2v3[0] += value.height;\n      }\n    } else {\n      textSize[0] = value.width;\n      textSize[1] = value.height;\n      // update anchor point based on alignment\n      if (alignment[0] === 'middle') {\n        tmp2v3[0] -= value.width / 2.0;\n      } else if (alignment[0] === 'right') {\n        tmp2v3[0] -= value.width;\n      }\n      if (alignment[1] === 'middle') {\n        tmp2v3[1] -= value.height / 2.0;\n      } else if (alignment[1] === 'top') {\n        tmp2v3[1] -= value.height;\n      }\n    }\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[0];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[1];\n    ptIdx++;\n    tmp2v3[textAxes[0]] += textSize[0];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[2];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[3];\n    ptIdx++;\n    tmp2v3[textAxes[1]] += textSize[1];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[4];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[5];\n    ptIdx++;\n    tmp2v3[textAxes[0]] -= textSize[0];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[6];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[7];\n    ptIdx++;\n\n    // add the two triangles to represent the quad\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 3;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 2;\n    cellIdx++;\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 2;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 1;\n    results.ptIdx += 4;\n    results.cellIdx += 2;\n  };\n\n  // update the polydata associated with drawing the text labels\n  // specifically the quads used for each label and their associated tcoords\n  // etc. This changes every time the camera viewpoint changes\n  const tmpv3 = new Float64Array(3);\n  publicAPI.updatePolyDataForLabels = () => {\n    // update the polydata\n    const numLabels = publicAPI.getTickStrings().length + model.barSegments.length;\n    const numPts = numLabels * 4;\n    const numTris = numLabels * 2;\n    const points = new Float64Array(numPts * 3);\n    const polys = new Uint16Array(numTris * 4);\n    const tcoords = new Float32Array(numPts * 2);\n    const results = {\n      ptIdx: 0,\n      cellIdx: 0,\n      polys,\n      points,\n      tcoords\n    };\n\n    // compute the direction vector\n    const offsetAxis = model.vertical ? 0 : 1;\n    const spacedAxis = model.vertical ? 1 : 0;\n    tmpv3[2] = -0.99; // near plane\n\n    // draw the title\n    const alignment = model.vertical ? ['right', 'middle'] : ['middle', 'bottom'];\n    let dir = [0, 1];\n    const tickOffsets = [0, 0];\n    if (model.vertical) {\n      tickOffsets[0] = -model.tickLabelPixelOffset;\n      if (model.topTitle) {\n        tmpv3[0] = model.boxPosition[0] + 0.5 * model.boxSize[0];\n        tmpv3[1] = model.barPosition[1] + model.barSize[1];\n\n        // write the axis label\n        publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'bottom'], 'horizontal', [0, model.axisTitlePixelOffset], results);\n      } else {\n        tmpv3[0] = model.barPosition[0] + model.barSize[0];\n        tmpv3[1] = model.barPosition[1] + 0.5 * model.barSize[1];\n\n        // write the axis label\n        publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'top'], 'vertical', [model.axisTitlePixelOffset, 0], results);\n      }\n      dir = [-1, 0];\n    } else {\n      tickOffsets[1] = model.tickLabelPixelOffset;\n      tmpv3[0] = model.barPosition[0] + 0.5 * model.barSize[0];\n      tmpv3[1] = model.barPosition[1] + model.barSize[1];\n      publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'bottom'], 'horizontal', [0, model.axisTitlePixelOffset], results);\n    }\n    tmpv3[offsetAxis] = model.barPosition[offsetAxis] + (0.5 * dir[offsetAxis] + 0.5) * model.barSize[offsetAxis];\n    tmpv3[spacedAxis] = model.barPosition[spacedAxis] + model.barSize[spacedAxis] * 0.5;\n\n    // draw bar segment labels\n    let tickSeg = null;\n    for (let i = 0; i < model.barSegments.length; i++) {\n      const seg = model.barSegments[i];\n      if (seg.title === 'ticks') {\n        // handle ticks below\n        tickSeg = seg;\n      } else {\n        tmpv3[spacedAxis] = model.barPosition[spacedAxis] + 0.5 * model.barSize[spacedAxis] * (seg.corners[2][spacedAxis] + seg.corners[0][spacedAxis]);\n        publicAPI.createPolyDataForOneLabel(seg.title, tmpv3, alignment, 'horizontal', tickOffsets, results);\n      }\n    }\n\n    // write the tick labels\n    const tickSegmentStart = model.barPosition[spacedAxis] + model.barSize[spacedAxis] * tickSeg.corners[0][spacedAxis];\n    const tickSegmentSize = model.barSize[spacedAxis] * (tickSeg.corners[2][spacedAxis] - tickSeg.corners[0][spacedAxis]);\n    const ticks = publicAPI.getTicks();\n    const tickStrings = publicAPI.getTickStrings();\n    for (let t = 0; t < ticks.length; t++) {\n      const tickPos = (ticks[t] - model.lastTickBounds[0]) / (model.lastTickBounds[1] - model.lastTickBounds[0]);\n      tmpv3[spacedAxis] = tickSegmentStart + tickSegmentSize * tickPos;\n      publicAPI.createPolyDataForOneLabel(tickStrings[t], tmpv3, alignment, 'horizontal', tickOffsets, results);\n    }\n    const tcoordDA = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoords,\n      name: 'TextureCoordinates'\n    });\n    model.tmPolyData.getPointData().setTCoords(tcoordDA);\n    model.tmPolyData.getPoints().setData(points, 3);\n    model.tmPolyData.getPoints().modified();\n    model.tmPolyData.getPolys().setData(polys, 1);\n    model.tmPolyData.getPolys().modified();\n    model.tmPolyData.modified();\n  };\n  publicAPI.updatePolyDataForBarSegments = () => {\n    const scalarsToColors = model.renderable.getScalarsToColors();\n    let numberOfExtraColors = 0;\n    if (model.renderable.getDrawNanAnnotation() && scalarsToColors.getNanColor()) {\n      numberOfExtraColors += 1;\n    }\n    if (model.renderable.getDrawBelowRangeSwatch() && scalarsToColors.getUseBelowRangeColor?.()) {\n      numberOfExtraColors += 1;\n    }\n    if (model.renderable.getDrawAboveRangeSwatch() && scalarsToColors.getUseAboveRangeColor?.()) {\n      numberOfExtraColors += 1;\n    }\n    const numPts = 4 * (1 + numberOfExtraColors);\n    const numQuads = numPts;\n\n    // handle vector component mode\n    let numComps = 1;\n    if (scalarsToColors.getVectorMode() === VectorMode.COMPONENT) {\n      numComps = scalarsToColors.getVectorComponent() + 1;\n    }\n\n    // create the colored bars\n    const points = new Float64Array(numPts * 3);\n    const cells = new Uint16Array(numQuads * 5);\n    const scalars = new Float32Array(numPts * numComps);\n    let ptIdx = 0;\n    let cellIdx = 0;\n    for (let i = 0; i < model.barSegments.length; i++) {\n      const seg = model.barSegments[i];\n      for (let e = 0; e < 4; e++) {\n        tmpv3[0] = model.barPosition[0] + seg.corners[e][0] * model.barSize[0];\n        tmpv3[1] = model.barPosition[1] + seg.corners[e][1] * model.barSize[1];\n        points[ptIdx * 3] = (0.5 * tmpv3[0] + 0.5) * model.lastSize[0];\n        points[ptIdx * 3 + 1] = (0.5 * tmpv3[1] + 0.5) * model.lastSize[1];\n        points[ptIdx * 3 + 2] = tmpv3[2];\n        for (let nc = 0; nc < numComps; nc++) {\n          scalars[ptIdx * numComps + nc] = model.lastTickBounds[0] + seg.scalars[e] * (model.lastTickBounds[1] - model.lastTickBounds[0]);\n        }\n        ptIdx++;\n      }\n      cells[cellIdx * 5] = 4;\n      cells[cellIdx * 5 + 1] = ptIdx - 4;\n      cells[cellIdx * 5 + 2] = ptIdx - 3;\n      cells[cellIdx * 5 + 3] = ptIdx - 2;\n      cells[cellIdx * 5 + 4] = ptIdx - 1;\n      cellIdx++;\n    }\n    const scalarsDA = vtkDataArray.newInstance({\n      numberOfComponents: numComps,\n      values: scalars,\n      name: 'Scalars'\n    });\n    model.polyData.getPointData().setScalars(scalarsDA);\n    model.polyData.getPoints().setData(points, 3);\n    model.polyData.getPoints().modified();\n    model.polyData.getPolys().setData(cells, 1);\n    model.polyData.getPolys().modified();\n    model.polyData.modified();\n  };\n}\nconst newScalarBarActorHelper = macro.newInstance(function (publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    renderable: null\n  };\n  Object.assign(model, {}, initialValues);\n\n  // Inheritance\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['axisTitlePixelOffset', 'tickLabelPixelOffset', 'renderable', 'topTitle', 'ticks', 'tickStrings']);\n  macro.get(publicAPI, model, ['lastSize', 'lastAspectRatio', 'lastTickBounds', 'axisTextStyle', 'tickTextStyle', 'barActor', 'tmActor']);\n  macro.getArray(publicAPI, model, ['boxPosition', 'boxSize']);\n  macro.setArray(publicAPI, model, ['boxPosition', 'boxSize'], 2);\n  model.forceUpdate = false;\n  model.lastRebuildTime = {};\n  macro.obj(model.lastRebuildTime, {\n    mtime: 0\n  });\n  model.lastSize = [-1, -1];\n  model.tmCanvas = document.createElement('canvas');\n  model.tmContext = model.tmCanvas.getContext('2d');\n  model._tmAtlas = new Map();\n  model.barMapper = vtkMapper.newInstance();\n  model.barMapper.setInterpolateScalarsBeforeMapping(true);\n  model.barMapper.setUseLookupTableScalarRange(true);\n  model.polyData = vtkPolyData.newInstance();\n  model.barMapper.setInputData(model.polyData);\n  model.barActor = vtkActor.newInstance();\n  model.barActor.setMapper(model.barMapper);\n\n  // for texture atlas\n  model.tmPolyData = vtkPolyData.newInstance();\n  model.tmMapper = vtkMapper.newInstance();\n  model.tmMapper.setInputData(model.tmPolyData);\n  model.tmTexture = vtkTexture.newInstance({\n    resizable: true\n  });\n  model.tmTexture.setInterpolate(false);\n  model.tmActor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n  model.tmActor.setMapper(model.tmMapper);\n  model.tmActor.addTexture(model.tmTexture);\n  model.barPosition = [0, 0];\n  model.barSize = [0, 0];\n  model.boxPosition = [0.88, -0.92];\n  model.boxSize = [0.1, 1.1];\n\n  // internal variables\n  model.lastTickBounds = [];\n  vtkScalarBarActorHelper(publicAPI, model);\n}, 'vtkScalarBarActorHelper');\n\n//\n// Now we define the public class that the application sets view independent\n// properties on. This class is fairly small as it mainly just holds\n// properties setter and getters leaving all calculations to the helper\n// class.\n//\nfunction vtkScalarBarActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarBarActor');\n  publicAPI.setTickTextStyle = tickStyle => {\n    model.tickTextStyle = {\n      ...model.tickTextStyle,\n      ...tickStyle\n    };\n    publicAPI.modified();\n  };\n  publicAPI.setAxisTextStyle = axisStyle => {\n    model.axisTextStyle = {\n      ...model.axisTextStyle,\n      ...axisStyle\n    };\n    publicAPI.modified();\n  };\n  publicAPI.resetAutoLayoutToDefault = () => {\n    publicAPI.setAutoLayout(defaultAutoLayout(publicAPI, model));\n  };\n  publicAPI.resetGenerateTicksToDefault = () => {\n    publicAPI.setGenerateTicks(defaultGenerateTicks());\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(initialValues) {\n  return {\n    automated: true,\n    autoLayout: null,\n    axisLabel: 'Scalar Value',\n    barPosition: [0, 0],\n    barSize: [0, 0],\n    boxPosition: [0.88, -0.92],\n    boxSize: [0.1, 1.1],\n    scalarToColors: null,\n    axisTitlePixelOffset: 36.0,\n    axisTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 18,\n      fontFamily: 'serif'\n    },\n    tickLabelPixelOffset: 14.0,\n    tickTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 14,\n      fontFamily: 'serif'\n    },\n    generateTicks: null,\n    drawNanAnnotation: true,\n    drawBelowRangeSwatch: true,\n    drawAboveRangeSwatch: true,\n    ...initialValues\n  };\n}\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  if (!model.autoLayout) model.autoLayout = defaultAutoLayout(publicAPI, model);\n  if (!model.generateTicks) model.generateTicks = defaultGenerateTicks();\n\n  // Inheritance\n  vtkActor.extend(publicAPI, model, initialValues);\n  publicAPI.getProperty().setDiffuse(0.0);\n  publicAPI.getProperty().setAmbient(1.0);\n  macro.setGet(publicAPI, model, ['automated', 'autoLayout', 'axisTitlePixelOffset', 'axisLabel', 'scalarsToColors', 'tickLabelPixelOffset', 'generateTicks', 'drawNanAnnotation', 'drawBelowRangeSwatch', 'drawAboveRangeSwatch']);\n  macro.get(publicAPI, model, ['axisTextStyle', 'tickTextStyle']);\n  macro.getArray(publicAPI, model, ['barPosition', 'barSize', 'boxPosition', 'boxSize']);\n  macro.setArray(publicAPI, model, ['barPosition', 'barSize', 'boxPosition', 'boxSize'], 2);\n\n  // Object methods\n  vtkScalarBarActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkScalarBarActor');\n\n// ----------------------------------------------------------------------------\n\nvar vtkScalarBarActor$1 = {\n  newInstance,\n  extend,\n  newScalarBarActorHelper\n};\n\nexport { vtkScalarBarActor$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkTexture');\n  publicAPI.imageLoaded = () => {\n    model.image.removeEventListener('load', publicAPI.imageLoaded);\n    model.imageLoaded = true;\n    publicAPI.modified();\n  };\n  publicAPI.setJsImageData = imageData => {\n    if (model.jsImageData === imageData) {\n      return;\n    }\n\n    // clear other entries\n    if (imageData !== null) {\n      publicAPI.setInputData(null);\n      publicAPI.setInputConnection(null);\n      model.image = null;\n      model.canvas = null;\n    }\n    model.jsImageData = imageData;\n    model.imageLoaded = true;\n    publicAPI.modified();\n  };\n  publicAPI.setCanvas = canvas => {\n    if (model.canvas === canvas) {\n      return;\n    }\n\n    // clear other entries\n    if (canvas !== null) {\n      publicAPI.setInputData(null);\n      publicAPI.setInputConnection(null);\n      model.image = null;\n      model.jsImageData = null;\n    }\n    model.canvas = canvas;\n    publicAPI.modified();\n  };\n  publicAPI.setImage = image => {\n    if (model.image === image) {\n      return;\n    }\n\n    // clear other entries\n    if (image !== null) {\n      publicAPI.setInputData(null);\n      publicAPI.setInputConnection(null);\n      model.canvas = null;\n      model.jsImageData = null;\n    }\n    model.image = image;\n    model.imageLoaded = false;\n    if (image.complete) {\n      publicAPI.imageLoaded();\n    } else {\n      image.addEventListener('load', publicAPI.imageLoaded);\n    }\n    publicAPI.modified();\n  };\n  publicAPI.getDimensionality = () => {\n    let width = 0;\n    let height = 0;\n    let depth = 1;\n    if (publicAPI.getInputData()) {\n      const data = publicAPI.getInputData();\n      width = data.getDimensions()[0];\n      height = data.getDimensions()[1];\n      depth = data.getDimensions()[2];\n    }\n    if (model.jsImageData) {\n      width = model.jsImageData.width;\n      height = model.jsImageData.height;\n    }\n    if (model.canvas) {\n      width = model.canvas.width;\n      height = model.canvas.height;\n    }\n    if (model.image) {\n      width = model.image.width;\n      height = model.image.height;\n    }\n    const dimensionality = (width > 1) + (height > 1) + (depth > 1);\n    return dimensionality;\n  };\n  publicAPI.getInputAsJsImageData = () => {\n    if (!model.imageLoaded || publicAPI.getInputData()) return null;\n    if (model.jsImageData) {\n      return model.jsImageData();\n    }\n    if (model.canvas) {\n      const context = model.canvas.getContext('2d');\n      const imageData = context.getImageData(0, 0, model.canvas.width, model.canvas.height);\n      return imageData;\n    }\n    if (model.image) {\n      const canvas = document.createElement('canvas');\n      canvas.width = model.image.width;\n      canvas.height = model.image.height;\n      const context = canvas.getContext('2d');\n      context.translate(0, canvas.height);\n      context.scale(1, -1);\n      context.drawImage(model.image, 0, 0, model.image.width, model.image.height);\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n      return imageData;\n    }\n    return null;\n  };\n}\n\n// Use nativeArray instead of self\nconst generateMipmaps = (nativeArray, width, height, level) => {\n  // TODO: FIX UNEVEN TEXTURE MIP GENERATION:\n  // When textures don't have standard ratios, higher mip levels\n  // result in their color chanels getting messed up and shifting\n  // 3x3 gaussian kernel\n  const g3m = [1, 2, 1]; // eslint-disable-line\n  const g3w = 4; // eslint-disable-line\n\n  const kernel = g3m;\n  const kernelWeight = g3w;\n  const hs = nativeArray.length / (width * height); // TODO: support for textures with depth more than 1\n  let currentWidth = width;\n  let currentHeight = height;\n  let imageData = nativeArray;\n  const maps = [imageData];\n  for (let i = 0; i < level; i++) {\n    const oldData = [...imageData];\n    currentWidth /= 2;\n    currentHeight /= 2;\n    imageData = new Uint8ClampedArray(currentWidth * currentHeight * hs);\n    const vs = hs * currentWidth;\n\n    // Scale down\n    let shift = 0;\n    for (let p = 0; p < imageData.length; p += hs) {\n      if (p % vs === 0) {\n        shift += 2 * hs * currentWidth;\n      }\n      for (let c = 0; c < hs; c++) {\n        let sample = oldData[shift + c];\n        sample += oldData[shift + hs + c];\n        sample += oldData[shift - 2 * vs + c];\n        sample += oldData[shift - 2 * vs + hs + c];\n        sample /= 4;\n        imageData[p + c] = sample;\n      }\n      shift += 2 * hs;\n    }\n\n    // Horizontal Pass\n    let dataCopy = [...imageData];\n    for (let p = 0; p < imageData.length; p += hs) {\n      for (let c = 0; c < hs; c++) {\n        let x = -(kernel.length - 1) / 2;\n        let kw = kernelWeight;\n        let value = 0.0;\n        for (let k = 0; k < kernel.length; k++) {\n          let index = p + c + x * hs;\n          const lineShift = index % vs - (p + c) % vs;\n          if (lineShift > hs) index += vs;\n          if (lineShift < -hs) index -= vs;\n          if (dataCopy[index]) {\n            value += dataCopy[index] * kernel[k];\n          } else {\n            kw -= kernel[k];\n          }\n          x += 1;\n        }\n        imageData[p + c] = value / kw;\n      }\n    }\n    // Vertical Pass\n    dataCopy = [...imageData];\n    for (let p = 0; p < imageData.length; p += hs) {\n      for (let c = 0; c < hs; c++) {\n        let x = -(kernel.length - 1) / 2;\n        let kw = kernelWeight;\n        let value = 0.0;\n        for (let k = 0; k < kernel.length; k++) {\n          const index = p + c + x * vs;\n          if (dataCopy[index]) {\n            value += dataCopy[index] * kernel[k];\n          } else {\n            kw -= kernel[k];\n          }\n          x += 1;\n        }\n        imageData[p + c] = value / kw;\n      }\n    }\n    maps.push(imageData);\n  }\n  return maps;\n};\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  image: null,\n  canvas: null,\n  jsImageData: null,\n  imageLoaded: false,\n  repeat: false,\n  interpolate: false,\n  edgeClamp: false,\n  mipLevel: 0,\n  resizable: false // must be set at construction time if the texture can be resizable\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 6, 0);\n  macro.get(publicAPI, model, ['canvas', 'image', 'jsImageData', 'imageLoaded', 'resizable']);\n  macro.setGet(publicAPI, model, ['repeat', 'edgeClamp', 'interpolate', 'mipLevel']);\n  vtkTexture(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkTexture');\nconst STATIC = {\n  generateMipmaps\n};\n\n// ----------------------------------------------------------------------------\n\nvar vtkTexture$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkTexture$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkViewport::${method} - NOT IMPLEMENTED`);\n}\n\n// ----------------------------------------------------------------------------\n// vtkViewport methods\n// ----------------------------------------------------------------------------\n\nfunction vtkViewport(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkViewport');\n\n  // Public API methods\n  publicAPI.getViewProps = () => model.props;\n  publicAPI.hasViewProp = prop => model.props.includes(prop);\n  publicAPI.addViewProp = prop => {\n    if (prop && !publicAPI.hasViewProp(prop)) {\n      model.props.push(prop);\n    }\n  };\n  publicAPI.removeViewProp = prop => {\n    const newPropList = model.props.filter(item => item !== prop);\n    if (model.props.length !== newPropList.length) {\n      model.props = newPropList;\n    }\n  };\n  publicAPI.removeAllViewProps = () => {\n    model.props = [];\n  };\n\n  // this method get all the props including any nested props\n  function gatherProps(prop) {\n    let allProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    allProps.push(prop);\n    const children = prop.getNestedProps();\n    if (children && children.length) {\n      for (let i = 0; i < children.length; i++) {\n        gatherProps(children[i], allProps);\n      }\n    }\n    return allProps;\n  }\n  publicAPI.getViewPropsWithNestedProps = () => {\n    const allPropsArray = [];\n    for (let i = 0; i < model.props.length; i++) {\n      gatherProps(model.props[i], allPropsArray);\n    }\n    return allPropsArray;\n  };\n  publicAPI.addActor2D = publicAPI.addViewProp;\n  publicAPI.removeActor2D = prop => {\n    // VTK way: model.actors2D.RemoveItem(prop);\n    publicAPI.removeViewProp(prop);\n  };\n  publicAPI.getActors2D = () => {\n    model.actors2D = [];\n    model.props.forEach(prop => {\n      model.actors2D = model.actors2D.concat(prop.getActors2D());\n    });\n    return model.actors2D;\n  };\n  publicAPI.displayToView = () => vtkErrorMacro('call displayToView on your view instead');\n  publicAPI.viewToDisplay = () => vtkErrorMacro('callviewtodisplay on your view instead');\n  publicAPI.getSize = () => vtkErrorMacro('call getSize on your View instead');\n  publicAPI.normalizedDisplayToProjection = (x, y, z) => {\n    // first to normalized viewport\n    const nvp = publicAPI.normalizedDisplayToNormalizedViewport(x, y, z);\n\n    // then to view\n    return publicAPI.normalizedViewportToProjection(nvp[0], nvp[1], nvp[2]);\n  };\n  publicAPI.normalizedDisplayToNormalizedViewport = (x, y, z) => {\n    const scale = [model.viewport[2] - model.viewport[0], model.viewport[3] - model.viewport[1]];\n    return [(x - model.viewport[0]) / scale[0], (y - model.viewport[1]) / scale[1], z];\n  };\n  publicAPI.normalizedViewportToProjection = (x, y, z) => [x * 2.0 - 1.0, y * 2.0 - 1.0, z * 2.0 - 1.0];\n  publicAPI.projectionToNormalizedDisplay = (x, y, z) => {\n    // first to nvp\n    const nvp = publicAPI.projectionToNormalizedViewport(x, y, z);\n\n    // then to ndp\n    return publicAPI.normalizedViewportToNormalizedDisplay(nvp[0], nvp[1], nvp[2]);\n  };\n  publicAPI.normalizedViewportToNormalizedDisplay = (x, y, z) => {\n    const scale = [model.viewport[2] - model.viewport[0], model.viewport[3] - model.viewport[1]];\n    return [x * scale[0] + model.viewport[0], y * scale[1] + model.viewport[1], z];\n  };\n  publicAPI.projectionToNormalizedViewport = (x, y, z) => [(x + 1.0) * 0.5, (y + 1.0) * 0.5, (z + 1.0) * 0.5];\n  publicAPI.PickPropFrom = notImplemented('PickPropFrom');\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // _vtkWindow: null,\n  background: [0, 0, 0],\n  background2: [0.2, 0.2, 0.2],\n  gradientBackground: false,\n  viewport: [0, 0, 1, 1],\n  aspect: [1, 1],\n  pixelAspect: [1, 1],\n  props: [],\n  actors2D: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.event(publicAPI, model, 'event');\n  macro.setGetArray(publicAPI, model, ['viewport'], 4);\n  macro.setGetArray(publicAPI, model, ['background', 'background2'], 3);\n  vtkViewport(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkViewport');\n\n// ----------------------------------------------------------------------------\n\nvar vtkViewport$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkViewport$1 as default, extend, newInstance };\n","import { mat4, vec3 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkProp3D from './Prop3D.js';\nimport vtkVolumeProperty from './VolumeProperty.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkVolume methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolume(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolume');\n  publicAPI.getVolumes = () => publicAPI;\n  publicAPI.makeProperty = vtkVolumeProperty.newInstance;\n  publicAPI.getProperty = () => {\n    if (model.property === null) {\n      model.property = publicAPI.makeProperty();\n    }\n    return model.property;\n  };\n  publicAPI.getBounds = () => {\n    if (model.mapper === null) {\n      return model.bounds;\n    }\n\n    // Check for the special case when the mapper's bounds are unknown\n    const bds = model.mapper.getBounds();\n    if (!bds || bds.length !== 6) {\n      return bds;\n    }\n\n    // Check for the special case when the actor is empty.\n    if (bds[0] > bds[1]) {\n      model.mapperBounds = bds.concat(); // copy the mapper's bounds\n      model.bounds = [1, -1, 1, -1, 1, -1];\n      model.boundsMTime.modified();\n      return bds;\n    }\n\n    // Check if we have cached values for these bounds - we cache the\n    // values returned by model.mapper.getBounds() and we store the time\n    // of caching. If the values returned this time are different, or\n    // the modified time of this class is newer than the cached time,\n    // then we need to rebuild.\n    const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n    if (!model.mapperBounds || !zip([bds, model.mapperBounds]).reduce((a, b) => a && b[0] === b[1], true) || publicAPI.getMTime() > model.boundsMTime.getMTime()) {\n      vtkDebugMacro('Recomputing bounds...');\n      model.mapperBounds = bds.map(x => x);\n      const bbox = [];\n      vtkBoundingBox.getCorners(bds, bbox);\n      publicAPI.computeMatrix();\n      const tmp4 = new Float64Array(16);\n      mat4.transpose(tmp4, model.matrix);\n      bbox.forEach(pt => vec3.transformMat4(pt, pt, tmp4));\n\n      /* eslint-disable no-multi-assign */\n      model.bounds[0] = model.bounds[2] = model.bounds[4] = Number.MAX_VALUE;\n      model.bounds[1] = model.bounds[3] = model.bounds[5] = -Number.MAX_VALUE;\n      /* eslint-enable no-multi-assign */\n      model.bounds = model.bounds.map((d, i) => i % 2 === 0 ? bbox.reduce((a, b) => a > b[i / 2] ? b[i / 2] : a, d) : bbox.reduce((a, b) => a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a, d));\n      model.boundsMTime.modified();\n    }\n    return model.bounds;\n  };\n  publicAPI.getMTime = () => {\n    let mt = model.mtime;\n    if (model.property !== null) {\n      const time = model.property.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.getRedrawMTime = () => {\n    let mt = model.mtime;\n    if (model.mapper !== null) {\n      let time = model.mapper.getMTime();\n      mt = time > mt ? time : mt;\n      if (model.mapper.getInput() !== null) {\n        // FIXME !!! getInputAlgorithm / getInput\n        model.mapper.getInputAlgorithm().update();\n        time = model.mapper.getInput().getMTime();\n        mt = time > mt ? time : mt;\n      }\n    }\n    return mt;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  mapper: null,\n  property: null,\n  bounds: [1, -1, 1, -1, 1, -1]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkProp3D.extend(publicAPI, model, initialValues);\n\n  // vtkTimeStamp\n  model.boundsMTime = {};\n  macro.obj(model.boundsMTime);\n\n  // Build VTK API\n  macro.set(publicAPI, model, ['property']);\n  macro.setGet(publicAPI, model, ['mapper']);\n  macro.getArray(publicAPI, model, ['bounds'], 6);\n\n  // Object methods\n  vtkVolume(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkVolume');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolume$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkVolume$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { H as createUninitializedBounds, E as clampValue, K as floor } from '../../Common/Core/Math/index.js';\nimport Constants from './VolumeMapper/Constants.js';\nimport vtkAbstractMapper3D from './AbstractMapper3D.js';\nimport vtkPiecewiseFunction from '../../Common/DataModel/PiecewiseFunction.js';\n\nconst {\n  BlendMode,\n  FilterMode\n} = Constants;\nfunction createRadonTransferFunction(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption, maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption, outputTransferFunction) {\n  let ofun = null;\n  if (outputTransferFunction) {\n    ofun = outputTransferFunction;\n    ofun.removeAllPoints();\n  } else {\n    ofun = vtkPiecewiseFunction.newInstance();\n  }\n  ofun.addPointLong(-1024, 0, 1, 1); // air (i.e. material with no absorption)\n  ofun.addPoint(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption);\n  ofun.addPoint(maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption);\n  return ofun;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  createRadonTransferFunction\n};\n\n// ----------------------------------------------------------------------------\n// vtkVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeMapper');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getBounds = () => {\n    const input = publicAPI.getInputData();\n    if (!input) {\n      model.bounds = createUninitializedBounds();\n    } else {\n      if (!model.static) {\n        publicAPI.update();\n      }\n      model.bounds = input.getBounds();\n    }\n    return model.bounds;\n  };\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n  publicAPI.setBlendModeToComposite = () => {\n    publicAPI.setBlendMode(BlendMode.COMPOSITE_BLEND);\n  };\n  publicAPI.setBlendModeToMaximumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MAXIMUM_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToMinimumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MINIMUM_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToAverageIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.AVERAGE_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToAdditiveIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.ADDITIVE_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToRadonTransform = () => {\n    publicAPI.setBlendMode(BlendMode.RADON_TRANSFORM_BLEND);\n  };\n  publicAPI.getBlendModeAsString = () => macro.enumToString(BlendMode, model.blendMode);\n  publicAPI.setAverageIPScalarRange = (min, max) => {\n    console.warn('setAverageIPScalarRange is deprecated use setIpScalarRange');\n    publicAPI.setIpScalarRange(min, max);\n  };\n  publicAPI.getFilterModeAsString = () => macro.enumToString(FilterMode, model.filterMode);\n  publicAPI.setFilterModeToOff = () => {\n    publicAPI.setFilterMode(FilterMode.OFF);\n  };\n  publicAPI.setFilterModeToNormalized = () => {\n    publicAPI.setFilterMode(FilterMode.NORMALIZED);\n  };\n  publicAPI.setFilterModeToRaw = () => {\n    publicAPI.setFilterMode(FilterMode.RAW);\n  };\n  publicAPI.setGlobalIlluminationReach = gl => superClass.setGlobalIlluminationReach(clampValue(gl, 0.0, 1.0));\n  publicAPI.setVolumetricScatteringBlending = vsb => superClass.setVolumetricScatteringBlending(clampValue(vsb, 0.0, 1.0));\n  publicAPI.setVolumeShadowSamplingDistFactor = vsdf => superClass.setVolumeShadowSamplingDistFactor(vsdf >= 1.0 ? vsdf : 1.0);\n  publicAPI.setAnisotropy = at => superClass.setAnisotropy(clampValue(at, -0.99, 0.99));\n  publicAPI.setLAOKernelSize = ks => superClass.setLAOKernelSize(floor(clampValue(ks, 1, 32)));\n  publicAPI.setLAOKernelRadius = kr => superClass.setLAOKernelRadius(kr >= 1 ? kr : 1);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n// TODO: what values to use for averageIPScalarRange to get GLSL to use max / min values like [-Math.inf, Math.inf]?\nconst defaultValues = initialValues => ({\n  bounds: [1, -1, 1, -1, 1, -1],\n  sampleDistance: 1.0,\n  imageSampleDistance: 1.0,\n  maximumSamplesPerRay: 1000,\n  autoAdjustSampleDistances: true,\n  initialInteractionScale: 1.0,\n  interactionSampleDistanceFactor: 1.0,\n  blendMode: BlendMode.COMPOSITE_BLEND,\n  ipScalarRange: [-1000000.0, 1000000.0],\n  filterMode: FilterMode.OFF,\n  // ignored by WebGL so no behavior change\n  preferSizeOverAccuracy: false,\n  // Whether to use halfFloat representation of float, when it is inaccurate\n  computeNormalFromOpacity: false,\n  // volume shadow parameters\n  volumetricScatteringBlending: 0.0,\n  globalIlluminationReach: 0.0,\n  volumeShadowSamplingDistFactor: 5.0,\n  anisotropy: 0.0,\n  // local ambient occlusion\n  localAmbientOcclusion: false,\n  LAOKernelSize: 15,\n  LAOKernelRadius: 7,\n  updatedExtents: [],\n  ...initialValues\n});\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  vtkAbstractMapper3D.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['sampleDistance', 'imageSampleDistance', 'maximumSamplesPerRay', 'autoAdjustSampleDistances', 'initialInteractionScale', 'interactionSampleDistanceFactor', 'blendMode', 'filterMode', 'preferSizeOverAccuracy', 'computeNormalFromOpacity', 'volumetricScatteringBlending', 'globalIlluminationReach', 'volumeShadowSamplingDistFactor', 'anisotropy', 'localAmbientOcclusion', 'LAOKernelSize', 'LAOKernelRadius', 'updatedExtents']);\n  macro.setGetArray(publicAPI, model, ['ipScalarRange'], 2);\n  macro.event(publicAPI, model, 'lightingActivated');\n\n  // Object methods\n  vtkVolumeMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkVolumeMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolumeMapper$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkVolumeMapper$1 as default, extend, newInstance };\n","const BlendMode = {\n  COMPOSITE_BLEND: 0,\n  MAXIMUM_INTENSITY_BLEND: 1,\n  MINIMUM_INTENSITY_BLEND: 2,\n  AVERAGE_INTENSITY_BLEND: 3,\n  ADDITIVE_INTENSITY_BLEND: 4,\n  RADON_TRANSFORM_BLEND: 5,\n  LABELMAP_EDGE_PROJECTION_BLEND: 6\n};\nconst FilterMode = {\n  OFF: 0,\n  NORMALIZED: 1,\n  RAW: 2\n};\nvar Constants = {\n  BlendMode,\n  FilterMode\n};\n\nexport { BlendMode, FilterMode, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport vtkColorTransferFunction from './ColorTransferFunction.js';\nimport vtkPiecewiseFunction from '../../Common/DataModel/PiecewiseFunction.js';\nimport Constants from './VolumeProperty/Constants.js';\n\nconst {\n  InterpolationType,\n  OpacityMode\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\nconst VTK_MAX_VRCOMP = 4;\n\n// ----------------------------------------------------------------------------\n// vtkVolumeProperty methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeProperty(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeProperty');\n  publicAPI.getMTime = () => {\n    let mTime = model.mtime;\n    let time;\n    for (let index = 0; index < VTK_MAX_VRCOMP; index++) {\n      // Color MTimes\n      if (model.componentData[index].colorChannels === 1) {\n        if (model.componentData[index].grayTransferFunction) {\n          // time that Gray transfer function was last modified\n          time = model.componentData[index].grayTransferFunction.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      } else if (model.componentData[index].colorChannels === 3) {\n        if (model.componentData[index].rGBTransferFunction) {\n          // time that RGB transfer function was last modified\n          time = model.componentData[index].rGBTransferFunction.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      }\n\n      // Opacity MTimes\n      if (model.componentData[index].scalarOpacity) {\n        // time that Scalar opacity transfer function was last modified\n        time = model.componentData[index].scalarOpacity.getMTime();\n        mTime = mTime > time ? mTime : time;\n      }\n      if (model.componentData[index].gradientOpacity) {\n        if (!model.componentData[index].disableGradientOpacity) {\n          // time that Gradient opacity transfer function was last modified\n          time = model.componentData[index].gradientOpacity.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      }\n    }\n    return mTime;\n  };\n  publicAPI.getColorChannels = index => {\n    if (index < 0 || index > 3) {\n      vtkErrorMacro('Bad index - must be between 0 and 3');\n      return 0;\n    }\n    return model.componentData[index].colorChannels;\n  };\n\n  // Set the color of a volume to a gray transfer function\n  publicAPI.setGrayTransferFunction = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let modified = false;\n    if (model.componentData[index].grayTransferFunction !== func) {\n      model.componentData[index].grayTransferFunction = func;\n      modified = true;\n    }\n    if (model.componentData[index].colorChannels !== 1) {\n      model.componentData[index].colorChannels = 1;\n      modified = true;\n    }\n    if (modified) {\n      publicAPI.modified();\n    }\n    return modified;\n  };\n\n  // Get the currently set gray transfer function. Create one if none set.\n  publicAPI.getGrayTransferFunction = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.componentData[index].grayTransferFunction === null) {\n      model.componentData[index].grayTransferFunction = vtkPiecewiseFunction.newInstance();\n      model.componentData[index].grayTransferFunction.addPoint(0, 0.0);\n      model.componentData[index].grayTransferFunction.addPoint(1024, 1.0);\n      if (model.componentData[index].colorChannels !== 1) {\n        model.componentData[index].colorChannels = 1;\n      }\n      publicAPI.modified();\n    }\n    return model.componentData[index].grayTransferFunction;\n  };\n\n  // Set the color of a volume to an RGB transfer function\n  publicAPI.setRGBTransferFunction = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let modified = false;\n    if (model.componentData[index].rGBTransferFunction !== func) {\n      model.componentData[index].rGBTransferFunction = func;\n      modified = true;\n    }\n    if (model.componentData[index].colorChannels !== 3) {\n      model.componentData[index].colorChannels = 3;\n      modified = true;\n    }\n    if (modified) {\n      publicAPI.modified();\n    }\n    return modified;\n  };\n\n  // Get the currently set RGB transfer function. Create one if none set.\n  publicAPI.getRGBTransferFunction = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.componentData[index].rGBTransferFunction === null) {\n      model.componentData[index].rGBTransferFunction = vtkColorTransferFunction.newInstance();\n      model.componentData[index].rGBTransferFunction.addRGBPoint(0, 0.0, 0.0, 0.0);\n      model.componentData[index].rGBTransferFunction.addRGBPoint(1024, 1.0, 1.0, 1.0);\n      if (model.componentData[index].colorChannels !== 3) {\n        model.componentData[index].colorChannels = 3;\n      }\n      publicAPI.modified();\n    }\n    return model.componentData[index].rGBTransferFunction;\n  };\n\n  // Set the scalar opacity of a volume to a transfer function\n  publicAPI.setScalarOpacity = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (model.componentData[index].scalarOpacity !== func) {\n      model.componentData[index].scalarOpacity = func;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n\n  // Get the scalar opacity transfer function. Create one if none set.\n  publicAPI.getScalarOpacity = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.componentData[index].scalarOpacity === null) {\n      model.componentData[index].scalarOpacity = vtkPiecewiseFunction.newInstance();\n      model.componentData[index].scalarOpacity.addPoint(0, 1.0);\n      model.componentData[index].scalarOpacity.addPoint(1024, 1.0);\n      publicAPI.modified();\n    }\n    return model.componentData[index].scalarOpacity;\n  };\n  publicAPI.setComponentWeight = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return false;\n    }\n    const val = Math.min(1, Math.max(0, value));\n    if (model.componentData[index].componentWeight !== val) {\n      model.componentData[index].componentWeight = val;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getComponentWeight = function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return 0.0;\n    }\n    return model.componentData[index].componentWeight;\n  };\n  publicAPI.setInterpolationTypeToNearest = () => publicAPI.setInterpolationType(InterpolationType.NEAREST);\n  publicAPI.setInterpolationTypeToLinear = () => publicAPI.setInterpolationType(InterpolationType.LINEAR);\n  publicAPI.setInterpolationTypeToFastLinear = () => publicAPI.setInterpolationType(InterpolationType.FAST_LINEAR);\n  publicAPI.getInterpolationTypeAsString = () => macro.enumToString(InterpolationType, model.interpolationType);\n  const sets = ['useGradientOpacity', 'scalarOpacityUnitDistance', 'gradientOpacityMinimumValue', 'gradientOpacityMinimumOpacity', 'gradientOpacityMaximumValue', 'gradientOpacityMaximumOpacity', 'opacityMode', 'forceNearestInterpolation'];\n  sets.forEach(val => {\n    const cap = macro.capitalize(val);\n    publicAPI[`set${cap}`] = (index, value) => {\n      if (model.componentData[index][`${val}`] !== value) {\n        model.componentData[index][`${val}`] = value;\n        publicAPI.modified();\n        return true;\n      }\n      return false;\n    };\n  });\n  const gets = ['useGradientOpacity', 'scalarOpacityUnitDistance', 'gradientOpacityMinimumValue', 'gradientOpacityMinimumOpacity', 'gradientOpacityMaximumValue', 'gradientOpacityMaximumOpacity', 'opacityMode', 'forceNearestInterpolation'];\n  gets.forEach(val => {\n    const cap = macro.capitalize(val);\n    publicAPI[`get${cap}`] = index => model.componentData[index][`${val}`];\n  });\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorMixPreset: null,\n  independentComponents: true,\n  interpolationType: InterpolationType.FAST_LINEAR,\n  shade: false,\n  ambient: 0.1,\n  diffuse: 0.7,\n  specular: 0.2,\n  specularPower: 10.0,\n  useLabelOutline: false,\n  labelOutlineThickness: [1],\n  labelOutlineOpacity: 1.0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  if (!model.componentData) {\n    model.componentData = [];\n    for (let i = 0; i < VTK_MAX_VRCOMP; ++i) {\n      model.componentData.push({\n        colorChannels: 1,\n        grayTransferFunction: null,\n        rGBTransferFunction: null,\n        scalarOpacity: null,\n        scalarOpacityUnitDistance: 1.0,\n        opacityMode: OpacityMode.FRACTIONAL,\n        gradientOpacityMinimumValue: 0,\n        gradientOpacityMinimumOpacity: 0.0,\n        gradientOpacityMaximumValue: 1.0,\n        gradientOpacityMaximumOpacity: 1.0,\n        useGradientOpacity: false,\n        componentWeight: 1.0,\n        forceNearestInterpolation: false\n      });\n    }\n  }\n  macro.setGet(publicAPI, model, ['colorMixPreset', 'independentComponents', 'interpolationType', 'shade', 'ambient', 'diffuse', 'specular', 'specularPower', 'useLabelOutline', 'labelOutlineOpacity']);\n  macro.setGetArray(publicAPI, model, ['labelOutlineThickness']);\n\n  // Object methods\n  vtkVolumeProperty(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkVolumeProperty');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolumeProperty$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkVolumeProperty$1 as default, extend, newInstance };\n","const InterpolationType = {\n  NEAREST: 0,\n  LINEAR: 1,\n  FAST_LINEAR: 2\n};\nconst OpacityMode = {\n  FRACTIONAL: 0,\n  PROPORTIONAL: 1\n};\nconst ColorMixPreset = {\n  CUSTOM: 0,\n  ADDITIVE: 1,\n  COLORIZE: 2\n};\nvar Constants = {\n  InterpolationType,\n  OpacityMode,\n  ColorMixPreset\n};\n\nexport { ColorMixPreset, InterpolationType, OpacityMode, Constants as default };\n","import { mat3, mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet, g as get } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n\n      // we store textures and mapper\n      model.ogltextures = null;\n      model.activeTextures = null;\n      for (let index = 0; index < model.children.length; index++) {\n        const child = model.children[index];\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n\n  // render both opaque and translucent actors\n  publicAPI.traverseZBufferPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // only render opaque actors\n  publicAPI.traverseOpaqueZBufferPass = renderPass => publicAPI.traverseOpaquePass(renderPass);\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.activateTextures = () => {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n    model.activeTextures = [];\n    for (let index = 0; index < model.ogltextures.length; index++) {\n      const child = model.ogltextures[index];\n      child.render();\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.zBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(model._openGLRenderer.getSelector() && model.renderable.getNestedPickable());\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.keyMatrices.normalMatrix);\n      } else {\n        mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.mcwc);\n        mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat3.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      }\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null,\n  activeTextures: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: mat3.identity(new Float64Array(9)),\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']);\n\n  // Object methods\n  vtkOpenGLActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkActor = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkActor', newInstance);\n\nexport { vtkActor as default, extend, newInstance };\n","import { n as newInstance$1, e as setGet, g as get } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor2D');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model._openGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n\n      // we store textures and mapper\n      model.ogltextures = null;\n      model.activeTextures = null;\n      for (let index = 0; index < model.children.length; index++) {\n        const child = model.children[index];\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      renderPass.incrementOverlayActorCount();\n    }\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.traverseOverlayPass = renderPass => {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.activateTextures = () => {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n    model.activeTextures = [];\n    for (let index = 0; index < model.ogltextures.length; index++) {\n      const child = model.ogltextures[index];\n      child.render();\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.overlayPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  activeTextures: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']);\n\n  // Object methods\n  vtkOpenGLActor2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkActor2D = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkActor2D', newInstance);\n\nexport { vtkActor2D as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './BufferObject/Constants.js';\n\nconst {\n  ObjectType\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLBufferObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLBufferObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLBufferObject');\n\n  // Class-specific private functions\n  function convertType(type) {\n    switch (type) {\n      case ObjectType.ELEMENT_ARRAY_BUFFER:\n        return model.context.ELEMENT_ARRAY_BUFFER;\n      case ObjectType.TEXTURE_BUFFER:\n        if ('TEXTURE_BUFFER' in model.context) {\n          return model.context.TEXTURE_BUFFER;\n        }\n      /* eslint-disable no-fallthrough */\n      // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL\n      case ObjectType.ARRAY_BUFFER:\n      default:\n        return model.context.ARRAY_BUFFER;\n      /* eslint-enable no-fallthrough */\n    }\n  }\n\n  let internalType = null;\n  let internalHandle = null;\n  let dirty = true;\n  let error = '';\n\n  // Public API methods\n  publicAPI.getType = () => internalType;\n  publicAPI.setType = value => {\n    internalType = value;\n  };\n  publicAPI.getHandle = () => internalHandle;\n  publicAPI.isReady = () => dirty === false;\n  publicAPI.generateBuffer = type => {\n    const objectTypeGL = convertType(type);\n    if (internalHandle === null) {\n      internalHandle = model.context.createBuffer();\n      internalType = type;\n    }\n    return convertType(internalType) === objectTypeGL;\n  };\n  publicAPI.upload = (data, type) => {\n    // buffer, size, type\n    const alreadyGenerated = publicAPI.generateBuffer(type);\n    if (!alreadyGenerated) {\n      error = 'Trying to upload array buffer to incompatible buffer.';\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    model.context.bufferData(convertType(internalType), data, model.context.STATIC_DRAW);\n    model.allocatedGPUMemoryInBytes = data.length * data.BYTES_PER_ELEMENT;\n    dirty = false;\n    return true;\n  };\n  publicAPI.bind = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    return true;\n  };\n  publicAPI.release = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), null);\n    return true;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    if (internalHandle !== null) {\n      model.context.bindBuffer(convertType(internalType), null);\n      model.context.deleteBuffer(internalHandle);\n      internalHandle = null;\n      model.allocatedGPUMemoryInBytes = 0;\n    }\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n  publicAPI.getError = () => error;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  objectType: ObjectType.ARRAY_BUFFER,\n  // _openGLRenderWindow: null,\n  context: null,\n  allocatedGPUMemoryInBytes: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['_openGLRenderWindow', 'allocatedGPUMemoryInBytes']);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n  vtkOpenGLBufferObject(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkBufferObject = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\n\nexport { STATIC, vtkBufferObject as default, extend, newInstance };\n","const ObjectType = {\n  ARRAY_BUFFER: 0,\n  ELEMENT_ARRAY_BUFFER: 1,\n  TEXTURE_BUFFER: 2\n};\nvar Constants = {\n  ObjectType\n};\n\nexport { ObjectType, Constants as default };\n","import { mat4, mat3 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLCamera');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n\n  // Renders myself\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      const tsize = model._openGLRenderer.getTiledSizeAndOrigin();\n      model.context.viewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n      model.context.scissor(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n    }\n  };\n  publicAPI.translucentPass = publicAPI.opaquePass;\n  publicAPI.zBufferPass = publicAPI.opaquePass;\n  publicAPI.opaqueZBufferPass = publicAPI.opaquePass;\n  publicAPI.volumePass = publicAPI.opaquePass;\n  publicAPI.getKeyMatrices = ren => {\n    // has the camera changed?\n    if (ren !== model.lastRenderer || model._openGLRenderWindow.getMTime() > model.keyMatrixTime.getMTime() || publicAPI.getMTime() > model.keyMatrixTime.getMTime() || ren.getMTime() > model.keyMatrixTime.getMTime() || model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      mat4.copy(model.keyMatrices.wcvc, model.renderable.getViewMatrix());\n      mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.wcvc);\n      mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      mat4.transpose(model.keyMatrices.wcvc, model.keyMatrices.wcvc);\n      const aspectRatio = model._openGLRenderer.getAspectRatio();\n      mat4.copy(model.keyMatrices.vcpc, model.renderable.getProjectionMatrix(aspectRatio, -1, 1));\n      mat4.transpose(model.keyMatrices.vcpc, model.keyMatrices.vcpc);\n      mat4.multiply(model.keyMatrices.wcpc, model.keyMatrices.vcpc, model.keyMatrices.wcvc);\n      model.keyMatrixTime.modified();\n      model.lastRenderer = ren;\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  lastRenderer: null,\n  keyMatrixTime: null,\n  keyMatrices: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime);\n\n  // values always get set by the get method\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(9),\n    vcpc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    wcpc: new Float64Array(16)\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context', 'keyMatrixTime']);\n\n  // Object methods\n  vtkOpenGLCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkCamera = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkCamera', newInstance);\n\nexport { vtkCamera as default, extend, newInstance };\n","import { vec3, mat4, quat } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkBufferObject from './BufferObject.js';\nimport { ObjectType } from './BufferObject/Constants.js';\nimport { Representation } from '../Core/Property/Constants.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Static functions\n// ----------------------------------------------------------------------------\n\nfunction computeInverseShiftAndScaleMatrix(coordShift, coordScale) {\n  const inverseScale = new Float64Array(3);\n  vec3.inverse(inverseScale, coordScale);\n  const matrix = new Float64Array(16);\n  mat4.fromRotationTranslationScale(matrix, quat.create(), coordShift, inverseScale);\n  return matrix;\n}\nfunction shouldApplyCoordShiftAndScale(coordShift, coordScale) {\n  if (coordShift === null || coordScale === null) {\n    return false;\n  }\n  return !(vec3.exactEquals(coordShift, [0, 0, 0]) && vec3.exactEquals(coordScale, [1, 1, 1]));\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLCellArrayBufferObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCellArrayBufferObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLCellArrayBufferObject');\n  publicAPI.setType(ObjectType.ARRAY_BUFFER);\n  publicAPI.createVBO = function (cellArray, inRep, outRep, options) {\n    let selectionMaps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    if (!cellArray.getData() || !cellArray.getData().length) {\n      model.elementCount = 0;\n      return 0;\n    }\n\n    // Figure out how big each block will be, currently 6 or 7 floats.\n    model.blockSize = 3;\n    model.vertexOffset = 0;\n    model.normalOffset = 0;\n    model.tCoordOffset = 0;\n    model.tCoordComponents = 0;\n    model.colorComponents = 0;\n    model.colorOffset = 0;\n    model.customData = [];\n    const pointData = options.points.getData();\n    let normalData = null;\n    let tcoordData = null;\n    let colorData = null;\n    const colorComponents = options.colors ? options.colors.getNumberOfComponents() : 0;\n    const textureComponents = options.tcoords ? options.tcoords.getNumberOfComponents() : 0;\n\n    // the values of 4 below are because floats are 4 bytes\n\n    if (options.normals) {\n      model.normalOffset = 4 * model.blockSize;\n      model.blockSize += 3;\n      normalData = options.normals.getData();\n    }\n    if (options.customAttributes) {\n      options.customAttributes.forEach(a => {\n        if (a) {\n          model.customData.push({\n            data: a.getData(),\n            offset: 4 * model.blockSize,\n            components: a.getNumberOfComponents(),\n            name: a.getName()\n          });\n          model.blockSize += a.getNumberOfComponents();\n        }\n      });\n    }\n    if (options.tcoords) {\n      model.tCoordOffset = 4 * model.blockSize;\n      model.tCoordComponents = textureComponents;\n      model.blockSize += textureComponents;\n      tcoordData = options.tcoords.getData();\n    }\n    if (options.colors) {\n      model.colorComponents = options.colors.getNumberOfComponents();\n      model.colorOffset = 0;\n      colorData = options.colors.getData();\n      if (!model.colorBO) {\n        model.colorBO = vtkBufferObject.newInstance();\n      }\n      model.colorBO.setOpenGLRenderWindow(model._openGLRenderWindow);\n    } else {\n      model.colorBO = null;\n    }\n    model.stride = 4 * model.blockSize;\n    let pointIdx = 0;\n    let normalIdx = 0;\n    let tcoordIdx = 0;\n    let colorIdx = 0;\n    let custIdx = 0;\n    let cellCount = 0;\n    let addAPoint;\n    const cellBuilders = {\n      // easy, every input point becomes an output point\n      anythingToPoints(numPoints, cellPts, offset, cellId) {\n        for (let i = 0; i < numPoints; ++i) {\n          addAPoint(cellPts[offset + i], cellId);\n        }\n      },\n      linesToWireframe(numPoints, cellPts, offset, cellIdx) {\n        // for lines we add a bunch of segments\n        for (let i = 0; i < numPoints - 1; ++i) {\n          addAPoint(cellPts[offset + i], cellIdx);\n          addAPoint(cellPts[offset + i + 1], cellIdx);\n        }\n      },\n      polysToWireframe(numPoints, cellPts, offset, cellIdx) {\n        // for polys we add a bunch of segments and close it\n        if (numPoints > 2) {\n          for (let i = 0; i < numPoints; ++i) {\n            addAPoint(cellPts[offset + i], cellIdx);\n            addAPoint(cellPts[offset + (i + 1) % numPoints], cellIdx);\n          }\n        }\n      },\n      stripsToWireframe(numPoints, cellPts, offset, cellIdx) {\n        if (numPoints > 2) {\n          // for strips we add a bunch of segments and close it\n          for (let i = 0; i < numPoints - 1; ++i) {\n            addAPoint(cellPts[offset + i], cellIdx);\n            addAPoint(cellPts[offset + i + 1], cellIdx);\n          }\n          for (let i = 0; i < numPoints - 2; i++) {\n            addAPoint(cellPts[offset + i], cellIdx);\n            addAPoint(cellPts[offset + i + 2], cellIdx);\n          }\n        }\n      },\n      polysToSurface(npts, cellPts, offset, cellIdx) {\n        for (let i = 0; i < npts - 2; i++) {\n          addAPoint(cellPts[offset + 0], cellIdx);\n          addAPoint(cellPts[offset + i + 1], cellIdx);\n          addAPoint(cellPts[offset + i + 2], cellIdx);\n        }\n      },\n      stripsToSurface(npts, cellPts, offset, cellIdx) {\n        for (let i = 0; i < npts - 2; i++) {\n          addAPoint(cellPts[offset + i], cellIdx);\n          addAPoint(cellPts[offset + i + 1 + i % 2], cellIdx);\n          addAPoint(cellPts[offset + i + 1 + (i + 1) % 2], cellIdx);\n        }\n      }\n    };\n    const cellCounters = {\n      // easy, every input point becomes an output point\n      anythingToPoints(numPoints, cellPts) {\n        return numPoints;\n      },\n      linesToWireframe(numPoints, cellPts) {\n        if (numPoints > 1) {\n          return (numPoints - 1) * 2;\n        }\n        return 0;\n      },\n      polysToWireframe(numPoints, cellPts) {\n        if (numPoints > 2) {\n          return numPoints * 2;\n        }\n        return 0;\n      },\n      stripsToWireframe(numPoints, cellPts) {\n        if (numPoints > 2) {\n          return numPoints * 4 - 6;\n        }\n        return 0;\n      },\n      polysToSurface(npts, cellPts) {\n        if (npts > 2) {\n          return (npts - 2) * 3;\n        }\n        return 0;\n      },\n      stripsToSurface(npts, cellPts, offset) {\n        if (npts > 2) {\n          return (npts - 2) * 3;\n        }\n        return 0;\n      }\n    };\n    let func = null;\n    let countFunc = null;\n    if (outRep === Representation.POINTS || inRep === 'verts') {\n      func = cellBuilders.anythingToPoints;\n      countFunc = cellCounters.anythingToPoints;\n    } else if (outRep === Representation.WIREFRAME || inRep === 'lines') {\n      func = cellBuilders[`${inRep}ToWireframe`];\n      countFunc = cellCounters[`${inRep}ToWireframe`];\n    } else {\n      func = cellBuilders[`${inRep}ToSurface`];\n      countFunc = cellCounters[`${inRep}ToSurface`];\n    }\n    const array = cellArray.getData();\n    const size = array.length;\n    let caboCount = 0;\n    for (let index = 0; index < size;) {\n      caboCount += countFunc(array[index], array);\n      index += array[index] + 1;\n    }\n    let packedUCVBO = null;\n    const packedVBO = new Float32Array(caboCount * model.blockSize);\n    if (colorData) {\n      packedUCVBO = new Uint8Array(caboCount * 4);\n    }\n    let vboidx = 0;\n    let ucidx = 0;\n\n    // Find out if shift scale should be used\n    // Compute squares of diagonal size and distance from the origin\n    let diagSq = 0.0;\n    let distSq = 0.0;\n    for (let i = 0; i < 3; ++i) {\n      const range = options.points.getRange(i);\n      const delta = range[1] - range[0];\n      diagSq += delta * delta;\n      const distShift = 0.5 * (range[1] + range[0]);\n      distSq += distShift * distShift;\n    }\n    const useShiftAndScale = diagSq > 0 && (Math.abs(distSq) / diagSq > 1.0e6 ||\n    // If data is far from the origin relative to its size\n    Math.abs(Math.log10(diagSq)) > 3.0 ||\n    // If the size is huge when not far from the origin\n    diagSq === 0 && distSq > 1.0e6); // If data is a point, but far from the origin\n\n    if (useShiftAndScale) {\n      // Compute shift and scale vectors\n      const coordShift = new Float64Array(3);\n      const coordScale = new Float64Array(3);\n      for (let i = 0; i < 3; ++i) {\n        const range = options.points.getRange(i);\n        const delta = range[1] - range[0];\n        coordShift[i] = 0.5 * (range[1] + range[0]);\n        coordScale[i] = delta > 0 ? 1.0 / delta : 1.0;\n      }\n      publicAPI.setCoordShiftAndScale(coordShift, coordScale);\n    } else if (model.coordShiftAndScaleEnabled === true) {\n      // Make sure to reset\n      publicAPI.setCoordShiftAndScale(null, null);\n    }\n\n    // Initialize the structures used to keep track of point ids and cell ids for selectors\n    if (selectionMaps) {\n      if (!selectionMaps.points && !selectionMaps.cells) {\n        selectionMaps.points = new Int32Array(caboCount);\n        selectionMaps.cells = new Int32Array(caboCount);\n      } else {\n        const newPoints = new Int32Array(caboCount + selectionMaps.points.length);\n        newPoints.set(selectionMaps.points);\n        selectionMaps.points = newPoints;\n        const newCells = new Int32Array(caboCount + selectionMaps.cells.length);\n        newCells.set(selectionMaps.cells);\n        selectionMaps.cells = newCells;\n      }\n    }\n    let pointCount = options.vertexOffset;\n    addAPoint = function addAPointFunc(pointId, cellId) {\n      // Keep track of original point and cell ids, for selection\n      if (selectionMaps) {\n        selectionMaps.points[pointCount] = pointId;\n        selectionMaps.cells[pointCount] = cellCount + options.cellOffset;\n      }\n      ++pointCount;\n\n      // Vertices\n      pointIdx = pointId * 3;\n      if (!model.coordShiftAndScaleEnabled) {\n        packedVBO[vboidx++] = pointData[pointIdx++];\n        packedVBO[vboidx++] = pointData[pointIdx++];\n        packedVBO[vboidx++] = pointData[pointIdx++];\n      } else {\n        // Apply shift and scale\n        packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[0]) * model.coordScale[0];\n        packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[1]) * model.coordScale[1];\n        packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[2]) * model.coordScale[2];\n      }\n      if (normalData !== null) {\n        if (options.haveCellNormals) {\n          normalIdx = (cellCount + options.cellOffset) * 3;\n        } else {\n          normalIdx = pointId * 3;\n        }\n        packedVBO[vboidx++] = normalData[normalIdx++];\n        packedVBO[vboidx++] = normalData[normalIdx++];\n        packedVBO[vboidx++] = normalData[normalIdx++];\n      }\n      model.customData.forEach(attr => {\n        custIdx = pointId * attr.components;\n        for (let j = 0; j < attr.components; ++j) {\n          packedVBO[vboidx++] = attr.data[custIdx++];\n        }\n      });\n      if (tcoordData !== null) {\n        if (options.useTCoordsPerCell) {\n          tcoordIdx = cellId * textureComponents;\n        } else {\n          tcoordIdx = pointId * textureComponents;\n        }\n        for (let j = 0; j < textureComponents; ++j) {\n          packedVBO[vboidx++] = tcoordData[tcoordIdx++];\n        }\n      }\n      if (colorData !== null) {\n        if (options.haveCellScalars) {\n          colorIdx = (cellCount + options.cellOffset) * colorComponents;\n        } else {\n          colorIdx = pointId * colorComponents;\n        }\n        packedUCVBO[ucidx++] = colorData[colorIdx++];\n        packedUCVBO[ucidx++] = colorData[colorIdx++];\n        packedUCVBO[ucidx++] = colorData[colorIdx++];\n        packedUCVBO[ucidx++] = colorComponents === 4 ? colorData[colorIdx++] : 255;\n      }\n    };\n\n    // Browse the cell array: the index is at the beginning of a cell\n    // The value of 'array' at the position 'index' is the number of points in the cell\n    for (let index = 0; index < size; index += array[index] + 1, cellCount++) {\n      func(array[index], array, index + 1, cellCount + options.cellOffset);\n    }\n    model.elementCount = caboCount;\n    publicAPI.upload(packedVBO, ObjectType.ARRAY_BUFFER);\n    if (model.colorBO) {\n      model.colorBOStride = 4;\n      model.colorBO.upload(packedUCVBO, ObjectType.ARRAY_BUFFER);\n    }\n    return cellCount;\n  };\n  publicAPI.setCoordShiftAndScale = (coordShift, coordScale) => {\n    if (coordShift !== null && (coordShift.constructor !== Float64Array || coordShift.length !== 3)) {\n      vtkErrorMacro('Wrong type for coordShift, expected vec3 or null');\n      return;\n    }\n    if (coordScale !== null && (coordScale.constructor !== Float64Array || coordScale.length !== 3)) {\n      vtkErrorMacro('Wrong type for coordScale, expected vec3 or null');\n      return;\n    }\n    if (model.coordShift === null || coordShift === null || !vec3.equals(coordShift, model.coordShift)) {\n      model.coordShift = coordShift;\n    }\n    if (model.coordScale === null || coordScale === null || !vec3.equals(coordScale, model.coordScale)) {\n      model.coordScale = coordScale;\n    }\n    model.coordShiftAndScaleEnabled = shouldApplyCoordShiftAndScale(model.coordShift, model.coordScale);\n    if (model.coordShiftAndScaleEnabled) {\n      model.inverseShiftAndScaleMatrix = computeInverseShiftAndScaleMatrix(model.coordShift, model.coordScale);\n    } else {\n      model.inverseShiftAndScaleMatrix = null;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  elementCount: 0,\n  stride: 0,\n  colorBOStride: 0,\n  vertexOffset: 0,\n  normalOffset: 0,\n  tCoordOffset: 0,\n  tCoordComponents: 0,\n  colorOffset: 0,\n  colorComponents: 0,\n  tcoordBO: null,\n  customData: [],\n  coordShift: null,\n  coordScale: null,\n  coordShiftAndScaleEnabled: false,\n  inverseShiftAndScaleMatrix: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkBufferObject.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['colorBO', 'elementCount', 'stride', 'colorBOStride', 'vertexOffset', 'normalOffset', 'tCoordOffset', 'tCoordComponents', 'colorOffset', 'colorComponents', 'customData']);\n  macro.get(publicAPI, model, ['coordShift', 'coordScale', 'coordShiftAndScaleEnabled', 'inverseShiftAndScaleMatrix']);\n\n  // Object specific methods\n  vtkOpenGLCellArrayBufferObject(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkCellArrayBufferObject = {\n  newInstance,\n  extend\n};\n\nexport { vtkCellArrayBufferObject as default, extend, newInstance };\n","import { n as newInstance$1 } from '../../macros2.js';\nimport vtkCubeAxesActor from '../Core/CubeAxesActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLCubeAxesActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCubeAxesActor(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLCubeAxesActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      if (!model.CubeAxesActorHelper.getRenderable()) {\n        model.CubeAxesActorHelper.setRenderable(model.renderable);\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.CubeAxesActorHelper.getTmActor());\n      publicAPI.addMissingNode(model.renderable.getGridActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      const camera = model._openGLRenderer ? model._openGLRenderer.getRenderable().getActiveCamera() : null;\n      const tsize = model._openGLRenderer.getTiledSizeAndOrigin();\n      model.CubeAxesActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model._openGLRenderWindow.getRenderable());\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.CubeAxesActorHelper = vtkCubeAxesActor.newCubeAxesActorHelper();\n\n  // Object methods\n  vtkOpenGLCubeAxesActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLCubeAxesActor');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkCubeAxesActor', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkOpenGLOrderIndependentTranslucentPass from './OrderIndependentTranslucentPass.js';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = function (viewNode) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = parent;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    const numlayers = viewNode.getRenderable().getNumberOfLayers();\n\n    // iterate over renderers\n    const renderers = viewNode.getRenderable().getRenderersByReference();\n    for (let i = 0; i < numlayers; i++) {\n      for (let index = 0; index < renderers.length; index++) {\n        const ren = renderers[index];\n        const renNode = viewNode.getViewNodeFor(ren);\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumeCount = 0;\n          model.overlayActorCount = 0;\n          publicAPI.setCurrentOperation('queryPass');\n          renNode.traverse(publicAPI);\n\n          // do we need to capture a zbuffer?\n          if ((model.opaqueActorCount > 0 || model.translucentActorCount > 0) && model.volumeCount > 0 || model.depthRequested) {\n            const size = viewNode.getFramebufferSize();\n            // make sure the framebuffer is setup\n            if (model.framebuffer === null) {\n              model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n            }\n            model.framebuffer.setOpenGLRenderWindow(viewNode);\n            model.framebuffer.saveCurrentBindingsAndBuffers();\n            const fbSize = model.framebuffer.getSize();\n            if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n              model.framebuffer.create(size[0], size[1]);\n              model.framebuffer.populateFramebuffer();\n            }\n            model.framebuffer.bind();\n            // opaqueZBufferPass only renders opaque actors\n            // zBufferPass renders both translucent and opaque actors\n            // we want to be able to pick translucent actors\n            publicAPI.setCurrentOperation('zBufferPass');\n            renNode.traverse(publicAPI);\n            model.framebuffer.restorePreviousBindingsAndBuffers();\n\n            // reset now that we have done it\n            model.depthRequested = false;\n          }\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI);\n          if (model.opaqueActorCount > 0) {\n            publicAPI.setCurrentOperation('opaquePass');\n            renNode.traverse(publicAPI);\n          }\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass = vtkOpenGLOrderIndependentTranslucentPass.newInstance();\n            }\n            model.translucentPass.traverse(viewNode, renNode, publicAPI);\n          }\n          if (model.volumeCount > 0) {\n            publicAPI.setCurrentOperation('volumePass');\n            renNode.traverse(publicAPI);\n          }\n          if (model.overlayActorCount > 0) {\n            publicAPI.setCurrentOperation('overlayPass');\n            renNode.traverse(publicAPI);\n          }\n        }\n      }\n    }\n  };\n  publicAPI.getZBufferTexture = () => {\n    if (model.framebuffer) {\n      return model.framebuffer.getColorTexture();\n    }\n    return null;\n  };\n  publicAPI.requestDepth = () => {\n    model.depthRequested = true;\n  };\n  publicAPI.incrementOpaqueActorCount = () => model.opaqueActorCount++;\n  publicAPI.incrementTranslucentActorCount = () => model.translucentActorCount++;\n  publicAPI.incrementVolumeCount = () => model.volumeCount++;\n  publicAPI.incrementOverlayActorCount = () => model.overlayActorCount++;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumeCount: 0,\n  overlayActorCount: 0,\n  framebuffer: null,\n  depthRequested: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['framebuffer', 'opaqueActorCount', 'translucentActorCount', 'volumeCount']);\n\n  // Object methods\n  vtkForwardPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkForwardPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkForwardPass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkForwardPass$1 as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, r as vtkErrorMacro, k as getArray } from '../../macros2.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport { Filter } from './Texture/Constants.js';\n\n// ----------------------------------------------------------------------------\n// vtkFramebuffer methods\n// ----------------------------------------------------------------------------\nfunction vtkFramebuffer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkFramebuffer');\n  publicAPI.getBothMode = () => model.context.FRAMEBUFFER;\n  // publicAPI.getDrawMode = () => model.context.DRAW_FRAMEBUFFER;\n  // publicAPI.getReadMode = () => model.context.READ_FRAMEBUFFER;\n\n  publicAPI.saveCurrentBindingsAndBuffers = modeIn => {\n    const mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();\n    publicAPI.saveCurrentBindings(mode);\n    publicAPI.saveCurrentBuffers(mode);\n  };\n  publicAPI.saveCurrentBindings = modeIn => {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling saveCurrentBindings');\n      return;\n    }\n    const gl = model.context;\n    model.previousDrawBinding = gl.getParameter(model.context.FRAMEBUFFER_BINDING);\n    model.previousActiveFramebuffer = model._openGLRenderWindow.getActiveFramebuffer();\n  };\n  publicAPI.saveCurrentBuffers = modeIn => {\n    // noop on webgl 1\n  };\n  publicAPI.restorePreviousBindingsAndBuffers = modeIn => {\n    const mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();\n    publicAPI.restorePreviousBindings(mode);\n    publicAPI.restorePreviousBuffers(mode);\n  };\n  publicAPI.restorePreviousBindings = modeIn => {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling restorePreviousBindings');\n      return;\n    }\n    const gl = model.context;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, model.previousDrawBinding);\n    model._openGLRenderWindow.setActiveFramebuffer(model.previousActiveFramebuffer);\n  };\n  publicAPI.restorePreviousBuffers = modeIn => {\n    // currently a noop on webgl1\n  };\n  publicAPI.bind = function () {\n    let modeArg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let mode = modeArg;\n    if (mode === null) {\n      mode = model.context.FRAMEBUFFER;\n    }\n    model.context.bindFramebuffer(mode, model.glFramebuffer);\n    for (let i = 0; i < model.colorBuffers.length; i++) {\n      model.colorBuffers[i].bind();\n    }\n    model._openGLRenderWindow.setActiveFramebuffer(publicAPI);\n  };\n  publicAPI.create = (width, height) => {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling create');\n      return;\n    }\n    model.glFramebuffer = model.context.createFramebuffer();\n    model.glFramebuffer.width = width;\n    model.glFramebuffer.height = height;\n  };\n  publicAPI.setColorBuffer = function (texture) {\n    let attachment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const gl = model.context;\n    if (!gl) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling setColorBuffer');\n      return;\n    }\n    let glAttachment = gl.COLOR_ATTACHMENT0;\n    if (attachment > 0) {\n      if (model._openGLRenderWindow.getWebgl2()) {\n        glAttachment += attachment;\n      } else {\n        vtkErrorMacro('Using multiple framebuffer attachments requires WebGL 2');\n        return;\n      }\n    }\n    model.colorBuffers[attachment] = texture;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, texture.getHandle(), 0);\n  };\n  publicAPI.removeColorBuffer = function () {\n    let attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const gl = model.context;\n    if (!gl) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling removeColorBuffer');\n      return;\n    }\n    let glAttachment = gl.COLOR_ATTACHMENT0;\n    if (attachment > 0) {\n      if (model._openGLRenderWindow.getWebgl2()) {\n        glAttachment += attachment;\n      } else {\n        vtkErrorMacro('Using multiple framebuffer attachments requires WebGL 2');\n        return;\n      }\n    }\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, null, 0);\n    model.colorBuffers = model.colorBuffers.splice(attachment, 1);\n  };\n  publicAPI.setDepthBuffer = texture => {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling setDepthBuffer');\n      return;\n    }\n    if (model._openGLRenderWindow.getWebgl2()) {\n      const gl = model.context;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getHandle(), 0);\n    } else {\n      vtkErrorMacro('Attaching depth buffer textures to fbo requires WebGL 2');\n    }\n  };\n  publicAPI.removeDepthBuffer = () => {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling removeDepthBuffer');\n      return;\n    }\n    if (model._openGLRenderWindow.getWebgl2()) {\n      const gl = model.context;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);\n    } else {\n      vtkErrorMacro('Attaching depth buffer textures to framebuffers requires WebGL 2');\n    }\n  };\n  publicAPI.getGLFramebuffer = () => model.glFramebuffer;\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.glFramebuffer) {\n      model.context.deleteFramebuffer(model.glFramebuffer);\n    }\n  };\n  publicAPI.getSize = () => {\n    if (model.glFramebuffer == null) return null;\n    return [model.glFramebuffer.width, model.glFramebuffer.height];\n  };\n  publicAPI.populateFramebuffer = () => {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling populateFrameBuffer');\n      return;\n    }\n    publicAPI.bind();\n    const gl = model.context;\n    const texture = vtkOpenGLTexture.newInstance();\n    texture.setOpenGLRenderWindow(model._openGLRenderWindow);\n    texture.setMinificationFilter(Filter.LINEAR);\n    texture.setMagnificationFilter(Filter.LINEAR);\n    texture.create2DFromRaw(model.glFramebuffer.width, model.glFramebuffer.height, 4, VtkDataTypes.UNSIGNED_CHAR, null);\n    publicAPI.setColorBuffer(texture);\n\n    // for now do not count on having a depth buffer texture\n    // as they are not standard webgl 1\n    model.depthTexture = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, model.depthTexture);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, model.glFramebuffer.width, model.glFramebuffer.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, model.depthTexture);\n  };\n\n  // For backwards compatibility. Use getColorBuffers()[0] going forward.\n  publicAPI.getColorTexture = () => model.colorBuffers[0];\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  // _openGLRenderWindow: null,\n  glFramebuffer: null,\n  colorBuffers: null,\n  depthTexture: null,\n  previousDrawBinding: 0,\n  previousReadBinding: 0,\n  previousDrawBuffer: 0,\n  previousReadBuffer: 0,\n  previousActiveFramebuffer: null\n};\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  obj(publicAPI, model);\n  if (model.colorBuffers) {\n    vtkErrorMacro('you cannot initialize colorBuffers through the constructor. You should call setColorBuffer() instead.');\n  }\n  model.colorBuffers = [];\n  getArray(publicAPI, model, ['colorBuffers']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n  vtkFramebuffer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nconst newInstance = newInstance$1(extend, 'vtkFramebuffer');\n\n// ----------------------------------------------------------------------------\nvar vtkOpenGLFramebuffer = {\n  newInstance,\n  extend\n};\n\nexport { vtkOpenGLFramebuffer as default, extend, newInstance };\n","import { mat3, mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, c as macro } from '../../macros2.js';\nimport vtkBufferObject from './BufferObject.js';\nimport vtkHardwareSelector from './HardwareSelector.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkOpenGLPolyDataMapper from './PolyDataMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  ObjectType\n} = vtkBufferObject;\nconst {\n  PassTypes\n} = vtkHardwareSelector;\nconst StartEvent = {\n  type: 'StartEvent'\n};\nconst EndEvent = {\n  type: 'EndEvent'\n};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLSphereMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLGlyph3DMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLGlyph3DMapper');\n\n  // Capture 'parentClass' api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData(1);\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n\n    // if there are no points then we are done\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n\n    // apply faceCulling\n    const gl = model.context;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.hardwareSupport = true;\n      model.extension = null;\n    } else if (!model.extension) {\n      model.extension = model.context.getExtension('ANGLE_instanced_arrays');\n      model.hardwareSupport = !!model.extension;\n    }\n    // to test without extension support uncomment the next two lines\n    // model.extension = null;\n    // model.hardwareSupport = !!model.extension;\n\n    const backfaceCulling = actor.getProperty().getBackfaceCulling();\n    const frontfaceCulling = actor.getProperty().getFrontfaceCulling();\n    if (!backfaceCulling && !frontfaceCulling) {\n      model._openGLRenderWindow.disableCullFace();\n    } else if (frontfaceCulling) {\n      model._openGLRenderWindow.enableCullFace();\n      gl.cullFace(gl.FRONT);\n    } else {\n      model._openGLRenderWindow.enableCullFace();\n      gl.cullFace(gl.BACK);\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.multiply4x4WithOffset = (out, a, b, off) => {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[off];\n    let b1 = b[off + 1];\n    let b2 = b[off + 2];\n    let b3 = b[off + 3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 4];\n    b1 = b[off + 5];\n    b2 = b[off + 6];\n    b3 = b[off + 7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 8];\n    b1 = b[off + 9];\n    b2 = b[off + 10];\n    b3 = b[off + 11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 12];\n    b1 = b[off + 13];\n    b2 = b[off + 14];\n    b3 = b[off + 15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  };\n  publicAPI.replaceShaderNormal = (shaders, ren, actor) => {\n    if (model.hardwareSupport) {\n      const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n      if (lastLightComplexity > 0) {\n        let VSSource = shaders.Vertex;\n        if (model.lastBoundBO.getCABO().getNormalOffset()) {\n          VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'attribute mat3 gNormal;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;\n          VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * gNormal * normalMC;']).result;\n        }\n        shaders.Vertex = VSSource;\n      }\n    }\n    superClass.replaceShaderNormal(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderColor = (shaders, ren, actor) => {\n    if (model.hardwareSupport && model.renderable.getColorArray()) {\n      let VSSource = shaders.Vertex;\n      let GSSource = shaders.Geometry;\n      let FSSource = shaders.Fragment;\n      const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n      // create the material/color property declarations, and VS implementation\n      // these are always defined\n      let colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity'];\n      // add more for specular\n      if (lastLightComplexity) {\n        colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);\n      }\n\n      // now handle the more complex fragment shader implementation\n      // the following are always defined variables.  We start\n      // by assigning a default value from the uniform\n      let colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];\n      if (lastLightComplexity) {\n        colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);\n      }\n      colorImpl = colorImpl.concat(['  opacity = opacityUniform;']);\n      if (lastLightComplexity) {\n        colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);\n      }\n      if (!model.drawingEdges) {\n        colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 gColor;', 'varying vec4 vertexColorVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput = gColor;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;\n        colorImpl = colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;']);\n      }\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', colorDec).result;\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n    superClass.replaceShaderColor(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    if (model.hardwareSupport) {\n      let VSSource = shaders.Vertex;\n\n      // do we need the vertex in the shader in View Coordinates\n      const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n      if (lastLightComplexity > 0) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vec4 gVertexMC = gMatrix * vertexMC;', 'vertexVCVSOutput = MCVCMatrix * gVertexMC;', '  gl_Position = MCPCMatrix * gVertexMC;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['attribute mat4 gMatrix;', 'uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;\n      } else {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['attribute mat4 gMatrix;', 'uniform mat4 MCPCMatrix;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vec4 gVertexMC = gMatrix * vertexMC;', '  gl_Position = MCPCMatrix * gVertexMC;']).result;\n      }\n      shaders.Vertex = VSSource;\n    }\n    superClass.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderPicking = (shaders, ren, actor) => {\n    if (model.hardwareSupport) {\n      let FSSource = shaders.Fragment;\n      let VSSource = shaders.Vertex;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Dec', ['attribute vec3 mapperIndexVS;', 'varying vec3 mapperIndexVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Impl', '  mapperIndexVSOutput = mapperIndexVS;').result;\n      shaders.Vertex = VSSource;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['varying vec3 mapperIndexVSOutput;', 'uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', ['  vec4 pickColor = picking == 2 ? vec4(mapperIndexVSOutput,1.0) : vec4(mapperIndex,1.0);', '  gl_FragData[0] = picking != 0 ? pickColor : gl_FragData[0];']).result;\n      shaders.Fragment = FSSource;\n    } else {\n      superClass.replaceShaderPicking(shaders, ren, actor);\n    }\n  };\n  publicAPI.updateGlyphShaderParameters = (normalMatrixUsed, mcvcMatrixUsed, cellBO, carray, garray, narray, p, selector) => {\n    const program = cellBO.getProgram();\n    if (normalMatrixUsed) {\n      const a = model.normalMatrix;\n      const b = narray;\n      const ofs = p * 9;\n      const out = model.tmpMat3;\n      const a00 = a[0];\n      const a01 = a[1];\n      const a02 = a[2];\n      const a10 = a[3];\n      const a11 = a[4];\n      const a12 = a[5];\n      const a20 = a[6];\n      const a21 = a[7];\n      const a22 = a[8];\n      const b00 = b[ofs];\n      const b01 = b[ofs + 1];\n      const b02 = b[ofs + 2];\n      const b10 = b[ofs + 3];\n      const b11 = b[ofs + 4];\n      const b12 = b[ofs + 5];\n      const b20 = b[ofs + 6];\n      const b21 = b[ofs + 7];\n      const b22 = b[ofs + 8];\n      out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n      out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n      out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n      out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n      out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n      out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n      out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n      out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n      out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n      program.setUniformMatrix3x3('normalMatrix', model.tmpMat3);\n    }\n    publicAPI.multiply4x4WithOffset(model.tmpMat4, model.mcpcMatrix, garray, p * 16);\n    program.setUniformMatrix('MCPCMatrix', model.tmpMat4);\n    if (mcvcMatrixUsed) {\n      publicAPI.multiply4x4WithOffset(model.tmpMat4, model.mcvcMatrix, garray, p * 16);\n      program.setUniformMatrix('MCVCMatrix', model.tmpMat4);\n    }\n\n    // set color\n    if (carray) {\n      const cdata = carray.getData();\n      model.tmpColor[0] = cdata[p * 4] / 255.0;\n      model.tmpColor[1] = cdata[p * 4 + 1] / 255.0;\n      model.tmpColor[2] = cdata[p * 4 + 2] / 255.0;\n      program.setUniform3fArray('ambientColorUniform', model.tmpColor);\n      program.setUniform3fArray('diffuseColorUniform', model.tmpColor);\n    }\n    if (selector) {\n      program.setUniform3fArray('mapperIndex', selector.getPropColorValue());\n    }\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const representation = actor.getProperty().getRepresentation();\n    const gl = model.context;\n    const drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE;\n\n    // [WMVP]C == {world, model, view, projection} coordinates\n    // E.g., WCPC == world to projection coordinate transformation\n    const keyMats = model.openGLCamera.getKeyMatrices(ren);\n    const actMats = model.openGLActor.getKeyMatrices();\n\n    // precompute the actor+camera mats once\n    mat3.multiply(model.normalMatrix, keyMats.normalMatrix, actMats.normalMatrix);\n    mat4.multiply(model.mcpcMatrix, keyMats.wcpc, actMats.mcwc);\n    mat4.multiply(model.mcvcMatrix, keyMats.wcvc, actMats.mcwc);\n    const garray = model.renderable.getMatrixArray();\n    const narray = model.renderable.getNormalArray();\n    const carray = model.renderable.getColorArray();\n    const numPts = garray.length / 16;\n    let compositePass = false;\n    if (model._openGLRenderer.getSelector()) {\n      if (model._openGLRenderer.getSelector().getCurrentPass() === PassTypes.COMPOSITE_INDEX_PASS) {\n        compositePass = true;\n      }\n    }\n\n    // for every primitive type\n    for (let i = model.primTypes.Start; i < model.primTypes.End; i++) {\n      // if there are entries\n      const cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        // are we drawing edges\n        model.drawingEdges = drawSurfaceWithEdges && (i === model.primTypes.TrisEdges || i === model.primTypes.TriStripsEdges);\n        model.lastBoundBO = model.primitives[i];\n        model.primitives[i].updateShaders(ren, actor, publicAPI);\n        const program = model.primitives[i].getProgram();\n        const mode = model.primitives[i].getOpenGLMode(representation);\n        const normalMatrixUsed = program.isUniformUsed('normalMatrix');\n        const mcvcMatrixUsed = program.isUniformUsed('MCVCMatrix');\n        if (model.hardwareSupport) {\n          if (model.extension) {\n            model.extension.drawArraysInstancedANGLE(mode, 0, cabo.getElementCount(), numPts);\n          } else {\n            gl.drawArraysInstanced(mode, 0, cabo.getElementCount(), numPts);\n          }\n        } else {\n          // draw the array multiple times with different cam matrix\n          for (let p = 0; p < numPts; ++p) {\n            if (compositePass) {\n              model._openGLRenderer.getSelector().renderCompositeIndex(p);\n            }\n            publicAPI.updateGlyphShaderParameters(normalMatrixUsed, mcvcMatrixUsed, model.primitives[i], carray, garray, narray, p, compositePass ? model._openGLRenderer.getSelector() : null);\n            gl.drawArrays(mode, 0, cabo.getElementCount());\n          }\n        }\n      }\n    }\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    if (cellBO.getCABO().getElementCount() && (model.glyphBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (cellBO.getProgram().isAttributeUsed('gMatrix')) {\n        if (!cellBO.getVAO().addAttributeMatrixWithDivisor(cellBO.getProgram(), model.matrixBuffer, 'gMatrix', 0, 64, model.context.FLOAT, 4, false, 1)) {\n          vtkErrorMacro('Error setting gMatrix in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gMatrix');\n      }\n      if (cellBO.getProgram().isAttributeUsed('gNormal')) {\n        if (!cellBO.getVAO().addAttributeMatrixWithDivisor(cellBO.getProgram(), model.normalBuffer, 'gNormal', 0, 36, model.context.FLOAT, 3, false, 1)) {\n          vtkErrorMacro('Error setting gNormal in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gNormal');\n      }\n      if (cellBO.getProgram().isAttributeUsed('gColor')) {\n        if (!cellBO.getVAO().addAttributeArrayWithDivisor(cellBO.getProgram(), model.colorBuffer, 'gColor', 0, 4, model.context.UNSIGNED_BYTE, 4, true, 1, false)) {\n          vtkErrorMacro('Error setting gColor in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gColor');\n      }\n      if (cellBO.getProgram().isAttributeUsed('mapperIndexVS')) {\n        if (!cellBO.getVAO().addAttributeArrayWithDivisor(cellBO.getProgram(), model.pickBuffer, 'mapperIndexVS', 0, 4, model.context.UNSIGNED_BYTE, 4, true, 1, false)) {\n          vtkErrorMacro('Error setting mapperIndexVS in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('mapperIndexVS');\n      }\n      superClass.setMapperShaderParameters(cellBO, ren, actor);\n      cellBO.getAttributeUpdateTime().modified();\n      return;\n    }\n    superClass.setMapperShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    model.renderable.buildArrays();\n\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    const vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < model.renderable.getBuildTime().getMTime()) {\n      return true;\n    }\n    return superClass.getNeedToRebuildBufferObjects(ren, actor);\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    if (superClass.getNeedToRebuildShaders(cellBO, ren, actor) || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    if (model.hardwareSupport) {\n      // update the buffer objects if needed\n      const garray = model.renderable.getMatrixArray();\n      const narray = model.renderable.getNormalArray();\n      const carray = model.renderable.getColorArray();\n      if (!model.matrixBuffer) {\n        model.matrixBuffer = vtkBufferObject.newInstance();\n        model.matrixBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.normalBuffer = vtkBufferObject.newInstance();\n        model.normalBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.colorBuffer = vtkBufferObject.newInstance();\n        model.colorBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.pickBuffer = vtkBufferObject.newInstance();\n        model.pickBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n      if (model.renderable.getBuildTime().getMTime() > model.glyphBOBuildTime.getMTime()) {\n        model.matrixBuffer.upload(garray, ObjectType.ARRAY_BUFFER);\n        model.normalBuffer.upload(narray, ObjectType.ARRAY_BUFFER);\n        if (carray) {\n          model.colorBuffer.upload(carray.getData(), ObjectType.ARRAY_BUFFER);\n        } else {\n          model.colorBuffer.releaseGraphicsResources();\n        }\n        const numPts = garray.length / 16;\n        const parray = new Uint8Array(4 * numPts);\n        for (let i = 0; i < numPts; ++i) {\n          let value = i + 1;\n          const offset = i * 4;\n          parray[offset] = value % 256;\n          value -= parray[offset];\n          value /= 256;\n          parray[offset + 1] = value % 256;\n          value -= parray[offset + 1];\n          value /= 256;\n          parray[offset + 2] = value % 256;\n          parray[offset + 3] = 255;\n        }\n        model.pickBuffer.upload(parray, ObjectType.ARRAY_BUFFER);\n        model.glyphBOBuildTime.modified();\n      }\n    }\n    return superClass.buildBufferObjects(ren, actor);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  normalMatrix: null,\n  mcpcMatrix: null,\n  mcwcMatrix: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkOpenGLPolyDataMapper.extend(publicAPI, model, initialValues);\n  model.tmpMat3 = mat3.identity(new Float64Array(9));\n  model.normalMatrix = mat3.identity(new Float64Array(9));\n  model.mcpcMatrix = mat4.identity(new Float64Array(16));\n  model.mcvcMatrix = mat4.identity(new Float64Array(16));\n  model.tmpColor = [];\n  model.glyphBOBuildTime = {};\n  obj(model.glyphBOBuildTime, {\n    mtime: 0\n  });\n\n  // Object methods\n  vtkOpenGLGlyph3DMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLGlyph3DMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkGlyph3DMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkGlyph3DMapper', newInstance);\n\nexport { vtkGlyph3DMapper as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './HardwareSelector/Constants.js';\nimport vtkHardwareSelector$1 from '../Core/HardwareSelector.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkSelectionNode from '../../Common/DataModel/SelectionNode.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\n\nconst {\n  PassTypes\n} = Constants;\nconst {\n  SelectionContent,\n  SelectionField\n} = vtkSelectionNode;\nconst {\n  FieldAssociations\n} = vtkDataSet;\nconst {\n  vtkErrorMacro\n} = macro;\nconst idOffset = 1;\nfunction getInfoHash(info) {\n  return `${info.propID} ${info.compositeID}`;\n}\nfunction getAlpha(xx, yy, pb, area) {\n  if (!pb) {\n    return 0;\n  }\n  const offset = (yy * (area[2] - area[0] + 1) + xx) * 4;\n  return pb[offset + 3];\n}\nfunction convert(xx, yy, pb, area) {\n  if (!pb) {\n    return 0;\n  }\n  const offset = (yy * (area[2] - area[0] + 1) + xx) * 4;\n  const r = pb[offset];\n  const g = pb[offset + 1];\n  const b = pb[offset + 2];\n  return (b * 256 + g) * 256 + r;\n}\nfunction getID(low24, high8) {\n  /* eslint-disable no-bitwise */\n  let val = high8;\n  val <<= 24;\n  val |= low24;\n  return val;\n  /* eslint-enable no-bitwise */\n}\n\nfunction getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {\n  // Base case\n  const maxDist = maxDistance < 0 ? 0 : maxDistance;\n  if (maxDist === 0) {\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n    if (inDisplayPosition[0] < buffdata.area[0] || inDisplayPosition[0] > buffdata.area[2] || inDisplayPosition[1] < buffdata.area[1] || inDisplayPosition[1] > buffdata.area[3]) {\n      return null;\n    }\n\n    // offset inDisplayPosition based on the lower-left-corner of the Area.\n    const displayPosition = [inDisplayPosition[0] - buffdata.area[0], inDisplayPosition[1] - buffdata.area[1]];\n    const actorid = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ACTOR_PASS], buffdata.area);\n    if (actorid <= 0 || actorid - idOffset >= buffdata.props.length) {\n      // the pixel did not hit any actor.\n      return null;\n    }\n    const info = {};\n    info.valid = true;\n    info.propID = actorid - idOffset;\n    info.prop = buffdata.props[info.propID];\n    let compositeID = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], buffdata.area);\n    if (compositeID < 0 || compositeID > 0xffffff) {\n      compositeID = 0;\n    }\n    info.compositeID = compositeID - idOffset;\n    if (buffdata.captureZValues) {\n      const offset = (displayPosition[1] * (buffdata.area[2] - buffdata.area[0] + 1) + displayPosition[0]) * 4;\n      info.zValue = (256 * buffdata.zBuffer[offset] + buffdata.zBuffer[offset + 1]) / 65535.0;\n      info.displayPosition = inDisplayPosition;\n    }\n    if (buffdata.pixBuffer[PassTypes.ID_LOW24]) {\n      if (getAlpha(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_LOW24], buffdata.area) === 0.0) {\n        return info;\n      }\n    }\n    const low24 = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_LOW24], buffdata.area);\n    const high24 = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_HIGH24], buffdata.area);\n    info.attributeID = getID(low24, high24);\n    return info;\n  }\n\n  // Iterate over successively growing boxes.\n  // They recursively call the base case to handle single pixels.\n  const dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n  const curPos = [0, 0];\n  let info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);\n  if (info && info.valid) {\n    return info;\n  }\n  for (let dist = 1; dist < maxDist; ++dist) {\n    // Vertical sides of box.\n    for (let y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n      curPos[1] = y;\n      if (dispPos[0] >= dist) {\n        curPos[0] = dispPos[0] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n      curPos[0] = dispPos[0] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n      if (info && info.valid) {\n        return info;\n      }\n    }\n    // Horizontal sides of box.\n    for (let x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n      curPos[0] = x;\n      if (dispPos[1] >= dist) {\n        curPos[1] = dispPos[1] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n      curPos[1] = dispPos[1] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n      if (info && info.valid) {\n        return info;\n      }\n    }\n  }\n\n  // nothing hit.\n  outSelectedPosition[0] = inDisplayPosition[0];\n  outSelectedPosition[1] = inDisplayPosition[1];\n  return null;\n}\n\n//-----------------------------------------------------------------------------\nfunction convertSelection(fieldassociation, dataMap, captureZValues, renderer, openGLRenderWindow) {\n  const sel = [];\n  let count = 0;\n  dataMap.forEach((value, key) => {\n    const child = vtkSelectionNode.newInstance();\n    child.setContentType(SelectionContent.INDICES);\n    switch (fieldassociation) {\n      case FieldAssociations.FIELD_ASSOCIATION_CELLS:\n        child.setFieldType(SelectionField.CELL);\n        break;\n      case FieldAssociations.FIELD_ASSOCIATION_POINTS:\n        child.setFieldType(SelectionField.POINT);\n        break;\n      default:\n        vtkErrorMacro('Unknown field association');\n    }\n    child.getProperties().propID = value.info.propID;\n    child.getProperties().prop = value.info.prop;\n    child.getProperties().compositeID = value.info.compositeID;\n    child.getProperties().attributeID = value.info.attributeID;\n    child.getProperties().pixelCount = value.pixelCount;\n    if (captureZValues) {\n      child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];\n      child.getProperties().worldPosition = openGLRenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, renderer);\n    }\n    child.setSelectionList(value.attributeIDs);\n    sel[count] = child;\n    count++;\n  });\n  return sel;\n}\n\n//----------------------------------------------------------------------------\nfunction generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {\n  const x1 = Math.floor(fx1);\n  const y1 = Math.floor(fy1);\n  const x2 = Math.floor(fx2);\n  const y2 = Math.floor(fy2);\n  const dataMap = new Map();\n  const outSelectedPosition = [0, 0];\n  for (let yy = y1; yy <= y2; yy++) {\n    for (let xx = x1; xx <= x2; xx++) {\n      const pos = [xx, yy];\n      const info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);\n      if (info && info.valid) {\n        const hash = getInfoHash(info);\n        if (!dataMap.has(hash)) {\n          dataMap.set(hash, {\n            info,\n            pixelCount: 1,\n            attributeIDs: [info.attributeID]\n          });\n        } else {\n          const dmv = dataMap.get(hash);\n          dmv.pixelCount++;\n          if (buffdata.captureZValues) {\n            if (info.zValue < dmv.info.zValue) {\n              dmv.info = info;\n            }\n          }\n          if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n            dmv.attributeIDs.push(info.attributeID);\n          }\n        }\n      }\n    }\n  }\n  return convertSelection(buffdata.fieldAssociation, dataMap, buffdata.captureZValues, buffdata.renderer, buffdata.openGLRenderWindow);\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLHardwareSelector methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLHardwareSelector(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLHardwareSelector');\n\n  //----------------------------------------------------------------------------\n  publicAPI.releasePixBuffers = () => {\n    model.rawPixBuffer = [];\n    model.pixBuffer = [];\n    model.zBuffer = null;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.beginSelection = () => {\n    model._openGLRenderer = model._openGLRenderWindow.getViewNodeFor(model._renderer);\n    model.maxAttributeId = 0;\n    const size = model._openGLRenderWindow.getSize();\n    if (!model.framebuffer) {\n      model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      model.framebuffer.create(size[0], size[1]);\n      // this calls model.framebuffer.bind()\n      model.framebuffer.populateFramebuffer();\n    } else {\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      const fbSize = model.framebuffer.getSize();\n      if (!fbSize || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.create(size[0], size[1]);\n        // this calls model.framebuffer.bind()\n        model.framebuffer.populateFramebuffer();\n      } else {\n        model.framebuffer.bind();\n      }\n    }\n    model._openGLRenderer.clear();\n    model._openGLRenderer.setSelector(publicAPI);\n    model.hitProps = {};\n    model.propPixels = {};\n    model.props = [];\n    publicAPI.releasePixBuffers();\n    if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      const gl = model._openGLRenderWindow.getContext();\n      const originalBlending = gl.isEnabled(gl.BLEND);\n      gl.disable(gl.BLEND);\n      model._openGLRenderWindow.traverseAllPasses();\n      if (originalBlending) {\n        gl.enable(gl.BLEND);\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.endSelection = () => {\n    model.hitProps = {};\n    model._openGLRenderer.setSelector(null);\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n  };\n  publicAPI.preCapturePass = () => {\n    const gl = model._openGLRenderWindow.getContext();\n    // Disable blending\n    model.originalBlending = gl.isEnabled(gl.BLEND);\n    gl.disable(gl.BLEND);\n  };\n  publicAPI.postCapturePass = () => {\n    const gl = model._openGLRenderWindow.getContext();\n    // Restore blending if it was enabled prior to the capture\n    if (model.originalBlending) {\n      gl.enable(gl.BLEND);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.select = () => {\n    let sel = null;\n    if (publicAPI.captureBuffers()) {\n      sel = publicAPI.generateSelection(model.area[0], model.area[1], model.area[2], model.area[3]);\n      publicAPI.releasePixBuffers();\n    }\n    return sel;\n  };\n  publicAPI.getSourceDataAsync = async (renderer, fx1, fy1, fx2, fy2) => {\n    // assign the renderer\n    model._renderer = renderer;\n\n    // set area to all if no arguments provided\n    if (fx1 === undefined) {\n      const size = model._openGLRenderWindow.getSize();\n      publicAPI.setArea(0, 0, size[0] - 1, size[1] - 1);\n    } else {\n      publicAPI.setArea(fx1, fy1, fx2, fy2);\n    }\n    // just do capture buffers and package up the result\n    if (!publicAPI.captureBuffers()) {\n      return false;\n    }\n    const result = {\n      area: [...model.area],\n      pixBuffer: [...model.pixBuffer],\n      captureZValues: model.captureZValues,\n      zBuffer: model.zBuffer,\n      props: [...model.props],\n      fieldAssociation: model.fieldAssociation,\n      renderer,\n      openGLRenderWindow: model._openGLRenderWindow\n    };\n    result.generateSelection = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return generateSelectionWithData(result, ...args);\n    };\n    return result;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.captureBuffers = () => {\n    if (!model._renderer || !model._openGLRenderWindow) {\n      vtkErrorMacro('Renderer and view must be set before calling Select.');\n      return false;\n    }\n    model._openGLRenderer = model._openGLRenderWindow.getViewNodeFor(model._renderer);\n\n    // todo revisit making selection part of core\n    // then we can do this in core\n    model._openGLRenderWindow.getRenderable().preRender();\n\n    // int rgba[4];\n    // rwin.getColorBufferSizes(rgba);\n    // if (rgba[0] < 8 || rgba[1] < 8 || rgba[2] < 8) {\n    //   vtkErrorMacro(\"Color buffer depth must be at least 8 bit. \"\n    //     \"Currently: \" << rgba[0] << \", \" << rgba[1] << \", \" <<rgba[2]);\n    //   return false;\n    // }\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n\n    // Initialize renderer for selection.\n    // change the renderer's background to black, which will indicate a miss\n    model.originalBackground = model._renderer.getBackgroundByReference();\n    model._renderer.setBackground(0.0, 0.0, 0.0, 0.0);\n    const rpasses = model._openGLRenderWindow.getRenderPasses();\n    publicAPI.beginSelection();\n    const pixelBufferSavedPasses = [];\n    for (model.currentPass = PassTypes.MIN_KNOWN_PASS; model.currentPass <= PassTypes.MAX_KNOWN_PASS; model.currentPass++) {\n      if (publicAPI.passRequired(model.currentPass)) {\n        publicAPI.preCapturePass(model.currentPass);\n        if (model.captureZValues && model.currentPass === PassTypes.ACTOR_PASS && typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {\n          rpasses[0].requestDepth();\n          model._openGLRenderWindow.traverseAllPasses();\n        } else {\n          model._openGLRenderWindow.traverseAllPasses();\n        }\n        publicAPI.postCapturePass(model.currentPass);\n        publicAPI.savePixelBuffer(model.currentPass);\n        pixelBufferSavedPasses.push(model.currentPass);\n      }\n    }\n\n    // Process pixel buffers\n    pixelBufferSavedPasses.forEach(pass => {\n      model.currentPass = pass;\n      publicAPI.processPixelBuffers();\n    });\n    model.currentPass = PassTypes.MAX_KNOWN_PASS;\n    publicAPI.endSelection();\n\n    // restore original background\n    model._renderer.setBackground(model.originalBackground);\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n\n    // restore image, not needed?\n    // model._openGLRenderWindow.traverseAllPasses();\n    return true;\n  };\n  publicAPI.processPixelBuffers = () => {\n    model.props.forEach((prop, index) => {\n      if (publicAPI.isPropHit(index)) {\n        prop.processSelectorPixelBuffers(publicAPI, model.propPixels[index]);\n      }\n    });\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.passRequired = pass => {\n    if (pass === PassTypes.ID_HIGH24) {\n      if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n        return model.maximumPointId > 0x00ffffff;\n      }\n      if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_CELLS) {\n        return model.maximumCellId > 0x00ffffff;\n      }\n    }\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.savePixelBuffer = passNo => {\n    model.pixBuffer[passNo] = model._openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);\n    if (!model.rawPixBuffer[passNo]) {\n      const size = (model.area[2] - model.area[0] + 1) * (model.area[3] - model.area[1] + 1) * 4;\n      model.rawPixBuffer[passNo] = new Uint8Array(size);\n      model.rawPixBuffer[passNo].set(model.pixBuffer[passNo]);\n    }\n    if (passNo === PassTypes.ACTOR_PASS) {\n      if (model.captureZValues) {\n        const rpasses = model._openGLRenderWindow.getRenderPasses();\n        if (typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {\n          const fb = rpasses[0].getFramebuffer();\n          fb.saveCurrentBindingsAndBuffers();\n          fb.bind();\n          model.zBuffer = model._openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);\n          fb.restorePreviousBindingsAndBuffers();\n        }\n      }\n      publicAPI.buildPropHitList(model.rawPixBuffer[passNo]);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.buildPropHitList = pixelbuffer => {\n    let offset = 0;\n    for (let yy = 0; yy <= model.area[3] - model.area[1]; yy++) {\n      for (let xx = 0; xx <= model.area[2] - model.area[0]; xx++) {\n        let val = convert(xx, yy, pixelbuffer, model.area);\n        if (val > 0) {\n          val--;\n          if (!(val in model.hitProps)) {\n            model.hitProps[val] = true;\n            model.propPixels[val] = [];\n          }\n          model.propPixels[val].push(offset * 4);\n        }\n        ++offset;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.renderProp = prop => {\n    if (model.currentPass === PassTypes.ACTOR_PASS) {\n      publicAPI.setPropColorValueFromInt(model.props.length + idOffset);\n      model.props.push(prop);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.renderCompositeIndex = index => {\n    if (model.currentPass === PassTypes.COMPOSITE_INDEX_PASS) {\n      publicAPI.setPropColorValueFromInt(index + idOffset);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // TODO: make inline\n  publicAPI.renderAttributeId = attribid => {\n    if (attribid < 0) {\n      // negative attribid is valid. It happens when rendering higher order\n      // elements where new points are added for rendering smooth surfaces.\n      return;\n    }\n    model.maxAttributeId = attribid > model.maxAttributeId ? attribid : model.maxAttributeId;\n\n    // if (model.currentPass < PassTypes.ID_LOW24) {\n    //   return; // useless...\n    // }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.passTypeToString = type => macro.enumToString(PassTypes, type);\n\n  //----------------------------------------------------------------------------\n  publicAPI.isPropHit = id => Boolean(model.hitProps[id]);\n  publicAPI.setPropColorValueFromInt = val => {\n    model.propColorValue[0] = val % 256 / 255.0;\n    model.propColorValue[1] = Math.floor(val / 256) % 256 / 255.0;\n    model.propColorValue[2] = Math.floor(val / 65536) % 256 / 255.0;\n  };\n\n  // info has\n  //   valid\n  //   propId\n  //   prop\n  //   compositeID\n  //   attributeID\n\n  //----------------------------------------------------------------------------\n  publicAPI.getPixelInformation = (inDisplayPosition, maxDistance, outSelectedPosition) => {\n    // Base case\n    const maxDist = maxDistance < 0 ? 0 : maxDistance;\n    if (maxDist === 0) {\n      outSelectedPosition[0] = inDisplayPosition[0];\n      outSelectedPosition[1] = inDisplayPosition[1];\n      if (inDisplayPosition[0] < model.area[0] || inDisplayPosition[0] > model.area[2] || inDisplayPosition[1] < model.area[1] || inDisplayPosition[1] > model.area[3]) {\n        return null;\n      }\n\n      // offset inDisplayPosition based on the lower-left-corner of the Area.\n      const displayPosition = [inDisplayPosition[0] - model.area[0], inDisplayPosition[1] - model.area[1]];\n      const actorid = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ACTOR_PASS], model.area);\n      if (actorid <= 0 || actorid - idOffset >= model.props.length) {\n        // the pixel did not hit any actor.\n        return null;\n      }\n      const info = {};\n      info.valid = true;\n      info.propID = actorid - idOffset;\n      info.prop = model.props[info.propID];\n      let compositeID = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], model.area);\n      if (compositeID < 0 || compositeID > 0xffffff) {\n        compositeID = 0;\n      }\n      info.compositeID = compositeID - idOffset;\n      if (model.captureZValues) {\n        const offset = (displayPosition[1] * (model.area[2] - model.area[0] + 1) + displayPosition[0]) * 4;\n        info.zValue = (256 * model.zBuffer[offset] + model.zBuffer[offset + 1]) / 65535.0;\n        info.displayPosition = inDisplayPosition;\n      }\n\n      // Skip attribute ids if alpha is zero (missed)\n      if (model.pixBuffer[PassTypes.ID_LOW24]) {\n        if (getAlpha(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_LOW24], model.area) === 0.0) {\n          return info;\n        }\n      }\n      const low24 = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_LOW24], model.area);\n      const high24 = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_HIGH24], model.area);\n      info.attributeID = getID(low24, high24);\n      return info;\n    }\n\n    // Iterate over successively growing boxes.\n    // They recursively call the base case to handle single pixels.\n    const dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n    const curPos = [0, 0];\n    let info = publicAPI.getPixelInformation(inDisplayPosition, 0, outSelectedPosition);\n    if (info && info.valid) {\n      return info;\n    }\n    for (let dist = 1; dist < maxDist; ++dist) {\n      // Vertical sides of box.\n      for (let y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n        curPos[1] = y;\n        if (dispPos[0] >= dist) {\n          curPos[0] = dispPos[0] - dist;\n          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n          if (info && info.valid) {\n            return info;\n          }\n        }\n        curPos[0] = dispPos[0] + dist;\n        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n      // Horizontal sides of box.\n      for (let x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n        curPos[0] = x;\n        if (dispPos[1] >= dist) {\n          curPos[1] = dispPos[1] - dist;\n          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n          if (info && info.valid) {\n            return info;\n          }\n        }\n        curPos[1] = dispPos[1] + dist;\n        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n    }\n\n    // nothing hit.\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n    return null;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.generateSelection = (fx1, fy1, fx2, fy2) => {\n    const x1 = Math.floor(fx1);\n    const y1 = Math.floor(fy1);\n    const x2 = Math.floor(fx2);\n    const y2 = Math.floor(fy2);\n    const dataMap = new Map();\n    const outSelectedPosition = [0, 0];\n    for (let yy = y1; yy <= y2; yy++) {\n      for (let xx = x1; xx <= x2; xx++) {\n        const pos = [xx, yy];\n        const info = publicAPI.getPixelInformation(pos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          const hash = getInfoHash(info);\n          if (!dataMap.has(hash)) {\n            dataMap.set(hash, {\n              info,\n              pixelCount: 1,\n              attributeIDs: [info.attributeID]\n            });\n          } else {\n            const dmv = dataMap.get(hash);\n            dmv.pixelCount++;\n            if (model.captureZValues) {\n              if (info.zValue < dmv.info.zValue) {\n                dmv.info = info;\n              }\n            }\n            if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n              dmv.attributeIDs.push(info.attributeID);\n            }\n          }\n        }\n      }\n    }\n    return convertSelection(model.fieldAssociation, dataMap, model.captureZValues, model._renderer, model._openGLRenderWindow);\n  };\n  publicAPI.getRawPixelBuffer = passNo => model.rawPixBuffer[passNo];\n  publicAPI.getPixelBuffer = passNo => model.pixBuffer[passNo];\n\n  //----------------------------------------------------------------------------\n\n  publicAPI.attach = (openGLRenderWindow, renderer) => {\n    model._openGLRenderWindow = openGLRenderWindow;\n    model._renderer = renderer;\n  };\n\n  // override\n  const superSetArea = publicAPI.setArea;\n  publicAPI.setArea = function () {\n    if (superSetArea(...arguments)) {\n      model.area[0] = Math.floor(model.area[0]);\n      model.area[1] = Math.floor(model.area[1]);\n      model.area[2] = Math.floor(model.area[2]);\n      model.area[3] = Math.floor(model.area[3]);\n      return true;\n    }\n    return false;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  area: undefined,\n  // _renderer: null,\n  // _openGLRenderWindow: null,\n  // _openGLRenderer: null,\n  currentPass: -1,\n  propColorValue: null,\n  props: null,\n  maximumPointId: 0,\n  maximumCellId: 0,\n  idOffset: 1\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkHardwareSelector$1.extend(publicAPI, model, initialValues);\n  model.propColorValue = [0, 0, 0];\n  model.props = [];\n  if (!model.area) {\n    model.area = [0, 0, 0, 0];\n  }\n  macro.setGetArray(publicAPI, model, ['area'], 4);\n  macro.setGet(publicAPI, model, ['_renderer', 'currentPass', '_openGLRenderWindow', 'maximumPointId', 'maximumCellId']);\n  macro.setGetArray(publicAPI, model, ['propColorValue'], 3);\n  macro.moveToProtected(publicAPI, model, ['renderer', 'openGLRenderWindow']);\n  macro.event(publicAPI, model, 'event');\n\n  // Object methods\n  vtkOpenGLHardwareSelector(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLHardwareSelector');\n\n// ----------------------------------------------------------------------------\n\nvar vtkHardwareSelector = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkHardwareSelector as default, extend, newInstance };\n","const PassTypes = {\n  MIN_KNOWN_PASS: 0,\n  ACTOR_PASS: 0,\n  COMPOSITE_INDEX_PASS: 1,\n  ID_LOW24: 2,\n  ID_HIGH24: 3,\n  MAX_KNOWN_PASS: 3\n};\nvar Constants = {\n  PassTypes\n};\n\nexport { PassTypes, Constants as default };\n","import { m as macro } from '../../macros2.js';\nimport vtkCellArrayBufferObject from './CellArrayBufferObject.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\nimport { Representation } from '../Core/Property/Constants.js';\n\nconst primTypes = {\n  Start: 0,\n  Points: 0,\n  Lines: 1,\n  Tris: 2,\n  TriStrips: 3,\n  TrisEdges: 4,\n  TriStripsEdges: 5,\n  End: 6\n};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLHelper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLHelper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLHelper');\n  publicAPI.setOpenGLRenderWindow = win => {\n    model.context = win.getContext();\n    model.program.setContext(model.context);\n    model.VAO.setOpenGLRenderWindow(win);\n    model.CABO.setOpenGLRenderWindow(win);\n  };\n  publicAPI.releaseGraphicsResources = oglwin => {\n    model.VAO.releaseGraphicsResources();\n    model.CABO.releaseGraphicsResources();\n    model.CABO.setElementCount(0);\n  };\n  publicAPI.drawArrays = (ren, actor, rep, oglMapper) => {\n    // Are there any entries\n    if (model.CABO.getElementCount()) {\n      // are we drawing edges\n      const mode = publicAPI.getOpenGLMode(rep);\n      const wideLines = publicAPI.haveWideLines(ren, actor);\n      const gl = model.context;\n      const depthMask = gl.getParameter(gl.DEPTH_WRITEMASK);\n      if (model.pointPicking) {\n        gl.depthMask(false);\n      }\n      const drawingLines = mode === gl.LINES;\n      if (drawingLines && wideLines) {\n        publicAPI.updateShaders(ren, actor, oglMapper);\n        gl.drawArraysInstanced(mode, 0, model.CABO.getElementCount(), 2 * Math.ceil(actor.getProperty().getLineWidth()));\n      } else {\n        gl.lineWidth(actor.getProperty().getLineWidth());\n        publicAPI.updateShaders(ren, actor, oglMapper);\n        gl.drawArrays(mode, 0, model.CABO.getElementCount());\n        // reset the line width\n        gl.lineWidth(1);\n      }\n      const stride = (mode === gl.POINTS ? 1 : 0) || (mode === gl.LINES ? 2 : 3);\n      if (model.pointPicking) {\n        gl.depthMask(depthMask);\n      }\n      return model.CABO.getElementCount() / stride;\n    }\n    return 0;\n  };\n  publicAPI.getOpenGLMode = rep => {\n    if (model.pointPicking) {\n      return model.context.POINTS;\n    }\n    const type = model.primitiveType;\n    if (rep === Representation.POINTS || type === primTypes.Points) {\n      return model.context.POINTS;\n    }\n    if (rep === Representation.WIREFRAME || type === primTypes.Lines || type === primTypes.TrisEdges || type === primTypes.TriStripsEdges) {\n      return model.context.LINES;\n    }\n    return model.context.TRIANGLES;\n  };\n  publicAPI.haveWideLines = (ren, actor) => {\n    if (actor.getProperty().getLineWidth() > 1.0) {\n      // we have wide lines, but the OpenGL implementation may\n      // actually support them, check the range to see if we\n      // really need have to implement our own wide lines\n      if (model.CABO.getOpenGLRenderWindow()) {\n        if (model.CABO.getOpenGLRenderWindow().getHardwareMaximumLineWidth() >= actor.getProperty().getLineWidth()) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getNeedToRebuildShaders = (ren, actor, oglMapper) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // mapper modified (lighting complexity)\n    if (oglMapper.getNeedToRebuildShaders(publicAPI, ren, actor) || publicAPI.getProgram() === 0 || publicAPI.getShaderSourceTime().getMTime() < oglMapper.getMTime() || publicAPI.getShaderSourceTime().getMTime() < actor.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateShaders = (ren, actor, oglMapper) => {\n    // has something changed that would require us to recreate the shader?\n    if (publicAPI.getNeedToRebuildShaders(ren, actor, oglMapper)) {\n      const shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      oglMapper.buildShaders(shaders, ren, actor);\n\n      // compile and bind the program if needed\n      const newShader = model.CABO.getOpenGLRenderWindow().getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry);\n\n      // if the shader changed reinitialize the VAO\n      if (newShader !== publicAPI.getProgram()) {\n        publicAPI.setProgram(newShader);\n        // reset the VAO as the shader has changed\n        publicAPI.getVAO().releaseGraphicsResources();\n      }\n      publicAPI.getShaderSourceTime().modified();\n    } else {\n      model.CABO.getOpenGLRenderWindow().getShaderCache().readyShaderProgram(publicAPI.getProgram());\n    }\n    publicAPI.getVAO().bind();\n    oglMapper.setMapperShaderParameters(publicAPI, ren, actor);\n    oglMapper.setPropertyShaderParameters(publicAPI, ren, actor);\n    oglMapper.setCameraShaderParameters(publicAPI, ren, actor);\n    oglMapper.setLightingShaderParameters(publicAPI, ren, actor);\n    oglMapper.invokeShaderCallbacks(publicAPI, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = (ren, actor, size) => {\n    if (publicAPI.haveWideLines(ren, actor)) {\n      publicAPI.getProgram().setUniform2f('viewportSize', size.usize, size.vsize);\n      const lineWidth = parseFloat(actor.getProperty().getLineWidth());\n      const halfLineWidth = lineWidth / 2.0;\n      publicAPI.getProgram().setUniformf('lineWidthStepSize', lineWidth / Math.ceil(lineWidth));\n      publicAPI.getProgram().setUniformf('halfLineWidth', halfLineWidth);\n    }\n    if (model.primitiveType === primTypes.Points || actor.getProperty().getRepresentation() === Representation.POINTS) {\n      publicAPI.getProgram().setUniformf('pointSize', actor.getProperty().getPointSize());\n    } else if (model.pointPicking) {\n      publicAPI.getProgram().setUniformf('pointSize', publicAPI.getPointPickingPrimitiveSize());\n    }\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n\n    // Always set point size in case we need picking\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Dec', ['//VTK::PositionVC::Dec', 'uniform float pointSize;']).result;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['//VTK::PositionVC::Impl', '  gl_PointSize = pointSize;'], false).result;\n\n    // for lines, make sure we add the width code\n    if (publicAPI.getOpenGLMode(actor.getProperty().getRepresentation()) === model.context.LINES && publicAPI.haveWideLines(ren, actor)) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Dec', ['//VTK::PositionVC::Dec', 'uniform vec2 viewportSize;', 'uniform float lineWidthStepSize;', 'uniform float halfLineWidth;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['//VTK::PositionVC::Impl', ' if (halfLineWidth > 0.0)', '   {', '   float offset = float(gl_InstanceID / 2) * lineWidthStepSize - halfLineWidth;', '   vec4 tmpPos = gl_Position;', '   vec3 tmpPos2 = tmpPos.xyz / tmpPos.w;', '   tmpPos2.x = tmpPos2.x + 2.0 * mod(float(gl_InstanceID), 2.0) * offset / viewportSize[0];', '   tmpPos2.y = tmpPos2.y + 2.0 * mod(float(gl_InstanceID + 1), 2.0) * offset / viewportSize[1];', '   gl_Position = vec4(tmpPos2.xyz * tmpPos.w, tmpPos.w);', '   }']).result;\n    }\n    shaders.Vertex = VSSource;\n  };\n  publicAPI.getPointPickingPrimitiveSize = () => {\n    if (model.primitiveType === primTypes.Points) {\n      return 2;\n    }\n    if (model.primitiveType === primTypes.Lines) {\n      return 4;\n    }\n    return 6;\n  };\n  publicAPI.getAllocatedGPUMemoryInBytes = () => publicAPI.getCABO().getAllocatedGPUMemoryInBytes();\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  program: null,\n  shaderSourceTime: null,\n  VAO: null,\n  attributeUpdateTime: null,\n  CABO: null,\n  primitiveType: 0,\n  pointPicking: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  model.shaderSourceTime = {};\n  macro.obj(model.shaderSourceTime);\n  model.attributeUpdateTime = {};\n  macro.obj(model.attributeUpdateTime);\n  macro.setGet(publicAPI, model, ['program', 'shaderSourceTime', 'VAO', 'attributeUpdateTime', 'CABO', 'primitiveType', 'pointPicking']);\n  model.program = vtkShaderProgram.newInstance();\n  model.VAO = vtkVertexArrayObject.newInstance();\n  model.CABO = vtkCellArrayBufferObject.newInstance();\n\n  // Object methods\n  vtkOpenGLHelper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkHelper = {\n  newInstance,\n  extend,\n  primTypes\n};\n\nexport { vtkHelper as default, extend, newInstance, primTypes };\n","import { m as macro } from '../../macros2.js';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { Filter } from './Texture/Constants.js';\nimport { InterpolationType } from '../Core/ImageProperty/Constants.js';\nimport { ProjectionMode } from '../Core/ImageCPRMapper/Constants.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { getImageDataHash, getTransferFunctionHash } from './RenderWindow/resourceSharingHelper.js';\nimport { v as vtkPolyDataVS } from './glsl/vtkPolyDataVS.glsl.js';\nimport { v as vtkPolyDataFS } from './glsl/vtkPolyDataFS.glsl.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nimport '../Core/Mapper/CoincidentTopologyHelper.js';\nimport { Resolve } from '../Core/Mapper/Static.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLImageCPRMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLImageCPRMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLImageCPRMapper');\n  function unregisterGraphicsResources(renderWindow) {\n    [model._scalars, model._colorTransferFunc, model._pwFunc].forEach(coreObject => renderWindow.unregisterGraphicsResourceUser(coreObject, publicAPI));\n  }\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.currentRenderPass = null;\n      model.openGLImageSlice = publicAPI.getFirstAncestorOfType('vtkOpenGLImageSlice');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      const oldOglRenderWindow = model._openGLRenderWindow;\n      model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (oldOglRenderWindow && !oldOglRenderWindow.isDeleted() && oldOglRenderWindow !== model._openGLRenderWindow) {\n        unregisterGraphicsResources(oldOglRenderWindow);\n      }\n      model.context = model._openGLRenderWindow.getContext();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n    }\n  };\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.currentRenderPass = renderPass;\n      publicAPI.render();\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => {\n    if (prepass) {\n      model.haveSeenDepthRequest = true;\n      model.renderDepth = true;\n      publicAPI.render();\n      model.renderDepth = false;\n    }\n  };\n  publicAPI.getCoincidentParameters = (ren, actor) => {\n    if (model.renderable.getResolveCoincidentTopology() === Resolve.PolygonOffset) {\n      return model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n    }\n    return null;\n  };\n  publicAPI.render = () => {\n    const prop = model.openGLImageSlice.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, prop);\n  };\n  publicAPI.renderPiece = (ren, prop) => {\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n    model.renderable.update();\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n\n    // Check if the ImageCPRMapper has everything it needs to render\n    if (!model.renderable.preRenderCheck()) {\n      return;\n    }\n    model.currentImageDataInput = model.renderable.getInputData(0);\n    model.currentCenterlineInput = model.renderable.getOrientedCenterline();\n    publicAPI.renderPieceStart(ren, prop);\n    publicAPI.renderPieceDraw(ren, prop);\n    publicAPI.renderPieceFinish(ren, prop);\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const gl = model.context;\n\n    // activate the texture\n    model.volumeTexture.activate();\n    model.colorTexture.activate();\n    model.pwfTexture.activate();\n\n    // draw polygons\n    if (model.tris.getCABO().getElementCount()) {\n      // First we do the triangles, update the shader, set uniforms, etc.\n      publicAPI.updateShaders(model.tris, ren, actor);\n      gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      model.tris.getVAO().release();\n    }\n    model.volumeTexture.deactivate();\n    model.colorTexture.deactivate();\n    model.pwfTexture.deactivate();\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {};\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n    // Set interpolation on the texture based on property setting\n    const actorProperty = actor.getProperty();\n    if (actorProperty.getInterpolationType() === InterpolationType.NEAREST) {\n      model.volumeTexture.setMinificationFilter(Filter.NEAREST);\n      model.volumeTexture.setMagnificationFilter(Filter.NEAREST);\n      model.colorTexture.setMinificationFilter(Filter.NEAREST);\n      model.colorTexture.setMagnificationFilter(Filter.NEAREST);\n      model.pwfTexture.setMinificationFilter(Filter.NEAREST);\n      model.pwfTexture.setMagnificationFilter(Filter.NEAREST);\n    } else {\n      model.volumeTexture.setMinificationFilter(Filter.LINEAR);\n      model.volumeTexture.setMagnificationFilter(Filter.LINEAR);\n      model.colorTexture.setMinificationFilter(Filter.LINEAR);\n      model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n      model.pwfTexture.setMinificationFilter(Filter.LINEAR);\n      model.pwfTexture.setMagnificationFilter(Filter.LINEAR);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    const vmtime = model.VBOBuildTime.getMTime();\n    return vmtime < publicAPI.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentImageDataInput.getMTime() || vmtime < model.currentCenterlineInput.getMTime() || !model.volumeTexture?.getHandle();\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const image = model.currentImageDataInput;\n    const centerline = model.currentCenterlineInput;\n\n    // Rebuild the volumeTexture if the data has changed\n    const scalars = image?.getPointData()?.getScalars();\n    if (!scalars) {\n      return;\n    }\n    const cachedScalarsEntry = model._openGLRenderWindow.getGraphicsResourceForObject(scalars);\n    const volumeTextureHash = getImageDataHash(image, scalars);\n    const reBuildTex = !cachedScalarsEntry?.oglObject?.getHandle() || cachedScalarsEntry?.hash !== volumeTextureHash;\n    const updatedExtents = model.renderable.getUpdatedExtents();\n    const hasUpdatedExtents = !!updatedExtents.length;\n    if (reBuildTex) {\n      model.volumeTexture = vtkOpenGLTexture.newInstance();\n      model.volumeTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      // Build the textures\n      const dims = image.getDimensions();\n      // Use norm16 for scalar texture if the extension is available\n      model.volumeTexture.setOglNorm16Ext(model.context.getExtension('EXT_texture_norm16'));\n      model.volumeTexture.resetFormatAndType();\n      model.volumeTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, model.renderable.getPreferSizeOverAccuracy());\n      model._openGLRenderWindow.setGraphicsResourceForObject(scalars, model.volumeTexture, volumeTextureHash);\n      if (scalars !== model._scalars) {\n        model._openGLRenderWindow.registerGraphicsResourceUser(scalars, publicAPI);\n        model._openGLRenderWindow.unregisterGraphicsResourceUser(model._scalars, publicAPI);\n      }\n      model._scalars = scalars;\n    } else {\n      model.volumeTexture = cachedScalarsEntry.oglObject;\n    }\n    if (hasUpdatedExtents) {\n      // If hasUpdatedExtents, then the texture is partially updated.\n      // clear the array to acknowledge the update.\n      model.renderable.setUpdatedExtents([]);\n      const dims = image.getDimensions();\n      model.volumeTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, false, updatedExtents);\n    }\n\n    // Rebuild the color texture if needed\n    const numComp = scalars.getNumberOfComponents();\n    const ppty = actor.getProperty();\n    const iComps = ppty.getIndependentComponents();\n    const numIComps = iComps ? numComp : 1;\n    const textureHeight = iComps ? 2 * numIComps : 1;\n    const colorTransferFunc = ppty.getRGBTransferFunction();\n    const colorTextureHash = getTransferFunctionHash(colorTransferFunc, iComps, numIComps);\n    const cachedColorEntry = model._openGLRenderWindow.getGraphicsResourceForObject(colorTransferFunc);\n    const reBuildColorTexture = !cachedColorEntry?.oglObject?.getHandle() || cachedColorEntry?.hash !== colorTextureHash;\n    if (reBuildColorTexture) {\n      const cWidth = 1024;\n      const cSize = cWidth * textureHeight * 3;\n      const cTable = new Uint8ClampedArray(cSize);\n      model.colorTexture = vtkOpenGLTexture.newInstance();\n      model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      if (colorTransferFunc) {\n        const tmpTable = new Float32Array(cWidth * 3);\n        for (let c = 0; c < numIComps; c++) {\n          const cfun = ppty.getRGBTransferFunction(c);\n          const cRange = cfun.getRange();\n          cfun.getTable(cRange[0], cRange[1], cWidth, tmpTable, 1);\n          if (iComps) {\n            for (let i = 0; i < cWidth * 3; i++) {\n              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n              cTable[c * cWidth * 6 + i + cWidth * 3] = 255.0 * tmpTable[i];\n            }\n          } else {\n            for (let i = 0; i < cWidth * 3; i++) {\n              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n            }\n          }\n        }\n        model.colorTexture.resetFormatAndType();\n        model.colorTexture.create2DFromRaw(cWidth, textureHeight, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      } else {\n        for (let i = 0; i < cWidth * 3; ++i) {\n          cTable[i] = 255.0 * i / ((cWidth - 1) * 3);\n          cTable[i + 1] = 255.0 * i / ((cWidth - 1) * 3);\n          cTable[i + 2] = 255.0 * i / ((cWidth - 1) * 3);\n        }\n        model.colorTexture.resetFormatAndType();\n        model.colorTexture.create2DFromRaw(cWidth, 1, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      }\n      if (colorTransferFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(colorTransferFunc, model.colorTexture, colorTextureHash);\n        if (colorTransferFunc !== model._colorTransferFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(colorTransferFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._colorTransferFunc, publicAPI);\n        }\n        model._colorTransferFunc = colorTransferFunc;\n      }\n    } else {\n      model.colorTexture = cachedColorEntry.oglObject;\n    }\n\n    // Build piecewise function buffer.  This buffer is used either\n    // for component weighting or opacity, depending on whether we're\n    // rendering components independently or not.\n    const pwFunc = ppty.getPiecewiseFunction();\n    const pwfTextureHash = getTransferFunctionHash(pwFunc, iComps, numIComps);\n    const cachedPwfEntry = model._openGLRenderWindow.getGraphicsResourceForObject(pwFunc);\n    const reBuildPwf = !cachedPwfEntry?.oglObject?.getHandle() || cachedPwfEntry?.hash !== pwfTextureHash;\n    if (reBuildPwf) {\n      const pwfWidth = 1024;\n      const pwfSize = pwfWidth * textureHeight;\n      const pwfTable = new Uint8ClampedArray(pwfSize);\n      model.pwfTexture = vtkOpenGLTexture.newInstance();\n      model.pwfTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      if (pwFunc) {\n        const pwfFloatTable = new Float32Array(pwfSize);\n        const tmpTable = new Float32Array(pwfWidth);\n        for (let c = 0; c < numIComps; ++c) {\n          const pwfun = ppty.getPiecewiseFunction(c);\n          if (pwfun === null) {\n            // Piecewise constant max if no function supplied for this component\n            pwfFloatTable.fill(1.0);\n          } else {\n            const pwfRange = pwfun.getRange();\n            pwfun.getTable(pwfRange[0], pwfRange[1], pwfWidth, tmpTable, 1);\n            // adjust for sample distance etc\n            if (iComps) {\n              for (let i = 0; i < pwfWidth; i++) {\n                pwfFloatTable[c * pwfWidth * 2 + i] = tmpTable[i];\n                pwfFloatTable[c * pwfWidth * 2 + i + pwfWidth] = tmpTable[i];\n              }\n            } else {\n              for (let i = 0; i < pwfWidth; i++) {\n                pwfFloatTable[c * pwfWidth * 2 + i] = tmpTable[i];\n              }\n            }\n          }\n        }\n        model.pwfTexture.resetFormatAndType();\n        model.pwfTexture.create2DFromRaw(pwfWidth, textureHeight, 1, VtkDataTypes.FLOAT, pwfFloatTable);\n      } else {\n        // default is opaque\n        pwfTable.fill(255.0);\n        model.pwfTexture.resetFormatAndType();\n        model.pwfTexture.create2DFromRaw(pwfWidth, 1, 1, VtkDataTypes.UNSIGNED_CHAR, pwfTable);\n      }\n      if (pwFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(pwFunc, model.pwfTexture, pwfTextureHash);\n        if (pwFunc !== model._pwFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(pwFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._pwFunc, publicAPI);\n        }\n        model._pwFunc = pwFunc;\n      }\n    } else {\n      model.pwfTexture = cachedPwfEntry.oglObject;\n    }\n\n    // Rebuild the image vertices if needed\n    if (model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < centerline.getMTime()) {\n      const nPoints = centerline.getNumberOfPoints();\n      const nLines = nPoints <= 1 ? 0 : nPoints - 1;\n      const distances = centerline.getDistancesToFirstPoint();\n      const totalHeight = model.renderable.getHeight();\n      const nPts = 4 * nLines;\n\n      // Create the array of point: 4 points per segment\n      const ptsArray = new Float32Array(3 * nPts);\n      const widthMC = model.renderable.getWidth();\n      for (let lineIdx = 0, offset = 0; lineIdx < nLines; ++lineIdx) {\n        // Use model coordinates\n        // See \"setCameraShaderParameters\" to see how MCPCMatrix is built\n\n        // Top left\n        ptsArray.set([0, totalHeight - distances[lineIdx], 0], offset);\n        offset += 3;\n        // Top right\n        ptsArray.set([widthMC, totalHeight - distances[lineIdx], 0], offset);\n        offset += 3;\n        // Bottom right\n        ptsArray.set([widthMC, totalHeight - distances[lineIdx + 1], 0], offset);\n        offset += 3;\n        // Bottom left\n        ptsArray.set([0, totalHeight - distances[lineIdx + 1], 0], offset);\n        offset += 3;\n      }\n      const points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n\n      // Create the array of cells: a quad per segment\n      const cellArray = new Uint16Array(5 * nLines);\n      for (let lineIdx = 0, offset = 0, ptIdx = 0; lineIdx < nLines; ++lineIdx) {\n        cellArray.set([4, ptIdx + 3, ptIdx + 2, ptIdx + 1, ptIdx], offset);\n        offset += 5;\n        ptIdx += 4;\n      }\n      const cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n\n      // Create the array of centerline positions (VBO custom attribute)\n      const pointsDataArray = centerline.getPoints();\n      const centerlinePositionArray = new Float32Array(3 * nPts);\n      const pa = new Array(3);\n      const pb = new Array(3);\n      for (let lineIdx = 0, offset = 0; lineIdx < nLines; ++lineIdx) {\n        pointsDataArray.getPoint(lineIdx, pa);\n        pointsDataArray.getPoint(lineIdx + 1, pb);\n\n        // Top left\n        centerlinePositionArray.set(pa, offset);\n        offset += 3;\n        // Top right\n        centerlinePositionArray.set(pa, offset);\n        offset += 3;\n        // Bottom right\n        centerlinePositionArray.set(pb, offset);\n        offset += 3;\n        // Bottom left\n        centerlinePositionArray.set(pb, offset);\n        offset += 3;\n      }\n      const centerlinePosition = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: centerlinePositionArray,\n        name: 'centerlinePosition'\n      });\n\n      // Create the array of quad index:\n      //   0 ____ 1\n      //    |    |\n      //    |____|\n      //   2      3\n      const quadIndexArray = new Float32Array(nPts);\n      for (let lineIdx = 0, offset = 0; lineIdx < nLines; ++lineIdx) {\n        quadIndexArray.set([0,\n        // Top left\n        1,\n        // Top right\n        3,\n        // Bottom right\n        2 // Bottom left\n        ], offset);\n        offset += 4;\n      }\n      const quadIndex = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: quadIndexArray,\n        name: 'quadIndex'\n      });\n      const customAttributes = [centerlinePosition, quadIndex];\n      if (!model.renderable.getUseUniformOrientation()) {\n        // For each quad (i.e. centerline segment), a top and bottom quaternion give the orientation\n        // Send both quaternions to each vertex and use flat interpolation to get them \"as is\" in the fragment shader\n        // The interpolation of the quaternions will occur in the fragment shader (slerp)\n        const orientationQuats = model.renderable.getOrientedCenterline().getOrientations() ?? [];\n        const centerlineTopOrientationArray = new Float32Array(4 * nPts);\n        const centerlineBotOrientationArray = new Float32Array(4 * nPts);\n        for (let quadIdx = 0; quadIdx < nLines; ++quadIdx) {\n          // All vertices of a given quad have the same topDir and botDir\n          // Polyline goes from top to bottom\n          const topQuat = orientationQuats[quadIdx];\n          const botQuat = orientationQuats[quadIdx + 1];\n          for (let pointInQuadIdx = 0; pointInQuadIdx < 4; ++pointInQuadIdx) {\n            const pointIdx = pointInQuadIdx + 4 * quadIdx;\n            const quaternionArrayOffset = 4 * pointIdx;\n            centerlineTopOrientationArray.set(topQuat, quaternionArrayOffset);\n            centerlineBotOrientationArray.set(botQuat, quaternionArrayOffset);\n          }\n        }\n        const centerlineTopOrientation = vtkDataArray.newInstance({\n          numberOfComponents: 4,\n          values: centerlineTopOrientationArray,\n          name: 'centerlineTopOrientation'\n        });\n        const centerlineBotOrientation = vtkDataArray.newInstance({\n          numberOfComponents: 4,\n          values: centerlineBotOrientationArray,\n          name: 'centerlineBotOrientation'\n        });\n        customAttributes.push(centerlineTopOrientation, centerlineBotOrientation);\n      }\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points,\n        customAttributes\n      });\n      model.VBOBuildTime.modified();\n    }\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // presence of centerPoint\n    // value of useUniformOrientation\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    // render pass shader replacement changed\n\n    const tNumComp = model.volumeTexture.getComponents();\n    const iComp = actor.getProperty().getIndependentComponents();\n    const useCenterPoint = !!model.renderable.getCenterPoint();\n    const useUniformOrientation = model.renderable.getUseUniformOrientation();\n    const projectionMode = model.renderable.isProjectionEnabled() && model.renderable.getProjectionMode();\n    if (cellBO.getProgram() === 0 || model.lastUseCenterPoint !== useCenterPoint || model.lastUseUniformOrientation !== useUniformOrientation || model.lastProjectionMode !== projectionMode || model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || model.lastTextureComponents !== tNumComp || model.lastIndependentComponents !== iComp) {\n      model.lastUseCenterPoint = useCenterPoint;\n      model.lastUseUniformOrientation = useUniformOrientation;\n      model.lastProjectionMode = projectionMode;\n      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;\n      model.lastTextureComponents = tNumComp;\n      model.lastIndependentComponents = iComp;\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildShaders = (shaders, ren, actor) => {\n    publicAPI.getShaderTemplate(shaders, ren, actor);\n    publicAPI.replaceShaderValues(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n\n    // https://glmatrix.net/docs/vec3.js.html#line522\n    const applyQuaternionToVecShaderFunction = ['vec3 applyQuaternionToVec(vec4 q, vec3 v) {', '  float uvx = q.y * v.z - q.z * v.y;', '  float uvy = q.z * v.x - q.x * v.z;', '  float uvz = q.x * v.y - q.y * v.x;', '  float uuvx = q.y * uvz - q.z * uvy;', '  float uuvy = q.z * uvx - q.x * uvz;', '  float uuvz = q.x * uvy - q.y * uvx;', '  float w2 = q.w * 2.0;', '  uvx *= w2;', '  uvy *= w2;', '  uvz *= w2;', '  uuvx *= 2.0;', '  uuvy *= 2.0;', '  uuvz *= 2.0;', '  return vec3(v.x + uvx + uuvx, v.y + uvy + uuvy, v.z + uvz + uuvz);', '}'];\n\n    // Vertex shader main replacements\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;\n    const vsColorDec = ['attribute vec3 centerlinePosition;', 'attribute float quadIndex;', 'uniform float width;', 'out vec2 quadOffsetVSOutput;', 'out vec3 centerlinePosVSOutput;'];\n    const useProjection = model.renderable.isProjectionEnabled();\n    const isDirectionUniform = model.renderable.getUseUniformOrientation();\n    if (isDirectionUniform) {\n      vsColorDec.push('out vec3 samplingDirVSOutput;', 'uniform vec4 centerlineOrientation;', 'uniform vec3 tangentDirection;', ...applyQuaternionToVecShaderFunction);\n      if (useProjection) {\n        vsColorDec.push('out vec3 projectionDirVSOutput;', 'uniform vec3 bitangentDirection;');\n      }\n    } else {\n      vsColorDec.push('out vec4 centerlineTopOrientationVSOutput;', 'out vec4 centerlineBotOrientationVSOutput;', 'attribute vec4 centerlineTopOrientation;', 'attribute vec4 centerlineBotOrientation;');\n    }\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', vsColorDec).result;\n    const vsColorImpl = [\n    // quadOffsetVSOutput.x: left = -0.5* width; right = 0.5 * width\n    // quadOffsetVSOutput.y: bottom = 0.0; top = 1.0;\n    'quadOffsetVSOutput = vec2(width * (mod(quadIndex, 2.0) == 0.0 ? -0.5 : 0.5), quadIndex > 1.0 ? 0.0 : 1.0);', 'centerlinePosVSOutput = centerlinePosition;'];\n    if (isDirectionUniform) {\n      vsColorImpl.push('samplingDirVSOutput = applyQuaternionToVec(centerlineOrientation, tangentDirection);');\n      if (useProjection) {\n        vsColorImpl.push('projectionDirVSOutput = applyQuaternionToVec(centerlineOrientation, bitangentDirection);');\n      }\n    } else {\n      vsColorImpl.push('centerlineTopOrientationVSOutput = centerlineTopOrientation;', 'centerlineBotOrientationVSOutput = centerlineBotOrientation;');\n    }\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', vsColorImpl).result;\n\n    // Fragment shader main replacements\n    const tNumComp = model.volumeTexture.getComponents();\n    const iComps = actor.getProperty().getIndependentComponents();\n    let tcoordFSDec = [\n    // used to compute texture coordinates of the sample\n    'uniform mat4 MCTCMatrix; // Model coordinates to texture coordinates', 'in vec2 quadOffsetVSOutput;', 'in vec3 centerlinePosVSOutput;',\n    // volume texture\n    'uniform highp sampler3D volumeTexture;',\n    // color and pwf textures\n    'uniform sampler2D colorTexture1;', 'uniform sampler2D pwfTexture1;',\n    // opacity\n    'uniform float opacity;',\n    // background color (out of volume samples)\n    'uniform vec4 backgroundColor;',\n    // color shift and scale\n    `uniform float cshift0;`, `uniform float cscale0;`,\n    // weighting shift and scale\n    `uniform float pwfshift0;`, `uniform float pwfscale0;`];\n    if (useProjection) {\n      tcoordFSDec.push('uniform vec3 volumeSizeMC;', 'uniform int projectionSlabNumberOfSamples;', 'uniform float projectionConstantOffset;', 'uniform float projectionStepLength;');\n    }\n    if (isDirectionUniform) {\n      tcoordFSDec.push('in vec3 samplingDirVSOutput;');\n      if (useProjection) {\n        tcoordFSDec.push('in vec3 projectionDirVSOutput;');\n      }\n    } else {\n      tcoordFSDec.push('uniform vec3 tangentDirection;', 'in vec4 centerlineTopOrientationVSOutput;', 'in vec4 centerlineBotOrientationVSOutput;', ...applyQuaternionToVecShaderFunction);\n      if (useProjection) {\n        tcoordFSDec.push('uniform vec3 bitangentDirection;');\n      }\n    }\n    const centerPoint = model.renderable.getCenterPoint();\n    if (centerPoint) {\n      tcoordFSDec.push('uniform vec3 globalCenterPoint;');\n    }\n    if (iComps) {\n      for (let comp = 1; comp < tNumComp; comp++) {\n        tcoordFSDec = tcoordFSDec.concat([\n        // color shift and scale\n        `uniform float cshift${comp};`, `uniform float cscale${comp};`,\n        // weighting shift and scale\n        `uniform float pwfshift${comp};`, `uniform float pwfscale${comp};`]);\n      }\n      // the heights defined below are the locations\n      // for the up to four components of the tfuns\n      // the tfuns have a height of 2XnumComps pixels so the\n      // values are computed to hit the middle of the two rows\n      // for that component\n      switch (tNumComp) {\n        case 1:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', '#define height0 0.5']);\n          break;\n        case 2:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', 'uniform float mix1;', '#define height0 0.25', '#define height1 0.75']);\n          break;\n        case 3:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', '#define height0 0.17', '#define height1 0.5', '#define height2 0.83']);\n          break;\n        case 4:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', 'uniform float mix3;', '#define height0 0.125', '#define height1 0.375', '#define height2 0.625', '#define height3 0.875']);\n          break;\n        default:\n          vtkErrorMacro('Unsupported number of independent coordinates.');\n      }\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', tcoordFSDec).result;\n    let tcoordFSImpl = [];\n    if (isDirectionUniform) {\n      tcoordFSImpl.push('vec3 samplingDirection = samplingDirVSOutput;');\n      if (useProjection) {\n        tcoordFSImpl.push('vec3 projectionDirection = projectionDirVSOutput;');\n      }\n    } else {\n      // Slerp or lerp between centerlineTopDirVSOutput and centerlineBotDirVSOutput\n      // We use quadOffsetVSOutput.y: bottom = 0.0; top = 1.0;\n      tcoordFSImpl.push(\n      // Slerp / Lerp\n      'vec4 q0 = centerlineBotOrientationVSOutput;', 'vec4 q1 = centerlineTopOrientationVSOutput;', 'float qCosAngle = dot(q0, q1);', 'vec4 interpolatedOrientation;', 'if (qCosAngle > 0.999 || qCosAngle < -0.999) {', '  // Use LERP instead of SLERP when the two quaternions are close or opposite', '  interpolatedOrientation = normalize(mix(q0, q1, quadOffsetVSOutput.y));', '} else {', '  float omega = acos(qCosAngle);', '  interpolatedOrientation = normalize(sin((1.0 - quadOffsetVSOutput.y) * omega) * q0 + sin(quadOffsetVSOutput.y * omega) * q1);', '}', 'vec3 samplingDirection = applyQuaternionToVec(interpolatedOrientation, tangentDirection);');\n      if (useProjection) {\n        tcoordFSImpl.push('vec3 projectionDirection = applyQuaternionToVec(interpolatedOrientation, bitangentDirection);');\n      }\n    }\n    if (centerPoint) {\n      tcoordFSImpl.push('float baseOffset = dot(samplingDirection, globalCenterPoint - centerlinePosVSOutput);', 'float horizontalOffset = quadOffsetVSOutput.x + baseOffset;');\n    } else {\n      tcoordFSImpl.push('float horizontalOffset = quadOffsetVSOutput.x;');\n    }\n    tcoordFSImpl.push('vec3 volumePosMC = centerlinePosVSOutput + horizontalOffset * samplingDirection;', 'vec3 volumePosTC = (MCTCMatrix * vec4(volumePosMC, 1.0)).xyz;', 'if (any(lessThan(volumePosTC, vec3(0.0))) || any(greaterThan(volumePosTC, vec3(1.0))))', '{', '  // set the background color and exit', '  gl_FragData[0] = backgroundColor;', '  return;', '}');\n    if (useProjection) {\n      const projectionMode = model.renderable.getProjectionMode();\n      switch (projectionMode) {\n        case ProjectionMode.MIN:\n          tcoordFSImpl.push('const vec4 initialProjectionTextureValue = vec4(1.0);');\n          break;\n        case ProjectionMode.MAX:\n        case ProjectionMode.AVERAGE:\n        default:\n          tcoordFSImpl.push('const vec4 initialProjectionTextureValue = vec4(0.0);');\n          break;\n      }\n\n      // Loop on all the samples of the projection\n      tcoordFSImpl.push('vec3 projectionScaledDirection = projectionDirection / volumeSizeMC;', 'vec3 projectionStep = projectionStepLength * projectionScaledDirection;', 'vec3 projectionStartPosition = volumePosTC + projectionConstantOffset * projectionScaledDirection;', 'vec4 tvalue = initialProjectionTextureValue;', 'for (int projectionSampleIdx = 0; projectionSampleIdx < projectionSlabNumberOfSamples; ++projectionSampleIdx) {', '  vec3 projectionSamplePosition = projectionStartPosition + float(projectionSampleIdx) * projectionStep;', '  vec4 sampledTextureValue = texture(volumeTexture, projectionSamplePosition);');\n      switch (projectionMode) {\n        case ProjectionMode.MAX:\n          tcoordFSImpl.push('  tvalue = max(tvalue, sampledTextureValue);');\n          break;\n        case ProjectionMode.MIN:\n          tcoordFSImpl.push('  tvalue = min(tvalue, sampledTextureValue);');\n          break;\n        case ProjectionMode.AVERAGE:\n        default:\n          tcoordFSImpl.push('  tvalue = tvalue + sampledTextureValue;');\n          break;\n      }\n      tcoordFSImpl.push('}');\n\n      // Process the total if needed\n      if (projectionMode === ProjectionMode.AVERAGE) {\n        tcoordFSImpl.push('tvalue = tvalue / float(projectionSlabNumberOfSamples);');\n      }\n    } else {\n      tcoordFSImpl.push('vec4 tvalue = texture(volumeTexture, volumePosTC);');\n    }\n    if (iComps) {\n      const rgba = ['r', 'g', 'b', 'a'];\n      for (let comp = 0; comp < tNumComp; ++comp) {\n        tcoordFSImpl = tcoordFSImpl.concat([`vec3 tcolor${comp} = mix${comp} * texture2D(colorTexture1, vec2(tvalue.${rgba[comp]} * cscale${comp} + cshift${comp}, height${comp})).rgb;`, `float compWeight${comp} = mix${comp} * texture2D(pwfTexture1, vec2(tvalue.${rgba[comp]} * pwfscale${comp} + pwfshift${comp}, height${comp})).r;`]);\n      }\n      switch (tNumComp) {\n        case 1:\n          tcoordFSImpl = tcoordFSImpl.concat(['gl_FragData[0] = vec4(tcolor0.rgb, compWeight0 * opacity);']);\n          break;\n        case 2:\n          tcoordFSImpl = tcoordFSImpl.concat(['float weightSum = compWeight0 + compWeight1;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum))), opacity);']);\n          break;\n        case 3:\n          tcoordFSImpl = tcoordFSImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum))), opacity);']);\n          break;\n        case 4:\n          tcoordFSImpl = tcoordFSImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2 + compWeight3;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum)) + (tcolor3.rgb * (compWeight3 / weightSum))), opacity);']);\n          break;\n        default:\n          vtkErrorMacro('Unsupported number of independent coordinates.');\n      }\n    } else {\n      // dependent components\n      switch (tNumComp) {\n        case 1:\n          tcoordFSImpl = tcoordFSImpl.concat(['// Dependent components', 'float intensity = tvalue.r;', 'vec3 tcolor = texture2D(colorTexture1, vec2(intensity * cscale0 + cshift0, 0.5)).rgb;', 'float scalarOpacity = texture2D(pwfTexture1, vec2(intensity * pwfscale0 + pwfshift0, 0.5)).r;', 'gl_FragData[0] = vec4(tcolor, scalarOpacity * opacity);']);\n          break;\n        case 2:\n          tcoordFSImpl = tcoordFSImpl.concat(['float intensity = tvalue.r*cscale0 + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(intensity, 0.5)).rgb, pwfscale0*tvalue.g + pwfshift0);']);\n          break;\n        case 3:\n          tcoordFSImpl = tcoordFSImpl.concat(['vec4 tcolor = cscale0*tvalue + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, opacity);']);\n          break;\n        default:\n          tcoordFSImpl = tcoordFSImpl.concat(['vec4 tcolor = cscale0*tvalue + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, tcolor.a);']);\n      }\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', tcoordFSImpl).result;\n\n    // Picking shader replacements\n    if (model.haveSeenDepthRequest) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n    publicAPI.replaceShaderClip(shaders, ren, actor);\n    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderClip = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      let numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      if (numClipPlanes > 6) {\n        macro.vtkErrorMacro('OpenGL has a limit of 6 clipping planes');\n        numClipPlanes = 6;\n      }\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'uniform vec4 clipPlanes[6];', 'varying float clipDistancesVSOutput[6];']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'varying float clipDistancesVSOutput[6];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkPolyDataVS;\n    shaders.Fragment = vtkPolyDataFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const cellArrayBufferObject = cellBO.getCABO();\n    if (cellArrayBufferObject.getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (program.isAttributeUsed('vertexMC')) {\n        if (!cellBO.getVAO().addAttributeArray(program, cellArrayBufferObject, 'vertexMC', cellArrayBufferObject.getVertexOffset(), cellArrayBufferObject.getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexMC in shader VAO.');\n        }\n      }\n      // Custom data of the CABO (centerlinePosition, centerlineTopDirection,\n      // centerlineBotDirection, quadIndex and user defined custom data)\n      cellBO.getCABO().getCustomData().forEach(data => {\n        if (data && program.isAttributeUsed(data.name) && !cellBO.getVAO().addAttributeArray(program, cellArrayBufferObject, data.name, data.offset, cellArrayBufferObject.getStride(), model.context.FLOAT, data.components, model.context.FALSE)) {\n          vtkErrorMacro(`Error setting ${data.name} in shader VAO.`);\n        }\n      });\n      cellBO.getAttributeUpdateTime().modified();\n    }\n    const texUnit = model.volumeTexture.getTextureUnit();\n    program.setUniformi('volumeTexture', texUnit);\n    program.setUniformf('width', model.renderable.getWidth());\n    cellBO.getProgram().setUniform4fv('backgroundColor', model.renderable.getBackgroundColor());\n    if (program.isUniformUsed('tangentDirection')) {\n      const tangentDirection = model.renderable.getTangentDirection();\n      cellBO.getProgram().setUniform3fArray('tangentDirection', tangentDirection);\n    }\n    if (program.isUniformUsed('bitangentDirection')) {\n      const bitangentDirection = model.renderable.getBitangentDirection();\n      cellBO.getProgram().setUniform3fArray('bitangentDirection', bitangentDirection);\n    }\n    if (program.isUniformUsed('centerlineOrientation')) {\n      const uniformOrientation = model.renderable.getUniformOrientation();\n      cellBO.getProgram().setUniform4fv('centerlineOrientation', uniformOrientation);\n    }\n    if (program.isUniformUsed('globalCenterPoint')) {\n      const centerPoint = model.renderable.getCenterPoint();\n      program.setUniform3fArray('globalCenterPoint', centerPoint);\n    }\n    // Projection uniforms\n    if (model.renderable.isProjectionEnabled()) {\n      const image = model.currentImageDataInput;\n      const spacing = image.getSpacing();\n      const dimensions = image.getDimensions();\n      const projectionSlabThickness = model.renderable.getProjectionSlabThickness();\n      const projectionSlabNumberOfSamples = model.renderable.getProjectionSlabNumberOfSamples();\n      const volumeSize = vec3.mul([], spacing, dimensions);\n      program.setUniform3fArray('volumeSizeMC', volumeSize);\n      program.setUniformi('projectionSlabNumberOfSamples', projectionSlabNumberOfSamples);\n      const constantOffset = -0.5 * projectionSlabThickness;\n      program.setUniformf('projectionConstantOffset', constantOffset);\n      const stepLength = projectionSlabThickness / (projectionSlabNumberOfSamples - 1);\n      program.setUniformf('projectionStepLength', stepLength);\n    }\n\n    // Model coordinates to image space\n    // getWorldToIndex is badly named and is in fact modelToIndex\n    // MCIC -> Model coordinates to index coordinates\n    // MCTC -> Model coordinates to texture coordinates\n    const image = model.currentImageDataInput;\n    const MCICMatrix = image.getWorldToIndex();\n    const ICTCMatrix = mat4.fromScaling(new Float32Array(16), vec3.inverse([], image.getDimensions()));\n    const MCTCMatrix = mat4.mul(ICTCMatrix, ICTCMatrix, MCICMatrix);\n    program.setUniformMatrix('MCTCMatrix', MCTCMatrix);\n    if (model.haveSeenDepthRequest) {\n      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);\n    }\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      // add all the clipping planes\n      let numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      if (numClipPlanes > 6) {\n        macro.vtkErrorMacro('OpenGL has a limit of 6 clipping planes');\n        numClipPlanes = 6;\n      }\n      const shiftScaleEnabled = cellArrayBufferObject.getCoordShiftAndScaleEnabled();\n      const inverseShiftScaleMatrix = shiftScaleEnabled ? cellArrayBufferObject.getInverseShiftAndScaleMatrix() : null;\n      const mat = inverseShiftScaleMatrix ? mat4.copy(model.imagematinv, actor.getMatrix()) : actor.getMatrix();\n      if (inverseShiftScaleMatrix) {\n        mat4.transpose(mat, mat);\n        mat4.multiply(mat, mat, inverseShiftScaleMatrix);\n        mat4.transpose(mat, mat);\n      }\n\n      // transform crop plane normal with transpose(inverse(worldToIndex))\n      mat4.transpose(model.imagemat, model.currentImageDataInput.getIndexToWorld());\n      mat4.multiply(model.imagematinv, mat, model.imagemat);\n      const planeEquations = [];\n      for (let i = 0; i < numClipPlanes; i++) {\n        const planeEquation = [];\n        model.renderable.getClippingPlaneInDataCoords(model.imagematinv, i, planeEquation);\n        for (let j = 0; j < 4; j++) {\n          planeEquations.push(planeEquation[j]);\n        }\n      }\n      program.setUniformi('numClipPlanes', numClipPlanes);\n      program.setUniform4fv('clipPlanes', planeEquations);\n    }\n\n    // handle coincident\n    if (program.isUniformUsed('coffset')) {\n      const cp = publicAPI.getCoincidentParameters(ren, actor);\n      program.setUniformf('coffset', cp.offset);\n      // cfactor isn't always used when coffset is.\n      if (program.isUniformUsed('cfactor')) {\n        program.setUniformf('cfactor', cp.factor);\n      }\n    }\n  };\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const MCWCMatrix = model.openGLImageSlice.getKeyMatrices().mcwc;\n    const WCPCMatrix = model.openGLCamera.getKeyMatrices(ren).wcpc;\n    mat4.multiply(model.imagemat, WCPCMatrix, MCWCMatrix);\n    if (cellBO.getCABO().getCoordShiftAndScaleEnabled()) {\n      const inverseShiftScaleMat = cellBO.getCABO().getInverseShiftAndScaleMatrix();\n      mat4.multiply(model.imagemat, model.imagemat, inverseShiftScaleMat);\n    }\n    cellBO.getProgram().setUniformMatrix('MCPCMatrix', model.imagemat);\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const ppty = actor.getProperty();\n    const opacity = ppty.getOpacity();\n    program.setUniformf('opacity', opacity);\n\n    // Component mix\n    // Independent components: Mixed according to component weights\n    // Dependent components: Mixed using the following logic:\n    //    - 2 comps => LA\n    //    - 3 comps => RGB + opacity from pwf\n    //    - 4 comps => RGBA\n    const numComp = model.volumeTexture.getComponents();\n    const iComps = ppty.getIndependentComponents();\n    if (iComps) {\n      for (let i = 0; i < numComp; ++i) {\n        program.setUniformf(`mix${i}`, ppty.getComponentWeight(i));\n      }\n    }\n\n    // Color opacity map\n    const volInfo = model.volumeTexture.getVolumeInfo();\n\n    // three levels of shift scale combined into one\n    // for performance in the fragment shader\n    for (let i = 0; i < numComp; i++) {\n      let cw = ppty.getColorWindow();\n      let cl = ppty.getColorLevel();\n      const target = iComps ? i : 0;\n      const cfun = ppty.getRGBTransferFunction(target);\n      if (cfun && ppty.getUseLookupTableScalarRange()) {\n        const cRange = cfun.getRange();\n        cw = cRange[1] - cRange[0];\n        cl = 0.5 * (cRange[1] + cRange[0]);\n      }\n      const scale = volInfo.scale[i] / cw;\n      const shift = (volInfo.offset[i] - cl) / cw + 0.5;\n      program.setUniformf(`cshift${i}`, shift);\n      program.setUniformf(`cscale${i}`, scale);\n    }\n    const texColorUnit = model.colorTexture.getTextureUnit(); // TODO\n    program.setUniformi('colorTexture1', texColorUnit);\n\n    // pwf shift/scale\n    for (let i = 0; i < numComp; i++) {\n      let pwfScale = 1.0;\n      let pwfShift = 0.0;\n      const target = iComps ? i : 0;\n      const pwfun = ppty.getPiecewiseFunction(target);\n      if (pwfun) {\n        const pwfRange = pwfun.getRange();\n        const length = pwfRange[1] - pwfRange[0];\n        const mid = 0.5 * (pwfRange[0] + pwfRange[1]);\n        pwfScale = volInfo.scale[i] / length;\n        pwfShift = (volInfo.offset[i] - mid) / length + 0.5;\n      }\n      program.setUniformf(`pwfshift${i}`, pwfShift);\n      program.setUniformf(`pwfscale${i}`, pwfScale);\n    }\n    const texOpacityUnit = model.pwfTexture.getTextureUnit(); // TODO\n    program.setUniformi('pwfTexture1', texOpacityUnit);\n  };\n  publicAPI.updateShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {\n      const shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      publicAPI.buildShaders(shaders, ren, actor);\n\n      // compile and bind the program if needed\n      const newShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry);\n\n      // if the shader changed reinitialize the VAO\n      if (newShader !== cellBO.getProgram()) {\n        cellBO.setProgram(newShader);\n        // reset the VAO as the shader has changed\n        cellBO.getVAO().releaseGraphicsResources();\n      }\n      cellBO.getShaderSourceTime().modified();\n    } else {\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());\n    }\n    cellBO.getVAO().bind();\n    publicAPI.setMapperShaderParameters(cellBO, ren, actor);\n    publicAPI.setCameraShaderParameters(cellBO, ren, actor);\n    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.delete = macro.chain(() => {\n    if (model._openGLRenderWindow) {\n      unregisterGraphicsResources(model._openGLRenderWindow);\n    }\n  }, publicAPI.delete);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  currentRenderPass: null,\n  volumeTexture: null,\n  colorTexture: null,\n  pwfTexture: null,\n  tris: null,\n  lastHaveSeenDepthRequest: false,\n  haveSeenDepthRequest: false,\n  lastTextureComponents: 0,\n  lastIndependentComponents: 0,\n  imagemat: null,\n  imagematinv: null\n  // _scalars: null,\n  // _colorTransferFunc: null,\n  // _pwFunc: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n\n  // Two inputs: one for the ImageData/Texture and one for the PolyData (centerline)\n  macro.algo(publicAPI, model, 2, 0);\n  model.tris = vtkHelper.newInstance();\n  model.volumeTexture = null;\n  model.colorTexture = null;\n  model.pwfTexture = null;\n  model.imagemat = mat4.identity(new Float64Array(16));\n  model.imagematinv = mat4.identity(new Float64Array(16));\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n\n  // Object methods\n  vtkOpenGLImageCPRMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLImageCPRMapper');\nconst STATIC = {};\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkImageCPRMapper', newInstance);\n\nexport { STATIC, index as default, extend, newInstance };\n","import { mat4, mat3 } from 'gl-matrix';\nimport Constants from '../Core/ImageMapper/Constants.js';\nimport { n as newInstance$1, e as setGet, o as obj, r as vtkErrorMacro$1, h as chain, c as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport vtkHelper from './Helper.js';\nimport { u as uninitializeBounds } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { Filter, Wrap } from './Texture/Constants.js';\nimport { InterpolationType } from '../Core/ImageProperty/Constants.js';\nimport { getTransferFunctionHash } from './RenderWindow/resourceSharingHelper.js';\nimport { v as vtkPolyDataVS } from './glsl/vtkPolyDataVS.glsl.js';\nimport { v as vtkPolyDataFS } from './glsl/vtkPolyDataFS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport '../Core/Mapper/CoincidentTopologyHelper.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nimport { Resolve } from '../Core/Mapper/Static.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nconst {\n  SlicingMode\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// helper methods\n// ----------------------------------------------------------------------------\n\nfunction splitStringOnEnter(inputString) {\n  // Split the input string into an array of lines based on \"Enter\" (newline) characters\n  // Remove any leading or trailing whitespace from each line and filter out empty lines\n  const lines = inputString.split('\\n');\n  const trimmedLines = [];\n  for (let i = 0; i < lines.length; ++i) {\n    const trimmedLine = lines[i].trim();\n    if (trimmedLine.length > 0) {\n      trimmedLines.push(trimmedLine);\n    }\n  }\n  return trimmedLines;\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLImageMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLImageMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLImageMapper');\n  function unregisterGraphicsResources(renderWindow) {\n    // The openGLTexture is not shared\n    model.openGLTexture.releaseGraphicsResources(renderWindow);\n    // All these other resources are shared\n    [model._colorTransferFunc, model._pwFunc, model._labelOutlineThicknessArray].forEach(coreObject => renderWindow.unregisterGraphicsResourceUser(coreObject, publicAPI));\n  }\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.currentRenderPass = null;\n      model.openGLImageSlice = publicAPI.getFirstAncestorOfType('vtkOpenGLImageSlice');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      const oldOglRenderWindow = model._openGLRenderWindow;\n      model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (oldOglRenderWindow && !oldOglRenderWindow.isDeleted() && oldOglRenderWindow !== model._openGLRenderWindow) {\n        // Unregister the mapper when the render window changes\n        unregisterGraphicsResources(oldOglRenderWindow);\n      }\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n      const ren = model._openGLRenderer.getRenderable();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n      // is slice set by the camera\n      if (model.renderable.isA('vtkImageMapper') && model.renderable.getSliceAtFocalPoint()) {\n        model.renderable.setSliceFromCamera(ren.getActiveCamera());\n      }\n    }\n  };\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.currentRenderPass = renderPass;\n      publicAPI.render();\n    }\n  };\n  publicAPI.zBufferPass = prepass => {\n    if (prepass) {\n      model.haveSeenDepthRequest = true;\n      model.renderDepth = true;\n      publicAPI.render();\n      model.renderDepth = false;\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => publicAPI.zBufferPass(prepass);\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.getCoincidentParameters = (ren, actor) => {\n    if (\n    // backwards compat with code that (errorneously) set this to boolean\n    // eslint-disable-next-line eqeqeq\n    model.renderable.getResolveCoincidentTopology() == Resolve.PolygonOffset) {\n      return model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n    }\n    return null;\n  };\n\n  // Renders myself\n  publicAPI.render = () => {\n    const actor = model.openGLImageSlice.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkPolyDataVS;\n    shaders.Fragment = vtkPolyDataFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', 'tcoordVCVSOutput = tcoordMC;').result;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec2 tcoordMC; varying vec2 tcoordVCVSOutput;').result;\n    const tNumComp = model.openGLTexture.getComponents();\n    const iComps = actor.getProperty().getIndependentComponents();\n    let tcoordDec = ['varying vec2 tcoordVCVSOutput;',\n    // color shift and scale\n    'uniform float cshift0;', 'uniform float cscale0;',\n    // pwf shift and scale\n    'uniform float pwfshift0;', 'uniform float pwfscale0;', 'uniform sampler2D texture1;', 'uniform sampler2D colorTexture1;', 'uniform sampler2D pwfTexture1;', 'uniform sampler2D labelOutlineTexture1;', 'uniform float opacity;', 'uniform float outlineOpacity;'];\n    if (iComps) {\n      for (let comp = 1; comp < tNumComp; comp++) {\n        tcoordDec = tcoordDec.concat([\n        // color shift and scale\n        `uniform float cshift${comp};`, `uniform float cscale${comp};`,\n        // weighting shift and scale\n        `uniform float pwfshift${comp};`, `uniform float pwfscale${comp};`]);\n      }\n      // the heights defined below are the locations\n      // for the up to four components of the tfuns\n      // the tfuns have a height of 2XnumComps pixels so the\n      // values are computed to hit the middle of the two rows\n      // for that component\n      switch (tNumComp) {\n        case 1:\n          tcoordDec = tcoordDec.concat(['uniform float mix0;', '#define height0 0.5']);\n          break;\n        case 2:\n          tcoordDec = tcoordDec.concat(['uniform float mix0;', 'uniform float mix1;', '#define height0 0.25', '#define height1 0.75']);\n          break;\n        case 3:\n          tcoordDec = tcoordDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', '#define height0 0.17', '#define height1 0.5', '#define height2 0.83']);\n          break;\n        case 4:\n          tcoordDec = tcoordDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', 'uniform float mix3;', '#define height0 0.125', '#define height1 0.375', '#define height2 0.625', '#define height3 0.875']);\n          break;\n        default:\n          vtkErrorMacro('Unsupported number of independent coordinates.');\n      }\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', tcoordDec).result;\n\n    // check for the outline thickness and opacity\n    const vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n    if (vtkImageLabelOutline === true) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LabelOutline::Dec', ['uniform int outlineThickness;', 'uniform float vpWidth;', 'uniform float vpHeight;', 'uniform float vpOffsetX;', 'uniform float vpOffsetY;', 'uniform mat4 PCWCMatrix;', 'uniform mat4 vWCtoIDX;', 'uniform ivec3 imageDimensions;', 'uniform int sliceAxis;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ImageLabelOutlineOn', '#define vtkImageLabelOutlineOn').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LabelOutlineHelperFunction', ['#ifdef vtkImageLabelOutlineOn', 'vec3 fragCoordToIndexSpace(vec4 fragCoord) {', '  vec4 pcPos = vec4(', '    (fragCoord.x / vpWidth - vpOffsetX - 0.5) * 2.0,', '    (fragCoord.y / vpHeight - vpOffsetY - 0.5) * 2.0,', '    (fragCoord.z - 0.5) * 2.0,', '    1.0);', '', '  vec4 worldCoord = PCWCMatrix * pcPos;', '  vec4 vertex = (worldCoord/worldCoord.w);', '', '  vec3 index = (vWCtoIDX * vertex).xyz;', '', '  // half voxel fix for labelmapOutline', '  return (index + vec3(0.5)) / vec3(imageDimensions);', '}', 'vec2 getSliceCoords(vec3 coord, int axis) {', '  if (axis == 0) return coord.yz;', '  if (axis == 1) return coord.xz;', '  if (axis == 2) return coord.xy;', '}', '#endif']).result;\n    }\n    if (iComps) {\n      const rgba = ['r', 'g', 'b', 'a'];\n      let tcoordImpl = ['vec4 tvalue = texture2D(texture1, tcoordVCVSOutput);'];\n      for (let comp = 0; comp < tNumComp; comp++) {\n        tcoordImpl = tcoordImpl.concat([`vec3 tcolor${comp} = mix${comp} * texture2D(colorTexture1, vec2(tvalue.${rgba[comp]} * cscale${comp} + cshift${comp}, height${comp})).rgb;`, `float compWeight${comp} = mix${comp} * texture2D(pwfTexture1, vec2(tvalue.${rgba[comp]} * pwfscale${comp} + pwfshift${comp}, height${comp})).r;`]);\n      }\n      switch (tNumComp) {\n        case 1:\n          tcoordImpl = tcoordImpl.concat(['gl_FragData[0] = vec4(tcolor0.rgb, opacity);']);\n          break;\n        case 2:\n          tcoordImpl = tcoordImpl.concat(['float weightSum = compWeight0 + compWeight1;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum))), opacity);']);\n          break;\n        case 3:\n          tcoordImpl = tcoordImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum))), opacity);']);\n          break;\n        case 4:\n          tcoordImpl = tcoordImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2 + compWeight3;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum)) + (tcolor3.rgb * (compWeight3 / weightSum))), opacity);']);\n          break;\n        default:\n          vtkErrorMacro('Unsupported number of independent coordinates.');\n      }\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', tcoordImpl).result;\n    } else {\n      // dependent components\n      switch (tNumComp) {\n        case 1:\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', [...splitStringOnEnter(`\n                #ifdef vtkImageLabelOutlineOn\n                  vec3 centerPosIS = fragCoordToIndexSpace(gl_FragCoord);\n                  float centerValue = texture2D(texture1, getSliceCoords(centerPosIS, sliceAxis)).r;\n                  bool pixelOnBorder = false;\n                  vec3 tColor = texture2D(colorTexture1, vec2(centerValue * cscale0 + cshift0, 0.5)).rgb;\n                  float scalarOpacity = texture2D(pwfTexture1, vec2(centerValue * pwfscale0 + pwfshift0, 0.5)).r;\n                  float opacityToUse = scalarOpacity * opacity;\n                  int segmentIndex = int(centerValue * 255.0);\n                  float textureCoordinate = float(segmentIndex - 1) / 1024.0;\n                  float textureValue = texture2D(labelOutlineTexture1, vec2(textureCoordinate, 0.5)).r;\n                  int actualThickness = int(textureValue * 255.0);\n\n                  if (segmentIndex == 0){\n                    gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);\n                    return;\n                  }\n\n                  for (int i = -actualThickness; i <= actualThickness; i++) {\n                    for (int j = -actualThickness; j <= actualThickness; j++) {\n                      if (i == 0 || j == 0) {\n                        continue;\n                      }\n                      vec4 neighborPixelCoord = vec4(gl_FragCoord.x + float(i),\n                        gl_FragCoord.y + float(j),\n                        gl_FragCoord.z, gl_FragCoord.w);\n                      vec3 neighborPosIS = fragCoordToIndexSpace(neighborPixelCoord);\n                      float value = texture2D(texture1, getSliceCoords(neighborPosIS, sliceAxis)).r;\n                      if (value != centerValue) {\n                        pixelOnBorder = true;\n                        break;\n                      }\n                    }\n                    if (pixelOnBorder == true) {\n                      break;\n                    }\n                  }\n                  if (pixelOnBorder == true) {\n                    gl_FragData[0] = vec4(tColor, outlineOpacity);\n                  }\n                  else {\n                    gl_FragData[0] = vec4(tColor, opacityToUse);\n                  }\n                #else\n                  float intensity = texture2D(texture1, tcoordVCVSOutput).r;\n                  vec3 tcolor = texture2D(colorTexture1, vec2(intensity * cscale0 + cshift0, 0.5)).rgb;\n                  float scalarOpacity = texture2D(pwfTexture1, vec2(intensity * pwfscale0 + pwfshift0, 0.5)).r;\n                  gl_FragData[0] = vec4(tcolor, scalarOpacity * opacity);\n                #endif\n                `)]).result;\n          break;\n        case 2:\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', 'float intensity = tcolor.r*cscale0 + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(intensity, 0.5)).rgb, pwfscale0*tcolor.g + pwfshift0);']).result;\n          break;\n        case 3:\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = cscale0*texture2D(texture1, tcoordVCVSOutput.st) + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, opacity);']).result;\n          break;\n        default:\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = cscale0*texture2D(texture1, tcoordVCVSOutput.st) + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, tcolor.a);']).result;\n      }\n    }\n    if (model.haveSeenDepthRequest) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n    publicAPI.replaceShaderClip(shaders, ren, actor);\n    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderClip = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      let numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      if (numClipPlanes > 6) {\n        vtkErrorMacro$1('OpenGL has a limit of 6 clipping planes');\n        numClipPlanes = 6;\n      }\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'uniform vec4 clipPlanes[6];', 'varying float clipDistancesVSOutput[6];']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'varying float clipDistancesVSOutput[6];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    // render pass shader replacement changed\n\n    const tNumComp = model.openGLTexture.getComponents();\n    const iComp = actor.getProperty().getIndependentComponents();\n\n    // has the render pass shader replacement changed? Two options\n    let needRebuild = false;\n    if (!model.currentRenderPass && model.lastRenderPassShaderReplacement || model.currentRenderPass && model.currentRenderPass.getShaderReplacement() !== model.lastRenderPassShaderReplacement) {\n      needRebuild = true;\n    }\n    if (needRebuild || model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getProgram()?.getHandle() === 0 || model.lastTextureComponents !== tNumComp || model.lastIndependentComponents !== iComp) {\n      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;\n      model.lastTextureComponents = tNumComp;\n      model.lastIndependentComponents = iComp;\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateShaders = (cellBO, ren, actor) => {\n    model.lastBoundBO = cellBO;\n\n    // has something changed that would require us to recreate the shader?\n    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {\n      const shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      publicAPI.buildShaders(shaders, ren, actor);\n\n      // compile and bind the program if needed\n      const newShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry);\n\n      // if the shader changed reinitialize the VAO\n      if (newShader !== cellBO.getProgram()) {\n        cellBO.setProgram(newShader);\n        // reset the VAO as the shader has changed\n        cellBO.getVAO().releaseGraphicsResources();\n      }\n      cellBO.getShaderSourceTime().modified();\n    } else {\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());\n    }\n    cellBO.getVAO().bind();\n    publicAPI.setMapperShaderParameters(cellBO, ren, actor);\n    publicAPI.setCameraShaderParameters(cellBO, ren, actor);\n    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    // Now to update the VAO too, if necessary.\n\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (cellBO.getProgram().isAttributeUsed('vertexMC')) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexMC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexMC in shader VAO.');\n        }\n      }\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), model.context.FALSE)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      }\n      cellBO.getAttributeUpdateTime().modified();\n    }\n    const texUnit = model.openGLTexture.getTextureUnit();\n    cellBO.getProgram().setUniformi('texture1', texUnit);\n    const numComp = model.openGLTexture.getComponents();\n    const iComps = actor.getProperty().getIndependentComponents();\n    if (iComps) {\n      for (let i = 0; i < numComp; i++) {\n        cellBO.getProgram().setUniformf(`mix${i}`, actor.getProperty().getComponentWeight(i));\n      }\n    }\n    const oglShiftScale = model.openGLTexture.getShiftAndScale();\n\n    // three levels of shift scale combined into one\n    // for performance in the fragment shader\n    for (let i = 0; i < numComp; i++) {\n      let cw = actor.getProperty().getColorWindow();\n      let cl = actor.getProperty().getColorLevel();\n      const target = iComps ? i : 0;\n      const cfun = actor.getProperty().getRGBTransferFunction(target);\n      if (cfun && actor.getProperty().getUseLookupTableScalarRange()) {\n        const cRange = cfun.getRange();\n        cw = cRange[1] - cRange[0];\n        cl = 0.5 * (cRange[1] + cRange[0]);\n      }\n      const scale = oglShiftScale.scale / cw;\n      const shift = (oglShiftScale.shift - cl) / cw + 0.5;\n      cellBO.getProgram().setUniformf(`cshift${i}`, shift);\n      cellBO.getProgram().setUniformf(`cscale${i}`, scale);\n    }\n\n    // pwf shift/scale\n    for (let i = 0; i < numComp; i++) {\n      let pwfScale = 1.0;\n      let pwfShift = 0.0;\n      const target = iComps ? i : 0;\n      const pwfun = actor.getProperty().getPiecewiseFunction(target);\n      if (pwfun) {\n        const pwfRange = pwfun.getRange();\n        const length = pwfRange[1] - pwfRange[0];\n        const mid = 0.5 * (pwfRange[0] + pwfRange[1]);\n        pwfScale = oglShiftScale.scale / length;\n        pwfShift = (oglShiftScale.shift - mid) / length + 0.5;\n      }\n      cellBO.getProgram().setUniformf(`pwfshift${i}`, pwfShift);\n      cellBO.getProgram().setUniformf(`pwfscale${i}`, pwfScale);\n    }\n    if (model.haveSeenDepthRequest) {\n      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);\n    }\n\n    // handle coincident\n    if (cellBO.getProgram().isUniformUsed('coffset')) {\n      const cp = publicAPI.getCoincidentParameters(ren, actor);\n      cellBO.getProgram().setUniformf('coffset', cp.offset);\n      // cfactor isn't always used when coffset is.\n      if (cellBO.getProgram().isUniformUsed('cfactor')) {\n        cellBO.getProgram().setUniformf('cfactor', cp.factor);\n      }\n    }\n    const texColorUnit = model.colorTexture.getTextureUnit();\n    cellBO.getProgram().setUniformi('colorTexture1', texColorUnit);\n    const texOpacityUnit = model.pwfTexture.getTextureUnit();\n    cellBO.getProgram().setUniformi('pwfTexture1', texOpacityUnit);\n    const outlineThicknessUnit = model.labelOutlineThicknessTexture.getTextureUnit();\n    cellBO.getProgram().setUniformi('labelOutlineTexture1', outlineThicknessUnit);\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      // add all the clipping planes\n      let numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      if (numClipPlanes > 6) {\n        vtkErrorMacro$1('OpenGL has a limit of 6 clipping planes');\n        numClipPlanes = 6;\n      }\n      const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n      const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n      const mat = inverseShiftScaleMatrix ? mat4.copy(model.imagematinv, actor.getMatrix()) : actor.getMatrix();\n      if (inverseShiftScaleMatrix) {\n        mat4.transpose(mat, mat);\n        mat4.multiply(mat, mat, inverseShiftScaleMatrix);\n        mat4.transpose(mat, mat);\n      }\n\n      // transform crop plane normal with transpose(inverse(worldToIndex))\n      mat4.transpose(model.imagemat, model.currentInput.getIndexToWorld());\n      mat4.multiply(model.imagematinv, mat, model.imagemat);\n      const planeEquations = [];\n      for (let i = 0; i < numClipPlanes; i++) {\n        const planeEquation = [];\n        model.renderable.getClippingPlaneInDataCoords(model.imagematinv, i, planeEquation);\n        for (let j = 0; j < 4; j++) {\n          planeEquations.push(planeEquation[j]);\n        }\n      }\n      cellBO.getProgram().setUniformi('numClipPlanes', numClipPlanes);\n      cellBO.getProgram().setUniform4fv('clipPlanes', planeEquations);\n    }\n\n    // outline thickness and opacity\n    const vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n    if (vtkImageLabelOutline === true) {\n      const outlineOpacity = actor.getProperty().getLabelOutlineOpacity();\n      cellBO.getProgram().setUniformf('outlineOpacity', outlineOpacity);\n    }\n  };\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const actMats = model.openGLImageSlice.getKeyMatrices();\n    const image = model.currentInput;\n    const i2wmat4 = image.getIndexToWorld();\n    mat4.multiply(model.imagemat, actMats.mcwc, i2wmat4);\n    const keyMats = model.openGLCamera.getKeyMatrices(ren);\n    mat4.multiply(model.imagemat, keyMats.wcpc, model.imagemat);\n    if (cellBO.getCABO().getCoordShiftAndScaleEnabled()) {\n      const inverseShiftScaleMat = cellBO.getCABO().getInverseShiftAndScaleMatrix();\n      mat4.multiply(model.imagemat, model.imagemat, inverseShiftScaleMat);\n    }\n    program.setUniformMatrix('MCPCMatrix', model.imagemat);\n    const vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n    if (vtkImageLabelOutline === true) {\n      const worldToIndex = image.getWorldToIndex();\n      const imageDimensions = image.getDimensions();\n      let sliceAxis = model.renderable.getClosestIJKAxis().ijkMode;\n\n      // SlicingMode.NONE equates to SlicingMode.K\n      if (sliceAxis === SlicingMode.NONE) {\n        sliceAxis = SlicingMode.K;\n      }\n      program.setUniform3i('imageDimensions', imageDimensions[0], imageDimensions[1], imageDimensions[2]);\n      program.setUniformi('sliceAxis', sliceAxis);\n      program.setUniformMatrix('vWCtoIDX', worldToIndex);\n      const labelOutlineKeyMats = model.openGLCamera.getKeyMatrices(ren);\n\n      // Get the projection coordinate to world coordinate transformation matrix.\n      mat4.invert(model.projectionToWorld, labelOutlineKeyMats.wcpc);\n      model.openGLCamera.getKeyMatrices(ren);\n      program.setUniformMatrix('PCWCMatrix', model.projectionToWorld);\n      const size = publicAPI.getRenderTargetSize();\n      program.setUniformf('vpWidth', size[0]);\n      program.setUniformf('vpHeight', size[1]);\n      const offset = publicAPI.getRenderTargetOffset();\n      program.setUniformf('vpOffsetX', offset[0] / size[0]);\n      program.setUniformf('vpOffsetY', offset[1] / size[1]);\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const ppty = actor.getProperty();\n    const opacity = ppty.getOpacity();\n    program.setUniformf('opacity', opacity);\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n\n    // Bind the OpenGL, this is shared between the different primitive/cell types.\n    model.lastBoundBO = null;\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const gl = model.context;\n\n    // activate the texture\n    model.openGLTexture.activate();\n    model.colorTexture.activate();\n    model.labelOutlineThicknessTexture.activate();\n    model.pwfTexture.activate();\n\n    // draw polygons\n    if (model.tris.getCABO().getElementCount()) {\n      // First we do the triangles, update the shader, set uniforms, etc.\n      publicAPI.updateShaders(model.tris, ren, actor);\n      gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      model.tris.getVAO().release();\n    }\n    model.openGLTexture.deactivate();\n    model.colorTexture.deactivate();\n    model.labelOutlineThicknessTexture.deactivate();\n    model.pwfTexture.deactivate();\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {};\n  publicAPI.renderPiece = (ren, actor) => {\n    // Make sure that we have been properly initialized.\n    // if (ren.getRenderWindow().checkAbortStatus()) {\n    //   return;\n    // }\n\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n    model.renderable.update();\n    model.currentInput = model.renderable.getCurrentImage();\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.computeBounds = (ren, actor) => {\n    if (!publicAPI.getInput()) {\n      uninitializeBounds(model.bounds);\n      return;\n    }\n    model.bounds = publicAPI.getInput().getBounds();\n  };\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime() || !model.openGLTexture?.getHandle() || !model.colorTexture?.getHandle() || !model.labelOutlineThicknessTexture?.getHandle() || !model.pwfTexture?.getHandle();\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const image = model.currentInput;\n    if (!image) {\n      return;\n    }\n    const imgScalars = image.getPointData() && image.getPointData().getScalars();\n    if (!imgScalars) {\n      return;\n    }\n    const dataType = imgScalars.getDataType();\n    const numComp = imgScalars.getNumberOfComponents();\n    const actorProperty = actor.getProperty();\n    const iType = actorProperty.getInterpolationType();\n    const iComps = actorProperty.getIndependentComponents();\n    const numIComps = iComps ? numComp : 1;\n    const textureHeight = iComps ? 2 * numIComps : 1;\n    const colorTransferFunc = actorProperty.getRGBTransferFunction();\n    const cfunToString = getTransferFunctionHash(colorTransferFunc, iComps, numIComps);\n    const cTex = model._openGLRenderWindow.getGraphicsResourceForObject(colorTransferFunc);\n    const reBuildC = !cTex?.oglObject?.getHandle() || cTex?.hash !== cfunToString;\n    if (reBuildC) {\n      model.colorTexture = vtkOpenGLTexture.newInstance({\n        resizable: true\n      });\n      model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      const cWidth = 1024;\n      const cSize = cWidth * textureHeight * 3;\n      const cTable = new Uint8ClampedArray(cSize);\n      // set interpolation on the texture based on property setting\n      if (iType === InterpolationType.NEAREST) {\n        model.colorTexture.setMinificationFilter(Filter.NEAREST);\n        model.colorTexture.setMagnificationFilter(Filter.NEAREST);\n      } else {\n        model.colorTexture.setMinificationFilter(Filter.LINEAR);\n        model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n      }\n      if (colorTransferFunc) {\n        const tmpTable = new Float32Array(cWidth * 3);\n        for (let c = 0; c < numIComps; c++) {\n          const cfun = actorProperty.getRGBTransferFunction(c);\n          const cRange = cfun.getRange();\n          cfun.getTable(cRange[0], cRange[1], cWidth, tmpTable, 1);\n          if (iComps) {\n            for (let i = 0; i < cWidth * 3; i++) {\n              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n              cTable[c * cWidth * 6 + i + cWidth * 3] = 255.0 * tmpTable[i];\n            }\n          } else {\n            for (let i = 0; i < cWidth * 3; i++) {\n              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n            }\n          }\n        }\n        model.colorTexture.resetFormatAndType();\n        model.colorTexture.create2DFromRaw(cWidth, textureHeight, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      } else {\n        for (let i = 0; i < cWidth * 3; ++i) {\n          cTable[i] = 255.0 * i / ((cWidth - 1) * 3);\n          cTable[i + 1] = 255.0 * i / ((cWidth - 1) * 3);\n          cTable[i + 2] = 255.0 * i / ((cWidth - 1) * 3);\n        }\n        model.colorTexture.create2DFromRaw(cWidth, 1, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      }\n      if (colorTransferFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(colorTransferFunc, model.colorTexture, cfunToString);\n        if (colorTransferFunc !== model._colorTransferFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(colorTransferFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._colorTransferFunc, publicAPI);\n        }\n        model._colorTransferFunc = colorTransferFunc;\n      }\n    } else {\n      model.colorTexture = cTex.oglObject;\n    }\n\n    // Build piecewise function buffer.  This buffer is used either\n    // for component weighting or opacity, depending on whether we're\n    // rendering components independently or not.\n    const pwFunc = actorProperty.getPiecewiseFunction();\n    const pwfunToString = getTransferFunctionHash(pwFunc, iComps, numIComps);\n    const pwfTex = model._openGLRenderWindow.getGraphicsResourceForObject(pwFunc);\n    // rebuild opacity tfun?\n    const reBuildPwf = !pwfTex?.oglObject?.getHandle() || pwfTex?.hash !== pwfunToString;\n    if (reBuildPwf) {\n      const pwfWidth = 1024;\n      const pwfSize = pwfWidth * textureHeight;\n      const pwfTable = new Uint8ClampedArray(pwfSize);\n      model.pwfTexture = vtkOpenGLTexture.newInstance({\n        resizable: true\n      });\n      model.pwfTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      // set interpolation on the texture based on property setting\n      if (iType === InterpolationType.NEAREST) {\n        model.pwfTexture.setMinificationFilter(Filter.NEAREST);\n        model.pwfTexture.setMagnificationFilter(Filter.NEAREST);\n      } else {\n        model.pwfTexture.setMinificationFilter(Filter.LINEAR);\n        model.pwfTexture.setMagnificationFilter(Filter.LINEAR);\n      }\n      if (pwFunc) {\n        const pwfFloatTable = new Float32Array(pwfSize);\n        const tmpTable = new Float32Array(pwfWidth);\n        for (let c = 0; c < numIComps; ++c) {\n          const pwfun = actorProperty.getPiecewiseFunction(c);\n          if (pwfun === null) {\n            // Piecewise constant max if no function supplied for this component\n            pwfFloatTable.fill(1.0);\n          } else {\n            const pwfRange = pwfun.getRange();\n            pwfun.getTable(pwfRange[0], pwfRange[1], pwfWidth, tmpTable, 1);\n            // adjust for sample distance etc\n            if (iComps) {\n              for (let i = 0; i < pwfWidth; i++) {\n                pwfFloatTable[c * pwfWidth * 2 + i] = tmpTable[i];\n                pwfFloatTable[c * pwfWidth * 2 + i + pwfWidth] = tmpTable[i];\n              }\n            } else {\n              for (let i = 0; i < pwfWidth; i++) {\n                pwfFloatTable[c * pwfWidth * 2 + i] = tmpTable[i];\n              }\n            }\n          }\n        }\n        model.pwfTexture.resetFormatAndType();\n        model.pwfTexture.create2DFromRaw(pwfWidth, textureHeight, 1, VtkDataTypes.FLOAT, pwfFloatTable);\n      } else {\n        // default is opaque\n        pwfTable.fill(255.0);\n        model.pwfTexture.create2DFromRaw(pwfWidth, 1, 1, VtkDataTypes.UNSIGNED_CHAR, pwfTable);\n      }\n      if (pwFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(pwFunc, model.pwfTexture, pwfunToString);\n        if (pwFunc !== model._pwFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(pwFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._pwFunc, publicAPI);\n        }\n        model._pwFunc = pwFunc;\n      }\n    } else {\n      model.pwfTexture = pwfTex.oglObject;\n    }\n\n    // Build outline thickness buffer\n    publicAPI.updatelabelOutlineThicknessTexture(actor);\n\n    // Find what IJK axis and what direction to slice along\n    const {\n      ijkMode\n    } = model.renderable.getClosestIJKAxis();\n\n    // Find the IJK slice\n    let slice = model.renderable.getSlice();\n    if (ijkMode !== model.renderable.getSlicingMode()) {\n      // If not IJK slicing, get the IJK slice from the XYZ position/slice\n      slice = model.renderable.getSliceAtPosition(slice);\n    }\n\n    // Use sub-Slice number/offset if mapper being used is vtkImageArrayMapper,\n    // since this mapper uses a collection of vtkImageData (and not just a single vtkImageData).\n    const nSlice = model.renderable.isA('vtkImageArrayMapper') ? model.renderable.getSubSlice() // get subSlice of the current (possibly multi-frame) image\n    : Math.round(slice);\n\n    // Find sliceOffset\n    const ext = image.getExtent();\n    let sliceOffset;\n    if (ijkMode === SlicingMode.I) {\n      sliceOffset = nSlice - ext[0];\n    }\n    if (ijkMode === SlicingMode.J) {\n      sliceOffset = nSlice - ext[2];\n    }\n    if (ijkMode === SlicingMode.K || ijkMode === SlicingMode.NONE) {\n      sliceOffset = nSlice - ext[4];\n    }\n\n    // rebuild the VBO if the data has changed\n    const toString = `${slice}A${image.getMTime()}A${imgScalars.getMTime()}B${publicAPI.getMTime()}C${model.renderable.getSlicingMode()}D${actor.getProperty().getInterpolationType()}`;\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      const dims = image.getDimensions();\n      if (!model.openGLTexture) {\n        model.openGLTexture = vtkOpenGLTexture.newInstance({\n          resizable: true\n        });\n      }\n      model.openGLTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      // Use norm16 for scalar texture if the extension is available\n      model.openGLTexture.setOglNorm16Ext(model.context.getExtension('EXT_texture_norm16'));\n      if (iType === InterpolationType.NEAREST) {\n        if (new Set([1, 3, 4]).has(numComp) && dataType === VtkDataTypes.UNSIGNED_CHAR && !iComps) {\n          model.openGLTexture.setGenerateMipmap(true);\n          model.openGLTexture.setMinificationFilter(Filter.NEAREST);\n        } else {\n          model.openGLTexture.setMinificationFilter(Filter.NEAREST);\n        }\n        model.openGLTexture.setMagnificationFilter(Filter.NEAREST);\n      } else {\n        if (numComp === 4 && dataType === VtkDataTypes.UNSIGNED_CHAR && !iComps) {\n          model.openGLTexture.setGenerateMipmap(true);\n          model.openGLTexture.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        } else {\n          model.openGLTexture.setMinificationFilter(Filter.LINEAR);\n        }\n        model.openGLTexture.setMagnificationFilter(Filter.LINEAR);\n      }\n      model.openGLTexture.setWrapS(Wrap.CLAMP_TO_EDGE);\n      model.openGLTexture.setWrapT(Wrap.CLAMP_TO_EDGE);\n      const sliceSize = dims[0] * dims[1] * numComp;\n      const ptsArray = new Float32Array(12);\n      const tcoordArray = new Float32Array(8);\n      for (let i = 0; i < 4; i++) {\n        tcoordArray[i * 2] = i % 2 ? 1.0 : 0.0;\n        tcoordArray[i * 2 + 1] = i > 1 ? 1.0 : 0.0;\n      }\n\n      // Determine depth position of the slicing plane in the scene.\n      // Slicing modes X, Y, and Z use a continuous axis position, whereas\n      // slicing modes I, J, and K should use discrete positions.\n      const sliceDepth = [SlicingMode.X, SlicingMode.Y, SlicingMode.Z].includes(model.renderable.getSlicingMode()) ? slice : nSlice;\n      const spatialExt = image.getSpatialExtent();\n      const basicScalars = imgScalars.getData();\n      let scalars = null;\n      // Get right scalars according to slicing mode\n      if (ijkMode === SlicingMode.I) {\n        scalars = new basicScalars.constructor(dims[2] * dims[1] * numComp);\n        let id = 0;\n        for (let k = 0; k < dims[2]; k++) {\n          for (let j = 0; j < dims[1]; j++) {\n            let bsIdx = (sliceOffset + j * dims[0] + k * dims[0] * dims[1]) * numComp;\n            id = (k * dims[1] + j) * numComp;\n            const end = bsIdx + numComp;\n            while (bsIdx < end) {\n              scalars[id++] = basicScalars[bsIdx++];\n            }\n          }\n        }\n        dims[0] = dims[1];\n        dims[1] = dims[2];\n        ptsArray[0] = sliceDepth;\n        ptsArray[1] = spatialExt[2];\n        ptsArray[2] = spatialExt[4];\n        ptsArray[3] = sliceDepth;\n        ptsArray[4] = spatialExt[3];\n        ptsArray[5] = spatialExt[4];\n        ptsArray[6] = sliceDepth;\n        ptsArray[7] = spatialExt[2];\n        ptsArray[8] = spatialExt[5];\n        ptsArray[9] = sliceDepth;\n        ptsArray[10] = spatialExt[3];\n        ptsArray[11] = spatialExt[5];\n      } else if (ijkMode === SlicingMode.J) {\n        scalars = new basicScalars.constructor(dims[2] * dims[0] * numComp);\n        let id = 0;\n        for (let k = 0; k < dims[2]; k++) {\n          for (let i = 0; i < dims[0]; i++) {\n            let bsIdx = (i + sliceOffset * dims[0] + k * dims[0] * dims[1]) * numComp;\n            id = (k * dims[0] + i) * numComp;\n            const end = bsIdx + numComp;\n            while (bsIdx < end) {\n              scalars[id++] = basicScalars[bsIdx++];\n            }\n          }\n        }\n        dims[1] = dims[2];\n        ptsArray[0] = spatialExt[0];\n        ptsArray[1] = sliceDepth;\n        ptsArray[2] = spatialExt[4];\n        ptsArray[3] = spatialExt[1];\n        ptsArray[4] = sliceDepth;\n        ptsArray[5] = spatialExt[4];\n        ptsArray[6] = spatialExt[0];\n        ptsArray[7] = sliceDepth;\n        ptsArray[8] = spatialExt[5];\n        ptsArray[9] = spatialExt[1];\n        ptsArray[10] = sliceDepth;\n        ptsArray[11] = spatialExt[5];\n      } else if (ijkMode === SlicingMode.K || ijkMode === SlicingMode.NONE) {\n        scalars = basicScalars.subarray(sliceOffset * sliceSize, (sliceOffset + 1) * sliceSize);\n        ptsArray[0] = spatialExt[0];\n        ptsArray[1] = spatialExt[2];\n        ptsArray[2] = sliceDepth;\n        ptsArray[3] = spatialExt[1];\n        ptsArray[4] = spatialExt[2];\n        ptsArray[5] = sliceDepth;\n        ptsArray[6] = spatialExt[0];\n        ptsArray[7] = spatialExt[3];\n        ptsArray[8] = sliceDepth;\n        ptsArray[9] = spatialExt[1];\n        ptsArray[10] = spatialExt[3];\n        ptsArray[11] = sliceDepth;\n      } else {\n        vtkErrorMacro('Reformat slicing not yet supported.');\n      }\n\n      /**\n       *\n       * Fetch the ranges of the source volume, `imgScalars`, and use them when\n       * creating the texture. Whilst the pre-calculated ranges may not be\n       * strictly correct for the slice, it is guaranteed to be within the\n       * source volume's range.\n       *\n       * There is a significant performance improvement by pre-setting the range\n       * of the scalars array particularly when scrolling through the source\n       * volume as there is no need to calculate the range of the slice scalar.\n       *\n       * @type{ import(\"../../../interfaces\").vtkRange[] }\n       */\n      const ranges = imgScalars.getRanges();\n\n      // Don't share this resource as `scalars` is created in this function\n      // so it is impossible to share\n      model.openGLTexture.resetFormatAndType();\n      model.openGLTexture.create2DFilterableFromRaw(dims[0], dims[1], numComp, imgScalars.getDataType(), scalars, model.renderable.getPreferSizeOverAccuracy?.(), ranges);\n      model.openGLTexture.activate();\n      model.openGLTexture.sendParameters();\n      model.openGLTexture.deactivate();\n      const points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n      const tcoords = vtkDataArray.newInstance({\n        numberOfComponents: 2,\n        values: tcoordArray\n      });\n      tcoords.setName('tcoords');\n      const cellArray = new Uint16Array(8);\n      cellArray[0] = 3;\n      cellArray[1] = 0;\n      cellArray[2] = 1;\n      cellArray[3] = 3;\n      cellArray[4] = 3;\n      cellArray[5] = 0;\n      cellArray[6] = 3;\n      cellArray[7] = 2;\n      const cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points,\n        tcoords,\n        cellOffset: 0\n      });\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n  publicAPI.updatelabelOutlineThicknessTexture = image => {\n    const labelOutlineThicknessArray = image.getProperty().getLabelOutlineThicknessByReference();\n    const lTex = model._openGLRenderWindow.getGraphicsResourceForObject(labelOutlineThicknessArray);\n\n    // compute the join of the labelOutlineThicknessArray so that\n    // we can use it to decide whether to rebuild the labelOutlineThicknessTexture\n    // or not\n    const toString = `${labelOutlineThicknessArray.join('-')}`;\n    const reBuildL = !lTex?.oglObject?.getHandle() || lTex?.hash !== toString;\n    if (reBuildL) {\n      const lWidth = 1024;\n      const lHeight = 1;\n      const lSize = lWidth * lHeight;\n      const lTable = new Uint8Array(lSize);\n\n      // Assuming labelOutlineThicknessArray contains the thickness for each segment\n      for (let i = 0; i < lWidth; ++i) {\n        // Retrieve the thickness value for the current segment index.\n        // If the value is undefined, use the first element's value as a default, otherwise use the value (even if 0)\n        const thickness = typeof labelOutlineThicknessArray[i] !== 'undefined' ? labelOutlineThicknessArray[i] : labelOutlineThicknessArray[0];\n        lTable[i] = thickness;\n      }\n      model.labelOutlineThicknessTexture = vtkOpenGLTexture.newInstance({\n        resizable: false\n      });\n      model.labelOutlineThicknessTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.labelOutlineThicknessTexture.resetFormatAndType();\n      model.labelOutlineThicknessTexture.setMinificationFilter(Filter.NEAREST);\n      model.labelOutlineThicknessTexture.setMagnificationFilter(Filter.NEAREST);\n\n      // Create a 2D texture (acting as 1D) from the raw data\n      model.labelOutlineThicknessTexture.create2DFromRaw(lWidth, lHeight, 1, VtkDataTypes.UNSIGNED_CHAR, lTable);\n      if (labelOutlineThicknessArray) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(labelOutlineThicknessArray, model.labelOutlineThicknessTexture, toString);\n        if (labelOutlineThicknessArray !== model._labelOutlineThicknessArray) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(labelOutlineThicknessArray, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._labelOutlineThicknessArray, publicAPI);\n        }\n        model._labelOutlineThicknessArray = labelOutlineThicknessArray;\n      }\n    } else {\n      model.labelOutlineThicknessTexture = lTex.oglObject;\n    }\n  };\n  publicAPI.getRenderTargetSize = () => {\n    if (model._useSmallViewport) {\n      return [model._smallViewportWidth, model._smallViewportHeight];\n    }\n    const {\n      usize,\n      vsize\n    } = model._openGLRenderer.getTiledSizeAndOrigin();\n    return [usize, vsize];\n  };\n  publicAPI.getRenderTargetOffset = () => {\n    const {\n      lowerLeftU,\n      lowerLeftV\n    } = model._openGLRenderer.getTiledSizeAndOrigin();\n    return [lowerLeftU, lowerLeftV];\n  };\n  publicAPI.delete = chain(() => {\n    if (model._openGLRenderWindow) {\n      unregisterGraphicsResources(model._openGLRenderWindow);\n    }\n  }, publicAPI.delete);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  openGLTexture: null,\n  tris: null,\n  imagemat: null,\n  imagematinv: null,\n  colorTexture: null,\n  pwfTexture: null,\n  labelOutlineThicknessTexture: null,\n  labelOutlineThicknessTextureString: null,\n  lastHaveSeenDepthRequest: false,\n  haveSeenDepthRequest: false,\n  lastTextureComponents: 0\n  // _scalars: null,\n  // _colorTransferFunc: null,\n  // _pwFunc: null,\n  // _labelOutlineThicknessArray: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.tris = vtkHelper.newInstance();\n  model.imagemat = mat4.identity(new Float64Array(16));\n  model.imagematinv = mat4.identity(new Float64Array(16));\n  model.projectionToWorld = mat4.identity(new Float64Array(16));\n  model.idxToView = mat4.identity(new Float64Array(16));\n  model.idxNormalMatrix = mat3.identity(new Float64Array(9));\n  model.modelToView = mat4.identity(new Float64Array(16));\n  model.projectionToView = mat4.identity(new Float64Array(16));\n\n  // Build VTK API\n  setGet(publicAPI, model, []);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime);\n\n  // Object methods\n  vtkOpenGLImageMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLImageMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkAbstractImageMapper', newInstance);\n\nexport { vtkImageMapper as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, g as get, h as chain, c as macro } from '../../macros2.js';\nimport { mat4, mat3, vec3 } from 'gl-matrix';\nimport vtkClosedPolyLineToSurfaceFilter from '../../Filters/General/ClosedPolyLineToSurfaceFilter.js';\nimport vtkCutter from '../../Filters/Core/Cutter.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkImageDataOutlineFilter from '../../Filters/General/ImageDataOutlineFilter.js';\nimport { f as vtkMath } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkPlane from '../../Common/DataModel/Plane.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkTransform from '../../Common/Transform/Transform.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { getImageDataHash, getTransferFunctionHash } from './RenderWindow/resourceSharingHelper.js';\nimport { v as vtkImageResliceMapperVS } from './glsl/vtkImageResliceMapperVS.glsl.js';\nimport { v as vtkImageResliceMapperFS } from './glsl/vtkImageResliceMapperFS.glsl.js';\nimport { Filter } from './Texture/Constants.js';\nimport { InterpolationType } from '../Core/ImageProperty/Constants.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nimport '../Core/Mapper/CoincidentTopologyHelper.js';\nimport { Resolve } from '../Core/Mapper/Static.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// helper methods\n// ----------------------------------------------------------------------------\n\nfunction safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n  matrixType.identity(tmpMat);\n  return matrixArray.reduce((res, matrix, index) => {\n    if (index === 0) {\n      return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n    }\n    return matrix ? matrixType.multiply(res, res, matrix) : res;\n  }, tmpMat);\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLImageResliceMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLImageResliceMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLImageResliceMapper');\n  function unregisterGraphicsResources(renderWindow) {\n    [model._scalars, model._colorTransferFunc, model._pwFunc].forEach(coreObject => renderWindow.unregisterGraphicsResourceUser(coreObject, publicAPI));\n  }\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.currentRenderPass = null;\n      model._openGLImageSlice = publicAPI.getFirstAncestorOfType('vtkOpenGLImageSlice');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      const ren = model._openGLRenderer.getRenderable();\n      model._openGLCamera = model._openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n      const oldOglRenderWindow = model._openGLRenderWindow;\n      model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (oldOglRenderWindow && !oldOglRenderWindow.isDeleted() && oldOglRenderWindow !== model._openGLRenderWindow) {\n        // Unregister the mapper when the render window changes\n        unregisterGraphicsResources(oldOglRenderWindow);\n      }\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n    }\n  };\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.currentRenderPass = renderPass;\n      publicAPI.render();\n    }\n  };\n  publicAPI.zBufferPass = prepass => {\n    if (prepass) {\n      model.haveSeenDepthRequest = true;\n      model.renderDepth = true;\n      publicAPI.render();\n      model.renderDepth = false;\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => publicAPI.zBufferPass(prepass);\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.getCoincidentParameters = (ren, actor) => {\n    if (\n    // backwards compat with code that (errorneously) set this to boolean\n    // eslint-disable-next-line eqeqeq\n    model.renderable.getResolveCoincidentTopology() == Resolve.PolygonOffset) {\n      return model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n    }\n    return null;\n  };\n\n  // Renders myself\n  publicAPI.render = () => {\n    const actor = model._openGLImageSlice.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n    model.renderable.update();\n    model.currentInput = model.renderable.getInputData();\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n    publicAPI.updateResliceGeometry();\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n    const iType = actor.getProperty().getInterpolationType();\n    if (iType === InterpolationType.NEAREST) {\n      model.openGLTexture.setMinificationFilter(Filter.NEAREST);\n      model.openGLTexture.setMagnificationFilter(Filter.NEAREST);\n      model.colorTexture.setMinificationFilter(Filter.NEAREST);\n      model.colorTexture.setMagnificationFilter(Filter.NEAREST);\n      model.pwfTexture.setMinificationFilter(Filter.NEAREST);\n      model.pwfTexture.setMagnificationFilter(Filter.NEAREST);\n    } else {\n      model.openGLTexture.setMinificationFilter(Filter.LINEAR);\n      model.openGLTexture.setMagnificationFilter(Filter.LINEAR);\n      model.colorTexture.setMinificationFilter(Filter.LINEAR);\n      model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n      model.pwfTexture.setMinificationFilter(Filter.LINEAR);\n      model.pwfTexture.setMagnificationFilter(Filter.LINEAR);\n    }\n\n    // No buffer objects bound.\n    model.lastBoundBO = null;\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const gl = model.context;\n\n    // render the texture\n    model.openGLTexture.activate();\n    model.colorTexture.activate();\n    model.pwfTexture.activate();\n\n    // update shaders if required\n    publicAPI.updateShaders(model.tris, ren, actor);\n\n    // Finally draw\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    model.tris.getVAO().release();\n    model.openGLTexture.deactivate();\n    model.colorTexture.deactivate();\n    model.pwfTexture.deactivate();\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {};\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffer objects if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime() || model.VBOBuildTime.getMTime() < model.resliceGeom.getMTime() || !model.openGLTexture?.getHandle() || !model.colorTexture?.getHandle() || !model.pwfTexture?.getHandle();\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const image = model.currentInput;\n    if (!image) {\n      return;\n    }\n    const scalars = image.getPointData()?.getScalars();\n    if (!scalars) {\n      return;\n    }\n    const numComp = scalars.getNumberOfComponents();\n    let toString = getImageDataHash(image, scalars);\n    const tex = model._openGLRenderWindow.getGraphicsResourceForObject(scalars);\n    const reBuildTex = !tex?.oglObject?.getHandle() || tex?.hash !== toString;\n    const updatedExtents = model.renderable.getUpdatedExtents();\n    const hasUpdatedExtents = !!updatedExtents.length;\n    if (reBuildTex && !hasUpdatedExtents) {\n      model.openGLTexture = vtkOpenGLTexture.newInstance();\n      model.openGLTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      // Build the image scalar texture\n      // Use norm16 for the 3D texture if the extension is available\n      model.openGLTexture.setOglNorm16Ext(model.context.getExtension('EXT_texture_norm16'));\n      model.openGLTexture.resetFormatAndType();\n\n      // Build the image scalar texture\n      const dims = image.getDimensions();\n      model.openGLTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, false, updatedExtents);\n      model._openGLRenderWindow.setGraphicsResourceForObject(scalars, model.openGLTexture, toString);\n      if (scalars !== model._scalars) {\n        model._openGLRenderWindow.registerGraphicsResourceUser(scalars, publicAPI);\n        model._openGLRenderWindow.unregisterGraphicsResourceUser(model._scalars, publicAPI);\n      }\n      model._scalars = scalars;\n    } else {\n      model.openGLTexture = tex.oglObject;\n    }\n    if (hasUpdatedExtents) {\n      // If hasUpdatedExtents, then the texture is partially updated.\n      // clear the array to acknowledge the update.\n      model.renderable.setUpdatedExtents([]);\n      const dims = image.getDimensions();\n      model.openGLTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, false, updatedExtents);\n    }\n    const ppty = actor.getProperty();\n    const iComps = ppty.getIndependentComponents();\n    const numIComps = iComps ? numComp : 1;\n    const textureHeight = iComps ? 2 * numIComps : 1;\n    const colorTransferFunc = ppty.getRGBTransferFunction();\n    toString = getTransferFunctionHash(colorTransferFunc, iComps, numIComps);\n    const cTex = model._openGLRenderWindow.getGraphicsResourceForObject(colorTransferFunc);\n    const reBuildC = !cTex?.oglObject?.getHandle() || cTex?.hash !== toString;\n    if (reBuildC) {\n      const cWidth = 1024;\n      const cSize = cWidth * textureHeight * 3;\n      const cTable = new Uint8ClampedArray(cSize);\n      model.colorTexture = vtkOpenGLTexture.newInstance();\n      model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      if (colorTransferFunc) {\n        const tmpTable = new Float32Array(cWidth * 3);\n        for (let c = 0; c < numIComps; c++) {\n          const cfun = ppty.getRGBTransferFunction(c);\n          const cRange = cfun.getRange();\n          cfun.getTable(cRange[0], cRange[1], cWidth, tmpTable, 1);\n          if (iComps) {\n            for (let i = 0; i < cWidth * 3; i++) {\n              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n              cTable[c * cWidth * 6 + i + cWidth * 3] = 255.0 * tmpTable[i];\n            }\n          } else {\n            for (let i = 0; i < cWidth * 3; i++) {\n              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n            }\n          }\n        }\n        model.colorTexture.resetFormatAndType();\n        model.colorTexture.create2DFromRaw(cWidth, textureHeight, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      } else {\n        for (let i = 0; i < cWidth * 3; ++i) {\n          cTable[i] = 255.0 * i / ((cWidth - 1) * 3);\n          cTable[i + 1] = 255.0 * i / ((cWidth - 1) * 3);\n          cTable[i + 2] = 255.0 * i / ((cWidth - 1) * 3);\n        }\n        model.colorTexture.resetFormatAndType();\n        model.colorTexture.create2DFromRaw(cWidth, 1, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      }\n      if (colorTransferFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(colorTransferFunc, model.colorTexture, toString);\n        if (colorTransferFunc !== model._colorTransferFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(colorTransferFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._colorTransferFunc, publicAPI);\n        }\n        model._colorTransferFunc = colorTransferFunc;\n      }\n    } else {\n      model.colorTexture = cTex.oglObject;\n    }\n\n    // Build piecewise function buffer.  This buffer is used either\n    // for component weighting or opacity, depending on whether we're\n    // rendering components independently or not.\n    const pwFunc = ppty.getPiecewiseFunction();\n    toString = getTransferFunctionHash(pwFunc, iComps, numIComps);\n    const pwfTex = model._openGLRenderWindow.getGraphicsResourceForObject(pwFunc);\n    // rebuild opacity tfun?\n    const reBuildPwf = !pwfTex?.oglObject?.getHandle() || pwfTex?.hash !== toString;\n    if (reBuildPwf) {\n      const pwfWidth = 1024;\n      const pwfSize = pwfWidth * textureHeight;\n      const pwfTable = new Uint8ClampedArray(pwfSize);\n      model.pwfTexture = vtkOpenGLTexture.newInstance();\n      model.pwfTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      if (pwFunc) {\n        const pwfFloatTable = new Float32Array(pwfSize);\n        const tmpTable = new Float32Array(pwfWidth);\n        for (let c = 0; c < numIComps; ++c) {\n          const pwfun = ppty.getPiecewiseFunction(c);\n          if (pwfun === null) {\n            // Piecewise constant max if no function supplied for this component\n            pwfFloatTable.fill(1.0);\n          } else {\n            const pwfRange = pwfun.getRange();\n            pwfun.getTable(pwfRange[0], pwfRange[1], pwfWidth, tmpTable, 1);\n            // adjust for sample distance etc\n            if (iComps) {\n              for (let i = 0; i < pwfWidth; i++) {\n                pwfFloatTable[c * pwfWidth * 2 + i] = tmpTable[i];\n                pwfFloatTable[c * pwfWidth * 2 + i + pwfWidth] = tmpTable[i];\n              }\n            } else {\n              for (let i = 0; i < pwfWidth; i++) {\n                pwfFloatTable[c * pwfWidth * 2 + i] = tmpTable[i];\n              }\n            }\n          }\n        }\n        model.pwfTexture.resetFormatAndType();\n        model.pwfTexture.create2DFromRaw(pwfWidth, textureHeight, 1, VtkDataTypes.FLOAT, pwfFloatTable);\n      } else {\n        // default is opaque\n        pwfTable.fill(255.0);\n        model.pwfTexture.resetFormatAndType();\n        model.pwfTexture.create2DFromRaw(pwfWidth, 1, 1, VtkDataTypes.UNSIGNED_CHAR, pwfTable);\n      }\n      if (pwFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(pwFunc, model.pwfTexture, toString);\n        if (pwFunc !== model._pwFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(pwFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._pwFunc, publicAPI);\n        }\n        model._pwFunc = pwFunc;\n      }\n    } else {\n      model.pwfTexture = pwfTex.oglObject;\n    }\n    const vboString = `${model.resliceGeom.getMTime()}A${model.renderable.getSlabThickness()}`;\n    if (!model.tris.getCABO().getElementCount() || model.VBOBuildString !== vboString) {\n      const points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: model.resliceGeom.getPoints().getData()\n      });\n      points.setName('points');\n      const cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: model.resliceGeom.getPolys().getData()\n      });\n      const options = {\n        points,\n        cellOffset: 0\n      };\n      if (model.renderable.getSlabThickness() > 0.0) {\n        const n = model.resliceGeom.getPointData().getNormals();\n        if (!n) {\n          vtkErrorMacro('Slab mode requested without normals');\n        } else {\n          options.normals = n;\n        }\n      }\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, options);\n    }\n    model.VBOBuildString = vboString;\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.updateShaders = (cellBO, ren, actor) => {\n    model.lastBoundBO = cellBO;\n\n    // has something changed that would require us to recreate the shader?\n    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {\n      const shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      publicAPI.buildShaders(shaders, ren, actor);\n\n      // compile and bind the program if needed\n      const newShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry);\n\n      // if the shader changed reinitialize the VAO\n      if (newShader !== cellBO.getProgram()) {\n        cellBO.setProgram(newShader);\n        // reset the VAO as the shader has changed\n        cellBO.getVAO().releaseGraphicsResources();\n      }\n      cellBO.getShaderSourceTime().modified();\n    } else {\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());\n    }\n    cellBO.getVAO().bind();\n    publicAPI.setMapperShaderParameters(cellBO, ren, actor);\n    publicAPI.setCameraShaderParameters(cellBO, ren, actor);\n    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      // Set the 3D texture\n      if (program.isUniformUsed('texture1')) {\n        program.setUniformi('texture1', model.openGLTexture.getTextureUnit());\n      }\n\n      // Set the plane vertex attributes\n      if (program.isAttributeUsed('vertexWC')) {\n        if (!cellBO.getVAO().addAttributeArray(program, cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexWC in shader VAO.');\n        }\n      }\n\n      // If we are doing slab mode, we need normals\n      if (program.isAttributeUsed('normalWC')) {\n        if (!cellBO.getVAO().addAttributeArray(program, cellBO.getCABO(), 'normalWC', cellBO.getCABO().getNormalOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting normalWC in shader VAO.');\n        }\n      }\n      if (program.isUniformUsed('slabThickness')) {\n        program.setUniformf('slabThickness', model.renderable.getSlabThickness());\n      }\n      if (program.isUniformUsed('spacing')) {\n        program.setUniform3fv('spacing', model.currentInput.getSpacing());\n      }\n      if (program.isUniformUsed('slabType')) {\n        program.setUniformi('slabType', model.renderable.getSlabType());\n      }\n      if (program.isUniformUsed('slabType')) {\n        program.setUniformi('slabType', model.renderable.getSlabType());\n      }\n      if (program.isUniformUsed('slabTrapezoid')) {\n        program.setUniformi('slabTrapezoid', model.renderable.getSlabTrapezoidIntegration());\n      }\n      const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n      const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n\n      // Set the world->texture matrix\n      if (program.isUniformUsed('WCTCMatrix')) {\n        const image = model.currentInput;\n        const dim = image.getDimensions();\n        mat4.copy(model.tmpMat4, image.getIndexToWorld());\n        mat4.translate(model.tmpMat4, model.tmpMat4, [-0.5, -0.5, -0.5]);\n        mat4.scale(model.tmpMat4, model.tmpMat4, dim);\n        mat4.invert(model.tmpMat4, model.tmpMat4);\n        if (inverseShiftScaleMatrix) {\n          mat4.multiply(model.tmpMat4, model.tmpMat4, inverseShiftScaleMatrix);\n        }\n        program.setUniformMatrix('WCTCMatrix', model.tmpMat4);\n      }\n      if (program.isUniformUsed('vboScaling')) {\n        program.setUniform3fv('vboScaling', cellBO.getCABO().getCoordScale() ?? [1, 1, 1]);\n      }\n      cellBO.getAttributeUpdateTime().modified();\n    }\n\n    // Depth request\n    if (model.haveSeenDepthRequest) {\n      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);\n    }\n\n    // handle coincident\n    if (cellBO.getProgram().isUniformUsed('coffset')) {\n      const cp = publicAPI.getCoincidentParameters(ren, actor);\n      cellBO.getProgram().setUniformf('coffset', cp.offset);\n      // cfactor isn't always used when coffset is.\n      if (cellBO.getProgram().isUniformUsed('cfactor')) {\n        cellBO.getProgram().setUniformf('cfactor', cp.factor);\n      }\n    }\n  };\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    // [WMVP]C == {world, model, view, projection} coordinates\n    // e.g. WCPC == world to projection coordinate transformation\n    const keyMats = model._openGLCamera.getKeyMatrices(ren);\n    const actMats = model._openGLImageSlice.getKeyMatrices();\n    const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n    const program = cellBO.getProgram();\n    if (program.isUniformUsed('MCPCMatrix')) {\n      mat4.identity(model.tmpMat4);\n      program.setUniformMatrix('MCPCMatrix', safeMatrixMultiply([keyMats.wcpc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n    }\n    if (program.isUniformUsed('MCVCMatrix')) {\n      mat4.identity(model.tmpMat4);\n      program.setUniformMatrix('MCVCMatrix', safeMatrixMultiply([keyMats.wcvc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const ppty = actor.getProperty();\n    const opacity = ppty.getOpacity();\n    program.setUniformf('opacity', opacity);\n\n    // Component mix\n    // Independent components: Mixed according to component weights\n    // Dependent components: Mixed using the following logic:\n    //    - 2 comps => LA\n    //    - 3 comps => RGB + opacity from pwf\n    //    - 4 comps => RGBA\n    const numComp = model.openGLTexture.getComponents();\n    const iComps = ppty.getIndependentComponents();\n    if (iComps) {\n      for (let i = 0; i < numComp; ++i) {\n        program.setUniformf(`mix${i}`, ppty.getComponentWeight(i));\n      }\n    }\n\n    // Color opacity map\n    const volInfo = model.openGLTexture.getVolumeInfo();\n\n    // three levels of shift scale combined into one\n    // for performance in the fragment shader\n    for (let i = 0; i < numComp; i++) {\n      let cw = ppty.getColorWindow();\n      let cl = ppty.getColorLevel();\n      const target = iComps ? i : 0;\n      const cfun = ppty.getRGBTransferFunction(target);\n      if (cfun && ppty.getUseLookupTableScalarRange()) {\n        const cRange = cfun.getRange();\n        cw = cRange[1] - cRange[0];\n        cl = 0.5 * (cRange[1] + cRange[0]);\n      }\n      const scale = volInfo.scale[i] / cw;\n      const shift = (volInfo.offset[i] - cl) / cw + 0.5;\n      program.setUniformf(`cshift${i}`, shift);\n      program.setUniformf(`cscale${i}`, scale);\n    }\n    const texColorUnit = model.colorTexture.getTextureUnit();\n    program.setUniformi('colorTexture1', texColorUnit);\n\n    // pwf shift/scale\n    for (let i = 0; i < numComp; i++) {\n      let pwfScale = 1.0;\n      let pwfShift = 0.0;\n      const target = iComps ? i : 0;\n      const pwfun = ppty.getPiecewiseFunction(target);\n      if (pwfun) {\n        const pwfRange = pwfun.getRange();\n        const length = pwfRange[1] - pwfRange[0];\n        const mid = 0.5 * (pwfRange[0] + pwfRange[1]);\n        pwfScale = volInfo.scale[i] / length;\n        pwfShift = (volInfo.offset[i] - mid) / length + 0.5;\n      }\n      program.setUniformf(`pwfshift${i}`, pwfShift);\n      program.setUniformf(`pwfscale${i}`, pwfScale);\n    }\n    const texOpacityUnit = model.pwfTexture.getTextureUnit();\n    program.setUniformi('pwfTexture1', texOpacityUnit);\n\n    // Background color\n    program.setUniform4fv('backgroundColor', model.renderable.getBackgroundColor());\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    // render pass shader replacement changed\n    const tNumComp = model.openGLTexture.getComponents();\n    const iComp = actor.getProperty().getIndependentComponents();\n    const slabTh = model.renderable.getSlabThickness();\n    const slabType = model.renderable.getSlabType();\n    const slabTrap = model.renderable.getSlabTrapezoidIntegration();\n\n    // has the render pass shader replacement changed? Two options\n    let needRebuild = false;\n    if (!model.currentRenderPass && model.lastRenderPassShaderReplacement || model.currentRenderPass && model.currentRenderPass.getShaderReplacement() !== model.lastRenderPassShaderReplacement) {\n      needRebuild = true;\n    }\n    if (needRebuild || model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getProgram()?.getHandle() === 0 || model.lastTextureComponents !== tNumComp || model.lastIndependentComponents !== iComp || model.lastSlabThickness !== slabTh || model.lastSlabType !== slabType || model.lastSlabTrapezoidIntegration !== slabTrap) {\n      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;\n      model.lastTextureComponents = tNumComp;\n      model.lastIndependentComponents = iComp;\n      model.lastSlabThickness = slabTh;\n      model.lastSlabType = slabType;\n      model.lastSlabTrapezoidIntegration = slabTrap;\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkImageResliceMapperVS;\n    shaders.Fragment = vtkImageResliceMapperFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n    if (model.haveSeenDepthRequest) {\n      let FSSource = shaders.Fragment;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n      shaders.Fragment = FSSource;\n    }\n    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderTCoord = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    const GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n    const tcoordVSDec = ['uniform mat4 WCTCMatrix;', 'out vec3 fragTexCoord;'];\n    const slabThickness = model.renderable.getSlabThickness();\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', tcoordVSDec).result;\n    const tcoordVSImpl = ['fragTexCoord = (WCTCMatrix * vertexWC).xyz;'];\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', tcoordVSImpl).result;\n    const tNumComp = model.openGLTexture.getComponents();\n    const iComps = actor.getProperty().getIndependentComponents();\n    let tcoordFSDec = ['in vec3 fragTexCoord;', 'uniform highp sampler3D texture1;', 'uniform mat4 WCTCMatrix;',\n    // color shift and scale\n    'uniform float cshift0;', 'uniform float cscale0;',\n    // pwf shift and scale\n    'uniform float pwfshift0;', 'uniform float pwfscale0;',\n    // color and pwf textures\n    'uniform sampler2D colorTexture1;', 'uniform sampler2D pwfTexture1;',\n    // opacity\n    'uniform float opacity;',\n    // background color\n    'uniform vec4 backgroundColor;'];\n    if (iComps) {\n      for (let comp = 1; comp < tNumComp; comp++) {\n        tcoordFSDec = tcoordFSDec.concat([\n        // color shift and scale\n        `uniform float cshift${comp};`, `uniform float cscale${comp};`,\n        // weighting shift and scale\n        `uniform float pwfshift${comp};`, `uniform float pwfscale${comp};`]);\n      }\n      // the heights defined below are the locations\n      // for the up to four components of the tfuns\n      // the tfuns have a height of 2XnumComps pixels so the\n      // values are computed to hit the middle of the two rows\n      // for that component\n      switch (tNumComp) {\n        case 1:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', '#define height0 0.5']);\n          break;\n        case 2:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', 'uniform float mix1;', '#define height0 0.25', '#define height1 0.75']);\n          break;\n        case 3:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', '#define height0 0.17', '#define height1 0.5', '#define height2 0.83']);\n          break;\n        case 4:\n          tcoordFSDec = tcoordFSDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', 'uniform float mix3;', '#define height0 0.125', '#define height1 0.375', '#define height2 0.625', '#define height3 0.875']);\n          break;\n        default:\n          vtkErrorMacro('Unsupported number of independent coordinates.');\n      }\n    }\n    if (slabThickness > 0.0) {\n      tcoordFSDec = tcoordFSDec.concat(['uniform vec3 spacing;', 'uniform float slabThickness;', 'uniform int slabType;', 'uniform int slabTrapezoid;', 'uniform vec3 vboScaling;']);\n      tcoordFSDec = tcoordFSDec.concat(['vec4 compositeValue(vec4 currVal, vec4 valToComp, int trapezoid)', '{', '  vec4 retVal = vec4(1.0);', '  if (slabType == 0) // min', '  {', '    retVal = min(currVal, valToComp);', '  }', '  else if (slabType == 1) // max', '  {', '    retVal = max(currVal, valToComp);', '  }', '  else if (slabType == 3) // sum', '  {', '    retVal = currVal + (trapezoid > 0 ? 0.5 * valToComp : valToComp); ', '  }', '  else // mean', '  {', '    retVal = currVal + (trapezoid > 0 ? 0.5 * valToComp : valToComp); ', '  }', '  return retVal;', '}']);\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', tcoordFSDec).result;\n    let tcoordFSImpl = ['if (any(greaterThan(fragTexCoord, vec3(1.0))) || any(lessThan(fragTexCoord, vec3(0.0))))', '{', '  // set the background color and exit', '  gl_FragData[0] = backgroundColor;', '  return;', '}', 'vec4 tvalue = texture(texture1, fragTexCoord);'];\n    if (slabThickness > 0.0) {\n      tcoordFSImpl = tcoordFSImpl.concat(['// Get the first and last samples', 'int numSlices = 1;', 'float scaling = min(min(spacing.x, spacing.y), spacing.z) * 0.5;', 'vec3 normalxspacing = scaling * normalWCVSOutput;', 'float distTraveled = length(normalxspacing);', 'int trapezoid = 0;', 'while (distTraveled < slabThickness * 0.5)', '{', '  distTraveled += length(normalxspacing);', '  float fnumSlices = float(numSlices);', '  if (distTraveled > slabThickness * 0.5)', '  {', '    // Before stepping outside the slab, sample at the boundaries', '    normalxspacing = normalWCVSOutput * slabThickness * 0.5 / fnumSlices;', '    trapezoid = slabTrapezoid;', '  }', '  vec3 fragTCoordNeg = (WCTCMatrix * vec4(vertexWCVSOutput.xyz - fnumSlices * normalxspacing * vboScaling, 1.0)).xyz;', '  if (!any(greaterThan(fragTCoordNeg, vec3(1.0))) && !any(lessThan(fragTCoordNeg, vec3(0.0))))', '  {', '    vec4 newVal = texture(texture1, fragTCoordNeg);', '    tvalue = compositeValue(tvalue, newVal, trapezoid);', '    numSlices += 1;', '  }', '  vec3 fragTCoordPos = (WCTCMatrix * vec4(vertexWCVSOutput.xyz + fnumSlices * normalxspacing * vboScaling, 1.0)).xyz;', '  if (!any(greaterThan(fragTCoordNeg, vec3(1.0))) && !any(lessThan(fragTCoordNeg, vec3(0.0))))', '  {', '    vec4 newVal = texture(texture1, fragTCoordPos);', '    tvalue = compositeValue(tvalue, newVal, trapezoid);', '    numSlices += 1;', '  }', '}', '// Finally, if slab type is *mean*, divide the sum by the numSlices', 'if (slabType == 2)', '{', '  tvalue = tvalue / float(numSlices);', '}']);\n    }\n    if (iComps) {\n      const rgba = ['r', 'g', 'b', 'a'];\n      for (let comp = 0; comp < tNumComp; ++comp) {\n        tcoordFSImpl = tcoordFSImpl.concat([`vec3 tcolor${comp} = mix${comp} * texture2D(colorTexture1, vec2(tvalue.${rgba[comp]} * cscale${comp} + cshift${comp}, height${comp})).rgb;`, `float compWeight${comp} = mix${comp} * texture2D(pwfTexture1, vec2(tvalue.${rgba[comp]} * pwfscale${comp} + pwfshift${comp}, height${comp})).r;`]);\n      }\n      switch (tNumComp) {\n        case 1:\n          tcoordFSImpl = tcoordFSImpl.concat(['gl_FragData[0] = vec4(tcolor0.rgb, compWeight0 * opacity);']);\n          break;\n        case 2:\n          tcoordFSImpl = tcoordFSImpl.concat(['float weightSum = compWeight0 + compWeight1;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum))), opacity);']);\n          break;\n        case 3:\n          tcoordFSImpl = tcoordFSImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum))), opacity);']);\n          break;\n        case 4:\n          tcoordFSImpl = tcoordFSImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2 + compWeight3;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum)) + (tcolor3.rgb * (compWeight3 / weightSum))), opacity);']);\n          break;\n        default:\n          vtkErrorMacro('Unsupported number of independent coordinates.');\n      }\n    } else {\n      // dependent components\n      switch (tNumComp) {\n        case 1:\n          tcoordFSImpl = tcoordFSImpl.concat(['// Dependent components', 'float intensity = tvalue.r;', 'vec3 tcolor = texture2D(colorTexture1, vec2(intensity * cscale0 + cshift0, 0.5)).rgb;', 'float scalarOpacity = texture2D(pwfTexture1, vec2(intensity * pwfscale0 + pwfshift0, 0.5)).r;', 'gl_FragData[0] = vec4(tcolor, scalarOpacity * opacity);']);\n          break;\n        case 2:\n          tcoordFSImpl = tcoordFSImpl.concat(['float intensity = tvalue.r*cscale0 + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(intensity, 0.5)).rgb, pwfscale0*tvalue.g + pwfshift0);']);\n          break;\n        case 3:\n          tcoordFSImpl = tcoordFSImpl.concat(['vec4 tcolor = cscale0*tvalue + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, opacity);']);\n          break;\n        default:\n          tcoordFSImpl = tcoordFSImpl.concat(['vec4 tcolor = cscale0*tvalue + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, tcolor.a);']);\n      }\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', tcoordFSImpl).result;\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n    shaders.Geometry = GSSource;\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    const GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n    const slabThickness = model.renderable.getSlabThickness();\n    let posVCVSDec = ['attribute vec4 vertexWC;'];\n    // Add a unique hash to the shader to ensure that the shader program is unique to this mapper.\n    posVCVSDec = posVCVSDec.concat([`//${publicAPI.getMTime()}${model.resliceGeomUpdateString}`]);\n    if (slabThickness > 0.0) {\n      posVCVSDec = posVCVSDec.concat(['attribute vec3 normalWC;', 'varying vec3 normalWCVSOutput;', 'varying vec4 vertexWCVSOutput;']);\n    }\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Dec', posVCVSDec).result;\n    let posVCVSImpl = ['gl_Position = MCPCMatrix * vertexWC;'];\n    if (slabThickness > 0.0) {\n      posVCVSImpl = posVCVSImpl.concat(['normalWCVSOutput = normalWC;', 'vertexWCVSOutput = vertexWC;']);\n    }\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', posVCVSImpl).result;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;\n    let posVCFSDec = [];\n    if (slabThickness > 0.0) {\n      posVCFSDec = posVCFSDec.concat(['varying vec3 normalWCVSOutput;', 'varying vec4 vertexWCVSOutput;']);\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Dec', posVCFSDec).result;\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n\n  /**\n   * Returns true if the normal is almost axis aligned.\n   * Has a side effect to normalize the vector.\n   */\n  function isVectorAxisAligned(n) {\n    vtkMath.normalize(n);\n    const tmpN = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n      vec3.zero(tmpN);\n      tmpN[i] = 1.0;\n      const dotP = vtkMath.dot(n, tmpN);\n      if (dotP < -0.999999 || dotP > 0.999999) {\n        return [true, i];\n      }\n    }\n    return [false, 2];\n  }\n  publicAPI.updateResliceGeometry = () => {\n    let resGeomString = '';\n    const image = model.currentInput;\n    const imageBounds = image?.getBounds();\n    // Orthogonal slicing by default\n    let orthoSlicing = true;\n    let orthoAxis = 2;\n    const slicePD = model.renderable.getSlicePolyData();\n    const slicePlane = model.renderable.getSlicePlane();\n    if (slicePD) {\n      resGeomString = resGeomString.concat(`PolyData${slicePD.getMTime()}`);\n    } else if (slicePlane) {\n      resGeomString = resGeomString.concat(`Plane${slicePlane.getMTime()}`);\n      // Compute a world-to-image-orientation matrix.\n      const w2io = mat3.create();\n      if (image) {\n        resGeomString = resGeomString.concat(`Image${image.getMTime()}`);\n        // Ignore the translation component since we are\n        // using it on vectors rather than positions.\n        mat3.set(w2io, ...image.getDirection());\n        mat3.invert(w2io, w2io);\n      }\n      // Check to see if we can bypass oblique slicing related bounds computation\n      // transform the cutting plane normal to image local coords\n      const imageLocalNormal = [...slicePlane.getNormal()];\n      vec3.transformMat3(imageLocalNormal, imageLocalNormal, w2io);\n      [orthoSlicing, orthoAxis] = isVectorAxisAligned(imageLocalNormal);\n    } else {\n      // Create a default slice plane here\n      const plane = vtkPlane.newInstance();\n      plane.setNormal(0, 0, 1);\n      let bds = [0, 1, 0, 1, 0, 1];\n      if (image) {\n        bds = imageBounds;\n      }\n      plane.setOrigin(bds[0], bds[2], 0.5 * (bds[5] + bds[4]));\n      model.renderable.setSlicePlane(plane);\n      resGeomString = resGeomString.concat(`Plane${slicePlane?.getMTime()}`);\n      if (image) {\n        resGeomString = resGeomString.concat(`Image${image.getMTime()}`);\n      }\n    }\n    if (!model.resliceGeom || model.resliceGeomUpdateString !== resGeomString) {\n      if (slicePD) {\n        if (!model.resliceGeom) {\n          model.resliceGeom = vtkPolyData.newInstance();\n        }\n        model.resliceGeom.getPoints().setData(slicePD.getPoints().getData(), 3);\n        model.resliceGeom.getPolys().setData(slicePD.getPolys().getData(), 1);\n        model.resliceGeom.getPointData().setNormals(slicePD.getPointData().getNormals());\n      } else if (slicePlane) {\n        if (!orthoSlicing) {\n          model.outlineFilter.setInputData(image);\n          model.cutter.setInputConnection(model.outlineFilter.getOutputPort());\n          model.cutter.setCutFunction(slicePlane);\n          model.lineToSurfaceFilter.setInputConnection(model.cutter.getOutputPort());\n          model.lineToSurfaceFilter.update();\n          if (!model.resliceGeom) {\n            model.resliceGeom = vtkPolyData.newInstance();\n          }\n          const planePD = model.lineToSurfaceFilter.getOutputData();\n          model.resliceGeom.getPoints().setData(planePD.getPoints().getData(), 3);\n          model.resliceGeom.getPolys().setData(planePD.getPolys().getData(), 1);\n          model.resliceGeom.getPointData().setNormals(planePD.getPointData().getNormals());\n          // The above method does not generate point normals\n          // Set it manually here.\n          const n = slicePlane.getNormal();\n          const npts = model.resliceGeom.getNumberOfPoints();\n          vtkMath.normalize(n);\n          const normalsData = new Float32Array(npts * 3);\n          for (let i = 0; i < npts; ++i) {\n            normalsData[3 * i] = n[0];\n            normalsData[3 * i + 1] = n[1];\n            normalsData[3 * i + 2] = n[2];\n          }\n          const normals = vtkDataArray.newInstance({\n            numberOfComponents: 3,\n            values: normalsData,\n            name: 'Normals'\n          });\n          model.resliceGeom.getPointData().setNormals(normals);\n        } else {\n          // Since the image-local normal is axis-aligned, we\n          // can quickly construct the cutting plane using indexToWorld transforms.\n          const ptsArray = new Float32Array(12);\n          const indexSpacePlaneOrigin = image.worldToIndex(slicePlane.getOrigin(), [0, 0, 0]);\n          const otherAxes = [(orthoAxis + 1) % 3, (orthoAxis + 2) % 3].sort();\n          const ext = image.getSpatialExtent();\n          let ptIdx = 0;\n          for (let i = 0; i < 2; ++i) {\n            for (let j = 0; j < 2; ++j) {\n              ptsArray[ptIdx + orthoAxis] = indexSpacePlaneOrigin[orthoAxis];\n              ptsArray[ptIdx + otherAxes[0]] = ext[2 * otherAxes[0] + j];\n              ptsArray[ptIdx + otherAxes[1]] = ext[2 * otherAxes[1] + i];\n              ptIdx += 3;\n            }\n          }\n          model.transform.setMatrix(image.getIndexToWorld());\n          model.transform.transformPoints(ptsArray, ptsArray);\n          const cellArray = new Uint16Array(8);\n          cellArray[0] = 3;\n          cellArray[1] = 0;\n          cellArray[2] = 1;\n          cellArray[3] = 3;\n          cellArray[4] = 3;\n          cellArray[5] = 0;\n          cellArray[6] = 3;\n          cellArray[7] = 2;\n          const n = slicePlane.getNormal();\n          vtkMath.normalize(n);\n          const normalsData = new Float32Array(12);\n          for (let i = 0; i < 4; ++i) {\n            normalsData[3 * i] = n[0];\n            normalsData[3 * i + 1] = n[1];\n            normalsData[3 * i + 2] = n[2];\n          }\n          if (!model.resliceGeom) {\n            model.resliceGeom = vtkPolyData.newInstance();\n          }\n          model.resliceGeom.getPoints().setData(ptsArray, 3);\n          model.resliceGeom.getPolys().setData(cellArray, 1);\n          const normals = vtkDataArray.newInstance({\n            numberOfComponents: 3,\n            values: normalsData,\n            name: 'Normals'\n          });\n          model.resliceGeom.getPointData().setNormals(normals);\n        }\n      } else {\n        vtkErrorMacro('Something went wrong.', 'A default slice plane should have been created in the beginning of', 'updateResliceGeometry.');\n      }\n      model.resliceGeomUpdateString = resGeomString;\n      model.resliceGeom?.modified();\n    }\n  };\n  publicAPI.setOpenGLTexture = oglTex => {\n    if (oglTex) {\n      model.openGLTexture = oglTex;\n      model._externalOpenGLTexture = true;\n    }\n  };\n  publicAPI.delete = chain(() => {\n    if (model._openGLRenderWindow) {\n      unregisterGraphicsResources(model._openGLRenderWindow);\n    }\n  }, publicAPI.delete);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  VBOBuildTime: {},\n  VBOBuildString: null,\n  haveSeenDepthRequest: false,\n  lastHaveSeenDepthRequest: false,\n  lastIndependentComponents: false,\n  lastTextureComponents: 0,\n  lastSlabThickness: 0,\n  lastSlabTrapezoidIntegration: 0,\n  lastSlabType: -1,\n  openGLTexture: null,\n  colorTextureString: null,\n  pwfTextureString: null,\n  resliceGeom: null,\n  resliceGeomUpdateString: null,\n  tris: null,\n  colorTexture: null,\n  pwfTexture: null,\n  _externalOpenGLTexture: false\n  // _scalars: null,\n  // _colorTransferFunc: null,\n  // _pwFunc: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.tris = vtkHelper.newInstance();\n  model.openGLTexture = null;\n  model.colorTexture = null;\n  model.pwfTexture = null;\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime);\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n\n  // Implicit plane to polydata related cache:\n  model.outlineFilter = vtkImageDataOutlineFilter.newInstance();\n  model.outlineFilter.setGenerateFaces(true);\n  model.outlineFilter.setGenerateLines(false);\n  model.cubePolyData = vtkPolyData.newInstance();\n  model.cutter = vtkCutter.newInstance();\n  model.lineToSurfaceFilter = vtkClosedPolyLineToSurfaceFilter.newInstance();\n  model.transform = vtkTransform.newInstance();\n  get(publicAPI, model, ['openGLTexture']);\n\n  // Object methods\n  vtkOpenGLImageResliceMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLImageResliceMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageResliceMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkImageResliceMapper', newInstance);\n\nexport { vtkImageResliceMapper as default, extend, newInstance };\n","import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLImageSlice methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLImageSlice(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLImageSlice');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model._openGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.traverseZBufferPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.traverseOpaqueZBufferPass = renderPass => publicAPI.traverseOpaquePass(renderPass);\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.zBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n\n  // Renders myself\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    model.context.depthMask(!prepass);\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLImageSlice(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLImageSlice');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageSlice = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkImageSlice', newInstance);\n\nexport { vtkImageSlice as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\n\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  const substituteRes = vtkShaderProgram.substitute(shaders.Fragment, '//VTK::RenderPassFragmentShader::Impl', `\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\n      gl_FragData[1].r = weight;\n    `, false);\n  shaders.Fragment = substituteRes.result;\n}\nconst oitpFragTemplate = `//VTK::System::Dec\n\nin vec2 tcoord;\n\nuniform sampler2D translucentRTexture;\nuniform sampler2D translucentRGBATexture;\n\n// the output of this shader\n//VTK::Output::Dec\n\nvoid main()\n{\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\n  float t2Color = texture(translucentRTexture, tcoord).r;\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\n}\n`;\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass');\n\n  // build vertices etc\n  publicAPI.createVertexBuffer = () => {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    const ptsArray = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1]);\n\n    // 4 corresponding corner points in texture space in order (x, y)\n    const tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n\n    // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n    const cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n    const points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray\n    });\n    points.setName('points');\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray\n    });\n    tcoords.setName('tcoords');\n    const cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points,\n      tcoords,\n      cellOffset: 0\n    });\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.createFramebuffer = viewNode => {\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n    model.framebuffer.create(...size);\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(size[0], size[1], 4, 'Float32Array', null);\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(size[0], size[1], 1, 'Float32Array', null);\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(size[0], size[1], 'Float32Array', null);\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n  publicAPI.createCopyShader = viewNode => {\n    model.copyShader = viewNode.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'attribute vec2 tcoordTC;', 'varying vec2 tcoord;', 'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }'].join('\\n'), oitpFragTemplate, '');\n  };\n  publicAPI.createVBO = viewNode => {\n    const gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n    const program = model.copyShader;\n    // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 3, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'tcoordTC', model.tris.getCABO().getTCoordOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 2, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n  publicAPI.traverse = (viewNode, renNode, forwardPass) => {\n    if (model.deleted) {\n      return;\n    }\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n\n    // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n    model._supported = false;\n    if (renNode.getSelector() || !gl || !viewNode.getWebgl2() || !gl.getExtension('EXT_color_buffer_half_float') && !gl.getExtension('EXT_color_buffer_float')) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n    model._supported = true;\n\n    // prepare framebuffer // allocate framebuffer if needed and bind it\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      const fbSize = model.framebuffer.getSize();\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n    gl.colorMask(false, false, false, false);\n\n    // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      // Don't use zBufferPass as it will also render the depth of translucent actors\n      forwardPass.setCurrentOperation('opaqueZBufferPass');\n      renNode.traverse(forwardPass);\n    }\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n\n    // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n\n    // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);\n\n    // now do the translucent rendering\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n    // gl.drawBuffers([gl.BACK]);\n\n    // make sure the copy shader is ready\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    }\n\n    // make sure we have a VAO\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n    model.copyVAO.bind();\n\n    // make sure the VBO is up to date\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n\n    // activate texture\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi('translucentRGBATexture', model.translucentRGBATexture.getTextureUnit());\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi('translucentRTexture', model.translucentRTexture.getTextureUnit());\n\n    // render quad\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n\n    // restore scissor + viewport from renderer\n    const ts = renNode.getTiledSizeAndOrigin();\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n  };\n  publicAPI.getShaderReplacement = () => {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n    return null;\n  };\n  publicAPI.releaseGraphicsResources = viewNode => {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n    publicAPI.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  macro.get(publicAPI, model, ['framebuffer']);\n\n  // Object methods\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLOrderIndependentTranslucentPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkOpenGLOrderIndependentTranslucentPass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkOpenGLOrderIndependentTranslucentPass$1 as default, extend, newInstance };\n","import { n as newInstance$1, c as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat4, vec3 }     from 'gl-matrix';\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n    model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n    const aspectRatio = model._openGLRenderer.getAspectRatio();\n    const camera = model._openGLRenderer ? model._openGLRenderer.getRenderable().getActiveCamera() : null;\n    const tsize = model._openGLRenderer.getTiledSizeAndOrigin();\n    let texels = null;\n    if (model.renderable.getUseZValues()) {\n      const zbt = renderPass.getZBufferTexture();\n      const width = Math.floor(zbt.getWidth());\n      const height = Math.floor(zbt.getHeight());\n      const gl = model._openGLRenderWindow.getContext();\n      zbt.bind();\n\n      // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)\n      const fb = renderPass.getFramebuffer();\n      if (!fb) {\n        vtkDebugMacro('No framebuffer to save/restore');\n      } else {\n        // save framebuffer settings\n        fb.saveCurrentBindingsAndBuffers();\n      }\n      const framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);\n      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n        texels = new Uint8Array(width * height * 4);\n        gl.viewport(0, 0, width, height);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);\n      }\n\n      // Now we need to restore framebuffer bindings/buffers\n      if (fb) {\n        fb.restorePreviousBindingsAndBuffers();\n      }\n      gl.deleteFramebuffer(framebuffer);\n    }\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (model.renderable.getUseZValues()) {\n        renderPass.requestDepth();\n      }\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLPixelSpaceCallbackMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPixelSpaceCallbackMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\n\nexport { vtkPixelSpaceCallbackMapper as default, extend, newInstance };\n","import { mat3, mat4, vec3 } from 'gl-matrix';\nimport { n as newInstance$1, e as setGet, o as obj, c as macro } from '../../macros2.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper from '../Core/Mapper.js';\nimport { l as normalize, u as uninitializeBounds } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { v as vtkPolyDataVS } from './glsl/vtkPolyDataVS.glsl.js';\nimport { v as vtkPolyDataFS } from './glsl/vtkPolyDataFS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nimport { PassTypes } from './HardwareSelector/Constants.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\nimport '../Core/Mapper/CoincidentTopologyHelper.js';\nimport { Resolve } from '../Core/Mapper/Static.js';\n\nconst {\n  FieldAssociations\n} = vtkDataSet;\n\n/* eslint-disable no-lonely-if */\n\nconst {\n  primTypes\n} = vtkHelper;\nconst {\n  Representation,\n  Shading\n} = vtkProperty;\nconst {\n  ScalarMode\n} = vtkMapper;\nconst {\n  Filter,\n  Wrap\n} = vtkOpenGLTexture;\nconst {\n  vtkErrorMacro\n} = macro;\nconst StartEvent = {\n  type: 'StartEvent'\n};\nconst EndEvent = {\n  type: 'EndEvent'\n};\nconst {\n  CoordinateSystem\n} = vtkProp;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction getPickState(renderer) {\n  const selector = renderer.getSelector();\n  if (selector) {\n    return selector.getCurrentPass();\n  }\n  return PassTypes.MIN_KNOWN_PASS - 1;\n}\nfunction vtkOpenGLPolyDataMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.currentRenderPass = null;\n      model.openGLActor = publicAPI.getFirstAncestorOfType('vtkOpenGLActor');\n      model._openGLRenderer = model.openGLActor.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.currentRenderPass = renderPass;\n      publicAPI.render();\n    }\n  };\n  publicAPI.zBufferPass = prepass => {\n    if (prepass) {\n      model.haveSeenDepthRequest = true;\n      model.renderDepth = true;\n      publicAPI.render();\n      model.renderDepth = false;\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => publicAPI.zBufferPass(prepass);\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.render = () => {\n    const ctx = model._openGLRenderWindow.getContext();\n    if (model.context !== ctx) {\n      model.context = ctx;\n      for (let i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n    const actor = model.openGLActor.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkPolyDataVS;\n    shaders.Fragment = vtkPolyDataFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.replaceShaderColor = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n    // create the material/color property declarations, and VS implementation\n    // these are always defined\n    let colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity', 'uniform vec3 ambientColorUniform;', 'uniform vec3 diffuseColorUniform;'];\n    // add more for specular\n    if (lastLightComplexity) {\n      colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);\n    }\n\n    // now handle the more complex fragment shader implementation\n    // the following are always defined variables.  We start\n    // by assigning a default value from the uniform\n    let colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];\n    if (lastLightComplexity) {\n      colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);\n    }\n    colorImpl = colorImpl.concat(['  ambientColor = ambientColorUniform;', '  diffuseColor = diffuseColorUniform;', '  opacity = opacityUniform;']);\n    if (lastLightComplexity) {\n      colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);\n    }\n\n    // add scalar vertex coloring\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {\n      colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 scalarColor;', 'varying vec4 vertexColorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput =  scalarColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;\n    }\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;'])).result;\n    } else {\n      if ((model.renderable.getAreScalarsMappedFromCells() || model.renderable.getInterpolateScalarsBeforeMapping()) && model.renderable.getColorCoordinates() && !model.drawingEdges) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  vec4 texColor = texture2D(texture1, tcoordVCVSOutput.st);', '  diffuseColor = texColor.rgb;', '  ambientColor = texColor.rgb;', '  opacity = opacity*texColor.a;'])).result;\n      } else {\n        if (actor.getBackfaceProperty() && !model.drawingEdges) {\n          colorDec = colorDec.concat(['uniform float opacityUniformBF; // the fragment opacity', 'uniform float ambientIntensityBF; // the material ambient', 'uniform float diffuseIntensityBF; // the material diffuse', 'uniform vec3 ambientColorUniformBF; // ambient material color', 'uniform vec3 diffuseColorUniformBF; // diffuse material color']);\n          if (lastLightComplexity) {\n            colorDec = colorDec.concat(['uniform float specularIntensityBF; // the material specular intensity', 'uniform vec3 specularColorUniformBF; // intensity weighted color', 'uniform float specularPowerUniformBF;']);\n            colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  specularColor = specularIntensityBF * specularColorUniformBF;', '  specularPower = specularPowerUniformBF;', '  opacity = opacityUniformBF; }']);\n          } else {\n            colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  opacity = opacityUniformBF; }']);\n          }\n        }\n        if (model.haveCellScalars && !model.drawingEdges) {\n          colorDec = colorDec.concat(['uniform samplerBuffer texture1;']);\n        }\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;\n      }\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', colorDec).result;\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderLight = (shaders, ren, actor) => {\n    let FSSource = shaders.Fragment;\n\n    // check for shadow maps\n    const shadowFactor = '';\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    const lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');\n    let sstring = [];\n    switch (lastLightComplexity) {\n      case 0:\n        // no lighting or RENDER_VALUES\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', ['  gl_FragData[0] = vec4(ambientColor * ambient + diffuseColor * diffuse, opacity);', '  //VTK::Light::Impl'], false).result;\n        break;\n      case 1:\n        // headlight\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', ['  float df = max(0.0, normalVCVSOutput.z);', '  float sf = pow(df, specularPower);', '  vec3 diffuseL = df * diffuseColor;', '  vec3 specularL = sf * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl'], false).result;\n        break;\n      case 2:\n        // light kit\n        for (let lc = 0; lc < lastLightCount; ++lc) {\n          sstring = sstring.concat([`uniform vec3 lightColor${lc};`, `uniform vec3 lightDirectionVC${lc}; // normalized`, `uniform vec3 lightHalfAngleVC${lc}; // normalized`]);\n        }\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', sstring).result;\n        sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  float df;'];\n        for (let lc = 0; lc < lastLightCount; ++lc) {\n          sstring = sstring.concat([`  df = max(0.0, dot(normalVCVSOutput, -lightDirectionVC${lc}));`, `  diffuseL += ((df${shadowFactor}) * lightColor${lc});`, `  if (dot(normalVCVSOutput, lightDirectionVC${lc}) < 0.0)`, '    {', `    float sf = sign(df)*pow(max(1e-5,\n                                              dot(reflect(lightDirectionVC${lc},normalVCVSOutput),\n                                                  normalize(-vertexVC.xyz))),\n                                         specularPower);`, `    specularL += (sf${shadowFactor} * lightColor${lc});`, '    }']);\n        }\n        sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;\n        break;\n      case 3:\n        // positional\n        for (let lc = 0; lc < lastLightCount; ++lc) {\n          sstring = sstring.concat([`uniform vec3 lightColor${lc};`, `uniform vec3 lightDirectionVC${lc}; // normalized`, `uniform vec3 lightHalfAngleVC${lc}; // normalized`, `uniform vec3 lightPositionVC${lc};`, `uniform vec3 lightAttenuation${lc};`, `uniform float lightConeAngle${lc};`, `uniform float lightExponent${lc};`, `uniform int lightPositional${lc};`]);\n        }\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', sstring).result;\n        sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  vec3 vertLightDirectionVC;', '  float attenuation;', '  float df;'];\n        for (let lc = 0; lc < lastLightCount; ++lc) {\n          sstring = sstring.concat(['  attenuation = 1.0;', `  if (lightPositional${lc} == 0)`, '    {', `      vertLightDirectionVC = lightDirectionVC${lc};`, '    }', '  else', '    {', `    vertLightDirectionVC = vertexVC.xyz - lightPositionVC${lc};`, '    float distanceVC = length(vertLightDirectionVC);', '    vertLightDirectionVC = normalize(vertLightDirectionVC);', '    attenuation = 1.0 /', `      (lightAttenuation${lc}.x`, `       + lightAttenuation${lc}.y * distanceVC`, `       + lightAttenuation${lc}.z * distanceVC * distanceVC);`, '    // per OpenGL standard cone angle is 90 or less for a spot light', `    if (lightConeAngle${lc} <= 90.0)`, '      {', `      float coneDot = dot(vertLightDirectionVC, lightDirectionVC${lc});`, '      // if inside the cone', `      if (coneDot >= cos(radians(lightConeAngle${lc})))`, '        {', `        attenuation = attenuation * pow(coneDot, lightExponent${lc});`, '        }', '      else', '        {', '        attenuation = 0.0;', '        }', '      }', '    }', '    df = max(0.0, attenuation*dot(normalVCVSOutput, -vertLightDirectionVC));', `    diffuseL += ((df${shadowFactor}) * lightColor${lc});`, '    if (dot(normalVCVSOutput, vertLightDirectionVC) < 0.0)', '      {', `      float sf = sign(df)*attenuation*pow(max(1e-5,\n                                                           dot(reflect(lightDirectionVC${lc},\n                                                                       normalVCVSOutput),\n                                                               normalize(-vertexVC.xyz))),\n                                                       specularPower);`, `    specularL += ((sf${shadowFactor}) * lightColor${lc});`, '    }']);\n        }\n        sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;\n        break;\n      default:\n        vtkErrorMacro('bad light complexity');\n    }\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderNormal = (shaders, ren, actor) => {\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    if (lastLightComplexity > 0) {\n      let VSSource = shaders.Vertex;\n      let GSSource = shaders.Geometry;\n      let FSSource = shaders.Fragment;\n      if (model.lastBoundBO.getCABO().getNormalOffset()) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * normalMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Normal::Dec', ['in vec3 normalVCVSOutput[];', 'out vec3 normalVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Normal::Impl', ['normalVCGSOutput = normalVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', ['varying vec3 normalVCVSOutput;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalVCVSOutput);',\n        //  if (!gl_FrontFacing) does not work in intel hd4000 mac\n        //  if (int(gl_FrontFacing) == 0) does not work on mesa\n        '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;\n      } else {\n        if (model.haveCellNormals) {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', ['uniform mat3 normalMatrix;', 'uniform samplerBuffer textureN;']).result;\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalMatrix *', '    texelFetchBuffer(textureN, gl_PrimitiveID + PrimitiveIDOffset).xyz);', '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;\n        } else {\n          if (model.lastBoundBO.getOpenGLMode(actor.getProperty().getRepresentation()) === model.context.LINES) {\n            // generate a normal for lines, it will be perpendicular to the line\n            // and maximally aligned with the camera view direction\n            // no clue if this is the best way to do this.\n            // the code below has been optimized a bit so what follows is\n            // an explanation of the basic approach. Compute the gradient of the line\n            // with respect to x and y, the the larger of the two\n            // cross that with the camera view direction. That gives a vector\n            // orthogonal to the camera view and the line. Note that the line and the camera\n            // view are probably not orthogonal. Which is why when we cross result that with\n            // the line gradient again we get a reasonable normal. It will be othogonal to\n            // the line (which is a plane but maximally aligned with the camera view.\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', ['  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements\n            ).result;\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput;', '  if (abs(fdx.x) > 0.0)', '    { fdx = normalize(fdx); normalVCVSOutput = normalize(cross(vec3(fdx.y, -fdx.x, 0.0), fdx)); }', '  else { fdy = normalize(fdy); normalVCVSOutput = normalize(cross(vec3(fdy.y, -fdy.x, 0.0), fdy));}']).result;\n          } else {\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', ['uniform int cameraParallel;']).result;\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', [\n            // '  vec3 fdx = vec3(dFdx(vertexVC.x),dFdx(vertexVC.y),dFdx(vertexVC.z));',\n            // '  vec3 fdy = vec3(dFdy(vertexVC.x),dFdy(vertexVC.y),dFdy(vertexVC.z));',\n            '  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements\n            ).result;\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['  fdx = normalize(fdx);', '  fdy = normalize(fdy);', '  vec3 normalVCVSOutput = normalize(cross(fdx,fdy));',\n            // the code below is faster, but does not work on some devices\n            // 'vec3 normalVC = normalize(cross(dFdx(vertexVC.xyz), dFdy(vertexVC.xyz)));',\n            '  if (cameraParallel == 1 && normalVCVSOutput.z < 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }', '  if (cameraParallel == 0 && dot(normalVCVSOutput,vertexVC.xyz) > 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }']).result;\n          }\n        }\n      }\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n    let VSSource = shaders.Vertex;\n    let GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n\n    // do we need the vertex in the shader in View Coordinates\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    if (lastLightComplexity > 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vertexVCVSOutput = MCVCMatrix * vertexMC;', '  gl_Position = MCPCMatrix * vertexMC;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PositionVC::Dec', ['in vec4 vertexVCVSOutput[];', 'out vec4 vertexVCGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PositionVC::Impl', ['vertexVCGSOutput = vertexVCVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Impl', ['vec4 vertexVC = vertexVCVSOutput;']).result;\n    } else {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderTCoord = (shaders, ren, actor) => {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      let VSSource = shaders.Vertex;\n      let GSSource = shaders.Geometry;\n      let FSSource = shaders.Fragment;\n      if (model.drawingEdges) {\n        return;\n      }\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', 'tcoordVCVSOutput = tcoordMC;').result;\n\n      // we only handle the first texture by default\n      // additional textures are activated and we set the uniform\n      // for the texture unit they are assigned to, but you have to\n      // add in the shader code to do something with them\n      const tus = model.openGLActor.getActiveTextures();\n      let tNumComp = 2;\n      let tcdim = 2;\n      if (tus && tus.length > 0) {\n        tNumComp = tus[0].getComponents();\n        if (tus[0].getTarget() === model.context.TEXTURE_CUBE_MAP) {\n          tcdim = 3;\n        }\n      }\n      if (model.renderable.getColorTextureMap()) {\n        tNumComp = model.renderable.getColorTextureMap().getPointData().getScalars().getNumberOfComponents();\n        tcdim = 2;\n      }\n      if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec2 tcoordMC; varying vec2 tcoordVCVSOutput;').result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        if (tus && tus.length >= 1) {\n          switch (tNumComp) {\n            case 1:\n              FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;']).result;\n              break;\n            case 2:\n              FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;', '  opacity = opacity * tcolor.g;']).result;\n              break;\n            default:\n              FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.rgb;', '  diffuseColor = diffuseColor*tcolor.rgb;', '  opacity = opacity * tcolor.a;']).result;\n          }\n        }\n      } else {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec3 tcoordMC; varying vec3 tcoordVCVSOutput;').result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec3 tcoordVCVSOutput[];', 'out vec3 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec3 tcoordVCVSOutput;', 'uniform samplerCube texture1;']).result;\n        switch (tNumComp) {\n          case 1:\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;']).result;\n            break;\n          case 2:\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;', '  opacity = opacity * tcolor.g;']).result;\n            break;\n          default:\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.rgb;', '  diffuseColor = diffuseColor*tcolor.rgb;', '  opacity = opacity * tcolor.a;']).result;\n        }\n      }\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.replaceShaderClip = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      const numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', `uniform vec4 clipPlanes[${numClipPlanes}];`, `varying float clipDistancesVSOutput[${numClipPlanes}];`]).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Impl', [`for (int planeNum = 0; planeNum < ${numClipPlanes}; planeNum++)`, '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', `varying float clipDistancesVSOutput[${numClipPlanes}];`]).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Impl', [`for (int planeNum = 0; planeNum < ${numClipPlanes}; planeNum++)`, '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.getCoincidentParameters = (ren, actor) => {\n    // 1. ResolveCoincidentTopology is On and non zero for this primitive\n    // type\n    let cp = {\n      factor: 0.0,\n      offset: 0.0\n    };\n    const prop = actor.getProperty();\n    if (\n    // backwards compat with code that (errorneously) set this to boolean\n    // eslint-disable-next-line eqeqeq\n    model.renderable.getResolveCoincidentTopology() == Resolve.PolygonOffset || prop.getEdgeVisibility() && prop.getRepresentation() === Representation.SURFACE) {\n      const primType = model.lastBoundBO.getPrimitiveType();\n      if (primType === primTypes.Points || prop.getRepresentation() === Representation.POINTS) {\n        cp = model.renderable.getCoincidentTopologyPointOffsetParameter();\n      } else if (primType === primTypes.Lines || prop.getRepresentation() === Representation.WIREFRAME) {\n        cp = model.renderable.getCoincidentTopologyLineOffsetParameters();\n      } else if (primType === primTypes.Tris || primType === primTypes.TriStrips) {\n        cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n      }\n      if (primType === primTypes.TrisEdges || primType === primTypes.TriStripsEdges) {\n        cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n        cp.factor /= 2.0;\n        cp.offset /= 2.0;\n      }\n    }\n\n    // hardware picking always offset due to saved zbuffer\n    // This gets you above the saved surface depth buffer.\n    const selector = model._openGLRenderer.getSelector();\n    if (selector && selector.getFieldAssociation() === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      cp.offset -= 2.0;\n    }\n    return cp;\n  };\n  publicAPI.replaceShaderPicking = (shaders, ren, actor) => {\n    let FSSource = shaders.Fragment;\n    let VSSource = shaders.Vertex;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform int picking;', '//VTK::Picking::Dec']).result;\n    if (!model._openGLRenderer.getSelector()) {\n      return;\n    }\n    if (model.lastSelectionState === PassTypes.ID_LOW24 || model.lastSelectionState === PassTypes.ID_HIGH24) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Dec', ['flat out int vertexIDVSOutput;\\n', 'uniform int VertexIDOffset;\\n']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Impl', '  vertexIDVSOutput = gl_VertexID + VertexIDOffset;\\n').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', 'flat in int vertexIDVSOutput;\\n').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', ['  int idx = vertexIDVSOutput;', '//VTK::Picking::Impl']).result;\n    }\n    switch (model.lastSelectionState) {\n      case PassTypes.ID_LOW24:\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = vec4(float(idx%256)/255.0, float((idx/256)%256)/255.0, float((idx/65536)%256)/255.0, 1.0);').result;\n        break;\n      case PassTypes.ID_HIGH24:\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = vec4(float((idx/16777216)%256)/255.0, 0.0, 0.0, 1.0);').result;\n        break;\n      default:\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', 'uniform vec3 mapperIndex;').result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    }\n    shaders.Fragment = FSSource;\n    shaders.Vertex = VSSource;\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderNormal(shaders, ren, actor);\n    publicAPI.replaceShaderLight(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderClip(shaders, ren, actor);\n    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n    if (model.haveSeenDepthRequest) {\n      let FSSource = shaders.Fragment;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    let lightComplexity = 0;\n    let numberOfLights = 0;\n    const primType = cellBO.getPrimitiveType();\n    const poly = model.currentInput;\n\n    // different algo from C++ as of 5/2019\n    let needLighting = false;\n    const pointNormals = poly.getPointData().getNormals();\n    const cellNormals = poly.getCellData().getNormals();\n    const flat = actor.getProperty().getInterpolation() === Shading.FLAT;\n    const representation = actor.getProperty().getRepresentation();\n    const mode = cellBO.getOpenGLMode(representation, primType);\n    // 1) all surfaces need lighting\n    if (mode === model.context.TRIANGLES) {\n      needLighting = true;\n      // 2) all cell normals without point normals need lighting\n    } else if (cellNormals && !pointNormals) {\n      needLighting = true;\n      // 3) Phong + pointNormals need lighting\n    } else if (!flat && pointNormals) {\n      needLighting = true;\n      // 4) Phong Lines need lighting\n    } else if (!flat && mode === model.context.LINES) {\n      needLighting = true;\n    }\n    // 5) everything else is unlit\n\n    // do we need lighting?\n    if (actor.getProperty().getLighting() && needLighting) {\n      // consider the lighting complexity to determine which case applies\n      // simple headlight, Light Kit, the whole feature set of VTK\n      lightComplexity = 0;\n      const lights = ren.getLightsByReference();\n      for (let index = 0; index < lights.length; ++index) {\n        const light = lights[index];\n        const status = light.getSwitch();\n        if (status > 0) {\n          numberOfLights++;\n          if (lightComplexity === 0) {\n            lightComplexity = 1;\n          }\n        }\n        if (lightComplexity === 1 && (numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {\n          lightComplexity = 2;\n        }\n        if (lightComplexity < 3 && light.getPositional()) {\n          lightComplexity = 3;\n        }\n      }\n    }\n    let needRebuild = false;\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    const lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');\n    if (lastLightComplexity !== lightComplexity || lastLightCount !== numberOfLights) {\n      model.lastBoundBO.set({\n        lastLightComplexity: lightComplexity\n      }, true);\n      model.lastBoundBO.set({\n        lastLightCount: numberOfLights\n      }, true);\n      needRebuild = true;\n    }\n\n    // has the render pass shader replacement changed? Two options\n    if (!model.currentRenderPass && model.lastRenderPassShaderReplacement || model.currentRenderPass && model.currentRenderPass.getShaderReplacement() !== model.lastRenderPassShaderReplacement) {\n      needRebuild = true;\n    }\n\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    // render pass shader replacement changed\n    if (model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.selectionStateChanged.getMTime() || needRebuild) {\n      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;\n      return true;\n    }\n    return false;\n  };\n  publicAPI.invokeShaderCallbacks = (cellBO, ren, actor) => {\n    const listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n    if (listCallbacks) {\n      listCallbacks.forEach(object => {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n    if (cellBO.getProgram().isUniformUsed('VertexIDOffset')) {\n      cellBO.getProgram().setUniformi('VertexIDOffset', model.vertexIDOffset);\n    }\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n      if (cellBO.getProgram().isAttributeUsed('vertexMC')) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexMC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n          vtkErrorMacro('Error setting vertexMC in shader VAO.');\n        }\n      }\n      if (cellBO.getProgram().isAttributeUsed('normalMC') && cellBO.getCABO().getNormalOffset() && lastLightComplexity > 0) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'normalMC', cellBO.getCABO().getNormalOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n          vtkErrorMacro('Error setting normalMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('normalMC');\n      }\n      model.renderable.getCustomShaderAttributes().forEach((attrName, idx) => {\n        if (cellBO.getProgram().isAttributeUsed(`${attrName}MC`)) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), `${attrName}MC`, cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(`Error setting ${attrName}MC in shader VAO.`);\n          }\n        }\n      });\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n      if (cellBO.getProgram().isAttributeUsed('scalarColor') && cellBO.getCABO().getColorComponents()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO().getColorBO(), 'scalarColor', cellBO.getCABO().getColorOffset(), cellBO.getCABO().getColorBOStride(), model.context.UNSIGNED_BYTE, 4, true)) {\n          vtkErrorMacro('Error setting scalarColor in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('scalarColor');\n      }\n      cellBO.getAttributeUpdateTime().modified();\n    }\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      // add all the clipping planes\n      const numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      const planeEquations = [];\n      const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n      const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n      const mat = inverseShiftScaleMatrix ? mat4.copy(model.tmpMat4, actor.getMatrix()) : actor.getMatrix();\n      if (inverseShiftScaleMatrix) {\n        mat4.transpose(mat, mat);\n        mat4.multiply(mat, mat, inverseShiftScaleMatrix);\n        mat4.transpose(mat, mat);\n      }\n      for (let i = 0; i < numClipPlanes; i++) {\n        const planeEquation = [];\n        model.renderable.getClippingPlaneInDataCoords(mat, i, planeEquation);\n        for (let j = 0; j < 4; j++) {\n          planeEquations.push(planeEquation[j]);\n        }\n      }\n      cellBO.getProgram().setUniformi('numClipPlanes', numClipPlanes);\n      cellBO.getProgram().setUniform4fv('clipPlanes', planeEquations);\n    }\n    if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n      cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n    }\n    const tus = model.openGLActor.getActiveTextures();\n    if (tus) {\n      for (let index = 0; index < tus.length; ++index) {\n        const tex = tus[index];\n        const texUnit = tex.getTextureUnit();\n        const tname = `texture${texUnit + 1}`;\n        if (cellBO.getProgram().isUniformUsed(tname)) {\n          cellBO.getProgram().setUniformi(tname, texUnit);\n        }\n      }\n    }\n\n    // handle depth requests\n    if (model.haveSeenDepthRequest) {\n      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);\n    }\n\n    // handle coincident\n    if (cellBO.getProgram().isUniformUsed('coffset')) {\n      const cp = publicAPI.getCoincidentParameters(ren, actor);\n      cellBO.getProgram().setUniformf('coffset', cp.offset);\n      // cfactor isn't always used when coffset is.\n      if (cellBO.getProgram().isUniformUsed('cfactor')) {\n        cellBO.getProgram().setUniformf('cfactor', cp.factor);\n      }\n    }\n\n    // handle wide lines\n    cellBO.setMapperShaderParameters(ren, actor, model._openGLRenderer.getTiledSizeAndOrigin());\n    const selector = model._openGLRenderer.getSelector();\n    cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n    cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n  };\n  publicAPI.setLightingShaderParameters = (cellBO, ren, actor) => {\n    // for unlit and headlight there are no lighting parameters\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    if (lastLightComplexity < 2) {\n      return;\n    }\n    const program = cellBO.getProgram();\n\n    // bind some light settings\n    let numberOfLights = 0;\n    const lights = ren.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      const light = lights[index];\n      const status = light.getSwitch();\n      if (status > 0.0) {\n        const dColor = light.getColorByReference();\n        const intensity = light.getIntensity();\n        model.lightColor[0] = dColor[0] * intensity;\n        model.lightColor[1] = dColor[1] * intensity;\n        model.lightColor[2] = dColor[2] * intensity;\n        // get required info from light\n        const ld = light.getDirection();\n        const transform = ren.getActiveCamera().getViewMatrix();\n        const newLightDirection = [...ld];\n        if (light.lightTypeIsSceneLight()) {\n          newLightDirection[0] = transform[0] * ld[0] + transform[1] * ld[1] + transform[2] * ld[2];\n          newLightDirection[1] = transform[4] * ld[0] + transform[5] * ld[1] + transform[6] * ld[2];\n          newLightDirection[2] = transform[8] * ld[0] + transform[9] * ld[1] + transform[10] * ld[2];\n          normalize(newLightDirection);\n        }\n        model.lightDirection[0] = newLightDirection[0];\n        model.lightDirection[1] = newLightDirection[1];\n        model.lightDirection[2] = newLightDirection[2];\n        normalize(model.lightDirection);\n        program.setUniform3fArray(`lightColor${numberOfLights}`, model.lightColor);\n        program.setUniform3fArray(`lightDirectionVC${numberOfLights}`, model.lightDirection);\n        numberOfLights++;\n      }\n    }\n\n    // we are done unless we have positional lights\n    if (lastLightComplexity < 3) {\n      return;\n    }\n\n    // for lightkit case there are some parameters to set\n    const cam = ren.getActiveCamera();\n    const viewTF = cam.getViewMatrix();\n    mat4.transpose(viewTF, viewTF);\n    numberOfLights = 0;\n    for (let index = 0; index < lights.length; ++index) {\n      const light = lights[index];\n      const status = light.getSwitch();\n      if (status > 0.0) {\n        const lp = light.getTransformedPosition();\n        const np = new Float64Array(3);\n        vec3.transformMat4(np, lp, viewTF);\n        program.setUniform3fArray(`lightAttenuation${numberOfLights}`, light.getAttenuationValuesByReference());\n        program.setUniformi(`lightPositional${numberOfLights}`, light.getPositional());\n        program.setUniformf(`lightExponent${numberOfLights}`, light.getExponent());\n        program.setUniformf(`lightConeAngle${numberOfLights}`, light.getConeAngle());\n        program.setUniform3fArray(`lightPositionVC${numberOfLights}`, [np[0], np[1], np[2]]);\n        numberOfLights++;\n      }\n    }\n  };\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce((res, matrix, index) => {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n\n    // [WMVP]C == {world, model, view, projection} coordinates\n    // E.g., WCPC == world to projection coordinate transformation\n    const keyMats = model.openGLCamera.getKeyMatrices(ren);\n    const cam = ren.getActiveCamera();\n    const camm = model.openGLCamera.getKeyMatrixTime().getMTime();\n    const progm = program.getLastCameraMTime();\n    const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n    const actorIsIdentity = actor.getIsIdentity();\n    const actMats = actorIsIdentity ? {\n      mcwc: null,\n      normalMatrix: null\n    } : model.openGLActor.getKeyMatrices();\n    if (actor.getCoordinateSystem() === CoordinateSystem.DISPLAY) {\n      const size = model._openGLRenderer.getTiledSizeAndOrigin();\n      mat4.identity(model.tmpMat4);\n      model.tmpMat4[0] = 2.0 / size.usize;\n      model.tmpMat4[12] = -1.0;\n      model.tmpMat4[5] = 2.0 / size.vsize;\n      model.tmpMat4[13] = -1.0;\n      mat4.multiply(model.tmpMat4, model.tmpMat4, inverseShiftScaleMatrix);\n      program.setUniformMatrix('MCPCMatrix', model.tmpMat4);\n    } else {\n      program.setUniformMatrix('MCPCMatrix', safeMatrixMultiply([keyMats.wcpc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n    }\n    if (program.isUniformUsed('MCVCMatrix')) {\n      program.setUniformMatrix('MCVCMatrix', safeMatrixMultiply([keyMats.wcvc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n    }\n    if (program.isUniformUsed('normalMatrix')) {\n      program.setUniformMatrix3x3('normalMatrix', safeMatrixMultiply([keyMats.normalMatrix, actMats.normalMatrix], mat3, model.tmpMat3));\n    }\n    if (progm !== camm) {\n      if (program.isUniformUsed('cameraParallel')) {\n        program.setUniformi('cameraParallel', cam.getParallelProjection());\n      }\n      program.setLastCameraMTime(camm);\n    }\n    if (!actorIsIdentity) {\n      // reset the cam mtime as actor modified the shader values\n      program.setLastCameraMTime(0);\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    let ppty = actor.getProperty();\n    let opacity = ppty.getOpacity();\n    let aColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getAmbientColorByReference();\n    let dColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getDiffuseColorByReference();\n    let aIntensity = model.drawingEdges ? 1.0 : ppty.getAmbient();\n    let dIntensity = model.drawingEdges ? 0.0 : ppty.getDiffuse();\n    let sIntensity = model.drawingEdges ? 0.0 : ppty.getSpecular();\n    const specularPower = ppty.getSpecularPower();\n    program.setUniformf('opacityUniform', opacity);\n    program.setUniform3fArray('ambientColorUniform', aColor);\n    program.setUniform3fArray('diffuseColorUniform', dColor);\n    program.setUniformf('ambient', aIntensity);\n    program.setUniformf('diffuse', dIntensity);\n\n    // we are done unless we have lighting\n    const lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    if (lastLightComplexity < 1) {\n      return;\n    }\n    let sColor = ppty.getSpecularColorByReference();\n    program.setUniform3fArray('specularColorUniform', sColor);\n    program.setUniformf('specularPowerUniform', specularPower);\n    program.setUniformf('specular', sIntensity);\n\n    // now set the backface properties if we have them\n    if (program.isUniformUsed('ambientIntensityBF')) {\n      ppty = actor.getBackfaceProperty();\n      opacity = ppty.getOpacity();\n      aColor = ppty.getAmbientColor();\n      aIntensity = ppty.getAmbient();\n      dColor = ppty.getDiffuseColor();\n      dIntensity = ppty.getDiffuse();\n      sColor = ppty.getSpecularColor();\n      sIntensity = ppty.getSpecular();\n      program.setUniformf('ambientIntensityBF', aIntensity);\n      program.setUniformf('diffuseIntensityBF', dIntensity);\n      program.setUniformf('opacityUniformBF', opacity);\n      program.setUniform3fArray('ambientColorUniformBF', aColor);\n      program.setUniform3fArray('diffuseColorUniformBF', dColor);\n\n      // we are done unless we have lighting\n      if (lastLightComplexity < 1) {\n        return;\n      }\n      program.setUniformf('specularIntensityBF', sIntensity);\n      program.setUniform3fArray('specularColorUniformBF', sColor);\n      program.setUniformf('specularPowerUniformBF', specularPower);\n    }\n  };\n  publicAPI.updateMaximumPointCellIds = (ren, actor) => {\n    const selector = model._openGLRenderer.getSelector();\n    if (!selector) {\n      return;\n    }\n    if (model.selectionWebGLIdsToVTKIds?.points?.length) {\n      const length = model.selectionWebGLIdsToVTKIds.points.length;\n      selector.setMaximumPointId(length - 1);\n    }\n    if (model.selectionWebGLIdsToVTKIds?.cells?.length) {\n      const length = model.selectionWebGLIdsToVTKIds.cells.length;\n      selector.setMaximumCellId(length - 1);\n    }\n    const fieldAssociation = selector.getFieldAssociation();\n    if (fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      model.pointPicking = true;\n    }\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    model.primitiveIDOffset = 0;\n    model.vertexIDOffset = 0;\n    const picking = getPickState(model._openGLRenderer);\n    if (model.lastSelectionState !== picking) {\n      model.selectionStateChanged.modified();\n      model.lastSelectionState = picking;\n    }\n    if (model._openGLRenderer.getSelector()) {\n      switch (picking) {\n        default:\n          model._openGLRenderer.getSelector().renderProp(actor);\n      }\n    }\n\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n\n    // If we are coloring by texture, then load the texture map.\n    // Use Map as indicator, because texture hangs around.\n    if (model.renderable.getColorTextureMap()) {\n      model.internalColorTexture.activate();\n    }\n\n    // Bind the OpenGL, this is shared between the different primitive/cell types.\n    model.lastBoundBO = null;\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const representation = actor.getProperty().getRepresentation();\n    const drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE;\n    const selector = model._openGLRenderer.getSelector();\n    // If we are picking points, we need to tell it to the helper\n    const pointPicking = selector && selector.getFieldAssociation() === FieldAssociations.FIELD_ASSOCIATION_POINTS && (model.lastSelectionState === PassTypes.ID_LOW24 || model.lastSelectionState === PassTypes.ID_HIGH24);\n\n    // for every primitive type\n    for (let i = primTypes.Start; i < primTypes.End; i++) {\n      model.primitives[i].setPointPicking(pointPicking);\n      const cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        // are we drawing edges\n        model.drawingEdges = drawSurfaceWithEdges && (i === primTypes.TrisEdges || i === primTypes.TriStripsEdges);\n        // don't draw edges when rendering depth or rendering for picking\n        if (!model.drawingEdges || !(model.renderDepth || model.lastSelectionState >= 0)) {\n          model.lastBoundBO = model.primitives[i];\n          model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n          model.vertexIDOffset += model.primitives[i].getCABO().getElementCount();\n        }\n      }\n    }\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {\n    if (model.LastBoundBO) {\n      model.LastBoundBO.getVAO().release();\n    }\n    if (model.renderable.getColorTextureMap()) {\n      model.internalColorTexture.deactivate();\n    }\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    // Make sure that we have been properly initialized.\n    // if (ren.getRenderWindow().checkAbortStatus()) {\n    //   return;\n    // }\n\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n\n    // if there are no points then we are done\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n\n    // apply faceCulling\n    const gl = model.context;\n    const backfaceCulling = actor.getProperty().getBackfaceCulling();\n    const frontfaceCulling = actor.getProperty().getFrontfaceCulling();\n    if (!backfaceCulling && !frontfaceCulling) {\n      model._openGLRenderWindow.disableCullFace();\n    } else if (frontfaceCulling) {\n      model._openGLRenderWindow.enableCullFace();\n      gl.cullFace(gl.FRONT);\n    } else {\n      model._openGLRenderWindow.enableCullFace();\n      gl.cullFace(gl.BACK);\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.computeBounds = (ren, actor) => {\n    if (!publicAPI.getInput()) {\n      uninitializeBounds(model.bounds);\n      return;\n    }\n    model.bounds = publicAPI.getInput().getBounds();\n  };\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n    // Always call this function as the selector can change\n    publicAPI.updateMaximumPointCellIds();\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    const vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < publicAPI.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, 1.0);\n    const c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    const scalarMode = model.renderable.getScalarMode();\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n\n    // Do we have normals?\n    let n = actor.getProperty().getInterpolation() !== Shading.FLAT ? poly.getPointData().getNormals() : null;\n    if (n === null && poly.getCellData().getNormals()) {\n      model.haveCellNormals = true;\n      n = poly.getCellData().getNormals();\n    }\n\n    // rebuild the VBO if the data has changed we create a string for the VBO what\n    // can change the VBO? points normals tcoords colors so what can change those?\n    // the input data is clearly one as it can change all four items tcoords may\n    // haveTextures or not colors may change based on quite a few mapping\n    // parameters in the mapper\n\n    const representation = actor.getProperty().getRepresentation();\n    let tcoords = poly.getPointData().getTCoords();\n    if (!model.openGLActor.getActiveTextures()) {\n      tcoords = null;\n    }\n\n    // Flag to check if tcoords are per cell instead of per point\n    let useTCoordsPerCell = false;\n    // handle color mapping via texture\n    if (model.renderable.getColorCoordinates()) {\n      tcoords = model.renderable.getColorCoordinates();\n      useTCoordsPerCell = model.renderable.getAreScalarsMappedFromCells();\n      if (!model.internalColorTexture) {\n        model.internalColorTexture = vtkOpenGLTexture.newInstance({\n          resizable: true\n        });\n      }\n      const tex = model.internalColorTexture;\n      // the following 4 lines allow for NPOT textures\n      tex.setMinificationFilter(Filter.NEAREST);\n      tex.setMagnificationFilter(Filter.NEAREST);\n      tex.setWrapS(Wrap.CLAMP_TO_EDGE);\n      tex.setWrapT(Wrap.CLAMP_TO_EDGE);\n      tex.setOpenGLRenderWindow(model._openGLRenderWindow);\n      const input = model.renderable.getColorTextureMap();\n      const ext = input.getExtent();\n      const inScalars = input.getPointData().getScalars();\n      tex.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());\n      tex.activate();\n      tex.sendParameters();\n      tex.deactivate();\n    }\n    const toString = `${poly.getMTime()}A${representation}B${poly.getMTime()}` + `C${n ? n.getMTime() : 1}D${c ? c.getMTime() : 1}` + `E${actor.getProperty().getEdgeVisibility()}` + `F${tcoords ? tcoords.getMTime() : 1}`;\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      const points = poly.getPoints();\n      const options = {\n        points,\n        normals: n,\n        tcoords,\n        colors: c,\n        cellOffset: 0,\n        vertexOffset: 0,\n        // Used to keep track of vertex ids across primitives for selection\n        useTCoordsPerCell,\n        haveCellScalars: model.haveCellScalars,\n        haveCellNormals: model.haveCellNormals,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(arrayName => poly.getPointData().getArrayByName(arrayName))\n      };\n      if (model.renderable.getPopulateSelectionSettings()) {\n        model.selectionWebGLIdsToVTKIds = {\n          points: null,\n          cells: null\n        };\n      }\n      const primitives = [{\n        inRep: 'verts',\n        cells: poly.getVerts()\n      }, {\n        inRep: 'lines',\n        cells: poly.getLines()\n      }, {\n        inRep: 'polys',\n        cells: poly.getPolys()\n      }, {\n        inRep: 'strips',\n        cells: poly.getStrips()\n      }, {\n        inRep: 'polys',\n        cells: poly.getPolys()\n      }, {\n        inRep: 'strips',\n        cells: poly.getStrips()\n      }];\n      const drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE;\n      for (let i = primTypes.Start; i < primTypes.End; i++) {\n        if (i !== primTypes.TrisEdges && i !== primTypes.TriStripsEdges) {\n          options.cellOffset += model.primitives[i].getCABO().createVBO(primitives[i].cells, primitives[i].inRep, representation, options, model.selectionWebGLIdsToVTKIds);\n          options.vertexOffset += model.primitives[i].getCABO().getElementCount();\n        } else {\n          // if we have edge visibility build the edge VBOs\n          if (drawSurfaceWithEdges) {\n            // VBOs for edges in \"surface with edges\" are the last to be built,\n            // they are not used when picking with a hardware selector so they\n            // don't need selectionWebGLIdsToVTKIds and don't update cellOffset and vertexOffset\n            model.primitives[i].getCABO().createVBO(primitives[i].cells, primitives[i].inRep, Representation.WIREFRAME, {\n              ...options,\n              tcoords: null,\n              colors: null,\n              haveCellScalars: false,\n              haveCellNormals: false\n            });\n          } else {\n            // otherwise free them\n            model.primitives[i].releaseGraphicsResources();\n          }\n        }\n      }\n      if (model.renderable.getPopulateSelectionSettings()) {\n        model.renderable.setSelectionWebGLIdsToVTKIds(model.selectionWebGLIdsToVTKIds);\n      }\n      model.VBOBuildString = toString;\n    }\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.getAllocatedGPUMemoryInBytes = () => {\n    let memUsed = 0;\n    model.primitives.forEach(prim => {\n      memUsed += prim.getAllocatedGPUMemoryInBytes();\n    });\n    // Return in MB\n    return memUsed;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null,\n  tmpMat4: null,\n  ambientColor: [],\n  // used internally\n  diffuseColor: [],\n  // used internally\n  specularColor: [],\n  // used internally\n  lightColor: [],\n  // used internally\n  lightDirection: [],\n  // used internally\n  lastHaveSeenDepthRequest: false,\n  haveSeenDepthRequest: false,\n  lastSelectionState: PassTypes.MIN_KNOWN_PASS - 1,\n  selectionStateChanged: null,\n  selectionWebGLIdsToVTKIds: null,\n  pointPicking: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat3 = mat3.identity(new Float64Array(9));\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  for (let i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  }\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.selectionStateChanged = {};\n  obj(model.selectionStateChanged, {\n    mtime: 0\n  });\n\n  // Object methods\n  vtkOpenGLPolyDataMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkOpenGLPolyDataMapper$1 = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkMapper', newInstance);\n\nexport { vtkOpenGLPolyDataMapper$1 as default, extend, newInstance };\n","import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, e as setGet, o as obj, c as macro } from '../../macros2.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper2D from '../Core/Mapper2D.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport { v as vtkPolyData2DFS } from './glsl/vtkPolyData2DFS.glsl.js';\nimport { v as vtkPolyData2DVS } from './glsl/vtkPolyData2DVS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { P as round } from '../../Common/Core/Math/index.js';\nimport { DisplayLocation } from '../Core/Property2D/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat3, mat4, vec3 } from 'gl-matrix';\nconst {\n  primTypes\n} = vtkHelper;\nconst {\n  ScalarMode\n} = vtkMapper2D;\nconst {\n  vtkErrorMacro\n} = macro;\nconst StartEvent = {\n  type: 'StartEvent'\n};\nconst EndEvent = {\n  type: 'EndEvent'\n};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');\n      model._openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n  publicAPI.overlayPass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkPolyData2DVS;\n    shaders.Fragment = vtkPolyData2DFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.render = () => {\n    const ctx = model._openGLRenderWindow.getContext();\n    if (model.context !== ctx) {\n      model.context = ctx;\n      for (let i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n    const actor = model.openGLActor2D.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n\n    // if there are no points then we are done\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    model.primitiveIDOffset = 0;\n    if (model._openGLRenderer.getSelector()) {\n      switch (model._openGLRenderer.getSelector().getCurrentPass()) {\n        default:\n          model._openGLRenderer.getSelector().renderProp(actor);\n      }\n    }\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n\n    // Bind the OpenGL, this is shared between the different primitive/cell types.\n    model.lastBoundBO = null;\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    if (cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    const vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < publicAPI.getMTime() || vmtime < model._openGLRenderWindow.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, actor.getProperty().getOpacity());\n    const c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    const scalarMode = model.renderable.getScalarMode();\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n    const representation = actor.getProperty().getRepresentation();\n    let tcoords = poly.getPointData().getTCoords();\n    if (!model.openGLActor2D.getActiveTextures()) {\n      tcoords = null;\n    }\n    const transformCoordinate = model.renderable.getTransformCoordinate();\n    const view = ren.getRenderWindow().getViews()[0];\n    const vsize = view.getViewportSize(ren);\n    const toString = `${poly.getMTime()}A${representation}B${poly.getMTime()}` + `C${c ? c.getMTime() : 1}` + `D${tcoords ? tcoords.getMTime() : 1}` + `E${transformCoordinate ? ren.getMTime() : 1}` + `F${vsize}`;\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      let points = poly.getPoints();\n      if (transformCoordinate) {\n        const p = vtkPoints.newInstance();\n        const numPts = points.getNumberOfPoints();\n        p.setNumberOfPoints(numPts);\n        const point = [];\n        for (let i = 0; i < numPts; ++i) {\n          points.getPoint(i, point);\n          transformCoordinate.setValue(point);\n          const v = transformCoordinate.getComputedDoubleViewportValue(ren);\n          p.setPoint(i, v[0], v[1], 0.0);\n        }\n        points = p;\n      }\n      const options = {\n        points,\n        tcoords,\n        colors: c,\n        cellOffset: 0,\n        haveCellScalars: model.haveCellSCalars,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(arrayName => poly.getPointData().getArrayByName(arrayName))\n      };\n      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);\n      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);\n      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);\n      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const representation = actor.getProperty().getRepresentation();\n    const gl = model.context;\n    gl.depthMask(true);\n\n    // for every primitive type\n    for (let i = primTypes.Start; i < primTypes.End; i++) {\n      // if there are entries\n      const cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        model.lastBoundBO = model.primitives[i];\n        model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n      }\n    }\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {\n    if (model.lastBoundBO) {\n      model.lastBoundBO.getVAO().release();\n    }\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderColor = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n    if (model.haveCellScalars) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;\n    }\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\\n', 'out vec4 fcolorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;\n    } else {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderTCoord = (shaders, ren, actor) => {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      let VSSource = shaders.Vertex;\n      let GSSource = shaders.Geometry;\n      let FSSource = shaders.Fragment;\n      const tcdim = model.lastBoundBO.getCABO().getTCoordComponents();\n      if (tcdim === 1) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\\n', 'out float tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;\n      } else if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\\n', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;\n      }\n      if (model.haveCellScalars) {\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;\n      }\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.replaceShaderPicking = (shaders, ren, actor) => {\n    let FSSource = shaders.Fragment;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.invokeShaderCallbacks = (cellBO, ren, actor) => {\n    const listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n    if (listCallbacks) {\n      listCallbacks.forEach(object => {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n    if (cellBO.getProgram().isAttributeUsed('vertexWC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n        vtkErrorMacro('Error setting vertexWC in shader VAO.');\n      }\n    }\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      model.renderable.getCustomShaderAttributes().forEach((attrName, idx) => {\n        if (cellBO.getProgram().isAttributeUsed(`${attrName}MC`)) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), `${attrName}MC`, cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(`Error setting ${attrName}MC in shader VAO.`);\n          }\n        }\n      });\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n      }\n      const tus = model.openGLActor2D.getActiveTextures();\n      if (tus) {\n        for (let index = 0; index < tus.length; ++index) {\n          const tex = tus[index];\n          const texUnit = tex.getTextureUnit();\n          const tname = `texture${texUnit + 1}`;\n          if (cellBO.getProgram().isUniformUsed(tname)) {\n            cellBO.getProgram().setUniformi(tname, texUnit);\n          }\n        }\n      }\n\n      // handle wide lines\n      cellBO.setMapperShaderParameters(ren, actor, model._openGLRenderer.getTiledSizeAndOrigin());\n      const selector = model._openGLRenderer.getSelector();\n      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const c = model.renderable.getColorMapColors();\n    if (!c || c.getNumberOfComponents() === 0) {\n      const program = cellBO.getProgram();\n      const ppty = actor.getProperty();\n      const opacity = ppty.getOpacity();\n      const dColor = ppty.getColor();\n      const diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];\n      program.setUniform4f('diffuseColor', diffuseColor);\n    }\n  };\n  publicAPI.setLightingShaderParameters = (cellBO, ren, actor) => {\n    // no-op\n  };\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce((res, matrix, index) => {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n\n    // Get the position of the actor\n    const view = ren.getRenderWindow().getViews()[0];\n    const size = view.getViewportSize(ren);\n    const vport = ren.getViewport();\n    const actorPos = actor.getActualPositionCoordinate().getComputedDoubleViewportValue(ren);\n\n    // Get the window info\n    // Assume tile viewport is 0 1 based on vtkOpenGLRenderer\n    const tileViewport = [0.0, 0.0, 1.0, 1.0];\n    const visVP = [0.0, 0.0, 1.0, 1.0];\n    visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];\n    visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];\n    visVP[2] = vport[2] <= tileViewport[2] ? vport[2] : tileViewport[2];\n    visVP[3] = vport[3] <= tileViewport[3] ? vport[3] : tileViewport[3];\n    if (visVP[0] >= visVP[2]) {\n      return;\n    }\n    if (visVP[1] >= visVP[3]) {\n      return;\n    }\n    size[0] = round(size[0] * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));\n    size[1] = round(size[1] * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));\n    const winSize = model._openGLRenderer.getParent().getSize();\n    const xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);\n    const yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]);\n\n    // set ortho projection\n    const left = -xoff;\n    let right = -xoff + size[0];\n    const bottom = -yoff;\n    let top = -yoff + size[1];\n\n    // it's an error to call glOrtho with\n    // either left==right or top==bottom\n    if (left === right) {\n      right = left + 1.0;\n    }\n    if (bottom === top) {\n      top = bottom + 1.0;\n    }\n\n    // compute the combined ModelView matrix and send it down to save time in the shader\n    const tmpMat4 = mat4.identity(new Float64Array(16));\n    tmpMat4[0] = 2.0 / (right - left);\n    tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);\n    tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);\n    tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);\n    tmpMat4[2 * 4 + 2] = 0.0;\n    tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;\n    tmpMat4[3 * 4 + 3] = 1.0;\n    mat4.transpose(tmpMat4, tmpMat4);\n    program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n  };\n  publicAPI.getAllocatedGPUMemoryInBytes = () => {\n    let memUsed = 0;\n    model.primitives.forEach(prim => {\n      memUsed += prim.getAllocatedGPUMemoryInBytes();\n    });\n    // Return in MB\n    return memUsed;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  for (let i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  }\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n\n  // Object methods\n  vtkOpenGLPolyDataMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPolyDataMapper2D = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { vtkPolyDataMapper2D as default, extend, newInstance };\n","import { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport { m as macro } from '../../macros2.js';\nimport { registerViewConstructor } from '../Core/RenderWindow.js';\nimport vtkForwardPass from './ForwardPass.js';\nimport vtkHardwareSelector from './HardwareSelector.js';\nimport vtkShaderCache from './ShaderCache.js';\nimport vtkTextureUnitManager from './TextureUnitManager.js';\nimport vtkViewNodeFactory, { registerOverride } from './ViewNodeFactory.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkRenderWindowViewNode from '../SceneGraph/RenderWindowViewNode.js';\nimport { createContextProxyHandler } from './RenderWindow/ContextProxy.js';\n\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro\n} = macro;\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n};\nconst parentMethodsToProxy = ['activateTexture', 'deactivateTexture', 'disableCullFace', 'enableCullFace', 'get3DContext', 'getActiveFramebuffer', 'getContext', 'getDefaultTextureByteSize', 'getDefaultTextureInternalFormat', 'getDefaultToWebgl2', 'getGLInformations', 'getGraphicsMemoryInfo', 'getGraphicsResourceForObject', 'getHardwareMaximumLineWidth', 'getPixelData', 'getShaderCache', 'getTextureUnitForTexture', 'getTextureUnitManager', 'getWebgl2', 'makeCurrent', 'releaseGraphicsResources', 'registerGraphicsResourceUser', 'unregisterGraphicsResourceUser', 'restoreContext', 'setActiveFramebuffer', 'setContext', 'setDefaultToWebgl2', 'setGraphicsResourceForObject'];\nfunction checkRenderTargetSupport(gl, format, type) {\n  // create temporary frame buffer and texture\n  const framebuffer = gl.createFramebuffer();\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  // check frame buffer status\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  // clean up\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\n// ----------------------------------------------------------------------------\n// Monitor the usage of GL context across vtkOpenGLRenderWindow instances\n// ----------------------------------------------------------------------------\n\nlet GL_CONTEXT_COUNT = 0;\nconst GL_CONTEXT_LISTENERS = [];\nfunction createGLContext() {\n  GL_CONTEXT_COUNT++;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\nfunction deleteGLContext() {\n  GL_CONTEXT_COUNT--;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\nfunction pushMonitorGLContextCount(cb) {\n  GL_CONTEXT_LISTENERS.push(cb);\n}\nfunction popMonitorGLContextCount(cb) {\n  return GL_CONTEXT_LISTENERS.pop();\n}\nfunction _preventDefault(e) {\n  e.preventDefault();\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderWindow');\n\n  // Only create a cachingContextHandler if needed\n  let cachingContextHandler;\n  function getCachingContextHandler() {\n    if (!cachingContextHandler) {\n      cachingContextHandler = createContextProxyHandler();\n    }\n    return cachingContextHandler;\n  }\n  publicAPI.getViewNodeFactory = () => model.myFactory;\n\n  // prevent default context lost handler\n  model.canvas.addEventListener('webglcontextlost', _preventDefault, false);\n  model.canvas.addEventListener('webglcontextrestored', publicAPI.restoreContext, false);\n\n  // Auto update style\n  const previousSize = [0, 0];\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n      }\n    }\n\n    // ImageStream size\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    }\n\n    // Offscreen ?\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block';\n\n    // Cursor type\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    }\n\n    // Invalidate cached DOM container size\n    model.containerSize = null;\n  }\n  publicAPI.onModified(updateWindow);\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.addMissingNodes(model.renderable.getChildRenderWindowsByReference());\n      publicAPI.removeUnusedNodes();\n      publicAPI.initialize();\n      model.children.forEach(child => {\n        // Children can be openGl renderer or openGl render windows\n        // Only openGl renderers have a method setOpenGLRenderWindow\n        child.setOpenGLRenderWindow?.(publicAPI);\n      });\n    }\n  };\n  publicAPI.initialize = () => {\n    if (!model.initialized) {\n      // Set root parent if there is one\n      // Some methods of the root parent are proxied (see parentMethodsToProxy)\n      model.rootOpenGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (model.rootOpenGLRenderWindow) {\n        // Initialize a 2D context that will copy the content of the root parent\n        model.context2D = publicAPI.get2DContext();\n      } else {\n        // Initialize a 3D context that may be used by child render windows\n        model.context = publicAPI.get3DContext();\n        publicAPI.resizeFromChildRenderWindows();\n        if (model.context) {\n          createGLContext();\n        }\n        model.textureUnitManager = vtkTextureUnitManager.newInstance();\n        model.textureUnitManager.setContext(model.context);\n        model.shaderCache.setContext(model.context);\n        // initialize blending for transparency\n        const gl = model.context;\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.depthFunc(gl.LEQUAL);\n        gl.enable(gl.BLEND);\n      }\n      model.initialized = true;\n    }\n  };\n  publicAPI.makeCurrent = () => {\n    model.context.makeCurrent();\n  };\n  publicAPI.setContainer = el => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      }\n\n      // Remove canvas from previous container\n      model.el.removeChild(model.canvas);\n\n      // If the renderer has previously added\n      // a background image, remove it from the DOM.\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n    if (model.el !== el) {\n      model.el = el;\n      if (model.el) {\n        model.el.appendChild(model.canvas);\n\n        // If the renderer is set to use a background\n        // image, attach it to the DOM.\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      }\n\n      // Trigger modified()\n      publicAPI.modified();\n    }\n  };\n  publicAPI.getContainer = () => model.el;\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const {\n        width,\n        height\n      } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n    return model.containerSize || model.size;\n  };\n  publicAPI.getFramebufferSize = () => {\n    const fbSize = model.activeFramebuffer?.getSize();\n    return fbSize || model.size;\n  };\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    const pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);\n    model.context.readPixels(x1, y1, x2 - x1 + 1, y2 - y1 + 1, model.context.RGBA, model.context.UNSIGNED_BYTE, pixels);\n    return pixels;\n  };\n  publicAPI.get3DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      preserveDrawingBuffer: false,\n      depth: true,\n      alpha: true,\n      powerPreference: 'high-performance'\n    };\n    let result = null;\n    const webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';\n    model.webgl2 = false;\n    if (model.defaultToWebgl2 && webgl2Supported) {\n      result = model.canvas.getContext('webgl2', options);\n      if (result) {\n        model.webgl2 = true;\n        vtkDebugMacro('using webgl2');\n      }\n    }\n    if (!result) {\n      vtkDebugMacro('using webgl1');\n      result = model.canvas.getContext('webgl', options) || model.canvas.getContext('experimental-webgl', options);\n    }\n    return new Proxy(result, getCachingContextHandler());\n  };\n  publicAPI.get2DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return model.canvas.getContext('2d', options);\n  };\n  publicAPI.restoreContext = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n  };\n  publicAPI.activateTexture = texture => {\n    // Only add if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      model.context.activeTexture(model.context.TEXTURE0 + result);\n      return;\n    }\n    const activeUnit = publicAPI.getTextureUnitManager().allocate();\n    if (activeUnit < 0) {\n      vtkErrorMacro('Hardware does not support the number of textures defined.');\n      return;\n    }\n    model._textureResourceIds.set(texture, activeUnit);\n    model.context.activeTexture(model.context.TEXTURE0 + activeUnit);\n  };\n  publicAPI.deactivateTexture = texture => {\n    // Only deactivate if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      publicAPI.getTextureUnitManager().free(result);\n      model._textureResourceIds.delete(texture);\n    }\n  };\n  publicAPI.getTextureUnitForTexture = texture => {\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      return result;\n    }\n    return -1;\n  };\n  publicAPI.getDefaultTextureByteSize = function (vtkType) {\n    let oglNorm16Ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let useHalfFloat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (model.webgl2) {\n      switch (vtkType) {\n        case VtkDataTypes.CHAR:\n        case VtkDataTypes.SIGNED_CHAR:\n        case VtkDataTypes.UNSIGNED_CHAR:\n          return 1;\n        case oglNorm16Ext:\n        case useHalfFloat:\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        case VtkDataTypes.VOID:\n          // Used for unsigned int depth\n          return 2;\n        default:\n          // For all other cases, assume float\n          return 4;\n      }\n    }\n\n    // webgl1 type support is limited to 1 byte\n    return 1;\n  };\n  publicAPI.getDefaultTextureInternalFormat = function (vtktype, numComps) {\n    let oglNorm16Ext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let useHalfFloat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (model.webgl2) {\n      switch (vtktype) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          switch (numComps) {\n            case 1:\n              return model.context.R8;\n            case 2:\n              return model.context.RG8;\n            case 3:\n              return model.context.RGB8;\n            case 4:\n            default:\n              return model.context.RGBA8;\n          }\n        case oglNorm16Ext && !useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          switch (numComps) {\n            case 1:\n              return oglNorm16Ext.R16_EXT;\n            case 2:\n              return oglNorm16Ext.RG16_EXT;\n            case 3:\n              return oglNorm16Ext.RGB16_EXT;\n            case 4:\n            default:\n              return oglNorm16Ext.RGBA16_EXT;\n          }\n        // prioritize norm16 over float\n        case oglNorm16Ext && !useHalfFloat && VtkDataTypes.SHORT:\n          switch (numComps) {\n            case 1:\n              return oglNorm16Ext.R16_SNORM_EXT;\n            case 2:\n              return oglNorm16Ext.RG16_SNORM_EXT;\n            case 3:\n              return oglNorm16Ext.RGB16_SNORM_EXT;\n            case 4:\n            default:\n              return oglNorm16Ext.RGBA16_SNORM_EXT;\n          }\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        case VtkDataTypes.FLOAT:\n        default:\n          // useHalfFloat tells us if the texture can be accurately\n          // rendered with 16 bits or not.\n          switch (numComps) {\n            case 1:\n              return useHalfFloat ? model.context.R16F : model.context.R32F;\n            case 2:\n              return useHalfFloat ? model.context.RG16F : model.context.RG32F;\n            case 3:\n              return useHalfFloat ? model.context.RGB16F : model.context.RGB32F;\n            case 4:\n            default:\n              return useHalfFloat ? model.context.RGBA16F : model.context.RGBA32F;\n          }\n      }\n    }\n\n    // webgl1 only supports four types\n    switch (numComps) {\n      case 1:\n        return model.context.LUMINANCE;\n      case 2:\n        return model.context.LUMINANCE_ALPHA;\n      case 3:\n        return model.context.RGB;\n      case 4:\n      default:\n        return model.context.RGBA;\n    }\n  };\n  publicAPI.setBackgroundImage = img => {\n    model.bgImage.src = img.src;\n  };\n  publicAPI.setUseBackgroundImage = value => {\n    model.useBackgroundImage = value;\n\n    // Add or remove the background image from the\n    // DOM as specified.\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n  function getCanvasDataURL() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n    temporaryContext.drawImage(model.canvas, 0, 0);\n\n    // Get current client rect to place canvas\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach(renderer => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach(viewProp => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas');\n          // Go throughout all canvas and copy it into temporary main canvas\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition = boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition = boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);\n          }\n        }\n      });\n    });\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n  publicAPI.captureNextImage = function () {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n    let {\n      resetCamera = false,\n      size = null,\n      scale = 1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (model.deleted) {\n      return null;\n    }\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n    model._screenshot = {\n      size: !!size || scale !== 1 ? size || model.size.map(val => val * scale) : null\n    };\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady(imageURL => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize;\n\n            // process the resize\n            publicAPI.modified();\n\n            // restore the saved camera parameters, if applicable\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(_ref => {\n                let {\n                  restoreParamsFn,\n                  arg\n                } = _ref;\n                return restoreParamsFn(arg);\n              });\n            }\n\n            // Trigger a render at the original size\n            publicAPI.traverseAllPasses();\n\n            // Remove and clean up the placeholder, revealing the original\n            model.el.removeChild(model._screenshot.placeHolder);\n            model._screenshot.placeHolder.remove();\n            model._screenshot = null;\n          }\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg);\n\n          // hide the main canvas\n          model.canvas.style.display = 'none';\n\n          // remember the main canvas original size, then resize it\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model.rootOpenGLRenderWindow?.resizeFromChildRenderWindows();\n          model._screenshot.size = null;\n\n          // process the resize\n          publicAPI.modified();\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true;\n\n            // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n            model._screenshot.cameras = model.renderable.getRenderers().map(renderer => {\n              const camera = renderer.getActiveCamera();\n              const params = camera.get('focalPoint', 'position', 'parallelScale');\n              return {\n                resetCameraArgs: isUserResetCamera ? {\n                  renderer\n                } : undefined,\n                resetCameraFn: isUserResetCamera ? resetCamera : renderer.resetCamera,\n                restoreParamsFn: camera.set,\n                // \"clone\" the params so we don't keep refs to properties\n                arg: JSON.parse(JSON.stringify(params))\n              };\n            });\n\n            // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n            model._screenshot.cameras.forEach(_ref2 => {\n              let {\n                resetCameraFn,\n                resetCameraArgs\n              } = _ref2;\n              return resetCameraFn(resetCameraArgs);\n            });\n          }\n\n          // Trigger a render at the custom size\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n  let hardwareMaximumLineWidth;\n  publicAPI.getHardwareMaximumLineWidth = () => {\n    // We cache the result of this function because `getParameter` is slow\n    if (hardwareMaximumLineWidth != null) {\n      return hardwareMaximumLineWidth;\n    }\n    const gl = publicAPI.get3DContext();\n    const lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\n    hardwareMaximumLineWidth = lineWidthRange[1];\n    return lineWidthRange[1];\n  };\n  publicAPI.getGLInformations = () => {\n    if (model._glInformation) {\n      return model._glInformation;\n    }\n    const gl = publicAPI.get3DContext();\n    const glTextureFloat = gl.getExtension('OES_texture_float');\n    const glTextureHalfFloat = gl.getExtension('OES_texture_half_float');\n    const glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    const glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');\n    const glAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n    const params = [['Max Vertex Attributes', 'MAX_VERTEX_ATTRIBS', gl.getParameter(gl.MAX_VERTEX_ATTRIBS)], ['Max Varying Vectors', 'MAX_VARYING_VECTORS', gl.getParameter(gl.MAX_VARYING_VECTORS)], ['Max Vertex Uniform Vectors', 'MAX_VERTEX_UNIFORM_VECTORS', gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)], ['Max Fragment Uniform Vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS', gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)], ['Max Fragment Texture Image Units', 'MAX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)], ['Max Vertex Texture Image Units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)], ['Max Combined Texture Image Units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)], ['Max 2D Texture Size', 'MAX_TEXTURE_SIZE', gl.getParameter(gl.MAX_TEXTURE_SIZE)], ['Max Cube Texture Size', 'MAX_CUBE_MAP_TEXTURE_SIZE', gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)], ['Max Texture Anisotropy', 'MAX_TEXTURE_MAX_ANISOTROPY_EXT', glAnisotropic && gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)], ['Point Size Range', 'ALIASED_POINT_SIZE_RANGE', gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - ')], ['Line Width Range', 'ALIASED_LINE_WIDTH_RANGE', gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - ')], ['Max Viewport Dimensions', 'MAX_VIEWPORT_DIMS', gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - ')], ['Max Renderbuffer Size', 'MAX_RENDERBUFFER_SIZE', gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)], ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)], ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)], ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)], ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)], ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)], ['Framebuffer Stencil Bits', 'STENCIL_BITS', gl.getParameter(gl.STENCIL_BITS)], ['Framebuffer Subpixel Bits', 'SUBPIXEL_BITS', gl.getParameter(gl.SUBPIXEL_BITS)], ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)], ['MSAA Sample Buffers', 'SAMPLE_BUFFERS', gl.getParameter(gl.SAMPLE_BUFFERS)], ['Supported Formats for UByte Render Targets     ', 'UNSIGNED_BYTE RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Half Float Render Targets', 'HALF FLOAT RENDER TARGET FORMATS', [glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGBA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGBA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGB, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGB' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'ALPHA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Full Float Render Targets', 'FLOAT RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Max Multiple Render Targets Buffers', 'MAX_DRAW_BUFFERS_WEBGL', glDrawBuffers ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 0], ['High Float Precision in Vertex Shader', 'HIGH_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Vertex Shader', 'MEDIUM_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Vertex Shader', 'LOW_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Float Precision in Fragment Shader', 'HIGH_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Fragment Shader', 'MEDIUM_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Fragment Shader', 'LOW_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Vertex Shader', 'HIGH_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Vertex Shader', 'MEDIUM_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Vertex Shader', 'LOW_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Fragment Shader', 'HIGH_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Fragment Shader', 'MEDIUM_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Fragment Shader', 'LOW_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['Supported Extensions', 'EXTENSIONS', gl.getSupportedExtensions().join('<br/>\\t\\t\\t\\t\\t    ')], ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)], ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)], ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)], ['Shading Language Version', 'SHADING_LANGUAGE_VERSION', gl.getParameter(gl.SHADING_LANGUAGE_VERSION)], ['Unmasked Renderer', 'UNMASKED_RENDERER', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL)], ['Unmasked Vendor', 'UNMASKED_VENDOR', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL)], ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1]];\n    const result = {};\n    while (params.length) {\n      const [label, key, value] = params.pop();\n      if (key) {\n        result[key] = {\n          label,\n          value\n        };\n      }\n    }\n    model._glInformation = result;\n    return result;\n  };\n  publicAPI.traverseAllPasses = () => {\n    if (model.renderPasses) {\n      for (let index = 0; index < model.renderPasses.length; ++index) {\n        model.renderPasses[index].traverse(publicAPI, null);\n      }\n    }\n    publicAPI.copyParentContent();\n    if (model.notifyStartCaptureImage) {\n      getCanvasDataURL();\n    }\n    const childrenRW = model.renderable.getChildRenderWindowsByReference();\n    for (let i = 0; i < childrenRW.length; ++i) {\n      publicAPI.getViewNodeFor(childrenRW[i])?.traverseAllPasses();\n    }\n  };\n  publicAPI.copyParentContent = () => {\n    const rootParent = model.rootOpenGLRenderWindow;\n    if (!rootParent || !model.context2D || model.children.some(oglRenderer => !!oglRenderer.getSelector?.())) {\n      return;\n    }\n    const parentCanvas = rootParent.getCanvas();\n    const selfCanvas = model.canvas;\n    model.context2D.drawImage(parentCanvas, 0, parentCanvas.height - selfCanvas.height,\n    // source y axis is inverted\n    selfCanvas.width, selfCanvas.height, 0, 0, selfCanvas.width, selfCanvas.height);\n  };\n  publicAPI.resizeFromChildRenderWindows = () => {\n    // Adapt the size of the parent render window to the child render windows\n    const childrenRW = model.renderable.getChildRenderWindowsByReference();\n    if (childrenRW.length > 0) {\n      const maxSize = [0, 0];\n      for (let i = 0; i < childrenRW.length; ++i) {\n        const childSize = publicAPI.getViewNodeFor(childrenRW[i])?.getSize();\n        if (childSize) {\n          maxSize[0] = childSize[0] > maxSize[0] ? childSize[0] : maxSize[0];\n          maxSize[1] = childSize[1] > maxSize[1] ? childSize[1] : maxSize[1];\n        }\n      }\n      publicAPI.setSize(...maxSize);\n    }\n  };\n  publicAPI.disableCullFace = () => {\n    if (model.cullFaceEnabled) {\n      model.context.disable(model.context.CULL_FACE);\n      model.cullFaceEnabled = false;\n    }\n  };\n  publicAPI.enableCullFace = () => {\n    if (!model.cullFaceEnabled) {\n      model.context.enable(model.context.CULL_FACE);\n      model.cullFaceEnabled = true;\n    }\n  };\n  publicAPI.setViewStream = stream => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n    model.viewStream = stream;\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0;\n\n      // Enable display of the background image\n      publicAPI.setUseBackgroundImage(true);\n\n      // Bind to remote stream\n      model.subscription = model.viewStream.onImageReady(e => publicAPI.setBackgroundImage(e.image));\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n      publicAPI.modified();\n    }\n    return true;\n  };\n  publicAPI.createSelector = () => {\n    const ret = vtkHardwareSelector.newInstance();\n    ret.setOpenGLRenderWindow(publicAPI);\n    return ret;\n  };\n  function clearEvents() {\n    model.canvas.removeEventListener('webglcontextlost', _preventDefault);\n    model.canvas.removeEventListener('webglcontextrestored', publicAPI.restoreContext);\n  }\n  publicAPI.delete = macro.chain(() => {\n    if (model.context) {\n      deleteGLContext();\n    }\n    publicAPI.setContainer();\n    publicAPI.setViewStream();\n  }, clearEvents, publicAPI.delete);\n\n  // Do not trigger modified for performance reasons\n  publicAPI.setActiveFramebuffer = newActiveFramebuffer => {\n    model.activeFramebuffer = newActiveFramebuffer;\n  };\n  const superSetSize = publicAPI.setSize;\n  publicAPI.setSize = (width, height) => {\n    const modified = superSetSize(width, height);\n    if (modified) {\n      publicAPI.invokeWindowResizeEvent({\n        width,\n        height\n      });\n    }\n    return modified;\n  };\n  publicAPI.registerGraphicsResourceUser = (coreObject, newUser) => {\n    // Try to create the graphics resource if it doesn't exist\n    if (!model._graphicsResources.has(coreObject)) {\n      publicAPI.setGraphicsResourceForObject(coreObject, null, null);\n    }\n    // Add newUser to the set of users\n    const sharedResource = model._graphicsResources.get(coreObject);\n    sharedResource?.users.add(newUser);\n  };\n  publicAPI.unregisterGraphicsResourceUser = (coreObject, oldUser) => {\n    const sharedResource = model._graphicsResources.get(coreObject);\n    if (!sharedResource) {\n      return;\n    }\n    sharedResource.users.delete(oldUser);\n    // Release graphics resources when the number of users reaches 0\n    if (!sharedResource.users.size) {\n      sharedResource.oglObject?.releaseGraphicsResources(publicAPI);\n      model._graphicsResources.delete(coreObject);\n    }\n  };\n  publicAPI.getGraphicsResourceForObject = coreObject => model._graphicsResources.get(coreObject);\n  publicAPI.setGraphicsResourceForObject = (coreObject, oglObject, hash) => {\n    if (!coreObject) {\n      return;\n    }\n    const sharedResource = model._graphicsResources.get(coreObject);\n    // Release the old resource\n    sharedResource?.oglObject?.releaseGraphicsResources(publicAPI);\n    // Keep the same users that have registered for this coreObject\n    model._graphicsResources.set(coreObject, {\n      coreObject,\n      oglObject,\n      hash,\n      users: sharedResource?.users ?? new Set()\n    });\n  };\n  publicAPI.getGraphicsMemoryInfo = () => {\n    let memUsed = 0;\n    model._graphicsResources.forEach(_ref3 => {\n      let {\n        oglObject\n      } = _ref3;\n      memUsed += oglObject.getAllocatedGPUMemoryInBytes();\n    });\n    return memUsed;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    // Clear the shader cache\n    if (model.shaderCache !== null) {\n      model.shaderCache.releaseGraphicsResources(publicAPI);\n    }\n    // Free cached graphics resources at the context level\n    model._graphicsResources.forEach(_ref4 => {\n      let {\n        oglObject\n      } = _ref4;\n      oglObject.releaseGraphicsResources(publicAPI);\n    });\n    model._graphicsResources.clear();\n    if (model.textureUnitManager !== null) {\n      model.textureUnitManager.freeAll();\n    }\n    // Finally, ask the renderers to release prop resources\n    model.renderable.getRenderersByReference().forEach(ren => {\n      const glRen = publicAPI.getViewNodeFor(ren);\n      glRen?.releaseGraphicsResources();\n    });\n  };\n\n  // Proxy some methods if needed\n  const publicAPIBeforeProxy = {\n    ...publicAPI\n  };\n  parentMethodsToProxy.forEach(methodName => {\n    publicAPI[methodName] = function () {\n      if (model.rootOpenGLRenderWindow) {\n        // Proxy only methods when the render window has a parent\n        return model.rootOpenGLRenderWindow[methodName](...arguments);\n      }\n      return publicAPIBeforeProxy[methodName](...arguments);\n    };\n  });\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  cullFaceEnabled: false,\n  shaderCache: null,\n  initialized: false,\n  context: null,\n  context2D: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  textureUnitManager: null,\n  textureResourceIds: null,\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  webgl2: false,\n  defaultToWebgl2: true,\n  // attempt webgl2 on by default\n  activeFramebuffer: null,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues);\n\n  // Create internal instances\n  if (!model.canvas) {\n    model.canvas = document.createElement('canvas');\n    model.canvas.style.width = '100%';\n  }\n  if (!model.selector) {\n    model.selector = vtkHardwareSelector.newInstance();\n    model.selector.setOpenGLRenderWindow(publicAPI);\n  }\n\n  // Create internal bgImage\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1';\n  model._textureResourceIds = new Map();\n  model._graphicsResources = new Map();\n  model._glInformation = null;\n  model.myFactory = vtkViewNodeFactory.newInstance();\n  model.shaderCache = vtkShaderCache.newInstance();\n  model.shaderCache.setOpenGLRenderWindow(publicAPI);\n\n  // setup default forward pass rendering\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['shaderCache', 'textureUnitManager', 'webgl2', 'useBackgroundImage', 'activeFramebuffer', 'rootOpenGLRenderWindow']);\n  macro.setGet(publicAPI, model, ['initialized', 'context', 'context2D', 'canvas', 'renderPasses', 'notifyStartCaptureImage', 'defaultToWebgl2', 'cursor', 'useOffScreen']);\n  macro.setGetArray(publicAPI, model, ['size'], 2);\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'windowResizeEvent');\n\n  // Object methods\n  vtkOpenGLRenderWindow(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLRenderWindow');\n\n// ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGL', newInstance);\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderWindow = {\n  newInstance,\n  extend,\n  pushMonitorGLContextCount,\n  popMonitorGLContextCount\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderWindow', newInstance);\n\nexport { vtkRenderWindow as default, extend, newInstance, popMonitorGLContextCount, pushMonitorGLContextCount };\n","// This is used to access the underlying 3D context\nconst GET_UNDERLYING_CONTEXT = '__getUnderlyingContext';\nfunction createContextProxyHandler() {\n  const cache = new Map();\n  const getParameterHandler = {\n    apply(target, gl, args) {\n      if (cache.has(args[0])) {\n        return cache.get(args[0]);\n      }\n      return target.apply(gl, args);\n    }\n  };\n\n  // only supports single-value setters\n  function cachedSetterHandler(key) {\n    return {\n      apply(target, gl, args) {\n        cache.set(key, args[0]);\n        return target.apply(gl, args);\n      }\n    };\n  }\n\n  // When a property is accessed on the webgl context proxy,\n  // it's accessed is intercepted. If the property name matches\n  // any of the keys of `propHandlers`, then that handler is called\n  // with the following arguments: (gl, prop, receiver, propValue)\n  // - gl (WebGL2RenderingContext): the underlying webgl context\n  // - propName (string): the property name\n  // - receiver (Proxy): the webgl context proxy\n  // - propValue (unknown): the value of `gl[propName]`\n\n  const propHandlers = Object.create(null);\n\n  // Sets getParameter(property) as a cached getter proxy.\n  // propValue.bind(gl) is to avoid Illegal Invocation errors.\n  propHandlers.getParameter = (gl, prop, receiver, propValue) => new Proxy(propValue.bind(gl), getParameterHandler);\n\n  // Sets depthMask(flag) as a cached setter proxy.\n  propHandlers.depthMask = (gl, prop, receiver, propValue) => new Proxy(propValue.bind(gl), cachedSetterHandler(gl.DEPTH_WRITEMASK));\n  return {\n    get(gl, prop, receiver) {\n      if (prop === GET_UNDERLYING_CONTEXT) return () => gl;\n      let value = Reflect.get(gl, prop, gl);\n      if (value instanceof Function) {\n        // prevents Illegal Invocation errors\n        value = value.bind(gl);\n      }\n      const propHandler = propHandlers[prop];\n      if (propHandler) {\n        return propHandler(gl, prop, receiver, value);\n      }\n      return value;\n    }\n  };\n}\nvar ContextProxy = {\n  createContextProxyHandler\n};\n\nexport { GET_UNDERLYING_CONTEXT, createContextProxyHandler, ContextProxy as default };\n","// See typescript header for documentation\n\nfunction getTransferFunctionHash(transferFunction, useIndependentComponents, numberOfComponents) {\n  return transferFunction ? `${transferFunction.getMTime()}-${useIndependentComponents}-${numberOfComponents}` : '0';\n}\nfunction getImageDataHash(image, scalars) {\n  return `${image.getMTime()}A${scalars.getMTime()}`;\n}\nvar resourceSharingHelper = {\n  getTransferFunctionHash,\n  getImageDataHash\n};\n\nexport { resourceSharingHelper as default, getImageDataHash, getTransferFunctionHash };\n","import { n as newInstance$1, g as get, e as setGet, i as moveToProtected, c as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderer methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-bitwise */\n\nfunction vtkOpenGLRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderer');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getActiveCamera());\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.updateLights = () => {\n    let count = 0;\n    const lights = model.renderable.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n    return count;\n  };\n  publicAPI.zBufferPass = prepass => {\n    if (prepass) {\n      let clearMask = 0;\n      const gl = model.context;\n      if (!model.renderable.getTransparent()) {\n        model.context.clearColor(1.0, 0.0, 0.0, 1.0);\n        clearMask |= gl.COLOR_BUFFER_BIT;\n      }\n      if (!model.renderable.getPreserveDepthBuffer()) {\n        gl.clearDepth(1.0);\n        clearMask |= gl.DEPTH_BUFFER_BIT;\n        model.context.depthMask(true);\n      }\n      const ts = publicAPI.getTiledSizeAndOrigin();\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.colorMask(true, true, true, true);\n      if (clearMask) {\n        gl.clear(clearMask);\n      }\n      gl.enable(gl.DEPTH_TEST);\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => publicAPI.zBufferPass(prepass);\n\n  // Renders myself\n  publicAPI.cameraPass = prepass => {\n    if (prepass) {\n      publicAPI.clear();\n    }\n  };\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n    const viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference();\n\n    // if there is no window assume 0 1\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0];\n\n    // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1];\n\n    // store the result as a pixel value\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]);\n\n    // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2);\n\n    // now compute the size of the intersection of the viewport with the\n    // current tile\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n    return {\n      usize,\n      vsize,\n      lowerLeftU,\n      lowerLeftV\n    };\n  };\n  publicAPI.clear = () => {\n    let clearMask = 0;\n    const gl = model.context;\n    if (!model.renderable.getTransparent()) {\n      const background = model.renderable.getBackgroundByReference();\n      // renderable ensures that background has 4 entries.\n      gl.clearColor(background[0], background[1], background[2], background[3]);\n      clearMask |= gl.COLOR_BUFFER_BIT;\n    }\n    if (!model.renderable.getPreserveDepthBuffer()) {\n      gl.clearDepth(1.0);\n      clearMask |= gl.DEPTH_BUFFER_BIT;\n      gl.depthMask(true);\n    }\n    gl.colorMask(true, true, true, true);\n    const ts = publicAPI.getTiledSizeAndOrigin();\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    if (clearMask) {\n      gl.clear(clearMask);\n    }\n    gl.enable(gl.DEPTH_TEST);\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n    // Releasing resources means that the next render should re-create resources\n    if (model.renderable) {\n      model.renderable.getViewProps().forEach(prop => {\n        prop.modified();\n      });\n    }\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  _openGLRenderWindow: null,\n  selector: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Build VTK API\n  get(publicAPI, model, ['shaderCache']);\n  setGet(publicAPI, model, ['selector']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  // Object methods\n  vtkOpenGLRenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLRenderer');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderer = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderer', newInstance);\n\nexport { vtkRenderer as default, extend, newInstance };\n","import vtkShaderProgram from './ShaderProgram.js';\n\nfunction implementReplaceShaderCoincidentOffset(publicAPI, model) {\n  publicAPI.replaceShaderCoincidentOffset = (shaders, ren, actor) => {\n    const cp = publicAPI.getCoincidentParameters(ren, actor);\n\n    // if we need an offset handle it here\n    // The value of .000016 is suitable for depth buffers\n    // of at least 16 bit depth. We do not query the depth\n    // right now because we would need some mechanism to\n    // cache the result taking into account FBO changes etc.\n    if (cp && (cp.factor !== 0.0 || cp.offset !== 0.0)) {\n      let FSSource = shaders.Fragment;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Coincident::Dec', ['uniform float cfactor;', 'uniform float coffset;']).result;\n      if (model.context.getExtension('EXT_frag_depth')) {\n        if (cp.factor !== 0.0) {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;\n        } else {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + 0.000016*coffset;').result;\n        }\n      }\n      if (model._openGLRenderWindow.getWebgl2()) {\n        if (cp.factor !== 0.0) {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;\n        } else {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + 0.000016*coffset;').result;\n        }\n      }\n      shaders.Fragment = FSSource;\n    }\n  };\n}\nfunction implementBuildShadersWithReplacements(publicAPI, model) {\n  publicAPI.applyShaderReplacements = (shaders, viewSpec, pre) => {\n    let shaderReplacements = null;\n    if (viewSpec) {\n      shaderReplacements = viewSpec.ShaderReplacements;\n    }\n    if (shaderReplacements) {\n      for (let i = 0; i < shaderReplacements.length; i++) {\n        const currReplacement = shaderReplacements[i];\n        if (pre && currReplacement.replaceFirst || !pre && !currReplacement.replaceFirst) {\n          const shaderType = currReplacement.shaderType;\n          const ssrc = shaders[shaderType];\n          const substituteRes = vtkShaderProgram.substitute(ssrc, currReplacement.originalValue, currReplacement.replacementValue, currReplacement.replaceAll);\n          shaders[shaderType] = substituteRes.result;\n        }\n      }\n    }\n  };\n  publicAPI.buildShaders = (shaders, ren, actor) => {\n    publicAPI.getReplacedShaderTemplate(shaders, ren, actor);\n    model.lastRenderPassShaderReplacement = model.currentRenderPass ? model.currentRenderPass.getShaderReplacement() : null;\n\n    // apply any renderPassReplacements\n    if (model.lastRenderPassShaderReplacement) {\n      model.lastRenderPassShaderReplacement(shaders);\n    }\n    const openGLSpec = model.renderable.getViewSpecificProperties().OpenGL;\n\n    // user specified pre replacements\n    publicAPI.applyShaderReplacements(shaders, openGLSpec, true);\n    publicAPI.replaceShaderValues(shaders, ren, actor);\n\n    // user specified post replacements\n    publicAPI.applyShaderReplacements(shaders, openGLSpec);\n  };\n  publicAPI.getReplacedShaderTemplate = (shaders, ren, actor) => {\n    const openGLSpecProp = model.renderable.getViewSpecificProperties().OpenGL;\n    publicAPI.getShaderTemplate(shaders, ren, actor);\n    let vertexShaderCode = shaders.Vertex;\n    if (openGLSpecProp) {\n      const vertexSpecProp = openGLSpecProp.VertexShaderCode;\n      if (vertexSpecProp !== undefined && vertexSpecProp !== '') {\n        vertexShaderCode = vertexSpecProp;\n      }\n    }\n    shaders.Vertex = vertexShaderCode;\n    let fragmentShaderCode = shaders.Fragment;\n    if (openGLSpecProp) {\n      const fragmentSpecProp = openGLSpecProp.FragmentShaderCode;\n      if (fragmentSpecProp !== undefined && fragmentSpecProp !== '') {\n        fragmentShaderCode = fragmentSpecProp;\n      }\n    }\n    shaders.Fragment = fragmentShaderCode;\n    let geometryShaderCode = shaders.Geometry;\n    if (openGLSpecProp) {\n      const geometrySpecProp = openGLSpecProp.GeometryShaderCode;\n      if (geometrySpecProp !== undefined) {\n        geometryShaderCode = geometrySpecProp;\n      }\n    }\n    shaders.Geometry = geometryShaderCode;\n  };\n}\nvar vtkReplacementShaderMapper = {\n  implementReplaceShaderCoincidentOffset,\n  implementBuildShadersWithReplacements\n};\n\nexport { vtkReplacementShaderMapper as default };\n","import { n as newInstance$1 } from '../../macros2.js';\nimport vtkScalarBarActor from '../Core/ScalarBarActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLScalarBarActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLScalarBarActor(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLScalarBarActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      if (!model.scalarBarActorHelper.getRenderable()) {\n        model.scalarBarActorHelper.setRenderable(model.renderable);\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getBarActor());\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getTmActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      const camera = model._openGLRenderer ? model._openGLRenderer.getRenderable().getActiveCamera() : null;\n      const tsize = model._openGLRenderer.getTiledSizeAndOrigin();\n      model.scalarBarActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model._openGLRenderWindow.getRenderable());\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.scalarBarActorHelper = vtkScalarBarActor.newScalarBarActorHelper();\n\n  // Object methods\n  vtkOpenGLScalarBarActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLScalarBarActor');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkScalarBarActor', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// export const SHADER_TYPES = ['Vertex', 'Fragment', 'Geometry', 'Unknown'];\n\n// ----------------------------------------------------------------------------\n// vtkShader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkShader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkShader');\n  publicAPI.compile = () => {\n    let stype = model.context.VERTEX_SHADER;\n    if (!model.source || !model.source.length || model.shaderType === 'Unknown') {\n      return false;\n    }\n\n    // Ensure we delete the previous shader if necessary.\n    if (model.handle !== 0) {\n      model.context.deleteShader(model.handle);\n      model.handle = 0;\n    }\n    switch (model.shaderType) {\n      // case vtkShader::Geometry:\n      //   type = GL_GEOMETRY_SHADER;\n      //   break;\n      case 'Fragment':\n        stype = model.context.FRAGMENT_SHADER;\n        break;\n      case 'Vertex':\n      default:\n        stype = model.context.VERTEX_SHADER;\n        break;\n    }\n    model.handle = model.context.createShader(stype);\n    model.context.shaderSource(model.handle, model.source);\n    model.context.compileShader(model.handle);\n    const isCompiled = model.context.getShaderParameter(model.handle, model.context.COMPILE_STATUS);\n    if (!isCompiled) {\n      const lastError = model.context.getShaderInfoLog(model.handle);\n      vtkErrorMacro(`Error compiling shader '${model.source}': ${lastError}`);\n      model.context.deleteShader(model.handle);\n      model.handle = 0;\n      return false;\n    }\n\n    // The shader compiled, store its handle and return success.\n    return true;\n  };\n  publicAPI.cleanup = () => {\n    if (model.shaderType === 'Unknown' || model.handle === 0) {\n      return;\n    }\n    model.context.deleteShader(model.handle);\n    model.handle = 0;\n    model.dirty = true;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  shaderType: 'Unknown',\n  source: '',\n  error: '',\n  handle: 0,\n  dirty: false,\n  context: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['shaderType', 'source', 'error', 'handle', 'context']);\n\n  // Object methods\n  vtkShader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkShader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkShader$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkShader$1 as default, extend, newInstance };\n","import Md5 from 'spark-md5';\nimport { m as macro } from '../../macros2.js';\nimport vtkShaderProgram from './ShaderProgram.js';\n\n// ----------------------------------------------------------------------------\n\nconst SET_GET_FIELDS = ['lastShaderProgramBound', 'context', '_openGLRenderWindow'];\n\n// ----------------------------------------------------------------------------\n// vtkShaderCache methods\n// ----------------------------------------------------------------------------\n\nfunction vtkShaderCache(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkShaderCache');\n  publicAPI.replaceShaderValues = (VSSource, FSSource, GSSource) => {\n    // first handle renaming any Fragment shader inputs\n    // if we have a geometry shader. By default fragment shaders\n    // assume their inputs come from a Vertex Shader. When we\n    // have a Geometry shader we rename the frament shader inputs\n    // to come from the geometry shader\n\n    let nFSSource = FSSource;\n    if (GSSource.length > 0) {\n      nFSSource = vtkShaderProgram.substitute(nFSSource, 'VSOut', 'GSOut').result;\n    }\n    const gl2 = model._openGLRenderWindow.getWebgl2();\n    let fragDepthString = '\\n';\n    let version = '#version 100\\n';\n    if (gl2) {\n      version = '#version 300 es\\n' + '#define attribute in\\n' + '#define textureCube texture\\n' + '#define texture2D texture\\n' + '#define textureCubeLod textureLod\\n' + '#define texture2DLod textureLod\\n';\n    } else {\n      model.context.getExtension('OES_standard_derivatives');\n      if (model.context.getExtension('EXT_frag_depth')) {\n        fragDepthString = '#extension GL_EXT_frag_depth : enable\\n';\n      }\n      if (model.context.getExtension('EXT_shader_texture_lod')) {\n        fragDepthString += '#extension GL_EXT_shader_texture_lod : enable\\n' + '#define textureCubeLod textureCubeLodEXT\\n' + '#define texture2DLod texture2DLodEXT';\n      }\n    }\n    nFSSource = vtkShaderProgram.substitute(nFSSource, '//VTK::System::Dec', [`${version}\\n`, gl2 ? '' : '#extension GL_OES_standard_derivatives : enable\\n', fragDepthString, '#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', 'precision highp int;', '#else', 'precision mediump float;', 'precision mediump int;', '#endif']).result;\n    let nVSSource = vtkShaderProgram.substitute(VSSource, '//VTK::System::Dec', [`${version}\\n`, '#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', 'precision highp int;', '#else', 'precision mediump float;', 'precision mediump int;', '#endif']).result;\n    if (gl2) {\n      nVSSource = vtkShaderProgram.substitute(nVSSource, 'varying', 'out').result;\n      nFSSource = vtkShaderProgram.substitute(nFSSource, 'varying', 'in').result;\n      let shaderOutputs = '';\n      let outputCount = 0;\n      while (nFSSource.includes(`gl_FragData[${outputCount}]`)) {\n        nFSSource = vtkShaderProgram.substitute(nFSSource, `gl_FragData\\\\[${outputCount}\\\\]`, `fragOutput${outputCount}`).result;\n        shaderOutputs += `layout(location = ${outputCount}) out vec4 fragOutput${outputCount};\\n`;\n        outputCount++;\n      }\n      nFSSource = vtkShaderProgram.substitute(nFSSource, '//VTK::Output::Dec', shaderOutputs).result;\n    }\n\n    // nFSSource = ShaderProgram.substitute(nFSSource, 'gl_FragData\\\\[0\\\\]',\n    //   'gl_FragColor').result;\n\n    const nGSSource = vtkShaderProgram.substitute(GSSource, '//VTK::System::Dec', version).result;\n    return {\n      VSSource: nVSSource,\n      FSSource: nFSSource,\n      GSSource: nGSSource\n    };\n  };\n\n  // return NULL if there is an issue\n  publicAPI.readyShaderProgramArray = (vertexCode, fragmentCode, geometryCode) => {\n    const data = publicAPI.replaceShaderValues(vertexCode, fragmentCode, geometryCode);\n    const shaderProgram = publicAPI.getShaderProgram(data.VSSource, data.FSSource, data.GSSource);\n    return publicAPI.readyShaderProgram(shaderProgram);\n  };\n  publicAPI.readyShaderProgram = program => {\n    if (!program) {\n      return null;\n    }\n\n    // compile if needed\n    if (!program.getCompiled() && !program.compileShader()) {\n      return null;\n    }\n\n    // bind if needed\n    if (!publicAPI.bindShaderProgram(program)) {\n      return null;\n    }\n    return program;\n  };\n  publicAPI.getShaderProgram = (vertexCode, fragmentCode, geometryCode) => {\n    // compute the MD5 and the check the map\n    const hashInput = `${vertexCode}${fragmentCode}${geometryCode}`;\n    const result = Md5.hash(hashInput);\n\n    // does it already exist?\n    if (!(result in model.shaderPrograms)) {\n      // create one\n      const sps = vtkShaderProgram.newInstance();\n      sps.setContext(model.context);\n      sps.getVertexShader().setSource(vertexCode);\n      sps.getFragmentShader().setSource(fragmentCode);\n      if (geometryCode) {\n        sps.getGeometryShader().setSource(geometryCode);\n      }\n      sps.setMd5Hash(result);\n      model.shaderPrograms[result] = sps;\n      return sps;\n    }\n    return model.shaderPrograms[result];\n  };\n  publicAPI.releaseGraphicsResources = win => {\n    // NOTE:\n    // In the current implementation as of October 26th, if a shader\n    // program is created by ShaderCache then it should make sure\n    // that it releases the graphics resources used by these programs.\n    // It is not wisely for callers to do that since then they would\n    // have to loop over all the programs were in use and invoke\n    // release graphics resources individually.\n\n    publicAPI.releaseCurrentShaderProgram();\n    Object.keys(model.shaderPrograms).map(key => model.shaderPrograms[key]).forEach(sp => sp.cleanup());\n    model.shaderPrograms = {};\n  };\n  publicAPI.releaseCurrentShaderProgram = () => {\n    // release prior shader\n    if (model.lastShaderProgramBound) {\n      model.lastShaderProgramBound.cleanup();\n      model.lastShaderProgramBound = null;\n    }\n  };\n  publicAPI.bindShaderProgram = program => {\n    if (model.lastShaderProgramBound === program) {\n      return 1;\n    }\n\n    // release prior program\n    if (model.lastShaderProgramBound) {\n      model.lastShaderProgramBound.release();\n    }\n    program.bind();\n    model.lastShaderProgramBound = program;\n    return 1;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  lastShaderProgramBound: null,\n  shaderPrograms: null,\n  context: null\n  // _openGLRenderWindow: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Internal objects\n  model.shaderPrograms = {};\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, SET_GET_FIELDS);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  // Object methods\n  vtkShaderCache(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkShaderCache');\n\n// ----------------------------------------------------------------------------\n\nvar vtkShaderCache$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkShaderCache$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkShader from './Shader.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// perform in place string substitutions, indicate if a substitution was done\n// this is useful for building up shader strings which typically involve\n// lots of string substitutions. Return true if a substitution was done.\nfunction substitute(source, search, replace, all) {\n  // We only accept strings or array of strings, typeof is faster than Array.isArray\n  const replaceStr = typeof replace === 'string' ? replace : replace.join('\\n');\n\n  // We don't need to instantiate a RegExp if we don't want a global substitution.\n  // In all other cases, we need to take the provided string or RegExp and\n  // instantiate a new one to add the `g` flag.\n  // Argument defaults are transpiled to slow `arguments`-based operations\n  // better assume undefined as flag to know if the value is set or not\n  const replaceSearch = all === false ? search : new RegExp(search, 'g');\n  const resultstr = source.replace(replaceSearch, replaceStr);\n  return {\n    // If the result is different than the input, we did perform a replacement\n    replace: resultstr !== replaceStr,\n    result: resultstr\n  };\n}\n\n// ----------------------------------------------------------------------------\n// vtkShaderProgram methods\n// ----------------------------------------------------------------------------\n\nfunction vtkShaderProgram(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkShaderProgram');\n  publicAPI.compileShader = () => {\n    if (!model.vertexShader.compile()) {\n      vtkErrorMacro(model.vertexShader.getSource().split('\\n').map((line, index) => `${index}: ${line}`).join('\\n'));\n      vtkErrorMacro(model.vertexShader.getError());\n      return 0;\n    }\n    if (!model.fragmentShader.compile()) {\n      vtkErrorMacro(model.fragmentShader.getSource().split('\\n').map((line, index) => `${index}: ${line}`).join('\\n'));\n      vtkErrorMacro(model.fragmentShader.getError());\n      return 0;\n    }\n    // skip geometry for now\n    if (!publicAPI.attachShader(model.vertexShader)) {\n      vtkErrorMacro(model.error);\n      return 0;\n    }\n    if (!publicAPI.attachShader(model.fragmentShader)) {\n      vtkErrorMacro(model.error);\n      return 0;\n    }\n    if (!publicAPI.link()) {\n      vtkErrorMacro(`Links failed: ${model.error}`);\n      return 0;\n    }\n    publicAPI.setCompiled(true);\n    return 1;\n  };\n  publicAPI.cleanup = () => {\n    if (model.shaderType === 'Unknown' || model.handle === 0) {\n      return;\n    }\n    publicAPI.release();\n    if (model.vertexShaderHandle !== 0) {\n      model.context.detachShader(model.handle, model.vertexShaderHandle);\n      model.vertexShaderHandle = 0;\n    }\n    if (model.fragmentShaderHandle !== 0) {\n      model.context.detachShader(model.handle, model.fragmentShaderHandle);\n      model.fragmentShaderHandle = 0;\n    }\n    model.context.deleteProgram(model.handle);\n    model.handle = 0;\n    publicAPI.setCompiled(false);\n  };\n  publicAPI.bind = () => {\n    if (!model.linked && !publicAPI.link()) {\n      return false;\n    }\n    model.context.useProgram(model.handle);\n    publicAPI.setBound(true);\n    return true;\n  };\n  publicAPI.isBound = () => !!model.bound;\n  publicAPI.release = () => {\n    model.context.useProgram(null);\n    publicAPI.setBound(false);\n  };\n  publicAPI.setContext = ctx => {\n    model.vertexShader.setContext(ctx);\n    model.fragmentShader.setContext(ctx);\n    model.geometryShader.setContext(ctx);\n  };\n  publicAPI.link = () => {\n    if (model.linked) {\n      return true;\n    }\n    if (model.handle === 0) {\n      model.error = 'Program has not been initialized, and/or does not have shaders.';\n      return false;\n    }\n\n    // clear out the list of uniforms used\n    model.uniformLocs = {};\n    model.context.linkProgram(model.handle);\n    const isCompiled = model.context.getProgramParameter(model.handle, model.context.LINK_STATUS);\n    if (!isCompiled) {\n      const lastError = model.context.getProgramInfoLog(model.handle);\n      vtkErrorMacro(`Error linking shader ${lastError}`);\n      model.handle = 0;\n      return false;\n    }\n    publicAPI.setLinked(true);\n    model.attributeLocs = {};\n    return true;\n  };\n  publicAPI.setUniformMatrix = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    const f32 = new Float32Array(v);\n    model.context.uniformMatrix4fv(location, false, f32);\n    return true;\n  };\n  publicAPI.setUniformMatrix3x3 = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    const f32 = new Float32Array(v);\n    model.context.uniformMatrix3fv(location, false, f32);\n    return true;\n  };\n  publicAPI.setUniformf = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform1f(location, v);\n    return true;\n  };\n  publicAPI.setUniformfv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform1fv(location, v);\n    return true;\n  };\n  publicAPI.setUniformi = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform1i(location, v);\n    return true;\n  };\n  publicAPI.setUniformiv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform1iv(location, v);\n    return true;\n  };\n  publicAPI.setUniform2f = (name, v1, v2) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    if (v2 === undefined) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform2f(location, v1, v2);\n    return true;\n  };\n  publicAPI.setUniform2fv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform2fv(location, v);\n    return true;\n  };\n  publicAPI.setUniform2i = (name, v1, v2) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    if (v2 === undefined) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform2i(location, v1, v2);\n    return true;\n  };\n  publicAPI.setUniform2iv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform2iv(location, v);\n    return true;\n  };\n  publicAPI.setUniform3f = (name, a1, a2, a3) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    if (a3 === undefined) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform3f(location, a1, a2, a3);\n    return true;\n  };\n  publicAPI.setUniform3fArray = (name, a) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    if (!Array.isArray(a) || a.length !== 3) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform3f(location, a[0], a[1], a[2]);\n    return true;\n  };\n  publicAPI.setUniform3fv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform3fv(location, v);\n    return true;\n  };\n  publicAPI.setUniform3i = function (name) {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    let array = args;\n    // allow an array passed as a single argument\n    if (array.length === 1 && Array.isArray(array[0])) {\n      array = array[0];\n    }\n    if (array.length !== 3) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform3i(location, array[0], array[1], array[2]);\n    return true;\n  };\n  publicAPI.setUniform3iv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform3iv(location, v);\n    return true;\n  };\n  publicAPI.setUniform4f = function (name) {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    let array = args;\n    // allow an array passed as a single argument\n    if (array.length === 1 && Array.isArray(array[0])) {\n      array = array[0];\n    }\n    if (array.length !== 4) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform4f(location, array[0], array[1], array[2], array[3]);\n    return true;\n  };\n  publicAPI.setUniform4fv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform4fv(location, v);\n    return true;\n  };\n  publicAPI.setUniform4i = function (name) {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    let array = args;\n    // allow an array passed as a single argument\n    if (array.length === 1 && Array.isArray(array[0])) {\n      array = array[0];\n    }\n    if (array.length !== 4) {\n      throw new RangeError('Invalid number of values for array');\n    }\n    model.context.uniform4i(location, array[0], array[1], array[2], array[3]);\n    return true;\n  };\n  publicAPI.setUniform4iv = (name, v) => {\n    const location = publicAPI.findUniform(name);\n    if (location === -1) {\n      model.error = `Could not set uniform ${name} . No such uniform.`;\n      return false;\n    }\n    model.context.uniform4iv(location, v);\n    return true;\n  };\n  publicAPI.findUniform = name => {\n    if (!name || !model.linked) {\n      return -1;\n    }\n\n    // see if we have cached the result\n    let loc = model.uniformLocs[name];\n    if (loc !== undefined) {\n      return loc;\n    }\n    loc = model.context.getUniformLocation(model.handle, name);\n    if (loc === null) {\n      model.error = `Uniform ${name} not found in current shader program.`;\n      model.uniformLocs[name] = -1;\n      return -1;\n    }\n    model.uniformLocs[name] = loc;\n    return loc;\n  };\n  publicAPI.isUniformUsed = name => {\n    if (!name) {\n      return false;\n    }\n\n    // see if we have cached the result\n    let loc = model.uniformLocs[name];\n    if (loc !== undefined) {\n      return loc !== null;\n    }\n    if (!model.linked) {\n      vtkErrorMacro('attempt to find uniform when the shader program is not linked');\n      return false;\n    }\n    loc = model.context.getUniformLocation(model.handle, name);\n    model.uniformLocs[name] = loc;\n    if (loc === null) {\n      return false;\n    }\n    return true;\n  };\n  publicAPI.isAttributeUsed = name => {\n    if (!name) {\n      return false;\n    }\n\n    // see if we have cached the result\n    if (name in model.attributeLocs) {\n      return true;\n    }\n    if (!model.linked) {\n      vtkErrorMacro('attempt to find uniform when the shader program is not linked');\n      return false;\n    }\n    const loc = model.context.getAttribLocation(model.handle, name);\n    if (loc === -1) {\n      return false;\n    }\n    model.attributeLocs[name] = loc;\n    return true;\n  };\n  publicAPI.attachShader = shader => {\n    if (shader.getHandle() === 0) {\n      model.error = 'Shader object was not initialized, cannot attach it.';\n      return false;\n    }\n    if (shader.getShaderType() === 'Unknown') {\n      model.error = 'Shader object is of type Unknown and cannot be used.';\n      return false;\n    }\n    if (model.handle === 0) {\n      const thandle = model.context.createProgram();\n      if (thandle === 0) {\n        model.error = 'Could not create shader program.';\n        return false;\n      }\n      model.handle = thandle;\n      model.linked = false;\n    }\n    if (shader.getShaderType() === 'Vertex') {\n      if (model.vertexShaderHandle !== 0) {\n        model.context.detachShader(model.handle, model.vertexShaderHandle);\n      }\n      model.vertexShaderHandle = shader.getHandle();\n    }\n    if (shader.getShaderType() === 'Fragment') {\n      if (model.fragmentShaderHandle !== 0) {\n        model.context.detachShader(model.handle, model.fragmentShaderHandle);\n      }\n      model.fragmentShaderHandle = shader.getHandle();\n    }\n    model.context.attachShader(model.handle, shader.getHandle());\n    publicAPI.setLinked(false);\n    return true;\n  };\n  publicAPI.detachShader = shader => {\n    if (shader.getHandle() === 0) {\n      model.error = 'shader object was not initialized, cannot attach it.';\n      return false;\n    }\n    if (shader.getShaderType() === 'Unknown') {\n      model.error = 'Shader object is of type Unknown and cannot be used.';\n      return false;\n    }\n    if (model.handle === 0) {\n      model.error = 'This shader program has not been initialized yet.';\n    }\n    switch (shader.getShaderType()) {\n      case 'Vertex':\n        if (model.vertexShaderHandle !== shader.getHandle()) {\n          model.error = 'The supplied shader was not attached to this program.';\n          return false;\n        }\n        model.context.detachShader(model.handle, shader.getHandle());\n        model.vertexShaderHandle = 0;\n        model.linked = false;\n        return true;\n      case 'Fragment':\n        if (model.fragmentShaderHandle !== shader.getHandle()) {\n          model.error = 'The supplied shader was not attached to this program.';\n          return false;\n        }\n        model.context.detachShader(model.handle, shader.getHandle());\n        model.fragmentShaderHandle = 0;\n        model.linked = false;\n        return true;\n      default:\n        return false;\n    }\n  };\n  publicAPI.setContext = ctx => {\n    model.context = ctx;\n    model.vertexShader.setContext(ctx);\n    model.fragmentShader.setContext(ctx);\n    model.geometryShader.setContext(ctx);\n  };\n  publicAPI.setLastCameraMTime = mtime => {\n    model.lastCameraMTime = mtime;\n  };\n\n  // publicAPI.enableAttributeArray = (name) => {\n  //   const location = publicAPI.findAttributeArray(name);\n  //   if (location === -1) {\n  //     model.error = `Could not enable attribute ${name} No such attribute.`;\n  //     return false;\n  //   }\n  //   model.context.enableVertexAttribArray(location);\n  //   return true;\n  // };\n\n  // publicAPI.disableAttributeArray = (name) => {\n  //   const location = publicAPI.findAttributeArray(name);\n  //   if (location === -1) {\n  //     model.error = `Could not enable attribute ${name} No such attribute.`;\n  //     return false;\n  //   }\n  //   model.context.disableVertexAttribArray(location);\n  //   return true;\n  // };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  vertexShaderHandle: 0,\n  fragmentShaderHandle: 0,\n  geometryShaderHandle: 0,\n  vertexShader: null,\n  fragmentShader: null,\n  geometryShader: null,\n  linked: false,\n  bound: false,\n  compiled: false,\n  error: '',\n  handle: 0,\n  numberOfOutputs: 0,\n  attributesLocs: null,\n  uniformLocs: null,\n  md5Hash: 0,\n  context: null,\n  lastCameraMTime: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Instantiate internal objects\n  model.attributesLocs = {};\n  model.uniformLocs = {};\n  model.vertexShader = vtkShader.newInstance();\n  model.vertexShader.setShaderType('Vertex');\n  model.fragmentShader = vtkShader.newInstance();\n  model.fragmentShader.setShaderType('Fragment');\n  model.geometryShader = vtkShader.newInstance();\n  model.geometryShader.setShaderType('Geometry');\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['lastCameraMTime']);\n  macro.setGet(publicAPI, model, ['error', 'handle', 'compiled', 'bound', 'md5Hash', 'vertexShader', 'fragmentShader', 'geometryShader', 'linked']);\n\n  // Object methods\n  vtkShaderProgram(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkShaderProgram');\n\n// ----------------------------------------------------------------------------\n\nvar vtkShaderProgram$1 = {\n  newInstance,\n  extend,\n  substitute\n};\n\nexport { vtkShaderProgram$1 as default, substitute };\n","import { mat3, mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet, g as get, c as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLSkybox methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLSkybox(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLSkybox');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.openGLTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      const ren = model._openGLRenderer.getRenderable();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      renderPass.incrementOpaqueActorCount();\n    }\n  };\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass && !model._openGLRenderer.getSelector()) {\n      publicAPI.updateBufferObjects();\n      model.context.depthMask(true);\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(model.tris.getProgram());\n      model.openGLTexture.render(model._openGLRenderWindow);\n      const texUnit = model.openGLTexture.getTextureUnit();\n      model.tris.getProgram().setUniformi('sbtexture', texUnit);\n      const ren = model._openGLRenderer.getRenderable();\n      const keyMats = model.openGLCamera.getKeyMatrices(ren);\n      const imat = new Float64Array(16);\n      mat4.invert(imat, keyMats.wcpc);\n      model.tris.getProgram().setUniformMatrix('IMCPCMatrix', imat);\n      if (model.lastFormat === 'box') {\n        const camPos = ren.getActiveCamera().getPosition();\n        model.tris.getProgram().setUniform3f('camPos', camPos[0], camPos[1], camPos[2]);\n      }\n      model.tris.getVAO().bind();\n\n      // draw polygons\n      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      model.tris.getVAO().release();\n      model.openGLTexture.deactivate();\n    }\n  };\n  publicAPI.updateBufferObjects = () => {\n    // build the VBO if needed, only happens once\n    if (!model.tris.getCABO().getElementCount()) {\n      const ptsArray = new Float32Array(12);\n      for (let i = 0; i < 4; i++) {\n        ptsArray[i * 3] = i % 2 * 2 - 1.0;\n        ptsArray[i * 3 + 1] = i > 1 ? 1.0 : -1.0;\n        ptsArray[i * 3 + 2] = 1.0;\n      }\n      const points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n      const cellArray = new Uint16Array(8);\n      cellArray[0] = 3;\n      cellArray[1] = 0;\n      cellArray[2] = 1;\n      cellArray[3] = 3;\n      cellArray[4] = 3;\n      cellArray[5] = 0;\n      cellArray[6] = 3;\n      cellArray[7] = 2;\n      const cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points,\n        cellOffset: 0\n      });\n    }\n\n    // update the program?\n    if (model.renderable.getFormat() !== model.lastFormat) {\n      model.lastFormat = model.renderable.getFormat();\n      if (model.lastFormat === 'box') {\n        // we invert Y below because opengl is messed up!\n        // Cube Maps have been specified to follow the RenderMan\n        // specification (for whatever reason), and RenderMan\n        // assumes the images' origin being in the upper left,\n        // contrary to the usual OpenGL behaviour of having the\n        // image origin in the lower left. That's why things get\n        // swapped in the Y direction. It totally breaks with the usual\n        // OpenGL semantics and doesn't make sense at all.\n        // But now we're stuck with it.  From\n        // https://stackoverflow.com/questions/11685608/convention-of-faces-in-opengl-cubemapping\n        //\n        model.tris.setProgram(model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(`//VTK::System::Dec\n             attribute vec3 vertexMC;\n             uniform mat4 IMCPCMatrix;\n             varying vec3 TexCoords;\n             void main () {\n              gl_Position = vec4(vertexMC.xyz, 1.0);\n              vec4 wpos = IMCPCMatrix * gl_Position;\n              TexCoords = wpos.xyz/wpos.w;\n             }`, `//VTK::System::Dec\n             //VTK::Output::Dec\n             varying vec3 TexCoords;\n             uniform samplerCube sbtexture;\n             uniform vec3 camPos;\n             void main () {\n               // skybox looks from inside out\n               // which means we have to adjust\n               // our tcoords. Otherwise text would\n               // be flipped\n               vec3 tc = normalize(TexCoords - camPos);\n               if (abs(tc.z) < max(abs(tc.x),abs(tc.y)))\n               {\n                 tc = vec3(1.0, 1.0, -1.0) * tc;\n               }\n               else\n               {\n                 tc = vec3(-1.0, 1.0, 1.0) * tc;\n               }\n               gl_FragData[0] = textureCube(sbtexture, tc);\n             }`, ''));\n      }\n      if (model.lastFormat === 'background') {\n        // maps the texture to the window\n        model.tris.setProgram(model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(`//VTK::System::Dec\n             attribute vec3 vertexMC;\n             uniform mat4 IMCPCMatrix;\n             varying vec2 TexCoords;\n             void main () {\n              gl_Position = vec4(vertexMC.xyz, 1.0);\n              vec4 wpos = IMCPCMatrix * gl_Position;\n              TexCoords = vec2(vertexMC.x, vertexMC.y)*0.5 + 0.5;\n             }`, `//VTK::System::Dec\n             //VTK::Output::Dec\n             varying vec2 TexCoords;\n             uniform sampler2D sbtexture;\n             void main () {\n               gl_FragData[0] = texture2D(sbtexture, TexCoords);\n             }`, ''));\n      }\n      model.tris.getShaderSourceTime().modified();\n      model.tris.getVAO().bind();\n      if (!model.tris.getVAO().addAttributeArray(model.tris.getProgram(), model.tris.getCABO(), 'vertexMC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n        vtkErrorMacro('Error setting vertexMC in shader VAO.');\n      }\n    }\n\n    // set/update the texture map if needed\n    const tmaps = model.renderable.getTextures();\n    if (!tmaps.length) {\n      vtkErrorMacro('vtkSkybox requires a texture map');\n    }\n    if (model.openGLTexture.getRenderable() !== tmaps[0]) {\n      model.openGLTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.openGLTexture.setRenderable(tmaps[0]);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.openGLTexture = vtkOpenGLTexture.newInstance();\n  model.tris = vtkHelper.newInstance();\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: mat3.identity(new Float64Array(9)),\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']);\n\n  // Object methods\n  vtkOpenGLSkybox(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkSkybox = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkSkybox', newInstance);\n\nexport { vtkSkybox as default, extend, newInstance };\n","import { mat4 } from 'gl-matrix';\nimport { ObjectType } from './BufferObject/Constants.js';\nimport { n as newInstance$1, c as macro } from '../../macros2.js';\nimport vtkBufferObject from './BufferObject.js';\nimport { r as radiansFromDegrees } from '../../Common/Core/Math/index.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkOpenGLPolyDataMapper from './PolyDataMapper.js';\nimport { v as vtkSphereMapperVS } from './glsl/vtkSphereMapperVS.glsl.js';\nimport { v as vtkPolyDataFS } from './glsl/vtkPolyDataFS.glsl.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLSphereMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLSphereMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLSphereMapper');\n\n  // Capture 'parentClass' api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkSphereMapperVS;\n    shaders.Fragment = vtkPolyDataFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 VCPCMatrix;\\n', 'uniform mat4 MCVCMatrix;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;\n\n    // we create vertexVC below, so turn off the default\n    // implementation\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Impl', ['vec4 vertexVC = vertexVCVSOutput;\\n']).result;\n\n    // for lights kit and positional the VCPC matrix is already defined\n    // so don't redefine it\n    const replacement = ['uniform float invertedDepth;\\n', 'uniform int cameraParallel;\\n', 'varying float radiusVCVSOutput;\\n', 'varying vec3 centerVCVSOutput;\\n', 'uniform mat4 VCPCMatrix;\\n'];\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', replacement).result;\n    let fragString = '';\n    if (model.context.getExtension('EXT_frag_depth')) {\n      fragString = 'gl_FragDepthEXT = (pos.z / pos.w + 1.0) / 2.0;\\n';\n    }\n    if (model._openGLRenderWindow.getWebgl2()) {\n      fragString = 'gl_FragDepth = (pos.z / pos.w + 1.0) / 2.0;\\n';\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', [\n    // compute the eye position and unit direction\n    '  vec3 EyePos;\\n', '  vec3 EyeDir;\\n', '  if (cameraParallel != 0) {\\n', '    EyePos = vec3(vertexVC.x, vertexVC.y, vertexVC.z + 3.0*radiusVCVSOutput);\\n', '    EyeDir = vec3(0.0,0.0,-1.0); }\\n', '  else {\\n', '    EyeDir = vertexVC.xyz;\\n', '    EyePos = vec3(0.0,0.0,0.0);\\n', '    float lengthED = length(EyeDir);\\n', '    EyeDir = normalize(EyeDir);\\n',\n    // we adjust the EyePos to be closer if it is too far away\n    // to prevent floating point precision noise\n    '    if (lengthED > radiusVCVSOutput*3.0) {\\n', '      EyePos = vertexVC.xyz - EyeDir*3.0*radiusVCVSOutput; }\\n', '    }\\n',\n    // translate to Sphere center\n    '  EyePos = EyePos - centerVCVSOutput;\\n',\n    // scale to radius 1.0\n    '  EyePos = EyePos/radiusVCVSOutput;\\n',\n    // find the intersection\n    '  float b = 2.0*dot(EyePos,EyeDir);\\n', '  float c = dot(EyePos,EyePos) - 1.0;\\n', '  float d = b*b - 4.0*c;\\n', '  vec3 normalVCVSOutput = vec3(0.0,0.0,1.0);\\n', '  if (d < 0.0) { discard; }\\n', '  else {\\n', '    float t = (-b - invertedDepth*sqrt(d))*0.5;\\n',\n    // compute the normal, for unit sphere this is just\n    // the intersection point\n    '    normalVCVSOutput = invertedDepth*normalize(EyePos + t*EyeDir);\\n',\n    // compute the intersection point in VC\n    '    vertexVC.xyz = normalVCVSOutput*radiusVCVSOutput + centerVCVSOutput;\\n', '    }\\n',\n    // compute the pixel's depth\n    // ' normalVCVSOutput = vec3(0,0,1);\\n'\n    '  vec4 pos = VCPCMatrix * vertexVC;\\n', fragString]).result;\n\n    // Strip out the normal line -- the normal is computed as part of the depth\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', '').result;\n    if (model.haveSeenDepthRequest) {\n      // special depth impl\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float computedZ = (pos.z / pos.w + 1.0) / 2.0;', 'float iz = floor(computedZ * 65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n    superClass.replaceShaderValues(shaders, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime()) && cellBO.getProgram().isAttributeUsed('offsetMC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'offsetMC', 12,\n      // 12:this->VBO->ColorOffset+sizeof(float)\n      cellBO.getCABO().getStride(), model.context.FLOAT, 2, false)) {\n        vtkErrorMacro(\"Error setting 'offsetMC' in shader VAO.\");\n      }\n    }\n    if (cellBO.getProgram().isUniformUsed('invertedDepth')) {\n      cellBO.getProgram().setUniformf('invertedDepth', model.invert ? -1.0 : 1.0);\n    }\n    if (cellBO.getProgram().isUniformUsed('scaleFactor')) {\n      // apply scaling factor only if a scale array has been provided.\n      const poly = model.currentInput;\n      const pointData = poly.getPointData();\n      if (model.renderable.getScaleArray() != null && pointData.hasArray(model.renderable.getScaleArray())) {\n        cellBO.getProgram().setUniformf('scaleFactor', model.renderable.getScaleFactor());\n      } else {\n        cellBO.getProgram().setUniformf('scaleFactor', 1.0);\n      }\n    }\n    superClass.setMapperShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const cam = ren.getActiveCamera();\n    const keyMats = model.openGLCamera.getKeyMatrices(ren);\n    if (program.isUniformUsed('VCPCMatrix')) {\n      program.setUniformMatrix('VCPCMatrix', keyMats.vcpc);\n    }\n    if (program.isUniformUsed('MCVCMatrix')) {\n      if (!actor.getIsIdentity()) {\n        const actMats = model.openGLActor.getKeyMatrices();\n        const tmp4 = new Float64Array(16);\n        mat4.multiply(tmp4, keyMats.wcvc, actMats.mcwc);\n        program.setUniformMatrix('MCVCMatrix', tmp4);\n      } else {\n        program.setUniformMatrix('MCVCMatrix', keyMats.wcvc);\n      }\n    }\n    if (program.isUniformUsed('cameraParallel')) {\n      cellBO.getProgram().setUniformi('cameraParallel', cam.getParallelProjection());\n    }\n  };\n  publicAPI.getOpenGLMode = (rep, type) => model.context.TRIANGLES;\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, 1.0);\n    const c = model.renderable.getColorMapColors();\n    const vbo = model.primitives[model.primTypes.Tris].getCABO();\n    const pointData = poly.getPointData();\n    const points = poly.getPoints();\n    const numPoints = points.getNumberOfPoints();\n    const pointArray = points.getData();\n    const pointSize = 5; // x,y,z,orientation1,orientation2\n    let scales = null;\n    if (model.renderable.getScaleArray() != null && pointData.hasArray(model.renderable.getScaleArray())) {\n      scales = pointData.getArray(model.renderable.getScaleArray()).getData();\n    }\n    let colorData = null;\n    let colorComponents = 0;\n    let packedUCVBO = null;\n    if (c) {\n      colorComponents = c.getNumberOfComponents();\n      vbo.setColorOffset(0);\n      vbo.setColorBOStride(4);\n      colorData = c.getData();\n      packedUCVBO = new Uint8Array(3 * numPoints * 4);\n      if (!vbo.getColorBO()) {\n        vbo.setColorBO(vtkBufferObject.newInstance());\n      }\n      vbo.getColorBO().setOpenGLRenderWindow(model._openGLRenderWindow);\n    } else if (vbo.getColorBO()) {\n      vbo.setColorBO(null);\n    }\n    vbo.setColorComponents(colorComponents);\n    const packedVBO = new Float32Array(pointSize * numPoints * 3);\n    vbo.setStride(pointSize * 4);\n    const cos30 = Math.cos(radiansFromDegrees(30.0));\n    let pointIdx = 0;\n    let colorIdx = 0;\n\n    //\n    // Generate points and point data for sides\n    //\n    let vboIdx = 0;\n    let ucIdx = 0;\n    for (let i = 0; i < numPoints; ++i) {\n      let radius = model.renderable.getRadius();\n      if (scales) {\n        radius = scales[i];\n      }\n      pointIdx = i * 3;\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = -2.0 * radius * cos30;\n      packedVBO[vboIdx++] = -radius;\n      if (colorData) {\n        colorIdx = i * colorComponents;\n        packedUCVBO[ucIdx++] = colorData[colorIdx];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 1];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 2];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 3];\n      }\n      pointIdx = i * 3;\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = 2.0 * radius * cos30;\n      packedVBO[vboIdx++] = -radius;\n      if (colorData) {\n        packedUCVBO[ucIdx++] = colorData[colorIdx];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 1];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 2];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 3];\n      }\n      pointIdx = i * 3;\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = pointArray[pointIdx++];\n      packedVBO[vboIdx++] = 0.0;\n      packedVBO[vboIdx++] = 2.0 * radius;\n      if (colorData) {\n        packedUCVBO[ucIdx++] = colorData[colorIdx];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 1];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 2];\n        packedUCVBO[ucIdx++] = colorData[colorIdx + 3];\n      }\n    }\n    vbo.setElementCount(vboIdx / pointSize);\n    vbo.upload(packedVBO, ObjectType.ARRAY_BUFFER);\n    if (c) {\n      vbo.getColorBO().upload(packedUCVBO, ObjectType.ARRAY_BUFFER);\n    }\n    model.VBOBuildTime.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkOpenGLPolyDataMapper.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkOpenGLSphereMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLSphereMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkSphereMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkSphereMapper', newInstance);\n\nexport { vtkSphereMapper as default, extend, newInstance };\n","import { mat4, mat3 } from 'gl-matrix';\nimport { ObjectType } from './BufferObject/Constants.js';\nimport { n as newInstance$1, c as macro } from '../../macros2.js';\nimport vtkBufferObject from './BufferObject.js';\nimport { v as vtkStickMapperVS } from './glsl/vtkStickMapperVS.glsl.js';\nimport { v as vtkPolyDataFS } from './glsl/vtkPolyDataFS.glsl.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkOpenGLPolyDataMapper from './PolyDataMapper.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLStickMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLStickMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLStickMapper');\n\n  // Capture 'parentClass' api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkStickMapperVS;\n    shaders.Fragment = vtkPolyDataFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let FSSource = shaders.Fragment;\n    VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 VCPCMatrix;\\n', 'uniform mat4 MCVCMatrix;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Dec', 'varying vec4 vertexVCVSOutput;').result;\n\n    // we create vertexVC below, so turn off the default\n    // implementation\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Impl', '  vec4 vertexVC = vertexVCVSOutput;\\n').result;\n\n    // for lights kit and positional the VCPC matrix is already defined\n    // so don't redefine it\n    const replacement = ['uniform int cameraParallel;\\n', 'varying float radiusVCVSOutput;\\n', 'varying vec3 orientVCVSOutput;\\n', 'varying float lengthVCVSOutput;\\n', 'varying vec3 centerVCVSOutput;\\n', 'uniform mat4 VCPCMatrix;\\n'];\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', replacement).result;\n    let fragString = '';\n    if (model.context.getExtension('EXT_frag_depth')) {\n      fragString = '  gl_FragDepthEXT = (pos.z / pos.w + 1.0) / 2.0;\\n';\n    }\n    if (model._openGLRenderWindow.getWebgl2()) {\n      fragString = 'gl_FragDepth = (pos.z / pos.w + 1.0) / 2.0;\\n';\n    }\n    // see https://www.cl.cam.ac.uk/teaching/1999/AGraphHCI/SMAG/node2.html\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', [\n    // compute the eye position and unit direction\n    '  vec3 EyePos;\\n', '  vec3 EyeDir;\\n', '  if (cameraParallel != 0) {\\n', '    EyePos = vec3(vertexVC.x, vertexVC.y, vertexVC.z + 3.0*radiusVCVSOutput);\\n', '    EyeDir = vec3(0.0,0.0,-1.0); }\\n', '  else {\\n', '    EyeDir = vertexVC.xyz;\\n', '    EyePos = vec3(0.0,0.0,0.0);\\n', '    float lengthED = length(EyeDir);\\n', '    EyeDir = normalize(EyeDir);\\n',\n    // we adjust the EyePos to be closer if it is too far away\n    // to prevent floating point precision noise\n    '    if (lengthED > radiusVCVSOutput*3.0) {\\n', '      EyePos = vertexVC.xyz - EyeDir*3.0*radiusVCVSOutput; }\\n', '    }\\n',\n    // translate to Stick center\n    '  EyePos = EyePos - centerVCVSOutput;\\n',\n    // rotate to new basis\n    // base1, base2, orientVC\n    '  vec3 base1;\\n', '  if (abs(orientVCVSOutput.z) < 0.99) {\\n', '    base1 = normalize(cross(orientVCVSOutput,vec3(0.0,0.0,1.0))); }\\n', '  else {\\n', '    base1 = normalize(cross(orientVCVSOutput,vec3(0.0,1.0,0.0))); }\\n', '  vec3 base2 = cross(orientVCVSOutput,base1);\\n', '  EyePos = vec3(dot(EyePos,base1),dot(EyePos,base2),dot(EyePos,orientVCVSOutput));\\n', '  EyeDir = vec3(dot(EyeDir,base1),dot(EyeDir,base2),dot(EyeDir,orientVCVSOutput));\\n',\n    // scale by radius\n    '  EyePos = EyePos/radiusVCVSOutput;\\n',\n    // find the intersection\n    '  float a = EyeDir.x*EyeDir.x + EyeDir.y*EyeDir.y;\\n', '  float b = 2.0*(EyePos.x*EyeDir.x + EyePos.y*EyeDir.y);\\n', '  float c = EyePos.x*EyePos.x + EyePos.y*EyePos.y - 1.0;\\n', '  float d = b*b - 4.0*a*c;\\n', '  vec3 normalVCVSOutput = vec3(0.0,0.0,1.0);\\n', '  if (d < 0.0) { discard; }\\n', '  else {\\n', '    float t =  (-b - sqrt(d))/(2.0*a);\\n', '    float tz = EyePos.z + t*EyeDir.z;\\n', '    vec3 iPoint = EyePos + t*EyeDir;\\n', '    if (abs(iPoint.z)*radiusVCVSOutput > lengthVCVSOutput*0.5) {\\n',\n    // test for end cap\n    '      float t2 = (-b + sqrt(d))/(2.0*a);\\n', '      float tz2 = EyePos.z + t2*EyeDir.z;\\n', '      if (tz2*radiusVCVSOutput > lengthVCVSOutput*0.5 || tz*radiusVCVSOutput < -0.5*lengthVCVSOutput) { discard; }\\n', '      else {\\n', '        normalVCVSOutput = orientVCVSOutput;\\n', '        float t3 = (lengthVCVSOutput*0.5/radiusVCVSOutput - EyePos.z)/EyeDir.z;\\n', '        iPoint = EyePos + t3*EyeDir;\\n', '        vertexVC.xyz = radiusVCVSOutput*(iPoint.x*base1 + iPoint.y*base2 + iPoint.z*orientVCVSOutput) + centerVCVSOutput;\\n', '        }\\n', '      }\\n', '    else {\\n',\n    // The normal is the iPoint.xy rotated back into VC\n    '      normalVCVSOutput = iPoint.x*base1 + iPoint.y*base2;\\n',\n    // rescale rerotate and translate\n    '      vertexVC.xyz = radiusVCVSOutput*(normalVCVSOutput + iPoint.z*orientVCVSOutput) + centerVCVSOutput;\\n', '      }\\n', '    }\\n',\n    //    '  vec3 normalVC = vec3(0.0,0.0,1.0);\\n'\n    // compute the pixel's depth\n    '  vec4 pos = VCPCMatrix * vertexVC;\\n', fragString]).result;\n\n    // Strip out the normal line -- the normal is computed as part of the depth\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', '').result;\n    if (model.haveSeenDepthRequest) {\n      // special depth impl\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float computedZ = (pos.z / pos.w + 1.0) / 2.0;', 'float iz = floor(computedZ * 65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n    superClass.replaceShaderValues(shaders, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (cellBO.getProgram().isAttributeUsed('orientMC')) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'orientMC', 12,\n        // after X Y Z\n        cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n          vtkErrorMacro(\"Error setting 'orientMC' in shader VAO.\");\n        }\n      }\n      if (cellBO.getProgram().isAttributeUsed('offsetMC')) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO().getColorBO(), 'offsetMC', 0, cellBO.getCABO().getColorBOStride(), model.context.UNSIGNED_BYTE, 3, true)) {\n          vtkErrorMacro(\"Error setting 'offsetMC' in shader VAO.\");\n        }\n      }\n      if (cellBO.getProgram().isAttributeUsed('radiusMC')) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'radiusMC', 24,\n        // X Y Z OX OY OZ\n        cellBO.getCABO().getStride(), model.context.FLOAT, 1, false)) {\n          vtkErrorMacro(\"Error setting 'radiusMC' in shader VAO.\");\n        }\n      }\n    }\n    superClass.setMapperShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const cam = ren.getActiveCamera();\n    const keyMats = model.openGLCamera.getKeyMatrices(ren);\n    if (program.isUniformUsed('VCPCMatrix')) {\n      program.setUniformMatrix('VCPCMatrix', keyMats.vcpc);\n    }\n    if (!actor.getIsIdentity()) {\n      const actMats = model.openGLActor.getKeyMatrices();\n      if (program.isUniformUsed('MCVCMatrix')) {\n        const tmp4 = new Float64Array(16);\n        mat4.multiply(tmp4, keyMats.wcvc, actMats.mcwc);\n        program.setUniformMatrix('MCVCMatrix', tmp4);\n      }\n      if (program.isUniformUsed('normalMatrix')) {\n        const anorms = new Float64Array(9);\n        mat3.multiply(anorms, keyMats.normalMatrix, actMats.normalMatrix);\n        program.setUniformMatrix3x3('normalMatrix', anorms);\n      }\n    } else {\n      if (program.isUniformUsed('MCVCMatrix')) {\n        program.setUniformMatrix('MCVCMatrix', keyMats.wcvc);\n      }\n      if (program.isUniformUsed('normalMatrix')) {\n        program.setUniformMatrix3x3('normalMatrix', keyMats.normalMatrix);\n      }\n    }\n    if (program.isUniformUsed('cameraParallel')) {\n      cellBO.getProgram().setUniformi('cameraParallel', cam.getParallelProjection());\n    }\n  };\n  publicAPI.getOpenGLMode = (rep, type) => model.context.TRIANGLES;\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, 1.0);\n    const c = model.renderable.getColorMapColors();\n    const vbo = model.primitives[model.primTypes.Tris].getCABO();\n    const pointData = poly.getPointData();\n    const points = poly.getPoints();\n    const numPoints = points.getNumberOfPoints();\n    const pointArray = points.getData();\n    let pointSize = 3; // x,y,z\n\n    // three more floats for orientation + 1 for radius\n    pointSize += 4;\n    let colorData = null;\n    let colorComponents = 0;\n    vbo.setColorBOStride(4);\n    if (!vbo.getColorBO()) {\n      vbo.setColorBO(vtkBufferObject.newInstance());\n    }\n    vbo.getColorBO().setOpenGLRenderWindow(model._openGLRenderWindow);\n    if (c) {\n      colorComponents = c.getNumberOfComponents();\n      vbo.setColorOffset(4);\n      colorData = c.getData();\n      vbo.setColorBOStride(8);\n    }\n    vbo.setColorComponents(colorComponents);\n    vbo.setStride(pointSize * 4);\n\n    // Create a buffer, and copy the data over.\n    const packedVBO = new Float32Array(pointSize * numPoints * 12);\n    const packedUCVBO = new Uint8Array(12 * numPoints * (colorData ? 8 : 4));\n    let scales = null;\n    let orientationArray = null;\n    //\n    // Generate points and point data for sides\n    //\n    if (model.renderable.getScaleArray() != null && pointData.hasArray(model.renderable.getScaleArray())) {\n      scales = pointData.getArray(model.renderable.getScaleArray()).getData();\n    }\n    if (model.renderable.getOrientationArray() != null && pointData.hasArray(model.renderable.getOrientationArray())) {\n      orientationArray = pointData.getArray(model.renderable.getOrientationArray()).getData();\n    } else {\n      vtkErrorMacro(['Error setting orientationArray.\\n', 'You have to specify the stick orientation']);\n    }\n\n    // Vertices\n    // 013 - 032 - 324 - 453\n    //\n    //       _.4---_.5\n    //    .-*   .-*\n    //   2-----3\n    //   |    /|\n    //   |   / |\n    //   |  /  |\n    //   | /   |\n    //   |/    |\n    //   0-----1\n    //\n    // coord for each points\n    // 0: 000\n    // 1: 100\n    // 2: 001\n    // 3: 101\n    // 4: 011\n    // 5: 111\n\n    // prettier-ignore\n    const verticesArray = [0, 1, 3, 0, 3, 2, 2, 3, 5, 2, 5, 4];\n    let pointIdx = 0;\n    let colorIdx = 0;\n    let vboIdx = 0;\n    let ucIdx = 0;\n    for (let i = 0; i < numPoints; ++i) {\n      let length = model.renderable.getLength();\n      let radius = model.renderable.getRadius();\n      if (scales) {\n        length = scales[i * 2];\n        radius = scales[i * 2 + 1];\n      }\n      for (let j = 0; j < verticesArray.length; ++j) {\n        pointIdx = i * 3;\n        packedVBO[vboIdx++] = pointArray[pointIdx++];\n        packedVBO[vboIdx++] = pointArray[pointIdx++];\n        packedVBO[vboIdx++] = pointArray[pointIdx++];\n        pointIdx = i * 3;\n        packedVBO[vboIdx++] = orientationArray[pointIdx++] * length;\n        packedVBO[vboIdx++] = orientationArray[pointIdx++] * length;\n        packedVBO[vboIdx++] = orientationArray[pointIdx++] * length;\n        packedVBO[vboIdx++] = radius;\n        packedUCVBO[ucIdx++] = 255 * (verticesArray[j] % 2);\n        packedUCVBO[ucIdx++] = verticesArray[j] >= 4 ? 255 : 0;\n        packedUCVBO[ucIdx++] = verticesArray[j] >= 2 ? 255 : 0;\n        packedUCVBO[ucIdx++] = 255;\n        colorIdx = i * colorComponents;\n        if (colorData) {\n          packedUCVBO[ucIdx++] = colorData[colorIdx];\n          packedUCVBO[ucIdx++] = colorData[colorIdx + 1];\n          packedUCVBO[ucIdx++] = colorData[colorIdx + 2];\n          packedUCVBO[ucIdx++] = colorData[colorIdx + 3];\n        }\n      }\n    }\n    vbo.setElementCount(vboIdx / pointSize);\n    vbo.upload(packedVBO, ObjectType.ARRAY_BUFFER);\n    vbo.getColorBO().upload(packedUCVBO, ObjectType.ARRAY_BUFFER);\n    model.VBOBuildTime.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkOpenGLPolyDataMapper.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkOpenGLStickMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLStickMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkStickMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkStickMapper', newInstance);\n\nexport { vtkStickMapper as default, extend, newInstance };\n","import DeepEqual from 'fast-deep-equal';\nimport Constants from './Texture/Constants.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport { n as newInstance$1, o as obj, s as set, e as setGet, g as get, i as moveToProtected, a as newTypedArray, c as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { V as isPowerOfTwo, R as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nimport supportsNorm16LinearCached from './Texture/supportsNorm16Linear.js';\n\nconst {\n  Wrap,\n  Filter\n} = Constants;\nconst {\n  VtkDataTypes\n} = vtkDataArray;\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\nconst {\n  toHalf\n} = HalfFloat;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTexture');\n  function getTexParams() {\n    return {\n      internalFormat: model.internalFormat,\n      format: model.format,\n      openGLDataType: model.openGLDataType,\n      width: model.width,\n      height: model.height\n    };\n  }\n\n  // Renders myself\n  publicAPI.render = function () {\n    let renWin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (renWin) {\n      model._openGLRenderWindow = renWin;\n    } else {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      // sync renderable properties\n      model._openGLRenderWindow = model._openGLRenderer.getLastAncestorOfType('vtkOpenGLRenderWindow');\n    }\n    model.context = model._openGLRenderWindow.getContext();\n    if (model.renderable.getInterpolate()) {\n      if (model.generateMipmap) {\n        publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n      } else {\n        publicAPI.setMinificationFilter(Filter.LINEAR);\n      }\n      publicAPI.setMagnificationFilter(Filter.LINEAR);\n    } else {\n      publicAPI.setMinificationFilter(Filter.NEAREST);\n      publicAPI.setMagnificationFilter(Filter.NEAREST);\n    }\n    if (model.renderable.getRepeat()) {\n      publicAPI.setWrapR(Wrap.REPEAT);\n      publicAPI.setWrapS(Wrap.REPEAT);\n      publicAPI.setWrapT(Wrap.REPEAT);\n    }\n    // clear image if input data is set\n    if (model.renderable.getInputData()) {\n      model.renderable.setImage(null);\n    }\n    // create the texture if it is not done already\n    if (!model.handle || model.renderable.getMTime() > model.textureBuildTime.getMTime()) {\n      // if we have an Image\n      if (model.renderable.getImage() !== null) {\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        // Have an Image which may not be complete\n        if (model.renderable.getImage() && model.renderable.getImageLoaded()) {\n          publicAPI.create2DFromImage(model.renderable.getImage());\n          publicAPI.activate();\n          publicAPI.sendParameters();\n          model.textureBuildTime.modified();\n        }\n      }\n      // if we have a canvas\n      if (model.renderable.getCanvas() !== null) {\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        const canvas = model.renderable.getCanvas();\n        publicAPI.create2DFromRaw(canvas.width, canvas.height, 4, VtkDataTypes.UNSIGNED_CHAR, canvas, true);\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      }\n      // if we have jsImageData\n      if (model.renderable.getJsImageData() !== null) {\n        const jsid = model.renderable.getJsImageData();\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        publicAPI.create2DFromRaw(jsid.width, jsid.height, 4, VtkDataTypes.UNSIGNED_CHAR, jsid.data, true);\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      }\n      // if we have InputData\n      const input = model.renderable.getInputData(0);\n      if (input && input.getPointData().getScalars()) {\n        const ext = input.getExtent();\n        const inScalars = input.getPointData().getScalars();\n\n        // do we have a cube map? Six inputs\n        const data = [];\n        for (let i = 0; i < model.renderable.getNumberOfInputPorts(); ++i) {\n          const indata = model.renderable.getInputData(i);\n          const scalars = indata ? indata.getPointData().getScalars().getData() : null;\n          if (scalars) {\n            data.push(scalars);\n          }\n        }\n        if (model.renderable.getInterpolate() && inScalars.getNumberOfComponents() === 4) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        if (data.length % 6 === 0) {\n          publicAPI.createCubeFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), data);\n        } else {\n          publicAPI.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());\n        }\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      }\n    }\n    if (model.handle) {\n      publicAPI.activate();\n    }\n  };\n  const getNorm16Ext = () => {\n    if ((model.minificationFilter === Filter.LINEAR || model.magnificationFilter === Filter.LINEAR) && !supportsNorm16LinearCached()) {\n      return undefined;\n    }\n    return model.oglNorm16Ext;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.destroyTexture = () => {\n    // deactivate it first\n    publicAPI.deactivate();\n    if (model.context && model.handle) {\n      model.context.deleteTexture(model.handle);\n    }\n    model._prevTexParams = null;\n    model.handle = 0;\n    model.numberOfDimensions = 0;\n    model.target = 0;\n    model.components = 0;\n    model.width = 0;\n    model.height = 0;\n    model.depth = 0;\n    publicAPI.resetFormatAndType();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.createTexture = () => {\n    // reuse the existing handle if we have one\n    if (!model.handle) {\n      model.handle = model.context.createTexture();\n      if (model.target) {\n        model.context.bindTexture(model.target, model.handle);\n\n        // See: http://www.openmodel.context..org/wiki/Common_Mistakes#Creating_a_complete_texture\n        // turn off mip map filter or set the base and max level correctly. here\n        // both are done.\n        model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));\n        model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));\n        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));\n        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));\n        if (model._openGLRenderWindow.getWebgl2()) {\n          model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));\n        }\n        model.context.bindTexture(model.target, null);\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------------\n  publicAPI.getTextureUnit = () => {\n    if (model._openGLRenderWindow) {\n      return model._openGLRenderWindow.getTextureUnitForTexture(publicAPI);\n    }\n    return -1;\n  };\n\n  //---------------------------------------------------------------------------\n  publicAPI.activate = () => {\n    // activate a free texture unit for this texture\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.bind();\n  };\n\n  //---------------------------------------------------------------------------\n  publicAPI.deactivate = () => {\n    if (model._openGLRenderWindow) {\n      model._openGLRenderWindow.deactivateTexture(publicAPI);\n    }\n  };\n\n  //---------------------------------------------------------------------------\n  publicAPI.releaseGraphicsResources = rwin => {\n    if (rwin && model.handle) {\n      rwin.activateTexture(publicAPI);\n      rwin.deactivateTexture(publicAPI);\n      model.context.deleteTexture(model.handle);\n      model._prevTexParams = null;\n      model.handle = 0;\n      model.numberOfDimensions = 0;\n      model.target = 0;\n      model.internalFormat = 0;\n      model.format = 0;\n      model.openGLDataType = 0;\n      model.components = 0;\n      model.width = 0;\n      model.height = 0;\n      model.depth = 0;\n      model.allocatedGPUMemoryInBytes = 0;\n    }\n    if (model.shaderProgram) {\n      model.shaderProgram.releaseGraphicsResources(rwin);\n      model.shaderProgram = null;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.bind = () => {\n    model.context.bindTexture(model.target, model.handle);\n    if (model.autoParameters && publicAPI.getMTime() > model.sendParametersTime.getMTime()) {\n      publicAPI.sendParameters();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.isBound = () => {\n    let result = false;\n    if (model.context && model.handle) {\n      let target = 0;\n      switch (model.target) {\n        case model.context.TEXTURE_2D:\n          target = model.context.TEXTURE_BINDING_2D;\n          break;\n        default:\n          vtkWarningMacro('impossible case');\n          break;\n      }\n      const oid = model.context.getIntegerv(target);\n      result = oid === model.handle;\n    }\n    return result;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.sendParameters = () => {\n    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));\n    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));\n    }\n    model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));\n    model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.context.texParameteri(model.target, model.context.TEXTURE_BASE_LEVEL, model.baseLevel);\n      model.context.texParameteri(model.target, model.context.TEXTURE_MAX_LEVEL, model.maxLevel);\n    }\n\n    // model.context.texParameterf(model.target, model.context.TEXTURE_MIN_LOD, model.minLOD);\n    // model.context.texParameterf(model.target, model.context.TEXTURE_MAX_LOD, model.maxLOD);\n\n    model.sendParametersTime.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getInternalFormat = (vtktype, numComps) => {\n    if (!model._forceInternalFormat) {\n      model.internalFormat = publicAPI.getDefaultInternalFormat(vtktype, numComps);\n    }\n    if (!model.internalFormat) {\n      vtkDebugMacro(`Unable to find suitable internal format for T=${vtktype} NC= ${numComps}`);\n    }\n    if ([model.context.R32F, model.context.RG32F, model.context.RGB32F, model.context.RGBA32F].includes(model.internalFormat) && !model.context.getExtension('OES_texture_float_linear')) {\n      vtkWarningMacro('Failed to load OES_texture_float_linear. Texture filtering is not available for *32F internal formats.');\n    }\n    return model.internalFormat;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getDefaultInternalFormat = (vtktype, numComps) => {\n    let result = 0;\n    // try default next\n    result = model._openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, getNorm16Ext(), publicAPI.useHalfFloat());\n    if (result) {\n      return result;\n    }\n    if (!result) {\n      vtkDebugMacro('Unsupported internal texture type!');\n      vtkDebugMacro(`Unable to find suitable internal format for T=${vtktype} NC= ${numComps}`);\n    }\n    return result;\n  };\n  publicAPI.useHalfFloat = () => model.enableUseHalfFloat && model.canUseHalfFloat;\n\n  //----------------------------------------------------------------------------\n  publicAPI.setInternalFormat = iFormat => {\n    model._forceInternalFormat = true;\n    if (iFormat !== model.internalFormat) {\n      model.internalFormat = iFormat;\n      publicAPI.modified();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getFormat = (vtktype, numComps) => {\n    model.format = publicAPI.getDefaultFormat(vtktype, numComps);\n    return model.format;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getDefaultFormat = (vtktype, numComps) => {\n    if (model._openGLRenderWindow.getWebgl2()) {\n      switch (numComps) {\n        case 1:\n          return model.context.RED;\n        case 2:\n          return model.context.RG;\n        case 3:\n          return model.context.RGB;\n        case 4:\n          return model.context.RGBA;\n        default:\n          return model.context.RGB;\n      }\n    } else {\n      // webgl1\n      switch (numComps) {\n        case 1:\n          return model.context.LUMINANCE;\n        case 2:\n          return model.context.LUMINANCE_ALPHA;\n        case 3:\n          return model.context.RGB;\n        case 4:\n          return model.context.RGBA;\n        default:\n          return model.context.RGB;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.resetFormatAndType = () => {\n    model._prevTexParams = null;\n    model.format = 0;\n    model.internalFormat = 0;\n    model._forceInternalFormat = false;\n    model.openGLDataType = 0;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getDefaultDataType = vtkScalarType => {\n    const useHalfFloat = publicAPI.useHalfFloat();\n    // DON'T DEAL with VTK_CHAR as this is platform dependent.\n    if (model._openGLRenderWindow.getWebgl2()) {\n      switch (vtkScalarType) {\n        // case VtkDataTypes.SIGNED_CHAR:\n        //   return model.context.BYTE;\n        case VtkDataTypes.UNSIGNED_CHAR:\n          return model.context.UNSIGNED_BYTE;\n        // prefer norm16 since that is accurate compared to\n        // half float which is not\n        case getNorm16Ext() && !useHalfFloat && VtkDataTypes.SHORT:\n          return model.context.SHORT;\n        case getNorm16Ext() && !useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          return model.context.UNSIGNED_SHORT;\n        // use half float type\n        case useHalfFloat && VtkDataTypes.SHORT:\n          return model.context.HALF_FLOAT;\n        case useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          return model.context.HALF_FLOAT;\n        // case VtkDataTypes.INT:\n        //   return model.context.INT;\n        // case VtkDataTypes.UNSIGNED_INT:\n        //   return model.context.UNSIGNED_INT;\n        case VtkDataTypes.FLOAT:\n        case VtkDataTypes.VOID: // used for depth component textures.\n        default:\n          return model.context.FLOAT;\n      }\n    }\n    switch (vtkScalarType) {\n      // case VtkDataTypes.SIGNED_CHAR:\n      //   return model.context.BYTE;\n      case VtkDataTypes.UNSIGNED_CHAR:\n        return model.context.UNSIGNED_BYTE;\n      // case VtkDataTypes.SHORT:\n      //   return model.context.SHORT;\n      // case VtkDataTypes.UNSIGNED_SHORT:\n      //   return model.context.UNSIGNED_SHORT;\n      // case VtkDataTypes.INT:\n      //   return model.context.INT;\n      // case VtkDataTypes.UNSIGNED_INT:\n      //   return model.context.UNSIGNED_INT;\n      case VtkDataTypes.FLOAT:\n      case VtkDataTypes.VOID: // used for depth component textures.\n      default:\n        if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n          return model.context.FLOAT;\n        }\n        {\n          const halfFloat = model.context.getExtension('OES_texture_half_float');\n          if (halfFloat && model.context.getExtension('OES_texture_half_float_linear')) {\n            return halfFloat.HALF_FLOAT_OES;\n          }\n        }\n        return model.context.UNSIGNED_BYTE;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getOpenGLDataType = function (vtkScalarType) {\n    let forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!model.openGLDataType || forceUpdate) {\n      model.openGLDataType = publicAPI.getDefaultDataType(vtkScalarType);\n    }\n    return model.openGLDataType;\n  };\n  publicAPI.getShiftAndScale = () => {\n    let shift = 0.0;\n    let scale = 1.0;\n\n    // for all float type internal formats\n    switch (model.openGLDataType) {\n      case model.context.BYTE:\n        scale = 127.5;\n        shift = scale - 128.0;\n        break;\n      case model.context.UNSIGNED_BYTE:\n        scale = 255.0;\n        shift = 0.0;\n        break;\n      case model.context.SHORT:\n        scale = 32767.5;\n        shift = scale - 32768.0;\n        break;\n      case model.context.UNSIGNED_SHORT:\n        scale = 65536.0;\n        shift = 0.0;\n        break;\n      case model.context.INT:\n        scale = 2147483647.5;\n        shift = scale - 2147483648.0;\n        break;\n      case model.context.UNSIGNED_INT:\n        scale = 4294967295.0;\n        shift = 0.0;\n        break;\n      case model.context.FLOAT:\n    }\n    return {\n      shift,\n      scale\n    };\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getOpenGLFilterMode = emode => {\n    switch (emode) {\n      case Filter.NEAREST:\n        return model.context.NEAREST;\n      case Filter.LINEAR:\n        return model.context.LINEAR;\n      case Filter.NEAREST_MIPMAP_NEAREST:\n        return model.context.NEAREST_MIPMAP_NEAREST;\n      case Filter.NEAREST_MIPMAP_LINEAR:\n        return model.context.NEAREST_MIPMAP_LINEAR;\n      case Filter.LINEAR_MIPMAP_NEAREST:\n        return model.context.LINEAR_MIPMAP_NEAREST;\n      case Filter.LINEAR_MIPMAP_LINEAR:\n        return model.context.LINEAR_MIPMAP_LINEAR;\n      default:\n        return model.context.NEAREST;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getOpenGLWrapMode = vtktype => {\n    switch (vtktype) {\n      case Wrap.CLAMP_TO_EDGE:\n        return model.context.CLAMP_TO_EDGE;\n      case Wrap.REPEAT:\n        return model.context.REPEAT;\n      case Wrap.MIRRORED_REPEAT:\n        return model.context.MIRRORED_REPEAT;\n      default:\n        return model.context.CLAMP_TO_EDGE;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n\n  /**\n   * Gets the extent's size.\n   * @param {Extent} extent\n   */\n  function getExtentSize(extent) {\n    const [xmin, xmax, ymin, ymax, zmin, zmax] = extent;\n    return [xmax - xmin + 1, ymax - ymin + 1, zmax - zmin + 1];\n  }\n\n  //----------------------------------------------------------------------------\n\n  /**\n   * Gets the number of pixels in the extent.\n   * @param {Extent} extent\n   */\n  function getExtentPixelCount(extent) {\n    const [sx, sy, sz] = getExtentSize(extent);\n    return sx * sy * sz;\n  }\n\n  //----------------------------------------------------------------------------\n\n  /**\n   * Reads a flattened extent from the image data and writes to the given output array.\n   *\n   * Assumes X varies the fastest and Z varies the slowest.\n   *\n   * @param {*} data\n   * @param {*} dataDims\n   * @param {Extent} extent\n   * @param {TypedArray} outArray\n   * @param {number} outOffset\n   * @returns\n   */\n  function readExtentIntoArray(data, dataDims, extent, outArray, outOffset) {\n    const [xmin, xmax, ymin, ymax, zmin, zmax] = extent;\n    const [dx, dy] = dataDims;\n    const sxy = dx * dy;\n    let writeOffset = outOffset;\n    for (let zi = zmin; zi <= zmax; zi++) {\n      const zOffset = zi * sxy;\n      for (let yi = ymin; yi <= ymax; yi++) {\n        const zyOffset = zOffset + yi * dx;\n        // explicit alternative to data.subarray,\n        // due to potential perf issues on v8\n        for (let readOffset = zyOffset + xmin, end = zyOffset + xmax; readOffset <= end; readOffset++, writeOffset++) {\n          outArray[writeOffset] = data[readOffset];\n        }\n      }\n    }\n  }\n\n  //----------------------------------------------------------------------------\n\n  /**\n   * Reads several image extents into a contiguous pixel array.\n   *\n   * @param {*} data\n   * @param {Extent[]} extent\n   * @param {TypedArrayConstructor} typedArrayConstructor optional typed array constructor\n   * @returns\n   */\n  function readExtents(data, extents) {\n    let typedArrayConstructor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const constructor = typedArrayConstructor || data.constructor;\n    const numPixels = extents.reduce((count, extent) => count + getExtentPixelCount(extent), 0);\n    const extentPixels = new constructor(numPixels);\n    const dataDims = [model.width, model.height, model.depth];\n    let writeOffset = 0;\n    extents.forEach(extent => {\n      readExtentIntoArray(data, dataDims, extent, extentPixels, writeOffset);\n      writeOffset += getExtentPixelCount(extent);\n    });\n    return extentPixels;\n  }\n\n  //----------------------------------------------------------------------------\n\n  /**\n   * Updates the data array to match the required data type for OpenGL.\n   *\n   * This function takes the input data and converts it to the appropriate\n   * format required by the OpenGL texture, based on the specified data type.\n   *\n   * @param {string} dataType - The original data type of the input data.\n   * @param {Array} data - The input data array that needs to be updated.\n   * @param {boolean} [depth=false] - Indicates whether the data is a 3D array.\n   * @param {Array<Extent>} imageExtents only consider these image extents (default: [])\n   * @returns {Array} The updated data array that matches the OpenGL data type.\n   */\n  publicAPI.updateArrayDataTypeForGL = function (dataType, data) {\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let imageExtents = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    const pixData = [];\n    let pixCount = model.width * model.height * model.components;\n    if (depth) {\n      pixCount *= model.depth;\n    }\n    const onlyUpdateExtents = !!imageExtents.length;\n\n    // if the opengl data type is float\n    // then the data array must be float\n    if (dataType !== VtkDataTypes.FLOAT && model.openGLDataType === model.context.FLOAT) {\n      for (let idx = 0; idx < data.length; idx++) {\n        if (data[idx]) {\n          if (onlyUpdateExtents) {\n            pixData.push(readExtents(data[idx], imageExtents, Float32Array));\n          } else {\n            const dataArrayToCopy = data[idx].length > pixCount ? data[idx].subarray(0, pixCount) : data[idx];\n            pixData.push(new Float32Array(dataArrayToCopy));\n          }\n        } else {\n          pixData.push(null);\n        }\n      }\n    }\n\n    // if the opengl data type is ubyte\n    // then the data array must be u8, we currently simply truncate the data\n    if (dataType !== VtkDataTypes.UNSIGNED_CHAR && model.openGLDataType === model.context.UNSIGNED_BYTE) {\n      for (let idx = 0; idx < data.length; idx++) {\n        if (data[idx]) {\n          if (onlyUpdateExtents) {\n            pixData.push(readExtents(data[idx], imageExtents, Uint8Array));\n          } else {\n            const dataArrayToCopy = data[idx].length > pixCount ? data[idx].subarray(0, pixCount) : data[idx];\n            pixData.push(new Uint8Array(dataArrayToCopy));\n          }\n        } else {\n          pixData.push(null);\n        }\n      }\n    }\n\n    // if the opengl data type is half float\n    // then the data array must be u16\n    let halfFloat = false;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      halfFloat = model.openGLDataType === model.context.HALF_FLOAT;\n    } else {\n      const halfFloatExt = model.context.getExtension('OES_texture_half_float');\n      halfFloat = halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;\n    }\n    if (halfFloat) {\n      for (let idx = 0; idx < data.length; idx++) {\n        if (data[idx]) {\n          const src = onlyUpdateExtents ? readExtents(data[idx], imageExtents) : data[idx];\n          const newArray = new Uint16Array(onlyUpdateExtents ? src.length : pixCount);\n          const newArrayLen = newArray.length;\n          for (let i = 0; i < newArrayLen; i++) {\n            newArray[i] = toHalf(src[i]);\n          }\n          pixData.push(newArray);\n        } else {\n          pixData.push(null);\n        }\n      }\n    }\n\n    // The output has to be filled\n    if (pixData.length === 0) {\n      for (let i = 0; i < data.length; i++) {\n        pixData.push(onlyUpdateExtents && data[i] ? readExtents(data[i], imageExtents) : data[i]);\n      }\n    }\n    return pixData;\n  };\n\n  //----------------------------------------------------------------------------\n  function scaleTextureToHighestPowerOfTwo(data) {\n    if (model._openGLRenderWindow.getWebgl2()) {\n      // No need if webGL2\n      return data;\n    }\n    const pixData = [];\n    const width = model.width;\n    const height = model.height;\n    const numComps = model.components;\n    if (data && (!isPowerOfTwo(width) || !isPowerOfTwo(height))) {\n      // Scale up the texture to the next highest power of two dimensions.\n      const halfFloat = model.context.getExtension('OES_texture_half_float');\n      const newWidth = nearestPowerOfTwo(width);\n      const newHeight = nearestPowerOfTwo(height);\n      const pixCount = newWidth * newHeight * model.components;\n      for (let idx = 0; idx < data.length; idx++) {\n        if (data[idx] !== null) {\n          let newArray = null;\n          const jFactor = height / newHeight;\n          const iFactor = width / newWidth;\n          let usingHalf = false;\n          if (model.openGLDataType === model.context.FLOAT) {\n            newArray = new Float32Array(pixCount);\n          } else if (halfFloat && model.openGLDataType === halfFloat.HALF_FLOAT_OES) {\n            newArray = new Uint16Array(pixCount);\n            usingHalf = true;\n          } else {\n            newArray = new Uint8Array(pixCount);\n          }\n          for (let j = 0; j < newHeight; j++) {\n            const joff = j * newWidth * numComps;\n            const jidx = j * jFactor;\n            let jlow = Math.floor(jidx);\n            let jhi = Math.ceil(jidx);\n            if (jhi >= height) {\n              jhi = height - 1;\n            }\n            const jmix = jidx - jlow;\n            const jmix1 = 1.0 - jmix;\n            jlow = jlow * width * numComps;\n            jhi = jhi * width * numComps;\n            for (let i = 0; i < newWidth; i++) {\n              const ioff = i * numComps;\n              const iidx = i * iFactor;\n              let ilow = Math.floor(iidx);\n              let ihi = Math.ceil(iidx);\n              if (ihi >= width) {\n                ihi = width - 1;\n              }\n              const imix = iidx - ilow;\n              ilow *= numComps;\n              ihi *= numComps;\n              for (let c = 0; c < numComps; c++) {\n                if (usingHalf) {\n                  newArray[joff + ioff + c] = HalfFloat.toHalf(HalfFloat.fromHalf(data[idx][jlow + ilow + c]) * jmix1 * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jlow + ihi + c]) * jmix1 * imix + HalfFloat.fromHalf(data[idx][jhi + ilow + c]) * jmix * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jhi + ihi + c]) * jmix * imix);\n                } else {\n                  newArray[joff + ioff + c] = data[idx][jlow + ilow + c] * jmix1 * (1.0 - imix) + data[idx][jlow + ihi + c] * jmix1 * imix + data[idx][jhi + ilow + c] * jmix * (1.0 - imix) + data[idx][jhi + ihi + c] * jmix * imix;\n                }\n              }\n            }\n          }\n          pixData.push(newArray);\n          model.width = newWidth;\n          model.height = newHeight;\n        } else {\n          pixData.push(null);\n        }\n      }\n    }\n\n    // The output has to be filled\n    if (pixData.length === 0) {\n      for (let i = 0; i < data.length; i++) {\n        pixData.push(data[i]);\n      }\n    }\n    return pixData;\n  }\n\n  //----------------------------------------------------------------------------\n  function useTexStorage(dataType) {\n    if (model._openGLRenderWindow) {\n      if (model.resizable || model.renderable?.getResizable()) {\n        // Cannot use texStorage if the texture is supposed to be resizable.\n        return false;\n      }\n      if (model._openGLRenderWindow.getWebgl2()) {\n        const webGLInfo = model._openGLRenderWindow.getGLInformations();\n        if (webGLInfo.RENDERER.value.match(/WebKit/gi) && navigator.platform.match(/Mac/gi) && getNorm16Ext() && (dataType === VtkDataTypes.UNSIGNED_SHORT || dataType === VtkDataTypes.SHORT)) {\n          // Cannot use texStorage with EXT_texture_norm16 textures on Mac M1 GPU.\n          // No errors reported but the texture is unusable.\n          return false;\n        }\n        // Use texStorage for WebGL2\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  //----------------------------------------------------------------------------\n  publicAPI.create2DFromRaw = function (width, height, numComps, dataType, data) {\n    let flip = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType, true);\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_2D;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind();\n\n    // Create an array of texture with one texture\n    const dataArray = [data];\n    const pixData = publicAPI.updateArrayDataTypeForGL(dataType, dataArray);\n    const scaledData = scaleTextureToHighestPowerOfTwo(pixData);\n\n    // Source texture data from the PBO.\n    model.context.pixelStorei(model.context.UNPACK_FLIP_Y_WEBGL, flip);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (scaledData[0] != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, scaledData[0]);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, scaledData[0]);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n\n    // always reset the flip\n    if (flip) {\n      model.context.pixelStorei(model.context.UNPACK_FLIP_Y_WEBGL, false);\n    }\n    model.allocatedGPUMemoryInBytes = model.width * model.height * model.depth * numComps * model._openGLRenderWindow.getDefaultTextureByteSize(dataType, getNorm16Ext(), publicAPI.useHalfFloat());\n    publicAPI.deactivate();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.createCubeFromRaw = (width, height, numComps, dataType, data) => {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType);\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_CUBE_MAP;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    model.maxLevel = data.length / 6 - 1;\n    publicAPI.createTexture();\n    publicAPI.bind();\n    const pixData = publicAPI.updateArrayDataTypeForGL(dataType, data);\n    const scaledData = scaleTextureToHighestPowerOfTwo(pixData);\n\n    // invert the data because opengl is messed up with cube maps\n    // and uses the old renderman standard with Y going down\n    // even though it is completely at odds with OpenGL standards\n    const invertedData = [];\n    let widthLevel = model.width;\n    let heightLevel = model.height;\n    for (let i = 0; i < scaledData.length; i++) {\n      if (i % 6 === 0 && i !== 0) {\n        widthLevel /= 2;\n        heightLevel /= 2;\n      }\n      invertedData[i] = newTypedArray(dataType, heightLevel * widthLevel * model.components);\n      for (let y = 0; y < heightLevel; ++y) {\n        const row1 = y * widthLevel * model.components;\n        const row2 = (heightLevel - y - 1) * widthLevel * model.components;\n        invertedData[i].set(scaledData[i].slice(row2, row2 + widthLevel * model.components), row1);\n      }\n    }\n\n    // Source texture data from the PBO.\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 6, model.internalFormat, model.width, model.height);\n    }\n    // We get the 6 images\n    for (let i = 0; i < 6; i++) {\n      // For each mipmap level\n      let j = 0;\n      let w = model.width;\n      let h = model.height;\n      while (w >= 1 && h >= 1) {\n        // In webgl 1, all levels need to be defined. So if the latest level size is\n        // 8x8, we have to add 3 more null textures (4x4, 2x2, 1x1)\n        // In webgl 2, the attribute maxLevel will be use.\n        let tempData = null;\n        if (j <= model.maxLevel) {\n          tempData = invertedData[6 * j + i];\n        }\n        if (useTexStorage(dataType)) {\n          if (tempData != null) {\n            model.context.texSubImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, w, h, model.format, model.openGLDataType, tempData);\n          }\n        } else {\n          model.context.texImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, model.internalFormat, w, h, 0, model.format, model.openGLDataType, tempData);\n        }\n        j++;\n        w /= 2;\n        h /= 2;\n      }\n    }\n    model.allocatedGPUMemoryInBytes = model.width * model.height * model.depth * numComps * model._openGLRenderWindow.getDefaultTextureByteSize(dataType, getNorm16Ext(), publicAPI.useHalfFloat());\n    // generateMipmap must not be called here because we manually upload all levels\n    // if it is called, all levels will be overwritten\n\n    publicAPI.deactivate();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.createDepthFromRaw = (width, height, dataType, data) => {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType);\n    model.format = model.context.DEPTH_COMPONENT;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      if (dataType === VtkDataTypes.FLOAT) {\n        model.internalFormat = model.context.DEPTH_COMPONENT32F;\n      } else {\n        model.internalFormat = model.context.DEPTH_COMPONENT16;\n      }\n    } else {\n      model.internalFormat = model.context.DEPTH_COMPONENT;\n    }\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_2D;\n    model.components = 1;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind();\n\n    // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (data != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, data);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, data);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    model.allocatedGPUMemoryInBytes = model.width * model.height * model.depth * model.components * model._openGLRenderWindow.getDefaultTextureByteSize(dataType, getNorm16Ext(), publicAPI.useHalfFloat());\n    publicAPI.deactivate();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.create2DFromImage = image => {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(VtkDataTypes.UNSIGNED_CHAR);\n    publicAPI.getInternalFormat(VtkDataTypes.UNSIGNED_CHAR, 4);\n    publicAPI.getFormat(VtkDataTypes.UNSIGNED_CHAR, 4);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_2D;\n    model.components = 4;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind();\n\n    // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n\n    // Scale up the texture to the next highest power of two dimensions (if needed) and flip y.\n    const needNearestPowerOfTwo = !model._openGLRenderWindow.getWebgl2() && (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height));\n    const canvas = document.createElement('canvas');\n    canvas.width = needNearestPowerOfTwo ? nearestPowerOfTwo(image.width) : image.width;\n    canvas.height = needNearestPowerOfTwo ? nearestPowerOfTwo(image.height) : image.height;\n    model.width = canvas.width;\n    model.height = canvas.height;\n    const ctx = canvas.getContext('2d');\n    ctx.translate(0, canvas.height);\n    ctx.scale(1, -1);\n    ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n    const safeImage = canvas;\n    if (useTexStorage(VtkDataTypes.UNSIGNED_CHAR)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (safeImage != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, safeImage);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, safeImage);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    model.allocatedGPUMemoryInBytes = model.width * model.height * model.depth * model.components * model._openGLRenderWindow.getDefaultTextureByteSize(VtkDataTypes.UNSIGNED_CHAR, getNorm16Ext(), publicAPI.useHalfFloat());\n    publicAPI.deactivate();\n    return true;\n  };\n\n  // Compute scale and offset per component from min and max per component\n  function computeScaleOffsets(min, max, numComps) {\n    const offset = new Array(numComps);\n    const scale = new Array(numComps);\n    for (let c = 0; c < numComps; ++c) {\n      offset[c] = min[c];\n      scale[c] = max[c] - min[c] || 1.0;\n    }\n    return {\n      scale,\n      offset\n    };\n  }\n\n  // HalfFloat only represents numbers between [-2048, 2048] exactly accurate,\n  // for numbers outside of this range there is a precision limitation\n  function hasExactHalfFloat(offset, scale) {\n    // Per Component\n    for (let c = 0; c < offset.length; c++) {\n      const min = offset[c];\n      const max = scale[c] + min;\n      if (min < -2048 || min > 2048 || max < -2048 || max > 2048) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function setCanUseHalfFloat(dataType, offset, scale, preferSizeOverAccuracy) {\n    publicAPI.getOpenGLDataType(dataType);\n\n    // Don't consider halfFloat and convert back to Float when the range of data does not generate an accurate halfFloat\n    // AND it is not preferable to have a smaller texture than an exact texture.\n    const isExactHalfFloat = hasExactHalfFloat(offset, scale) || preferSizeOverAccuracy;\n    let useHalfFloat = false;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      // If OES_texture_float_linear is not available, and using a half float would still be exact, force half floats\n      // This is because half floats are always texture filterable in webgl2, while full *32F floats are not (unless the extension is present)\n      const forceHalfFloat = model.openGLDataType === model.context.FLOAT && model.context.getExtension('OES_texture_float_linear') === null && isExactHalfFloat;\n      useHalfFloat = forceHalfFloat || model.openGLDataType === model.context.HALF_FLOAT;\n    } else {\n      const halfFloatExt = model.context.getExtension('OES_texture_half_float');\n      useHalfFloat = halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;\n    }\n    model.canUseHalfFloat = useHalfFloat && isExactHalfFloat;\n  }\n  function processDataArray(dataArray, preferSizeOverAccuracy) {\n    const numComps = dataArray.getNumberOfComponents();\n    const dataType = dataArray.getDataType();\n    const data = dataArray.getData();\n\n    // Compute min max from array\n    // Using the vtkDataArray.getRange() enables caching\n    const minArray = new Array(numComps);\n    const maxArray = new Array(numComps);\n    for (let c = 0; c < numComps; ++c) {\n      const [min, max] = dataArray.getRange(c);\n      minArray[c] = min;\n      maxArray[c] = max;\n    }\n    const scaleOffsets = computeScaleOffsets(minArray, maxArray, numComps);\n\n    // preferSizeOverAccuracy will override norm16 due to bug with norm16 implementation\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1408247\n    setCanUseHalfFloat(dataType, scaleOffsets.offset, scaleOffsets.scale, preferSizeOverAccuracy);\n\n    // since our default is to use half float, in case that we can't use it\n    // we need to use another type\n    if (!publicAPI.useHalfFloat()) {\n      publicAPI.getOpenGLDataType(dataType, true);\n    }\n    return {\n      numComps,\n      dataType,\n      data,\n      scaleOffsets\n    };\n  }\n  publicAPI.create2DFilterableFromRaw = function (width, height, numberOfComponents, dataType, values) {\n    let preferSizeOverAccuracy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    let ranges = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;\n    return publicAPI.create2DFilterableFromDataArray(width, height, vtkDataArray.newInstance({\n      numberOfComponents,\n      dataType,\n      values,\n      ranges\n    }), preferSizeOverAccuracy);\n  };\n  publicAPI.create2DFilterableFromDataArray = function (width, height, dataArray) {\n    let preferSizeOverAccuracy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const {\n      numComps,\n      dataType,\n      data\n    } = processDataArray(dataArray, preferSizeOverAccuracy);\n    publicAPI.create2DFromRaw(width, height, numComps, dataType, data);\n  };\n  publicAPI.updateVolumeInfoForGL = (dataType, numComps) => {\n    let isScalingApplied = false;\n    const useHalfFloat = publicAPI.useHalfFloat();\n\n    // Initialize volume info if it doesn't exist\n    if (!model.volumeInfo?.scale || !model.volumeInfo?.offset) {\n      model.volumeInfo = {\n        scale: new Array(numComps),\n        offset: new Array(numComps)\n      };\n    }\n\n    // Default scaling and offset\n    for (let c = 0; c < numComps; ++c) {\n      model.volumeInfo.scale[c] = 1.0;\n      model.volumeInfo.offset[c] = 0.0;\n    }\n\n    // Handle SHORT data type with EXT_texture_norm16 extension\n    if (getNorm16Ext() && !useHalfFloat && dataType === VtkDataTypes.SHORT) {\n      for (let c = 0; c < numComps; ++c) {\n        model.volumeInfo.scale[c] = 32767.0; // Scale to [-1, 1] range\n      }\n\n      isScalingApplied = true;\n    }\n\n    // Handle UNSIGNED_SHORT data type with EXT_texture_norm16 extension\n    if (getNorm16Ext() && !useHalfFloat && dataType === VtkDataTypes.UNSIGNED_SHORT) {\n      for (let c = 0; c < numComps; ++c) {\n        model.volumeInfo.scale[c] = 65535.0; // Scale to [0, 1] range\n      }\n\n      isScalingApplied = true;\n    }\n\n    // Handle UNSIGNED_CHAR data type\n    if (dataType === VtkDataTypes.UNSIGNED_CHAR) {\n      for (let c = 0; c < numComps; ++c) {\n        model.volumeInfo.scale[c] = 255.0; // Scale to [0, 1] range\n      }\n\n      isScalingApplied = true;\n    }\n\n    // No scaling needed for FLOAT or HalfFloat (SHORT/UNSIGNED_SHORT)\n    if (dataType === VtkDataTypes.FLOAT || useHalfFloat && (dataType === VtkDataTypes.SHORT || dataType === VtkDataTypes.UNSIGNED_SHORT)) {\n      isScalingApplied = true;\n    }\n    return isScalingApplied;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.create3DFromRaw = function (width, height, depth, numComps, dataType, data) {\n    let updatedExtents = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n    let dataTypeToUse = dataType;\n    let dataToUse = data;\n    if (!publicAPI.updateVolumeInfoForGL(dataTypeToUse, numComps) && dataToUse) {\n      const numPixelsIn = width * height * depth;\n      const scaleOffsetsCopy = structuredClone(model.volumeInfo);\n      // otherwise convert to float\n      const newArray = new Float32Array(numPixelsIn * numComps);\n      // use computed scale and offset\n      model.volumeInfo.offset = scaleOffsetsCopy.offset;\n      model.volumeInfo.scale = scaleOffsetsCopy.scale;\n      let count = 0;\n      const scaleInverse = scaleOffsetsCopy.scale.map(s => 1 / s);\n      for (let i = 0; i < numPixelsIn; i++) {\n        for (let nc = 0; nc < numComps; nc++) {\n          newArray[count] = (dataToUse[count] - scaleOffsetsCopy.offset[nc]) * scaleInverse[nc];\n          count++;\n        }\n      }\n      dataTypeToUse = VtkDataTypes.FLOAT;\n      dataToUse = newArray;\n    }\n\n    // Permit OpenGLDataType to be half float, if applicable, for 3D\n    publicAPI.getOpenGLDataType(dataTypeToUse);\n\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getInternalFormat(dataTypeToUse, numComps);\n    publicAPI.getFormat(dataTypeToUse, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_3D;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = depth;\n    model.numberOfDimensions = 3;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind();\n    const hasUpdatedExtents = updatedExtents.length > 0;\n\n    // It's possible for the texture parameters to change while\n    // streaming, so check for such a change.\n    const rebuildEntireTexture = !hasUpdatedExtents || !DeepEqual(model._prevTexParams, getTexParams());\n\n    // Create an array of texture with one texture\n    const dataArray = [dataToUse];\n    const is3DArray = true;\n    const pixData = publicAPI.updateArrayDataTypeForGL(dataTypeToUse, dataArray, is3DArray, rebuildEntireTexture ? [] : updatedExtents);\n    const scaledData = scaleTextureToHighestPowerOfTwo(pixData);\n\n    // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (rebuildEntireTexture) {\n      if (useTexStorage(dataTypeToUse)) {\n        model.context.texStorage3D(model.target, 1, model.internalFormat, model.width, model.height, model.depth);\n        if (scaledData[0] != null) {\n          model.context.texSubImage3D(model.target, 0, 0, 0, 0, model.width, model.height, model.depth, model.format, model.openGLDataType, scaledData[0]);\n        }\n      } else {\n        model.context.texImage3D(model.target, 0, model.internalFormat, model.width, model.height, model.depth, 0, model.format, model.openGLDataType, scaledData[0]);\n      }\n      model._prevTexParams = getTexParams();\n    } else if (hasUpdatedExtents) {\n      const extentPixels = scaledData[0];\n      let readOffset = 0;\n      for (let i = 0; i < updatedExtents.length; i++) {\n        const extent = updatedExtents[i];\n        const extentSize = getExtentSize(extent);\n        const extentPixelCount = getExtentPixelCount(extent);\n        const textureData = new extentPixels.constructor(extentPixels.buffer, readOffset, extentPixelCount);\n        readOffset += textureData.byteLength;\n        model.context.texSubImage3D(model.target, 0, extent[0], extent[2], extent[4], extentSize[0], extentSize[1], extentSize[2], model.format, model.openGLDataType, textureData);\n      }\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    model.allocatedGPUMemoryInBytes = model.width * model.height * model.depth * model.components * model._openGLRenderWindow.getDefaultTextureByteSize(dataTypeToUse, getNorm16Ext(), publicAPI.useHalfFloat());\n    publicAPI.deactivate();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  // This method simulates a 3D texture using 2D\n  // Prefer create3DFilterableFromDataArray to enable caching of min and max values\n  publicAPI.create3DFilterableFromRaw = function (width, height, depth, numberOfComponents, dataType, values) {\n    let preferSizeOverAccuracy = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let ranges = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : undefined;\n    let updatedExtents = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];\n    return publicAPI.create3DFilterableFromDataArray(width, height, depth, vtkDataArray.newInstance({\n      numberOfComponents,\n      dataType,\n      values,\n      ranges\n    }), preferSizeOverAccuracy, updatedExtents);\n  };\n\n  //----------------------------------------------------------------------------\n  // This method create a 3D texture from dimensions and a DataArray\n  publicAPI.create3DFilterableFromDataArray = function (width, height, depth, dataArray) {\n    let preferSizeOverAccuracy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let updatedExtents = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    const {\n      numComps,\n      dataType,\n      data,\n      scaleOffsets\n    } = processDataArray(dataArray, preferSizeOverAccuracy);\n    const offset = [];\n    const scale = [];\n    for (let c = 0; c < numComps; ++c) {\n      offset[c] = 0.0;\n      scale[c] = 1.0;\n    }\n\n    // store the information, we will need it later\n    // offset and scale are the offset and scale required to get\n    // the texture value back to data values ala\n    // data = texture * scale + offset\n    // and texture = (data - offset)/scale\n    model.volumeInfo = {\n      scale,\n      offset,\n      dataComputedScale: scaleOffsets.scale,\n      dataComputedOffset: scaleOffsets.offset,\n      width,\n      height,\n      depth\n    };\n\n    // Create a copy of scale and offset to avoid aliasing issues\n    // Original is read only, copy is read/write\n    // Use the copy as volumeInfo.scale and volumeInfo.offset\n\n    // WebGL2 path, we have 3d textures etc\n    if (model._openGLRenderWindow.getWebgl2()) {\n      return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data, updatedExtents);\n    }\n    const numPixelsIn = width * height * depth;\n    const scaleOffsetsCopy = structuredClone(scaleOffsets);\n\n    // not webgl2, deal with webgl1, no 3d textures\n    // and maybe no float textures\n\n    let volCopyData = (outArray, outIdx, inValue, smin, smax) => {\n      outArray[outIdx] = inValue;\n    };\n    let dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR;\n    // unsigned char gets used as is\n    if (dataType === VtkDataTypes.UNSIGNED_CHAR) {\n      for (let c = 0; c < numComps; ++c) {\n        scaleOffsetsCopy.offset[c] = 0.0;\n        scaleOffsetsCopy.scale[c] = 255.0;\n      }\n    } else if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n      // use float textures scaled to 0.0 to 1.0\n      dataTypeToUse = VtkDataTypes.FLOAT;\n      volCopyData = (outArray, outIdx, inValue, soffset, sscale) => {\n        outArray[outIdx] = (inValue - soffset) / sscale;\n      };\n    } else {\n      // worst case, scale data to uchar\n      dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR;\n      volCopyData = (outArray, outIdx, inValue, soffset, sscale) => {\n        outArray[outIdx] = 255.0 * (inValue - soffset) / sscale;\n      };\n    }\n\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataTypeToUse);\n    publicAPI.getInternalFormat(dataTypeToUse, numComps);\n    publicAPI.getFormat(dataTypeToUse, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n\n    // have to pack this 3D texture into pot 2D texture\n    model.target = model.context.TEXTURE_2D;\n    model.components = numComps;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n\n    // MAX_TEXTURE_SIZE gives the max dimensions that can be supported by the GPU,\n    // but it doesn't mean it will fit in memory. If we have to use a float data type\n    // or 4 components, there are good chances that the texture size will blow up\n    // and could not fit in the GPU memory. Use a smaller texture size in that case,\n    // which will force a downsampling of the dataset.\n    // That problem does not occur when using webGL2 since we can pack the data in\n    // denser textures based on our data type.\n    // TODO: try to fit in the biggest supported texture, catch the gl error if it\n    // does not fix (OUT_OF_MEMORY), then attempt with smaller texture\n    let maxTexDim = model.context.getParameter(model.context.MAX_TEXTURE_SIZE);\n    if (maxTexDim > 4096 && (dataTypeToUse === VtkDataTypes.FLOAT || numComps >= 3)) {\n      maxTexDim = 4096;\n    }\n\n    // compute estimate for XY subsample\n    let xstride = 1;\n    let ystride = 1;\n    if (numPixelsIn > maxTexDim * maxTexDim) {\n      xstride = Math.ceil(Math.sqrt(numPixelsIn / (maxTexDim * maxTexDim)));\n      ystride = xstride;\n    }\n    let targetWidth = Math.sqrt(numPixelsIn) / xstride;\n    targetWidth = nearestPowerOfTwo(targetWidth);\n    // determine X reps\n    const xreps = Math.floor(targetWidth * xstride / width);\n    const yreps = Math.ceil(depth / xreps);\n    const targetHeight = nearestPowerOfTwo(height * yreps / ystride);\n    model.width = targetWidth;\n    model.height = targetHeight;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind();\n\n    // store the information, we will need it later\n    model.volumeInfo.xreps = xreps;\n    model.volumeInfo.yreps = yreps;\n    model.volumeInfo.xstride = xstride;\n    model.volumeInfo.ystride = ystride;\n    model.volumeInfo.offset = scaleOffsetsCopy.offset;\n    model.volumeInfo.scale = scaleOffsetsCopy.scale;\n\n    // OK stuff the data into the 2d TEXTURE\n\n    // first allocate the new texture\n    let newArray;\n    const pixCount = targetWidth * targetHeight * numComps;\n    if (dataTypeToUse === VtkDataTypes.FLOAT) {\n      newArray = new Float32Array(pixCount);\n    } else {\n      newArray = new Uint8Array(pixCount);\n    }\n\n    // then stuff the data into it, nothing fancy right now\n    // for stride\n    let outIdx = 0;\n    const tileWidth = Math.floor(width / xstride);\n    const tileHeight = Math.floor(height / ystride);\n    for (let yRep = 0; yRep < yreps; yRep++) {\n      const xrepsThisRow = Math.min(xreps, depth - yRep * xreps);\n      const outXContIncr = numComps * (model.width - xrepsThisRow * Math.floor(width / xstride));\n      for (let tileY = 0; tileY < tileHeight; tileY++) {\n        for (let xRep = 0; xRep < xrepsThisRow; xRep++) {\n          const inOffset = numComps * ((yRep * xreps + xRep) * width * height + ystride * tileY * width);\n          for (let tileX = 0; tileX < tileWidth; tileX++) {\n            // copy value\n            for (let nc = 0; nc < numComps; nc++) {\n              volCopyData(newArray, outIdx, data[inOffset + xstride * tileX * numComps + nc], scaleOffsetsCopy.offset[nc], scaleOffsetsCopy.scale[nc]);\n              outIdx++;\n            }\n          }\n        }\n        outIdx += outXContIncr;\n      }\n    }\n\n    // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataTypeToUse)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (newArray != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, newArray);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, newArray);\n    }\n    publicAPI.deactivate();\n    return true;\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getMaximumTextureSize = ctx => {\n    if (ctx && ctx.isCurrent()) {\n      return ctx.getIntegerv(ctx.MAX_TEXTURE_SIZE);\n    }\n    return -1;\n  };\n\n  // set use half float\n  publicAPI.enableUseHalfFloat = use => {\n    model.enableUseHalfFloat = use;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  _openGLRenderWindow: null,\n  _forceInternalFormat: false,\n  _prevTexParams: null,\n  context: null,\n  handle: 0,\n  sendParametersTime: null,\n  textureBuildTime: null,\n  numberOfDimensions: 0,\n  target: 0,\n  format: 0,\n  openGLDataType: 0,\n  components: 0,\n  width: 0,\n  height: 0,\n  depth: 0,\n  autoParameters: true,\n  wrapS: Wrap.CLAMP_TO_EDGE,\n  wrapT: Wrap.CLAMP_TO_EDGE,\n  wrapR: Wrap.CLAMP_TO_EDGE,\n  minificationFilter: Filter.NEAREST,\n  magnificationFilter: Filter.NEAREST,\n  minLOD: -1000.0,\n  maxLOD: 1000.0,\n  baseLevel: 0,\n  maxLevel: 1000,\n  generateMipmap: false,\n  oglNorm16Ext: null,\n  allocatedGPUMemoryInBytes: 0,\n  // by default it is enabled\n  enableUseHalfFloat: true,\n  // but by default we don't know if we can use half float base on the data range\n  canUseHalfFloat: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.sendParametersTime = {};\n  obj(model.sendParametersTime, {\n    mtime: 0\n  });\n  model.textureBuildTime = {};\n  obj(model.textureBuildTime, {\n    mtime: 0\n  });\n\n  // Build VTK API\n  set(publicAPI, model, ['format', 'openGLDataType']);\n  setGet(publicAPI, model, ['keyMatrixTime', 'minificationFilter', 'magnificationFilter', 'wrapS', 'wrapT', 'wrapR', 'generateMipmap', 'oglNorm16Ext']);\n  get(publicAPI, model, ['width', 'height', 'volumeInfo', 'components', 'handle', 'target', 'allocatedGPUMemoryInBytes']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  // Object methods\n  vtkOpenGLTexture(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLTexture');\n\n// ----------------------------------------------------------------------------\n\nvar vtkOpenGLTexture$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkTexture', newInstance);\n\nexport { vtkOpenGLTexture$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLTextureUnitManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTextureUnitManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTextureUnitManager');\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Delete the allocation table and check if it is not called before\n  // all the texture units have been released.\n  publicAPI.deleteTable = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n      if (model.textureUnits[i] === true) {\n        vtkErrorMacro('some texture units  were not properly released');\n      }\n    }\n    model.textureUnits = [];\n    model.numberOfTextureUnits = 0;\n  };\n\n  // ----------------------------------------------------------------------------\n  publicAPI.setContext = ctx => {\n    if (model.context !== ctx) {\n      if (model.context !== 0) {\n        publicAPI.deleteTable();\n      }\n      model.context = ctx;\n      if (model.context) {\n        model.numberOfTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\n        for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n          model.textureUnits[i] = false;\n        }\n      }\n      publicAPI.modified();\n    }\n  };\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Reserve a texture unit. It returns its number.\n  // It returns -1 if the allocation failed (because there are no more\n  // texture units left).\n  // \\post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())\n  // \\post allocated: result==-1 || this->IsAllocated(result)\n  publicAPI.allocate = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; i++) {\n      if (!publicAPI.isAllocated(i)) {\n        model.textureUnits[i] = true;\n        return i;\n      }\n    }\n    return -1;\n  };\n  publicAPI.allocateUnit = unit => {\n    if (publicAPI.isAllocated(unit)) {\n      return -1;\n    }\n    model.textureUnits[unit] = true;\n    return unit;\n  };\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Tell if texture unit `textureUnitId' is already allocated.\n  // \\pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  publicAPI.isAllocated = textureUnitId => model.textureUnits[textureUnitId];\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Release a texture unit.\n  // \\pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  // \\pre allocated_id: this->IsAllocated(textureUnitId)\n  publicAPI.free = val => {\n    model.textureUnits[val] = false;\n  };\n  publicAPI.freeAll = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n      model.textureUnits[i] = false;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  numberOfTextureUnits: 0,\n  textureUnits: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  model.textureUnits = [];\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['numberOfTextureUnits']);\n  macro.setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLTextureUnitManager(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLTextureUnitManager');\n\n// ----------------------------------------------------------------------------\n\nvar vtkTextureUnitManager = {\n  newInstance,\n  extend\n};\n\nexport { vtkTextureUnitManager as default, extend, newInstance };\n","const Wrap = {\n  CLAMP_TO_EDGE: 0,\n  REPEAT: 1,\n  MIRRORED_REPEAT: 2\n};\nconst Filter = {\n  NEAREST: 0,\n  LINEAR: 1,\n  NEAREST_MIPMAP_NEAREST: 2,\n  NEAREST_MIPMAP_LINEAR: 3,\n  LINEAR_MIPMAP_NEAREST: 4,\n  LINEAR_MIPMAP_LINEAR: 5\n};\nvar Constants = {\n  Wrap,\n  Filter\n};\n\nexport { Filter, Wrap, Constants as default };\n","/**\n * Even when the EXT_texture_norm16 extension is present, linear filtering\n * might not be supported for normalized fixed point textures.\n *\n * This is a driver bug. See https://github.com/KhronosGroup/WebGL/issues/3706\n * @return {boolean}\n */\nfunction supportsNorm16Linear() {\n  try {\n    const canvasSize = 4;\n    const texWidth = 2;\n    const texHeight = 1;\n    const texData = new Int16Array([0, 2 ** 15 - 1]);\n    const pixelToCheck = [1, 1];\n    const canvas = document.createElement('canvas');\n    canvas.width = canvasSize;\n    canvas.height = canvasSize;\n    const gl = canvas.getContext('webgl2');\n    if (!gl) {\n      return false;\n    }\n    const ext = gl.getExtension('EXT_texture_norm16');\n    if (!ext) {\n      return false;\n    }\n    const vs = `#version 300 es\n    void main() {\n      gl_PointSize = ${canvasSize.toFixed(1)};\n      gl_Position = vec4(0, 0, 0, 1);\n    }\n  `;\n    const fs = `#version 300 es\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n\n    uniform sampler2D u_image;\n\n    out vec4 color;\n\n    void main() {\n        vec4 intColor = texture(u_image, gl_PointCoord.xy);\n        color = vec4(vec3(intColor.rrr), 1);\n    }\n    `;\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vs);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      return false;\n    }\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fs);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      return false;\n    }\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      return false;\n    }\n    const tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, ext.R16_SNORM_EXT, texWidth, texHeight, 0, gl.RED, gl.SHORT, texData);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.useProgram(program);\n    gl.drawArrays(gl.POINTS, 0, 1);\n    const pixel = new Uint8Array(4);\n    gl.readPixels(pixelToCheck[0], pixelToCheck[1], 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n    const [r, g, b] = pixel;\n    const webglLoseContext = gl.getExtension('WEBGL_lose_context');\n    if (webglLoseContext) {\n      webglLoseContext.loseContext();\n    }\n    return r === g && g === b && r !== 0;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @type {boolean | undefined}\n */\nlet supportsNorm16LinearCache;\nfunction supportsNorm16LinearCached() {\n  // Only create a canvas+texture+shaders the first time\n  if (supportsNorm16LinearCache === undefined) {\n    supportsNorm16LinearCache = supportsNorm16Linear();\n  }\n  return supportsNorm16LinearCache;\n}\n\nexport { supportsNorm16LinearCached as default };\n","import { m as macro } from '../../macros2.js';\nimport { ObjectType } from './BufferObject/Constants.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLVertexArrayObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLVertexArrayObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVertexArrayObject');\n\n  // Public API methods\n  publicAPI.exposedMethod = () => {\n    // This is a publicly exposed method of this object\n  };\n  publicAPI.initialize = () => {\n    model.instancingExtension = null;\n    if (!model._openGLRenderWindow.getWebgl2()) {\n      model.instancingExtension = model.context.getExtension('ANGLE_instanced_arrays');\n    }\n    if (!model.forceEmulation && model._openGLRenderWindow && model._openGLRenderWindow.getWebgl2()) {\n      model.extension = null;\n      model.supported = true;\n      model.handleVAO = model.context.createVertexArray();\n    } else {\n      model.extension = model.context.getExtension('OES_vertex_array_object');\n      // Start setting up VAO\n      if (!model.forceEmulation && model.extension) {\n        model.supported = true;\n        model.handleVAO = model.extension.createVertexArrayOES();\n      } else {\n        model.supported = false;\n      }\n    }\n  };\n  publicAPI.isReady = () =>\n  // We either probed and allocated a VAO, or are falling back as the current\n  // hardware does not support VAOs.\n  model.handleVAO !== 0 || model.supported === false;\n  publicAPI.bind = () => {\n    // Either simply bind the VAO, or emulate behavior by binding all attributes.\n    if (!publicAPI.isReady()) {\n      publicAPI.initialize();\n    }\n    if (publicAPI.isReady() && model.supported) {\n      if (model.extension) {\n        model.extension.bindVertexArrayOES(model.handleVAO);\n      } else {\n        model.context.bindVertexArray(model.handleVAO);\n      }\n    } else if (publicAPI.isReady()) {\n      const gl = model.context;\n      for (let ibuff = 0; ibuff < model.buffers.length; ++ibuff) {\n        const buff = model.buffers[ibuff];\n        model.context.bindBuffer(gl.ARRAY_BUFFER, buff.buffer);\n        for (let iatt = 0; iatt < buff.attributes.length; ++iatt) {\n          const attrIt = buff.attributes[iatt];\n          const matrixCount = attrIt.isMatrix ? attrIt.size : 1;\n          for (let i = 0; i < matrixCount; ++i) {\n            gl.enableVertexAttribArray(attrIt.index + i);\n            gl.vertexAttribPointer(attrIt.index + i, attrIt.size, attrIt.type, attrIt.normalize, attrIt.stride, attrIt.offset + attrIt.stride * i / attrIt.size);\n            if (attrIt.divisor > 0) {\n              if (model.instancingExtension) {\n                model.instancingExtension.vertexAttribDivisorANGLE(attrIt.index + i, 1);\n              } else {\n                gl.vertexAttribDivisor(attrIt.index + i, 1);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  publicAPI.release = () => {\n    // Either simply release the VAO, or emulate behavior by releasing all attributes.\n    if (publicAPI.isReady() && model.supported) {\n      if (model.extension) {\n        model.extension.bindVertexArrayOES(null);\n      } else {\n        model.context.bindVertexArray(null);\n      }\n    } else if (publicAPI.isReady()) {\n      const gl = model.context;\n      for (let ibuff = 0; ibuff < model.buffers.length; ++ibuff) {\n        const buff = model.buffers[ibuff];\n        model.context.bindBuffer(gl.ARRAY_BUFFER, buff.buffer);\n        for (let iatt = 0; iatt < buff.attributes.length; ++iatt) {\n          const attrIt = buff.attributes[iatt];\n          const matrixCount = attrIt.isMatrix ? attrIt.size : 1;\n          for (let i = 0; i < matrixCount; ++i) {\n            gl.enableVertexAttribArray(attrIt.index + i);\n            gl.vertexAttribPointer(attrIt.index + i, attrIt.size, attrIt.type, attrIt.normalize, attrIt.stride, attrIt.offset + attrIt.stride * i / attrIt.size);\n            if (attrIt.divisor > 0) {\n              if (model.instancingExtension) {\n                model.instancingExtension.vertexAttribDivisorANGLE(attrIt.index + i, 0);\n              } else {\n                gl.vertexAttribDivisor(attrIt.index + i, 0);\n              }\n            }\n            gl.disableVertexAttribArray(attrIt.index + i);\n          }\n        }\n      }\n    }\n  };\n  publicAPI.shaderProgramChanged = () => {\n    publicAPI.release();\n    if (model.handleVAO) {\n      if (model.extension) {\n        model.extension.deleteVertexArrayOES(model.handleVAO);\n      } else {\n        model.context.deleteVertexArray(model.handleVAO);\n      }\n    }\n    model.handleVAO = 0;\n    model.handleProgram = 0;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    publicAPI.shaderProgramChanged();\n    if (model.handleVAO) {\n      if (model.extension) {\n        model.extension.deleteVertexArrayOES(model.handleVAO);\n      } else {\n        model.context.deleteVertexArray(model.handleVAO);\n      }\n    }\n    model.handleVAO = 0;\n    model.supported = true;\n    model.handleProgram = 0;\n  };\n  publicAPI.addAttributeArray = (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize) => publicAPI.addAttributeArrayWithDivisor(program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, 0, false);\n  publicAPI.addAttributeArrayWithDivisor = (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor, isMatrix) => {\n    if (!program) {\n      return false;\n    }\n\n    // Check the program is bound, and the buffer is valid.\n    if (!program.isBound() || buffer.getHandle() === 0 || buffer.getType() !== ObjectType.ARRAY_BUFFER) {\n      return false;\n    }\n\n    // Perform initialization if necessary, ensure program matches VAOs.\n    if (model.handleProgram === 0) {\n      model.handleProgram = program.getHandle();\n    }\n    if (!publicAPI.isReady()) {\n      publicAPI.initialize();\n    }\n    if (!publicAPI.isReady() || model.handleProgram !== program.getHandle()) {\n      return false;\n    }\n    const gl = model.context;\n    const attribs = {};\n    attribs.name = name;\n    attribs.index = gl.getAttribLocation(model.handleProgram, name);\n    attribs.offset = offset;\n    attribs.stride = stride;\n    attribs.type = elementType;\n    attribs.size = elementTupleSize;\n    attribs.normalize = normalize;\n    attribs.isMatrix = isMatrix;\n    attribs.divisor = divisor;\n    if (attribs.Index === -1) {\n      return false;\n    }\n\n    // Always make the call as even the first use wants the attrib pointer setting\n    // up when we are emulating.\n    buffer.bind();\n    gl.enableVertexAttribArray(attribs.index);\n    gl.vertexAttribPointer(attribs.index, attribs.size, attribs.type, attribs.normalize, attribs.stride, attribs.offset);\n    if (divisor > 0) {\n      if (model.instancingExtension) {\n        model.instancingExtension.vertexAttribDivisorANGLE(attribs.index, 1);\n      } else {\n        gl.vertexAttribDivisor(attribs.index, 1);\n      }\n    }\n    attribs.buffer = buffer.getHandle();\n\n    // If vertex array objects are not supported then build up our list.\n    if (!model.supported) {\n      // find the buffer\n      let buffFound = false;\n      for (let ibuff = 0; ibuff < model.buffers.length; ++ibuff) {\n        const buff = model.buffers[ibuff];\n        if (buff.buffer === attribs.buffer) {\n          buffFound = true;\n          let found = false;\n          for (let iatt = 0; iatt < buff.attributes.length; ++iatt) {\n            const attrIt = buff.attributes[iatt];\n            if (attrIt.name === name) {\n              found = true;\n              buff.attributes[iatt] = attribs;\n            }\n          }\n          if (!found) {\n            buff.attributes.push(attribs);\n          }\n        }\n      }\n      if (!buffFound) {\n        model.buffers.push({\n          buffer: attribs.buffer,\n          attributes: [attribs]\n        });\n      }\n    }\n    return true;\n  };\n  publicAPI.addAttributeMatrixWithDivisor = (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor) => {\n    // bind the first row of values\n    const result = publicAPI.addAttributeArrayWithDivisor(program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor, true);\n    if (!result) {\n      return result;\n    }\n    const gl = model.context;\n    const index = gl.getAttribLocation(model.handleProgram, name);\n    for (let i = 1; i < elementTupleSize; i++) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(index + i, elementTupleSize, elementType, normalize, stride, offset + stride * i / elementTupleSize);\n      if (divisor > 0) {\n        if (model.instancingExtension) {\n          model.instancingExtension.vertexAttribDivisorANGLE(index + i, 1);\n        } else {\n          gl.vertexAttribDivisor(index + i, 1);\n        }\n      }\n    }\n    return true;\n  };\n  publicAPI.removeAttributeArray = name => {\n    if (!publicAPI.isReady() || model.handleProgram === 0) {\n      return false;\n    }\n\n    // If we don't have real VAOs find the entry and remove it too.\n    if (!model.supported) {\n      for (let ibuff = 0; ibuff < model.buffers.length; ++ibuff) {\n        const buff = model.buffers[ibuff];\n        for (let iatt = 0; iatt < buff.attributes.length; ++iatt) {\n          const attrIt = buff.attributes[iatt];\n          if (attrIt.name === name) {\n            buff.attributes.splice(iatt, 1);\n            if (!buff.attributes.length) {\n              model.buffers.splice(ibuff, 1);\n            }\n            return true;\n          }\n        }\n      }\n    }\n    return true;\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  forceEmulation: false,\n  handleVAO: 0,\n  handleProgram: 0,\n  supported: true,\n  buffers: null,\n  context: null\n  // _openGLRenderWindow: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Internal objects initialization\n  model.buffers = [];\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['supported']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['forceEmulation']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkOpenGLVertexArrayObject(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLVertexArrayObject');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVertexArrayObject = {\n  newInstance,\n  extend\n};\n\nexport { vtkVertexArrayObject as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkViewNodeFactory$1 from '../SceneGraph/ViewNodeFactory.js';\n\nconst CLASS_MAPPING = Object.create(null);\nfunction registerOverride(className, fn) {\n  CLASS_MAPPING[className] = fn;\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLViewNodeFactory methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLViewNodeFactory(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLViewNodeFactory');\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Static class mapping shared across instances\n  model.overrides = CLASS_MAPPING;\n\n  // Inheritance\n  vtkViewNodeFactory$1.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkOpenGLViewNodeFactory(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLViewNodeFactory');\n\n// ----------------------------------------------------------------------------\n\nvar vtkViewNodeFactory = {\n  newInstance,\n  extend\n};\n\nexport { vtkViewNodeFactory as default, extend, newInstance, registerOverride };\n","import { mat4, mat3 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLVolume methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLVolume(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVolume');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      renderPass.incrementVolumeCount();\n    }\n  };\n  publicAPI.traverseVolumePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children[0].traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // Renders myself\n  publicAPI.volumePass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    model.context.depthMask(!prepass);\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.MCWCMatrix, model.renderable.getMatrix());\n      mat4.transpose(model.MCWCMatrix, model.MCWCMatrix);\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.normalMatrix);\n      } else {\n        mat3.fromMat4(model.normalMatrix, model.MCWCMatrix);\n        mat3.invert(model.normalMatrix, model.normalMatrix);\n        mat3.transpose(model.normalMatrix, model.normalMatrix);\n      }\n      model.keyMatrixTime.modified();\n    }\n    return {\n      mcwc: model.MCWCMatrix,\n      normalMatrix: model.normalMatrix\n    };\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // context: null,\n  // keyMatrixTime: null,\n  // normalMatrix: null,\n  // MCWCMatrix: null,\n  // _openGLRenderWindow: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  // always set by getter\n  model.normalMatrix = new Float64Array(9);\n  model.MCWCMatrix = new Float64Array(16);\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLVolume(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLVolume');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolume = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkVolume', newInstance);\n\nexport { vtkVolume as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, e as setGet, h as chain, c as macro } from '../../macros2.js';\nimport DeepEqual from 'fast-deep-equal';\nimport { mat4, mat3, vec3 } from 'gl-matrix';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport vtkHelper from './Helper.js';\nimport { u as uninitializeBounds } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { Wrap, Filter } from './Texture/Constants.js';\nimport { InterpolationType, OpacityMode, ColorMixPreset } from '../Core/VolumeProperty/Constants.js';\nimport { BlendMode } from '../Core/VolumeMapper/Constants.js';\nimport { getTransferFunctionHash, getImageDataHash } from './RenderWindow/resourceSharingHelper.js';\nimport { v as vtkVolumeVS } from './glsl/vtkVolumeVS.glsl.js';\nimport { v as vtkVolumeFS } from './glsl/vtkVolumeFS.glsl.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkWarningMacro,\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// helper methods\n// ----------------------------------------------------------------------------\n\nfunction getColorCodeFromPreset(colorMixPreset) {\n  switch (colorMixPreset) {\n    case ColorMixPreset.CUSTOM:\n      return '//VTK::CustomColorMix';\n    case ColorMixPreset.ADDITIVE:\n      return `\n        // compute normals\n        mat4 normalMat = computeMat4Normal(posIS, tValue, tstep);\n        #if (vtkLightComplexity > 0) && defined(vtkComputeNormalFromOpacity)\n          vec3 scalarInterp0[2];\n          vec4 normalLight0 = computeNormalForDensity(posIS, tstep, scalarInterp0, 0);\n          scalarInterp0[0] = scalarInterp0[0] * oscale0 + oshift0;\n          scalarInterp0[1] = scalarInterp0[1] * oscale0 + oshift0;\n          normalLight0 = computeDensityNormal(scalarInterp0, height0, 1.0);\n\n          vec3 scalarInterp1[2];\n          vec4 normalLight1 = computeNormalForDensity(posIS, tstep, scalarInterp1, 1);\n          scalarInterp1[0] = scalarInterp1[0] * oscale1 + oshift1;\n          scalarInterp1[1] = scalarInterp1[1] * oscale1 + oshift1;\n          normalLight1 = computeDensityNormal(scalarInterp1, height1, 1.0);\n        #else\n          vec4 normalLight0 = normalMat[0];\n          vec4 normalLight1 = normalMat[1];\n        #endif\n\n        // compute opacities\n        float opacity0 = pwfValue0;\n        float opacity1 = pwfValue1;\n        #ifdef vtkGradientOpacityOn\n          float gof0 = computeGradientOpacityFactor(normalMat[0].a, goscale0, goshift0, gomin0, gomax0);\n          opacity0 *= gof0;\n          float gof1 = computeGradientOpacityFactor(normalMat[1].a, goscale1, goshift1, gomin1, gomax1);\n          opacity1 *= gof1;\n        #endif\n        float opacitySum = opacity0 + opacity1;\n        if (opacitySum <= 0.0) {\n          return vec4(0.0);\n        }\n\n        // mix the colors and opacities\n        tColor0 = applyAllLightning(tColor0, opacity0, posIS, normalLight0);\n        tColor1 = applyAllLightning(tColor1, opacity1, posIS, normalLight1);\n        vec3 mixedColor = (opacity0 * tColor0 + opacity1 * tColor1) / opacitySum;\n        return vec4(mixedColor, min(1.0, opacitySum));\n`;\n    case ColorMixPreset.COLORIZE:\n      return `\n        // compute normals\n        mat4 normalMat = computeMat4Normal(posIS, tValue, tstep);\n        #if (vtkLightComplexity > 0) && defined(vtkComputeNormalFromOpacity)\n          vec3 scalarInterp0[2];\n          vec4 normalLight0 = computeNormalForDensity(posIS, tstep, scalarInterp0, 0);\n          scalarInterp0[0] = scalarInterp0[0] * oscale0 + oshift0;\n          scalarInterp0[1] = scalarInterp0[1] * oscale0 + oshift0;\n          normalLight0 = computeDensityNormal(scalarInterp0, height0, 1.0);\n        #else\n          vec4 normalLight0 = normalMat[0];\n        #endif\n\n        // compute opacities\n        float opacity0 = pwfValue0;\n        #ifdef vtkGradientOpacityOn\n          float gof0 = computeGradientOpacityFactor(normalMat[0].a, goscale0, goshift0, gomin0, gomax0);\n          opacity0 *= gof0;\n        #endif\n\n        // mix the colors and opacities\n        vec3 color = tColor0 * mix(vec3(1.0), tColor1, pwfValue1);\n        color = applyAllLightning(color, opacity0, posIS, normalLight0);\n        return vec4(color, opacity0);\n`;\n    default:\n      return null;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVolumeMapper');\n  function unregisterGraphicsResources(renderWindow) {\n    [model._scalars, model._scalarOpacityFunc, model._colorTransferFunc, model._labelOutlineThicknessArray].forEach(coreObject => renderWindow.unregisterGraphicsResourceUser(coreObject, publicAPI));\n  }\n  publicAPI.buildPass = () => {\n    model.zBufferTexture = null;\n  };\n\n  // ohh someone is doing a zbuffer pass, use that for\n  // intermixed volume rendering\n  publicAPI.zBufferPass = (prepass, renderPass) => {\n    if (prepass) {\n      const zbt = renderPass.getZBufferTexture();\n      if (zbt !== model.zBufferTexture) {\n        model.zBufferTexture = zbt;\n      }\n    }\n  };\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.zBufferPass(prepass, renderPass);\n\n  // Renders myself\n  publicAPI.volumePass = (prepass, renderPass) => {\n    if (prepass) {\n      const oldOglRenderWindow = model._openGLRenderWindow;\n      model._openGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (oldOglRenderWindow && !oldOglRenderWindow.isDeleted() && oldOglRenderWindow !== model._openGLRenderWindow) {\n        // Unregister the mapper when the render window changes\n        unregisterGraphicsResources(oldOglRenderWindow);\n      }\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.jitterTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.openGLVolume = publicAPI.getFirstAncestorOfType('vtkOpenGLVolume');\n      const actor = model.openGLVolume.getRenderable();\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      const ren = model._openGLRenderer.getRenderable();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n      publicAPI.renderPiece(ren, actor);\n    }\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkVolumeVS;\n    shaders.Fragment = vtkVolumeFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.useIndependentComponents = actorProperty => {\n    const iComps = actorProperty.getIndependentComponents();\n    const image = model.currentInput;\n    const numComp = image?.getPointData()?.getScalars()?.getNumberOfComponents();\n    const colorMixPreset = actorProperty.getColorMixPreset();\n    return iComps && numComp >= 2 || !!colorMixPreset;\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    const actorProps = actor.getProperty();\n    let FSSource = shaders.Fragment;\n\n    // define some values in the shader\n    const iType = actorProps.getInterpolationType();\n    if (iType === InterpolationType.LINEAR) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TrilinearOn', '#define vtkTrilinearOn').result;\n    }\n    const vtkImageLabelOutline = publicAPI.isLabelmapOutlineRequired(actor);\n    if (vtkImageLabelOutline === true) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ImageLabelOutlineOn', '#define vtkImageLabelOutlineOn').result;\n    }\n    const LabelEdgeProjection = model.renderable.getBlendMode() === BlendMode.LABELMAP_EDGE_PROJECTION_BLEND;\n    if (LabelEdgeProjection) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LabelEdgeProjectionOn', '#define vtkLabelEdgeProjectionOn').result;\n    }\n    const numComp = model.scalarTexture.getComponents();\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::NumComponents', `#define vtkNumComponents ${numComp}`).result;\n    const useIndependentComps = publicAPI.useIndependentComponents(actorProps);\n    if (useIndependentComps) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::IndependentComponentsOn', '#define UseIndependentComponents').result;\n    }\n\n    // Define any proportional components\n    const proportionalComponents = [];\n    const forceNearestComponents = [];\n    for (let nc = 0; nc < numComp; nc++) {\n      if (actorProps.getOpacityMode(nc) === OpacityMode.PROPORTIONAL) {\n        proportionalComponents.push(`#define vtkComponent${nc}Proportional`);\n      }\n      if (actorProps.getForceNearestInterpolation(nc)) {\n        forceNearestComponents.push(`#define vtkComponent${nc}ForceNearest`);\n      }\n    }\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkProportionalComponents', proportionalComponents.join('\\n')).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkForceNearestComponents', forceNearestComponents.join('\\n')).result;\n    const colorMixPreset = actorProps.getColorMixPreset();\n    const colorMixCode = getColorCodeFromPreset(colorMixPreset);\n    if (colorMixCode) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::CustomComponentsColorMixOn', '#define vtkCustomComponentsColorMix').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::CustomComponentsColorMix::Impl', colorMixCode).result;\n    }\n\n    // WebGL only supports loops over constants\n    // and does not support while loops so we\n    // have to hard code how many steps/samples to take\n    // We do a break so most systems will gracefully\n    // early terminate, but it is always possible\n    // a system will execute every step regardless\n    const ext = model.currentInput.getSpatialExtent();\n    const spc = model.currentInput.getSpacing();\n    const vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    const maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::MaximumSamplesValue', `${Math.ceil(maxSamples)}`).result;\n\n    // set light complexity\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LightComplexity', `#define vtkLightComplexity ${model.lightComplexity}`).result;\n\n    // set shadow blending flag\n    if (model.lightComplexity > 0) {\n      if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::VolumeShadowOn', `#define VolumeShadowOn`).result;\n      }\n      if (model.renderable.getVolumetricScatteringBlending() < 1.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::SurfaceShadowOn', `#define SurfaceShadowOn`).result;\n      }\n      if (model.renderable.getLocalAmbientOcclusion() && actorProps.getAmbient() > 0.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::localAmbientOcclusionOn', `#define localAmbientOcclusionOn`).result;\n      }\n    }\n\n    // if using gradient opacity define that\n    const numIComps = useIndependentComps ? numComp : 1;\n    model.gopacity = false;\n    for (let nc = 0; !model.gopacity && nc < numIComps; ++nc) {\n      model.gopacity ||= actorProps.getUseGradientOpacity(nc);\n    }\n    if (model.gopacity) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::GradientOpacityOn', '#define vtkGradientOpacityOn').result;\n    }\n\n    // set normal from density\n    if (model.renderable.getComputeNormalFromOpacity()) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkComputeNormalFromOpacity', `#define vtkComputeNormalFromOpacity`).result;\n    }\n\n    // if we have a ztexture then declare it and use it\n    if (model.zBufferTexture !== null) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', ['uniform sampler2D zBufferTexture;', 'uniform float vpZWidth;', 'uniform float vpZHeight;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['vec4 depthVec = texture2D(zBufferTexture, vec2(gl_FragCoord.x / vpZWidth, gl_FragCoord.y/vpZHeight));', 'float zdepth = (depthVec.r*256.0 + depthVec.g)/257.0;', 'zdepth = zdepth * 2.0 - 1.0;', 'if (cameraParallel == 0) {', 'zdepth = -2.0 * camFar * camNear / (zdepth*(camFar-camNear)-(camFar+camNear)) - camNear;}', 'else {', 'zdepth = (zdepth + 1.0) * 0.5 * (camFar - camNear);}\\n', 'zdepth = -zdepth/rayDir.z;', 'dists.y = min(zdepth,dists.y);']).result;\n    }\n\n    // Set the BlendMode approach\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::BlendMode', `${model.renderable.getBlendMode()}`).result;\n    shaders.Fragment = FSSource;\n    publicAPI.replaceShaderLight(shaders, ren, actor);\n    publicAPI.replaceShaderClippingPlane(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderLight = (shaders, ren, actor) => {\n    if (model.lightComplexity === 0) {\n      return;\n    }\n    let FSSource = shaders.Fragment;\n    // check for shadow maps - not implemented yet, skip\n    // const shadowFactor = '';\n\n    // to-do: single out the case when complexity = 1\n\n    // only account for lights that are switched on\n    let lightNum = 0;\n    ren.getLights().forEach(light => {\n      if (light.getSwitch()) {\n        lightNum += 1;\n      }\n    });\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', [`uniform int lightNum;`, `uniform bool twoSidedLighting;`, `uniform vec3 lightColor[${lightNum}];`, `uniform vec3 lightDirectionVC[${lightNum}]; // normalized`, `uniform vec3 lightHalfAngleVC[${lightNum}];`, '//VTK::Light::Dec'], false).result;\n    // support any number of lights\n    if (model.lightComplexity === 3) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', [`uniform vec3 lightPositionVC[${lightNum}];`, `uniform vec3 lightAttenuation[${lightNum}];`, `uniform float lightConeAngle[${lightNum}];`, `uniform float lightExponent[${lightNum}];`, `uniform int lightPositional[${lightNum}];`], false).result;\n    }\n    if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::VolumeShadow::Dec', [`uniform float volumetricScatteringBlending;`, `uniform float giReach;`, `uniform float volumeShadowSamplingDistFactor;`, `uniform float anisotropy;`, `uniform float anisotropy2;`], false).result;\n    }\n    if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LAO::Dec', [`uniform int kernelRadius;`, `uniform vec2 kernelSample[${model.renderable.getLAOKernelRadius()}];`, `uniform int kernelSize;`], false).result;\n    }\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderClippingPlane = (shaders, ren, actor) => {\n    let FSSource = shaders.Fragment;\n    if (model.renderable.getClippingPlanes().length > 0) {\n      const clipPlaneSize = model.renderable.getClippingPlanes().length;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ClipPlane::Dec', [`uniform vec3 vClipPlaneNormals[6];`, `uniform float vClipPlaneDistances[6];`, `uniform vec3 vClipPlaneOrigins[6];`, `uniform int clip_numPlanes;`, '//VTK::ClipPlane::Dec', '#define vtkClippingPlanesOn'], false).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ClipPlane::Impl', [`for(int i = 0; i < ${clipPlaneSize}; i++) {`, '  float rayDirRatio = dot(rayDir, vClipPlaneNormals[i]);', '  float equationResult = dot(vertexVCVSOutput, vClipPlaneNormals[i]) + vClipPlaneDistances[i];', '  if (rayDirRatio == 0.0)', '  {', '    if (equationResult < 0.0) dists.x = dists.y;', '    continue;', '  }', '  float result = -1.0 * equationResult / rayDirRatio;', '  if (rayDirRatio < 0.0) dists.y = min(dists.y, result);', '  else dists.x = max(dists.x, result);', '}', '//VTK::ClipPlane::Impl'], false).result;\n    }\n    shaders.Fragment = FSSource;\n  };\n  const recomputeLightComplexity = (actor, lights) => {\n    // do we need lighting?\n    let lightComplexity = 0;\n    if (actor.getProperty().getShade() && model.renderable.getBlendMode() === BlendMode.COMPOSITE_BLEND) {\n      // consider the lighting complexity to determine which case applies\n      // simple headlight, Light Kit, the whole feature set of VTK\n      lightComplexity = 0;\n      model.numberOfLights = 0;\n      lights.forEach(light => {\n        const status = light.getSwitch();\n        if (status > 0) {\n          model.numberOfLights++;\n          if (lightComplexity === 0) {\n            lightComplexity = 1;\n          }\n        }\n        if (lightComplexity === 1 && (model.numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {\n          lightComplexity = 2;\n        }\n        if (lightComplexity < 3 && light.getPositional()) {\n          lightComplexity = 3;\n        }\n      });\n    }\n    if (lightComplexity !== model.lightComplexity) {\n      model.lightComplexity = lightComplexity;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    const actorProps = actor.getProperty();\n    recomputeLightComplexity(actor, ren.getLights());\n    const numComp = model.scalarTexture.getComponents();\n    const opacityModes = [];\n    const forceNearestInterps = [];\n    for (let nc = 0; nc < numComp; nc++) {\n      opacityModes.push(actorProps.getOpacityMode(nc));\n      forceNearestInterps.push(actorProps.getForceNearestInterpolation(nc));\n    }\n    const ext = model.currentInput.getSpatialExtent();\n    const spc = model.currentInput.getSpacing();\n    const vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    const maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    const hasZBufferTexture = !!model.zBufferTexture;\n    const state = {\n      iComps: actorProps.getIndependentComponents(),\n      colorMixPreset: actorProps.getColorMixPreset(),\n      interpolationType: actorProps.getInterpolationType(),\n      useLabelOutline: publicAPI.isLabelmapOutlineRequired(actor),\n      numComp,\n      maxSamples,\n      useGradientOpacity: actorProps.getUseGradientOpacity(0),\n      blendMode: model.renderable.getBlendMode(),\n      hasZBufferTexture,\n      opacityModes,\n      forceNearestInterps\n    };\n\n    // We need to rebuild the shader if one of these variables has changed,\n    // since they are used in the shader template replacement step.\n    // We also need to rebuild if the shader source time is outdated.\n    if (cellBO.getProgram()?.getHandle() === 0 || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || !model.previousState || !DeepEqual(model.previousState, state)) {\n      model.previousState = state;\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {\n      const shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      publicAPI.buildShaders(shaders, ren, actor);\n\n      // compile and bind the program if needed\n      const newShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry);\n\n      // if the shader changed reinitialize the VAO\n      if (newShader !== cellBO.getProgram()) {\n        cellBO.setProgram(newShader);\n        // reset the VAO as the shader has changed\n        cellBO.getVAO().releaseGraphicsResources();\n      }\n      cellBO.getShaderSourceTime().modified();\n    } else {\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());\n    }\n    cellBO.getVAO().bind();\n    publicAPI.setMapperShaderParameters(cellBO, ren, actor);\n    publicAPI.setCameraShaderParameters(cellBO, ren, actor);\n    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);\n    publicAPI.getClippingPlaneShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    // Now to update the VAO too, if necessary.\n    const program = cellBO.getProgram();\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (program.isAttributeUsed('vertexDC')) {\n        if (!cellBO.getVAO().addAttributeArray(program, cellBO.getCABO(), 'vertexDC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexDC in shader VAO.');\n        }\n      }\n      cellBO.getAttributeUpdateTime().modified();\n    }\n    program.setUniformi('texture1', model.scalarTexture.getTextureUnit());\n    program.setUniformf('sampleDistance', publicAPI.getCurrentSampleDistance(ren));\n    const volInfo = model.scalarTexture.getVolumeInfo();\n    const ipScalarRange = model.renderable.getIpScalarRange();\n\n    // In some situations, we might not have computed the scale and offset\n    // for the data range, or it might not be needed.\n    if (volInfo?.dataComputedScale?.length) {\n      const minVals = [];\n      const maxVals = [];\n      for (let i = 0; i < 4; i++) {\n        // convert iprange from 0-1 into data range values\n        minVals[i] = ipScalarRange[0] * volInfo.dataComputedScale[i] + volInfo.dataComputedOffset[i];\n        maxVals[i] = ipScalarRange[1] * volInfo.dataComputedScale[i] + volInfo.dataComputedOffset[i];\n        // convert data ranges into texture values\n        minVals[i] = (minVals[i] - volInfo.offset[i]) / volInfo.scale[i];\n        maxVals[i] = (maxVals[i] - volInfo.offset[i]) / volInfo.scale[i];\n      }\n      program.setUniform4f('ipScalarRangeMin', minVals[0], minVals[1], minVals[2], minVals[3]);\n      program.setUniform4f('ipScalarRangeMax', maxVals[0], maxVals[1], maxVals[2], maxVals[3]);\n    }\n\n    // if we have a zbuffer texture then set it\n    if (model.zBufferTexture !== null) {\n      program.setUniformi('zBufferTexture', model.zBufferTexture.getTextureUnit());\n      const size = model._useSmallViewport ? [model._smallViewportWidth, model._smallViewportHeight] : model._openGLRenderWindow.getFramebufferSize();\n      program.setUniformf('vpZWidth', size[0]);\n      program.setUniformf('vpZHeight', size[1]);\n    }\n  };\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    // // [WMVP]C == {world, model, view, projection} coordinates\n    // // E.g., WCPC == world to projection coordinate transformation\n    const keyMats = model.openGLCamera.getKeyMatrices(ren);\n    const actMats = model.openGLVolume.getKeyMatrices();\n    mat4.multiply(model.modelToView, keyMats.wcvc, actMats.mcwc);\n    const program = cellBO.getProgram();\n    const cam = model.openGLCamera.getRenderable();\n    const crange = cam.getClippingRange();\n    program.setUniformf('camThick', crange[1] - crange[0]);\n    program.setUniformf('camNear', crange[0]);\n    program.setUniformf('camFar', crange[1]);\n    const bounds = model.currentInput.getBounds();\n    const dims = model.currentInput.getDimensions();\n\n    // compute the viewport bounds of the volume\n    // we will only render those fragments.\n    const pos = new Float64Array(3);\n    const dir = new Float64Array(3);\n    let dcxmin = 1.0;\n    let dcxmax = -1.0;\n    let dcymin = 1.0;\n    let dcymax = -1.0;\n    for (let i = 0; i < 8; ++i) {\n      vec3.set(pos, bounds[i % 2], bounds[2 + Math.floor(i / 2) % 2], bounds[4 + Math.floor(i / 4)]);\n      vec3.transformMat4(pos, pos, model.modelToView);\n      if (!cam.getParallelProjection()) {\n        vec3.normalize(dir, pos);\n\n        // now find the projection of this point onto a\n        // nearZ distance plane. Since the camera is at 0,0,0\n        // in VC the ray is just t*pos and\n        // t is -nearZ/dir.z\n        // intersection becomes pos.x/pos.z\n        const t = -crange[0] / pos[2];\n        vec3.scale(pos, dir, t);\n      }\n      // now convert to DC\n      vec3.transformMat4(pos, pos, keyMats.vcpc);\n      dcxmin = Math.min(pos[0], dcxmin);\n      dcxmax = Math.max(pos[0], dcxmax);\n      dcymin = Math.min(pos[1], dcymin);\n      dcymax = Math.max(pos[1], dcymax);\n    }\n    program.setUniformf('dcxmin', dcxmin);\n    program.setUniformf('dcxmax', dcxmax);\n    program.setUniformf('dcymin', dcymin);\n    program.setUniformf('dcymax', dcymax);\n    if (program.isUniformUsed('cameraParallel')) {\n      program.setUniformi('cameraParallel', cam.getParallelProjection());\n    }\n    const ext = model.currentInput.getSpatialExtent();\n    const spc = model.currentInput.getSpacing();\n    const vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    program.setUniform3f('vSpacing', spc[0], spc[1], spc[2]);\n    vec3.set(pos, ext[0], ext[2], ext[4]);\n    model.currentInput.indexToWorldVec3(pos, pos);\n    vec3.transformMat4(pos, pos, model.modelToView);\n    program.setUniform3f('vOriginVC', pos[0], pos[1], pos[2]);\n\n    // apply the image directions\n    const i2wmat4 = model.currentInput.getIndexToWorld();\n    mat4.multiply(model.idxToView, model.modelToView, i2wmat4);\n    mat3.multiply(model.idxNormalMatrix, keyMats.normalMatrix, actMats.normalMatrix);\n    mat3.multiply(model.idxNormalMatrix, model.idxNormalMatrix, model.currentInput.getDirectionByReference());\n    const maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    if (maxSamples > model.renderable.getMaximumSamplesPerRay()) {\n      vtkWarningMacro(`The number of steps required ${Math.ceil(maxSamples)} is larger than the\n        specified maximum number of steps ${model.renderable.getMaximumSamplesPerRay()}.\n        Please either change the\n        volumeMapper sampleDistance or its maximum number of samples.`);\n    }\n    const vctoijk = new Float64Array(3);\n    vec3.set(vctoijk, 1.0, 1.0, 1.0);\n    vec3.divide(vctoijk, vctoijk, vsize);\n    program.setUniform3f('vVCToIJK', vctoijk[0], vctoijk[1], vctoijk[2]);\n    program.setUniform3i('volumeDimensions', dims[0], dims[1], dims[2]);\n    program.setUniform3f('volumeSpacings', spc[0], spc[1], spc[2]);\n    if (!model._openGLRenderWindow.getWebgl2()) {\n      const volInfo = model.scalarTexture.getVolumeInfo();\n      program.setUniformf('texWidth', model.scalarTexture.getWidth());\n      program.setUniformf('texHeight', model.scalarTexture.getHeight());\n      program.setUniformi('xreps', volInfo.xreps);\n      program.setUniformi('xstride', volInfo.xstride);\n      program.setUniformi('ystride', volInfo.ystride);\n    }\n\n    // map normals through normal matrix\n    // then use a point on the plane to compute the distance\n    const normal = new Float64Array(3);\n    const pos2 = new Float64Array(3);\n    for (let i = 0; i < 6; ++i) {\n      switch (i) {\n        case 1:\n          vec3.set(normal, -1.0, 0.0, 0.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n        case 2:\n          vec3.set(normal, 0.0, 1.0, 0.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n        case 3:\n          vec3.set(normal, 0.0, -1.0, 0.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n        case 4:\n          vec3.set(normal, 0.0, 0.0, 1.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n        case 5:\n          vec3.set(normal, 0.0, 0.0, -1.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n        case 0:\n        default:\n          vec3.set(normal, 1.0, 0.0, 0.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n      }\n      vec3.transformMat3(normal, normal, model.idxNormalMatrix);\n      vec3.transformMat4(pos2, pos2, model.idxToView);\n      const dist = -1.0 * vec3.dot(pos2, normal);\n\n      // we have the plane in view coordinates\n      // specify the planes in view coordinates\n      program.setUniform3f(`vPlaneNormal${i}`, normal[0], normal[1], normal[2]);\n      program.setUniformf(`vPlaneDistance${i}`, dist);\n    }\n    if (publicAPI.isLabelmapOutlineRequired(actor)) {\n      const image = model.currentInput;\n      const worldToIndex = image.getWorldToIndex();\n      program.setUniformMatrix('vWCtoIDX', worldToIndex);\n      const camera = ren.getActiveCamera();\n      const [cRange0, cRange1] = camera.getClippingRange();\n      const distance = camera.getDistance();\n\n      // set the clipping range to be model.distance and model.distance + 0.1\n      // since we use the in the keyMats.wcpc (world to projection) matrix\n      // the projection matrix calculation relies on the clipping range to be\n      // set correctly. This is done inside the interactorStyleMPRSlice which\n      // limits use cases where the interactor style is not used.\n\n      camera.setClippingRange(distance, distance + 0.1);\n      const labelOutlineKeyMats = model.openGLCamera.getKeyMatrices(ren);\n\n      // Get the projection coordinate to world coordinate transformation matrix.\n      mat4.invert(model.projectionToWorld, labelOutlineKeyMats.wcpc);\n\n      // reset the clipping range since the keyMats are cached\n      camera.setClippingRange(cRange0, cRange1);\n\n      // to re compute the matrices for the current camera and cache them\n      model.openGLCamera.getKeyMatrices(ren);\n      program.setUniformMatrix('PCWCMatrix', model.projectionToWorld);\n      const size = publicAPI.getRenderTargetSize();\n      program.setUniformf('vpWidth', size[0]);\n      program.setUniformf('vpHeight', size[1]);\n      const offset = publicAPI.getRenderTargetOffset();\n      program.setUniformf('vpOffsetX', offset[0] / size[0]);\n      program.setUniformf('vpOffsetY', offset[1] / size[1]);\n    }\n    mat4.invert(model.projectionToView, keyMats.vcpc);\n    program.setUniformMatrix('PCVCMatrix', model.projectionToView);\n\n    // handle lighting values\n    if (model.lightComplexity === 0) {\n      return;\n    }\n    let lightNum = 0;\n    const lightColor = [];\n    const lightDir = [];\n    const halfAngle = [];\n    ren.getLights().forEach(light => {\n      const status = light.getSwitch();\n      if (status > 0) {\n        const dColor = light.getColor();\n        const intensity = light.getIntensity();\n        lightColor[0 + lightNum * 3] = dColor[0] * intensity;\n        lightColor[1 + lightNum * 3] = dColor[1] * intensity;\n        lightColor[2 + lightNum * 3] = dColor[2] * intensity;\n        const ldir = light.getDirection();\n        vec3.set(normal, ldir[0], ldir[1], ldir[2]);\n        vec3.transformMat3(normal, normal, keyMats.normalMatrix); // in view coordinat\n        vec3.normalize(normal, normal);\n        lightDir[0 + lightNum * 3] = normal[0];\n        lightDir[1 + lightNum * 3] = normal[1];\n        lightDir[2 + lightNum * 3] = normal[2];\n        // camera DOP is 0,0,-1.0 in VC\n        halfAngle[0 + lightNum * 3] = -0.5 * normal[0];\n        halfAngle[1 + lightNum * 3] = -0.5 * normal[1];\n        halfAngle[2 + lightNum * 3] = -0.5 * (normal[2] - 1.0);\n        lightNum++;\n      }\n    });\n    program.setUniformi('twoSidedLighting', ren.getTwoSidedLighting());\n    program.setUniformi('lightNum', lightNum);\n    program.setUniform3fv('lightColor', lightColor);\n    program.setUniform3fv('lightDirectionVC', lightDir);\n    program.setUniform3fv('lightHalfAngleVC', halfAngle);\n    if (model.lightComplexity === 3) {\n      lightNum = 0;\n      const lightPositionVC = [];\n      const lightAttenuation = [];\n      const lightConeAngle = [];\n      const lightExponent = [];\n      const lightPositional = [];\n      ren.getLights().forEach(light => {\n        const status = light.getSwitch();\n        if (status > 0) {\n          const attenuation = light.getAttenuationValues();\n          lightAttenuation[0 + lightNum * 3] = attenuation[0];\n          lightAttenuation[1 + lightNum * 3] = attenuation[1];\n          lightAttenuation[2 + lightNum * 3] = attenuation[2];\n          lightExponent[lightNum] = light.getExponent();\n          lightConeAngle[lightNum] = light.getConeAngle();\n          lightPositional[lightNum] = light.getPositional();\n          const lp = light.getTransformedPosition();\n          vec3.transformMat4(lp, lp, model.modelToView);\n          lightPositionVC[0 + lightNum * 3] = lp[0];\n          lightPositionVC[1 + lightNum * 3] = lp[1];\n          lightPositionVC[2 + lightNum * 3] = lp[2];\n          lightNum += 1;\n        }\n      });\n      program.setUniform3fv('lightPositionVC', lightPositionVC);\n      program.setUniform3fv('lightAttenuation', lightAttenuation);\n      program.setUniformfv('lightConeAngle', lightConeAngle);\n      program.setUniformfv('lightExponent', lightExponent);\n      program.setUniformiv('lightPositional', lightPositional);\n    }\n    if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n      program.setUniformf('giReach', model.renderable.getGlobalIlluminationReach());\n      program.setUniformf('volumetricScatteringBlending', model.renderable.getVolumetricScatteringBlending());\n      program.setUniformf('volumeShadowSamplingDistFactor', model.renderable.getVolumeShadowSamplingDistFactor());\n      program.setUniformf('anisotropy', model.renderable.getAnisotropy());\n      program.setUniformf('anisotropy2', model.renderable.getAnisotropy() ** 2.0);\n    }\n    if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n      const ks = model.renderable.getLAOKernelSize();\n      program.setUniformi('kernelSize', ks);\n      const kernelSample = [];\n      for (let i = 0; i < ks; i++) {\n        kernelSample[i * 2] = Math.random() * 0.5;\n        kernelSample[i * 2 + 1] = Math.random() * 0.5;\n      }\n      program.setUniform2fv('kernelSample', kernelSample);\n      program.setUniformi('kernelRadius', model.renderable.getLAOKernelRadius());\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    program.setUniformi('ctexture', model.colorTexture.getTextureUnit());\n    program.setUniformi('otexture', model.opacityTexture.getTextureUnit());\n    program.setUniformi('jtexture', model.jitterTexture.getTextureUnit());\n    program.setUniformi('ttexture', model.labelOutlineThicknessTexture.getTextureUnit());\n    const volInfo = model.scalarTexture.getVolumeInfo();\n    const vprop = actor.getProperty();\n\n    // set the component mix when independent\n    const numComp = model.scalarTexture.getComponents();\n    const useIndependentComps = publicAPI.useIndependentComponents(vprop);\n    if (useIndependentComps) {\n      for (let i = 0; i < numComp; i++) {\n        program.setUniformf(`mix${i}`, actor.getProperty().getComponentWeight(i));\n      }\n    }\n\n    // three levels of shift scale combined into one\n    // for performance in the fragment shader\n    for (let i = 0; i < numComp; i++) {\n      const target = useIndependentComps ? i : 0;\n      const sscale = volInfo.scale[i];\n      const ofun = vprop.getScalarOpacity(target);\n      const oRange = ofun.getRange();\n      const oscale = sscale / (oRange[1] - oRange[0]);\n      const oshift = (volInfo.offset[i] - oRange[0]) / (oRange[1] - oRange[0]);\n      program.setUniformf(`oshift${i}`, oshift);\n      program.setUniformf(`oscale${i}`, oscale);\n      const cfun = vprop.getRGBTransferFunction(target);\n      const cRange = cfun.getRange();\n      const cshift = (volInfo.offset[i] - cRange[0]) / (cRange[1] - cRange[0]);\n      const cScale = sscale / (cRange[1] - cRange[0]);\n      program.setUniformf(`cshift${i}`, cshift);\n      program.setUniformf(`cscale${i}`, cScale);\n    }\n    if (model.gopacity) {\n      if (useIndependentComps) {\n        for (let nc = 0; nc < numComp; ++nc) {\n          const sscale = volInfo.scale[nc];\n          const useGO = vprop.getUseGradientOpacity(nc);\n          if (useGO) {\n            const gomin = vprop.getGradientOpacityMinimumOpacity(nc);\n            const gomax = vprop.getGradientOpacityMaximumOpacity(nc);\n            program.setUniformf(`gomin${nc}`, gomin);\n            program.setUniformf(`gomax${nc}`, gomax);\n            const goRange = [vprop.getGradientOpacityMinimumValue(nc), vprop.getGradientOpacityMaximumValue(nc)];\n            program.setUniformf(`goscale${nc}`, sscale * (gomax - gomin) / (goRange[1] - goRange[0]));\n            program.setUniformf(`goshift${nc}`, -goRange[0] * (gomax - gomin) / (goRange[1] - goRange[0]) + gomin);\n          } else {\n            program.setUniformf(`gomin${nc}`, 1.0);\n            program.setUniformf(`gomax${nc}`, 1.0);\n            program.setUniformf(`goscale${nc}`, 0.0);\n            program.setUniformf(`goshift${nc}`, 1.0);\n          }\n        }\n      } else {\n        const sscale = volInfo.scale[numComp - 1];\n        const gomin = vprop.getGradientOpacityMinimumOpacity(0);\n        const gomax = vprop.getGradientOpacityMaximumOpacity(0);\n        program.setUniformf('gomin0', gomin);\n        program.setUniformf('gomax0', gomax);\n        const goRange = [vprop.getGradientOpacityMinimumValue(0), vprop.getGradientOpacityMaximumValue(0)];\n        program.setUniformf('goscale0', sscale * (gomax - gomin) / (goRange[1] - goRange[0]));\n        program.setUniformf('goshift0', -goRange[0] * (gomax - gomin) / (goRange[1] - goRange[0]) + gomin);\n      }\n    }\n    const vtkImageLabelOutline = publicAPI.isLabelmapOutlineRequired(actor);\n    if (vtkImageLabelOutline === true) {\n      const labelOutlineOpacity = actor.getProperty().getLabelOutlineOpacity();\n      program.setUniformf('outlineOpacity', labelOutlineOpacity);\n    }\n    if (model.lightComplexity > 0) {\n      program.setUniformf('vAmbient', vprop.getAmbient());\n      program.setUniformf('vDiffuse', vprop.getDiffuse());\n      program.setUniformf('vSpecular', vprop.getSpecular());\n      program.setUniformf('vSpecularPower', vprop.getSpecularPower());\n    }\n  };\n  publicAPI.getClippingPlaneShaderParameters = (cellBO, ren, actor) => {\n    if (model.renderable.getClippingPlanes().length > 0) {\n      const keyMats = model.openGLCamera.getKeyMatrices(ren);\n      const clipPlaneNormals = [];\n      const clipPlaneDistances = [];\n      const clipPlaneOrigins = [];\n      const clipPlanes = model.renderable.getClippingPlanes();\n      const clipPlaneSize = clipPlanes.length;\n      for (let i = 0; i < clipPlaneSize; ++i) {\n        const clipPlaneNormal = clipPlanes[i].getNormal();\n        const clipPlanePos = clipPlanes[i].getOrigin();\n        vec3.transformMat3(clipPlaneNormal, clipPlaneNormal, keyMats.normalMatrix);\n        vec3.transformMat4(clipPlanePos, clipPlanePos, keyMats.wcvc);\n        const clipPlaneDist = -1.0 * vec3.dot(clipPlanePos, clipPlaneNormal);\n        clipPlaneNormals.push(clipPlaneNormal[0]);\n        clipPlaneNormals.push(clipPlaneNormal[1]);\n        clipPlaneNormals.push(clipPlaneNormal[2]);\n        clipPlaneDistances.push(clipPlaneDist);\n        clipPlaneOrigins.push(clipPlanePos[0]);\n        clipPlaneOrigins.push(clipPlanePos[1]);\n        clipPlaneOrigins.push(clipPlanePos[2]);\n      }\n      const program = cellBO.getProgram();\n      program.setUniform3fv(`vClipPlaneNormals`, clipPlaneNormals);\n      program.setUniformfv(`vClipPlaneDistances`, clipPlaneDistances);\n      program.setUniform3fv(`vClipPlaneOrigins`, clipPlaneOrigins);\n      program.setUniformi(`clip_numPlanes`, clipPlaneSize);\n    }\n  };\n\n  // unsubscribe from our listeners\n  publicAPI.delete = chain(() => {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n      model._animationRateSubscription = null;\n    }\n  }, () => {\n    if (model._openGLRenderWindow) {\n      unregisterGraphicsResources(model._openGLRenderWindow);\n    }\n  }, publicAPI.delete);\n  publicAPI.getRenderTargetSize = () => {\n    if (model._useSmallViewport) {\n      return [model._smallViewportWidth, model._smallViewportHeight];\n    }\n    const {\n      usize,\n      vsize\n    } = model._openGLRenderer.getTiledSizeAndOrigin();\n    return [usize, vsize];\n  };\n  publicAPI.getRenderTargetOffset = () => {\n    const {\n      lowerLeftU,\n      lowerLeftV\n    } = model._openGLRenderer.getTiledSizeAndOrigin();\n    return [lowerLeftU, lowerLeftV];\n  };\n  publicAPI.getCurrentSampleDistance = ren => {\n    const rwi = ren.getVTKWindow().getInteractor();\n    const baseSampleDistance = model.renderable.getSampleDistance();\n    if (rwi.isAnimating()) {\n      const factor = model.renderable.getInteractionSampleDistanceFactor();\n      return baseSampleDistance * factor;\n    }\n    return baseSampleDistance;\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    const rwi = ren.getVTKWindow().getInteractor();\n    if (!model._lastScale) {\n      model._lastScale = model.renderable.getInitialInteractionScale();\n    }\n    model._useSmallViewport = false;\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(() => {\n        if (model.renderable.getAutoAdjustSampleDistances()) {\n          const frate = rwi.getRecentAnimationFrameRate();\n          const adjustment = rwi.getDesiredUpdateRate() / frate;\n\n          // only change if we are off by 15%\n          if (adjustment > 1.15 || adjustment < 0.85) {\n            model._lastScale *= adjustment;\n          }\n          // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n          if (model._lastScale < 1.5) {\n            model._lastScale = 1.5;\n          }\n        } else {\n          model._lastScale = model.renderable.getImageSampleDistance() * model.renderable.getImageSampleDistance();\n        }\n      });\n    }\n\n    // use/create/resize framebuffer if needed\n    if (model._useSmallViewport) {\n      const size = model._openGLRenderWindow.getFramebufferSize();\n      const scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * size[0]);\n      model._smallViewportHeight = Math.ceil(scaleFactor * size[1]);\n\n      // adjust viewportSize to always be at most the dest fo size\n      if (model._smallViewportHeight > size[1]) {\n        model._smallViewportHeight = size[1];\n      }\n      if (model._smallViewportWidth > size[0]) {\n        model._smallViewportWidth = size[0];\n      }\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      if (model.framebuffer.getGLFramebuffer() === null) {\n        model.framebuffer.create(size[0], size[1]);\n        model.framebuffer.populateFramebuffer();\n      } else {\n        const fbSize = model.framebuffer.getSize();\n        if (!fbSize || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n          model.framebuffer.create(size[0], size[1]);\n          model.framebuffer.populateFramebuffer();\n        }\n      }\n      model.framebuffer.bind();\n      const gl = model.context;\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\n      gl.colorMask(true, true, true, true);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.viewport(0, 0, model._smallViewportWidth, model._smallViewportHeight);\n      model.fvp = [model._smallViewportWidth / size[0], model._smallViewportHeight / size[1]];\n    }\n    model.context.disable(model.context.DEPTH_TEST);\n\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n\n    // set interpolation on the texture based on property setting\n    const iType = actor.getProperty().getInterpolationType();\n    if (iType === InterpolationType.NEAREST) {\n      model.scalarTexture.setMinificationFilter(Filter.NEAREST);\n      model.scalarTexture.setMagnificationFilter(Filter.NEAREST);\n    } else {\n      model.scalarTexture.setMinificationFilter(Filter.LINEAR);\n      model.scalarTexture.setMagnificationFilter(Filter.LINEAR);\n    }\n\n    // if we have a zbuffer texture then activate it\n    if (model.zBufferTexture !== null) {\n      model.zBufferTexture.activate();\n    }\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const gl = model.context;\n\n    // render the texture\n    model.scalarTexture.activate();\n    model.opacityTexture.activate();\n    model.labelOutlineThicknessTexture.activate();\n    model.colorTexture.activate();\n    model.jitterTexture.activate();\n    publicAPI.updateShaders(model.tris, ren, actor);\n\n    // First we do the triangles, update the shader, set uniforms, etc.\n    // for (let i = 0; i < 11; ++i) {\n    //   gl.drawArrays(gl.TRIANGLES, 66 * i, 66);\n    // }\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    model.tris.getVAO().release();\n    model.scalarTexture.deactivate();\n    model.colorTexture.deactivate();\n    model.opacityTexture.deactivate();\n    model.labelOutlineThicknessTexture.deactivate();\n    model.jitterTexture.deactivate();\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {\n    // if we have a zbuffer texture then deactivate it\n    if (model.zBufferTexture !== null) {\n      model.zBufferTexture.deactivate();\n    }\n    if (model._useSmallViewport) {\n      // now copy the framebuffer with the volume into the\n      // regular buffer\n      model.framebuffer.restorePreviousBindingsAndBuffers();\n      if (model.copyShader === null) {\n        model.copyShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'uniform vec2 tfactor;', 'varying vec2 tcoord;', 'void main() { tcoord = vec2(vertexDC.x*0.5 + 0.5, vertexDC.y*0.5 + 0.5) * tfactor; gl_Position = vertexDC; }'].join('\\n'), ['//VTK::System::Dec', '//VTK::Output::Dec', 'uniform sampler2D texture1;', 'varying vec2 tcoord;', 'void main() { gl_FragData[0] = texture2D(texture1,tcoord); }'].join('\\n'), '');\n        const program = model.copyShader;\n        model.copyVAO = vtkVertexArrayObject.newInstance();\n        model.copyVAO.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.tris.getCABO().bind();\n        if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n        }\n      } else {\n        model._openGLRenderWindow.getShaderCache().readyShaderProgram(model.copyShader);\n      }\n      const size = model._openGLRenderWindow.getFramebufferSize();\n      model.context.viewport(0, 0, size[0], size[1]);\n\n      // activate texture\n      const tex = model.framebuffer.getColorTexture();\n      tex.activate();\n      model.copyShader.setUniformi('texture', tex.getTextureUnit());\n      model.copyShader.setUniform2f('tfactor', model.fvp[0], model.fvp[1]);\n      const gl = model.context;\n      gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n      // render quad\n      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      tex.deactivate();\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n    model.renderable.update();\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.computeBounds = (ren, actor) => {\n    if (!publicAPI.getInput()) {\n      uninitializeBounds(model.Bounds);\n      return;\n    }\n    model.bounds = publicAPI.getInput().getBounds();\n  };\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    // first do a coarse check\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime() || !model.scalarTexture?.getHandle() || !model.colorTexture?.getHandle() || !model.labelOutlineThicknessTexture?.getHandle()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const image = model.currentInput;\n    if (!image) {\n      return;\n    }\n    const scalars = image.getPointData() && image.getPointData().getScalars();\n    if (!scalars) {\n      return;\n    }\n    const vprop = actor.getProperty();\n    if (!model.jitterTexture.getHandle()) {\n      const oTable = new Uint8Array(32 * 32);\n      for (let i = 0; i < 32 * 32; ++i) {\n        oTable[i] = 255.0 * Math.random();\n      }\n      model.jitterTexture.setMinificationFilter(Filter.LINEAR);\n      model.jitterTexture.setMagnificationFilter(Filter.LINEAR);\n      model.jitterTexture.create2DFromRaw(32, 32, 1, VtkDataTypes.UNSIGNED_CHAR, oTable);\n    }\n    const numComp = scalars.getNumberOfComponents();\n    const useIndependentComps = publicAPI.useIndependentComponents(vprop);\n    const numIComps = useIndependentComps ? numComp : 1;\n    const scalarOpacityFunc = vprop.getScalarOpacity();\n    const opTex = model._openGLRenderWindow.getGraphicsResourceForObject(scalarOpacityFunc);\n    let toString = getTransferFunctionHash(scalarOpacityFunc, useIndependentComps, numIComps);\n    const reBuildOp = !opTex?.oglObject || opTex.hash !== toString;\n    if (reBuildOp) {\n      model.opacityTexture = vtkOpenGLTexture.newInstance();\n      model.opacityTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      // rebuild opacity tfun?\n      const oWidth = 1024;\n      const oSize = oWidth * 2 * numIComps;\n      const ofTable = new Float32Array(oSize);\n      const tmpTable = new Float32Array(oWidth);\n      for (let c = 0; c < numIComps; ++c) {\n        const ofun = vprop.getScalarOpacity(c);\n        const opacityFactor = publicAPI.getCurrentSampleDistance(ren) / vprop.getScalarOpacityUnitDistance(c);\n        const oRange = ofun.getRange();\n        ofun.getTable(oRange[0], oRange[1], oWidth, tmpTable, 1);\n        // adjust for sample distance etc\n        for (let i = 0; i < oWidth; ++i) {\n          ofTable[c * oWidth * 2 + i] = 1.0 - (1.0 - tmpTable[i]) ** opacityFactor;\n          ofTable[c * oWidth * 2 + i + oWidth] = ofTable[c * oWidth * 2 + i];\n        }\n      }\n      model.opacityTexture.resetFormatAndType();\n      model.opacityTexture.setMinificationFilter(Filter.LINEAR);\n      model.opacityTexture.setMagnificationFilter(Filter.LINEAR);\n\n      // use float texture where possible because we really need the resolution\n      // for this table. Errors in low values of opacity accumulate to\n      // visible artifacts. High values of opacity quickly terminate without\n      // artifacts.\n      if (model._openGLRenderWindow.getWebgl2() || model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.FLOAT, ofTable);\n      } else {\n        const oTable = new Uint8ClampedArray(oSize);\n        for (let i = 0; i < oSize; ++i) {\n          oTable[i] = 255.0 * ofTable[i];\n        }\n        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.UNSIGNED_CHAR, oTable);\n      }\n      if (scalarOpacityFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(scalarOpacityFunc, model.opacityTexture, toString);\n        if (scalarOpacityFunc !== model._scalarOpacityFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(scalarOpacityFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._scalarOpacityFunc, publicAPI);\n        }\n        model._scalarOpacityFunc = scalarOpacityFunc;\n      }\n    } else {\n      model.opacityTexture = opTex.oglObject;\n    }\n\n    // rebuild color tfun?\n    const colorTransferFunc = vprop.getRGBTransferFunction();\n    toString = getTransferFunctionHash(colorTransferFunc, useIndependentComps, numIComps);\n    const cTex = model._openGLRenderWindow.getGraphicsResourceForObject(colorTransferFunc);\n    const reBuildC = !cTex?.oglObject?.getHandle() || cTex?.hash !== toString;\n    if (reBuildC) {\n      model.colorTexture = vtkOpenGLTexture.newInstance();\n      model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      const cWidth = 1024;\n      const cSize = cWidth * 2 * numIComps * 3;\n      const cTable = new Uint8ClampedArray(cSize);\n      const tmpTable = new Float32Array(cWidth * 3);\n      for (let c = 0; c < numIComps; ++c) {\n        const cfun = vprop.getRGBTransferFunction(c);\n        const cRange = cfun.getRange();\n        cfun.getTable(cRange[0], cRange[1], cWidth, tmpTable, 1);\n        for (let i = 0; i < cWidth * 3; ++i) {\n          cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];\n          cTable[c * cWidth * 6 + i + cWidth * 3] = 255.0 * tmpTable[i];\n        }\n      }\n      model.colorTexture.resetFormatAndType();\n      model.colorTexture.setMinificationFilter(Filter.LINEAR);\n      model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n      model.colorTexture.create2DFromRaw(cWidth, 2 * numIComps, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      if (colorTransferFunc) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(colorTransferFunc, model.colorTexture, toString);\n        if (colorTransferFunc !== model._colorTransferFunc) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(colorTransferFunc, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._colorTransferFunc, publicAPI);\n        }\n        model._colorTransferFunc = colorTransferFunc;\n      }\n    } else {\n      model.colorTexture = cTex.oglObject;\n    }\n    publicAPI.updateLabelOutlineThicknessTexture(actor);\n    const tex = model._openGLRenderWindow.getGraphicsResourceForObject(scalars);\n    // rebuild the scalarTexture if the data has changed\n    toString = getImageDataHash(image, scalars);\n    const reBuildTex = !tex?.oglObject?.getHandle() || tex?.hash !== toString;\n    const updatedExtents = model.renderable.getUpdatedExtents();\n    const hasUpdatedExtents = !!updatedExtents.length;\n    if (reBuildTex && !hasUpdatedExtents) {\n      model.scalarTexture = vtkOpenGLTexture.newInstance();\n      model.scalarTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      // Build the textures\n      const dims = image.getDimensions();\n      // Use norm16 for scalar texture if the extension is available\n      model.scalarTexture.setOglNorm16Ext(model.context.getExtension('EXT_texture_norm16'));\n      model.scalarTexture.resetFormatAndType();\n      model.scalarTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars);\n      if (scalars) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(scalars, model.scalarTexture, toString);\n        if (scalars !== model._scalars) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(scalars, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._scalars, publicAPI);\n        }\n        model._scalars = scalars;\n      }\n    } else {\n      model.scalarTexture = tex.oglObject;\n    }\n    if (hasUpdatedExtents) {\n      // If hasUpdatedExtents, then the texture is partially updated.\n      // clear the array to acknowledge the update.\n      model.renderable.setUpdatedExtents([]);\n      const dims = image.getDimensions();\n      model.scalarTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, false, updatedExtents);\n    }\n    if (!model.tris.getCABO().getElementCount()) {\n      // build the CABO\n      const ptsArray = new Float32Array(12);\n      for (let i = 0; i < 4; i++) {\n        ptsArray[i * 3] = i % 2 * 2 - 1.0;\n        ptsArray[i * 3 + 1] = i > 1 ? 1.0 : -1.0;\n        ptsArray[i * 3 + 2] = -1.0;\n      }\n      const cellArray = new Uint16Array(8);\n      cellArray[0] = 3;\n      cellArray[1] = 0;\n      cellArray[2] = 1;\n      cellArray[3] = 3;\n      cellArray[4] = 3;\n      cellArray[5] = 0;\n      cellArray[6] = 3;\n      cellArray[7] = 2;\n\n      // const dim = 12.0;\n      // const ptsArray = new Float32Array(3 * dim * dim);\n      // for (let i = 0; i < dim; i++) {\n      //   for (let j = 0; j < dim; j++) {\n      //     const offset = ((i * dim) + j) * 3;\n      //     ptsArray[offset] = (2.0 * (i / (dim - 1.0))) - 1.0;\n      //     ptsArray[offset + 1] = (2.0 * (j / (dim - 1.0))) - 1.0;\n      //     ptsArray[offset + 2] = -1.0;\n      //   }\n      // }\n\n      // const cellArray = new Uint16Array(8 * (dim - 1) * (dim - 1));\n      // for (let i = 0; i < dim - 1; i++) {\n      //   for (let j = 0; j < dim - 1; j++) {\n      //     const offset = 8 * ((i * (dim - 1)) + j);\n      //     cellArray[offset] = 3;\n      //     cellArray[offset + 1] = (i * dim) + j;\n      //     cellArray[offset + 2] = (i * dim) + 1 + j;\n      //     cellArray[offset + 3] = ((i + 1) * dim) + 1 + j;\n      //     cellArray[offset + 4] = 3;\n      //     cellArray[offset + 5] = (i * dim) + j;\n      //     cellArray[offset + 6] = ((i + 1) * dim) + 1 + j;\n      //     cellArray[offset + 7] = ((i + 1) * dim) + j;\n      //   }\n      // }\n\n      const points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n      const cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points,\n        cellOffset: 0\n      });\n    }\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.updateLabelOutlineThicknessTexture = volume => {\n    const labelOutlineThicknessArray = volume.getProperty().getLabelOutlineThickness();\n    const lTex = model._openGLRenderWindow.getGraphicsResourceForObject(labelOutlineThicknessArray);\n\n    // compute the join of the labelOutlineThicknessArray so that\n    // we can use it to decide whether to rebuild the labelOutlineThicknessTexture\n    // or not\n    const toString = `${labelOutlineThicknessArray.join('-')}`;\n    const reBuildL = !lTex?.oglObject?.getHandle() || lTex?.hash !== toString;\n    if (reBuildL) {\n      model.labelOutlineThicknessTexture = vtkOpenGLTexture.newInstance();\n      model.labelOutlineThicknessTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      const lWidth = 1024;\n      const lHeight = 1;\n      const lSize = lWidth * lHeight;\n      const lTable = new Uint8Array(lSize);\n\n      // Assuming labelOutlineThicknessArray contains the thickness for each segment\n      for (let i = 0; i < lWidth; ++i) {\n        // Retrieve the thickness value for the current segment index.\n        // If the value is undefined, use the first element's value as a default, otherwise use the value (even if 0)\n        const thickness = typeof labelOutlineThicknessArray[i] !== 'undefined' ? labelOutlineThicknessArray[i] : labelOutlineThicknessArray[0];\n        lTable[i] = thickness;\n      }\n      model.labelOutlineThicknessTexture.resetFormatAndType();\n      model.labelOutlineThicknessTexture.setMinificationFilter(Filter.NEAREST);\n      model.labelOutlineThicknessTexture.setMagnificationFilter(Filter.NEAREST);\n\n      // Create a 2D texture (acting as 1D) from the raw data\n      model.labelOutlineThicknessTexture.create2DFromRaw(lWidth, lHeight, 1, VtkDataTypes.UNSIGNED_CHAR, lTable);\n      if (labelOutlineThicknessArray) {\n        model._openGLRenderWindow.setGraphicsResourceForObject(labelOutlineThicknessArray, model.labelOutlineThicknessTexture, toString);\n        if (labelOutlineThicknessArray !== model._labelOutlineThicknessArray) {\n          model._openGLRenderWindow.registerGraphicsResourceUser(labelOutlineThicknessArray, publicAPI);\n          model._openGLRenderWindow.unregisterGraphicsResourceUser(model._labelOutlineThicknessArray, publicAPI);\n        }\n        model._labelOutlineThicknessArray = labelOutlineThicknessArray;\n      }\n    } else {\n      model.labelOutlineThicknessTexture = lTex.oglObject;\n    }\n  };\n  publicAPI.isLabelmapOutlineRequired = actor => {\n    const prop = actor.getProperty();\n    const renderable = model.renderable;\n    return prop.getUseLabelOutline() || renderable.getBlendMode() === BlendMode.LABELMAP_EDGE_PROJECTION_BLEND;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: null,\n  scalarTexture: null,\n  opacityTexture: null,\n  opacityTextureString: null,\n  colorTexture: null,\n  colorTextureString: null,\n  jitterTexture: null,\n  labelOutlineThicknessTexture: null,\n  labelOutlineThicknessTextureString: null,\n  tris: null,\n  framebuffer: null,\n  copyShader: null,\n  copyVAO: null,\n  lastXYF: 1.0,\n  targetXYF: 1.0,\n  zBufferTexture: null,\n  lastZBufferTexture: null,\n  lightComplexity: 0,\n  fullViewportTime: 1.0,\n  idxToView: null,\n  idxNormalMatrix: null,\n  modelToView: null,\n  projectionToView: null,\n  avgWindowArea: 0.0,\n  avgFrameTime: 0.0\n  // _scalars: null,\n  // _scalarOpacityFunc: null,\n  // _colorTransferFunc: null,\n  // _labelOutlineThicknessArray: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  model.jitterTexture = vtkOpenGLTexture.newInstance();\n  model.jitterTexture.setWrapS(Wrap.REPEAT);\n  model.jitterTexture.setWrapT(Wrap.REPEAT);\n  model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n  model.idxToView = mat4.identity(new Float64Array(16));\n  model.idxNormalMatrix = mat3.identity(new Float64Array(9));\n  model.modelToView = mat4.identity(new Float64Array(16));\n  model.projectionToView = mat4.identity(new Float64Array(16));\n  model.projectionToWorld = mat4.identity(new Float64Array(16));\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLVolumeMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLVolumeMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolumeMapper = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkVolumeMapper', newInstance);\n\nexport { vtkVolumeMapper as default, extend, newInstance };\n","var vtkImageResliceMapperFS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkImageResliceMapperFS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n// Template for the gpu image mapper fragment shader\\n\\n// VC position of this fragment\\n//VTK::PositionVC::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\n// handle coincident offsets\\n//VTK::Coincident::Dec\\n\\n//VTK::ZBuffer::Dec\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\nvoid main()\\n{\\n  // VC position of this fragment. This should not branch/return/discard.\\n  //VTK::PositionVC::Impl\\n\\n  // Place any calls that require uniform flow (e.g. dFdx) here.\\n  //VTK::UniformFlow::Impl\\n\\n  // Set gl_FragDepth here (gl_FragCoord.z by default)\\n  //VTK::Depth::Impl\\n\\n  // Early depth peeling abort:\\n  //VTK::DepthPeeling::PreColor\\n\\n  //VTK::TCoord::Impl\\n\\n  if (gl_FragData[0].a <= 0.0)\\n    {\\n    discard;\\n    }\\n\\n  //VTK::DepthPeeling::Impl\\n\\n  //VTK::Picking::Impl\\n\\n  // handle coincident offsets\\n  //VTK::Coincident::Impl\\n\\n  //VTK::ZBuffer::Impl\\n\\n  //VTK::RenderPassFragmentShader::Impl\\n}\\n\";\n\nexport { vtkImageResliceMapperFS as v };\n","var vtkImageResliceMapperVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkImageResliceMapperVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\n// all variables that represent positions or directions have a suffix\\n// indicating the coordinate system they are in. The possible values are\\n// MC - Model coordinates\\n// WC - World coordinates\\n// VC - View coordinates\\n// DC - Display coordinates\\n// TC - Texture coordinates\\n\\n// frag position in VC\\n//VTK::PositionVC::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\n// camera and actor matrix values\\n//VTK::Camera::Dec\\n\\nvoid main()\\n{\\n  //VTK::PositionVC::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Picking::Impl\\n}\\n\";\n\nexport { vtkImageResliceMapperVS as v };\n","var vtkPolyData2DFS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyData2DFS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\nuniform int PrimitiveIDOffset;\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// Scalar coloring\\n//VTK::Color::Dec\\n\\n// Depth Peeling\\n//VTK::DepthPeeling::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\nvoid main()\\n{\\n  // Apple Bug\\n  //VTK::PrimID::Impl\\n\\n  //VTK::Color::Impl\\n  //VTK::TCoord::Impl\\n\\n  //VTK::DepthPeeling::Impl\\n  //VTK::Picking::Impl\\n\\n  if (gl_FragData[0].a <= 0.0)\\n    {\\n    discard;\\n    }\\n}\\n\";\n\nexport { vtkPolyData2DFS as v };\n","var vtkPolyData2DVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyData2DVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\n// all variables that represent positions or directions have a suffix\\n// indicating the coordinate system they are in. The possible values are\\n// MC - Model Coordinates\\n// WC - WC world coordinates\\n// VC - View Coordinates\\n// DC - Display Coordinates\\n\\nin vec4 vertexWC;\\n\\n// frag position in VC\\n//VTK::PositionVC::Dec\\n\\n// material property values\\n//VTK::Color::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\nuniform mat4 WCVCMatrix;  // World to view matrix\\n\\nvoid main()\\n{\\n  // Apple Bug\\n  //VTK::PrimID::Impl\\n\\n  gl_Position = WCVCMatrix*vertexWC;\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Color::Impl\\n\\n  //VTK::PositionVC::Impl\\n}\\n\";\n\nexport { vtkPolyData2DVS as v };\n","var vtkPolyDataFS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyDataFS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n// Template for the polydata mappers fragment shader\\n\\nuniform int PrimitiveIDOffset;\\n\\n// VC position of this fragment\\n//VTK::PositionVC::Dec\\n\\n// optional color passed in from the vertex shader, vertexColor\\n//VTK::Color::Dec\\n\\n// optional surface normal declaration\\n//VTK::Normal::Dec\\n\\n// extra lighting parameters\\n//VTK::Light::Dec\\n\\n// define vtkImageLabelOutlineOn\\n//VTK::ImageLabelOutlineOn\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\n// Depth Peeling Support\\n//VTK::DepthPeeling::Dec\\n\\n// clipping plane vars\\n//VTK::Clip::Dec\\n\\n// label outline \\n//VTK::LabelOutline::Dec\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\n// handle coincident offsets\\n//VTK::Coincident::Dec\\n\\n//VTK::ZBuffer::Dec\\n\\n//VTK::LabelOutlineHelperFunction\\n\\nvoid main()\\n{\\n  // VC position of this fragment. This should not branch/return/discard.\\n  //VTK::PositionVC::Impl\\n\\n  // Place any calls that require uniform flow (e.g. dFdx) here.\\n  //VTK::UniformFlow::Impl\\n\\n  // Set gl_FragDepth here (gl_FragCoord.z by default)\\n  //VTK::Depth::Impl\\n\\n  // Early depth peeling abort:\\n  //VTK::DepthPeeling::PreColor\\n\\n  // Apple Bug\\n  //VTK::PrimID::Impl\\n\\n  //VTK::Clip::Impl\\n\\n  //VTK::Color::Impl\\n\\n  // Generate the normal if we are not passed in one\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Light::Impl\\n\\n  if (gl_FragData[0].a <= 0.0)\\n    {\\n    discard;\\n    }\\n\\n  //VTK::DepthPeeling::Impl\\n\\n  //VTK::Picking::Impl\\n\\n  // handle coincident offsets\\n  //VTK::Coincident::Impl\\n\\n  //VTK::ZBuffer::Impl\\n\\n  //VTK::RenderPassFragmentShader::Impl\\n}\\n\";\n\nexport { vtkPolyDataFS as v };\n","var vtkPolyDataVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyDataVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\nattribute vec4 vertexMC;\\n\\n// frag position in VC\\n//VTK::PositionVC::Dec\\n\\n// optional normal declaration\\n//VTK::Normal::Dec\\n\\n// extra lighting parameters\\n//VTK::Light::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// material property values\\n//VTK::Color::Dec\\n\\n// clipping plane vars\\n//VTK::Clip::Dec\\n\\n// camera and actor matrix values\\n//VTK::Camera::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\nvoid main()\\n{\\n  //VTK::Color::Impl\\n\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Clip::Impl\\n\\n  //VTK::PrimID::Impl\\n\\n  //VTK::PositionVC::Impl\\n\\n  //VTK::Light::Impl\\n\\n  //VTK::Picking::Impl\\n}\\n\";\n\nexport { vtkPolyDataVS as v };\n","var vtkSphereMapperVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkSphereMapperVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n// this shader implements imposters in OpenGL for Spheres\\n\\nattribute vec4 vertexMC;\\nattribute vec2 offsetMC;\\n\\n// optional normal declaration\\n//VTK::Normal::Dec\\n\\n//VTK::Picking::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\nuniform mat3 normalMatrix; // transform model coordinate directions to view coordinates\\n\\n// material property values\\n//VTK::Color::Dec\\n\\n// clipping plane vars\\n//VTK::Clip::Dec\\n\\n// camera and actor matrix values\\n//VTK::Camera::Dec\\n\\nvarying vec4 vertexVCVSOutput;\\nvarying float radiusVCVSOutput;\\nvarying vec3 centerVCVSOutput;\\n\\nuniform int cameraParallel;\\nuniform float scaleFactor;\\n\\nvoid main()\\n{\\n  //VTK::Picking::Impl\\n\\n  //VTK::Color::Impl\\n\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Clip::Impl\\n\\n  // compute the projected vertex position\\n  vec2 scaledOffsetMC = scaleFactor * offsetMC;\\n  vertexVCVSOutput = MCVCMatrix * vertexMC;\\n  centerVCVSOutput = vertexVCVSOutput.xyz;\\n  radiusVCVSOutput = length(scaledOffsetMC)*0.5;\\n\\n  // make the triangle face the camera\\n  if (cameraParallel == 0)\\n    {\\n    vec3 dir = normalize(-vertexVCVSOutput.xyz);\\n    vec3 base2 = normalize(cross(dir,vec3(1.0,0.0,0.0)));\\n    vec3 base1 = cross(base2,dir);\\n    vertexVCVSOutput.xyz = vertexVCVSOutput.xyz + scaledOffsetMC.x*base1 + scaledOffsetMC.y*base2;\\n    }\\n  else\\n    {\\n    // add in the offset\\n    vertexVCVSOutput.xy = vertexVCVSOutput.xy + scaledOffsetMC;\\n    }\\n\\n  gl_Position = VCPCMatrix * vertexVCVSOutput;\\n}\\n\";\n\nexport { vtkSphereMapperVS as v };\n","var vtkStickMapperVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkStickMapperVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n// this shader implements imposters in OpenGL for Sticks\\n\\nattribute vec4 vertexMC;\\nattribute vec3 orientMC;\\nattribute vec4 offsetMC;\\nattribute float radiusMC;\\n\\n// optional normal declaration\\n//VTK::Normal::Dec\\n\\n//VTK::Picking::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\nuniform mat3 normalMatrix; // transform model coordinate directions to view coordinates\\n\\n// material property values\\n//VTK::Color::Dec\\n\\n// clipping plane vars\\n//VTK::Clip::Dec\\n\\n// camera and actor matrix values\\n//VTK::Camera::Dec\\n\\nvarying vec4 vertexVCVSOutput;\\nvarying float radiusVCVSOutput;\\nvarying float lengthVCVSOutput;\\nvarying vec3 centerVCVSOutput;\\nvarying vec3 orientVCVSOutput;\\n\\nuniform int cameraParallel;\\n\\nvoid main()\\n{\\n  //VTK::Picking::Impl\\n\\n  //VTK::Color::Impl\\n\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Clip::Impl\\n\\n  vertexVCVSOutput = MCVCMatrix * vertexMC;\\n  centerVCVSOutput = vertexVCVSOutput.xyz;\\n  radiusVCVSOutput = radiusMC;\\n  lengthVCVSOutput = length(orientMC);\\n  orientVCVSOutput = normalMatrix * normalize(orientMC);\\n\\n  // make sure it is pointing out of the screen\\n  if (orientVCVSOutput.z < 0.0)\\n    {\\n    orientVCVSOutput = -orientVCVSOutput;\\n    }\\n\\n  // make the basis\\n  vec3 xbase;\\n  vec3 ybase;\\n  vec3 dir = vec3(0.0,0.0,1.0);\\n  if (cameraParallel == 0)\\n    {\\n    dir = normalize(-vertexVCVSOutput.xyz);\\n    }\\n  if (abs(dot(dir,orientVCVSOutput)) == 1.0)\\n    {\\n    xbase = normalize(cross(vec3(0.0,1.0,0.0),orientVCVSOutput));\\n    ybase = cross(xbase,orientVCVSOutput);\\n    }\\n  else\\n    {\\n    xbase = normalize(cross(orientVCVSOutput,dir));\\n    ybase = cross(orientVCVSOutput,xbase);\\n    }\\n\\n  vec3 offsets = offsetMC.xyz*2.0-1.0;\\n  vertexVCVSOutput.xyz = vertexVCVSOutput.xyz +\\n    radiusVCVSOutput*offsets.x*xbase +\\n    radiusVCVSOutput*offsets.y*ybase +\\n    0.5*lengthVCVSOutput*offsets.z*orientVCVSOutput;\\n\\n  gl_Position = VCPCMatrix * vertexVCVSOutput;\\n}\\n\";\n\nexport { vtkStickMapperVS as v };\n","var vtkVolumeFS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkVolumeFS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n// Template for the volume mappers fragment shader\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\nvarying vec3 vertexVCVSOutput;\\n\\n// first declare the settings from the mapper\\n// that impact the code paths in here\\n\\n// always set vtkNumComponents 1,2,3,4\\n//VTK::NumComponents\\n\\n// possibly define vtkTrilinearOn\\n//VTK::TrilinearOn\\n\\n// possibly define UseIndependentComponents\\n//VTK::IndependentComponentsOn\\n\\n// possibly define vtkCustomComponentsColorMix\\n//VTK::CustomComponentsColorMixOn\\n\\n// possibly define any \\\"proportional\\\" components\\n//VTK::vtkProportionalComponents\\n\\n// possibly define any components that are forced to nearest interpolation\\n//VTK::vtkForceNearestComponents\\n\\n// Define the blend mode to use\\n#define vtkBlendMode //VTK::BlendMode\\n\\n// Possibly define vtkImageLabelOutlineOn\\n//VTK::ImageLabelOutlineOn\\n\\n// Possibly define vtkLabelEdgeProjectionOn\\n//VTK::LabelEdgeProjectionOn\\n\\n\\n#ifdef vtkImageLabelOutlineOn\\n  uniform float outlineOpacity;\\n  uniform float vpWidth;\\n  uniform float vpHeight;\\n  uniform float vpOffsetX;\\n  uniform float vpOffsetY;\\n  uniform mat4 PCWCMatrix;\\n  uniform mat4 vWCtoIDX;\\n\\n  const int MAX_SEGMENT_INDEX = 256; // Define as per expected maximum\\n  // bool seenSegmentsByOriginalPos[MAX_SEGMENT_INDEX];\\n  #define MAX_SEGMENTS 256\\n  #define UINT_SIZE 32\\n  #define BITMASK_SIZE ((MAX_SEGMENTS + UINT_SIZE - 1) / UINT_SIZE)\\n\\n  uint bitmask[BITMASK_SIZE];\\n\\n  // Set the corresponding bit in the bitmask\\n  void setBit(int segmentIndex) {\\n    int index = segmentIndex / UINT_SIZE;\\n    int bitIndex = segmentIndex % UINT_SIZE;\\n    bitmask[index] |= 1u << bitIndex;\\n  }\\n\\n  // Check if a bit is set in the bitmask\\n  bool isBitSet(int segmentIndex) {\\n    int index = segmentIndex / UINT_SIZE;\\n    int bitIndex = segmentIndex % UINT_SIZE;\\n    return ((bitmask[index] & (1u << bitIndex)) != 0u);\\n  }\\n#endif\\n\\n// define vtkLightComplexity\\n//VTK::LightComplexity\\n#if vtkLightComplexity > 0\\nuniform float vSpecularPower;\\nuniform float vAmbient;\\nuniform float vDiffuse;\\nuniform float vSpecular;\\n//VTK::Light::Dec\\n#endif\\n\\n//VTK::VolumeShadowOn\\n//VTK::SurfaceShadowOn\\n//VTK::localAmbientOcclusionOn\\n//VTK::LAO::Dec\\n//VTK::VolumeShadow::Dec\\n\\n// define vtkComputeNormalFromOpacity\\n//VTK::vtkComputeNormalFromOpacity\\n\\n// possibly define vtkGradientOpacityOn\\n//VTK::GradientOpacityOn\\n#ifdef vtkGradientOpacityOn\\nuniform float goscale0;\\nuniform float goshift0;\\nuniform float gomin0;\\nuniform float gomax0;\\n#ifdef UseIndependentComponents\\n#if vtkNumComponents > 1\\nuniform float goscale1;\\nuniform float goshift1;\\nuniform float gomin1;\\nuniform float gomax1;\\n#if vtkNumComponents > 2\\nuniform float goscale2;\\nuniform float goshift2;\\nuniform float gomin2;\\nuniform float gomax2;\\n#if vtkNumComponents > 3\\nuniform float goscale3;\\nuniform float goshift3;\\nuniform float gomin3;\\nuniform float gomax3;\\n#endif\\n#endif\\n#endif\\n#endif\\n#endif\\n\\n// if you want to see the raw tiled\\n// data in webgl1 uncomment the following line\\n// #define debugtile\\n\\n// camera values\\nuniform float camThick;\\nuniform float camNear;\\nuniform float camFar;\\nuniform int cameraParallel;\\n\\n// values describing the volume geometry\\nuniform vec3 vOriginVC;\\nuniform vec3 vSpacing;\\nuniform ivec3 volumeDimensions; // 3d texture dimensions\\nuniform vec3 vPlaneNormal0;\\nuniform float vPlaneDistance0;\\nuniform vec3 vPlaneNormal1;\\nuniform float vPlaneDistance1;\\nuniform vec3 vPlaneNormal2;\\nuniform float vPlaneDistance2;\\nuniform vec3 vPlaneNormal3;\\nuniform float vPlaneDistance3;\\nuniform vec3 vPlaneNormal4;\\nuniform float vPlaneDistance4;\\nuniform vec3 vPlaneNormal5;\\nuniform float vPlaneDistance5;\\n\\n//VTK::ClipPlane::Dec\\n\\n// opacity and color textures\\nuniform sampler2D otexture;\\nuniform float oshift0;\\nuniform float oscale0;\\nuniform sampler2D ctexture;\\nuniform float cshift0;\\nuniform float cscale0;\\n\\n#if vtkNumComponents >= 2\\nuniform float oshift1;\\nuniform float oscale1;\\nuniform float cshift1;\\nuniform float cscale1;\\n#endif\\n#if vtkNumComponents >= 3\\nuniform float oshift2;\\nuniform float oscale2;\\nuniform float cshift2;\\nuniform float cscale2;\\n#endif\\n#if vtkNumComponents >= 4\\nuniform float oshift3;\\nuniform float oscale3;\\nuniform float cshift3;\\nuniform float cscale3;\\n#endif\\n\\n// jitter texture\\nuniform sampler2D jtexture;\\nuniform sampler2D ttexture;\\n\\n\\n// some 3D texture values\\nuniform float sampleDistance;\\nuniform vec3 vVCToIJK;\\nuniform vec3 volumeSpacings; // spacing in the world coorindates\\n\\n\\n// the heights defined below are the locations\\n// for the up to four components of the tfuns\\n// the tfuns have a height of 2XnumComps pixels so the\\n// values are computed to hit the middle of the two rows\\n// for that component\\n#ifdef UseIndependentComponents\\n#if vtkNumComponents == 1\\nuniform float mix0;\\n#define height0 0.5\\n#endif\\n#if vtkNumComponents == 2\\nuniform float mix0;\\nuniform float mix1;\\n#define height0 0.25\\n#define height1 0.75\\n#endif\\n#if vtkNumComponents == 3\\nuniform float mix0;\\nuniform float mix1;\\nuniform float mix2;\\n#define height0 0.17\\n#define height1 0.5\\n#define height2 0.83\\n#endif\\n#if vtkNumComponents == 4\\nuniform float mix0;\\nuniform float mix1;\\nuniform float mix2;\\nuniform float mix3;\\n#define height0 0.125\\n#define height1 0.375\\n#define height2 0.625\\n#define height3 0.875\\n#endif\\n#endif\\n\\nuniform vec4 ipScalarRangeMin;\\nuniform vec4 ipScalarRangeMax;\\n\\n// declaration for intermixed geometry\\n//VTK::ZBuffer::Dec\\n\\n//=======================================================================\\n// global and custom variables (a temporary section before photorealistics rendering module is complete)\\nvec3 rayDirVC;\\nfloat sampleDistanceISVS;\\nfloat sampleDistanceIS;\\n\\n#define SQRT3    1.7321\\n#define INV4PI   0.0796\\n#define EPSILON  0.001\\n#define PI       3.1415\\n#define PI2      9.8696\\n\\n//=======================================================================\\n// Webgl2 specific version of functions\\n#if __VERSION__ == 300\\n\\nuniform highp sampler3D texture1;\\n\\nvec4 getTextureValue(vec3 pos)\\n{\\n  vec4 tmp = texture(texture1, pos);\\n\\n  #if defined(vtkComponent0ForceNearest) || \\\\\\n      defined(vtkComponent1ForceNearest) || \\\\\\n      defined(vtkComponent2ForceNearest) || \\\\\\n      defined(vtkComponent3ForceNearest)\\n    vec3 nearestPos = (floor(pos * vec3(volumeDimensions)) + 0.5) / vec3(volumeDimensions);\\n    vec4 nearestValue = texture(texture1, nearestPos);\\n    #ifdef vtkComponent0ForceNearest\\n      tmp[0] = nearestValue[0];\\n    #endif\\n    #ifdef vtkComponent1ForceNearest\\n      tmp[1] = nearestValue[1];\\n    #endif\\n    #ifdef vtkComponent2ForceNearest\\n      tmp[2] = nearestValue[2];\\n    #endif\\n    #ifdef vtkComponent3ForceNearest\\n      tmp[3] = nearestValue[3];\\n    #endif\\n  #endif\\n\\n  #ifndef UseIndependentComponents\\n    #if vtkNumComponents == 1\\n      tmp.a = tmp.r;\\n    #endif\\n    #if vtkNumComponents == 2\\n      tmp.a = tmp.g;\\n    #endif\\n    #if vtkNumComponents == 3\\n      tmp.a = length(tmp.rgb);\\n    #endif\\n  #endif\\n\\n  return tmp;\\n}\\n\\n//=======================================================================\\n// WebGL1 specific version of functions\\n#else\\n\\nuniform sampler2D texture1;\\n\\nuniform float texWidth;\\nuniform float texHeight;\\nuniform int xreps;\\nuniform int xstride;\\nuniform int ystride;\\n\\n// if computing trilinear values from multiple z slices\\n#ifdef vtkTrilinearOn\\nvec4 getTextureValue(vec3 ijk)\\n{\\n  float zoff = 1.0/float(volumeDimensions.z);\\n  vec4 val1 = getOneTextureValue(ijk);\\n  vec4 val2 = getOneTextureValue(vec3(ijk.xy, ijk.z + zoff));\\n\\n  float indexZ = float(volumeDimensions)*ijk.z;\\n  float zmix =  indexZ - floor(indexZ);\\n\\n  return mix(val1, val2, zmix);\\n}\\n\\nvec4 getOneTextureValue(vec3 ijk)\\n#else // nearest or fast linear\\nvec4 getTextureValue(vec3 ijk)\\n#endif\\n{\\n  vec3 tdims = vec3(volumeDimensions);\\n\\n#ifdef debugtile\\n  vec2 tpos = vec2(ijk.x, ijk.y);\\n  vec4 tmp = texture2D(texture1, tpos);\\n  tmp.a = 1.0;\\n\\n#else\\n  int z = int(ijk.z * tdims.z);\\n  int yz = z / xreps;\\n  int xz = z - yz*xreps;\\n\\n  int tileWidth = volumeDimensions.x/xstride;\\n  int tileHeight = volumeDimensions.y/ystride;\\n\\n  xz *= tileWidth;\\n  yz *= tileHeight;\\n\\n  float ni = float(xz) + (ijk.x*float(tileWidth));\\n  float nj = float(yz) + (ijk.y*float(tileHeight));\\n\\n  vec2 tpos = vec2(ni/texWidth, nj/texHeight);\\n\\n  vec4 tmp = texture2D(texture1, tpos);\\n\\n#if vtkNumComponents == 1\\n  tmp.a = tmp.r;\\n#endif\\n#if vtkNumComponents == 2\\n  tmp.g = tmp.a;\\n#endif\\n#if vtkNumComponents == 3\\n  tmp.a = length(tmp.rgb);\\n#endif\\n#endif\\n\\n  return tmp;\\n}\\n\\n// End of Webgl1 specific code\\n//=======================================================================\\n#endif\\n\\n//=======================================================================\\n// transformation between VC and IS space\\n\\n// convert vector position from idx to vc\\n#if (vtkLightComplexity > 0) || (defined vtkClippingPlanesOn)\\nvec3 IStoVC(vec3 posIS){\\n  vec3 posVC = posIS / vVCToIJK;\\n  return posVC.x * vPlaneNormal0 +\\n         posVC.y * vPlaneNormal2 +\\n         posVC.z * vPlaneNormal4 +\\n         vOriginVC;\\n}\\n\\n// convert vector position from vc to idx\\nvec3 VCtoIS(vec3 posVC){\\n  posVC = posVC - vOriginVC;\\n  posVC = vec3(\\n    dot(posVC, vPlaneNormal0),\\n    dot(posVC, vPlaneNormal2),\\n    dot(posVC, vPlaneNormal4));\\n  return posVC * vVCToIJK;\\n}\\n#endif\\n\\n//Rotate vector to view coordinate\\n#if (vtkLightComplexity > 0) || (defined vtkGradientOpacityOn)\\nvoid rotateToViewCoord(inout vec3 dirIS){\\n  dirIS.xyz =\\n    dirIS.x * vPlaneNormal0 +\\n    dirIS.y * vPlaneNormal2 +\\n    dirIS.z * vPlaneNormal4;\\n}\\n\\n//Rotate vector to idx coordinate\\nvec3 rotateToIDX(vec3 dirVC){\\n  vec3 dirIS;\\n  dirIS.xyz = vec3(\\n    dot(dirVC, vPlaneNormal0),\\n    dot(dirVC, vPlaneNormal2),\\n    dot(dirVC, vPlaneNormal4));\\n  return dirIS;\\n}\\n#endif\\n\\n//=======================================================================\\n// Given a normal compute the gradient opacity factors\\nfloat computeGradientOpacityFactor(\\n  float normalMag, float goscale, float goshift, float gomin, float gomax)\\n{\\n  return clamp(normalMag * goscale + goshift, gomin, gomax);\\n}\\n\\n//=======================================================================\\n// compute the normal and gradient magnitude for a position, uses forward difference\\n#if (vtkLightComplexity > 0) || (defined vtkGradientOpacityOn)\\n  #ifdef vtkClippingPlanesOn\\n    void adjustClippedVoxelValues(vec3 pos, vec3 texPos[3], inout vec3 g1)\\n    {\\n      vec3 g1VC[3];\\n      for (int i = 0; i < 3; ++i)\\n      {\\n        g1VC[i] = IStoVC(texPos[i]);\\n      }\\n      vec3 posVC = IStoVC(pos);\\n      for (int i = 0; i < clip_numPlanes; ++i)\\n      {\\n        for (int j = 0; j < 3; ++j)\\n        {\\n          if(dot(vec3(vClipPlaneOrigins[i] - g1VC[j].xyz), vClipPlaneNormals[i]) > 0.0)\\n          {\\n            g1[j] = 0.0;\\n          }\\n        }\\n      }\\n    }\\n  #endif\\n\\n  #ifdef vtkComputeNormalFromOpacity\\n    vec4 computeDensityNormal(vec3 opacityUCoords[2], float opactityTextureHeight, float gradientOpacity) {\\n      vec3 opacityG1, opacityG2;\\n      opacityG1.x = texture2D(otexture, vec2(opacityUCoords[0].x, opactityTextureHeight)).r;\\n      opacityG1.y = texture2D(otexture, vec2(opacityUCoords[0].y, opactityTextureHeight)).r;\\n      opacityG1.z = texture2D(otexture, vec2(opacityUCoords[0].z, opactityTextureHeight)).r;\\n      opacityG2.x = texture2D(otexture, vec2(opacityUCoords[1].x, opactityTextureHeight)).r;\\n      opacityG2.y = texture2D(otexture, vec2(opacityUCoords[1].y, opactityTextureHeight)).r;\\n      opacityG2.z = texture2D(otexture, vec2(opacityUCoords[1].z, opactityTextureHeight)).r;\\n      opacityG1.xyz *= gradientOpacity;\\n      opacityG2.xyz *= gradientOpacity;\\n\\n      vec4 opacityG = vec4(opacityG1 - opacityG2, 1.0f);\\n      // divide by spacing\\n      opacityG.xyz /= vSpacing;\\n      opacityG.w = length(opacityG.xyz);\\n      // rotate to View Coords\\n      rotateToViewCoord(opacityG.xyz);\\n      if (!all(equal(opacityG.xyz, vec3(0.0)))) {\\n        return vec4(normalize(opacityG.xyz),opacityG.w);\\n      } else {\\n        return vec4(0.0);\\n      }\\n    }\\n\\n    vec4 computeNormalForDensity(vec3 pos, vec3 tstep, out vec3 scalarInterp[2], const int opacityComponent)\\n    {\\n      vec3 xvec = vec3(tstep.x, 0.0, 0.0);\\n      vec3 yvec = vec3(0.0, tstep.y, 0.0);\\n      vec3 zvec = vec3(0.0, 0.0, tstep.z);\\n      vec3 texPosPVec[3];\\n      texPosPVec[0] = pos + xvec;\\n      texPosPVec[1] = pos + yvec;\\n      texPosPVec[2] = pos + zvec;\\n      vec3 texPosNVec[3];\\n      texPosNVec[0] = pos - xvec;\\n      texPosNVec[1] = pos - yvec;\\n      texPosNVec[2] = pos - zvec;\\n      vec3 g1, g2;\\n\\n      scalarInterp[0].x = getTextureValue(texPosPVec[0])[opacityComponent];\\n      scalarInterp[0].y = getTextureValue(texPosPVec[1])[opacityComponent];\\n      scalarInterp[0].z = getTextureValue(texPosPVec[2])[opacityComponent];\\n      scalarInterp[1].x = getTextureValue(texPosNVec[0])[opacityComponent];\\n      scalarInterp[1].y = getTextureValue(texPosNVec[1])[opacityComponent];\\n      scalarInterp[1].z = getTextureValue(texPosNVec[2])[opacityComponent];\\n\\n      #ifdef vtkClippingPlanesOn\\n        adjustClippedVoxelValues(pos, texPosPVec, scalarInterp[0]);\\n        adjustClippedVoxelValues(pos, texPosNVec, scalarInterp[1]);\\n      #endif\\n      vec4 result;\\n      result.x = scalarInterp[0].x - scalarInterp[1].x;\\n      result.y = scalarInterp[0].y - scalarInterp[1].y;\\n      result.z = scalarInterp[0].z - scalarInterp[1].z;\\n      // divide by spacing\\n      result.xyz /= vSpacing;\\n      result.w = length(result.xyz);\\n      // rotate to View Coords\\n      rotateToViewCoord(result.xyz);\\n      if (length(result.xyz) > 0.0) {\\n        return vec4(normalize(result.xyz),result.w);\\n      } else {\\n        return vec4(0.0);\\n      }\\n    }\\n  #endif\\n\\n  // only works with dependent components\\n  vec4 computeNormal(vec3 pos, vec3 tstep)\\n  {\\n    vec3 xvec = vec3(tstep.x, 0.0, 0.0);\\n    vec3 yvec = vec3(0.0, tstep.y, 0.0);\\n    vec3 zvec = vec3(0.0, 0.0, tstep.z);\\n    vec3 texPosPVec[3];\\n    texPosPVec[0] = pos + xvec;\\n    texPosPVec[1] = pos + yvec;\\n    texPosPVec[2] = pos + zvec;\\n    vec3 texPosNVec[3];\\n    texPosNVec[0] = pos - xvec;\\n    texPosNVec[1] = pos - yvec;\\n    texPosNVec[2] = pos - zvec;\\n    vec3 g1, g2;\\n    g1.x = getTextureValue(texPosPVec[0]).a;\\n    g1.y = getTextureValue(texPosPVec[1]).a;\\n    g1.z = getTextureValue(texPosPVec[2]).a;\\n    g2.x = getTextureValue(texPosNVec[0]).a;\\n    g2.y = getTextureValue(texPosNVec[1]).a;\\n    g2.z = getTextureValue(texPosNVec[2]).a;\\n    #ifdef vtkClippingPlanesOn\\n      adjustClippedVoxelValues(pos, texPosPVec, g1);\\n      adjustClippedVoxelValues(pos, texPosNVec, g2);\\n    #endif\\n    vec4 result;\\n    result = vec4(g1 - g2, -1.0);\\n    // divide by spacing\\n    result.xyz /= vSpacing;\\n    result.w = length(result.xyz);\\n    if (result.w > 0.0){\\n      // rotate to View Coords\\n      rotateToViewCoord(result.xyz);\\n      return vec4(normalize(result.xyz),result.w);\\n    } else {\\n      return vec4(0.0);\\n    }\\n  }\\n#endif\\n\\n\\n#ifdef vtkImageLabelOutlineOn\\n  vec4 fragCoordToPCPos(vec4 fragCoord) {\\n    return vec4(\\n      (fragCoord.x / vpWidth - vpOffsetX - 0.5) * 2.0,\\n      (fragCoord.y / vpHeight - vpOffsetY - 0.5) * 2.0,\\n      (fragCoord.z - 0.5) * 2.0,\\n      1.0);\\n  }\\n\\n  vec4 pcPosToWorldCoord(vec4 pcPos) {\\n    return PCWCMatrix * pcPos;\\n  }\\n\\n  vec3 fragCoordToIndexSpace(vec4 fragCoord) {\\n    vec4 pcPos = fragCoordToPCPos(fragCoord);\\n    vec4 worldCoord = pcPosToWorldCoord(pcPos);\\n    vec4 vertex = (worldCoord / worldCoord.w);\\n\\n    vec3 index = (vWCtoIDX * vertex).xyz;\\n\\n    // half voxel fix for labelmapOutline\\n    return (index + vec3(0.5)) / vec3(volumeDimensions);\\n  }\\n\\n  vec3 fragCoordToWorld(vec4 fragCoord) {\\n    vec4 pcPos = fragCoordToPCPos(fragCoord);\\n    vec4 worldCoord = pcPosToWorldCoord(pcPos);\\n    return worldCoord.xyz;\\n  }\\n#endif\\n\\n//=======================================================================\\n// compute the normals and gradient magnitudes for a position\\n// for independent components\\nmat4 computeMat4Normal(vec3 pos, vec4 tValue, vec3 tstep)\\n{\\n  mat4 result;\\n  vec4 distX = getTextureValue(pos + vec3(tstep.x, 0.0, 0.0)) - tValue;\\n  vec4 distY = getTextureValue(pos + vec3(0.0, tstep.y, 0.0)) - tValue;\\n  vec4 distZ = getTextureValue(pos + vec3(0.0, 0.0, tstep.z)) - tValue;\\n\\n  // divide by spacing\\n  distX /= vSpacing.x;\\n  distY /= vSpacing.y;\\n  distZ /= vSpacing.z;\\n\\n  mat3 rot;\\n  rot[0] = vPlaneNormal0;\\n  rot[1] = vPlaneNormal2;\\n  rot[2] = vPlaneNormal4;\\n\\n#if !defined(vtkComponent0Proportional)\\n  result[0].xyz = vec3(distX.r, distY.r, distZ.r);\\n  result[0].a = length(result[0].xyz);\\n  result[0].xyz *= rot;\\n  if (result[0].w > 0.0)\\n  {\\n    result[0].xyz /= result[0].w;\\n  }\\n#endif\\n\\n// optionally compute the 2nd component\\n#if vtkNumComponents >= 2 && !defined(vtkComponent1Proportional)\\n  result[1].xyz = vec3(distX.g, distY.g, distZ.g);\\n  result[1].a = length(result[1].xyz);\\n  result[1].xyz *= rot;\\n  if (result[1].w > 0.0)\\n  {\\n    result[1].xyz /= result[1].w;\\n  }\\n#endif\\n\\n// optionally compute the 3rd component\\n#if vtkNumComponents >= 3 && !defined(vtkComponent2Proportional)\\n  result[2].xyz = vec3(distX.b, distY.b, distZ.b);\\n  result[2].a = length(result[2].xyz);\\n  result[2].xyz *= rot;\\n  if (result[2].w > 0.0)\\n  {\\n    result[2].xyz /= result[2].w;\\n  }\\n#endif\\n\\n// optionally compute the 4th component\\n#if vtkNumComponents >= 4 && !defined(vtkComponent3Proportional)\\n  result[3].xyz = vec3(distX.a, distY.a, distZ.a);\\n  result[3].a = length(result[3].xyz);\\n  result[3].xyz *= rot;\\n  if (result[3].w > 0.0)\\n  {\\n    result[3].xyz /= result[3].w;\\n  }\\n#endif\\n\\n  return result;\\n}\\n\\n//=======================================================================\\n// global shadow - secondary ray\\n#if defined(VolumeShadowOn) || defined(localAmbientOcclusionOn)\\nfloat random()\\n{\\n  float rand = fract(sin(dot(gl_FragCoord.xy,vec2(12.9898,78.233)))*43758.5453123);\\n  float jitter=texture2D(jtexture,gl_FragCoord.xy/32.).r;\\n  uint pcg_state = floatBitsToUint(jitter);\\n  uint state = pcg_state;\\n  pcg_state = pcg_state * uint(747796405) + uint(2891336453);\\n  uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\\n  return (float((((word >> uint(22)) ^ word) >> 1 ))/float(2147483647) + rand)/2.0;\\n}\\n#endif\\n\\n#ifdef VolumeShadowOn\\n// henyey greenstein phase function\\nfloat phase_function(float cos_angle)\\n{\\n  // divide by 2.0 instead of 4pi to increase intensity\\n  return ((1.0-anisotropy2)/pow(1.0+anisotropy2-2.0*anisotropy*cos_angle, 1.5))/2.0;\\n}\\n\\n// Computes the intersection between a ray and a box\\nstruct Hit\\n{\\n  float tmin;\\n  float tmax;\\n};\\n\\nstruct Ray\\n{\\n  vec3 origin;\\n  vec3 dir;\\n  vec3 invDir;\\n};\\n\\nbool BBoxIntersect(vec3 boundMin, vec3 boundMax, const Ray r, out Hit hit)\\n{\\n  vec3 tbot = r.invDir * (boundMin - r.origin);\\n  vec3 ttop = r.invDir * (boundMax - r.origin);\\n  vec3 tmin = min(ttop, tbot);\\n  vec3 tmax = max(ttop, tbot);\\n  vec2 t = max(tmin.xx, tmin.yz);\\n  float t0 = max(t.x, t.y);\\n  t = min(tmax.xx, tmax.yz);\\n  float t1 = min(t.x, t.y);\\n  hit.tmin = t0;\\n  hit.tmax = t1;\\n  return t1 > max(t0,0.0);\\n}\\n\\n// As BBoxIntersect requires the inverse of the ray coords,\\n// this function is used to avoid numerical issues\\nvoid safe_0_vector(inout Ray ray)\\n{\\n  if(abs(ray.dir.x) < EPSILON) ray.dir.x = sign(ray.dir.x) * EPSILON;\\n  if(abs(ray.dir.y) < EPSILON) ray.dir.y = sign(ray.dir.y) * EPSILON;\\n  if(abs(ray.dir.z) < EPSILON) ray.dir.z = sign(ray.dir.z) * EPSILON;\\n}\\n\\nfloat volume_shadow(vec3 posIS, vec3 lightDirNormIS)\\n{\\n  float shadow = 1.0;\\n  float opacity = 0.0;\\n\\n  // modify sample distance with a random number between 1.5 and 3.0\\n  float sampleDistanceISVS_jitter = sampleDistanceISVS * mix(1.5, 3.0, random());\\n  float opacityPrev = texture2D(otexture, vec2(getTextureValue(posIS).r * oscale0 + oshift0, 0.5)).r;\\n\\n  // in case the first sample near surface has a very tiled light ray, we need to offset start position\\n  posIS += sampleDistanceISVS_jitter * lightDirNormIS;\\n\\n  // compute the start and end points for the ray\\n  Ray ray;\\n  Hit hit;\\n  ray.origin = posIS;\\n  ray.dir = lightDirNormIS;\\n  safe_0_vector(ray);\\n  ray.invDir = 1.0/ray.dir;\\n\\n  if(!BBoxIntersect(vec3(0.0),vec3(1.0), ray, hit))\\n  {\\n    return 1.0;\\n  }\\n  float maxdist = hit.tmax;\\n\\n  // interpolate shadow ray length between: 1 unit of sample distance in IS to SQRT3, based on globalIlluminationReach\\n  float maxgi = mix(sampleDistanceISVS_jitter,SQRT3,giReach);\\n  maxdist = min(maxdist,maxgi);\\n  if(maxdist < EPSILON) {\\n    return 1.0;\\n  }\\n\\n  float current_dist = 0.0;\\n  float current_step = length(sampleDistanceISVS_jitter * lightDirNormIS);\\n  float clamped_step = 0.0;\\n\\n  vec4 scalar = vec4(0.0);\\n  while(current_dist < maxdist)\\n  {\\n#ifdef vtkClippingPlanesOn\\n    vec3 posVC = IStoVC(posIS);\\n    for (int i = 0; i < clip_numPlanes; ++i)\\n    {\\n      if (dot(vec3(vClipPlaneOrigins[i] - posVC), vClipPlaneNormals[i]) > 0.0)\\n      {\\n        current_dist = maxdist;\\n      }\\n    }\\n#endif\\n    scalar = getTextureValue(posIS);\\n    opacity = texture2D(otexture, vec2(scalar.r * oscale0 + oshift0, 0.5)).r;\\n    #if defined(vtkGradientOpacityOn) && !defined(UseIndependentComponents)\\n      vec4 normal = computeNormal(posIS, vec3(1.0/vec3(volumeDimensions)));\\n      opacity *= computeGradientOpacityFactor(normal.w, goscale0, goshift0, gomin0, gomax0);\\n    #endif\\n    shadow *= 1.0 - opacity;\\n\\n    // optimization: early termination\\n    if (shadow < EPSILON){\\n      return 0.0;\\n    }\\n\\n    clamped_step = min(maxdist - current_dist, current_step);\\n    posIS += clamped_step * lightDirNormIS;\\n    current_dist += current_step;\\n  }\\n\\n  return shadow;\\n}\\n\\nvec3 applyShadowRay(vec3 tColor, vec3 posIS, vec3 viewDirectionVC)\\n{\\n  vec3 vertLight = vec3(0.0);\\n  vec3 secondary_contrib = vec3(0.0);\\n  // here we assume only positional light, no effect of cones\\n  for (int i = 0; i < lightNum; i++)\\n  {\\n    #if(vtkLightComplexity==3)\\n      if (lightPositional[i] == 1){\\n        vertLight = lightPositionVC[i] - IStoVC(posIS);\\n      }else{\\n        vertLight = - lightDirectionVC[i];\\n      }\\n    #else\\n      vertLight = - lightDirectionVC[i];\\n    #endif\\n    // here we assume achromatic light, only intensity\\n    float dDotL = dot(viewDirectionVC, normalize(vertLight));\\n    // isotropic scatter returns 0.5 instead of 1/4pi to increase intensity\\n    float phase_attenuation = 0.5;\\n    if (abs(anisotropy) > EPSILON){\\n      phase_attenuation = phase_function(dDotL);\\n    }\\n    float vol_shadow = volume_shadow(posIS, normalize(rotateToIDX(vertLight)));\\n    secondary_contrib += tColor * vDiffuse * lightColor[i] * vol_shadow * phase_attenuation;\\n    secondary_contrib += tColor * vAmbient;\\n  }\\n  return secondary_contrib;\\n}\\n#endif\\n\\n//=======================================================================\\n// local ambient occlusion\\n#ifdef localAmbientOcclusionOn\\nvec3 sample_direction_uniform(int i)\\n{\\n  float rand = random() * 0.5;\\n  float theta = PI2 * (kernelSample[i][0] + rand);\\n  float phi = acos(2.0 * (kernelSample[i][1] + rand) -1.0) / 2.5;\\n  return normalize(vec3(cos(theta)*sin(phi), sin(theta)*sin(phi), cos(phi)));\\n}\\n\\n// return a matrix that transform startDir into z axis; startDir should be normalized\\nmat3 zBaseRotationalMatrix(vec3 startDir){\\n  vec3 axis = cross(startDir, vec3(0.0,0.0,1.0));\\n  float cosA = startDir.z;\\n  float k = 1.0 / (1.0 + cosA);\\n  mat3 matrix = mat3((axis.x * axis.x * k) + cosA, (axis.y * axis.x * k) - axis.z, (axis.z * axis.x * k) + axis.y,\\n              (axis.x * axis.y * k) + axis.z, (axis.y * axis.y * k) + cosA, (axis.z * axis.y * k) - axis.x,\\n              (axis.x * axis.z * k) - axis.y, (axis.y * axis.z * k) + axis.x, (axis.z * axis.z * k) + cosA);\\n  return matrix;\\n}\\n\\nfloat computeLAO(vec3 posIS, float op, vec3 lightDir, vec4 normal){\\n  // apply LAO only at selected locations, otherwise return full brightness\\n  if (normal.w > 0.0 && op > 0.05){\\n    float total_transmittance = 0.0;\\n    mat3 inverseRotateBasis = inverse(zBaseRotationalMatrix(normalize(-normal.xyz)));\\n    vec3 currPos, randomDirStep;\\n    float weight, transmittance, opacity;\\n    for (int i = 0; i < kernelSize; i++)\\n    {\\n      randomDirStep = inverseRotateBasis * sample_direction_uniform(i) * sampleDistanceIS;\\n      weight = 1.0 - dot(normalize(lightDir), normalize(randomDirStep));\\n      currPos = posIS;\\n      transmittance = 1.0;\\n      for (int j = 0; j < kernelRadius ; j++){\\n        currPos += randomDirStep;\\n        // check if it's at clipping plane, if so return full brightness\\n        if (all(greaterThan(currPos, vec3(EPSILON))) && all(lessThan(currPos,vec3(1.0-EPSILON)))){\\n          opacity = texture2D(otexture, vec2(getTextureValue(currPos).r * oscale0 + oshift0, 0.5)).r;\\n          #ifdef vtkGradientOpacityOn\\n             opacity *= computeGradientOpacityFactor(normal.w, goscale0, goshift0, gomin0, gomax0);\\n          #endif\\n          transmittance *= 1.0 - opacity;\\n        }\\n        else{\\n          break;\\n        }\\n      }\\n      total_transmittance += transmittance / float(kernelRadius) * weight;\\n\\n      // early termination if fully translucent\\n      if (total_transmittance > 1.0 - EPSILON){\\n        return 1.0;\\n      }\\n    }\\n    // average transmittance and reduce variance\\n    return clamp(total_transmittance / float(kernelSize), 0.3, 1.0);\\n  } else {\\n    return 1.0;\\n  }\\n}\\n#endif\\n\\n//=======================================================================\\n// surface light contribution\\n#if vtkLightComplexity > 0\\n  void applyLighting(inout vec3 tColor, vec4 normal)\\n  {\\n    vec3 diffuse = vec3(0.0, 0.0, 0.0);\\n    vec3 specular = vec3(0.0, 0.0, 0.0);\\n    float df, sf = 0.0;\\n    for (int i = 0; i < lightNum; i++){\\n        df = abs(dot(normal.rgb, -lightDirectionVC[i]));\\n        diffuse += df * lightColor[i];\\n        sf = pow( abs(dot(lightHalfAngleVC[i],normal.rgb)), vSpecularPower);\\n        specular += sf * lightColor[i];\\n    }\\n    tColor.rgb = tColor.rgb*(diffuse*vDiffuse + vAmbient) + specular*vSpecular;\\n  }\\n  #ifdef SurfaceShadowOn\\n  #if vtkLightComplexity < 3\\n    vec3 applyLightingDirectional(vec3 posIS, vec4 tColor, vec4 normal)\\n    {\\n      // everything in VC\\n      vec3 diffuse = vec3(0.0);\\n      vec3 specular = vec3(0.0);\\n      #ifdef localAmbientOcclusionOn\\n        vec3 ambient = vec3(0.0);\\n      #endif\\n      vec3 vertLightDirection;\\n      for (int i = 0; i < lightNum; i++){\\n        float ndotL,vdotR;\\n        vertLightDirection = lightDirectionVC[i];\\n        ndotL = dot(normal.xyz, vertLightDirection);\\n        if (ndotL < 0.0 && twoSidedLighting)\\n        {\\n          ndotL = -ndotL;\\n        }\\n        if (ndotL > 0.0)\\n        {\\n          diffuse += ndotL * lightColor[i];\\n          //specular\\n          vdotR = dot(-rayDirVC, normalize(2.0 * ndotL * -normal.xyz + vertLightDirection));\\n          if (vdotR > 0.0)\\n          {\\n            specular += pow(vdotR, vSpecularPower) * lightColor[i];\\n          }\\n        }\\n        #ifdef localAmbientOcclusionOn\\n            ambient += computeLAO(posIS, tColor.a, vertLightDirection, normal);\\n        #endif\\n      }\\n      #ifdef localAmbientOcclusionOn\\n        return tColor.rgb * (diffuse * vDiffuse + vAmbient * ambient) + specular*vSpecular;\\n      #else\\n        return tColor.rgb * (diffuse * vDiffuse + vAmbient) + specular*vSpecular;\\n      #endif\\n    }\\n  #else\\n    vec3 applyLightingPositional(vec3 posIS, vec4 tColor, vec4 normal, vec3 posVC)\\n    {\\n      // everything in VC\\n      vec3 diffuse = vec3(0.0);\\n      vec3 specular = vec3(0.0);\\n      #ifdef localAmbientOcclusionOn\\n        vec3 ambient = vec3(0.0);\\n      #endif\\n      vec3 vertLightDirection;\\n      for (int i = 0; i < lightNum; i++){\\n        float distance,attenuation,ndotL,vdotR;\\n        vec3 lightDir;\\n        if (lightPositional[i] == 1){\\n          lightDir = lightDirectionVC[i];\\n          vertLightDirection = posVC - lightPositionVC[i];\\n          distance = length(vertLightDirection);\\n          vertLightDirection = normalize(vertLightDirection);\\n          attenuation = 1.0 / (lightAttenuation[i].x\\n                              + lightAttenuation[i].y * distance\\n                              + lightAttenuation[i].z * distance * distance);\\n          // per OpenGL standard cone angle is 90 or less for a spot light\\n          if (lightConeAngle[i] <= 90.0){\\n            float coneDot = dot(vertLightDirection, lightDir);\\n            if (coneDot >= cos(radians(lightConeAngle[i]))){  // if inside cone\\n              attenuation = attenuation * pow(coneDot, lightExponent[i]);\\n            }\\n            else {\\n              attenuation = 0.0;\\n            }\\n          }\\n          ndotL = dot(normal.xyz, vertLightDirection);\\n          if (ndotL < 0.0 && twoSidedLighting)\\n          {\\n            ndotL = -ndotL;\\n          }\\n          if (ndotL > 0.0)\\n          {\\n            diffuse += ndotL * attenuation * lightColor[i];\\n            //specular\\n            vdotR = dot(-rayDirVC, normalize(2.0 * ndotL * -normal.xyz + vertLightDirection));\\n            if (vdotR > 0.0)\\n            {\\n              specular += pow(vdotR, vSpecularPower) * attenuation * lightColor[i];\\n            }\\n          }\\n          #ifdef localAmbientOcclusionOn\\n            ambient += computeLAO(posIS, tColor.a, vertLightDirection, normal);\\n          #endif\\n        } else {\\n          vertLightDirection = lightDirectionVC[i];\\n          ndotL = dot(normal.xyz, vertLightDirection);\\n          if (ndotL < 0.0 && twoSidedLighting)\\n          {\\n            ndotL = -ndotL;\\n          }\\n          if (ndotL > 0.0)\\n          {\\n            diffuse += ndotL * lightColor[i];\\n            //specular\\n            vdotR = dot(-rayDirVC, normalize(2.0 * ndotL * -normal.xyz + vertLightDirection));\\n            if (vdotR > 0.0)\\n            {\\n              specular += pow(vdotR, vSpecularPower) * lightColor[i];\\n            }\\n          }\\n          #ifdef localAmbientOcclusionOn\\n            ambient += computeLAO(posIS, tColor.a, vertLightDirection, normal);\\n          #endif\\n        }\\n      }\\n      #ifdef localAmbientOcclusionOn\\n        return tColor.rgb * (diffuse * vDiffuse + vAmbient * ambient) + specular*vSpecular;\\n      #else\\n        return tColor.rgb * (diffuse * vDiffuse + vAmbient) + specular*vSpecular;\\n      #endif\\n    }\\n  #endif\\n  #endif\\n#endif\\n\\n// LAO of surface shadows and volume shadows only work with dependent components\\nvec3 applyAllLightning(vec3 tColor, float alpha, vec3 posIS, vec4 normalLight) {\\n  #if vtkLightComplexity > 0\\n    // surface shadows if needed\\n    #ifdef SurfaceShadowOn\\n      #if vtkLightComplexity < 3\\n        vec3 tColorS = applyLightingDirectional(posIS, vec4(tColor, alpha), normalLight);\\n      #else\\n        vec3 tColorS = applyLightingPositional(posIS, vec4(tColor, alpha), normalLight, IStoVC(posIS));\\n      #endif\\n    #endif\\n\\n    // volume shadows if needed\\n    #ifdef VolumeShadowOn\\n      vec3 tColorVS = applyShadowRay(tColor, posIS, rayDirVC);\\n    #endif\\n\\n    // merge\\n    #ifdef VolumeShadowOn\\n      #ifdef SurfaceShadowOn\\n        // surface shadows + volumetric shadows\\n        float vol_coef = volumetricScatteringBlending * (1.0 - alpha / 2.0) * (1.0 - atan(normalLight.w) * INV4PI);\\n        tColor = (1.0-vol_coef) * tColorS + vol_coef * tColorVS;\\n      #else\\n        // volumetric shadows only\\n        tColor = tColorVS;\\n      #endif\\n    #else\\n      #ifdef SurfaceShadowOn\\n        // surface shadows only\\n        tColor = tColorS;\\n      #else\\n        // no shadows\\n        applyLighting(tColor, normal3);\\n      #endif\\n    #endif\\n  #endif\\n  return tColor;\\n}\\n\\n  \\nvec4 getColorForValue(vec4 tValue, vec3 posIS, vec3 tstep)\\n{\\n\\n// If labeloutline and not the edge labelmap, since in the edge labelmap blend\\n// we need the underlying data to sample through\\n#if defined(vtkImageLabelOutlineOn) && !defined(vtkLabelEdgeProjectionOn)\\n  vec3 centerPosIS = fragCoordToIndexSpace(gl_FragCoord); // pos in texture space\\n  vec4 centerValue = getTextureValue(centerPosIS);\\n  bool pixelOnBorder = false;\\n  vec4 tColor = texture2D(ctexture, vec2(centerValue.r * cscale0 + cshift0, 0.5));\\n\\n  // Get alpha of segment from opacity function.\\n  tColor.a = texture2D(otexture, vec2(centerValue.r * oscale0 + oshift0, 0.5)).r;\\n\\n  int segmentIndex = int(centerValue.r * 255.0);\\n  \\n  // Use texture sampling for outlineThickness\\n  float textureCoordinate = float(segmentIndex - 1) / 1024.0;\\n  float textureValue = texture2D(ttexture, vec2(textureCoordinate, 0.5)).r;\\n\\n  int actualThickness = int(textureValue * 255.0);\\n\\n\\n  // If it is the background (segment index 0), we should quickly bail out. \\n  // Previously, this was determined by tColor.a, which was incorrect as it\\n  // prevented the outline from appearing when the fill is 0.\\n  if (segmentIndex == 0){\\n    return vec4(0, 0, 0, 0);\\n  }\\n\\n  // Only perform outline check on fragments rendering voxels that aren't invisible.\\n  // Saves a bunch of needless checks on the background.\\n  // TODO define epsilon when building shader?\\n  for (int i = -actualThickness; i <= actualThickness; i++) {\\n    for (int j = -actualThickness; j <= actualThickness; j++) {\\n      if (i == 0 || j == 0) {\\n        continue;\\n      }\\n\\n      vec4 neighborPixelCoord = vec4(gl_FragCoord.x + float(i),\\n        gl_FragCoord.y + float(j),\\n        gl_FragCoord.z, gl_FragCoord.w);\\n\\n      vec3 neighborPosIS = fragCoordToIndexSpace(neighborPixelCoord);\\n      vec4 value = getTextureValue(neighborPosIS);\\n\\n      // If any of my neighbours are not the same value as I\\n      // am, this means I am on the border of the segment.\\n      // We can break the loops\\n      if (any(notEqual(value, centerValue))) {\\n        pixelOnBorder = true;\\n        break;\\n      }\\n    }\\n\\n    if (pixelOnBorder == true) {\\n      break;\\n    }\\n  }\\n\\n  // If I am on the border, I am displayed at full opacity\\n  if (pixelOnBorder == true) {\\n    tColor.a = outlineOpacity;\\n  }\\n\\n  return tColor;\\n\\n#else\\n  // compute the normal and gradient magnitude if needed\\n  // We compute it as a vec4 if possible otherwise a mat4\\n\\n  #ifdef UseIndependentComponents\\n\\n    // sample textures\\n    vec3 tColor0 = texture2D(ctexture, vec2(tValue.r * cscale0 + cshift0, height0)).rgb;\\n    float pwfValue0 = texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, height0)).r;\\n\\n    #if vtkNumComponents > 1\\n      vec3 tColor1 = texture2D(ctexture, vec2(tValue.g * cscale1 + cshift1, height1)).rgb;\\n      float pwfValue1 = texture2D(otexture, vec2(tValue.g * oscale1 + oshift1, height1)).r;\\n\\n      #if vtkNumComponents > 2\\n        vec3 tColor2 = texture2D(ctexture, vec2(tValue.b * cscale2 + cshift2, height2)).rgb;\\n        float pwfValue2 = texture2D(otexture, vec2(tValue.b * oscale2 + oshift2, height2)).r;\\n\\n        #if vtkNumComponents > 3\\n          vec3 tColor3 = texture2D(ctexture, vec2(tValue.a * cscale3 + cshift3, height3)).rgb;\\n          float pwfValue3 = texture2D(otexture, vec2(tValue.a * oscale3 + oshift3, height3)).r;\\n        #endif\\n      #endif\\n    #endif\\n\\n    #if !defined(vtkCustomComponentsColorMix)\\n      // default path for component color mix\\n\\n      // compute the normal vectors as needed\\n      #if (vtkLightComplexity > 0) || defined(vtkGradientOpacityOn)\\n        mat4 normalMat = computeMat4Normal(posIS, tValue, tstep);\\n      #endif\\n\\n      // compute gradient opacity factors as needed\\n      vec4 goFactor = vec4(1.0, 1.0 ,1.0 ,1.0);\\n      #if defined(vtkGradientOpacityOn)\\n        #if !defined(vtkComponent0Proportional)\\n          goFactor.x =\\n            computeGradientOpacityFactor(normalMat[0].a, goscale0, goshift0, gomin0, gomax0);\\n        #endif\\n        #if vtkNumComponents > 1\\n          #if !defined(vtkComponent1Proportional)\\n            goFactor.y =\\n              computeGradientOpacityFactor(normalMat[1].a, goscale1, goshift1, gomin1, gomax1);\\n          #endif\\n          #if vtkNumComponents > 2\\n            #if !defined(vtkComponent2Proportional)\\n              goFactor.z =\\n                computeGradientOpacityFactor(normalMat[2].a, goscale2, goshift2, gomin2, gomax2);\\n            #endif\\n            #if vtkNumComponents > 3\\n              #if !defined(vtkComponent3Proportional)\\n                goFactor.w =\\n                  computeGradientOpacityFactor(normalMat[3].a, goscale3, goshift3, gomin3, gomax3);\\n              #endif\\n            #endif\\n          #endif\\n        #endif\\n      #endif\\n\\n      // process color and opacity for each component\\n      #if !defined(vtkComponent0Proportional)\\n        float alpha = goFactor.x*mix0*pwfValue0;\\n        #if vtkLightComplexity > 0\\n          applyLighting(tColor0, normalMat[0]);\\n        #endif\\n      #else\\n        tColor0 *= pwfValue0;\\n        float alpha = mix(pwfValue0, 1.0, (1.0 - mix0));\\n      #endif\\n\\n      #if vtkNumComponents > 1\\n        #if !defined(vtkComponent1Proportional)\\n          alpha += goFactor.y*mix1*pwfValue1;\\n          #if vtkLightComplexity > 0\\n            applyLighting(tColor1, normalMat[1]);\\n          #endif\\n        #else\\n          tColor1 *= pwfValue1;\\n          alpha *= mix(pwfValue1, 1.0, (1.0 - mix1));\\n        #endif\\n\\n        #if vtkNumComponents > 2\\n          #if !defined(vtkComponent2Proportional)\\n            alpha += goFactor.z*mix2*pwfValue2;\\n            #if vtkLightComplexity > 0\\n              applyLighting(tColor2, normalMat[2]);\\n            #endif\\n          #else\\n            tColor2 *= pwfValue2;\\n            alpha *= mix(pwfValue2, 1.0, (1.0 - mix2));\\n          #endif\\n        #endif\\n\\n        #if vtkNumComponents > 3\\n          #if !defined(vtkComponent3Proportional)\\n            alpha += goFactor.w*mix3*pwfValue3;\\n            #if vtkLightComplexity > 0\\n              applyLighting(tColor3, normalMat[3]);\\n            #endif\\n          #else\\n            tColor3 *= pwfValue3;\\n            alpha *= mix(pwfValue3, 1.0, (1.0 - mix3));\\n          #endif\\n        #endif\\n      #endif\\n\\n      // perform final independent blend\\n      vec3 tColor = mix0 * tColor0;\\n      #if vtkNumComponents > 1\\n        tColor += mix1 * tColor1;\\n        #if vtkNumComponents > 2\\n          tColor += mix2 * tColor2;\\n          #if vtkNumComponents > 3\\n            tColor += mix3 * tColor3;\\n          #endif\\n        #endif\\n      #endif\\n\\n      return vec4(tColor, alpha);\\n    #else\\n      /*\\n       * Mix the color information from all the independent components to get a single rgba output\\n       * Gradient opactity factors and normals are not computed\\n       *\\n       * You can compute these using:\\n       * - computeMat4Normal: always available, compute normal only for non proportional components, used by default independent component mix\\n       * - computeDensityNormal & computeNormalForDensity: available if ((LightComplexity > 0) || GradientOpacityOn) && ComputeNormalFromOpacity),\\n       *                                                   used by dependent component color mix, see code for Additive preset in OpenGl/VolumeMapper\\n       * - computeGradientOpacityFactor: always available, used in a lot of places\\n       *\\n       * Using applyAllLightning() is advised for shading but some features don't work well with it (volume shadows, LAO)\\n       * mix0, mix1, ... are defined for each component that is used and correspond to the componentWeight\\n       */\\n      //VTK::CustomComponentsColorMix::Impl\\n    #endif\\n  #else\\n    // dependent components\\n\\n    // compute normal if needed\\n    #if (vtkLightComplexity > 0) || defined(vtkGradientOpacityOn)\\n      // use component 3 of the opacity texture as getTextureValue() sets alpha to the opacity value\\n      #ifdef vtkComputeNormalFromOpacity\\n        vec3 scalarInterp[2];\\n        vec4 normal0 = computeNormalForDensity(posIS, tstep, scalarInterp, 3);\\n      #else\\n        vec4 normal0 = computeNormal(posIS, tstep);\\n      #endif\\n    #endif\\n\\n    // compute gradient opacity factor enabled\\n    #if defined(vtkGradientOpacityOn)\\n      float gradientOpacity = computeGradientOpacityFactor(normal0.a, goscale0, goshift0, gomin0, gomax0);\\n    #else\\n      const float gradientOpacity = 1.0;\\n    #endif\\n\\n    // get color and opacity\\n    #if vtkNumComponents == 1\\n      vec3 tColor = texture2D(ctexture, vec2(tValue.r * cscale0 + cshift0, 0.5)).rgb;\\n      float alpha = gradientOpacity*texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, 0.5)).r;\\n      if (alpha < EPSILON){\\n        return vec4(0.0);\\n      }\\n    #endif\\n    #if vtkNumComponents == 2\\n      vec3 tColor = vec3(tValue.r * cscale0 + cshift0);\\n      float alpha = gradientOpacity*texture2D(otexture, vec2(tValue.a * oscale1 + oshift1, 0.5)).r;\\n    #endif\\n    #if vtkNumComponents == 3\\n      vec3 tColor;\\n      tColor.r = tValue.r * cscale0 + cshift0;\\n      tColor.g = tValue.g * cscale1 + cshift1;\\n      tColor.b = tValue.b * cscale2 + cshift2;\\n      float alpha = gradientOpacity*texture2D(otexture, vec2(tValue.a * oscale0 + oshift0, 0.5)).r;\\n    #endif\\n    #if vtkNumComponents == 4\\n      vec3 tColor;\\n      tColor.r = tValue.r * cscale0 + cshift0;\\n      tColor.g = tValue.g * cscale1 + cshift1;\\n      tColor.b = tValue.b * cscale2 + cshift2;\\n      float alpha = gradientOpacity*texture2D(otexture, vec2(tValue.a * oscale3 + oshift3, 0.5)).r;\\n    #endif\\n\\n    // lighting\\n    #if (vtkLightComplexity > 0)\\n      #ifdef vtkComputeNormalFromOpacity\\n        vec4 normalLight;\\n        if (!all(equal(normal0, vec4(0.0)))) {\\n          scalarInterp[0] = scalarInterp[0] * oscale0 + oshift0;\\n          scalarInterp[1] = scalarInterp[1] * oscale0 + oshift0;\\n          normalLight = computeDensityNormal(scalarInterp, 0.5, gradientOpacity);\\n          if (all(equal(normalLight, vec4(0.0)))) {\\n            normalLight = normal0;\\n          }\\n        }\\n      #else\\n        vec4 normalLight = normal0;\\n      #endif\\n      tColor = applyAllLightning(tColor, alpha, posIS, normalLight);\\n    #endif\\n\\n    return vec4(tColor, alpha);\\n  #endif // dependent\\n#endif\\n}\\n\\nbool valueWithinScalarRange(vec4 val, vec4 min, vec4 max) {\\n  bool withinRange = false;\\n  #if vtkNumComponents == 1\\n    if (val.r >= min.r && val.r <= max.r) {\\n      withinRange = true;\\n    }\\n  #else\\n    #ifdef UseIndependentComponents\\n      #if vtkNumComponents == 2\\n        if (val.r >= min.r && val.r <= max.r &&\\n            val.g >= min.g && val.g <= max.g) {\\n          withinRange = true;\\n        }\\n      #else\\n        if (all(greaterThanEqual(val, ipScalarRangeMin)) &&\\n            all(lessThanEqual(val, ipScalarRangeMax))) {\\n          withinRange = true;\\n        }\\n      #endif\\n    #endif\\n  #endif\\n  return withinRange;\\n}\\n\\n#if vtkBlendMode == 6 \\nbool checkOnEdgeForNeighbor(int i, int j, int s, vec3 stepIS) {\\n    vec4 neighborPixelCoord = vec4(gl_FragCoord.x + float(i), gl_FragCoord.y + float(j), gl_FragCoord.z, gl_FragCoord.w);\\n    vec3 originalNeighborPosIS = fragCoordToIndexSpace(neighborPixelCoord);\\n\\n    bool justSawIt = false;\\n\\n    vec3 neighborPosIS = originalNeighborPosIS;\\n\\n    float stepsTraveled = 0.0;\\n\\n\\n    // float neighborValue;\\n    for (int k = 0; k < //VTK::MaximumSamplesValue /2 ; ++k) {\\n        ivec3 texCoord = ivec3(neighborPosIS * vec3(volumeDimensions));\\n        vec4 texValue = texelFetch(texture1, texCoord, 0);\\n\\n        if (int(texValue.g) == s) {\\n            justSawIt = true;\\n            break;\\n        }\\n        neighborPosIS += stepIS;\\n    }\\n\\n    if (justSawIt){\\n      return false;\\n    }\\n\\n   \\n    neighborPosIS = originalNeighborPosIS;\\n    for (int k = 0; k < //VTK::MaximumSamplesValue /2 ; ++k) {\\n        ivec3 texCoord = ivec3(neighborPosIS * vec3(volumeDimensions));\\n        vec4 texValue = texelFetch(texture1, texCoord, 0);\\n\\n        if (int(texValue.g) == s) {\\n            justSawIt = true;\\n            break;\\n        }\\n        neighborPosIS -= stepIS;\\n    }\\n\\n\\n    if (!justSawIt) {\\n        // onedge\\n        vec3 tColorSegment = texture2D(ctexture, vec2(float(s) * cscale1 + cshift1, height1)).rgb;\\n        float pwfValueSegment = texture2D(otexture, vec2(float(s) * oscale1 + oshift1, height1)).r;\\n        gl_FragData[0] = vec4(tColorSegment, pwfValueSegment);\\n        return true;\\n    }\\n\\n    // not on edge\\n    return false;\\n}\\n\\n#endif\\n\\n\\n//=======================================================================\\n// Apply the specified blend mode operation along the ray's path.\\n//\\nvoid applyBlend(vec3 posIS, vec3 endIS, vec3 tdims)\\n{\\n  vec3 tstep = 1.0/tdims;\\n\\n  // start slightly inside and apply some jitter\\n  vec3 delta = endIS - posIS;\\n  vec3 stepIS = normalize(delta)*sampleDistanceIS;\\n  float raySteps = length(delta)/sampleDistanceIS;\\n\\n  // Initialize arrays to false\\n  // avoid 0.0 jitter\\n  float jitter = 0.01 + 0.99*texture2D(jtexture, gl_FragCoord.xy/32.0).r;\\n  float stepsTraveled = jitter;\\n\\n  // local vars for the loop\\n  vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\\n  vec4 tValue;\\n  vec4 tColor;\\n\\n  // if we have less than one step then pick the middle point\\n  // as our value\\n  // if (raySteps <= 1.0)\\n  // {\\n  //   posIS = (posIS + endIS)*0.5;\\n  // }\\n\\n  // Perform initial step at the volume boundary\\n  // compute the scalar\\n  tValue = getTextureValue(posIS);\\n  \\n  #if vtkBlendMode == 6 \\n    if (raySteps <= 1.0)\\n    {\\n      gl_FragData[0] = getColorForValue(tValue, posIS, tstep);\\n      return;\\n    }\\n\\n    vec4 value = tValue;\\n    posIS += (jitter*stepIS);\\n    vec3 maxPosIS = posIS; // Store the position of the max value\\n    int segmentIndex = int(value.g);\\n    bool originalPosHasSeenNonZero = false;\\n\\n    uint bitmask = 0u;\\n\\n    if (segmentIndex != 0) {\\n      // Tried using the segment index in an boolean array but reading \\n      // from the array by dynamic indexing was horrondously slow\\n      // so use bit masking instead and assign 1 to the bit corresponding to the segment index\\n      // and later check if the bit is set via bit operations\\n      setBit(segmentIndex);\\n    }\\n    \\n    // Sample along the ray until MaximumSamplesValue,\\n    // ending slightly inside the total distance\\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\\n    {\\n      // If we have reached the last step, break\\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\\n\\n      // compute the scalar\\n      tValue = getTextureValue(posIS);\\n      segmentIndex = int(tValue.g);\\n\\n      if (segmentIndex != 0) {\\n        originalPosHasSeenNonZero = true;\\n        setBit(segmentIndex);\\n      }\\n\\n      if (tValue.r > value.r) {\\n        value =  tValue; // Update the max value\\n        maxPosIS = posIS; // Update the position where max occurred\\n      }\\n\\n      // Otherwise, continue along the ray\\n      stepsTraveled++;\\n      posIS += stepIS;\\n    }\\n\\n    // Perform the last step along the ray using the\\n    // residual distance\\n    posIS = endIS;\\n    tValue = getTextureValue(posIS);\\n\\n    if (tValue.r > value.r) {\\n      value = tValue; // Update the max value\\n      maxPosIS = posIS; // Update the position where max occurred\\n    }  \\n\\n    // If we have not seen any non-zero segments, we can return early\\n    // and grab color from the actual center value first component (image)\\n    if (!originalPosHasSeenNonZero) {\\n      gl_FragData[0] = getColorForValue(value, maxPosIS, tstep);\\n      return;\\n    }\\n\\n    // probably we can make this configurable but for now we will use the same\\n    // sample distance as the original sample distance\\n    float neighborSampleDistanceIS = sampleDistanceIS;\\n\\n    vec3 neighborRayStepsIS = stepIS;\\n    float neighborRaySteps = raySteps;\\n    bool shouldLookInAllNeighbors = false;\\n\\n    float minVoxelSpacing = min(volumeSpacings[0], min(volumeSpacings[1], volumeSpacings[2]));\\n    vec4 base = vec4(gl_FragCoord.x, gl_FragCoord.y, gl_FragCoord.z, gl_FragCoord.w);\\n\\n    vec4 baseXPlus = vec4(gl_FragCoord.x + 1.0, gl_FragCoord.y, gl_FragCoord.z, gl_FragCoord.w);\\n    vec4 baseYPlus = vec4(gl_FragCoord.x, gl_FragCoord.y + 1.0, gl_FragCoord.z, gl_FragCoord.w);\\n\\n    vec3 baseWorld = fragCoordToWorld(base);\\n    vec3 baseXPlusWorld = fragCoordToWorld(baseXPlus);\\n    vec3 baseYPlusWorld = fragCoordToWorld(baseYPlus);\\n\\n    float XPlusDiff = length(baseXPlusWorld - baseWorld);\\n    float YPlusDiff = length(baseYPlusWorld - baseWorld);\\n\\n    float minFragSpacingWorld = min(XPlusDiff, YPlusDiff);\\n\\n    for (int s = 1; s < MAX_SEGMENT_INDEX; s++) {\\n      // bail out quickly if the segment index has not \\n      // been seen by the center segment\\n      if (!isBitSet(s)) {\\n       continue;\\n      }\\n\\n      // Use texture sampling for outlineThickness so that we can have \\n      // per segment thickness\\n      float textureCoordinate = float(s - 1) / 1024.0;\\n      float textureValue = texture2D(ttexture, vec2(textureCoordinate, 0.5)).r;\\n\\n      int actualThickness = int(textureValue * 255.0);\\n\\n      // check the extreme points in the neighborhood since there is a better\\n      // chance of finding the edge there, so that we can bail out \\n      // faster if we find the edge\\n      bool onEdge =\\n          checkOnEdgeForNeighbor(-actualThickness, -actualThickness, s, stepIS) ||\\n          checkOnEdgeForNeighbor(actualThickness, actualThickness, s, stepIS) ||\\n          checkOnEdgeForNeighbor(actualThickness, -actualThickness, s, stepIS) ||\\n          checkOnEdgeForNeighbor(-actualThickness, +actualThickness, s, stepIS);\\n\\n      if (onEdge) {\\n        return;\\n      }\\n\\n      // since the next step is computationally expensive, we need to perform\\n      // some optimizations to avoid it if possible. One of the optimizations\\n      // is to check the whether the minimum of the voxel spacing is greater than \\n      // the 2 * the thickness of the outline segment. If that is the case\\n      // then we can safely skip the next step since we can be sure that the\\n      // the previous 4 checks on the extreme points would caught the entirety \\n      // of the all the fragments inside. i.e., this happens when we zoom out, \\n      if (minVoxelSpacing > (2.0 * float(actualThickness) - 1.0) * minFragSpacingWorld) {\\n        continue;\\n      }\\n      \\n      // Loop through the rest, skipping the processed extremes and the center\\n      for (int i = -actualThickness; i <= actualThickness; i++) {\\n            for (int j = -actualThickness; j <= actualThickness; j++) {\\n                if (i == 0 && j == 0) continue; // Skip the center\\n                if (abs(i) == actualThickness && abs(j) == actualThickness) continue; // Skip corners\\n                if (checkOnEdgeForNeighbor(i, j, s, stepIS )) {\\n                    return;\\n                }\\n          }\\n      }\\n    }\\n\\n    vec3 tColor0 = texture2D(ctexture, vec2(value.r * cscale0 + cshift0, height0)).rgb;\\n    float pwfValue0 = texture2D(otexture, vec2(value.r * oscale0 + oshift0, height0)).r;\\n    gl_FragData[0] = vec4(tColor0, pwfValue0);\\n  #endif\\n  #if vtkBlendMode == 0 // COMPOSITE_BLEND\\n    // now map through opacity and color\\n    tColor = getColorForValue(tValue, posIS, tstep);\\n\\n    // handle very thin volumes\\n    if (raySteps <= 1.0)\\n    {\\n      tColor.a = 1.0 - pow(1.0 - tColor.a, raySteps);\\n      gl_FragData[0] = tColor;\\n      return;\\n    }\\n\\n    tColor.a = 1.0 - pow(1.0 - tColor.a, jitter);\\n    color = vec4(tColor.rgb*tColor.a, tColor.a);\\n    posIS += (jitter*stepIS);\\n\\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\\n    {\\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\\n\\n      // compute the scalar\\n      tValue = getTextureValue(posIS);\\n\\n      // now map through opacity and color\\n      tColor = getColorForValue(tValue, posIS, tstep);\\n\\n      float mix = (1.0 - color.a);\\n\\n      // this line should not be needed but nvidia seems to not handle\\n      // the break correctly on windows/chrome 58 angle\\n      //mix = mix * sign(max(raySteps - stepsTraveled - 1.0, 0.0));\\n\\n      color = color + vec4(tColor.rgb*tColor.a, tColor.a)*mix;\\n      stepsTraveled++;\\n      posIS += stepIS;\\n      if (color.a > 0.99) { color.a = 1.0; break; }\\n    }\\n\\n    if (color.a < 0.99 && (raySteps - stepsTraveled) > 0.0)\\n    {\\n      posIS = endIS;\\n\\n      // compute the scalar\\n      tValue = getTextureValue(posIS);\\n\\n      // now map through opacity and color\\n      tColor = getColorForValue(tValue, posIS, tstep);\\n      tColor.a = 1.0 - pow(1.0 - tColor.a, raySteps - stepsTraveled);\\n\\n      float mix = (1.0 - color.a);\\n      color = color + vec4(tColor.rgb*tColor.a, tColor.a)*mix;\\n    }\\n\\n    gl_FragData[0] = vec4(color.rgb/color.a, color.a);\\n  #endif\\n  #if vtkBlendMode == 1 || vtkBlendMode == 2\\n    // MAXIMUM_INTENSITY_BLEND || MINIMUM_INTENSITY_BLEND\\n    // Find maximum/minimum intensity along the ray.\\n\\n    // Define the operation we will use (min or max)\\n    #if vtkBlendMode == 1\\n    #define OP max\\n    #else\\n    #define OP min\\n    #endif\\n\\n    // If the clipping range is shorter than the sample distance\\n    // we can skip the sampling loop along the ray.\\n    if (raySteps <= 1.0)\\n    {\\n      gl_FragData[0] = getColorForValue(tValue, posIS, tstep);\\n      return;\\n    }\\n\\n    vec4 value = tValue;\\n    posIS += (jitter*stepIS);\\n\\n    // Sample along the ray until MaximumSamplesValue,\\n    // ending slightly inside the total distance\\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\\n    {\\n      // If we have reached the last step, break\\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\\n\\n      // compute the scalar\\n      tValue = getTextureValue(posIS);\\n\\n      // Update the maximum value if necessary\\n      value = OP(tValue, value);\\n\\n      // Otherwise, continue along the ray\\n      stepsTraveled++;\\n      posIS += stepIS;\\n    }\\n\\n    // Perform the last step along the ray using the\\n    // residual distance\\n    posIS = endIS;\\n    tValue = getTextureValue(posIS);\\n    value = OP(tValue, value);\\n\\n    // Now map through opacity and color\\n    gl_FragData[0] = getColorForValue(value, posIS, tstep);\\n  #endif\\n  #if vtkBlendMode == 3 || vtkBlendMode == 4 //AVERAGE_INTENSITY_BLEND || ADDITIVE_BLEND\\n    vec4 sum = vec4(0.);\\n\\n    if (valueWithinScalarRange(tValue, ipScalarRangeMin, ipScalarRangeMax)) {\\n      sum += tValue;\\n    }\\n\\n    if (raySteps <= 1.0) {\\n      gl_FragData[0] = getColorForValue(sum, posIS, tstep);\\n      return;\\n    }\\n\\n    posIS += (jitter*stepIS);\\n\\n    // Sample along the ray until MaximumSamplesValue,\\n    // ending slightly inside the total distance\\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\\n    {\\n      // If we have reached the last step, break\\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\\n\\n      // compute the scalar\\n      tValue = getTextureValue(posIS);\\n\\n      // One can control the scalar range by setting the AverageIPScalarRange to disregard scalar values, not in the range of interest, from the average computation.\\n      // Notes:\\n      // - We are comparing all values in the texture to see if any of them\\n      //   are outside of the scalar range. In the future we might want to allow\\n      //   scalar ranges for each component.\\n      if (valueWithinScalarRange(tValue, ipScalarRangeMin, ipScalarRangeMax)) {\\n        // Sum the values across each step in the path\\n        sum += tValue;\\n      }\\n      stepsTraveled++;\\n      posIS += stepIS;\\n    }\\n\\n    // Perform the last step along the ray using the\\n    // residual distance\\n    posIS = endIS;\\n\\n    // compute the scalar\\n    tValue = getTextureValue(posIS);\\n\\n    // One can control the scalar range by setting the IPScalarRange to disregard scalar values, not in the range of interest, from the average computation\\n    if (valueWithinScalarRange(tValue, ipScalarRangeMin, ipScalarRangeMax)) {\\n      sum += tValue;\\n\\n      stepsTraveled++;\\n    }\\n\\n    #if vtkBlendMode == 3 // Average\\n      sum /= vec4(stepsTraveled, stepsTraveled, stepsTraveled, 1.0);\\n    #endif\\n\\n    gl_FragData[0] = getColorForValue(sum, posIS, tstep);\\n  #endif\\n  #if vtkBlendMode == 5 // RADON\\n    float normalizedRayIntensity = 1.0;\\n\\n    // handle very thin volumes\\n    if (raySteps <= 1.0)\\n    {\\n      tValue = getTextureValue(posIS);\\n      normalizedRayIntensity = normalizedRayIntensity - sampleDistance*texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, 0.5)).r;\\n      gl_FragData[0] = texture2D(ctexture, vec2(normalizedRayIntensity, 0.5));\\n      return;\\n    }\\n\\n    posIS += (jitter*stepIS);\\n\\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\\n    {\\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\\n\\n      // compute the scalar value\\n      tValue = getTextureValue(posIS);\\n\\n      // Convert scalar value to normalizedRayIntensity coefficient and accumulate normalizedRayIntensity\\n      normalizedRayIntensity = normalizedRayIntensity - sampleDistance*texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, 0.5)).r;\\n\\n      posIS += stepIS;\\n      stepsTraveled++;\\n    }\\n\\n    // map normalizedRayIntensity to color\\n    gl_FragData[0] = texture2D(ctexture, vec2(normalizedRayIntensity , 0.5));\\n\\n  #endif\\n}\\n\\n//=======================================================================\\n// Compute a new start and end point for a given ray based\\n// on the provided bounded clipping plane (aka a rectangle)\\nvoid getRayPointIntersectionBounds(\\n  vec3 rayPos, vec3 rayDir,\\n  vec3 planeDir, float planeDist,\\n  inout vec2 tbounds, vec3 vPlaneX, vec3 vPlaneY,\\n  float vSize1, float vSize2)\\n{\\n  float result = dot(rayDir, planeDir);\\n  if (abs(result) < 1e-6)\\n  {\\n    return;\\n  }\\n  result = -1.0 * (dot(rayPos, planeDir) + planeDist) / result;\\n  vec3 xposVC = rayPos + rayDir*result;\\n  vec3 vxpos = xposVC - vOriginVC;\\n  vec2 vpos = vec2(\\n    dot(vxpos, vPlaneX),\\n    dot(vxpos, vPlaneY));\\n\\n  // on some apple nvidia systems this does not work\\n  // if (vpos.x < 0.0 || vpos.x > vSize1 ||\\n  //     vpos.y < 0.0 || vpos.y > vSize2)\\n  // even just\\n  // if (vpos.x < 0.0 || vpos.y < 0.0)\\n  // fails\\n  // so instead we compute a value that represents in and out\\n  //and then compute the return using this value\\n  float xcheck = max(0.0, vpos.x * (vpos.x - vSize1)); //  0 means in bounds\\n  float check = sign(max(xcheck, vpos.y * (vpos.y - vSize2))); //  0 means in bounds, 1 = out\\n\\n  tbounds = mix(\\n   vec2(min(tbounds.x, result), max(tbounds.y, result)), // in value\\n   tbounds, // out value\\n   check);  // 0 in 1 out\\n}\\n\\n//=======================================================================\\n// given a\\n// - ray direction (rayDir)\\n// - starting point (vertexVCVSOutput)\\n// - bounding planes of the volume\\n// - optionally depth buffer values\\n// - far clipping plane\\n// compute the start/end distances of the ray we need to cast\\nvec2 computeRayDistances(vec3 rayDir, vec3 tdims)\\n{\\n  vec2 dists = vec2(100.0*camFar, -1.0);\\n\\n  vec3 vSize = vSpacing*tdims;\\n\\n  // all this is in View Coordinates\\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\\n    vPlaneNormal0, vPlaneDistance0, dists, vPlaneNormal2, vPlaneNormal4,\\n    vSize.y, vSize.z);\\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\\n    vPlaneNormal1, vPlaneDistance1, dists, vPlaneNormal2, vPlaneNormal4,\\n    vSize.y, vSize.z);\\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\\n    vPlaneNormal2, vPlaneDistance2, dists, vPlaneNormal0, vPlaneNormal4,\\n    vSize.x, vSize.z);\\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\\n    vPlaneNormal3, vPlaneDistance3, dists, vPlaneNormal0, vPlaneNormal4,\\n    vSize.x, vSize.z);\\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\\n    vPlaneNormal4, vPlaneDistance4, dists, vPlaneNormal0, vPlaneNormal2,\\n    vSize.x, vSize.y);\\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\\n    vPlaneNormal5, vPlaneDistance5, dists, vPlaneNormal0, vPlaneNormal2,\\n    vSize.x, vSize.y);\\n\\n  //VTK::ClipPlane::Impl\\n\\n  // do not go behind front clipping plane\\n  dists.x = max(0.0,dists.x);\\n\\n  // do not go PAST far clipping plane\\n  float farDist = -camThick/rayDir.z;\\n  dists.y = min(farDist,dists.y);\\n\\n  // Do not go past the zbuffer value if set\\n  // This is used for intermixing opaque geometry\\n  //VTK::ZBuffer::Impl\\n\\n  return dists;\\n}\\n\\n//=======================================================================\\n// Compute the index space starting position (pos) and end\\n// position\\n//\\nvoid computeIndexSpaceValues(out vec3 pos, out vec3 endPos, vec3 rayDir, vec2 dists)\\n{\\n  // compute starting and ending values in volume space\\n  pos = vertexVCVSOutput + dists.x*rayDir;\\n  pos = pos - vOriginVC;\\n  // convert to volume basis and origin\\n  pos = vec3(\\n    dot(pos, vPlaneNormal0),\\n    dot(pos, vPlaneNormal2),\\n    dot(pos, vPlaneNormal4));\\n\\n  endPos = vertexVCVSOutput + dists.y*rayDir;\\n  endPos = endPos - vOriginVC;\\n  endPos = vec3(\\n    dot(endPos, vPlaneNormal0),\\n    dot(endPos, vPlaneNormal2),\\n    dot(endPos, vPlaneNormal4));\\n\\n  float delta = length(endPos - pos);\\n\\n  pos *= vVCToIJK;\\n  endPos *= vVCToIJK;\\n\\n  float delta2 = length(endPos - pos);\\n  sampleDistanceIS = sampleDistance*delta2/delta;\\n  #ifdef VolumeShadowOn\\n    sampleDistanceISVS = sampleDistanceIS * volumeShadowSamplingDistFactor;\\n  #endif\\n}\\n\\nvoid main()\\n{\\n\\n  if (cameraParallel == 1)\\n  {\\n    // Camera is parallel, so the rayDir is just the direction of the camera.\\n    rayDirVC = vec3(0.0, 0.0, -1.0);\\n  } else {\\n    // camera is at 0,0,0 so rayDir for perspective is just the vc coord\\n    rayDirVC = normalize(vertexVCVSOutput);\\n  }\\n\\n  vec3 tdims = vec3(volumeDimensions);\\n\\n  // compute the start and end points for the ray\\n  vec2 rayStartEndDistancesVC = computeRayDistances(rayDirVC, tdims);\\n\\n  // do we need to composite? aka does the ray have any length\\n  // If not, bail out early\\n  if (rayStartEndDistancesVC.y <= rayStartEndDistancesVC.x)\\n  {\\n    discard;\\n  }\\n\\n  // IS = Index Space\\n  vec3 posIS;\\n  vec3 endIS;\\n  computeIndexSpaceValues(posIS, endIS, rayDirVC, rayStartEndDistancesVC);\\n\\n  // Perform the blending operation along the ray\\n  applyBlend(posIS, endIS, tdims);\\n}\\n\";\n\nexport { vtkVolumeFS as v };\n","var vtkVolumeVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyDataVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\nattribute vec4 vertexDC;\\n\\nvarying vec3 vertexVCVSOutput;\\nuniform mat4 PCVCMatrix;\\n\\nuniform float dcxmin;\\nuniform float dcxmax;\\nuniform float dcymin;\\nuniform float dcymax;\\n\\nvoid main()\\n{\\n  // dcsmall is the device coords reduced to the\\n  // x y area covered by the volume\\n  vec4 dcsmall = vec4(\\n    dcxmin + 0.5 * (vertexDC.x + 1.0) * (dcxmax - dcxmin),\\n    dcymin + 0.5 * (vertexDC.y + 1.0) * (dcymax - dcymin),\\n    vertexDC.z,\\n    vertexDC.w);\\n  vec4 vcpos = PCVCMatrix * dcsmall;\\n  vertexVCVSOutput = vcpos.xyz/vcpos.w;\\n  gl_Position = dcsmall;\\n}\\n\";\n\nexport { vtkVolumeVS as v };\n","import '../OpenGL/Camera.js';\nimport '../OpenGL/Renderer.js';\nimport '../OpenGL/Actor.js';\nimport '../OpenGL/Actor2D.js';\nimport '../OpenGL/CubeAxesActor.js';\nimport '../OpenGL/PolyDataMapper.js';\nimport '../OpenGL/PolyDataMapper2D.js';\nimport '../OpenGL/ScalarBarActor.js';\nimport '../OpenGL/Skybox.js';\nimport '../OpenGL/Texture.js';\nimport '../OpenGL/PixelSpaceCallbackMapper.js';\nimport '../WebGPU/Camera.js';\nimport '../WebGPU/Renderer.js';\nimport '../WebGPU/Actor.js';\nimport '../WebGPU/Actor2D.js';\nimport '../WebGPU/CubeAxesActor.js';\nimport '../WebGPU/PolyDataMapper.js';\nimport '../WebGPU/PolyDataMapper2D.js';\nimport '../WebGPU/ScalarBarActor.js';\nimport '../WebGPU/Texture.js';\nimport '../WebGPU/PixelSpaceCallbackMapper.js';\n","import '../OpenGL/Camera.js';\nimport '../OpenGL/Renderer.js';\nimport '../OpenGL/ImageResliceMapper.js';\nimport '../OpenGL/ImageMapper.js';\nimport '../OpenGL/ImageCPRMapper.js';\nimport '../OpenGL/ImageSlice.js';\nimport '../OpenGL/Volume.js';\nimport '../OpenGL/VolumeMapper.js';\nimport '../OpenGL/PixelSpaceCallbackMapper.js';\nimport '../WebGPU/Camera.js';\nimport '../WebGPU/Renderer.js';\nimport '../WebGPU/ImageMapper.js';\nimport '../WebGPU/ImageSlice.js';\nimport '../WebGPU/Volume.js';\nimport '../WebGPU/PixelSpaceCallbackMapper.js';\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderPass');\n  publicAPI.getOperation = () => model.currentOperation;\n  publicAPI.setCurrentOperation = val => {\n    model.currentOperation = val;\n    model.currentTraverseOperation = `traverse${macro.capitalize(model.currentOperation)}`;\n  };\n  publicAPI.getTraverseOperation = () => model.currentTraverseOperation;\n\n  // by default this class will traverse all of its\n  // preDelegateOperations, then call its delegate render passes\n  // the traverse all of its postDelegateOperations\n  // any of those three arrays can be empty\n  publicAPI.traverse = function (viewNode) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = parent;\n    model.preDelegateOperations.forEach(val => {\n      publicAPI.setCurrentOperation(val);\n      viewNode.traverse(publicAPI);\n    });\n    model.delegates.forEach(val => {\n      val.traverse(viewNode, publicAPI);\n    });\n    model.postDelegateOperations.forEach(val => {\n      publicAPI.setCurrentOperation(val);\n      viewNode.traverse(publicAPI);\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  delegates: [],\n  currentOperation: null,\n  preDelegateOperations: [],\n  postDelegateOperations: [],\n  currentParent: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['currentOperation']);\n  macro.setGet(publicAPI, model, ['delegates', '_currentParent', 'preDelegateOperations', 'postDelegateOperations']);\n  macro.moveToProtected(publicAPI, model, ['currentParent']);\n\n  // Object methods\n  vtkRenderPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkRenderPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderPass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkRenderPass$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkViewNode from './ViewNode.js';\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindowViewNode is intended to be a superclass for all api specific\n// RenderWindows. It is intended to define a common API that can be invoked\n// upon an api specific render window and provide some common method\n// implementations. If your application requires communicating with an api specific\n// view try to limit such interactions to methods defined in this class.\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindowViewNode methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderWindowViewNode(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindowViewNode');\n  publicAPI.getViewNodeFactory = () => null;\n  publicAPI.getAspectRatio = () => model.size[0] / model.size[1];\n  publicAPI.getAspectRatioForRenderer = renderer => {\n    const viewport = renderer.getViewportByReference();\n    return model.size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * model.size[1]);\n  };\n  publicAPI.isInViewport = (x, y, viewport) => {\n    const vCoords = viewport.getViewportByReference();\n    const size = publicAPI.getFramebufferSize();\n    if (vCoords[0] * size[0] <= x && vCoords[2] * size[0] >= x && vCoords[1] * size[1] <= y && vCoords[3] * size[1] >= y) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getViewportSize = viewport => {\n    const vCoords = viewport.getViewportByReference();\n    const size = publicAPI.getFramebufferSize();\n    return [(vCoords[2] - vCoords[0]) * size[0], (vCoords[3] - vCoords[1]) * size[1]];\n  };\n  publicAPI.getViewportCenter = viewport => {\n    const size = publicAPI.getViewportSize(viewport);\n    return [size[0] * 0.5, size[1] * 0.5];\n  };\n  publicAPI.displayToNormalizedDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x / size[0], y / size[1], z];\n  };\n  publicAPI.normalizedDisplayToDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x * size[0], y * size[1], z];\n  };\n  publicAPI.worldToView = (x, y, z, renderer) => renderer.worldToView(x, y, z);\n  publicAPI.viewToWorld = (x, y, z, renderer) => renderer.viewToWorld(x, y, z);\n  publicAPI.worldToDisplay = (x, y, z, renderer) => {\n    const val = renderer.worldToView(x, y, z);\n    const dims = publicAPI.getViewportSize(renderer);\n    const val2 = renderer.viewToProjection(val[0], val[1], val[2], dims[0] / dims[1]);\n    const val3 = renderer.projectionToNormalizedDisplay(val2[0], val2[1], val2[2]);\n    return publicAPI.normalizedDisplayToDisplay(val3[0], val3[1], val3[2]);\n  };\n  publicAPI.displayToWorld = (x, y, z, renderer) => {\n    const val = publicAPI.displayToNormalizedDisplay(x, y, z);\n    const val2 = renderer.normalizedDisplayToProjection(val[0], val[1], val[2]);\n    const dims = publicAPI.getViewportSize(renderer);\n    const val3 = renderer.projectionToView(val2[0], val2[1], val2[2], dims[0] / dims[1]);\n    return renderer.viewToWorld(val3[0], val3[1], val3[2]);\n  };\n  publicAPI.normalizedDisplayToViewport = (x, y, z, renderer) => {\n    let vCoords = renderer.getViewportByReference();\n    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);\n    const coords = publicAPI.normalizedDisplayToDisplay(x, y, z);\n    return [coords[0] - vCoords[0] - 0.5, coords[1] - vCoords[1] - 0.5, z];\n  };\n  publicAPI.viewportToNormalizedViewport = (x, y, z, renderer) => {\n    const size = publicAPI.getViewportSize(renderer);\n    if (size && size[0] !== 0 && size[1] !== 0) {\n      return [x / (size[0] - 1.0), y / (size[1] - 1.0), z];\n    }\n    return [x, y, z];\n  };\n  publicAPI.normalizedViewportToViewport = (x, y, z, renderer) => {\n    const size = publicAPI.getViewportSize(renderer);\n    return [x * (size[0] - 1.0), y * (size[1] - 1.0), z];\n  };\n  publicAPI.displayToLocalDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x, size[1] - y - 1, z];\n  };\n  publicAPI.viewportToNormalizedDisplay = (x, y, z, renderer) => {\n    let vCoords = renderer.getViewportByReference();\n    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);\n    const x2 = x + vCoords[0] + 0.5;\n    const y2 = y + vCoords[1] + 0.5;\n    return publicAPI.displayToNormalizedDisplay(x2, y2, z);\n  };\n  publicAPI.getComputedDevicePixelRatio = () => model.size[0] / publicAPI.getContainerSize()[0];\n  publicAPI.getContainerSize = () => {\n    macro.vtkErrorMacro('not implemented');\n  };\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    macro.vtkErrorMacro('not implemented');\n  };\n  publicAPI.createSelector = () => {\n    macro.vtkErrorMacro('not implemented');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  size: undefined,\n  selector: undefined\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  if (!model.size) {\n    model.size = [300, 300];\n  }\n  macro.getArray(publicAPI, model, ['size'], 2);\n  macro.get(publicAPI, model, ['selector']);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkRenderWindowViewNode(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkRenderWindowViewNode');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderWindowViewNode$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkRenderWindowViewNode$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nconst PASS_TYPES = ['Build', 'Render'];\n\n// ----------------------------------------------------------------------------\n// vtkViewNode methods\n// ----------------------------------------------------------------------------\n\nfunction vtkViewNode(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkViewNode');\n\n  // Builds myself.\n  publicAPI.build = prepass => {};\n\n  // Renders myself\n  publicAPI.render = prepass => {};\n  publicAPI.traverse = renderPass => {\n    // we can choose to do special\n    // traversal here based on pass\n    const passTraversal = renderPass.getTraverseOperation();\n    const fn = publicAPI[passTraversal];\n    if (fn) {\n      fn(renderPass);\n      return;\n    }\n\n    // default traversal\n    publicAPI.apply(renderPass, true);\n    for (let index = 0; index < model.children.length; index++) {\n      model.children[index].traverse(renderPass);\n    }\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.apply = (renderPass, prepass) => {\n    const customRenderPass = publicAPI[renderPass.getOperation()];\n    if (customRenderPass) {\n      customRenderPass(prepass, renderPass);\n    }\n  };\n  publicAPI.getViewNodeFor = dataObject => {\n    if (model.renderable === dataObject) {\n      return publicAPI;\n    }\n    for (let index = 0; index < model.children.length; ++index) {\n      const child = model.children[index];\n      const vn = child.getViewNodeFor(dataObject);\n      if (vn) {\n        return vn;\n      }\n    }\n    return undefined;\n  };\n  publicAPI.getFirstAncestorOfType = type => {\n    if (!model._parent) {\n      return null;\n    }\n    if (model._parent.isA(type)) {\n      return model._parent;\n    }\n    return model._parent.getFirstAncestorOfType(type);\n  };\n  publicAPI.getLastAncestorOfType = type => {\n    if (!model._parent) {\n      return null;\n    }\n    const lastAncestor = model._parent.getLastAncestorOfType(type);\n    if (lastAncestor) {\n      return lastAncestor;\n    }\n    if (model._parent.isA(type)) {\n      return model._parent;\n    }\n    return null;\n  };\n\n  // add a missing node/child for the passed in renderables. This should\n  // be called only in between prepareNodes and removeUnusedNodes\n  publicAPI.addMissingNode = dobj => {\n    if (!dobj) {\n      return undefined;\n    }\n\n    // if found just mark as visited\n    const result = model._renderableChildMap.get(dobj);\n    if (result !== undefined) {\n      result.setVisited(true);\n      return result;\n    }\n\n    // otherwise create a node\n    const newNode = publicAPI.createViewNode(dobj);\n    if (newNode) {\n      newNode.setParent(publicAPI);\n      newNode.setVisited(true);\n      model._renderableChildMap.set(dobj, newNode);\n      model.children.push(newNode);\n      return newNode;\n    }\n    return undefined;\n  };\n\n  // add missing nodes/children for the passed in renderables. This should\n  // be called only in between prepareNodes and removeUnusedNodes\n  publicAPI.addMissingNodes = dataObjs => {\n    if (!dataObjs || !dataObjs.length) {\n      return;\n    }\n    for (let index = 0; index < dataObjs.length; ++index) {\n      const dobj = dataObjs[index];\n      publicAPI.addMissingNode(dobj);\n    }\n  };\n\n  // ability to add children that have no renderable use in the same manner\n  // as addMissingNodes This case is when a normal viewnode wants to\n  // delegate passes to a helper or child that doeasn't map to a clear\n  // renderable or any renderable\n  publicAPI.addMissingChildren = children => {\n    if (!children || !children.length) {\n      return;\n    }\n    for (let index = 0; index < children.length; ++index) {\n      const child = children[index];\n      const cindex = model.children.indexOf(child);\n      if (cindex === -1) {\n        child.setParent(publicAPI);\n        model.children.push(child);\n        const childRenderable = child.getRenderable();\n        if (childRenderable) {\n          model._renderableChildMap.set(childRenderable, child);\n        }\n      }\n      child.setVisited(true);\n    }\n  };\n  publicAPI.removeNode = child => {\n    const childIdx = model.children.findIndex(x => x === child);\n    if (childIdx < 0) {\n      return false;\n    }\n    const renderable = child.getRenderable();\n    if (renderable) {\n      model._renderableChildMap.delete(renderable);\n    }\n    child.delete();\n    model.children.splice(childIdx, 1);\n    return true;\n  };\n  publicAPI.prepareNodes = () => {\n    for (let index = 0; index < model.children.length; ++index) {\n      model.children[index].setVisited(false);\n    }\n  };\n  publicAPI.setVisited = val => {\n    model.visited = val;\n  };\n  publicAPI.removeUnusedNodes = () => {\n    let visitedCount = 0;\n    for (let index = 0; index < model.children.length; ++index) {\n      const child = model.children[index];\n      const visited = child.getVisited();\n      if (visited) {\n        model.children[visitedCount++] = child;\n        child.setVisited(false);\n      } else {\n        const renderable = child.getRenderable();\n        if (renderable) {\n          model._renderableChildMap.delete(renderable);\n        }\n        child.delete();\n      }\n    }\n    model.children.length = visitedCount;\n  };\n  publicAPI.createViewNode = dataObj => {\n    if (!model.myFactory) {\n      vtkErrorMacro('Cannot create view nodes without my own factory');\n      return null;\n    }\n    const ret = model.myFactory.createNode(dataObj);\n    if (ret) {\n      ret.setRenderable(dataObj);\n    }\n    return ret;\n  };\n  const parentDelete = publicAPI.delete;\n  publicAPI.delete = () => {\n    for (let i = 0; i < model.children.length; i++) {\n      model.children[i].delete();\n    }\n    parentDelete();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // _parent: null,\n  renderable: null,\n  myFactory: null,\n  children: [],\n  visited: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.event(publicAPI, model, 'event');\n  model._renderableChildMap = new Map();\n  macro.get(publicAPI, model, ['visited']);\n  macro.setGet(publicAPI, model, ['_parent', 'renderable', 'myFactory']);\n  macro.getArray(publicAPI, model, ['children']);\n  macro.moveToProtected(publicAPI, model, ['parent']);\n\n  // Object methods\n  vtkViewNode(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkViewNode');\n\n// ----------------------------------------------------------------------------\n\nvar vtkViewNode$1 = {\n  newInstance,\n  extend,\n  PASS_TYPES\n};\n\nexport { vtkViewNode$1 as default };\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkViewNodeFactory methods\n// ----------------------------------------------------------------------------\n\nfunction vtkViewNodeFactory(publicAPI, model) {\n  // Make sure our overrides is just for our instance not shared with everyone...\n  if (!model.overrides) {\n    model.overrides = {};\n  }\n\n  // Set our className\n  model.classHierarchy.push('vtkViewNodeFactory');\n  publicAPI.createNode = dataObject => {\n    if (dataObject.isDeleted()) {\n      return null;\n    }\n    let cpt = 0;\n    let className = dataObject.getClassName(cpt++);\n    let isObject = false;\n    const keys = Object.keys(model.overrides);\n    while (className && !isObject) {\n      if (keys.indexOf(className) !== -1) {\n        isObject = true;\n      } else {\n        className = dataObject.getClassName(cpt++);\n      }\n    }\n    if (!isObject) {\n      return null;\n    }\n    const vn = model.overrides[className]();\n    vn.setMyFactory(publicAPI);\n    return vn;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // overrides: {},\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n\n  // Object methods\n  vtkViewNodeFactory(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkViewNodeFactory');\n\n// ----------------------------------------------------------------------------\n\nvar vtkViewNodeFactory$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkViewNodeFactory$1 as default, extend, newInstance };\n","import { mat4 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  CoordinateSystem\n} = vtkProp;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');\n      if (model.propID === undefined) {\n        model.propID = model.WebGPURenderWindow.getUniquePropID();\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.getBufferShift = wgpuRen => {\n    publicAPI.getKeyMatrices(wgpuRen);\n    return model.bufferShift;\n  };\n  publicAPI.getKeyMatrices = wgpuRen => {\n    // has the actor or stabilization center changed?\n    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {\n      model.renderable.computeMatrix();\n      const mcwc = model.renderable.getMatrix();\n\n      // compute the net shift, only apply stabilized coords with world coordinates\n      model.bufferShift[0] = mcwc[3];\n      model.bufferShift[1] = mcwc[7];\n      model.bufferShift[2] = mcwc[11];\n      const center = wgpuRen.getStabilizedCenterByReference();\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        model.bufferShift[0] -= center[0];\n        model.bufferShift[1] -= center[1];\n        model.bufferShift[2] -= center[2];\n      }\n      mat4.transpose(model.keyMatrices.bcwc, mcwc);\n      if (model.renderable.getIsIdentity()) {\n        mat4.identity(model.keyMatrices.normalMatrix);\n      } else {\n        // we use bcwc BEFORE the translate below (just to get transposed mcvc)\n        mat4.copy(model.keyMatrices.normalMatrix, model.keyMatrices.bcwc);\n        // zero out translation\n        model.keyMatrices.normalMatrix[3] = 0.0;\n        model.keyMatrices.normalMatrix[7] = 0.0;\n        model.keyMatrices.normalMatrix[11] = 0.0;\n        mat4.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat4.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      }\n\n      // only need the buffer shift to get to world\n      mat4.translate(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]);\n\n      // to get to stabilized we also need the center\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        mat4.translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);\n      } else {\n        mat4.copy(model.keyMatrices.bcsc, model.keyMatrices.bcwc);\n      }\n      model.keyMatricesTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  keyMatricesTime: null,\n  keyMatrices: null,\n  propID: undefined,\n  bufferShift: undefined\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatricesTime = {};\n  macro.obj(model.keyMatricesTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    bcwc: new Float64Array(16),\n    bcsc: new Float64Array(16)\n  };\n  macro.get(publicAPI, model, ['propID', 'keyMatricesTime']);\n  model.bufferShift = [0, 0, 0, 0];\n\n  // Object methods\n  vtkWebGPUActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkActor', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { mat4 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  CoordinateSystem\n} = vtkProp;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUActor2D');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');\n      if (model.propID === undefined) {\n        model.propID = model.WebGPURenderWindow.getUniquePropID();\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.getBufferShift = wgpuRen => {\n    publicAPI.getKeyMatrices(wgpuRen);\n    return model.bufferShift;\n  };\n  publicAPI.getKeyMatrices = wgpuRen => {\n    // has the actor or stabilization center changed?\n    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {\n      // compute the net shift, only apply stabilized coords with world coordinates\n      model.bufferShift[0] = 0.0;\n      model.bufferShift[1] = 0.0;\n      model.bufferShift[2] = 0.0;\n      const center = wgpuRen.getStabilizedCenterByReference();\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        model.bufferShift[0] -= center[0];\n        model.bufferShift[1] -= center[1];\n        model.bufferShift[2] -= center[2];\n      }\n      mat4.identity(model.keyMatrices.bcwc);\n      mat4.identity(model.keyMatrices.normalMatrix);\n\n      // only meed the buffer shift to get to world\n      mat4.translate(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]);\n\n      // to get to stabilized we also need the center\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        mat4.translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);\n      } else {\n        mat4.copy(model.keyMatrices.bcsc, model.keyMatrices.bcwc);\n      }\n      model.keyMatricesTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  keyMatricesTime: null,\n  keyMatrices: null,\n  propID: undefined,\n  bufferShift: undefined\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatricesTime = {};\n  macro.obj(model.keyMatricesTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    bcwc: new Float64Array(16),\n    bcsc: new Float64Array(16)\n  };\n  macro.get(publicAPI, model, ['propID', 'keyMatricesTime']);\n  model.bufferShift = [0, 0, 0, 0];\n\n  // Object methods\n  vtkWebGPUActor2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkActor2D', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUBindGroup methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUBindGroup(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUBindGroup');\n  publicAPI.setBindables = bindables => {\n    // is there a difference between the old and new list?\n    if (model.bindables.length === bindables.length) {\n      let allMatch = true;\n      for (let i = 0; i < model.bindables.length; i++) {\n        if (model.bindables[i] !== bindables[i]) {\n          allMatch = false;\n        }\n      }\n      if (allMatch) {\n        return;\n      }\n    }\n\n    // there is a difference\n    model.bindables = bindables;\n    publicAPI.modified();\n  };\n  publicAPI.getBindGroupLayout = device => {\n    const entries = [];\n    for (let i = 0; i < model.bindables.length; i++) {\n      const entry = model.bindables[i].getBindGroupLayoutEntry();\n      entry.binding = i;\n      entries.push(entry);\n    }\n    return device.getBindGroupLayout({\n      entries\n    });\n  };\n  publicAPI.getBindGroup = device => {\n    // check mtime\n    let mtime = publicAPI.getMTime();\n    for (let i = 0; i < model.bindables.length; i++) {\n      const tm = model.bindables[i].getBindGroupTime().getMTime();\n      mtime = tm > mtime ? tm : mtime;\n    }\n    if (mtime < model.bindGroupTime.getMTime()) {\n      return model.bindGroup;\n    }\n    const entries = [];\n    for (let i = 0; i < model.bindables.length; i++) {\n      const entry = model.bindables[i].getBindGroupEntry();\n      entry.binding = i;\n      entries.push(entry);\n    }\n    model.bindGroup = device.getHandle().createBindGroup({\n      layout: publicAPI.getBindGroupLayout(device),\n      entries,\n      label: model.label\n    });\n    model.bindGroupTime.modified();\n    return model.bindGroup;\n  };\n  publicAPI.getShaderCode = pipeline => {\n    const lines = [];\n    const bgroup = pipeline.getBindGroupLayoutCount(model.label);\n    for (let i = 0; i < model.bindables.length; i++) {\n      lines.push(model.bindables[i].getShaderCode(i, bgroup));\n    }\n    return lines.join('\\n');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  label: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  model.bindables = [];\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'handle', 'sizeInBytes', 'usage']);\n  macro.setGet(publicAPI, model, ['label', 'device', 'arrayInformation']);\n  vtkWebGPUBindGroup(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUBindGroup$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUBindGroup$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './BufferManager/Constants.js';\n\n// methods we forward to the handle\nconst forwarded = ['getMappedRange', 'mapAsync', 'unmap'];\nfunction bufferSubData(device, destBuffer, destOffset, srcArrayBuffer) {\n  const byteCount = srcArrayBuffer.byteLength;\n  const srcBuffer = device.createBuffer({\n    size: byteCount,\n    /* eslint-disable no-undef */\n    usage: GPUBufferUsage.COPY_SRC,\n    /* eslint-enable no-undef */\n    mappedAtCreation: true\n  });\n  const arrayBuffer = srcBuffer.getMappedRange(0, byteCount);\n  new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer)); // memcpy\n  srcBuffer.unmap();\n  const encoder = device.createCommandEncoder();\n  encoder.copyBufferToBuffer(srcBuffer, 0, destBuffer, destOffset, byteCount);\n  const commandBuffer = encoder.finish();\n  const queue = device.queue;\n  queue.submit([commandBuffer]);\n  srcBuffer.destroy();\n}\n// ----------------------------------------------------------------------------\n// vtkWebGPUBufferManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUBuffer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUBuffer');\n  publicAPI.create = (sizeInBytes, usage) => {\n    model.handle = model.device.getHandle().createBuffer({\n      size: sizeInBytes,\n      usage,\n      label: model.label\n    });\n    model.sizeInBytes = sizeInBytes;\n    model.usage = usage;\n  };\n  publicAPI.write = data => {\n    bufferSubData(model.device.getHandle(), model.handle, 0, data.buffer);\n  };\n  publicAPI.createAndWrite = (data, usage) => {\n    model.handle = model.device.getHandle().createBuffer({\n      size: data.byteLength,\n      usage,\n      mappedAtCreation: true,\n      label: model.label\n    });\n    model.sizeInBytes = data.byteLength;\n    model.usage = usage;\n    new Uint8Array(model.handle.getMappedRange()).set(new Uint8Array(data.buffer)); // memcpy\n    model.handle.unmap();\n  };\n\n  // simple forwarders\n  for (let i = 0; i < forwarded.length; i++) {\n    publicAPI[forwarded[i]] = function () {\n      return model.handle[forwarded[i]](...arguments);\n    };\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  sizeInBytes: 0,\n  strideInBytes: 0,\n  arrayInformation: null,\n  usage: null,\n  label: null,\n  sourceTime: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['handle', 'sizeInBytes', 'usage']);\n  macro.setGet(publicAPI, model, ['strideInBytes', 'device', 'arrayInformation', 'label', 'sourceTime']);\n  vtkWebGPUBuffer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUBuffer$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkWebGPUBuffer$1 as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, e as setGet, c as macro, a as newTypedArray } from '../../macros2.js';\nimport { j as cross, l as normalize } from '../../Common/Core/Math/index.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkWebGPUBuffer from './Buffer.js';\nimport vtkWebGPUIndexBuffer from './IndexBuffer.js';\nimport vtkWebGPUTypes from './Types.js';\nimport Constants from './BufferManager/Constants.js';\n\nconst {\n  BufferUsage\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\nconst {\n  VtkDataTypes\n} = vtkDataArray;\n\n// the webgpu constants all show up as undefined\n/* eslint-disable no-undef */\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {};\nfunction _getFormatForDataArray(dataArray) {\n  let format;\n  switch (dataArray.getDataType()) {\n    case VtkDataTypes.UNSIGNED_CHAR:\n      format = 'uint8';\n      break;\n    case VtkDataTypes.FLOAT:\n      format = 'float32';\n      break;\n    case VtkDataTypes.UNSIGNED_INT:\n      format = 'uint32';\n      break;\n    case VtkDataTypes.INT:\n      format = 'sint32';\n      break;\n    case VtkDataTypes.DOUBLE:\n      format = 'float32';\n      break;\n    case VtkDataTypes.UNSIGNED_SHORT:\n      format = 'uint16';\n      break;\n    case VtkDataTypes.SHORT:\n      format = 'sin16';\n      break;\n    default:\n      format = 'float32';\n      break;\n  }\n  switch (dataArray.getNumberOfComponents()) {\n    case 2:\n      format += 'x2';\n      break;\n    case 3:\n      // only 32bit types support x3\n      if (!format.includes('32')) {\n        vtkErrorMacro(`unsupported x3 type for ${format}`);\n      }\n      format += 'x3';\n      break;\n    case 4:\n      format += 'x4';\n      break;\n  }\n  return format;\n}\nfunction packArray(indexBuffer, inArrayData, numComp, outputType, options) {\n  const result = {};\n  const flatSize = indexBuffer.getFlatSize();\n  if (!flatSize) {\n    return result;\n  }\n\n  // setup shift and scale\n  let shift = [0.0, 0.0, 0.0, 0.0];\n  if (options.shift) {\n    if (options.shift.length) {\n      shift = options.shift;\n    } else {\n      shift.fill(options.shift);\n    }\n  }\n  let scale = [1.0, 1.0, 1.0, 1.0];\n  if (options.scale) {\n    if (options.scale.length) {\n      scale = options.scale;\n    } else {\n      scale.fill(options.scale);\n    }\n  }\n  const packExtra = Object.prototype.hasOwnProperty.call(options, 'packExtra') ? options.packExtra : false;\n  let addAPoint;\n  let vboidx = 0;\n  const stride = numComp + (packExtra ? 1 : 0);\n  const packedVBO = newTypedArray(outputType, flatSize * stride);\n\n  // pick the right function based on point versus cell data\n  let flatIdMap = indexBuffer.getFlatIdToPointId();\n  if (options.cellData) {\n    flatIdMap = indexBuffer.getFlatIdToCellId();\n  }\n\n  // add data based on number of components\n  if (numComp === 1) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n    };\n  } else if (numComp === 2) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n    };\n  } else if (numComp === 3 && !packExtra) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n    };\n  } else if (numComp === 3 && packExtra) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n      packedVBO[vboidx++] = scale[3] * 1.0 + shift[3];\n    };\n  } else if (numComp === 4) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n      packedVBO[vboidx++] = scale[3] * inArrayData[i + 3] + shift[3];\n    };\n  }\n\n  // for each entry in the flat array process it\n  for (let index = 0; index < flatSize; index++) {\n    const inArrayId = numComp * flatIdMap[index];\n    addAPoint(inArrayId);\n  }\n  result.nativeArray = packedVBO;\n  return result;\n}\nfunction getNormal(pointData, i0, i1, i2) {\n  const v1 = [pointData[i2 * 3] - pointData[i1 * 3], pointData[i2 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i2 * 3 + 2] - pointData[i1 * 3 + 2]];\n  const v2 = [pointData[i0 * 3] - pointData[i1 * 3], pointData[i0 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i0 * 3 + 2] - pointData[i1 * 3 + 2]];\n  const result = [];\n  cross(v1, v2, result);\n  normalize(result);\n  return result;\n}\nfunction generateNormals(cellArray, pointArray) {\n  const pointData = pointArray.getData();\n  const cellArrayData = cellArray.getData();\n  if (!cellArrayData || !pointData) {\n    return null;\n  }\n\n  // return a cellArray of normals\n  const packedVBO = new Int8Array(cellArray.getNumberOfCells() * 4);\n  const size = cellArrayData.length;\n  let vboidx = 0;\n  for (let index = 0; index < size;) {\n    const normal = getNormal(pointData, cellArrayData[index + 1], cellArrayData[index + 2], cellArrayData[index + 3]);\n    packedVBO[vboidx++] = 127 * normal[0];\n    packedVBO[vboidx++] = 127 * normal[1];\n    packedVBO[vboidx++] = 127 * normal[2];\n    packedVBO[vboidx++] = 127;\n    index += cellArrayData[index] + 1;\n  }\n  return packedVBO;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUBufferManager methods\n// ----------------------------------------------------------------------------\nfunction vtkWebGPUBufferManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUBufferManager');\n  function _createBuffer(req) {\n    // if a dataArray is provided set the nativeArray\n    if (req.dataArray && !req.nativeArray) {\n      req.nativeArray = req.dataArray.getData();\n    }\n    let buffer;\n    let gpuUsage;\n\n    // handle index buffers\n    if (req.usage === BufferUsage.Index) {\n      // todo change to FlattenedIndex to be more clear\n      buffer = vtkWebGPUIndexBuffer.newInstance({\n        label: req.label\n      });\n      buffer.setDevice(model.device);\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.buildIndexBuffer(req);\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n      buffer.setArrayInformation([{\n        format: req.format\n      }]);\n    }\n\n    // create one if not done already\n    if (!buffer) {\n      buffer = vtkWebGPUBuffer.newInstance({\n        label: req.label\n      });\n      buffer.setDevice(model.device);\n    }\n\n    // handle uniform buffers\n    if (req.usage === BufferUsage.UniformArray) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // handle storage buffers\n    if (req.usage === BufferUsage.Storage) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // handle textures\n    if (req.usage === BufferUsage.Texture) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.COPY_SRC;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // all of the below types that have gpuUsage = VERTEX require format\n    // to be provided.\n\n    // handle point data\n    if (req.usage === BufferUsage.PointArray) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      const arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);\n      const result = packArray(req.indexBuffer, req.dataArray.getData(), req.dataArray.getNumberOfComponents(), arrayType, {\n        packExtra: req.packExtra,\n        shift: req.shift,\n        scale: req.scale,\n        cellData: req.cellData,\n        cellOffset: req.cellOffset\n      });\n      buffer.createAndWrite(result.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format,\n        interpolation: req.cellData ? 'flat' : 'perspective'\n      }]);\n    }\n\n    // handle normals from points, snorm8x4\n    if (req.usage === BufferUsage.NormalsFromPoints) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      const arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);\n      const normals = generateNormals(req.cells, req.dataArray);\n      const result = packArray(req.indexBuffer, normals, 4, arrayType, {\n        cellData: true\n      });\n      buffer.createAndWrite(result.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format,\n        interpolation: 'flat'\n      }]);\n    }\n    if (req.usage === BufferUsage.RawVertex) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format\n      }]);\n    }\n    buffer.setSourceTime(req.time);\n    return buffer;\n  }\n\n  // is the buffer already present?\n  publicAPI.hasBuffer = hash => model.device.hasCachedObject(hash);\n  publicAPI.getBuffer = req => {\n    // if we have a source the get/create/cache the buffer\n    if (req.hash) {\n      return model.device.getCachedObject(req.hash, _createBuffer, req);\n    }\n    return _createBuffer(req);\n  };\n  publicAPI.getBufferForPointArray = (dataArray, indexBuffer) => {\n    const format = _getFormatForDataArray(dataArray);\n    const buffRequest = {\n      hash: `${dataArray.getMTime()}I${indexBuffer.getMTime()}${format}`,\n      usage: BufferUsage.PointArray,\n      format,\n      dataArray,\n      indexBuffer\n    };\n    return publicAPI.getBuffer(buffRequest);\n  };\n  publicAPI.getFullScreenQuadBuffer = () => {\n    if (model.fullScreenQuadBuffer) {\n      return model.fullScreenQuadBuffer;\n    }\n    model.fullScreenQuadBuffer = vtkWebGPUBuffer.newInstance();\n    model.fullScreenQuadBuffer.setDevice(model.device);\n\n    // prettier-ignore\n    const array = new Float32Array([-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0]);\n    model.fullScreenQuadBuffer.createAndWrite(array, GPUBufferUsage.VERTEX);\n    model.fullScreenQuadBuffer.setStrideInBytes(12);\n    model.fullScreenQuadBuffer.setArrayInformation([{\n      offset: 0,\n      format: 'float32x3'\n    }]);\n    return model.fullScreenQuadBuffer;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  fullScreenQuadBuffer: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  obj(publicAPI, model);\n  setGet(publicAPI, model, ['device']);\n  vtkWebGPUBufferManager(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUBufferManager$1 = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\n\nexport { STATIC, vtkWebGPUBufferManager$1 as default, extend, newInstance };\n","const BufferUsage = {\n  Verts: 0,\n  Lines: 1,\n  Triangles: 2,\n  Strips: 3,\n  LinesFromStrips: 4,\n  LinesFromTriangles: 5,\n  Points: 6,\n  UniformArray: 7,\n  PointArray: 8,\n  NormalsFromPoints: 9,\n  Texture: 10,\n  RawVertex: 11,\n  Storage: 12,\n  Index: 13\n};\nconst PrimitiveTypes = {\n  Start: 0,\n  Points: 0,\n  Lines: 1,\n  Triangles: 2,\n  TriangleStrips: 3,\n  TriangleEdges: 4,\n  TriangleStripEdges: 5,\n  End: 6\n};\nvar Constants = {\n  BufferUsage,\n  PrimitiveTypes\n};\n\nexport { BufferUsage, PrimitiveTypes, Constants as default };\n","import { mat4 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUCamera');\n  publicAPI.getProjectionMatrix = (outMat, aspect, cRange, windowCenter) => {\n    mat4.identity(outMat);\n    if (model.renderable.getParallelProjection()) {\n      // set up a rectangular parallelipiped\n      const parallelScale = model.renderable.getParallelScale();\n      const width = parallelScale * aspect;\n      const height = parallelScale;\n      const xmin = (windowCenter[0] - 1.0) * width;\n      const xmax = (windowCenter[0] + 1.0) * width;\n      const ymin = (windowCenter[1] - 1.0) * height;\n      const ymax = (windowCenter[1] + 1.0) * height;\n      const xr = 1.0 / (xmax - xmin);\n      const yr = 1.0 / (ymax - ymin);\n      outMat[0] = 2.0 * xr;\n      outMat[5] = 2.0 * yr;\n      outMat[10] = 1.0 / (cRange[1] - cRange[0]);\n      outMat[12] = (xmax + xmin) * xr;\n      outMat[13] = (ymax + ymin) * yr;\n      outMat[14] = cRange[1] / (cRange[1] - cRange[0]);\n    } else {\n      const tmp = Math.tan(Math.PI * model.renderable.getViewAngle() / 360.0);\n      let width;\n      let height;\n      if (model.renderable.getUseHorizontalViewAngle() === true) {\n        width = cRange[0] * tmp;\n        height = cRange[0] * tmp / aspect;\n      } else {\n        width = cRange[0] * tmp * aspect;\n        height = cRange[0] * tmp;\n      }\n      const xmin = (windowCenter[0] - 1.0) * width;\n      const xmax = (windowCenter[0] + 1.0) * width;\n      const ymin = (windowCenter[1] - 1.0) * height;\n      const ymax = (windowCenter[1] + 1.0) * height;\n      outMat[0] = 2.0 * cRange[0] / (xmax - xmin);\n      outMat[5] = 2.0 * cRange[0] / (ymax - ymin);\n      outMat[12] = (xmin + xmax) / (xmax - xmin);\n      outMat[13] = (ymin + ymax) / (ymax - ymin);\n      outMat[10] = 0.0;\n      outMat[14] = cRange[0];\n      outMat[11] = -1.0;\n      outMat[15] = 0.0;\n    }\n  };\n  publicAPI.convertToOpenGLDepth = val => {\n    if (model.renderable.getParallelProjection()) {\n      return 1.0 - val;\n    }\n    const cRange = model.renderable.getClippingRangeByReference();\n    let zval = -cRange[0] / val;\n    zval = (cRange[0] + cRange[1]) / (cRange[1] - cRange[0]) + 2.0 * cRange[0] * cRange[1] / (zval * (cRange[1] - cRange[0]));\n    return 0.5 * zval + 0.5;\n  };\n  publicAPI.getKeyMatrices = webGPURenderer => {\n    // has the camera changed?\n    const ren = webGPURenderer.getRenderable();\n    const webGPURenderWindow = webGPURenderer.getParent();\n    if (Math.max(webGPURenderWindow.getMTime(), publicAPI.getMTime(), ren.getMTime(), model.renderable.getMTime(), webGPURenderer.getStabilizedTime()) > model.keyMatrixTime.getMTime()) {\n      const wcvc = model.renderable.getViewMatrix();\n      mat4.copy(model.keyMatrices.normalMatrix, wcvc);\n      // zero out translation\n      model.keyMatrices.normalMatrix[3] = 0.0;\n      model.keyMatrices.normalMatrix[7] = 0.0;\n      model.keyMatrices.normalMatrix[11] = 0.0;\n      mat4.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      mat4.transpose(model.keyMatrices.wcvc, wcvc);\n      const center = webGPURenderer.getStabilizedCenterByReference();\n      mat4.translate(model.keyMatrices.scvc, model.keyMatrices.wcvc, center);\n      const aspectRatio = webGPURenderer.getAspectRatio();\n      const cRange = model.renderable.getClippingRangeByReference();\n      publicAPI.getProjectionMatrix(model.keyMatrices.vcpc, aspectRatio, cRange, model.renderable.getWindowCenterByReference());\n      mat4.multiply(model.keyMatrices.scpc, model.keyMatrices.vcpc, model.keyMatrices.scvc);\n      mat4.invert(model.keyMatrices.pcsc, model.keyMatrices.scpc);\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  keyMatrixTime: null,\n  keyMatrices: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime);\n\n  // values always get set by the get method\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    vcpc: new Float64Array(16),\n    pcsc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    scpc: new Float64Array(16),\n    scvc: new Float64Array(16)\n  };\n\n  // Build VTK API\n  macro.setGet(publicAPI, model, ['keyMatrixTime']);\n\n  // Object methods\n  vtkWebGPUCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkCamera', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { mat3, mat4 } from 'gl-matrix';\nimport { n as newInstance$1, e as setGet } from '../../macros2.js';\nimport vtkMapper from '../Core/Mapper.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkProperty2D from '../Core/Property2D.js';\nimport vtkTexture from '../Core/Texture.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\nimport vtkWebGPUTypes from './Types.js';\n\nconst {\n  BufferUsage,\n  PrimitiveTypes\n} = vtkWebGPUBufferManager;\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  ScalarMode\n} = vtkMapper;\nconst {\n  CoordinateSystem\n} = vtkProp;\nconst {\n  DisplayLocation\n} = vtkProperty2D;\nconst vtkWebGPUPolyDataVS = `\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@vertex\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : vertexOutput;\n\n  var vertex: vec4<f32> = vertexBC;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  //VTK::Position::Impl\n\n  return output;\n}\n`;\nconst vtkWebGPUPolyDataFS = `\nstruct PBRData {\n  diffuse: vec3<f32>,\n  specular: vec3<f32>,\n}\n\n// Dot product with the max already in it\nfn mdot(a: vec3<f32>, b: vec3<f32>) -> f32 {\n  return max(0.0, dot(a, b));\n}\n// Dot product with a max in it that does not allow for negative values\n// Physically based rendering is accurate as long as normals are accurate,\n// however this is pretty often not the case. In order to prevent negative\n// values from ruining light calculations and creating zones of zero light,\n// this remapping is used, which smoothly clamps the dot product between\n// zero and one while still maintaining a good amount of accuracy.\nfn cdot(a: vec3<f32>, b: vec3<f32>) -> f32 {\n  var d: f32 = max(0.0, dot(a, b));\n  d = pow((d + 1.0) / 2.0, 2.6);\n  return d;\n}\n\n// Lambertian diffuse model\nfn lambertDiffuse(base: vec3<f32>, N: vec3<f32>, L: vec3<f32>) -> vec3<f32> {\n  var pi: f32 = 3.14159265359; \n  var NdotL: f32 = mdot(N, L);\n  NdotL = pow(NdotL, 1.5);\n  return (base/pi)*NdotL;\n}\n\n// Yasuhiro Fujii improvement on the Oren-Nayar model\n// https://mimosa-pudica.net/improved-oren-nayar.html\n// p is surface color, o is roughness\nfn fujiiOrenNayar(p: vec3<f32>, o: f32, N: vec3<f32>, L: vec3<f32>, V: vec3<f32>) -> vec3<f32> {\n  var invpi: f32 = 0.31830988618; // 1/pi\n\n  var o2 = o*o;\n  var NdotL: f32 = mdot(N, L);\n  NdotL = pow(NdotL, 1.5); // Less physically accurate, but hides the \"seams\" between lights better\n\n  var NdotV: f32 = mdot(N, V);\n  var LdotV: f32 = mdot(L, V);\n\n  var s: f32 = LdotV - NdotL*NdotV;\n  var t: f32 = mix(1.0, max(NdotL, NdotV), step(0.0, s)); // Mix with step is the equivalent of an if statement\n  var A: vec3<f32> = 0.5*(o2 / (o2 + 0.33)) + 0.17*p*(o2 / (o2 + 0.13));\n  A = invpi*(1 - A);\n  var B: f32 = 0.45*(o2 / (o2 + 0.09));\n  B = invpi*B;\n\n  return p*NdotL*(A + B*(s/t));\n}\n\n// Fresnel portion of BRDF (IOR only, simplified)\nfn schlickFresnelIOR(V: vec3<f32>, N: vec3<f32>, ior: f32, k: f32) -> f32 {\n  var NdotV: f32 = mdot(V, N);\n  var F0: f32 = (pow((ior - 1.0), 2.0) + k*k) / (pow((ior + 1.0), 2.0) + k*k); // This takes into account the roughness, which the other one does not\n  return F0 + (1.0 - F0) * pow((1.0-NdotV), 5.0);\n}\n\n// Fresnel portion of BRDF (Color ior, better)\nfn schlickFresnelRGB(V: vec3<f32>, N: vec3<f32>, F0: vec3<f32>) -> vec3<f32> {\n  var NdotV: f32 = mdot(V, N);\n  return F0 + (1.0 - F0) * pow((1-NdotV), 5.0);\n}\n\n// Normal portion of BRDF\n// https://learnopengl.com/PBR/Theory\n// Trowbridge-Reitz GGX functions: normal, halfway, roughness^2\nfn trGGX(N: vec3<f32>, H: vec3<f32>, a: f32) -> f32 {\n  var pi: f32 = 3.14159265359; \n\n  var a2: f32 = a*a;\n  var NdotH = mdot(N, H);\n  var NdotH2 = NdotH*NdotH;\n  \n  var denom: f32 = NdotH2 * (a2 - 1.0) + 1.0;\n\n  return a2 / max((pi*denom*denom), 0.000001);\n}\n\n// A VERY bad approximation of anisotropy. Real anisotropic calculations require tangent and bitangent\nfn anisotrophicTrGGX(N: vec3<f32>, H: vec3<f32>, O: vec3<f32>, s: f32, a: f32) -> f32 {\n  var Op: vec3<f32> = (rendererUBO.WCVCNormals * vec4<f32>(normalize(O) * s, 0.)).xyz;\n\n  var ggx1: f32 = trGGX(N + Op*s, H, a);\n  var ggx2: f32 = trGGX(N - Op*s, H, a);\n  return (0.5 * ggx1 + 0.5 * ggx2);\n}\n\n// Geometry portion of BRDF\nfn schlickGGX(N: vec3<f32>, X: vec3<f32>, k: f32) -> f32 {\n  var NdotX = cdot(N, X);\n  return NdotX / max(0.000001, (NdotX*(1.0-k) + k));\n}\n\nfn smithSurfaceRoughness(N: vec3<f32>, V: vec3<f32>, L: vec3<f32>, k: f32) -> f32 {\n  var ggx1: f32 = min(1.0, schlickGGX(N, V, k));\n  var ggx2: f32 = min(1.0, schlickGGX(N, L, k));\n  return ggx1*ggx2;\n}\n\n// BRDF Combination\nfn cookTorrance(D: f32, F: f32, G: f32, N: vec3<f32>, V: vec3<f32>, L: vec3<f32>) -> f32 {\n  var num: f32 = D*F*G;\n  var denom: f32 = 4*cdot(V, N)*cdot(L, N);\n\n  return num / max(denom, 0.000001);\n}\n\n// Different lighting calculations for different light sources\nfn calcDirectionalLight(N: vec3<f32>, V: vec3<f32>, ior: f32, roughness: f32, metallic: f32, direction: vec3<f32>, color: vec3<f32>, base: vec3<f32>) -> PBRData {  \n  var L: vec3<f32> = normalize(direction); // Light Vector\n  var H: vec3<f32> = normalize(L + V); // Halfway Vector\n\n  var alpha = roughness*roughness;\n  var k: f32 = alpha*alpha / 2;\n\n  var D: f32 = trGGX(N, H, alpha); // Distribution\n  // var F: f32 = schlickFresnelIOR(V, N, ior, k); // Fresnel\n  var G: f32 = smithSurfaceRoughness(N, V, L, k); // Geometry\n\n  var brdf: f32 = cookTorrance(D, 1.0, G, N, V, L); // Fresnel term is replaced with 1 because it is added later\n  var incoming: vec3<f32> = color;\n  var angle: f32 = mdot(L, N);\n  angle = pow(angle, 1.5);\n\n  var specular: vec3<f32> = brdf*incoming*angle;\n  // Oren-Nayar gives a clay-like effect when fully rough which some people may not want, so it might be better to give a separate\n  // control property for the diffuse vs specular roughness\n  var diffuse: vec3<f32> = incoming*fujiiOrenNayar(base, roughness, N, L, V); \n  // Stores the specular and diffuse separately to allow for finer post processing\n  var out = PBRData(diffuse, specular);\n  \n  return out; // Returns angle along with color of light so the final color can be multiplied by angle as well (creates black areas)\n}\n\n// TODO: find some way to reduce the number of arguments going in here\nfn calcPointLight(N: vec3<f32>, V: vec3<f32>, fragPos: vec3<f32>, ior: f32, roughness: f32, metallic: f32, position: vec3<f32>, color: vec3<f32>, base: vec3<f32>) -> PBRData {\n  var L: vec3<f32> = normalize(position - fragPos); // Light Vector\n  var H: vec3<f32> = normalize(L + V); // Halfway Vector\n  var dist = distance(position, fragPos);\n\n  var alpha = roughness*roughness;\n  var k: f32 = alpha*alpha / 2.0; // could also be pow(alpha + 1.0, 2) / 8\n\n  var D: f32 = trGGX(N, H, alpha); // Distribution\n  // var F: f32 = schlickFresnelIOR(V, N, ior, k); // Fresnel\n  var G: f32 = smithSurfaceRoughness(N, V, L, k); // Geometry\n\n  var brdf: f32 = cookTorrance(D, 1.0, G, N, V, L);\n  var incoming: vec3<f32> = color * (1.0 / (dist*dist));\n  var angle: f32 = mdot(L, N);\n  angle = pow(angle, 1.5); // Smoothing factor makes it less accurate, but reduces ugly \"seams\" bewteen light sources\n\n  var specular: vec3<f32> = brdf*incoming*angle;\n  var diffuse: vec3<f32> = incoming*fujiiOrenNayar(base, roughness, N, L, V);\n\n  // Stores the specular and diffuse separately to allow for finer post processing\n  // Could also be done (propably more properly) with a struct\n  var out = PBRData(diffuse, specular);\n  \n  return out; // Returns angle along with color of light so the final color can be multiplied by angle as well (creates black areas)\n}\n\n// For a reason unknown to me, spheres dont seem to behave propperly with head-on spot lights\nfn calcSpotLight(N: vec3<f32>, V: vec3<f32>, fragPos: vec3<f32>, ior: f32, roughness: f32, metallic: f32, position: vec3<f32>, direction: vec3<f32>, cones: vec2<f32>, color: vec3<f32>, base: vec3<f32>) -> PBRData {\n  var L: vec3<f32> = normalize(position - fragPos);\n  var H: vec3<f32> = normalize(L + V); // Halfway Vector\n  var dist = distance(position, fragPos);\n\n  var alpha = roughness*roughness;\n  var k: f32 = alpha*alpha / 2.0; // could also be pow(alpha + 1.0, 2) / 8\n\n  var D: f32 = trGGX(N, H, alpha); // Distribution\n  // var F: f32 = schlickFresnelIOR(V, N, ior, k); // Fresnel\n  var G: f32 = smithSurfaceRoughness(N, V, L, k); // Geometry\n\n  var brdf: f32 = cookTorrance(D, 1.0, G, N, V, L);\n  \n  // Cones.x is the inner phi and cones.y is the outer phi\n  var theta: f32 = mdot(normalize(direction), L);\n  var epsilon: f32 = cones.x - cones.y;\n  var intensity: f32 = (theta - cones.y) / epsilon;\n  intensity = clamp(intensity, 0.0, 1.0);\n  intensity /= dist*dist;\n\n  var incoming: vec3<f32> = color * intensity;\n\n  var angle: f32 = mdot(L, N);\n  angle = pow(angle, 1.5); // Smoothing factor makes it less accurate, but reduces ugly \"seams\" bewteen light sources\n\n  var specular: vec3<f32> = brdf*incoming*angle;\n  var diffuse: vec3<f32> = incoming*fujiiOrenNayar(base, roughness, N, L, V);\n\n  // Stores the specular and diffuse separately to allow for finer post processing\n  // Could also be done (propably more properly) with a struct\n  var out = PBRData(diffuse, specular);\n  \n  return out; // Returns angle along with color of light so the final color can be multiplied by angle as well (creates black areas)\n}\n\n// Environment mapping stuff\n// Takes in a vector and converts it to an equivalent coordinate in a rectilinear texture. Should be replaced with cubemaps at some point\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\n  var tau: f32 = 6.28318530718;\n  var pi: f32 = 3.14159265359;\n  var out: vec2<f32> = vec2<f32>(0.0);\n\n  out.x = atan2(dir.z, dir.x) / tau;\n  out.x += 0.5;\n\n  var phix: f32 = length(vec2(dir.x, dir.z));\n  out.y = atan2(dir.y, phix) / pi + 0.5;\n\n  return out;\n}\n\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::TCoord::Dec\n\n// optional surface normal declaration\n//VTK::Normal::Dec\n\n//VTK::Select::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  // Temporary ambient, diffuse, and opacity\n  var ambientColor: vec4<f32> = mapperUBO.AmbientColor;\n  var diffuseColor: vec4<f32> = mapperUBO.DiffuseColor;\n  var opacity: f32 = mapperUBO.Opacity;\n\n  // This should be declared somewhere else\n  var _diffuseMap: vec4<f32> = vec4<f32>(1.0);\n  var _roughnessMap: vec4<f32> = vec4<f32>(1.0);\n  var _metallicMap: vec4<f32> = vec4<f32>(1.0);\n  var _normalMap: vec4<f32> = vec4<f32>(0.0, 0.0, 1.0, 0.0); // normal map was setting off the normal vector detection in fragment\n  var _ambientOcclusionMap: vec4<f32> = vec4<f32>(1.);\n  var _emissionMap: vec4<f32> = vec4<f32>(0.);\n\n  //VTK::Color::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Normal::Impl\n\n  var computedColor: vec4<f32> = vec4<f32>(diffuseColor.rgb, 1.0);\n\n  //VTK::Light::Impl\n\n  //VTK::Select::Impl\n\n  if (computedColor.a == 0.0) { discard; };\n\n  //VTK::Position::Impl\n\n  //VTK::RenderEncoder::Impl\n\n  return output;\n}\n`;\nfunction isEdges(hash) {\n  // edge pipelines have \"edge\" in them\n  return hash.indexOf('edge') >= 0;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUCellArrayMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCellArrayMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUCellArrayMapper');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (model.is2D) {\n        model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor2D');\n        model.forceZValue = true;\n      } else {\n        model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');\n        model.forceZValue = false;\n      }\n      model.coordinateSystem = model.WebGPUActor.getRenderable().getCoordinateSystem();\n      model.useRendererMatrix = model.coordinateSystem !== CoordinateSystem.DISPLAY;\n      model.WebGPURenderer = model.WebGPUActor.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      model.device = model.WebGPURenderWindow.getDevice();\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = prepass => {\n    if (prepass) {\n      publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n      model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n    }\n  };\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n      model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n    }\n  };\n  publicAPI.updateUBO = () => {\n    // make sure the data is up to date\n    const actor = model.WebGPUActor.getRenderable();\n    const ppty = actor.getProperty();\n    const utime = model.UBO.getSendTime();\n    if (publicAPI.getMTime() > utime || ppty.getMTime() > utime || model.renderable.getMTime() > utime) {\n      // Matricies\n      const keyMats = model.WebGPUActor.getKeyMatrices(model.WebGPURenderer);\n      model.UBO.setArray('BCWCMatrix', keyMats.bcwc);\n      model.UBO.setArray('BCSCMatrix', keyMats.bcsc);\n      model.UBO.setArray('MCWCNormals', keyMats.normalMatrix);\n      if (model.is2D) {\n        model.UBO.setValue('ZValue', model.WebGPUActor.getRenderable().getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? 1.0 : 0.0);\n        const aColor = ppty.getColorByReference();\n        model.UBO.setValue('AmbientIntensity', 1.0);\n        model.UBO.setArray('DiffuseColor', [aColor[0], aColor[1], aColor[2], 1.0]);\n        model.UBO.setValue('DiffuseIntensity', 0.0);\n        model.UBO.setValue('SpecularIntensity', 0.0);\n      } else {\n        // Base Colors\n        let aColor = ppty.getAmbientColorByReference();\n        model.UBO.setValue('AmbientIntensity', ppty.getAmbient());\n        model.UBO.setArray('AmbientColor', [aColor[0], aColor[1], aColor[2], 1.0]);\n        model.UBO.setValue('DiffuseIntensity', ppty.getDiffuse());\n        aColor = ppty.getDiffuseColorByReference();\n        model.UBO.setArray('DiffuseColor', [aColor[0], aColor[1], aColor[2], 1.0]);\n        // Roughness\n        model.UBO.setValue('Roughness', ppty.getRoughness());\n        model.UBO.setValue('BaseIOR', ppty.getBaseIOR());\n        // Metallic\n        model.UBO.setValue('Metallic', ppty.getMetallic());\n        // Normal\n        model.UBO.setValue('NormalStrength', ppty.getNormalStrength());\n        // Emission\n        model.UBO.setValue('Emission', ppty.getEmission());\n        // Specular\n        model.UBO.setValue('SpecularIntensity', ppty.getSpecular());\n        aColor = ppty.getSpecularColorByReference();\n        model.UBO.setArray('SpecularColor', [aColor[0], aColor[1], aColor[2], 1.0]);\n      }\n      // Edge and line rendering\n      const aColor = ppty.getEdgeColorByReference?.();\n      if (aColor) {\n        model.UBO.setArray('EdgeColor', [aColor[0], aColor[1], aColor[2], 1.0]);\n      }\n      model.UBO.setValue('LineWidth', ppty.getLineWidth());\n      model.UBO.setValue('Opacity', ppty.getOpacity());\n      model.UBO.setValue('PropID', model.WebGPUActor.getPropID());\n      const device = model.WebGPURenderWindow.getDevice();\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n  publicAPI.haveWideLines = () => {\n    const actor = model.WebGPUActor.getRenderable();\n    const representation = actor.getProperty().getRepresentation();\n    if (actor.getProperty().getLineWidth() <= 1.0) {\n      return false;\n    }\n    if (model.primitiveType === PrimitiveTypes.Verts) {\n      return false;\n    }\n    if (model.primitiveType === PrimitiveTypes.Triangles || model.primitiveType === PrimitiveTypes.TriangleStrips) {\n      return representation === Representation.WIREFRAME;\n    }\n    return true;\n  };\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    if (!vDesc.hasOutput('vertexVC')) vDesc.addOutput('vec4<f32>', 'vertexVC');\n    let code = vDesc.getCode();\n    if (model.useRendererMatrix) {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var pCoord: vec4<f32> = rendererUBO.SCPCMatrix*mapperUBO.BCSCMatrix*vertexBC;', '    output.vertexVC = rendererUBO.SCVCMatrix * mapperUBO.BCSCMatrix * vec4<f32>(vertexBC.xyz, 1.0);', '//VTK::Position::Impl']).result;\n      if (model.forceZValue) {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['pCoord = vec4<f32>(pCoord.xyz/pCoord.w, 1.0);', 'pCoord.z = mapperUBO.ZValue;', '//VTK::Position::Impl']).result;\n      }\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var pCoord: vec4<f32> = mapperUBO.BCSCMatrix*vertexBC;', '    pCoord.x = 2.0* pCoord.x / rendererUBO.viewportSize.x - 1.0;', '    pCoord.y = 2.0* pCoord.y / rendererUBO.viewportSize.y - 1.0;', '    pCoord.z = 0.5 - 0.5 * pCoord.z;', '//VTK::Position::Impl']).result;\n      if (model.forceZValue) {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    pCoord.z = mapperUBO.ZValue;', '//VTK::Position::Impl']).result;\n      }\n    }\n    if (publicAPI.haveWideLines()) {\n      vDesc.addBuiltinInput('u32', '@builtin(instance_index) instanceIndex');\n      // widen the edge\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var tmpPos: vec4<f32> = pCoord;', '    var numSteps: f32 = ceil(mapperUBO.LineWidth - 1.0);', '    var offset: f32 = (mapperUBO.LineWidth - 1.0) * (f32(input.instanceIndex / 2u) - numSteps/2.0) / numSteps;', '    var tmpPos2: vec3<f32> = tmpPos.xyz / tmpPos.w;', '    tmpPos2.x = tmpPos2.x + 2.0 * (f32(input.instanceIndex) % 2.0) * offset / rendererUBO.viewportSize.x;', '    tmpPos2.y = tmpPos2.y + 2.0 * (f32(input.instanceIndex + 1u) % 2.0) * offset / rendererUBO.viewportSize.y;', '    tmpPos2.z = min(1.0, tmpPos2.z + 0.00001);',\n      // could become a setting\n      '    pCoord = vec4<f32>(tmpPos2.xyz * tmpPos.w, tmpPos.w);', '//VTK::Position::Impl']).result;\n    }\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    output.Position = pCoord;']).result;\n    vDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n  publicAPI.replaceShaderNormal = (hash, pipeline, vertexInput) => {\n    const normalBuffer = vertexInput.getBuffer('normalMC');\n    const actor = model.WebGPUActor.getRenderable();\n    if (normalBuffer) {\n      const vDesc = pipeline.getShaderDescription('vertex');\n      if (!vDesc.hasOutput('normalVC')) {\n        vDesc.addOutput('vec3<f32>', 'normalVC', normalBuffer.getArrayInformation()[0].interpolation);\n      }\n      if (!vDesc.hasOutput('tangentVC')) {\n        vDesc.addOutput('vec3<f32>', 'tangentVC', normalBuffer.getArrayInformation()[0].interpolation);\n      }\n      if (!vDesc.hasOutput('bitangentVC')) {\n        vDesc.addOutput('vec3<f32>', 'bitangentVC', normalBuffer.getArrayInformation()[0].interpolation);\n      }\n      let code = vDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  output.normalVC = normalize((rendererUBO.WCVCNormals * mapperUBO.MCWCNormals * normalMC).xyz);',\n      // This is just an approximation, but it happens to work extremely well\n      // It only works well for normals that are head on and not super angled though\n      // Definitely needs to be replaced\n      '  var c1: vec3<f32> = cross(output.normalVC, vec3<f32>(0, 0, 1));', '  var c2: vec3<f32> = cross(output.normalVC, vec3<f32>(0, 1, 0));', '  var tangent: vec3<f32> = mix(c1, c2, distance(c1, c2));', '  output.tangentVC = normalize(tangent);', '  output.bitangentVC = normalize(cross(output.normalVC, tangent));']).result;\n      vDesc.setCode(code);\n      const fDesc = pipeline.getShaderDescription('fragment');\n      code = fDesc.getCode();\n      if (actor.getProperty().getNormalTexture()) {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  var normal: vec3<f32> = input.normalVC;', '  if (!input.frontFacing) { normal = -normal; }', '  var tangent: vec3<f32> = input.tangentVC;', '  var bitangent: vec3<f32> = input.bitangentVC;', '  var TCVCMatrix: mat3x3<f32> = mat3x3<f32>(', '    tangent.x, bitangent.x, normal.x,', '    tangent.y, bitangent.y, normal.y,', '    tangent.z, bitangent.z, normal.z,', '  );', '  var mappedNormal: vec3<f32> = TCVCMatrix * (_normalMap.xyz * 2 - 1);', '  normal = mix(normal, mappedNormal, mapperUBO.NormalStrength);', '  normal = normalize(normal);']).result;\n      } else {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  var normal: vec3<f32> = input.normalVC;', '  if (!input.frontFacing) { normal = -normal; }', '  normal = normalize(normal);']).result;\n      }\n      fDesc.setCode(code);\n    }\n  };\n  model.shaderReplacements.set('replaceShaderNormal', publicAPI.replaceShaderNormal);\n\n  // we only apply lighting when there is a \"var normal\" declaration in the\n  // fragment shader code. That is the lighting trigger.\n  publicAPI.replaceShaderLight = (hash, pipeline, vertexInput) => {\n    if (hash.includes('sel')) return;\n    const vDesc = pipeline.getShaderDescription('vertex');\n    if (!vDesc.hasOutput('vertexVC')) vDesc.addOutput('vec4<f32>', 'vertexVC');\n    const renderer = model.WebGPURenderer.getRenderable();\n    const fDesc = pipeline.getShaderDescription('fragment');\n    let code = fDesc.getCode();\n\n    // Code that runs if the fragment shader includes normals\n    if (code.includes('var normal:') && model.useRendererMatrix && !isEdges(hash) && !model.is2D && !hash.includes('sel')) {\n      const lightingCode = [\n      // Constants\n      '  var pi: f32 = 3.14159265359;',\n      // Vectors needed for light calculations\n      '  var fragPos: vec3<f32> = vec3<f32>(input.vertexVC.xyz);', '  var V: vec3<f32> = mix(normalize(-fragPos), vec3<f32>(0, 0, 1), f32(rendererUBO.cameraParallel)); // View Vector',\n      // Values needed for light calculations\n      '  var baseColor: vec3<f32> = _diffuseMap.rgb * diffuseColor.rgb;', '  var roughness: f32 = max(0.000001, mapperUBO.Roughness * _roughnessMap.r);',\n      // Need to have a different way of sampling greyscale values aside from .r\n      '  var metallic: f32 = mapperUBO.Metallic * _metallicMap.r;', '  var alpha: f32 = roughness*roughness;', '  var ior: f32 = mapperUBO.BaseIOR;', '  var k: f32 = alpha*alpha / 2;',\n      // Split diffuse and specular components\n      '  var diffuse: vec3<f32> = vec3<f32>(0.);', '  var specular: vec3<f32> = vec3<f32>(0.);', '  var emission: vec3<f32> = _emissionMap.rgb * mapperUBO.Emission;',\n      // Summing diffuse and specular components of directional lights\n      '  {', '    var i: i32 = 0;', '    loop {', '      if !(i < rendererUBO.LightCount) { break; }', '      switch (i32(rendererLightSSBO.values[i].LightData.x)) {', '         // Point Light', '         case 0 {', '           var color: vec3<f32> = rendererLightSSBO.values[i].LightColor.rgb * rendererLightSSBO.values[i].LightColor.w;', '           var pos: vec3<f32> = (rendererLightSSBO.values[i].LightPos).xyz;', '           var calculated: PBRData = calcPointLight(normal, V, fragPos, ior, roughness, metallic, pos, color, baseColor);', '           diffuse += max(vec3<f32>(0), calculated.diffuse);', '           specular += max(vec3<f32>(0), calculated.specular);', '          }', '         // Directional light', '         case 1 {', '           var dir: vec3<f32> = (rendererUBO.WCVCNormals * vec4<f32>(normalize(rendererLightSSBO.values[i].LightDir.xyz), 0.)).xyz;', '           dir = normalize(dir);', '           var color: vec3<f32> = rendererLightSSBO.values[i].LightColor.rgb * rendererLightSSBO.values[i].LightColor.w;', '           var calculated: PBRData = calcDirectionalLight(normal, V, ior, roughness, metallic, dir, color, baseColor); // diffuseColor.rgb needs to be fixed with a more dynamic diffuse color', '           diffuse += max(vec3<f32>(0), calculated.diffuse);', '           specular += max(vec3<f32>(0), calculated.specular);', '         }', '         // Spot Light', '         case 2 {', '           var color: vec3<f32> = rendererLightSSBO.values[i].LightColor.rgb * rendererLightSSBO.values[i].LightColor.w;', '           var pos: vec3<f32> = (rendererLightSSBO.values[i].LightPos).xyz;', '           var dir: vec3<f32> = (rendererUBO.WCVCNormals * vec4<f32>(normalize(rendererLightSSBO.values[i].LightDir.xyz), 0.)).xyz;', '           dir = normalize(dir);', '           var cones: vec2<f32> = vec2<f32>(rendererLightSSBO.values[i].LightData.y, rendererLightSSBO.values[i].LightData.z);', '           var calculated: PBRData = calcSpotLight(normal, V, fragPos, ior, roughness, metallic, pos, dir, cones, color, baseColor);', '           diffuse += max(vec3<f32>(0), calculated.diffuse);', '           specular += max(vec3<f32>(0), calculated.specular);', '         }', '         default { continue; }', '       }', '      continuing { i++; }', '    }', '  }',\n      // Final variables for combining specular and diffuse\n      '  var fresnel: f32 = schlickFresnelIOR(V, normal, ior, k); // Fresnel', '  fresnel = min(1.0, fresnel);', '  // This could be controlled with its own variable (that isnt base color) for better artistic control', '  var fresnelMetallic: vec3<f32> = schlickFresnelRGB(V, normal, baseColor); // Fresnel for metal, takes color into account', '  var kS: vec3<f32> = mix(vec3<f32>(fresnel), fresnelMetallic, metallic);', '  kS = min(vec3<f32>(1.0), kS);', '  var kD: vec3<f32> = (1.0 - kS) * (1.0 - metallic);', '  var PBR: vec3<f32> = mapperUBO.DiffuseIntensity*kD*diffuse + kS*specular;', '  PBR += emission;', '  computedColor = vec4<f32>(PBR, mapperUBO.Opacity);'];\n      if (renderer.getEnvironmentTexture()?.getImageLoaded()) {\n        lightingCode.push('  // To get diffuse IBL, the texture is sampled with normals in worldspace', '  var diffuseIBLCoords: vec3<f32> = (transpose(rendererUBO.WCVCNormals) * vec4<f32>(normal, 1.)).xyz;', '  var diffuseCoords: vec2<f32> = vecToRectCoord(diffuseIBLCoords);', '  // To get specular IBL, the texture is sampled as the worldspace reflection between the normal and view vectors', '  // Reflections are first calculated in viewspace, then converted to worldspace to sample the environment', '  var VreflN: vec3<f32> = normalize(reflect(-V, normal));', '  var reflectionIBLCoords = (transpose(rendererUBO.WCVCNormals) * vec4<f32>(VreflN, 1.)).xyz;', '  var specularCoords: vec2<f32> = vecToRectCoord(reflectionIBLCoords);', '  var diffuseIBL = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, diffuseCoords, rendererUBO.MaxEnvironmentMipLevel);',\n        // Level multiplier should be set by UBO\n        '  var level = roughness * rendererUBO.MaxEnvironmentMipLevel;', '  var specularIBL = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, specularCoords, level);',\n        // Manual mip smoothing since not all formats support smooth level sampling\n        '  var specularIBLContribution: vec3<f32> = specularIBL.rgb*rendererUBO.BackgroundSpecularStrength;', '  computedColor += vec4<f32>(specularIBLContribution*kS, 0);', '  var diffuseIBLContribution: vec3<f32> = diffuseIBL.rgb*rendererUBO.BackgroundDiffuseStrength;', '  diffuseIBLContribution *= baseColor * _ambientOcclusionMap.rgb;',\n        // Multipy by baseColor may be changed\n        '  computedColor += vec4<f32>(diffuseIBLContribution*kD, 0);');\n      }\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Light::Impl', lightingCode).result;\n      fDesc.setCode(code);\n      // If theres no normals, just set the specular color to be flat\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Light::Impl', ['  var diffuse: vec3<f32> = diffuseColor.rgb;', '  var specular: vec3<f32> = mapperUBO.SpecularColor.rgb * mapperUBO.SpecularColor.a;', '  computedColor = vec4<f32>(diffuse * _diffuseMap.rgb, mapperUBO.Opacity);']).result;\n      fDesc.setCode(code);\n    }\n  };\n  model.shaderReplacements.set('replaceShaderLight', publicAPI.replaceShaderLight);\n  publicAPI.replaceShaderColor = (hash, pipeline, vertexInput) => {\n    // By default, set the colors to be flat\n    if (isEdges(hash)) {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['ambientColor = mapperUBO.EdgeColor;', 'diffuseColor = mapperUBO.EdgeColor;']).result;\n      fDesc.setCode(code);\n      return;\n    }\n\n    // If there's no vertex color buffer return the shader as is\n    const colorBuffer = vertexInput.getBuffer('colorVI');\n    if (!colorBuffer) return;\n\n    // Modifies the vertex shader to include the vertex colors and interpolation in the outputs\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addOutput('vec4<f32>', 'color', colorBuffer.getArrayInformation()[0].interpolation);\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['  output.color = colorVI;']).result;\n    vDesc.setCode(code);\n\n    // Sets the fragment shader to accept the color inputs from the vertex shader\n    const fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['ambientColor = input.color;', 'diffuseColor = input.color;', 'opacity = mapperUBO.Opacity * input.color.a;']).result;\n    fDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderColor', publicAPI.replaceShaderColor);\n  publicAPI.replaceShaderTCoord = (hash, pipeline, vertexInput) => {\n    if (!vertexInput.hasAttribute('tcoord')) return;\n    const vDesc = pipeline.getShaderDescription('vertex');\n    const tcoords = vertexInput.getBuffer('tcoord');\n    const numComp = vtkWebGPUTypes.getNumberOfComponentsFromBufferFormat(tcoords.getArrayInformation()[0].format);\n    let code = vDesc.getCode();\n    vDesc.addOutput(`vec${numComp}<f32>`, 'tcoordVS');\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::TCoord::Impl', ['  output.tcoordVS = tcoord;']).result;\n    vDesc.setCode(code);\n    const fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    const actor = model.WebGPUActor.getRenderable();\n    const checkDims = texture => {\n      if (!texture) return false;\n      const dims = texture.getDimensionality();\n      return dims === numComp;\n    };\n    const usedTextures = [];\n    if (actor.getProperty().getDiffuseTexture?.()?.getImageLoaded() || actor.getTextures()[0] || model.colorTexture) {\n      if (\n      // Chained or statements here are questionable\n      checkDims(actor.getProperty().getDiffuseTexture?.()) || checkDims(actor.getTextures()[0]) || checkDims(model.colorTexture)) {\n        usedTextures.push('_diffuseMap = textureSample(DiffuseTexture, DiffuseTextureSampler, input.tcoordVS);');\n      }\n    }\n    if (actor.getProperty().getRoughnessTexture?.()?.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getRoughnessTexture())) {\n        usedTextures.push('_roughnessMap = textureSample(RoughnessTexture, RoughnessTextureSampler, input.tcoordVS);');\n      }\n    }\n    if (actor.getProperty().getMetallicTexture?.()?.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getMetallicTexture())) {\n        usedTextures.push('_metallicMap = textureSample(MetallicTexture, MetallicTextureSampler, input.tcoordVS);');\n      }\n    }\n    if (actor.getProperty().getNormalTexture?.()?.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getNormalTexture())) {\n        usedTextures.push('_normalMap = textureSample(NormalTexture, NormalTextureSampler, input.tcoordVS);');\n      }\n    }\n    if (actor.getProperty().getAmbientOcclusionTexture?.()?.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getAmbientOcclusionTexture())) {\n        usedTextures.push('_ambientOcclusionMap = textureSample(AmbientOcclusionTexture, AmbientOcclusionTextureSampler, input.tcoordVS);');\n      }\n    }\n    if (actor.getProperty().getEmissionTexture?.()?.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getEmissionTexture())) {\n        usedTextures.push('_emissionMap = textureSample(EmissionTexture, EmissionTextureSampler, input.tcoordVS);');\n      }\n    }\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::TCoord::Impl', usedTextures).result;\n    fDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);\n  publicAPI.replaceShaderSelect = (hash, pipeline, vertexInput) => {\n    if (hash.includes('sel')) {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      let code = fDesc.getCode();\n      // by default there are no composites, so just 0\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Select::Impl', ['  var compositeID: u32 = 0u;']).result;\n      fDesc.setCode(code);\n    }\n  };\n  model.shaderReplacements.set('replaceShaderSelect', publicAPI.replaceShaderSelect);\n  publicAPI.getUsage = (rep, i) => {\n    if (rep === Representation.POINTS || i === PrimitiveTypes.Points) {\n      return BufferUsage.Verts;\n    }\n    if (i === PrimitiveTypes.Lines) {\n      return BufferUsage.Lines;\n    }\n    if (rep === Representation.WIREFRAME) {\n      if (i === PrimitiveTypes.Triangles) {\n        return BufferUsage.LinesFromTriangles;\n      }\n      return BufferUsage.LinesFromStrips;\n    }\n    if (i === PrimitiveTypes.Triangles) {\n      return BufferUsage.Triangles;\n    }\n    if (i === PrimitiveTypes.TriangleStrips) {\n      return BufferUsage.Strips;\n    }\n    if (i === PrimitiveTypes.TriangleEdges) {\n      return BufferUsage.LinesFromTriangles;\n    }\n\n    // only strip edges left which are lines\n    return BufferUsage.LinesFromStrips;\n  };\n  publicAPI.getHashFromUsage = usage => `pt${usage}`;\n  publicAPI.getTopologyFromUsage = usage => {\n    switch (usage) {\n      case BufferUsage.Triangles:\n        return 'triangle-list';\n      case BufferUsage.Verts:\n        return 'point-list';\n      case BufferUsage.Lines:\n      default:\n        return 'line-list';\n    }\n  };\n\n  // TODO: calculate tangents\n  publicAPI.buildVertexInput = () => {\n    const pd = model.currentInput;\n    const cells = model.cellArray;\n    const primType = model.primitiveType;\n    const actor = model.WebGPUActor.getRenderable();\n    let representation = actor.getProperty().getRepresentation();\n    const device = model.WebGPURenderWindow.getDevice();\n    let edges = false;\n    if (primType === PrimitiveTypes.TriangleEdges) {\n      edges = true;\n      representation = Representation.WIREFRAME;\n    }\n    const vertexInput = model.vertexInput;\n    const points = pd.getPoints();\n    let indexBuffer;\n\n    // get the flat mapping indexBuffer for the cells\n    if (cells) {\n      const buffRequest = {\n        hash: `R${representation}P${primType}${cells.getMTime()}`,\n        usage: BufferUsage.Index,\n        cells,\n        numberOfPoints: points.getNumberOfPoints(),\n        primitiveType: primType,\n        representation\n      };\n      indexBuffer = device.getBufferManager().getBuffer(buffRequest);\n      vertexInput.setIndexBuffer(indexBuffer);\n    } else {\n      vertexInput.setIndexBuffer(null);\n    }\n\n    // hash = all things that can change the values on the buffer\n    // since mtimes are unique we can use\n    // - indexBuffer mtime - because cells drive how we pack\n    // - relevant dataArray mtime - the source data\n    // - shift - not currently captured\n    // - scale - not currently captured\n    // - format\n    // - usage\n    // - packExtra - covered by format\n\n    // points\n    if (points) {\n      const shift = model.WebGPUActor.getBufferShift(model.WebGPURenderer);\n      const buffRequest = {\n        hash: `${points.getMTime()}I${indexBuffer.getMTime()}${shift.join()}float32x4`,\n        usage: BufferUsage.PointArray,\n        format: 'float32x4',\n        dataArray: points,\n        indexBuffer,\n        shift,\n        packExtra: true\n      };\n      const buff = device.getBufferManager().getBuffer(buffRequest);\n      vertexInput.addBuffer(buff, ['vertexBC']);\n    } else {\n      vertexInput.removeBufferIfPresent('vertexBC');\n    }\n\n    // normals, only used for surface rendering\n    const usage = publicAPI.getUsage(representation, primType);\n    model._usesCellNormals = false;\n    if (!model.is2D && (\n    // no lighting on Property2D\n    usage === BufferUsage.Triangles || usage === BufferUsage.Strips)) {\n      const normals = pd.getPointData().getNormals();\n      // https://vtk.org/doc/nightly/html/classvtkPolyDataTangents.html\n      // Need to find some way of using precomputed tangents (or computing new ones)\n      const buffRequest = {\n        format: 'snorm8x4',\n        indexBuffer,\n        packExtra: true,\n        shift: 0,\n        scale: 127\n      };\n      if (normals) {\n        buffRequest.hash = `${normals.getMTime()}I${indexBuffer.getMTime()}snorm8x4`;\n        buffRequest.dataArray = normals;\n        buffRequest.usage = BufferUsage.PointArray;\n        const buff = device.getBufferManager().getBuffer(buffRequest);\n        vertexInput.addBuffer(buff, ['normalMC']);\n      } else if (primType === PrimitiveTypes.Triangles) {\n        model._usesCellNormals = true;\n        buffRequest.hash = `PFN${points.getMTime()}I${indexBuffer.getMTime()}snorm8x4`;\n        buffRequest.dataArray = points;\n        buffRequest.cells = cells;\n        buffRequest.usage = BufferUsage.NormalsFromPoints;\n        const buff = device.getBufferManager().getBuffer(buffRequest);\n        vertexInput.addBuffer(buff, ['normalMC']);\n      } else {\n        vertexInput.removeBufferIfPresent('normalMC');\n      }\n    } else {\n      vertexInput.removeBufferIfPresent('normalMC');\n    }\n\n    // deal with colors but only if modified\n    let haveColors = false;\n    if (model.renderable.getScalarVisibility()) {\n      const c = model.renderable.getColorMapColors();\n      if (c && !edges) {\n        const scalarMode = model.renderable.getScalarMode();\n        let haveCellScalars = false;\n        // We must figure out how the scalars should be mapped to the polydata.\n        if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !pd.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n          haveCellScalars = true;\n        }\n        const buffRequest = {\n          usage: BufferUsage.PointArray,\n          format: 'unorm8x4',\n          hash: `${haveCellScalars}${c.getMTime()}I${indexBuffer.getMTime()}unorm8x4`,\n          dataArray: c,\n          indexBuffer,\n          cellData: haveCellScalars,\n          cellOffset: 0\n        };\n        const buff = device.getBufferManager().getBuffer(buffRequest);\n        vertexInput.addBuffer(buff, ['colorVI']);\n        haveColors = true;\n      }\n    }\n    if (!haveColors) {\n      vertexInput.removeBufferIfPresent('colorVI');\n    }\n    let tcoords = null;\n    if (model.renderable.getInterpolateScalarsBeforeMapping?.() && model.renderable.getColorCoordinates()) {\n      tcoords = model.renderable.getColorCoordinates();\n    } else {\n      tcoords = pd.getPointData().getTCoords();\n    }\n    if (tcoords && !edges) {\n      const buff = device.getBufferManager().getBufferForPointArray(tcoords, vertexInput.getIndexBuffer());\n      vertexInput.addBuffer(buff, ['tcoord']);\n    } else {\n      vertexInput.removeBufferIfPresent('tcoord');\n    }\n  };\n  publicAPI.updateTextures = () => {\n    // we keep track of new and used textures so\n    // that we can clean up any unused textures so we don't hold onto them\n    const usedTextures = [];\n    const newTextures = [];\n\n    // do we have a scalar color texture\n    const idata = model.renderable.getColorTextureMap?.();\n    if (idata) {\n      if (!model.colorTexture) {\n        model.colorTexture = vtkTexture.newInstance({\n          label: 'polyDataColor'\n        });\n      }\n      model.colorTexture.setInputData(idata);\n      newTextures.push(['Diffuse', model.colorTexture]);\n    }\n\n    // actor textures?\n    const actor = model.WebGPUActor.getRenderable();\n    const renderer = model.WebGPURenderer.getRenderable();\n\n    // Reusing the old code for new and old textures, just loading in from properties instead of actor.getTextures()\n    const textures = [];\n\n    // Feels like there should be a better way than individually adding all\n    if (actor.getProperty().getDiffuseTexture?.()) {\n      const pair = ['Diffuse', actor.getProperty().getDiffuseTexture()];\n      textures.push(pair);\n    }\n    if (actor.getTextures()[0]) {\n      const pair = ['Diffuse', actor.getTextures()[0]];\n      textures.push(pair);\n    }\n    if (model.colorTexture) {\n      const pair = ['Diffuse', model.colorTexture];\n      textures.push(pair);\n    }\n    if (actor.getProperty().getRoughnessTexture?.()) {\n      const pair = ['Roughness', actor.getProperty().getRoughnessTexture()];\n      textures.push(pair);\n    }\n    if (actor.getProperty().getMetallicTexture?.()) {\n      const pair = ['Metallic', actor.getProperty().getMetallicTexture()];\n      textures.push(pair);\n    }\n    if (actor.getProperty().getNormalTexture?.()) {\n      const pair = ['Normal', actor.getProperty().getNormalTexture()];\n      textures.push(pair);\n    }\n    if (actor.getProperty().getAmbientOcclusionTexture?.()) {\n      const pair = ['AmbientOcclusion', actor.getProperty().getAmbientOcclusionTexture()];\n      textures.push(pair);\n    }\n    if (actor.getProperty().getEmissionTexture?.()) {\n      const pair = ['Emission', actor.getProperty().getEmissionTexture()];\n      textures.push(pair);\n    }\n    if (renderer.getEnvironmentTexture?.()) {\n      const pair = ['Environment', renderer.getEnvironmentTexture()];\n      textures.push(pair);\n    }\n    for (let i = 0; i < textures.length; i++) {\n      if (textures[i][1].getInputData() || textures[i][1].getJsImageData() || textures[i][1].getCanvas()) {\n        newTextures.push(textures[i]);\n      }\n      if (textures[i][1].getImage() && textures[i][1].getImageLoaded()) {\n        newTextures.push(textures[i]);\n      }\n    }\n    for (let i = 0; i < newTextures.length; i++) {\n      const srcTexture = newTextures[i][1];\n      const textureName = newTextures[i][0];\n      const newTex = model.device.getTextureManager().getTextureForVTKTexture(srcTexture); // Generates hash\n      if (newTex.getReady()) {\n        // is this a new texture\n        let found = false;\n        for (let t = 0; t < model.textures.length; t++) {\n          if (model.textures[t] === newTex) {\n            found = true;\n            usedTextures[t] = true;\n          }\n        }\n        if (!found) {\n          usedTextures[model.textures.length] = true;\n          const tview = newTex.createView(`${textureName}Texture`);\n          model.textures.push(newTex);\n          model.textureViews.push(tview);\n          const interpolate = srcTexture.getInterpolate() ? 'linear' : 'nearest';\n          let addressMode = null;\n          if (!addressMode && srcTexture.getEdgeClamp() && srcTexture.getRepeat()) addressMode = 'mirror-repeat';\n          if (!addressMode && srcTexture.getEdgeClamp()) addressMode = 'clamp-to-edge';\n          if (!addressMode && srcTexture.getRepeat()) addressMode = 'repeat';\n          if (textureName !== 'Environment') {\n            tview.addSampler(model.device, {\n              addressModeU: addressMode,\n              addressModeV: addressMode,\n              addressModeW: addressMode,\n              minFilter: interpolate,\n              magFilter: interpolate\n            });\n          } else {\n            tview.addSampler(model.device, {\n              addressModeU: 'repeat',\n              addressModeV: 'clamp-to-edge',\n              addressModeW: 'repeat',\n              minFilter: interpolate,\n              magFilter: interpolate,\n              mipmapFilter: 'linear'\n            });\n          }\n        }\n      }\n    }\n\n    // remove unused textures\n    for (let i = model.textures.length - 1; i >= 0; i--) {\n      if (!usedTextures[i]) {\n        model.textures.splice(i, 1);\n        model.textureViews.splice(i, 1);\n      }\n    }\n  };\n\n  // compute a unique hash for a pipeline, this needs to be unique enough to\n  // capture any pipeline code changes (which includes shader changes)\n  // or vertex input changes/ bind groups/ etc\n  publicAPI.computePipelineHash = () => {\n    let pipelineHash = `pd${model.useRendererMatrix ? 'r' : ''}${model.forceZValue ? 'z' : ''}`;\n    if (model.primitiveType === PrimitiveTypes.TriangleEdges || model.primitiveType === PrimitiveTypes.TriangleStripEdges) {\n      pipelineHash += 'edge';\n    } else {\n      if (model.vertexInput.hasAttribute(`normalMC`)) {\n        pipelineHash += `n`;\n      }\n      if (model.vertexInput.hasAttribute(`colorVI`)) {\n        pipelineHash += `c`;\n      }\n      if (model.vertexInput.hasAttribute(`tcoord`)) {\n        const tcoords = model.vertexInput.getBuffer('tcoord');\n        const numComp = vtkWebGPUTypes.getNumberOfComponentsFromBufferFormat(tcoords.getArrayInformation()[0].format);\n        pipelineHash += `t${numComp}`;\n      }\n      if (model.textures.length) {\n        pipelineHash += `tx${model.textures.length}`;\n      }\n    }\n    if (model._usesCellNormals) {\n      pipelineHash += `cn`;\n    }\n    if (model.SSBO) {\n      pipelineHash += `ssbo`;\n    }\n    const uhash = publicAPI.getHashFromUsage(model.usage);\n    pipelineHash += uhash;\n    pipelineHash += model.renderEncoder.getPipelineHash();\n    model.pipelineHash = pipelineHash;\n  };\n  publicAPI.updateBuffers = () => {\n    // handle textures if not edges\n    if (model.primitiveType !== PrimitiveTypes.TriangleEdges && model.primitiveType !== PrimitiveTypes.TriangleStripEdges) {\n      publicAPI.updateTextures();\n    }\n    const actor = model.WebGPUActor.getRenderable();\n    const rep = actor.getProperty().getRepresentation();\n\n    // handle per primitive type\n    model.usage = publicAPI.getUsage(rep, model.primitiveType);\n    publicAPI.buildVertexInput();\n    const vbo = model.vertexInput.getBuffer('vertexBC');\n    publicAPI.setNumberOfVertices(vbo.getSizeInBytes() / vbo.getStrideInBytes());\n    publicAPI.setTopology(publicAPI.getTopologyFromUsage(model.usage));\n    publicAPI.updateUBO();\n    if (publicAPI.haveWideLines()) {\n      const ppty = actor.getProperty();\n      publicAPI.setNumberOfInstances(Math.ceil(ppty.getLineWidth() * 2.0));\n    } else {\n      publicAPI.setNumberOfInstances(1);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  is2D: false,\n  cellArray: null,\n  currentInput: null,\n  cellOffset: 0,\n  primitiveType: 0,\n  colorTexture: null,\n  renderEncoder: null,\n  textures: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initiaLalues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initiaLalues);\n\n  // Inheritance\n  vtkWebGPUSimpleMapper.extend(publicAPI, model, initiaLalues);\n  model.fragmentShaderTemplate = vtkWebGPUPolyDataFS;\n  model.vertexShaderTemplate = vtkWebGPUPolyDataVS;\n  model._tmpMat3 = mat3.identity(new Float64Array(9));\n  model._tmpMat4 = mat4.identity(new Float64Array(16));\n\n  // UBO\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'mapperUBO'\n  });\n  model.UBO.addEntry('BCWCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('BCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('MCWCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('AmbientColor', 'vec4<f32>');\n  model.UBO.addEntry('DiffuseColor', 'vec4<f32>');\n  model.UBO.addEntry('EdgeColor', 'vec4<f32>');\n  model.UBO.addEntry('SpecularColor', 'vec4<f32>');\n  model.UBO.addEntry('AmbientIntensity', 'f32');\n  model.UBO.addEntry('DiffuseIntensity', 'f32');\n  model.UBO.addEntry('Roughness', 'f32');\n  model.UBO.addEntry('Metallic', 'f32');\n  model.UBO.addEntry('Ambient', 'f32');\n  model.UBO.addEntry('Normal', 'f32');\n  model.UBO.addEntry('Emission', 'f32');\n  model.UBO.addEntry('NormalStrength', 'f32');\n  model.UBO.addEntry('BaseIOR', 'f32');\n  model.UBO.addEntry('SpecularIntensity', 'f32');\n  model.UBO.addEntry('LineWidth', 'f32');\n  model.UBO.addEntry('Opacity', 'f32');\n  model.UBO.addEntry('ZValue', 'f32');\n  model.UBO.addEntry('PropID', 'u32');\n  model.UBO.addEntry('ClipNear', 'f32');\n  model.UBO.addEntry('ClipFar', 'f32');\n  model.UBO.addEntry('Time', 'u32');\n\n  // Build VTK API\n  setGet(publicAPI, model, ['cellArray', 'currentInput', 'cellOffset', 'is2D', 'primitiveType', 'renderEncoder']);\n  model.textures = [];\n\n  // Object methods\n  vtkWebGPUCellArrayMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUCellArrayMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUCellArrayMapper$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUCellArrayMapper$1 as default, extend, newInstance };\n","import { n as newInstance$1 } from '../../macros2.js';\nimport vtkCubeAxesActor from '../Core/CubeAxesActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUCubeAxesActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCubeAxesActor(publicAPI, model) {\n  model.classHierarchy.push('vtkWebGPUCubeAxesActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      if (!model.CubeAxesActorHelper.getRenderable()) {\n        model.CubeAxesActorHelper.setRenderable(model.renderable);\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.CubeAxesActorHelper.getTmActor());\n      publicAPI.addMissingNode(model.renderable.getGridActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      const camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;\n      const tsize = model.WebGPURenderer.getTiledSizeAndOrigin();\n      model.CubeAxesActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model.WebGPURenderWindow.getRenderable());\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.CubeAxesActorHelper = vtkCubeAxesActor.newCubeAxesActorHelper();\n\n  // Object methods\n  vtkWebGPUCubeAxesActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUCubeAxesActor');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkCubeAxesActor', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUFullScreenQuad methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUFullScreenQuad(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUFullScreenQuad');\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    vDesc.addOutput('vec4<f32>', 'vertexVC');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['output.tcoordVS = vec2<f32>(vertexBC.x * 0.5 + 0.5, 1.0 - vertexBC.y * 0.5 - 0.5);', 'output.Position = vec4<f32>(vertexBC, 1.0);', 'output.vertexVC = vec4<f32>(vertexBC, 1);']).result;\n    vDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n  publicAPI.updateBuffers = () => {\n    const buff = model.device.getBufferManager().getFullScreenQuadBuffer();\n    model.vertexInput.addBuffer(buff, ['vertexBC']);\n    model.numberOfVertices = 6;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkWebGPUSimpleMapper.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkWebGPUFullScreenQuad(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUFullScreenQuad');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUFullScreenQuad$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUFullScreenQuad$1 as default, extend, newInstance };\n","import { mat4, vec4 } from 'gl-matrix';\nimport Constants from '../Core/ImageMapper/Constants.js';\nimport { n as newInstance$1, o as obj } from '../../macros2.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport { InterpolationType } from '../Core/ImageProperty/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// const { vtkErrorMacro } = macro;\nconst {\n  SlicingMode\n} = Constants;\nconst imgFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Image::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  //VTK::Image::Sample\n\n  // var computedColor: vec4<f32> = vec4<f32>(1.0,0.7, 0.5, 1.0);\n\n//VTK::RenderEncoder::Impl\n\n  return output;\n}\n`;\n\n// ----------------------------------------------------------------------------\n// helper methods\n// ----------------------------------------------------------------------------\n\nfunction computeFnToString(property, fn, numberOfComponents) {\n  const pwfun = fn.apply(property);\n  if (pwfun) {\n    const iComps = property.getIndependentComponents();\n    return `${property.getMTime()}-${iComps}-${numberOfComponents}`;\n  }\n  return '0';\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUImageMapper methods\n// ----------------------------------------------------------------------------\n\nconst tmpMat4 = new Float64Array(16);\nconst tmp2Mat4 = new Float64Array(16);\nconst tmp3Mat4 = new Float64Array(16);\nconst ptsArray1 = new Float64Array(4);\nconst ptsArray2 = new Float64Array(4);\nfunction vtkWebGPUImageMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUImageMapper');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPUImageSlice = publicAPI.getFirstAncestorOfType('vtkWebGPUImageSlice');\n      model.WebGPURenderer = model.WebGPUImageSlice.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      model.device = model.WebGPURenderWindow.getDevice();\n      const ren = model.WebGPURenderer.getRenderable();\n      // is slice set by the camera\n      if (model.renderable.getSliceAtFocalPoint()) {\n        model.renderable.setSliceFromCamera(ren.getActiveCamera());\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.render = () => {\n    model.renderable.update();\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n    model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n  };\n  publicAPI.computePipelineHash = () => {\n    const ext = model.currentInput.getExtent();\n    if (ext[0] === ext[1] || ext[2] === ext[3] || ext[4] === ext[5]) {\n      model.dimensions = 2;\n      model.pipelineHash = 'img2';\n    } else {\n      model.dimensions = 3;\n      model.pipelineHash = 'img3';\n    }\n  };\n  publicAPI.updateUBO = () => {\n    const utime = model.UBO.getSendTime();\n    const actor = model.WebGPUImageSlice.getRenderable();\n    const volMapr = actor.getMapper();\n    if (publicAPI.getMTime() > utime || model.renderable.getMTime() > utime || actor.getProperty().getMTime() > utime) {\n      // compute the SCTCMatrix\n      const image = volMapr.getInputData();\n      const center = model.WebGPURenderer.getStabilizedCenterByReference();\n      mat4.identity(tmpMat4);\n      mat4.translate(tmpMat4, tmpMat4, center);\n      // tmpMat4 is now SC->World\n\n      const mcwcmat = actor.getMatrix();\n      mat4.transpose(tmp2Mat4, mcwcmat);\n      mat4.invert(tmp2Mat4, tmp2Mat4);\n      // tmp2Mat4 is now world to model\n\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n      // tmp4Mat is now SC->Model\n\n      // the method on the data is world to index but the volume is in\n      // model coordinates so really in this context it is model to index\n      const modelToIndex = image.getWorldToIndex();\n      mat4.multiply(tmpMat4, modelToIndex, tmpMat4);\n      // tmpMat4 is now SC -> Index, save this as we need it later\n      mat4.invert(tmp3Mat4, tmpMat4);\n\n      // need translation and scale\n      mat4.fromTranslation(tmp2Mat4, [0.5, 0.5, 0.5]);\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n      const dims = image.getDimensions();\n      mat4.identity(tmp2Mat4);\n      mat4.scale(tmp2Mat4, tmp2Mat4, [1.0 / dims[0], 1.0 / dims[1], 1.0 / dims[2]]);\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n      // tmpMat4 is now SC -> Tcoord\n\n      model.UBO.setArray('SCTCMatrix', tmpMat4);\n\n      // need to compute the plane here in world coordinates\n      // then pass that down in the UBO\n      const ext = model.currentInput.getExtent();\n\n      // Find what IJK axis and what direction to slice along\n      const {\n        ijkMode\n      } = model.renderable.getClosestIJKAxis();\n\n      // Find the IJK slice\n      let nSlice = model.renderable.getSlice();\n      if (ijkMode !== model.renderable.getSlicingMode()) {\n        // If not IJK slicing, get the IJK slice from the XYZ position/slice\n        nSlice = model.renderable.getSliceAtPosition(nSlice);\n      }\n      let axis0 = 2;\n      let axis1 = 0;\n      let axis2 = 1;\n      if (ijkMode === SlicingMode.I) {\n        axis0 = 0;\n        axis1 = 1;\n        axis2 = 2;\n      } else if (ijkMode === SlicingMode.J) {\n        axis0 = 1;\n        axis1 = 2;\n        axis2 = 0;\n      }\n      ptsArray1[axis0] = nSlice;\n      ptsArray1[axis1] = ext[axis1 * 2] - 0.5;\n      ptsArray1[axis2] = ext[axis2 * 2] - 0.5;\n      ptsArray1[3] = 1.0;\n      vec4.transformMat4(ptsArray1, ptsArray1, tmp3Mat4);\n      model.UBO.setArray('Origin', ptsArray1);\n      ptsArray2[axis0] = nSlice;\n      ptsArray2[axis1] = ext[axis1 * 2 + 1] + 0.5;\n      ptsArray2[axis2] = ext[axis2 * 2] - 0.5;\n      ptsArray2[3] = 1.0;\n      vec4.transformMat4(ptsArray2, ptsArray2, tmp3Mat4);\n      vec4.subtract(ptsArray2, ptsArray2, ptsArray1);\n      ptsArray2[3] = 1.0;\n      model.UBO.setArray('Axis1', ptsArray2);\n      ptsArray2[axis0] = nSlice;\n      ptsArray2[axis1] = ext[axis1 * 2] - 0.5;\n      ptsArray2[axis2] = ext[axis2 * 2 + 1] + 0.5;\n      ptsArray2[3] = 1.0;\n      vec4.transformMat4(ptsArray2, ptsArray2, tmp3Mat4);\n      vec4.subtract(ptsArray2, ptsArray2, ptsArray1);\n      ptsArray2[3] = 1.0;\n      model.UBO.setArray('Axis2', ptsArray2);\n\n      // three levels of shift scale combined into one\n      // for performance in the fragment shader\n      const cScale = [1, 1, 1, 1];\n      const cShift = [0, 0, 0, 0];\n      const tView = model.textureViews[0];\n      const tScale = tView.getTexture().getScale();\n      const numComp = tView.getTexture().getNumberOfComponents();\n      for (let i = 0; i < numComp; i++) {\n        let cw = actor.getProperty().getColorWindow();\n        let cl = actor.getProperty().getColorLevel();\n        const target = 0;\n        const cfun = actor.getProperty().getRGBTransferFunction(target);\n        if (cfun) {\n          const cRange = cfun.getRange();\n          cw = cRange[1] - cRange[0];\n          cl = 0.5 * (cRange[1] + cRange[0]);\n        }\n        cScale[i] = tScale / cw;\n        cShift[i] = -cl / cw + 0.5;\n      }\n      model.UBO.setArray('cScale', cScale);\n      model.UBO.setArray('cShift', cShift);\n      model.UBO.sendIfNeeded(model.device);\n    }\n  };\n  publicAPI.updateLUTImage = () => {\n    const actorProperty = model.WebGPUImageSlice.getRenderable().getProperty();\n    const tView = publicAPI.getTextureViews()[0];\n    tView.getTexture().getNumberOfComponents();\n    const numIComps = 1;\n    const cfunToString = computeFnToString(actorProperty, actorProperty.getRGBTransferFunction, numIComps);\n    if (model.colorTextureString !== cfunToString) {\n      model.numRows = numIComps;\n      const colorArray = new Uint8ClampedArray(model.numRows * 2 * model.rowLength * 4);\n      let cfun = actorProperty.getRGBTransferFunction();\n      if (cfun) {\n        const tmpTable = new Float32Array(model.rowLength * 3);\n        for (let c = 0; c < numIComps; c++) {\n          cfun = actorProperty.getRGBTransferFunction(c);\n          const cRange = cfun.getRange();\n          cfun.getTable(cRange[0], cRange[1], model.rowLength, tmpTable, 1);\n          {\n            for (let i = 0; i < model.rowLength; i++) {\n              const idx = c * model.rowLength * 8 + i * 4;\n              colorArray[idx] = 255.0 * tmpTable[i * 3];\n              colorArray[idx + 1] = 255.0 * tmpTable[i * 3 + 1];\n              colorArray[idx + 2] = 255.0 * tmpTable[i * 3 + 2];\n              colorArray[idx + 3] = 255.0;\n              for (let j = 0; j < 4; j++) {\n                colorArray[idx + model.rowLength * 4 + j] = colorArray[idx + j];\n              }\n            }\n          }\n        }\n      } else {\n        for (let i = 0; i < model.rowLength; ++i) {\n          const grey = 255.0 * i / (model.rowLength - 1);\n          colorArray[i * 4] = grey;\n          colorArray[i * 4 + 1] = grey;\n          colorArray[i * 4 + 2] = grey;\n          colorArray[i * 4 + 3] = 255.0;\n          for (let j = 0; j < 4; j++) {\n            colorArray[i * 4 + model.rowLength * 4 + j] = colorArray[i * 4 + j];\n          }\n        }\n      }\n      {\n        const treq = {\n          nativeArray: colorArray,\n          width: model.rowLength,\n          height: model.numRows * 2,\n          depth: 1,\n          format: 'rgba8unorm'\n        };\n        const newTex = model.device.getTextureManager().getTexture(treq);\n        const tview = newTex.createView('tfunTexture');\n        model.textureViews[1] = tview;\n      }\n      model.colorTextureString = cfunToString;\n    }\n  };\n  const superClassUpdateBuffers = publicAPI.updateBuffers;\n  publicAPI.updateBuffers = () => {\n    superClassUpdateBuffers();\n    const newTex = model.device.getTextureManager().getTextureForImageData(model.currentInput);\n    const tViews = model.textureViews;\n    if (!tViews[0] || tViews[0].getTexture() !== newTex) {\n      const tview = newTex.createView('imgTexture');\n      tViews[0] = tview;\n    }\n    publicAPI.updateLUTImage();\n    publicAPI.updateUBO();\n\n    // set interpolation on the texture based on property setting\n    const actorProperty = model.WebGPUImageSlice.getRenderable().getProperty();\n    const iType = actorProperty.getInterpolationType() === InterpolationType.NEAREST ? 'nearest' : 'linear';\n    if (!model.clampSampler || iType !== model.clampSampler.getOptions().minFilter) {\n      model.clampSampler = vtkWebGPUSampler.newInstance({\n        label: 'clampSampler'\n      });\n      model.clampSampler.create(model.device, {\n        minFilter: iType,\n        magFilter: iType\n      });\n      model.additionalBindables = [model.clampSampler];\n    }\n  };\n  const sr = publicAPI.getShaderReplacements();\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    let code = vDesc.getCode();\n    const lines = ['var pos: vec4<f32> = mapperUBO.Origin +', '   (vertexBC.x * 0.5 + 0.5) * mapperUBO.Axis1 + (vertexBC.y * 0.5 + 0.5) * mapperUBO.Axis2;', 'pos.w = 1.0;'];\n    if (model.dimensions === 2) {\n      lines.push('var tcoord : vec2<f32> = (mapperUBO.SCTCMatrix * pos).xy;');\n    } else {\n      lines.push('var tcoord : vec3<f32> = (mapperUBO.SCTCMatrix * pos).xyz;');\n    }\n    lines.push('output.tcoordVS = tcoord;', 'output.Position = rendererUBO.SCPCMatrix * pos;');\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', lines).result;\n    vDesc.setCode(code);\n  };\n  sr.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n  publicAPI.replaceShaderTCoord = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    if (model.dimensions === 2) {\n      vDesc.addOutput('vec2<f32>', 'tcoordVS');\n    } else {\n      vDesc.addOutput('vec3<f32>', 'tcoordVS');\n    }\n  };\n  sr.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);\n  publicAPI.replaceShaderImage = (hash, pipeline, vertexInput) => {\n    const fDesc = pipeline.getShaderDescription('fragment');\n    let code = fDesc.getCode();\n    if (model.dimensions === 3) {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [`    var computedColor: vec4<f32> =`, `      textureSampleLevel(imgTexture, clampSampler, input.tcoordVS, 0.0);`, `//VTK::Image::Sample`]).result;\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [`    var computedColor: vec4<f32> =`, `      textureSampleLevel(imgTexture, clampSampler, input.tcoordVS, 0.0);`, `//VTK::Image::Sample`]).result;\n    }\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [`    var coord: vec2<f32> =`, `      vec2<f32>(computedColor.r * mapperUBO.cScale.r + mapperUBO.cShift.r, 0.5);`, `    computedColor = textureSampleLevel(tfunTexture, clampSampler, coord, 0.0);`]).result;\n    fDesc.setCode(code);\n  };\n  sr.set('replaceShaderImage', publicAPI.replaceShaderImage);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  rowLength: 1024\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkWebGPUFullScreenQuad.extend(publicAPI, model, initialValues);\n  publicAPI.setFragmentShaderTemplate(imgFragTemplate);\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'mapperUBO'\n  });\n  model.UBO.addEntry('SCTCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('Origin', 'vec4<f32>');\n  model.UBO.addEntry('Axis2', 'vec4<f32>');\n  model.UBO.addEntry('Axis1', 'vec4<f32>');\n  model.UBO.addEntry('cScale', 'vec4<f32>');\n  model.UBO.addEntry('cShift', 'vec4<f32>');\n  model.lutBuildTime = {};\n  obj(model.lutBuildTime, {\n    mtime: 0\n  });\n  model.imagemat = mat4.identity(new Float64Array(16));\n  model.imagematinv = mat4.identity(new Float64Array(16));\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime);\n\n  // Object methods\n  vtkWebGPUImageMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUImageMapper');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkImageMapper', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, g as get } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUImageSlice methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUImageSlice(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUImageSlice');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');\n      if (model.propID === undefined) {\n        model.propID = model.WebGPURenderWindow.getUniquePropID();\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.getBufferShift = wgpuRen => {\n    publicAPI.getKeyMatrices(wgpuRen);\n    return model.bufferShift;\n  };\n  publicAPI.getKeyMatrices = wgpuRen => {\n    // has the actor or stabilization center changed?\n    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {\n      model.renderable.computeMatrix();\n      const mcwc = model.renderable.getMatrix();\n\n      // compute the net shift\n      const center = wgpuRen.getStabilizedCenterByReference();\n      model.bufferShift[0] = mcwc[3] - center[0];\n      model.bufferShift[1] = mcwc[7] - center[1];\n      model.bufferShift[2] = mcwc[11] - center[2];\n      mat4.transpose(model.keyMatrices.bcwc, mcwc);\n      if (model.renderable.getIsIdentity()) {\n        mat4.identity(model.keyMatrices.normalMatrix);\n      } else {\n        // we use bcwc BEFORE the translate below (just to get transposed mcvc)\n        mat4.copy(model.keyMatrices.normalMatrix, model.keyMatrices.bcwc);\n        // zero out translation\n        model.keyMatrices.normalMatrix[3] = 0.0;\n        model.keyMatrices.normalMatrix[7] = 0.0;\n        model.keyMatrices.normalMatrix[11] = 0.0;\n        mat4.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat4.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      }\n\n      // only meed the buffer shift to get to world\n      mat4.translate(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]);\n\n      // to get to stabilized we also need the center\n      mat4.translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);\n      model.keyMatricesTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  bufferShift: undefined,\n  keyMatrixTime: null,\n  keyMatrices: null,\n  propID: undefined\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatricesTime = {};\n  obj(model.keyMatricesTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    bcwc: new Float64Array(16),\n    bcsc: new Float64Array(16)\n  };\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n  model.bufferShift = [0, 0, 0, 0];\n  get(publicAPI, model, ['propID', 'keyMatricesTime']);\n\n  // Object methods\n  vtkWebGPUImageSlice(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUImageSlice');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkImageSlice', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport Constants from './BufferManager/Constants.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkWebGPUBuffer from './Buffer.js';\n\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  PrimitiveTypes\n} = Constants;\n\n// Simulate a small map of pointId to flatId for a cell. The original code\n// used a map and was 2.6x slower (4.7 to 1.9 seconds). Using two fixed\n// length arrays with a count is so much faster even with the required for\n// loops and if statements. This only works as we know the usage is\n// restricted to clear(), set() get() and has() so the count is always\n// incrmenting except for clear where it goes back to 0. Performance\n// improvement is probably due to this appoach not hitting the heap but wow\n// it is so much faster. Code that adds to these vectors checks against 9 to\n// make sure there is room. Switching to test against vec.length -1 results\n// in a small performance hit, so if you change 10, search for 9 in this\n// small class and change those as well.\nclass _LimitedMap {\n  constructor() {\n    this.keys = new Uint32Array(10);\n    this.values = new Uint32Array(10);\n    this.count = 0;\n  }\n  clear() {\n    this.count = 0;\n  }\n  has(key) {\n    for (let i = 0; i < this.count; i++) {\n      if (this.keys[i] === key) {\n        return true;\n      }\n    }\n    return undefined;\n  }\n  get(key) {\n    for (let i = 0; i < this.count; i++) {\n      if (this.keys[i] === key) {\n        return this.values[i];\n      }\n    }\n    return undefined;\n  }\n  set(key, value) {\n    if (this.count < 9) {\n      this.keys[this.count] = key;\n      this.values[this.count++] = value;\n    }\n  }\n}\nfunction getPrimitiveName(primType) {\n  switch (primType) {\n    case PrimitiveTypes.Points:\n      return 'points';\n    case PrimitiveTypes.Lines:\n      return 'lines';\n    case PrimitiveTypes.Triangles:\n    case PrimitiveTypes.TriangleEdges:\n      return 'polys';\n    case PrimitiveTypes.TriangleStripEdges:\n    case PrimitiveTypes.TriangleStrips:\n      return 'strips';\n    default:\n      return '';\n  }\n}\nfunction _getOrAddFlatId(state, ptId, cellId) {\n  let flatId = state.pointIdToFlatId[ptId];\n  if (flatId < 0) {\n    flatId = state.flatId;\n    state.pointIdToFlatId[ptId] = flatId;\n    state.flatIdToPointId[state.flatId] = ptId;\n    state.flatIdToCellId[state.flatId] = cellId;\n    state.flatId++;\n  }\n  return flatId;\n}\nfunction fillCell(ptIds, cellId, state) {\n  const numPtIds = ptIds.length;\n  // are any points already marked for this cell? If so use that as the provoking point\n  for (let ptIdx = 0; ptIdx < numPtIds; ptIdx++) {\n    let ptId = ptIds[ptIdx];\n    if (state.cellProvokedMap.has(ptId)) {\n      state.ibo[state.iboId++] = state.cellProvokedMap.get(ptId);\n\n      // insert remaining ptIds (they do not need to provoke)\n      for (let ptIdx2 = ptIdx + 1; ptIdx2 < ptIdx + numPtIds; ptIdx2++) {\n        ptId = ptIds[ptIdx2 % numPtIds];\n        const flatId = _getOrAddFlatId(state, ptId, cellId);\n        // add to ibo\n        state.ibo[state.iboId++] = flatId;\n      }\n      // all done now\n      return;\n    }\n  }\n\n  // else have any of the points not been used yet? (not in provokedPointIds)\n  for (let ptIdx = 0; ptIdx < numPtIds; ptIdx++) {\n    let ptId = ptIds[ptIdx];\n    if (!state.provokedPointIds[ptId]) {\n      let flatId = _getOrAddFlatId(state, ptId, cellId);\n      // mark provoking and add to ibo\n      state.provokedPointIds[ptId] = 1;\n      state.cellProvokedMap.set(ptId, flatId);\n      // when provoking always set the cellId as an original non-provoking value\n      // will have been stored and we need to overwrite that\n      state.flatIdToCellId[flatId] = cellId;\n      state.ibo[state.iboId++] = flatId;\n\n      // insert remaining ptIds (they do not need to provoke)\n      for (let ptIdx2 = ptIdx + 1; ptIdx2 < ptIdx + numPtIds; ptIdx2++) {\n        ptId = ptIds[ptIdx2 % numPtIds];\n        flatId = _getOrAddFlatId(state, ptId, cellId);\n        // add to ibo\n        state.ibo[state.iboId++] = flatId;\n      }\n      // all done now\n      return;\n    }\n  }\n\n  // if we got here then none of the ptIds could be used to provoke\n  // so just duplicate the first one\n  let ptId = ptIds[0];\n  let flatId = state.flatId;\n  state.cellProvokedMap.set(ptId, flatId);\n  state.flatIdToPointId[state.flatId] = ptId;\n  state.flatIdToCellId[state.flatId] = cellId;\n  state.flatId++;\n\n  // add to ibo\n  state.ibo[state.iboId++] = flatId;\n\n  // insert remaining ptIds (they do not need to provoke)\n  for (let ptIdx2 = 1; ptIdx2 < numPtIds; ptIdx2++) {\n    ptId = ptIds[ptIdx2];\n    flatId = _getOrAddFlatId(state, ptId, cellId);\n    // add to ibo\n    state.ibo[state.iboId++] = flatId;\n  }\n}\nfunction countCell(ptIds, cellId, state) {\n  const numPtIds = ptIds.length;\n  state.iboSize += numPtIds;\n\n  // are any points already marked for this cell? If so use that as the provoking point\n  for (let ptIdx = 0; ptIdx < numPtIds; ptIdx++) {\n    const ptId = ptIds[ptIdx];\n    if (state.cellProvokedMap.has(ptId)) {\n      return;\n    }\n  }\n\n  // else have any of the points not been used yet? (not in provokedPointIds)\n  for (let ptIdx = 0; ptIdx < numPtIds; ptIdx++) {\n    const ptId = ptIds[ptIdx];\n    if (!state.provokedPointIds[ptId]) {\n      state.provokedPointIds[ptId] = 1;\n      state.cellProvokedMap.set(ptId, 1);\n      return;\n    }\n  }\n  // if we got here then none of the ptIds could be used to provoke\n  state.cellProvokedMap.set(ptIds[0], 1);\n  state.extraPoints++;\n}\nlet processCell;\nconst _single = new Uint32Array(1);\nconst _double = new Uint32Array(2);\nconst _triple = new Uint32Array(3);\nconst _indexCellBuilders = {\n  // easy, every input point becomes an output point\n  anythingToPoints(numPoints, cellPts, offset, cellId, state) {\n    for (let i = 0; i < numPoints; ++i) {\n      _single[0] = cellPts[offset + i];\n      processCell(_single, cellId, state);\n    }\n  },\n  linesToWireframe(numPoints, cellPts, offset, cellId, state) {\n    // for lines we add a bunch of segments\n    for (let i = 0; i < numPoints - 1; ++i) {\n      _double[0] = cellPts[offset + i];\n      _double[1] = cellPts[offset + i + 1];\n      processCell(_double, cellId, state);\n    }\n  },\n  polysToWireframe(numPoints, cellPts, offset, cellId, state) {\n    // for polys we add a bunch of segments and close it\n    if (numPoints > 2) {\n      for (let i = 0; i < numPoints; ++i) {\n        _double[0] = cellPts[offset + i];\n        _double[1] = cellPts[offset + (i + 1) % numPoints];\n        processCell(_double, cellId, state);\n      }\n    }\n  },\n  stripsToWireframe(numPoints, cellPts, offset, cellId, state) {\n    if (numPoints > 2) {\n      // for strips we add a bunch of segments and close it\n      for (let i = 0; i < numPoints - 1; ++i) {\n        _double[0] = cellPts[offset + i];\n        _double[1] = cellPts[offset + i + 1];\n        processCell(_double, cellId, state);\n      }\n      for (let i = 0; i < numPoints - 2; i++) {\n        _double[0] = cellPts[offset + i];\n        _double[1] = cellPts[offset + i + 2];\n        processCell(_double, cellId, state);\n      }\n    }\n  },\n  polysToSurface(npts, cellPts, offset, cellId, state) {\n    for (let i = 0; i < npts - 2; i++) {\n      _triple[0] = cellPts[offset];\n      _triple[1] = cellPts[offset + i + 1];\n      _triple[2] = cellPts[offset + i + 2];\n      processCell(_triple, cellId, state);\n    }\n  },\n  stripsToSurface(npts, cellPts, offset, cellId, state) {\n    for (let i = 0; i < npts - 2; i++) {\n      _triple[0] = cellPts[offset + i];\n      _triple[1] = cellPts[offset + i + 1 + i % 2];\n      _triple[2] = cellPts[offset + i + 1 + (i + 1) % 2];\n      processCell(_triple, cellId, state);\n    }\n  }\n};\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUIndexBufferManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUIndexBuffer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUIndexBuffer');\n  publicAPI.buildIndexBuffer = req => {\n    const cellArray = req.cells;\n    const primitiveType = req.primitiveType;\n    const representation = req.representation;\n    const cellOffset = req.cellOffset;\n    const array = cellArray.getData();\n    const cellArraySize = array.length;\n    const inRepName = getPrimitiveName(primitiveType);\n    const numPts = req.numberOfPoints;\n    const state = {\n      provokedPointIds: new Uint8Array(numPts),\n      // size is good\n      extraPoints: 0,\n      iboSize: 0,\n      flatId: 0,\n      iboId: 0,\n      cellProvokedMap: new _LimitedMap()\n    };\n    let func = null;\n    if (representation === Representation.POINTS || primitiveType === PrimitiveTypes.Points) {\n      func = _indexCellBuilders.anythingToPoints;\n    } else if (representation === Representation.WIREFRAME || primitiveType === PrimitiveTypes.Lines) {\n      func = _indexCellBuilders[`${inRepName}ToWireframe`];\n    } else {\n      func = _indexCellBuilders[`${inRepName}ToSurface`];\n    }\n\n    // first we count how many extra provoking points we need\n    processCell = countCell;\n    let cellId = cellOffset || 0;\n    for (let cellArrayIndex = 0; cellArrayIndex < cellArraySize;) {\n      state.cellProvokedMap.clear();\n      func(array[cellArrayIndex], array, cellArrayIndex + 1, cellId, state);\n      cellArrayIndex += array[cellArrayIndex] + 1;\n      cellId++;\n    }\n\n    // then we allocate the remaining structures\n    // (we pick the best size to save space and transfer costs)\n    if (numPts <= 0xffff) {\n      state.flatIdToPointId = new Uint16Array(numPts + state.extraPoints);\n    } else {\n      state.flatIdToPointId = new Uint32Array(numPts + state.extraPoints);\n    }\n    if (numPts + state.extraPoints < 0x8fff) {\n      state.pointIdToFlatId = new Int16Array(numPts);\n    } else {\n      state.pointIdToFlatId = new Int32Array(numPts);\n    }\n    if (numPts + state.extraPoints <= 0xffff) {\n      state.ibo = new Uint16Array(state.iboSize);\n      req.format = 'uint16';\n    } else {\n      state.ibo = new Uint32Array(state.iboSize);\n      req.format = 'uint32';\n    }\n    if (cellId <= 0xffff) {\n      state.flatIdToCellId = new Uint16Array(numPts + state.extraPoints);\n    } else {\n      state.flatIdToCellId = new Uint32Array(numPts + state.extraPoints);\n    }\n    state.pointIdToFlatId.fill(-1);\n    state.provokedPointIds.fill(0);\n\n    // and fill them in\n    processCell = fillCell;\n    cellId = cellOffset || 0;\n    for (let cellArrayIndex = 0; cellArrayIndex < cellArraySize;) {\n      state.cellProvokedMap.clear();\n      func(array[cellArrayIndex], array, cellArrayIndex + 1, cellId, state);\n      cellArrayIndex += array[cellArrayIndex] + 1;\n      cellId++;\n    }\n    delete state.provokedPointIds;\n    delete state.pointIdToFlatId;\n\n    // store the results we need\n    req.nativeArray = state.ibo;\n    model.flatIdToPointId = state.flatIdToPointId;\n    model.flatIdToCellId = state.flatIdToCellId;\n    model.flatSize = state.flatId;\n    model.indexCount = state.iboId;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  flatIdToPointId: null,\n  flatIdToCellId: null,\n  flatSize: 0,\n  indexCount: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkWebGPUBuffer.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['flatIdToPointId', 'flatIdToCellId', 'flatSize', 'indexCount']);\n  vtkWebGPUIndexBuffer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUIndexBuffer$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkWebGPUIndexBuffer$1 as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, g as get, e as setGet } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUPipeline methods\n// ----------------------------------------------------------------------------\nfunction vtkWebGPUPipeline(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPipeline');\n  publicAPI.getShaderDescriptions = () => model.shaderDescriptions;\n  publicAPI.initialize = (device, hash) => {\n    // start with the renderencoder settings\n    model.pipelineDescription = model.renderEncoder.getPipelineSettings();\n    model.pipelineDescription.primitive.topology = model.topology;\n    model.pipelineDescription.vertex = model.vertexState;\n    model.pipelineDescription.label = hash;\n\n    // add in bind group layouts\n    const bindGroupLayouts = [];\n    for (let i = 0; i < model.layouts.length; i++) {\n      bindGroupLayouts.push(model.layouts[i].layout);\n    }\n    model.pipelineLayout = device.getHandle().createPipelineLayout({\n      bindGroupLayouts\n    });\n    model.pipelineDescription.layout = model.pipelineLayout;\n    for (let i = 0; i < model.shaderDescriptions.length; i++) {\n      const sd = model.shaderDescriptions[i];\n      const sm = device.getShaderModule(sd);\n      if (sd.getType() === 'vertex') {\n        model.pipelineDescription.vertex.module = sm.getHandle();\n        model.pipelineDescription.vertex.entryPoint = 'main';\n      }\n      if (sd.getType() === 'fragment') {\n        model.pipelineDescription.fragment.module = sm.getHandle();\n        model.pipelineDescription.fragment.entryPoint = 'main';\n      }\n    }\n    model.handle = device.getHandle().createRenderPipeline(model.pipelineDescription);\n  };\n  publicAPI.getShaderDescription = stype => {\n    for (let i = 0; i < model.shaderDescriptions.length; i++) {\n      if (model.shaderDescriptions[i].getType() === stype) return model.shaderDescriptions[i];\n    }\n    return null;\n  };\n  publicAPI.addBindGroupLayout = bindGroup => {\n    if (!bindGroup) {\n      return;\n    }\n    model.layouts.push({\n      layout: bindGroup.getBindGroupLayout(model.device),\n      label: bindGroup.getLabel()\n    });\n  };\n  publicAPI.getBindGroupLayout = idx => model.layouts[idx].layout;\n  publicAPI.getBindGroupLayoutCount = llabel => {\n    for (let i = 0; i < model.layouts.length; i++) {\n      if (model.layouts[i].label === llabel) {\n        return i;\n      }\n    }\n    return 0;\n  };\n  publicAPI.bindVertexInput = (renderEncoder, vInput) => {\n    vInput.bindBuffers(renderEncoder);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  handle: null,\n  layouts: null,\n  renderEncoder: null,\n  shaderDescriptions: null,\n  vertexState: null,\n  topology: null,\n  pipelineDescription: null\n};\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  obj(publicAPI, model);\n  model.layouts = [];\n  model.shaderDescriptions = [];\n  get(publicAPI, model, ['handle', 'pipelineDescription']);\n  setGet(publicAPI, model, ['device', 'renderEncoder', 'topology', 'vertexState']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n  vtkWebGPUPipeline(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nconst newInstance = newInstance$1(extend, 'vtkWebGPUPipeline');\n\n// ----------------------------------------------------------------------------\nvar vtkWebGPUPipeline$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUPipeline$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkWebGPUPixelSpaceCallbackMapper');\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n    model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n    const aspectRatio = model.WebGPURenderer.getAspectRatio();\n    const camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;\n    const tsize = model.WebGPURenderer.getTiledSizeAndOrigin();\n    const texels = null;\n    if (model.renderable.getUseZValues()) ;\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUPixelSpaceCallbackMapper');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { n as newInstance$1 } from '../../macros2.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  PrimitiveTypes\n} = vtkWebGPUBufferManager;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPolyDataMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPolyDataMapper');\n  publicAPI.createCellArrayMapper = () => vtkWebGPUCellArrayMapper.newInstance();\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n      const poly = model.renderable.getInputData();\n      model.renderable.mapScalars(poly, 1.0);\n      publicAPI.updateCellArrayMappers(poly);\n    }\n  };\n  publicAPI.updateCellArrayMappers = poly => {\n    const prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()];\n\n    // we instantiate a cell array mapper for each cellArray that has cells\n    // and they handle the rendering of that cell array\n    const cellMappers = [];\n    let cellOffset = 0;\n    for (let i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {\n      if (prims[i].getNumberOfValues() > 0) {\n        if (!model.primitives[i]) {\n          model.primitives[i] = publicAPI.createCellArrayMapper();\n        }\n        const cellMapper = model.primitives[i];\n        cellMapper.setCellArray(prims[i]);\n        cellMapper.setCurrentInput(poly);\n        cellMapper.setCellOffset(cellOffset);\n        cellMapper.setPrimitiveType(i);\n        cellMapper.setRenderable(model.renderable);\n        cellOffset += prims[i].getNumberOfCells();\n        cellMappers.push(cellMapper);\n      } else {\n        model.primitives[i] = null;\n      }\n    }\n    if (model.WebGPUActor.getRenderable().getProperty().getEdgeVisibility()) {\n      for (let i = PrimitiveTypes.TriangleEdges; i <= PrimitiveTypes.TriangleStripEdges; i++) {\n        if (prims[i - 2].getNumberOfValues() > 0) {\n          if (!model.primitives[i]) {\n            model.primitives[i] = publicAPI.createCellArrayMapper();\n          }\n          const cellMapper = model.primitives[i];\n          cellMapper.setCellArray(prims[i - 2]);\n          cellMapper.setCurrentInput(poly);\n          cellMapper.setCellOffset(model.primitives[i - 2].getCellOffset());\n          cellMapper.setPrimitiveType(i);\n          cellMapper.setRenderable(model.renderable);\n          cellMappers.push(cellMapper);\n        } else {\n          model.primitives[i] = null;\n        }\n      }\n    }\n    publicAPI.prepareNodes();\n    publicAPI.addMissingChildren(cellMappers);\n    publicAPI.removeUnusedNodes();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  primitives: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.primitives = [];\n\n  // Object methods\n  vtkWebGPUPolyDataMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUPolyDataMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUPolyDataMapper$1 = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkMapper', newInstance);\n\nexport { vtkWebGPUPolyDataMapper$1 as default, extend, newInstance };\n","import { n as newInstance$1 } from '../../macros2.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  PrimitiveTypes\n} = vtkWebGPUBufferManager;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPolyDataMapper2D');\n  publicAPI.createCellArrayMapper = () => vtkWebGPUCellArrayMapper.newInstance();\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor2D');\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n      const poly = model.renderable.getInputData();\n      model.renderable.mapScalars(poly, 1.0);\n      publicAPI.updateCellArrayMappers(poly);\n    }\n  };\n  publicAPI.updateCellArrayMappers = poly => {\n    const prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()];\n\n    // we instantiate a cell array mapper for each cellArray that has cells\n    // and they handle the rendering of that cell array\n    const cellMappers = [];\n    let cellOffset = 0;\n    for (let i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {\n      if (prims[i].getNumberOfValues() > 0) {\n        if (!model.primitives[i]) {\n          model.primitives[i] = publicAPI.createCellArrayMapper();\n        }\n        const cellMapper = model.primitives[i];\n        cellMapper.setCellArray(prims[i]);\n        cellMapper.setCurrentInput(poly);\n        cellMapper.setCellOffset(cellOffset);\n        cellMapper.setPrimitiveType(i);\n        cellMapper.setRenderable(model.renderable);\n        cellMapper.setIs2D(true);\n        cellOffset += prims[i].getNumberOfCells();\n        cellMappers.push(cellMapper);\n      } else {\n        model.primitives[i] = null;\n      }\n    }\n    publicAPI.prepareNodes();\n    publicAPI.addMissingChildren(cellMappers);\n    publicAPI.removeUnusedNodes();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(initialValues) {\n  return {\n    primitives: [],\n    ...initialValues\n  };\n}\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.primitives = [];\n\n  // Object methods\n  vtkWebGPUPolyDataMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUPolyDataMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { mat4, vec3 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, g as get, k as getArray, e as setGet, c as macro } from '../../macros2.js';\nimport { r as radiansFromDegrees } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkWebGPUBindGroup from './BindGroup.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUStorageBuffer from './StorageBuffer.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\nconst clearFragColorTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nconst clearFragTextureTemplate = `\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\n  var tau: f32 = 6.28318530718;\n  var pi: f32 = 3.14159265359;\n  var out: vec2<f32> = vec2<f32>(0.0);\n\n  out.x = atan2(dir.z, dir.x) / tau;\n  out.x += 0.5;\n\n  var phix: f32 = length(vec2(dir.x, dir.z));\n  out.y = atan2(dir.y, phix) / pi + 0.5;\n\n  return out;\n}\n\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec4<f32> = vec4<f32>(input.vertexVC.xy, -1, 1);\n  var V: vec4<f32> = normalize(mapperUBO.FSQMatrix * tcoord); // vec2<f32>((input.tcoordVS.x - 0.5) * 2, -(input.tcoordVS.y - 0.5) * 2);\n  // textureSampleLevel gets rid of some ugly artifacts\n  var background = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, vecToRectCoord(V.xyz), 0.0);\n  var computedColor: vec4<f32> = vec4<f32>(background.rgb, 1);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nconst _fsqClearMat4 = new Float64Array(16);\nconst _tNormalMat4 = new Float64Array(16);\n\n// Light type index gives either 0, 1, or 2 which indicates what type of light there is.\n// While technically, there are only spot and directional lights, within the CellArrayMapper\n// there is a third, positional light. It is technically just a variant of a spot light with\n// a cone angle of 90 or above, however certain calculations can be skipped if it is treated\n// separately.\n// The mappings are shown below:\n// 0 -> positional light\n// 1 -> directional light\n// 2 -> spot light\nfunction getLightTypeIndex(light) {\n  if (light.getPositional()) {\n    if (light.getConeAngle() >= 90) {\n      return 0;\n    }\n    return 2;\n  }\n  return 1;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPURenderer methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPURenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderer');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model.camera = model.renderable.getActiveCamera();\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.camera);\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n      model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);\n      publicAPI.updateStabilizedMatrix();\n    }\n  };\n  publicAPI.updateStabilizedMatrix = () => {\n    // This method is designed to help with floating point\n    // issues when rendering datasets that push the limits of\n    // resolutions on float.\n    //\n    // One of the most common cases is when the dataset is located far\n    // away from the origin relative to the clipping range we are looking\n    // at. For that case we want to perform the floating point sensitive\n    // multiplications on the CPU in double. To this end we want the\n    // vertex rendering ops to look something like\n    //\n    // Compute shifted points and load those into the VBO\n    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;\n    //\n    // In the vertex shader do the following\n    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;\n    //\n    // We use two matrices because it is expensive to change the\n    // WorldToStabilized matrix as we have to reupload all pointCoords\n    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to\n    // Device matrix is the one that gets updated every time the camera\n    // changes.\n    //\n    // The basic idea is that we should translate the data so that\n    // when the center of the view frustum moves a lot\n    // we recenter it. The center of the view frustum is roughly\n    // camPos + dirOfProj*(far + near)*0.5\n    const clipRange = model.camera.getClippingRange();\n    const pos = model.camera.getPositionByReference();\n    const dop = model.camera.getDirectionOfProjectionByReference();\n    const center = [];\n    const offset = [];\n    vec3.scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));\n    vec3.add(center, pos, offset);\n    vec3.sub(offset, center, model.stabilizedCenter);\n    const length = vec3.len(offset);\n    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {\n      model.stabilizedCenter = center;\n      model.stabilizedTime.modified();\n    }\n  };\n  publicAPI.updateLights = () => {\n    let count = 0;\n    const lights = model.renderable.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n    return count;\n  };\n  publicAPI.updateUBO = () => {\n    // make sure the data is up to date\n    // has the camera changed?\n    const utime = model.UBO.getSendTime();\n    if (model._parent.getMTime() > utime || publicAPI.getMTime() > utime || model.camera.getMTime() > utime || model.renderable.getMTime() > utime) {\n      const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);\n      model.UBO.setArray('SCPCMatrix', keyMats.scpc);\n      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);\n      model.UBO.setArray('SCVCMatrix', keyMats.scvc);\n      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);\n      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);\n      model.UBO.setValue('LightCount', model.renderable.getLights().length);\n      model.UBO.setValue('MaxEnvironmentMipLevel', model.renderable.getEnvironmentTexture()?.getMipLevel());\n      model.UBO.setValue('BackgroundDiffuseStrength', model.renderable.getEnvironmentTextureDiffuseStrength());\n      model.UBO.setValue('BackgroundSpecularStrength', model.renderable.getEnvironmentTextureSpecularStrength());\n      const tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n      model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);\n      model.UBO.setValue('cameraParallel', model.camera.getParallelProjection());\n      const device = model._parent.getDevice();\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n  publicAPI.updateSSBO = () => {\n    const lights = model.renderable.getLights();\n    const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    let lightTimeString = `${model.renderable.getMTime()}`;\n    for (let i = 0; i < lights.length; i++) {\n      lightTimeString += lights[i].getMTime();\n    }\n    if (lightTimeString !== model.lightTimeString) {\n      const lightPosArray = new Float32Array(lights.length * 4);\n      const lightDirArray = new Float32Array(lights.length * 4);\n      const lightColorArray = new Float32Array(lights.length * 4);\n      const lightTypeArray = new Float32Array(lights.length * 4);\n      for (let i = 0; i < lights.length; i++) {\n        const offset = i * 4;\n\n        // Position\n        const viewCoordinatePosition = lights[i].getPosition();\n        vec3.transformMat4(viewCoordinatePosition, viewCoordinatePosition, keyMats.wcvc);\n        // viewCoordinatePosition\n        lightPosArray[offset] = viewCoordinatePosition[0];\n        lightPosArray[offset + 1] = viewCoordinatePosition[1];\n        lightPosArray[offset + 2] = viewCoordinatePosition[2];\n        lightPosArray[offset + 3] = 0;\n\n        // Rotation (All are negative to correct for -Z being forward)\n        lightDirArray[offset] = -lights[i].getDirection()[0];\n        lightDirArray[offset + 1] = -lights[i].getDirection()[1];\n        lightDirArray[offset + 2] = -lights[i].getDirection()[2];\n        lightDirArray[offset + 3] = 0;\n\n        // Color\n        lightColorArray[offset] = lights[i].getColor()[0];\n        lightColorArray[offset + 1] = lights[i].getColor()[1];\n        lightColorArray[offset + 2] = lights[i].getColor()[2];\n        lightColorArray[offset + 3] = lights[i].getIntensity() * 5; // arbitrary multiplication to fix the dullness of low value PBR lights\n\n        // Type\n        lightTypeArray[offset] = getLightTypeIndex(lights[i]); // Type\n        lightTypeArray[offset + 1] = Math.cos(radiansFromDegrees(lights[i].getConeAngle())); // Inner Phi, should probably do some check on these to make sure they dont excede limits\n        lightTypeArray[offset + 2] = Math.cos(radiansFromDegrees(lights[i].getConeAngle() + lights[i].getConeFalloff())); // Outer Phi\n        lightTypeArray[offset + 3] = 0;\n      }\n\n      // Im not sure how correct this is, but this is what the example does\n      // https://kitware.github.io/vtk-js/api/Rendering_WebGPU_VolumePassFSQ.html\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(lights.length);\n      model.SSBO.addEntry('LightPos', 'vec4<f32>'); // Position\n      model.SSBO.addEntry('LightDir', 'vec4<f32>'); // Direction\n      model.SSBO.addEntry('LightColor', 'vec4<f32>'); // Color (r, g, b, intensity)\n      model.SSBO.addEntry('LightData', 'vec4<f32>'); // Other data (type, etc, etc, etc)\n\n      model.SSBO.setAllInstancesFromArray('LightPos', lightPosArray);\n      model.SSBO.setAllInstancesFromArray('LightDir', lightDirArray);\n      model.SSBO.setAllInstancesFromArray('LightColor', lightColorArray);\n      model.SSBO.setAllInstancesFromArray('LightData', lightTypeArray);\n      const device = model._parent.getDevice();\n      model.SSBO.send(device);\n    }\n    model.lightTimeString = lightTimeString;\n  };\n  publicAPI.scissorAndViewport = encoder => {\n    const tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n    encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0);\n    // set scissor\n    encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n  };\n  publicAPI.bindUBO = renderEncoder => {\n    renderEncoder.activateBindGroup(model.bindGroup);\n  };\n\n  // Renders myself\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n      publicAPI.updateUBO();\n      publicAPI.updateSSBO();\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      publicAPI.clear();\n      model.renderEncoder.end();\n    }\n  };\n  publicAPI.clear = () => {\n    if (model.renderable.getTransparent() || model.suppressClear) {\n      return;\n    }\n    const device = model._parent.getDevice();\n    // Normal Solid Color\n    if (!model.clearFSQ) {\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      model.backgroundTex = model.renderable.getEnvironmentTexture();\n    }\n    // Textured Background\n    if (model.clearFSQ.getPipelineHash() !== 'clearfsqwithtexture' && model.renderable.getUseEnvironmentTextureAsBackground() && model.backgroundTex?.getImageLoaded()) {\n      model.clearFSQ.setFragmentShaderTemplate(clearFragTextureTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      const environmentTextureHash = device.getTextureManager().getTextureForVTKTexture(model.backgroundTex);\n      if (environmentTextureHash.getReady()) {\n        const tview = environmentTextureHash.createView(`EnvironmentTexture`);\n        model.clearFSQ.setTextureViews([tview]);\n        model.backgroundTexLoaded = true;\n        const interpolate = model.backgroundTex.getInterpolate() ? 'linear' : 'nearest';\n        tview.addSampler(device, {\n          addressModeU: 'repeat',\n          addressModeV: 'clamp-to-edge',\n          addressModeW: 'repeat',\n          minFilter: interpolate,\n          magFilter: interpolate,\n          mipmapFilter: 'linear'\n        });\n      }\n      model.clearFSQ.setPipelineHash('clearfsqwithtexture');\n    } else if (model.clearFSQ.getPipelineHash() === 'clearfsqwithtexture' && !model.renderable.getUseEnvironmentTextureAsBackground()) {\n      // In case the mode is changed at runtime\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n    }\n    const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    const background = model.renderable.getBackgroundByReference();\n    model.clearFSQ.getUBO().setArray('BackgroundColor', background);\n    mat4.transpose(_tNormalMat4, keyMats.normalMatrix);\n    mat4.mul(_fsqClearMat4, keyMats.scvc, keyMats.pcsc);\n    mat4.mul(_fsqClearMat4, _tNormalMat4, _fsqClearMat4);\n    model.clearFSQ.getUBO().setArray('FSQMatrix', _fsqClearMat4);\n    model.clearFSQ.getUBO().sendIfNeeded(device);\n    model.clearFSQ.prepareAndDraw(model.renderEncoder);\n  };\n  publicAPI.translucentPass = prepass => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n  publicAPI.volumeDepthRangePass = prepass => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n    const viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n  publicAPI.convertToOpenGLDepth = val => model.webgpuCamera.convertToOpenGLDepth(val);\n  publicAPI.getYInvertedTiledSizeAndOrigin = () => {\n    const res = publicAPI.getTiledSizeAndOrigin();\n    const size = model._parent.getSizeByReference();\n    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;\n    return res;\n  };\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference();\n\n    // if there is no window assume 0 1\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0];\n\n    // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1];\n\n    // store the result as a pixel value\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]);\n\n    // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2);\n\n    // now compute the size of the intersection of the viewport with the\n    // current tile\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n    return {\n      usize,\n      vsize,\n      lowerLeftU,\n      lowerLeftV\n    };\n  };\n  publicAPI.getPropFromID = id => {\n    for (let i = 0; i < model.children.length; i++) {\n      const res = model.children[i].getPropID ? model.children[i].getPropID() : -1;\n      if (res === id) {\n        return model.children[i];\n      }\n    }\n    return null;\n  };\n  publicAPI.getStabilizedTime = () => model.stabilizedTime.getMTime();\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  bindGroup: null,\n  selector: null,\n  renderEncoder: null,\n  recenterThreshold: 20.0,\n  suppressClear: false,\n  stabilizedCenter: [0.0, 0.0, 0.0]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // UBO\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'rendererUBO'\n  });\n  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('viewportSize', 'vec2<f32>');\n  model.UBO.addEntry('LightCount', 'i32');\n  model.UBO.addEntry('MaxEnvironmentMipLevel', 'f32');\n  model.UBO.addEntry('BackgroundDiffuseStrength', 'f32');\n  model.UBO.addEntry('BackgroundSpecularStrength', 'f32');\n  model.UBO.addEntry('cameraParallel', 'u32');\n\n  // SSBO (Light data)\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'rendererLightSSBO'\n  });\n  model.lightTimeString = '';\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({\n    label: 'rendererBG'\n  });\n  model.bindGroup.setBindables([model.UBO, model.SSBO]);\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  model.stabilizedTime = {};\n  obj(model.stabilizedTime, {\n    mtime: 0\n  });\n\n  // Build VTK API\n  get(publicAPI, model, ['bindGroup', 'stabilizedTime']);\n  getArray(publicAPI, model, ['stabilizedCenter']);\n  setGet(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']);\n\n  // Object methods\n  vtkWebGPURenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPURenderer');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkRenderer', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\n/* eslint-disable no-bitwise */\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUSampler methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUSampler(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUSampler');\n  publicAPI.create = function (device) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    model.device = device;\n    model.options.addressModeU = options.addressModeU ? options.addressModeU : 'clamp-to-edge';\n    model.options.addressModeV = options.addressModeV ? options.addressModeV : 'clamp-to-edge';\n    model.options.addressModeW = options.addressModeW ? options.addressModeW : 'clamp-to-edge';\n    model.options.magFilter = options.magFilter ? options.magFilter : 'nearest';\n    model.options.minFilter = options.minFilter ? options.minFilter : 'nearest';\n    model.options.mipmapFilter = options.mipmapFilter ? options.mipmapFilter : 'nearest';\n    model.options.label = model.label;\n    model.handle = model.device.getHandle().createSampler(model.options);\n    model.bindGroupTime.modified();\n  };\n  publicAPI.getShaderCode = (binding, group) => {\n    const result = `@binding(${binding}) @group(${group}) var ${model.label}: sampler;`;\n    return result;\n  };\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: model.handle\n    };\n    return foo;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  label: null,\n  options: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  model.options = {};\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    /* eslint-enable no-undef */\n    sampler: {\n      // type: 'filtering',\n    }\n  };\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'handle', 'options']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'device', 'label']);\n  vtkWebGPUSampler(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUSampler$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUSampler$1 as default, extend, newInstance };\n","import { n as newInstance$1 } from '../../macros2.js';\nimport vtkScalarBarActor from '../Core/ScalarBarActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUScalarBarActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUScalarBarActor(publicAPI, model) {\n  model.classHierarchy.push('vtkWebGPUScalarBarActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      if (!model.scalarBarActorHelper.getRenderable()) {\n        model.scalarBarActorHelper.setRenderable(model.renderable);\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getBarActor());\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getTmActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      const camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;\n      const tsize = model.WebGPURenderer.getTiledSizeAndOrigin();\n      model.scalarBarActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model.WebGPURenderWindow.getRenderable());\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.scalarBarActorHelper = vtkScalarBarActor.newScalarBarActorHelper();\n\n  // Object methods\n  vtkWebGPUScalarBarActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUScalarBarActor');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkScalarBarActor', newInstance);\n\nexport { index as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkWebGPUShaderModule from './ShaderModule.js';\n\n// perform in place string substitutions, indicate if a substitution was done\n// this is useful for building up shader strings which typically involve\n// lots of string substitutions. Return true if a substitution was done.\nfunction substitute(source, search, replace) {\n  let all = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const replaceStr = Array.isArray(replace) ? replace.join('\\n') : replace;\n  let replaced = false;\n  if (source.search(search) !== -1) {\n    replaced = true;\n  }\n  let gflag = '';\n  if (all) {\n    gflag = 'g';\n  }\n  const regex = new RegExp(search, gflag);\n  const resultstr = source.replace(regex, replaceStr);\n  return {\n    replace: replaced,\n    result: resultstr\n  };\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUShaderCache methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUShaderCache(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUShaderCache');\n  publicAPI.getShaderModule = shaderDesc => {\n    // has it already been created?\n    const sType = shaderDesc.getType();\n    const sHash = shaderDesc.getHash();\n    const keys = model._shaderModules.keys();\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (key.getHash() === sHash && key.getType() === sType) {\n        return model._shaderModules.get(key);\n      }\n    }\n\n    // console.log(JSON.stringify(shaderDesc));\n\n    const sm = vtkWebGPUShaderModule.newInstance();\n    sm.initialize(model.device, shaderDesc);\n    model._shaderModules.set(shaderDesc, sm);\n    return sm;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  shaderModules: null,\n  device: null,\n  window: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Internal objects\n  model._shaderModules = new Map();\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['device', 'window']);\n\n  // Object methods\n  vtkWebGPUShaderCache(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUShaderCache');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUShaderCache$1 = {\n  newInstance,\n  extend,\n  substitute\n};\n\nexport { vtkWebGPUShaderCache$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUShaderDescription methods\n// ----------------------------------------------------------------------------\n\n// shader description\n\nfunction vtkWebGPUShaderDescription(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUShaderDescription');\n  publicAPI.hasOutput = name => model.outputNames.includes(name);\n  publicAPI.addOutput = function (type, name) {\n    let interpolation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    model.outputTypes.push(type);\n    model.outputNames.push(name);\n    model.outputInterpolations.push(interpolation);\n  };\n  publicAPI.addBuiltinOutput = (type, name) => {\n    model.builtinOutputTypes.push(type);\n    model.builtinOutputNames.push(name);\n  };\n  publicAPI.addBuiltinInput = (type, name) => {\n    model.builtinInputTypes.push(type);\n    model.builtinInputNames.push(name);\n  };\n\n  // perform shader replacements for the input and outputs\n  // of this shader. That includes vertex inputs if specified\n  publicAPI.replaceShaderCode = (priorStage, vertexInput) => {\n    const inputImpl = [];\n    let iodec = [];\n    if (vertexInput) {\n      inputImpl.push(vertexInput.getShaderCode());\n    }\n    if (priorStage || model.builtinInputNames.length) {\n      const inputStruct = [];\n      inputStruct.push(`struct ${model.type}Input\\n{`);\n      if (priorStage) {\n        const inputNames = priorStage.getOutputNamesByReference();\n        const inputTypes = priorStage.getOutputTypesByReference();\n        const inputInterpolations = priorStage.getOutputInterpolationsByReference();\n        for (let i = 0; i < inputNames.length; i++) {\n          if (inputInterpolations[i] !== undefined) {\n            inputStruct.push(`  @location(${i}) @interpolate(${inputInterpolations[i]}) ${inputNames[i]} : ${inputTypes[i]},`);\n          } else {\n            inputStruct.push(`  @location(${i}) ${inputNames[i]} : ${inputTypes[i]},`);\n          }\n        }\n      }\n      for (let i = 0; i < model.builtinInputNames.length; i++) {\n        inputStruct.push(`  ${model.builtinInputNames[i]} : ${model.builtinInputTypes[i]},`);\n      }\n      if (inputStruct.length > 1) {\n        inputStruct.push('};');\n        iodec = inputStruct;\n        inputImpl[inputImpl.length - 1] += ',';\n        inputImpl.push(`input: ${model.type}Input`);\n      }\n    }\n    if (inputImpl.length) {\n      model.code = vtkWebGPUShaderCache.substitute(model.code, '//VTK::IOStructs::Input', inputImpl).result;\n    }\n    if (model.outputNames.length + model.builtinOutputNames.length) {\n      const outputStruct = [`struct ${model.type}Output\\n{`];\n      for (let i = 0; i < model.outputNames.length; i++) {\n        if (model.outputInterpolations[i] !== undefined) {\n          outputStruct.push(`  @location(${i}) @interpolate(${model.outputInterpolations[i]}) ${model.outputNames[i]} : ${model.outputTypes[i]},`);\n        } else {\n          outputStruct.push(`  @location(${i}) ${model.outputNames[i]} : ${model.outputTypes[i]},`);\n        }\n      }\n      for (let i = 0; i < model.builtinOutputNames.length; i++) {\n        outputStruct.push(`  ${model.builtinOutputNames[i]} : ${model.builtinOutputTypes[i]},`);\n      }\n      outputStruct.push('};');\n      iodec = iodec.concat(outputStruct);\n      model.code = vtkWebGPUShaderCache.substitute(model.code, '//VTK::IOStructs::Output', [`-> ${model.type}Output`]).result;\n    }\n    model.code = vtkWebGPUShaderCache.substitute(model.code, '//VTK::IOStructs::Dec', iodec).result;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  type: null,\n  // 'vertex' or 'fragment'\n  hash: null,\n  code: null,\n  outputNames: null,\n  outputTypes: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  model.outputNames = [];\n  model.outputTypes = [];\n  model.outputInterpolations = [];\n  model.builtinOutputNames = [];\n  model.builtinOutputTypes = [];\n  model.builtinInputNames = [];\n  model.builtinInputTypes = [];\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['type', 'hash', 'code']);\n  macro.getArray(publicAPI, model, ['outputTypes', 'outputNames', 'outputInterpolations']);\n\n  // Object methods\n  vtkWebGPUShaderDescription(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUShaderDescription');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUShaderDescription$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUShaderDescription$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUShaderModule methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUShaderModule(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUShaderModule');\n  publicAPI.initialize = (device, shaderDesc) => {\n    model.device = device;\n    // console.log(shaderDesc.getCode());\n    model.handle = model.device.getHandle().createShaderModule({\n      code: shaderDesc.getCode()\n    });\n  };\n\n  // publicAPI.setLastCameraMTime = (mtime) => {\n  //   model.lastCameraMTime = mtime;\n  // };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['lastCameraMTime']);\n  macro.setGet(publicAPI, model, ['device', 'handle']);\n\n  // Object methods\n  vtkWebGPUShaderModule(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUShaderModule');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUShaderModule$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUShaderModule$1 as default };\n","import { m as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkWebGPUBindGroup from './BindGroup.js';\nimport vtkWebGPUPipeline from './Pipeline.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUShaderDescription from './ShaderDescription.js';\nimport vtkWebGPUVertexInput from './VertexInput.js';\n\nconst vtkWebGPUSimpleMapperVS = `\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@vertex\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : vertexOutput;\n\n  // var vertex: vec4<f32> = vertexBC;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  //VTK::Position::Impl\n\n  return output;\n}\n`;\nconst vtkWebGPUSimpleMapperFS = `\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::Light::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  // var computedColor:vec4<f32> = vec4<f32>(1.0,0.5,0.5,1.0);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUSimpleMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUSimpleMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUSimpleMapper');\n  publicAPI.generateShaderDescriptions = (hash, pipeline, vertexInput) => {\n    // create the shader descriptions\n    const vDesc = vtkWebGPUShaderDescription.newInstance({\n      type: 'vertex',\n      hash,\n      code: model.vertexShaderTemplate\n    });\n    const fDesc = vtkWebGPUShaderDescription.newInstance({\n      type: 'fragment',\n      hash,\n      code: model.fragmentShaderTemplate\n    });\n\n    // add them to the pipeline\n    const sdrs = pipeline.getShaderDescriptions();\n    sdrs.push(vDesc);\n    sdrs.push(fDesc);\n\n    // look for replacements to invoke\n    const scode = model.vertexShaderTemplate + model.fragmentShaderTemplate;\n    // eslint-disable-next-line prefer-regex-literals\n    const re = new RegExp('//VTK::[^:]*::', 'g');\n    const unique = scode.match(re).filter((v, i, a) => a.indexOf(v) === i);\n    const fnames = unique.map(v => `replaceShader${v.substring(7, v.length - 2)}`);\n\n    // now invoke shader replacement functions\n    for (let i = 0; i < fnames.length; i++) {\n      const fname = fnames[i];\n      if (fname !== 'replaceShaderIOStructs' && model.shaderReplacements.has(fname)) {\n        model.shaderReplacements.get(fname)(hash, pipeline, vertexInput);\n      }\n    }\n\n    // always replace the IOStructs last as other replacement funcs may\n    // add inputs or outputs\n    publicAPI.replaceShaderIOStructs(hash, pipeline, vertexInput);\n\n    // console.log(vDesc.getCode());\n    // console.log(fDesc.getCode());\n  };\n\n  publicAPI.replaceShaderIOStructs = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.replaceShaderCode(null, vertexInput);\n    const fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.replaceShaderCode(vDesc);\n  };\n  publicAPI.replaceShaderRenderEncoder = (hash, pipeline, vertexInput) => {\n    model.renderEncoder.replaceShaderCode(pipeline);\n  };\n  model.shaderReplacements.set('replaceShaderRenderEncoder', publicAPI.replaceShaderRenderEncoder);\n  publicAPI.replaceShaderRenderer = (hash, pipeline, vertexInput) => {\n    if (!model.WebGPURenderer) {\n      return;\n    }\n    const ubocode = model.WebGPURenderer.getBindGroup().getShaderCode(pipeline);\n    const vDesc = pipeline.getShaderDescription('vertex');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Renderer::Dec', [ubocode]).result;\n    vDesc.setCode(code);\n    const fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Renderer::Dec', [ubocode]).result;\n    fDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderRenderer', publicAPI.replaceShaderRenderer);\n  publicAPI.replaceShaderMapper = (hash, pipeline, vertexInput) => {\n    const ubocode = model.bindGroup.getShaderCode(pipeline);\n    const vDesc = pipeline.getShaderDescription('vertex');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Mapper::Dec', [ubocode]).result;\n    vDesc.setCode(code);\n    const fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addBuiltinInput('bool', '@builtin(front_facing) frontFacing');\n    code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Mapper::Dec', [ubocode]).result;\n    fDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderMapper', publicAPI.replaceShaderMapper);\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    output.Position = rendererUBO.SCPCMatrix*vertexBC;']).result;\n    vDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n  publicAPI.replaceShaderTCoord = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addOutput('vec2<f32>', 'tcoordVS');\n  };\n  model.shaderReplacements.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);\n  publicAPI.addTextureView = view => {\n    // is it already there?\n    if (model.textureViews.includes(view)) {\n      return;\n    }\n    model.textureViews.push(view);\n  };\n\n  // do everything required for this mapper to be rerady to draw\n  // but do not bind or do the actual draw commands as the pipeline\n  // is not neccessarily bound yet\n  publicAPI.prepareToDraw = renderEncoder => {\n    model.renderEncoder = renderEncoder;\n\n    // do anything needed to get our input data up to date\n    publicAPI.updateInput();\n\n    // make sure buffers are created and up to date\n    publicAPI.updateBuffers();\n\n    // update bindings and bind groups/layouts\n    // does not acutally bind them, that is done in draw(...)\n    publicAPI.updateBindings();\n\n    // update the pipeline, includes computing the hash, and if needed\n    // creating the pipeline, shader code etc\n    publicAPI.updatePipeline();\n  };\n  publicAPI.updateInput = () => {};\n  publicAPI.updateBuffers = () => {};\n  publicAPI.updateBindings = () => {\n    // bindings can change without a pipeline change\n    // as long as their layout remains the same.\n    // That is why this is done even when the pipeline\n    // hash doesn't change.\n    model.bindGroup.setBindables(publicAPI.getBindables());\n  };\n  publicAPI.computePipelineHash = () => {};\n  publicAPI.registerDrawCallback = encoder => {\n    encoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n  };\n  publicAPI.prepareAndDraw = encoder => {\n    publicAPI.prepareToDraw(encoder);\n    encoder.setPipeline(model.pipeline);\n    publicAPI.draw(encoder);\n  };\n\n  // do the rest of the calls required to draw this mapper\n  // at this point the command encouder and pipeline are\n  // created and bound\n  publicAPI.draw = renderEncoder => {\n    const pipeline = renderEncoder.getBoundPipeline();\n\n    // bind the mapper bind group\n    renderEncoder.activateBindGroup(model.bindGroup);\n    if (model.WebGPURenderer) {\n      model.WebGPURenderer.bindUBO(renderEncoder);\n    }\n\n    // bind the vertex input\n    pipeline.bindVertexInput(renderEncoder, model.vertexInput);\n    const indexBuffer = model.vertexInput.getIndexBuffer();\n    if (indexBuffer) {\n      renderEncoder.drawIndexed(indexBuffer.getIndexCount(), model.numberOfInstances, 0, 0, 0);\n    } else {\n      renderEncoder.draw(model.numberOfVertices, model.numberOfInstances, 0, 0);\n    }\n  };\n  publicAPI.getBindables = () => {\n    const bindables = [...model.additionalBindables];\n    if (model.UBO) {\n      bindables.push(model.UBO);\n    }\n    if (model.SSBO) {\n      bindables.push(model.SSBO);\n    }\n\n    // add texture BindGroupLayouts\n    for (let t = 0; t < model.textureViews.length; t++) {\n      bindables.push(model.textureViews[t]);\n      const samp = model.textureViews[t].getSampler();\n      if (samp) {\n        bindables.push(samp);\n      }\n    }\n    return bindables;\n  };\n  publicAPI.updatePipeline = () => {\n    publicAPI.computePipelineHash();\n    model.pipeline = model.device.getPipeline(model.pipelineHash);\n\n    // build the pipeline if needed\n    if (!model.pipeline) {\n      model.pipeline = vtkWebGPUPipeline.newInstance();\n      model.pipeline.setDevice(model.device);\n      if (model.WebGPURenderer) {\n        model.pipeline.addBindGroupLayout(model.WebGPURenderer.getBindGroup());\n      }\n      model.pipeline.addBindGroupLayout(model.bindGroup);\n      publicAPI.generateShaderDescriptions(model.pipelineHash, model.pipeline, model.vertexInput);\n      model.pipeline.setTopology(model.topology);\n      model.pipeline.setRenderEncoder(model.renderEncoder);\n      model.pipeline.setVertexState(model.vertexInput.getVertexInputInformation());\n      model.device.createPipeline(model.pipelineHash, model.pipeline);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  additionalBindables: undefined,\n  bindGroup: null,\n  device: null,\n  fragmentShaderTemplate: null,\n  numberOfInstances: 1,\n  numberOfVertices: 0,\n  pipelineHash: null,\n  shaderReplacements: null,\n  SSBO: null,\n  textureViews: null,\n  topology: 'triangle-list',\n  UBO: null,\n  vertexShaderTemplate: null,\n  WebGPURenderer: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.textureViews = [];\n  model.vertexInput = vtkWebGPUVertexInput.newInstance();\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({\n    label: 'mapperBG'\n  });\n  model.additionalBindables = [];\n  model.fragmentShaderTemplate = model.fragmentShaderTemplate || vtkWebGPUSimpleMapperFS;\n  model.vertexShaderTemplate = model.vertexShaderTemplate || vtkWebGPUSimpleMapperVS;\n  model.shaderReplacements = new Map();\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['pipeline', 'vertexInput']);\n  macro.setGet(publicAPI, model, ['additionalBindables', 'device', 'fragmentShaderTemplate', 'interpolate', 'numberOfInstances', 'numberOfVertices', 'pipelineHash', 'shaderReplacements', 'SSBO', 'textureViews', 'topology', 'UBO', 'vertexShaderTemplate', 'WebGPURenderer']);\n\n  // Object methods\n  vtkWebGPUSimpleMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUSimpleMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUSimpleMapper$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUSimpleMapper$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUTypes from './Types.js';\n\nconst {\n  BufferUsage\n} = vtkWebGPUBufferManager;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUStorageBuffer - similar to the UniformBuffer class\n// but YOU are responsible for layout issues and alignment.\n// The order you add entries is the order they will be layed out\n// in memory. But you must follow layout rules.\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUStorageBuffer methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUStorageBuffer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUStorageBuffer');\n  publicAPI.addEntry = (name, type) => {\n    if (model._bufferEntryNames.has(name)) {\n      vtkErrorMacro(`entry named ${name} already exists`);\n      return;\n    }\n    model._bufferEntryNames.set(name, model.bufferEntries.length);\n    const sizeInBytes = vtkWebGPUTypes.getByteStrideFromShaderFormat(type);\n    model.bufferEntries.push({\n      name,\n      type,\n      sizeInBytes,\n      offset: model.sizeInBytes,\n      nativeType: vtkWebGPUTypes.getNativeTypeFromShaderFormat(type)\n    });\n    model.sizeInBytes += sizeInBytes;\n  };\n  publicAPI.send = device => {\n    if (!model._buffer) {\n      const req = {\n        nativeArray: model.Float32Array,\n        usage: BufferUsage.Storage,\n        label: model.label\n      };\n      model._buffer = device.getBufferManager().getBuffer(req);\n      model.bindGroupTime.modified();\n      model._sendTime.modified();\n      return;\n    }\n    device.getHandle().queue.writeBuffer(model._buffer.getHandle(), 0, model.arrayBuffer, 0, model.sizeInBytes * model.numberOfInstances);\n    model._sendTime.modified();\n  };\n  publicAPI.createView = type => {\n    if (type in model === false) {\n      if (!model.arrayBuffer) {\n        model.arrayBuffer = new ArrayBuffer(model.sizeInBytes * model.numberOfInstances);\n      }\n      model[type] = macro.newTypedArray(type, model.arrayBuffer);\n    }\n  };\n  publicAPI.setValue = (name, instance, val) => {\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    view[(entry.offset + instance * model.sizeInBytes) / view.BYTES_PER_ELEMENT] = val;\n  };\n  publicAPI.setArray = (name, instance, arr) => {\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    const ioffset = (entry.offset + instance * model.sizeInBytes) / view.BYTES_PER_ELEMENT;\n    for (let i = 0; i < arr.length; i++) {\n      view[ioffset + i] = arr[i];\n    }\n  };\n  publicAPI.setAllInstancesFromArray = (name, arr) => {\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    const numComponents = arr.length / model.numberOfInstances;\n    for (let inst = 0; inst < model.numberOfInstances; inst++) {\n      const ioffset = (entry.offset + inst * model.sizeInBytes) / view.BYTES_PER_ELEMENT;\n      for (let i = 0; i < numComponents; i++) {\n        view[ioffset + i] = arr[inst * numComponents + i];\n      }\n    }\n  };\n  publicAPI.setAllInstancesFromArrayColorToFloat = (name, arr) => {\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    const numComponents = arr.length / model.numberOfInstances;\n    for (let inst = 0; inst < model.numberOfInstances; inst++) {\n      const ioffset = (entry.offset + inst * model.sizeInBytes) / view.BYTES_PER_ELEMENT;\n      for (let i = 0; i < numComponents; i++) {\n        view[ioffset + i] = arr[inst * numComponents + i] / 255.0;\n      }\n    }\n  };\n  publicAPI.setAllInstancesFromArray3x3To4x4 = (name, arr) => {\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    const numComponents = 9;\n    for (let inst = 0; inst < model.numberOfInstances; inst++) {\n      const ioffset = (entry.offset + inst * model.sizeInBytes) / view.BYTES_PER_ELEMENT;\n      for (let j = 0; j < 3; j++) {\n        for (let i = 0; i < 3; i++) {\n          view[ioffset + j * 4 + i] = arr[inst * numComponents + j * 3 + i];\n        }\n      }\n    }\n  };\n  publicAPI.getSendTime = () => model._sendTime.getMTime();\n  publicAPI.getShaderCode = (binding, group) => {\n    const lines = [`struct ${model.label}StructEntry\\n{`];\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      lines.push(`  ${entry.name}: ${entry.type},`);\n    }\n    lines.push(`\n};\nstruct ${model.label}Struct\n{\n  values: array<${model.label}StructEntry>,\n};\n@binding(${binding}) @group(${group}) var<storage, read> ${model.label}: ${model.label}Struct;\n`);\n    return lines.join('\\n');\n  };\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: {\n        buffer: model._buffer.getHandle()\n      }\n    };\n    return foo;\n  };\n  publicAPI.clearData = () => {\n    model.numberOfInstances = 0;\n    model.sizeInBytes = 0;\n    model.bufferEntries = [];\n    model._bufferEntryNames = new Map();\n    model._buffer = null;\n    delete model.arrayBuffer;\n    delete model.Float32Array;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  bufferEntries: null,\n  bufferEntryNames: null,\n  sizeInBytes: 0,\n  label: null,\n  numberOfInstances: 1\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n\n  // Internal objects\n  model._bufferEntryNames = new Map();\n  model.bufferEntries = [];\n  model._sendTime = {};\n  macro.obj(model._sendTime, {\n    mtime: 0\n  });\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n\n  // default SSBO desc\n  model.bindGroupLayoutEntry = model.bindGroupLayoutEntry || {\n    buffer: {\n      type: 'read-only-storage'\n    }\n  };\n  macro.get(publicAPI, model, ['bindGroupTime']);\n  macro.setGet(publicAPI, model, ['device', 'bindGroupLayoutEntry', 'label', 'numberOfInstances', 'sizeInBytes']);\n\n  // Object methods\n  vtkWebGPUStorageBuffer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUStorageBuffer');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUStorageBuffer$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUStorageBuffer$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUTextureView from './TextureView.js';\nimport vtkWebGPUTypes from './Types.js';\nimport vtkTexture from '../Core/Texture.js';\n\nconst {\n  BufferUsage\n} = vtkWebGPUBufferManager;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTexture');\n  publicAPI.create = (device, options) => {\n    model.device = device;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    const dimension = model.depth === 1 ? '2d' : '3d';\n    model.format = options.format ? options.format : 'rgba8unorm';\n    model.mipLevel = options.mipLevel ? options.mipLevel : 0;\n    /* eslint-disable no-undef */\n    /* eslint-disable no-bitwise */\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n    /* eslint-enable no-bitwise */\n    model.handle = model.device.getHandle().createTexture({\n      size: [model.width, model.height, model.depth],\n      format: model.format,\n      // 'rgba8unorm',\n      usage: model.usage,\n      label: model.label,\n      dimension,\n      mipLevelCount: model.mipLevel + 1\n    });\n  };\n  publicAPI.assignFromHandle = (device, handle, options) => {\n    model.device = device;\n    model.handle = handle;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    model.format = options.format ? options.format : 'rgba8unorm';\n    /* eslint-disable no-undef */\n    /* eslint-disable no-bitwise */\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.writeImageData = req => {\n    let nativeArray = [];\n    if (req.canvas) {\n      model.device.getHandle().queue.copyExternalImageToTexture({\n        source: req.canvas,\n        flipY: req.flip\n      }, {\n        texture: model.handle,\n        premultipliedAlpha: true\n      }, [model.width, model.height, model.depth]);\n      model.ready = true;\n      return;\n    }\n    if (req.jsImageData && !req.nativeArray) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    let bufferBytesPerRow = model.width * tDetails.stride;\n    const fixAll = (arr, height, depth) => {\n      // bytesPerRow must be a multiple of 256 so we might need to rebuild\n      // the data here before passing to the buffer. e.g. if it is unorm8x4 then\n      // we need to have width be a multiple of 64\n      const inWidthInBytes = arr.length / (height * depth) * arr.BYTES_PER_ELEMENT;\n\n      // is this a half float texture?\n      const halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n\n      // if we need to copy the data\n      if (halfFloat || inWidthInBytes % 256) {\n        const inArray = arr;\n        const inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;\n        const outBytesPerElement = tDetails.elementSize;\n        const outWidthInBytes = 256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);\n        const outWidth = outWidthInBytes / outBytesPerElement;\n        const outArray = macro.newTypedArray(halfFloat ? 'Uint16Array' : inArray.constructor.name, outWidth * height * depth);\n        for (let v = 0; v < height * depth; v++) {\n          if (halfFloat) {\n            for (let i = 0; i < inWidth; i++) {\n              outArray[v * outWidth + i] = HalfFloat.toHalf(inArray[v * inWidth + i]);\n            }\n          } else {\n            outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * outWidth);\n          }\n        }\n        return [outArray, outWidthInBytes];\n      }\n      return [arr, inWidthInBytes];\n    };\n    if (req.nativeArray) {\n      nativeArray = req.nativeArray;\n    }\n    if (req.image) {\n      const canvas = document.createElement('canvas');\n      canvas.width = req.image.width;\n      canvas.height = req.image.height;\n      const ctx = canvas.getContext('2d');\n      ctx.translate(0, canvas.height);\n      ctx.scale(1, -1);\n      ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, req.image.width, req.image.height);\n      nativeArray = imageData.data;\n    }\n    const cmdEnc = model.device.createCommandEncoder();\n    if (publicAPI.getDimensionality() !== 3) {\n      // Non-3D, supports mipmaps\n      const mips = vtkTexture.generateMipmaps(nativeArray, model.width, model.height, model.mipLevel);\n      let currentWidth = model.width;\n      let currentHeight = model.height;\n      for (let m = 0; m <= model.mipLevel; m++) {\n        const fix = fixAll(mips[m], currentHeight, 1);\n        bufferBytesPerRow = fix[1];\n        const buffRequest = {\n          dataArray: req.dataArray ? req.dataArray : null,\n          nativeArray: fix[0],\n          /* eslint-disable no-undef */\n          usage: BufferUsage.Texture\n          /* eslint-enable no-undef */\n        };\n\n        const buff = model.device.getBufferManager().getBuffer(buffRequest);\n        cmdEnc.copyBufferToTexture({\n          buffer: buff.getHandle(),\n          offset: 0,\n          bytesPerRow: bufferBytesPerRow,\n          rowsPerImage: currentHeight\n        }, {\n          texture: model.handle,\n          mipLevel: m\n        }, [currentWidth, currentHeight, 1]);\n        currentWidth /= 2;\n        currentHeight /= 2;\n      }\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    } else {\n      // 3D, no mipmaps\n      const fix = fixAll(nativeArray, model.height, model.depth);\n      bufferBytesPerRow = fix[1];\n      const buffRequest = {\n        dataArray: req.dataArray ? req.dataArray : null,\n        /* eslint-disable no-undef */\n        usage: BufferUsage.Texture\n        /* eslint-enable no-undef */\n      };\n\n      buffRequest.nativeArray = fix[0];\n      const buff = model.device.getBufferManager().getBuffer(buffRequest);\n      cmdEnc.copyBufferToTexture({\n        buffer: buff.getHandle(),\n        offset: 0,\n        bytesPerRow: bufferBytesPerRow,\n        rowsPerImage: model.height\n      }, {\n        texture: model.handle\n      }, [model.width, model.height, model.depth]);\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    }\n  };\n\n  // when data is pulled out of this texture what scale must be applied to\n  // get back to the original source data. For formats such as r8unorm we\n  // have to multiply by 255.0, for formats such as r16float it is 1.0\n  publicAPI.getScale = () => {\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    const halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n    return halfFloat ? 1.0 : 255.0;\n  };\n  publicAPI.getNumberOfComponents = () => {\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    return tDetails.numComponents;\n  };\n  publicAPI.getDimensionality = () => {\n    let dims = 0;\n    if (model.width > 1) dims++;\n    if (model.height > 1) dims++;\n    if (model.depth > 1) dims++;\n    return dims;\n  };\n  publicAPI.resizeToMatch = tex => {\n    if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {\n      model.width = tex.getWidth();\n      model.height = tex.getHeight();\n      model.depth = tex.getDepth();\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n  publicAPI.resize = function (width, height) {\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (width !== model.width || height !== model.height || depth !== model.depth) {\n      model.width = width;\n      model.height = height;\n      model.depth = depth;\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n  publicAPI.createView = function (label) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // if options is missing values try to add them in\n    if (!options.dimension) {\n      options.dimension = model.depth === 1 ? '2d' : '3d';\n    }\n    const view = vtkWebGPUTextureView.newInstance({\n      label\n    });\n    view.create(publicAPI, options);\n    return view;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  buffer: null,\n  ready: false,\n  label: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);\n  macro.setGet(publicAPI, model, ['device', 'label']);\n  vtkWebGPUTexture(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUTexture$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUTexture$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTypes from './Types.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n  publicAPI.create = (texture, options) => {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n  publicAPI.createFromTextureHandle = (textureHandle, options) => {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n  publicAPI.getShaderCode = (binding, group) => {\n    let ttype = 'f32';\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n    let result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_${model.options.dimension}<${ttype}>;`;\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_depth_${model.options.dimension};`;\n    }\n    return result;\n  };\n  publicAPI.addSampler = (device, options) => {\n    const newSamp = vtkWebGPUSampler.newInstance({\n      label: `${model.label}Sampler`\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n  publicAPI.getBindGroupTime = () => {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.bindGroupTime;\n  };\n\n  // if the texture has changed then get a new view\n  publicAPI.getHandle = () => {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.handle;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d'\n      // multisampled: false,\n    }\n  };\n\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureView$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUTextureView$1 as default, extend, newInstance };\n","import { r as vtkErrorMacro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUDevice static functions\n//\n// WebGPU uses types in a many places and calls, and often those types\n// need to be associated with byte sizes, alignments, native arrays etc.\n// The folowing methods are designed to help vtk.js introspect those types.\n// WebGPU currently tends to use multiple type formats:\n//  - buffer types such as float32x4\n//  - shader types suchs as vec4<f32>\n//  - texture types such as rgba32float\n// ----------------------------------------------------------------------------\n\n// see https://gpuweb.github.io/gpuweb/#texture-formats\n// for possible formats, there are a lot of them\nconst textureDetails = {\n  // 8-bit formats\n  r8unorm: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8snorm: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8uint: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  r8sint: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 16-bit formats\n  r16uint: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  r16sint: {\n    numComponents: 1,\n    nativeType: Int16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  r16float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rg8unorm: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8snorm: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8uint: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rg8sint: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 32-bit formats\n  r32uint: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  r32sint: {\n    numComponents: 1,\n    nativeType: Int32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  r32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rg16uint: {\n    numComponents: 2,\n    nativeType: Uint16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rg16sint: {\n    numComponents: 2,\n    nativeType: Int16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rg16float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rgba8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'rgba8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8snorm: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8uint: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rgba8sint: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  bgra8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'bgra8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  // Packed 32-bit formats\n  rgb9e5ufloat: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rgb10a2unorm: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rg11b10ufloat: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  // 64-bit formats\n  rg32uint: {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rg32sint: {\n    numComponents: 2,\n    nativeType: Int32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rg32float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rgba16uint: {\n    numComponents: 4,\n    nativeType: Uint16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rgba16sint: {\n    numComponents: 4,\n    nativeType: Int16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rgba16float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  // 128-bit formats\n  rgba32uint: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rgba32sint: {\n    numComponents: 4,\n    nativeType: Int32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rgba32float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  // Depth and stencil formats\n  stencil8: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  depth16unorm: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'depth'\n  },\n  depth24plus: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 3,\n    sampleType: 'depth'\n  },\n  'depth24plus-stencil8': {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'mixed'\n  },\n  depth32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'depth'\n  }\n};\nfunction getDetailsFromTextureFormat(format) {\n  if (!format || format.length < 6) return 0;\n  if (format in textureDetails === true) {\n    return textureDetails[format];\n  }\n  vtkErrorMacro(`unknown format ${format}`);\n  return null;\n}\n\n// see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\nfunction getByteStrideFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0;\n\n  // options are x2, x3, x4 or nothing\n  let numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  const sizeStart = numComp === 1 ? format.length - 1 : format.length - 3;\n  // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n  const num = Number(format[sizeStart]);\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(`unknown format ${format}`);\n    return 0;\n  }\n  const typeSize = 5 - num / 2;\n  return numComp * typeSize;\n}\n\n// see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\nfunction getNumberOfComponentsFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0;\n\n  // options are x2, x3, x4 or nothing\n  let numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  return numComp;\n}\n\n// see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\nfunction getNativeTypeFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0;\n\n  // raw types are Uint Int or Float as follows\n  let result;\n  if (format[0] === 'f') {\n    result = 'Float';\n  } else if (format[0] === 's') {\n    result = 'Int';\n  } else if (format[0] === 'u') {\n    result = 'Uint';\n  } else {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n\n  // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n  const base = format.split('x')[0];\n  const num = Number(base[base.length - 1]);\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n  result += 8 * (5 - num / 2);\n  result += 'Array';\n  return result;\n}\nfunction getShaderTypeFromBufferFormat(format) {\n  let dataType;\n  if (format[0] === 'f' || format[1] === 'n') {\n    dataType = 'f32';\n  } else if (format[0] === 's' && format[1] === 'i') {\n    dataType = 'i32';\n  } else if (format[0] === 'u' && format[1] === 'i') {\n    dataType = 'u32';\n  } else {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n\n  // options are x2, x3, x4 or nothing\n  let numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  if (numComp === 4) return `vec4<${dataType}>`;\n  if (numComp === 3) return `vec3<${dataType}>`;\n  if (numComp === 2) return `vec2<${dataType}>`;\n  return dataType;\n}\nfunction getByteStrideFromShaderFormat(format) {\n  if (!format) return 0;\n  let numComp = 1;\n  if (format.substring(0, 3) === 'vec') {\n    numComp = Number(format[3]);\n  } else if (format.substring(0, 3) === 'mat') {\n    numComp = format[3] * format[5];\n  }\n  const typeSize = 4;\n  return numComp * typeSize;\n}\nfunction getNativeTypeFromShaderFormat(format) {\n  if (!format) return undefined;\n  if (format.includes('f32')) return 'Float32Array';\n  if (format.includes('i32')) return 'Int32Array';\n  if (format.includes('u32')) return 'Uint32Array';\n  vtkErrorMacro(`unknown format ${format}`);\n  return undefined;\n}\nvar vtkWebGPUTypes = {\n  getDetailsFromTextureFormat,\n  getByteStrideFromBufferFormat,\n  getNumberOfComponentsFromBufferFormat,\n  getNativeTypeFromBufferFormat,\n  getShaderTypeFromBufferFormat,\n  getByteStrideFromShaderFormat,\n  getNativeTypeFromShaderFormat\n};\n\nexport { vtkWebGPUTypes as default };\n","import { m as macro } from '../../macros2.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUTypes from './Types.js';\n\nconst {\n  BufferUsage\n} = vtkWebGPUBufferManager;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUUniformBuffer methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUUniformBuffer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUUniformBuffer');\n  publicAPI.addEntry = (name, type) => {\n    if (model._bufferEntryNames.has(name)) {\n      vtkErrorMacro(`entry named ${name} already exists`);\n      return;\n    }\n    model.sortDirty = true;\n    model._bufferEntryNames.set(name, model.bufferEntries.length);\n    model.bufferEntries.push({\n      name,\n      type,\n      sizeInBytes: vtkWebGPUTypes.getByteStrideFromShaderFormat(type),\n      offset: -1,\n      nativeType: vtkWebGPUTypes.getNativeTypeFromShaderFormat(type),\n      packed: false\n    });\n  };\n\n  // UBOs have layout rules in terms of how memory is aligned so we\n  // have to be careful how we order the entries. For example a vec4<f32>\n  // must be aligned on a 16 byte offset, etc. See\n  // https://gpuweb.github.io/gpuweb/wgsl/#memory-layouts\n  // for more details. Right now you can create a situation that would fail\n  // in the future we could add dummy spacer entries where needed to\n  // handle alignment issues\n  publicAPI.sortBufferEntries = () => {\n    if (!model.sortDirty) {\n      return;\n    }\n    let currOffset = 0;\n    const newEntries = [];\n\n    // compute the max alignment, this is required as WebGPU defines a UBO to have\n    // a size that is a multiple of the maxAlignment\n    let maxAlignment = 4;\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (entry.sizeInBytes % 16 === 0) {\n        maxAlignment = Math.max(16, maxAlignment);\n      }\n      if (entry.sizeInBytes % 8 === 0) {\n        maxAlignment = Math.max(8, maxAlignment);\n      }\n    }\n\n    // pack anything whose size is a multiple of 16 bytes first\n    // this includes a couple types that don't require 16 byte alignment\n    // such as mat2x2<f32> but that is OK\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (entry.packed === false && entry.sizeInBytes % 16 === 0) {\n        entry.packed = true;\n        entry.offset = currOffset;\n        newEntries.push(entry);\n        currOffset += entry.sizeInBytes;\n      }\n    }\n\n    // now it gets tough, we have the following common types (f32, i32, u32)\n    // - vec2<f32> 8 byte size, 8 byte alignment\n    // - vec3<f32> 12 byte size, 16 byte alignment\n    // - f32 4 byte size, 4 byte alignment\n\n    // try adding 12 byte, 4 byte pairs\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (entry.packed === false && entry.sizeInBytes === 12) {\n        for (let i2 = 0; i2 < model.bufferEntries.length; i2++) {\n          const entry2 = model.bufferEntries[i2];\n          if (entry2.packed === false && entry2.sizeInBytes === 4) {\n            entry.packed = true;\n            entry.offset = currOffset;\n            newEntries.push(entry);\n            currOffset += entry.sizeInBytes;\n            entry2.packed = true;\n            entry2.offset = currOffset;\n            newEntries.push(entry2);\n            currOffset += entry2.sizeInBytes;\n            break;\n          }\n        }\n      }\n    }\n\n    // try adding 8 byte, 8 byte pairs\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (!entry.packed && entry.sizeInBytes % 8 === 0) {\n        for (let i2 = i + 1; i2 < model.bufferEntries.length; i2++) {\n          const entry2 = model.bufferEntries[i2];\n          if (!entry2.packed && entry2.sizeInBytes % 8 === 0) {\n            entry.packed = true;\n            entry.offset = currOffset;\n            newEntries.push(entry);\n            currOffset += entry.sizeInBytes;\n            entry2.packed = true;\n            entry2.offset = currOffset;\n            newEntries.push(entry2);\n            currOffset += entry2.sizeInBytes;\n            break;\n          }\n        }\n      }\n    }\n\n    // try adding 8 byte, 4 byte 4 byte triplets\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (!entry.packed && entry.sizeInBytes % 8 === 0) {\n        let found = false;\n        for (let i2 = 0; !found && i2 < model.bufferEntries.length; i2++) {\n          const entry2 = model.bufferEntries[i2];\n          if (!entry2.packed && entry2.sizeInBytes === 4) {\n            for (let i3 = i2 + 1; i3 < model.bufferEntries.length; i3++) {\n              const entry3 = model.bufferEntries[i3];\n              if (!entry3.packed && entry3.sizeInBytes === 4) {\n                entry.packed = true;\n                entry.offset = currOffset;\n                newEntries.push(entry);\n                currOffset += entry.sizeInBytes;\n                entry2.packed = true;\n                entry2.offset = currOffset;\n                newEntries.push(entry2);\n                currOffset += entry2.sizeInBytes;\n                entry3.packed = true;\n                entry3.offset = currOffset;\n                newEntries.push(entry3);\n                currOffset += entry3.sizeInBytes;\n                found = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Add anything remaining that is larger than 4 bytes and hope we get lucky.\n    // Likely if there is more than one item added here it will result\n    // in a failed UBO\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (!entry.packed && entry.sizeInBytes > 4) {\n        entry.packed = true;\n        entry.offset = currOffset;\n        newEntries.push(entry);\n        currOffset += entry.sizeInBytes;\n      }\n    }\n\n    // finally add remaining 4 byte items\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      if (!entry.packed) {\n        entry.packed = true;\n        entry.offset = currOffset;\n        newEntries.push(entry);\n        currOffset += entry.sizeInBytes;\n      }\n    }\n\n    // update entries and entryNames\n    model.bufferEntries = newEntries;\n    model._bufferEntryNames.clear();\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      model._bufferEntryNames.set(model.bufferEntries[i].name, i);\n    }\n    model.sizeInBytes = currOffset;\n    model.sizeInBytes = maxAlignment * Math.ceil(model.sizeInBytes / maxAlignment);\n    model.sortDirty = false;\n  };\n  publicAPI.sendIfNeeded = device => {\n    if (!model.UBO) {\n      const req = {\n        nativeArray: model.Float32Array,\n        usage: BufferUsage.UniformArray,\n        label: model.label\n      };\n      model.UBO = device.getBufferManager().getBuffer(req);\n      model.bindGroupTime.modified();\n      model.sendDirty = false;\n    }\n\n    // send data down if needed\n    if (model.sendDirty) {\n      device.getHandle().queue.writeBuffer(model.UBO.getHandle(), 0, model.arrayBuffer, 0, model.sizeInBytes);\n      model.sendDirty = false;\n    }\n\n    // always updated as mappers depend on this time\n    // it is more of a sentIfNeededTime\n    model.sendTime.modified();\n  };\n  publicAPI.createView = type => {\n    if (type in model === false) {\n      if (!model.arrayBuffer) {\n        model.arrayBuffer = new ArrayBuffer(model.sizeInBytes);\n      }\n      model[type] = macro.newTypedArray(type, model.arrayBuffer);\n    }\n  };\n  publicAPI.setValue = (name, val) => {\n    publicAPI.sortBufferEntries();\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    if (entry.lastValue !== val) {\n      view[entry.offset / view.BYTES_PER_ELEMENT] = val;\n      model.sendDirty = true;\n    }\n    entry.lastValue = val;\n  };\n  publicAPI.setArray = (name, arr) => {\n    publicAPI.sortBufferEntries();\n    const idx = model._bufferEntryNames.get(name);\n    if (idx === undefined) {\n      vtkErrorMacro(`entry named ${name} not found in UBO`);\n      return;\n    }\n    const entry = model.bufferEntries[idx];\n    publicAPI.createView(entry.nativeType);\n    const view = model[entry.nativeType];\n    let changed = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (!entry.lastValue || entry.lastValue[i] !== arr[i]) {\n        view[entry.offset / view.BYTES_PER_ELEMENT + i] = arr[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      model.sendDirty = true;\n      entry.lastValue = [...arr];\n    }\n  };\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: {\n        buffer: model.UBO.getHandle()\n      }\n    };\n    return foo;\n  };\n  publicAPI.getSendTime = () => model.sendTime.getMTime();\n  publicAPI.getShaderCode = (binding, group) => {\n    // sort the entries\n    publicAPI.sortBufferEntries();\n    const lines = [`struct ${model.label}Struct\\n{`];\n    for (let i = 0; i < model.bufferEntries.length; i++) {\n      const entry = model.bufferEntries[i];\n      lines.push(`  ${entry.name}: ${entry.type},`);\n    }\n    lines.push(`};\\n@binding(${binding}) @group(${group}) var<uniform> ${model.label}: ${model.label}Struct;`);\n    return lines.join('\\n');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  bufferEntries: null,\n  bufferEntryNames: null,\n  sizeInBytes: 0,\n  label: null,\n  bindGroupLayoutEntry: null,\n  bindGroupEntry: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n\n  // Internal objects\n  model._bufferEntryNames = new Map();\n  model.bufferEntries = [];\n\n  // default UBO desc\n  model.bindGroupLayoutEntry = model.bindGroupLayoutEntry || {\n    buffer: {\n      type: 'uniform'\n    }\n  };\n  model.sendTime = {};\n  macro.obj(model.sendTime, {\n    mtime: 0\n  });\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  model.sendDirty = true;\n  model.sortDirty = true;\n  macro.get(publicAPI, model, ['binding', 'bindGroupTime']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'device', 'label', 'sizeInBytes']);\n\n  // Object methods\n  vtkWebGPUUniformBuffer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUUniformBuffer');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUUniformBuffer$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUUniformBuffer$1 as default, extend, newInstance };\n","import { n as newInstance$1, o as obj, e as setGet } from '../../macros2.js';\nimport vtkWebGPUTypes from './Types.js';\n\nfunction arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!b.includes(a[i])) return false;\n  }\n  return true;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUVertexInput methods\n// ----------------------------------------------------------------------------\nfunction vtkWebGPUVertexInput(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVertexInput');\n  publicAPI.addBuffer = function (buffer, inames) {\n    let stepMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'vertex';\n    let names = inames;\n    if (!Array.isArray(names)) {\n      names = [names];\n    }\n    // only add if it is a new setting\n    for (let i = 0; i < model.inputs.length; i++) {\n      if (arraysEqual(model.inputs[i].names, names)) {\n        if (model.inputs[i].buffer === buffer) {\n          return;\n        }\n        model.inputs[i].buffer = buffer;\n        return;\n      }\n    }\n\n    // when adding a new entry, make sure we sort the array\n    // as the order is important to the shader and must always\n    // be the same, so alphabetical is an easy option\n    model.inputs.push({\n      buffer,\n      stepMode,\n      names\n    });\n    model.inputs = model.inputs.sort((v1, v2) => {\n      if (v1.names[0] < v2.names[0]) {\n        return -1;\n      }\n      if (v1.names[0] > v2.names[0]) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  publicAPI.removeBufferIfPresent = name => {\n    for (let i = 0; i < model.inputs.length; i++) {\n      if (model.inputs[i].names.includes(name)) {\n        model.inputs.splice(i, 1);\n      }\n    }\n  };\n  publicAPI.getBuffer = name => {\n    for (let i = 0; i < model.inputs.length; i++) {\n      if (model.inputs[i].names.includes(name)) {\n        return model.inputs[i].buffer;\n      }\n    }\n    return null;\n  };\n  publicAPI.hasAttribute = name => {\n    for (let i = 0; i < model.inputs.length; i++) {\n      if (model.inputs[i].names.includes(name)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  publicAPI.getAttributeTime = name => {\n    for (let i = 0; i < model.inputs.length; i++) {\n      if (model.inputs[i].names.includes(name)) {\n        return model.inputs[i].buffer.getSourceTime();\n      }\n    }\n    return 0;\n  };\n  publicAPI.getShaderCode = () => {\n    let result = '';\n    let nameCount = 0;\n    for (let i = 0; i < model.inputs.length; i++) {\n      for (let nm = 0; nm < model.inputs[i].names.length; nm++) {\n        const arrayInfo = model.inputs[i].buffer.getArrayInformation()[nm];\n        const type = vtkWebGPUTypes.getShaderTypeFromBufferFormat(arrayInfo.format);\n        if (nameCount > 0) {\n          result += ',\\n';\n        }\n        result = `${result}  @location(${nameCount}) ${model.inputs[i].names[nm]} : ${type}`;\n        nameCount++;\n      }\n    }\n    return result;\n  };\n  publicAPI.getVertexInputInformation = () => {\n    const info = {};\n    if (model.inputs.length) {\n      const vertexBuffers = [];\n      let nameCount = 0;\n      for (let i = 0; i < model.inputs.length; i++) {\n        const buf = model.inputs[i].buffer;\n        const buffer = {\n          arrayStride: buf.getStrideInBytes(),\n          stepMode: model.inputs[i].stepMode,\n          attributes: []\n        };\n        const arrayInfo = buf.getArrayInformation();\n        for (let nm = 0; nm < model.inputs[i].names.length; nm++) {\n          buffer.attributes.push({\n            shaderLocation: nameCount,\n            offset: arrayInfo[nm].offset,\n            format: arrayInfo[nm].format\n          });\n          nameCount++;\n        }\n        vertexBuffers.push(buffer);\n      }\n      info.buffers = vertexBuffers;\n    }\n    return info;\n  };\n  publicAPI.bindBuffers = renderEncoder => {\n    for (let i = 0; i < model.inputs.length; i++) {\n      renderEncoder.setVertexBuffer(i, model.inputs[i].buffer.getHandle());\n    }\n    if (model.indexBuffer) {\n      renderEncoder.setIndexBuffer(model.indexBuffer.getHandle(), model.indexBuffer.getArrayInformation()[0].format);\n    }\n  };\n  publicAPI.getReady = () => {};\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.created) {\n      model.inputs = [];\n      model.bindingDescriptions = [];\n      model.attributeDescriptions = [];\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  inputs: null,\n  bindingDescriptions: false,\n  attributeDescriptions: null,\n  indexBuffer: null\n};\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  obj(publicAPI, model);\n  model.bindingDescriptions = [];\n  model.attributeDescriptions = [];\n  model.inputs = [];\n  setGet(publicAPI, model, ['created', 'device', 'handle', 'indexBuffer']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n  vtkWebGPUVertexInput(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nconst newInstance = newInstance$1(extend, 'vtkWebGPUVertexInput');\n\n// ----------------------------------------------------------------------------\nvar vtkWebGPUVertexInput$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUVertexInput$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport vtkViewNodeFactory from '../SceneGraph/ViewNodeFactory.js';\n\nconst CLASS_MAPPING = Object.create(null);\nfunction registerOverride(className, fn) {\n  CLASS_MAPPING[className] = fn;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUViewNodeFactory methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUViewNodeFactory(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUViewNodeFactory');\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Static class mapping shared across instances\n  model.overrides = CLASS_MAPPING;\n\n  // Inheritance\n  vtkViewNodeFactory.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkWebGPUViewNodeFactory(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUViewNodeFactory');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUViewNodeFactory$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUViewNodeFactory$1 as default, extend, newInstance, registerOverride };\n","import { mat4 } from 'gl-matrix';\nimport { m as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUVolume methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolume(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolume');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');\n      // for the future if we support hardware selection of volumes\n      if (model.propID === undefined) {\n        model.propID = model.WebGPURenderWindow.getUniquePropID();\n      }\n      model.renderable.getMapper().update();\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      // Check for the special case when the mapper's bounds are unknown\n      const bds = model.renderable.getMapper().getBounds();\n      if (!bds || bds.length !== 6 || bds[0] > bds[1]) {\n        return;\n      }\n      renderPass.addVolume(publicAPI);\n    }\n  };\n\n  // used in the method below\n  const idx = new Float64Array(3);\n  const vout = new Float64Array(3);\n  publicAPI.getBoundingCubePoints = (result, offset) => {\n    const input = model.renderable.getMapper().getInputData();\n    if (!input) {\n      return;\n    }\n    const extent = input.getExtent();\n    const m = model.renderable.getMatrix();\n    let count = 0;\n    for (let iz = 4; iz < 6; iz++) {\n      idx[2] = extent[iz];\n      for (let iy = 2; iy < 4; iy++) {\n        idx[1] = extent[iy];\n        for (let ix = 0; ix < 2; ix++) {\n          idx[0] = extent[ix];\n          input.indexToWorld(idx, vout);\n          let poffset = offset + count * 3;\n          result[poffset++] = m[0] * vout[0] + m[1] * vout[1] + m[2] * vout[2] + m[3];\n          result[poffset++] = m[4] * vout[0] + m[5] * vout[1] + m[6] * vout[2] + m[7];\n          result[poffset++] = m[8] * vout[0] + m[9] * vout[1] + m[10] * vout[2] + m[11];\n          count++;\n        }\n      }\n    }\n  };\n  publicAPI.getKeyMatrices = wgpuRen => {\n    // has the actor or stabilization center changed?\n    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {\n      model.renderable.computeMatrix();\n      const mcwc = model.renderable.getMatrix();\n\n      // compute the net shift\n      const center = wgpuRen.getStabilizedCenterByReference();\n      mat4.transpose(model.keyMatrices.bcwc, mcwc);\n\n      // to get to stabilized we also need the center\n      mat4.translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);\n      model.keyMatricesTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  propID: undefined,\n  keyMatricesTime: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatricesTime = {};\n  macro.obj(model.keyMatricesTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    bcwc: new Float64Array(16),\n    bcsc: new Float64Array(16)\n  };\n  macro.get(publicAPI, model, ['propID', 'keyMatricesTime']);\n\n  // Object methods\n  vtkWebGPUVolume(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUVolume');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkVolume', newInstance);\n\nexport { index as default, extend, newInstance };\n","import 'fast-deep-equal';\nimport './vtk.js';\nimport './Common/Core/ClassHierarchy.js';\nexport { G as EVENT_ABORT, T as TYPED_ARRAYS, V as VOID, _ as _capitalize, d as algo, q as capitalize, h as chain, I as debounce, m as default, f as event, B as formatBytesToProperUnit, C as formatNumbersWithThousandSeparator, g as get, k as getArray, H as isVtkObject, K as keystore, E as measurePromiseExecution, i as moveToProtected, n as newInstance, a as newTypedArray, b as newTypedArrayFrom, M as normalizeWheel, o as obj, p as proxy, j as proxyPropertyMapping, L as proxyPropertyState, s as set, F as setArray, e as setGet, l as setGetArray, D as setImmediateVTK, u as setLoggerFunction, J as throttle, t as traverseInstanceTree, A as uncapitalize, y as vtkDebugMacro, r as vtkErrorMacro, x as vtkInfoMacro, w as vtkLogMacro, z as vtkOnceErrorMacro, v as vtkWarningMacro } from './macros2.js';\n","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos >> 3] = lst;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if (d[1] & 32)\n        err(6, 'invalid zlib data: preset dictionaries not supported');\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                err(6, 'invalid gzip data');\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            err(8);\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c == null && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != null) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, f.c, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295;\n        if (z) {\n            e = b4(data, e - 12);\n            if (b4(data, e) != 0x6064B50) {\n                cbd(err(13, 0, 1), null);\n                return tAll;\n            }\n            c = lft = b4(data, e + 32);\n            o = b4(data, e + 48);\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, new u8(su)));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50)\n            err(13);\n        c = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","(function (factory) {\n    if (typeof exports === 'object') {\n        // Node/CommonJS\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(factory);\n    } else {\n        // Browser globals (with support for web workers)\n        var glob;\n\n        try {\n            glob = window;\n        } catch (e) {\n            glob = self;\n        }\n\n        glob.SparkMD5 = factory();\n    }\n}(function (undefined) {\n\n    'use strict';\n\n    /*\n     * Fastest md5 implementation around (JKM md5).\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n\n    function cmn(q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    function md5cycle(x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a += (b & c | ~b & d) + k[0] - 680876936 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[1] - 389564586 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[2] + 606105819 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[4] - 176418897 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[7] - 45705983 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[10] - 42063 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[13] - 40341101 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n\n        a += (b & d | c & ~d) + k[1] - 165796510 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[11] + 643717713 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[0] - 373897302 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[5] - 701558691 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[10] + 38016083 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[15] - 660478335 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[4] - 405537848 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[9] + 568446438 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[3] - 187363961 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[2] - 51403784 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n\n        a += (b ^ c ^ d) + k[5] - 378558 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[14] - 35309556 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[7] - 155497632 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[13] + 681279174 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[0] - 358537222 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[3] - 722521979 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[6] + 76029189 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[9] - 640364487 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[12] - 421815835 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[15] + 530742520 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[2] - 995338651 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n\n        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;\n        b  = (b << 21 | b >>> 11) + c | 0;\n\n        x[0] = a + x[0] | 0;\n        x[1] = b + x[1] | 0;\n        x[2] = c + x[2] | 0;\n        x[3] = d + x[3] | 0;\n    }\n\n    function md5blk(s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    function md5blk_array(a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    }\n\n    function md51(s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    }\n\n    function md51_array(a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    }\n\n    function rhex(n) {\n        var s = '',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    // In some cases the fast add32 function cannot be used..\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * ArrayBuffer slice polyfill.\n     *\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\n     */\n\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n        (function () {\n            function clamp(val, length) {\n                val = (val | 0) || 0;\n\n                if (val < 0) {\n                    return Math.max(val + length, 0);\n                }\n\n                return Math.min(val, length);\n            }\n\n            ArrayBuffer.prototype.slice = function (from, to) {\n                var length = this.byteLength,\n                    begin = clamp(from, length),\n                    end = length,\n                    num,\n                    target,\n                    targetArray,\n                    sourceArray;\n\n                if (to !== undefined) {\n                    end = clamp(to, length);\n                }\n\n                if (begin > end) {\n                    return new ArrayBuffer(0);\n                }\n\n                num = end - begin;\n                target = new ArrayBuffer(num);\n                targetArray = new Uint8Array(target);\n\n                sourceArray = new Uint8Array(this, begin, num);\n                targetArray.set(sourceArray);\n\n                return target;\n            };\n        })();\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * Helpers.\n     */\n\n    function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        return str;\n    }\n\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n           buff = new ArrayBuffer(length),\n           arr = new Uint8Array(buff),\n           i;\n\n        for (i = 0; i < length; i += 1) {\n            arr[i] = str.charCodeAt(i);\n        }\n\n        return returnUInt8Array ? arr : buff;\n    }\n\n    function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n    }\n\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n\n        return returnUInt8Array ? result : result.buffer;\n    }\n\n    function hexToBinaryString(hex) {\n        var bytes = [],\n            length = hex.length,\n            x;\n\n        for (x = 0; x < length - 1; x += 2) {\n            bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n\n        return String.fromCharCode.apply(String, bytes);\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n\n    function SparkMD5() {\n        // call reset to init the instance\n        this.reset();\n    }\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // Converts the string to utf8 bytes if necessary\n        // Then append as binary\n        this.appendBinary(toUtf8(str));\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substring(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = '';\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.prototype.getState = function () {\n        return {\n            buff: this._buff,\n            length: this._length,\n            hash: this._hash.slice()\n        };\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other additional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._hash, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n    };\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} [raw] True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // Converts the string to utf8 bytes if necessary\n        // Then compute it using the binary function\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n\n        // Convert buffer to a string\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n\n        return state;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        // Convert string to buffer\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\n        return SparkMD5.prototype.setState.call(this, state);\n    };\n\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    return SparkMD5;\n}));\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.xmlbuilder2=t():e.xmlbuilder2=t()}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=184)}([function(e,t,r){\"use strict\";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,\"__esModule\",{value:!0}),n(r(240)),n(r(251)),n(r(175)),n(r(107)),n(r(29)),n(r(73)),n(r(106)),n(r(30)),n(r(252)),n(r(52)),n(r(97)),n(r(253)),n(r(37)),n(r(51)),n(r(173)),n(r(176)),n(r(172)),n(r(108)),n(r(254)),n(r(255)),n(r(256)),n(r(72)),n(r(177)),n(r(105)),n(r(17)),n(r(257)),n(r(12)),n(r(174))},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(212);t.FixedSizeSet=i.FixedSizeSet;var o=r(213);t.ObjectCache=o.ObjectCache;var a=r(214);t.CompareCache=a.CompareCache;var s=r(215);t.Lazy=s.Lazy;var u=r(216);function l(e,t,r){if(m(e))e.forEach((function(e,n){return t.call(r,n,e)}));else for(var n in e)e.hasOwnProperty(n)&&t.call(r,n,e[n])}function c(e){var t,r;if(h(e))return e;if(f(e)){var i=[];try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value;i.push(c(s))}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return i}if(p(e)){i={};for(var u in e)if(e.hasOwnProperty(u)){var l=e[u];i[u]=c(l)}return i}return e}function h(e){return!!e&&\"[object Function]\"===Object.prototype.toString.call(e)}function p(e){var t=typeof e;return!!e&&(\"function\"===t||\"object\"===t)}function f(e){return Array.isArray(e)}function d(e){return e instanceof Set}function m(e){return e instanceof Map}function y(e){if(p(e)){var t=Object.getPrototypeOf(e),r=t.constructor;return t&&r&&\"function\"==typeof r&&r instanceof r&&Function.prototype.toString.call(r)===Function.prototype.toString.call(Object)}return!1}t.StringWalker=u.StringWalker,t.applyMixin=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];Object.getOwnPropertyNames(t.prototype).forEach((function(n){if(\"constructor\"!==n){if(-1!==r.indexOf(n)){var i=Object.getOwnPropertyDescriptor(e.prototype,n);i&&Object.defineProperty(e.prototype,\"_\"+n,i)}var o=Object.getOwnPropertyDescriptor(t.prototype,n);o&&Object.defineProperty(e.prototype,n,o)}}))},t.applyDefaults=function e(t,r,n){void 0===n&&(n=!1);var i=c(t||{});return l(r,(function(t,r){y(r)?i[t]=e(i[t],r,n):(n||void 0===i[t])&&(i[t]=r)})),i},t.forEachArray=function(e,t,r){e.forEach(t,r)},t.forEachObject=l,t.arrayLength=function(e){return d(e)?e.size:e.length},t.objectLength=function(e){return m(e)?e.size:Object.keys(e).length},t.getObjectValue=function(e,t){return m(e)?e.get(t):e[t]},t.removeObjectValue=function(e,t){m(e)?e.delete(t):delete e[t]},t.clone=c,t.isBoolean=function(e){return\"boolean\"==typeof e},t.isNumber=function(e){return\"number\"==typeof e},t.isString=function(e){return\"string\"==typeof e},t.isFunction=h,t.isObject=p,t.isArray=f,t.isSet=d,t.isMap=m,t.isEmpty=function(e){if(f(e))return!e.length;if(d(e))return!e.size;if(m(e))return!e.size;if(p(e)){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}return!1},t.isPlainObject=y,t.isIterable=function(e){return e&&\"function\"==typeof e[Symbol.iterator]},t.getValue=function(e){return h(e.valueOf)?e.valueOf():e},t.utf8Encode=function(e){for(var t=new Uint8Array(4*e.length),r=0,n=0;n<e.length;n++){var i=e.charCodeAt(n);if(i<128)t[r++]=i;else{if(i<2048)t[r++]=i>>6|192;else{if(i>55295&&i<56320){if(++n>=e.length)throw new Error(\"Incomplete surrogate pair.\");var o=e.charCodeAt(n);if(o<56320||o>57343)throw new Error(\"Invalid surrogate character.\");i=65536+((1023&i)<<10)+(1023&o),t[r++]=i>>18|240,t[r++]=i>>12&63|128}else t[r++]=i>>12|224;t[r++]=i>>6&63|128}t[r++]=63&i|128}}return t.subarray(0,r)},t.utf8Decode=function(e){for(var t=\"\",r=0;r<e.length;){var n=e[r++];if(n>127)if(n>191&&n<224){if(r>=e.length)throw new Error(\"Incomplete 2-byte sequence.\");n=(31&n)<<6|63&e[r++]}else if(n>223&&n<240){if(r+1>=e.length)throw new Error(\"Incomplete 3-byte sequence.\");n=(15&n)<<12|(63&e[r++])<<6|63&e[r++]}else{if(!(n>239&&n<248))throw new Error(\"Unknown multi-byte start.\");if(r+2>=e.length)throw new Error(\"Incomplete 4-byte sequence.\");n=(7&n)<<18|(63&e[r++])<<12|(63&e[r++])<<6|63&e[r++]}if(n<=65535)t+=String.fromCharCode(n);else{if(!(n<=1114111))throw new Error(\"Code point exceeds UTF-16 limit.\");n-=65536,t+=String.fromCharCode(n>>10|55296),t+=String.fromCharCode(1023&n|56320)}}return t}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.Before=0]=\"Before\",e[e.Equal=1]=\"Equal\",e[e.After=2]=\"After\"}(t.BoundaryPosition||(t.BoundaryPosition={})),function(e){e[e.None=0]=\"None\",e[e.Capturing=1]=\"Capturing\",e[e.AtTarget=2]=\"AtTarget\",e[e.Bubbling=3]=\"Bubbling\"}(t.EventPhase||(t.EventPhase={})),function(e){e[e.Element=1]=\"Element\",e[e.Attribute=2]=\"Attribute\",e[e.Text=3]=\"Text\",e[e.CData=4]=\"CData\",e[e.EntityReference=5]=\"EntityReference\",e[e.Entity=6]=\"Entity\",e[e.ProcessingInstruction=7]=\"ProcessingInstruction\",e[e.Comment=8]=\"Comment\",e[e.Document=9]=\"Document\",e[e.DocumentType=10]=\"DocumentType\",e[e.DocumentFragment=11]=\"DocumentFragment\",e[e.Notation=12]=\"Notation\"}(t.NodeType||(t.NodeType={})),function(e){e[e.Disconnected=1]=\"Disconnected\",e[e.Preceding=2]=\"Preceding\",e[e.Following=4]=\"Following\",e[e.Contains=8]=\"Contains\",e[e.ContainedBy=16]=\"ContainedBy\",e[e.ImplementationSpecific=32]=\"ImplementationSpecific\"}(t.Position||(t.Position={})),function(e){e[e.Accept=1]=\"Accept\",e[e.Reject=2]=\"Reject\",e[e.Skip=3]=\"Skip\"}(t.FilterResult||(t.FilterResult={})),function(e){e[e.All=4294967295]=\"All\",e[e.Element=1]=\"Element\",e[e.Attribute=2]=\"Attribute\",e[e.Text=4]=\"Text\",e[e.CDataSection=8]=\"CDataSection\",e[e.EntityReference=16]=\"EntityReference\",e[e.Entity=32]=\"Entity\",e[e.ProcessingInstruction=64]=\"ProcessingInstruction\",e[e.Comment=128]=\"Comment\",e[e.Document=256]=\"Document\",e[e.DocumentType=512]=\"DocumentType\",e[e.DocumentFragment=1024]=\"DocumentFragment\",e[e.Notation=2048]=\"Notation\"}(t.WhatToShow||(t.WhatToShow={})),function(e){e[e.StartToStart=0]=\"StartToStart\",e[e.StartToEnd=1]=\"StartToEnd\",e[e.EndToEnd=2]=\"EndToEnd\",e[e.EndToStart=3]=\"EndToStart\"}(t.HowToCompare||(t.HowToCompare={}))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(241);t.Cast=n.Cast;var i=r(150);t.Guard=i.Guard;var o=r(242);t.EmptySet=o.EmptySet},function(e,t,r){var n=r(11),i=r(55).f,o=r(21),a=r(25),s=r(80),u=r(119),l=r(123);e.exports=function(e,t){var r,c,h,p,f,d=e.target,m=e.global,y=e.stat;if(r=m?n:y?n[d]||s(d,{}):(n[d]||{}).prototype)for(c in t){if(p=t[c],h=e.noTargetGet?(f=i(r,c))&&f.value:r[c],!l(m?c:d+(y?\".\":\"#\")+c,e.forced)&&void 0!==h){if(typeof p==typeof h)continue;u(p,h)}(e.sham||h&&h.sham)&&o(p,\"sham\",!0),a(r,c,p,e)}}},function(e,t,r){var n=r(11),i=r(81),o=r(14),a=r(58),s=r(86),u=r(124),l=i(\"wks\"),c=n.Symbol,h=u?c:c&&c.withoutSetter||a;e.exports=function(e){return o(l,e)||(s&&o(c,e)?l[e]=c[e]:l[e]=h(\"Symbol.\"+e)),l[e]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1),i=r(29),o=function(){function e(){this._features={mutationObservers:!0,customElements:!0,slots:!0,steps:!0},this._window=null,this._compareCache=new n.CompareCache,this._rangeList=new n.FixedSizeSet}return e.prototype.setFeatures=function(e){if(void 0===e&&(e=!0),n.isObject(e))for(var t in e)this._features[t]=e[t]||!1;else for(var t in this._features)this._features[t]=e},Object.defineProperty(e.prototype,\"features\",{get:function(){return this._features},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"window\",{get:function(){return null===this._window&&(this._window=i.create_window()),this._window},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"compareCache\",{get:function(){return this._compareCache},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"rangeList\",{get:function(){return this._rangeList},enumerable:!0,configurable:!0}),Object.defineProperty(e,\"instance\",{get:function(){return e._instance||(e._instance=new e),e._instance},enumerable:!0,configurable:!0}),e}();t.dom=o.instance},function(e,t,r){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(r(228));t.base64=i;var o=n(r(146));t.byte=o;var a=n(r(147));t.byteSequence=a;var s=n(r(96));t.codePoint=s;var u=n(r(232));t.json=u;var l=n(r(233));t.list=l;var c=n(r(234));t.map=c;var h=n(r(235));t.namespace=h;var p=n(r(236));t.queue=p;var f=n(r(237));t.set=f;var d=n(r(238));t.stack=d;var m=n(r(239));t.string=m},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(e){function t(t,r){void 0===r&&(r=\"\");var n=e.call(this,r)||this;return n.name=t,n}return i(t,e),t}(Error);t.DOMException=o;var a=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"DOMStringSizeError\",t)||this}return i(t,e),t}(o);t.DOMStringSizeError=a;var s=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"WrongDocumentError\",\"The object is in the wrong document. \"+t)||this}return i(t,e),t}(o);t.WrongDocumentError=s;var u=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NoDataAllowedError\",t)||this}return i(t,e),t}(o);t.NoDataAllowedError=u;var l=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NoModificationAllowedError\",\"The object can not be modified. \"+t)||this}return i(t,e),t}(o);t.NoModificationAllowedError=l;var c=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NotSupportedError\",\"The operation is not supported. \"+t)||this}return i(t,e),t}(o);t.NotSupportedError=c;var h=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"InUseAttributeError\",t)||this}return i(t,e),t}(o);t.InUseAttributeError=h;var p=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"InvalidStateError\",\"The object is in an invalid state. \"+t)||this}return i(t,e),t}(o);t.InvalidStateError=p;var f=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"InvalidModificationError\",\"The object can not be modified in this way. \"+t)||this}return i(t,e),t}(o);t.InvalidModificationError=f;var d=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NamespaceError\",\"The operation is not allowed by Namespaces in XML. [XMLNS] \"+t)||this}return i(t,e),t}(o);t.NamespaceError=d;var m=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"InvalidAccessError\",\"The object does not support the operation or argument. \"+t)||this}return i(t,e),t}(o);t.InvalidAccessError=m;var y=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"ValidationError\",t)||this}return i(t,e),t}(o);t.ValidationError=y;var v=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"TypeMismatchError\",t)||this}return i(t,e),t}(o);t.TypeMismatchError=v;var _=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"SecurityError\",\"The operation is insecure. \"+t)||this}return i(t,e),t}(o);t.SecurityError=_;var g=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NetworkError\",\"A network error occurred. \"+t)||this}return i(t,e),t}(o);t.NetworkError=g;var b=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"AbortError\",\"The operation was aborted. \"+t)||this}return i(t,e),t}(o);t.AbortError=b;var x=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"URLMismatchError\",\"The given URL does not match another URL. \"+t)||this}return i(t,e),t}(o);t.URLMismatchError=x;var w=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"QuotaExceededError\",\"The quota has been exceeded. \"+t)||this}return i(t,e),t}(o);t.QuotaExceededError=w;var E=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"TimeoutError\",\"The operation timed out. \"+t)||this}return i(t,e),t}(o);t.TimeoutError=E;var D=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"InvalidNodeTypeError\",\"The supplied node is incorrect or has an incorrect ancestor for this operation. \"+t)||this}return i(t,e),t}(o);t.InvalidNodeTypeError=D;var S=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"DataCloneError\",\"The object can not be cloned. \"+t)||this}return i(t,e),t}(o);t.DataCloneError=S;var C=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NotImplementedError\",\"The DOM method is not implemented by this module. \"+t)||this}return i(t,e),t}(o);t.NotImplementedError=C;var A=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"HierarchyRequestError\",\"The operation would yield an incorrect node tree. \"+t)||this}return i(t,e),t}(o);t.HierarchyRequestError=A;var N=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"NotFoundError\",\"The object can not be found here. \"+t)||this}return i(t,e),t}(o);t.NotFoundError=N;var T=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"IndexSizeError\",\"The index is not in the allowed range. \"+t)||this}return i(t,e),t}(o);t.IndexSizeError=T;var O=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"SyntaxError\",\"The string did not match the expected pattern. \"+t)||this}return i(t,e),t}(o);t.SyntaxError=O;var F=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,\"InvalidCharacterError\",\"The string contains invalid characters. \"+t)||this}return i(t,e),t}(o);t.InvalidCharacterError=F},function(e,t,r){\"use strict\";var n=r(53),i=[\"kind\",\"resolve\",\"construct\",\"instanceOf\",\"predicate\",\"represent\",\"defaultStyle\",\"styleAliases\"],o=[\"scalar\",\"sequence\",\"mapping\"];e.exports=function(e,t){var r,a;if(t=t||{},Object.keys(t).forEach((function(t){if(-1===i.indexOf(t))throw new n('Unknown option \"'+t+'\" is met in definition of \"'+e+'\" YAML type.')})),this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.defaultStyle=t.defaultStyle||null,this.styleAliases=(r=t.styleAliases||null,a={},null!==r&&Object.keys(r).forEach((function(e){r[e].forEach((function(t){a[String(t)]=e}))})),a),-1===o.indexOf(this.kind))throw new n('Unknown kind \"'+this.kind+'\" is specified for \"'+e+'\" YAML type.')}},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r(\"object\"==typeof globalThis&&globalThis)||r(\"object\"==typeof window&&window)||r(\"object\"==typeof self&&self)||r(\"object\"==typeof t&&t)||Function(\"return this\")()}).call(this,r(78))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.idl_defineConst=function(e,t,r){Object.defineProperty(e,t,{writable:!1,enumerable:!0,configurable:!1,value:r})}},function(e,t){e.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t,r){var n=r(16),i=r(115),o=r(18),a=r(56),s=Object.defineProperty;t.f=n?s:function(e,t,r){if(o(e),t=a(t,!0),o(r),i)try{return s(e,t,r)}catch(e){}if(\"get\"in r||\"set\"in r)throw TypeError(\"Accessors not supported\");return\"value\"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(8);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(3),o=r(2);function a(e,t,r){if(void 0===r&&(r=!1),r&&i.Guard.isElementNode(t)&&i.Guard.isShadowRoot(t.shadowRoot)&&t.shadowRoot._firstChild)return t.shadowRoot._firstChild;if(t._firstChild)return t._firstChild;if(t===e)return null;if(t._nextSibling)return t._nextSibling;for(var n=t._parent;n&&n!==e;){if(n._nextSibling)return n._nextSibling;n=n._parent}return null}function s(){var e;return(e={})[Symbol.iterator]=function(){return{next:function(){return{done:!0,value:null}}}},e}function u(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1);for(var i=t?e:a(e,e,r);i&&n&&!n(i);)i=a(e,i,r);return i}function l(e,t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=a(e,t,n);o&&i&&!i(o);)o=a(e,o,n);return o}function c(e,t,r,n){var i;return void 0===t&&(t=!1),void 0===r&&(r=!1),t||0!==e._children.size?((i={})[Symbol.iterator]=function(){var i=t?e:a(e,e,r);return{next:function(){for(;i&&n&&!n(i);)i=a(e,i,r);if(null===i)return{done:!0,value:null};var t={done:!1,value:i};return i=a(e,i,r),t}}},i):s()}function h(e,t,r){void 0===t&&(t=!1);for(var n=t?e:e._parent;n&&r&&!r(n);)n=n._parent;return n}function p(e,t,r,n){void 0===r&&(r=!1);for(var i=t._parent;i&&n&&!n(i);)i=i._parent;return i}function f(e){return i.Guard.isDocumentTypeNode(e)?0:i.Guard.isCharacterDataNode(e)?e._data.length:e._children.size}function d(e,t){if(void 0===t&&(t=!1),t){var r=d(e,!1);return i.Guard.isShadowRoot(r)?d(r._host,!0):r}return e._parent?d(e._parent):e}function m(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=r?e:n&&i.Guard.isShadowRoot(e)?e._host:e._parent;null!==o;){if(o===t)return!0;o=n&&i.Guard.isShadowRoot(o)?o._host:o._parent}return!1}function y(e){for(var t=d(e),r=0,n=u(t);null!==n;){if(r++,n===e)return r;n=l(t,n)}return-1}t.tree_getFirstDescendantNode=u,t.tree_getNextDescendantNode=l,t.tree_getDescendantNodes=c,t.tree_getDescendantElements=function(e,t,r,n){var o;return void 0===t&&(t=!1),void 0===r&&(r=!1),t||0!==e._children.size?((o={})[Symbol.iterator]=function(){var o=c(e,t,r,(function(e){return i.Guard.isElementNode(e)}))[Symbol.iterator](),a=o.next().value;return{next:function(){for(;a&&n&&!n(a);)a=o.next().value;if(null===a)return{done:!0,value:null};var e={done:!1,value:a};return a=o.next().value,e}}},o):s()},t.tree_getSiblingNodes=function(e,t,r){var n;return void 0===t&&(t=!1),e._parent&&0!==e._parent._children.size?((n={})[Symbol.iterator]=function(){var n=e._parent?e._parent._firstChild:null;return{next:function(){for(;n&&(r&&!r(n)||!t&&n===e);)n=n._nextSibling;if(null===n)return{done:!0,value:null};var i={done:!1,value:n};return n=n._nextSibling,i}}},n):s()},t.tree_getFirstAncestorNode=h,t.tree_getNextAncestorNode=p,t.tree_getAncestorNodes=function(e,t,r){var n;return void 0===t&&(t=!1),t||e._parent?((n={})[Symbol.iterator]=function(){var n=h(e,t,r);return{next:function(){if(null===n)return{done:!0,value:null};var e={done:!1,value:n};return n=p(0,n,t,r),e}}},n):s()},t.tree_getCommonAncestor=function(e,t){if(e===t)return e._parent;for(var r=[],n=[],i=h(e,!0);null!==i;)r.push(i),i=p(0,i,!0);for(var o=h(t,!0);null!==o;)n.push(o),o=p(0,o,!0);for(var a=r.length,s=n.length,u=null,l=Math.min(a,s);l>0;l--){var c=r[--a];if(c!==n[--s])break;u=c}return u},t.tree_getFollowingNode=function(e,t){if(t._firstChild)return t._firstChild;if(t._nextSibling)return t._nextSibling;for(;;){var r=t._parent;if(null===r||r===e)return null;if(r._nextSibling)return r._nextSibling;t=r}},t.tree_getPrecedingNode=function(e,t){return t===e?null:t._previousSibling?(t=t._previousSibling)._lastChild?t._lastChild:t:t._parent},t.tree_isConstrained=function e(t){var r,i,a,s,u,l;switch(t._nodeType){case o.NodeType.Document:var c=!1,h=!1;try{for(var p=n(t._children),f=p.next();!f.done;f=p.next()){switch(f.value._nodeType){case o.NodeType.ProcessingInstruction:case o.NodeType.Comment:break;case o.NodeType.DocumentType:if(c||h)return!1;c=!0;break;case o.NodeType.Element:if(h)return!1;h=!0;break;default:return!1}}}catch(e){r={error:e}}finally{try{f&&!f.done&&(i=p.return)&&i.call(p)}finally{if(r)throw r.error}}break;case o.NodeType.DocumentFragment:case o.NodeType.Element:try{for(var d=n(t._children),m=d.next();!m.done;m=d.next()){switch(m.value._nodeType){case o.NodeType.Element:case o.NodeType.Text:case o.NodeType.ProcessingInstruction:case o.NodeType.CData:case o.NodeType.Comment:break;default:return!1}}}catch(e){a={error:e}}finally{try{m&&!m.done&&(s=d.return)&&s.call(d)}finally{if(a)throw a.error}}break;case o.NodeType.DocumentType:case o.NodeType.Text:case o.NodeType.ProcessingInstruction:case o.NodeType.CData:case o.NodeType.Comment:return!t.hasChildNodes()}try{for(var y=n(t._children),v=y.next();!v.done;v=y.next()){if(!e(v.value))return!1}}catch(e){u={error:e}}finally{try{v&&!v.done&&(l=y.return)&&l.call(y)}finally{if(u)throw u.error}}return!0},t.tree_nodeLength=f,t.tree_isEmpty=function(e){return 0===f(e)},t.tree_rootNode=d,t.tree_isDescendantOf=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var i=u(e,r,n);null!==i;){if(i===t)return!0;i=l(e,i,r,n)}return!1},t.tree_isAncestorOf=m,t.tree_isHostIncludingAncestorOf=function e(t,r,n){if(void 0===n&&(n=!1),m(t,r,n))return!0;var o=d(t);return!(!i.Guard.isDocumentFragmentNode(o)||null===o._host||!e(o._host,r,n))},t.tree_isSiblingOf=function(e,t,r){return void 0===r&&(r=!1),e!==t?null!==e._parent&&e._parent===t._parent:!!r},t.tree_isPreceding=function(e,t){var r=y(e),n=y(t);return-1!==r&&-1!==n&&(d(e)===d(t)&&n<r)},t.tree_isFollowing=function(e,t){var r=y(e),n=y(t);return-1!==r&&-1!==n&&(d(e)===d(t)&&n>r)},t.tree_isParentOf=function(e,t){return e._parent===t},t.tree_isChildOf=function(e,t){return t._parent===e},t.tree_previousSibling=function(e){return e._previousSibling},t.tree_nextSibling=function(e){return e._nextSibling},t.tree_firstChild=function(e){return e._firstChild},t.tree_lastChild=function(e){return e._lastChild},t.tree_treePosition=y,t.tree_index=function(e){for(var t=0;null!==e._previousSibling;)t++,e=e._previousSibling;return t},t.tree_retarget=function(e,t){for(;;){if(!e||!i.Guard.isNode(e))return e;var r=d(e);if(!i.Guard.isShadowRoot(r))return e;if(t&&i.Guard.isNode(t)&&m(r,t,!0,!0))return e;e=r.host}}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+\" is not an object\");return e}},function(e,t,r){\"use strict\";var n=r(24),i=r(130),o=r(49),a=r(43),s=r(88),u=a.set,l=a.getterFor(\"Array Iterator\");e.exports=s(Array,\"Array\",(function(e,t){u(this,{type:\"Array Iterator\",target:n(e),index:0,kind:t})}),(function(){var e=l(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):\"keys\"==r?{value:n,done:!1}:\"values\"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),\"values\"),o.Arguments=o.Array,i(\"keys\"),i(\"values\"),i(\"entries\")},function(e,t,r){var n=r(90),i=r(25),o=r(202);n||i(Object.prototype,\"toString\",o,{unsafe:!0})},function(e,t,r){var n=r(16),i=r(15),o=r(40);e.exports=n?function(e,t,r){return i.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){\"use strict\";var n=r(137).charAt,i=r(43),o=r(88),a=i.set,s=i.getterFor(\"String Iterator\");o(String,\"String\",(function(e){a(this,{type:\"String Iterator\",string:String(e),index:0})}),(function(){var e,t=s(this),r=t.string,i=t.index;return i>=r.length?{value:void 0,done:!0}:(e=n(r,i),t.index+=e.length,{value:e,done:!1})}))},function(e,t,r){var n=r(11),i=r(203),o=r(19),a=r(21),s=r(5),u=s(\"iterator\"),l=s(\"toStringTag\"),c=o.values;for(var h in i){var p=n[h],f=p&&p.prototype;if(f){if(f[u]!==c)try{a(f,u,c)}catch(e){f[u]=c}if(f[l]||a(f,l,h),i[h])for(var d in o)if(f[d]!==o[d])try{a(f,d,o[d])}catch(e){f[d]=o[d]}}}},function(e,t,r){var n=r(41),i=r(35);e.exports=function(e){return n(i(e))}},function(e,t,r){var n=r(11),i=r(21),o=r(14),a=r(80),s=r(117),u=r(43),l=u.get,c=u.enforce,h=String(String).split(\"String\");(e.exports=function(e,t,r,s){var u=!!s&&!!s.unsafe,l=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;\"function\"==typeof r&&(\"string\"!=typeof t||o(r,\"name\")||i(r,\"name\",t),c(r).source=h.join(\"string\"==typeof t?t:\"\")),e!==n?(u?!p&&e[t]&&(l=!0):delete e[t],l?e[t]=r:i(e,t,r)):l?e[t]=r:a(t,r)})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&l(this).source||s(this)}))},function(e,t,r){var n=r(47),i=Math.min;e.exports=function(e){return e>0?i(n(e),9007199254740991):0}},function(e,t,r){var n=r(35);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(16),i=r(8),o=r(14),a=Object.defineProperty,s={},u=function(e){throw e};e.exports=function(e,t){if(o(s,e))return s[e];t||(t={});var r=[][e],l=!!o(t,\"ACCESSORS\")&&t.ACCESSORS,c=o(t,0)?t[0]:u,h=o(t,1)?t[1]:void 0;return s[e]=!!r&&!i((function(){if(l&&!n)return!0;var e={length:-1};l?a(e,1,{enumerable:!0,get:u}):e[1]=1,r.call(e,c,h)}))}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(148),i=r(149),o=r(151),a=r(98),s=r(153),u=r(154),l=r(155),c=r(99),h=r(100),p=r(156),f=r(157),d=r(101),m=r(158),y=r(159),v=r(160),_=r(161),g=r(162),b=r(163),x=r(164),w=r(165),E=r(166),D=r(167),S=r(168),C=r(169),A=r(170);t.create_domImplementation=function(e){return n.DOMImplementationImpl._create(e)},t.create_window=function(){return i.WindowImpl._create()},t.create_xmlDocument=function(){return new o.XMLDocumentImpl},t.create_document=function(){return new a.DocumentImpl},t.create_abortController=function(){return new s.AbortControllerImpl},t.create_abortSignal=function(){return u.AbortSignalImpl._create()},t.create_documentType=function(e,t,r,n){return l.DocumentTypeImpl._create(e,t,r,n)},t.create_element=function(e,t,r,n){return c.ElementImpl._create(e,t,r,n)},t.create_htmlElement=function(e,t,r,n){return c.ElementImpl._create(e,t,r,n)},t.create_htmlUnknownElement=function(e,t,r,n){return c.ElementImpl._create(e,t,r,n)},t.create_documentFragment=function(e){return h.DocumentFragmentImpl._create(e)},t.create_shadowRoot=function(e,t){return p.ShadowRootImpl._create(e,t)},t.create_attr=function(e,t){return f.AttrImpl._create(e,t)},t.create_text=function(e,t){return d.TextImpl._create(e,t)},t.create_cdataSection=function(e,t){return m.CDATASectionImpl._create(e,t)},t.create_comment=function(e,t){return y.CommentImpl._create(e,t)},t.create_processingInstruction=function(e,t,r){return v.ProcessingInstructionImpl._create(e,t,r)},t.create_htmlCollection=function(e,t){return void 0===t&&(t=function(){return!0}),_.HTMLCollectionImpl._create(e,t)},t.create_nodeList=function(e){return g.NodeListImpl._create(e)},t.create_nodeListStatic=function(e,t){return b.NodeListStaticImpl._create(e,t)},t.create_namedNodeMap=function(e){return x.NamedNodeMapImpl._create(e)},t.create_range=function(e,t){return w.RangeImpl._create(e,t)},t.create_nodeIterator=function(e,t,r){return E.NodeIteratorImpl._create(e,t,r)},t.create_treeWalker=function(e,t){return D.TreeWalkerImpl._create(e,t)},t.create_nodeFilter=function(){return S.NodeFilterImpl._create()},t.create_mutationRecord=function(e,t,r,n,i,o,a,s,u){return C.MutationRecordImpl._create(e,t,r,n,i,o,a,s,u)},t.create_domTokenList=function(e,t){return A.DOMTokenListImpl._create(e,t)}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(17),a=r(3),s=r(72),u=new Map;function l(e,t){if(t!==e._root&&o.tree_isAncestorOf(e._reference,t,!0)){if(e._pointerBeforeReference)for(;;){var r=o.tree_getFollowingNode(e._root,t);if(null!==r&&o.tree_isDescendantOf(e._root,r,!0)&&!o.tree_isDescendantOf(t,r,!0))return void(e._reference=r);if(null===r)return void(e._pointerBeforeReference=!1)}if(null===t._previousSibling)null!==t._parent&&(e._reference=t._parent);else{for(var n=t._previousSibling,i=o.tree_getFirstDescendantNode(t._previousSibling,!0,!1);null!==i;)null!==i&&(n=i),i=o.tree_getNextDescendantNode(t._previousSibling,i,!0,!1);e._reference=n}}}function c(e,t,r,n,i){if(a.Guard.isSlot(e)&&\"name\"===t&&null===i){if(n===r)return;if(null===n&&\"\"===r)return;if(\"\"===n&&null===r)return;e._name=null===n||\"\"===n?\"\":n,s.shadowTree_assignSlotablesForATree(o.tree_rootNode(e))}}function h(e,t,r,n,i){if(a.Guard.isSlotable(e)&&\"slot\"===t&&null===i){if(n===r)return;if(null===n&&\"\"===r)return;if(\"\"===n&&null===r)return;e._name=null===n||\"\"===n?\"\":n,s.shadowTree_isAssigned(e)&&s.shadowTree_assignSlotables(e._assignedSlot),s.shadowTree_assignASlot(e)}}function p(e,t,r,n){\"id\"===t&&null===n&&(e._uniqueIdentifier=r||void 0)}t.dom_runRemovingSteps=function(e,t){},t.dom_runCloningSteps=function(e,t,r,n){},t.dom_runAdoptingSteps=function(e,t){},t.dom_runAttributeChangeSteps=function(e,t,r,o,a){var s,u;i.dom.features.slots&&(h.call(e,e,t,r,o,a),c.call(e,e,t,r,o,a)),p.call(e,e,t,o,a);try{for(var l=n(e._attributeChangeSteps),f=l.next();!f.done;f=l.next()){f.value.call(e,e,t,r,o,a)}}catch(e){s={error:e}}finally{try{f&&!f.done&&(u=l.return)&&u.call(l)}finally{if(s)throw s.error}}},t.dom_runInsertionSteps=function(e){},t.dom_runNodeIteratorPreRemovingSteps=function(e,t){l.call(e,e,t)},t.dom_hasSupportedTokens=function(e){return u.has(e)},t.dom_getSupportedTokens=function(e){return u.get(e)||new Set},t.dom_runEventConstructingSteps=function(e){},t.dom_runChildTextContentChangeSteps=function(e){}},function(e,t,r){\"use strict\";var n=r(4),i=r(11),o=r(46),a=r(44),s=r(16),u=r(86),l=r(124),c=r(8),h=r(14),p=r(59),f=r(13),d=r(18),m=r(27),y=r(24),v=r(56),_=r(40),g=r(60),b=r(61),x=r(82),w=r(190),E=r(85),D=r(55),S=r(15),C=r(79),A=r(21),N=r(25),T=r(81),O=r(57),F=r(45),k=r(58),P=r(5),I=r(125),L=r(126),M=r(62),B=r(43),j=r(36).forEach,R=O(\"hidden\"),z=P(\"toPrimitive\"),U=B.set,G=B.getterFor(\"Symbol\"),X=Object.prototype,q=i.Symbol,W=o(\"JSON\",\"stringify\"),H=D.f,J=S.f,Y=w.f,V=C.f,K=T(\"symbols\"),$=T(\"op-symbols\"),Q=T(\"string-to-symbol-registry\"),Z=T(\"symbol-to-string-registry\"),ee=T(\"wks\"),te=i.QObject,re=!te||!te.prototype||!te.prototype.findChild,ne=s&&c((function(){return 7!=g(J({},\"a\",{get:function(){return J(this,\"a\",{value:7}).a}})).a}))?function(e,t,r){var n=H(X,t);n&&delete X[t],J(e,t,r),n&&e!==X&&J(X,t,n)}:J,ie=function(e,t){var r=K[e]=g(q.prototype);return U(r,{type:\"Symbol\",tag:e,description:t}),s||(r.description=t),r},oe=l?function(e){return\"symbol\"==typeof e}:function(e){return Object(e)instanceof q},ae=function(e,t,r){e===X&&ae($,t,r),d(e);var n=v(t,!0);return d(r),h(K,n)?(r.enumerable?(h(e,R)&&e[R][n]&&(e[R][n]=!1),r=g(r,{enumerable:_(0,!1)})):(h(e,R)||J(e,R,_(1,{})),e[R][n]=!0),ne(e,n,r)):J(e,n,r)},se=function(e,t){d(e);var r=y(t),n=b(r).concat(he(r));return j(n,(function(t){s&&!ue.call(r,t)||ae(e,t,r[t])})),e},ue=function(e){var t=v(e,!0),r=V.call(this,t);return!(this===X&&h(K,t)&&!h($,t))&&(!(r||!h(this,t)||!h(K,t)||h(this,R)&&this[R][t])||r)},le=function(e,t){var r=y(e),n=v(t,!0);if(r!==X||!h(K,n)||h($,n)){var i=H(r,n);return!i||!h(K,n)||h(r,R)&&r[R][n]||(i.enumerable=!0),i}},ce=function(e){var t=Y(y(e)),r=[];return j(t,(function(e){h(K,e)||h(F,e)||r.push(e)})),r},he=function(e){var t=e===X,r=Y(t?$:y(e)),n=[];return j(r,(function(e){!h(K,e)||t&&!h(X,e)||n.push(K[e])})),n};(u||(N((q=function(){if(this instanceof q)throw TypeError(\"Symbol is not a constructor\");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=k(e),r=function(e){this===X&&r.call($,e),h(this,R)&&h(this[R],t)&&(this[R][t]=!1),ne(this,t,_(1,e))};return s&&re&&ne(X,t,{configurable:!0,set:r}),ie(t,e)}).prototype,\"toString\",(function(){return G(this).tag})),N(q,\"withoutSetter\",(function(e){return ie(k(e),e)})),C.f=ue,S.f=ae,D.f=le,x.f=w.f=ce,E.f=he,I.f=function(e){return ie(P(e),e)},s&&(J(q.prototype,\"description\",{configurable:!0,get:function(){return G(this).description}}),a||N(X,\"propertyIsEnumerable\",ue,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:q}),j(b(ee),(function(e){L(e)})),n({target:\"Symbol\",stat:!0,forced:!u},{for:function(e){var t=String(e);if(h(Q,t))return Q[t];var r=q(t);return Q[t]=r,Z[r]=t,r},keyFor:function(e){if(!oe(e))throw TypeError(e+\" is not a symbol\");if(h(Z,e))return Z[e]},useSetter:function(){re=!0},useSimple:function(){re=!1}}),n({target:\"Object\",stat:!0,forced:!u,sham:!s},{create:function(e,t){return void 0===t?g(e):se(g(e),t)},defineProperty:ae,defineProperties:se,getOwnPropertyDescriptor:le}),n({target:\"Object\",stat:!0,forced:!u},{getOwnPropertyNames:ce,getOwnPropertySymbols:he}),n({target:\"Object\",stat:!0,forced:c((function(){E.f(1)}))},{getOwnPropertySymbols:function(e){return E.f(m(e))}}),W)&&n({target:\"JSON\",stat:!0,forced:!u||c((function(){var e=q();return\"[null]\"!=W([e])||\"{}\"!=W({a:e})||\"{}\"!=W(Object(e))}))},{stringify:function(e,t,r){for(var n,i=[e],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=t,(f(t)||void 0!==e)&&!oe(e))return p(t)||(t=function(e,t){if(\"function\"==typeof n&&(t=n.call(this,e,t)),!oe(t))return t}),i[1]=t,W.apply(null,i)}});q.prototype[z]||A(q.prototype,z,q.prototype.valueOf),M(q,\"Symbol\"),F[R]=!0},function(e,t,r){\"use strict\";var n=r(4),i=r(16),o=r(11),a=r(14),s=r(13),u=r(15).f,l=r(119),c=o.Symbol;if(i&&\"function\"==typeof c&&(!(\"description\"in c.prototype)||void 0!==c().description)){var h={},p=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof p?new c(e):void 0===e?c():c(e);return\"\"===e&&(h[t]=!0),t};l(p,c);var f=p.prototype=c.prototype;f.constructor=p;var d=f.toString,m=\"Symbol(test)\"==String(c(\"test\")),y=/^Symbol\\((.*)\\)[^)]+$/;u(f,\"description\",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,t=d.call(e);if(a(h,e))return\"\";var r=m?t.slice(7,-1):t.replace(y,\"$1\");return\"\"===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:p})}},function(e,t,r){r(126)(\"iterator\")},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(6),s=r(2),u=r(70),l=r(3),c=r(9),h=r(0),p=r(152),f=r(12),d=function(e){function t(){var t=e.call(this)||this;return t._parent=null,t._firstChild=null,t._lastChild=null,t._previousSibling=null,t._nextSibling=null,t}return i(t,e),Object.defineProperty(t.prototype,\"_childNodes\",{get:function(){return this.__childNodes||(this.__childNodes=h.create_nodeList(this))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"_nodeDocument\",{get:function(){return this._nodeDocumentOverride||a.dom.window._associatedDocument},set:function(e){this._nodeDocumentOverride=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"_registeredObserverList\",{get:function(){return this.__registeredObserverList||(this.__registeredObserverList=[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"nodeType\",{get:function(){return this._nodeType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"nodeName\",{get:function(){return l.Guard.isElementNode(this)?this._htmlUppercasedQualifiedName:l.Guard.isAttrNode(this)?this._qualifiedName:l.Guard.isExclusiveTextNode(this)?\"#text\":l.Guard.isCDATASectionNode(this)?\"#cdata-section\":l.Guard.isProcessingInstructionNode(this)?this._target:l.Guard.isCommentNode(this)?\"#comment\":l.Guard.isDocumentNode(this)?\"#document\":l.Guard.isDocumentTypeNode(this)?this._name:l.Guard.isDocumentFragmentNode(this)?\"#document-fragment\":\"\"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"baseURI\",{get:function(){return p.urlSerializer(this._nodeDocument._URL)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"isConnected\",{get:function(){return l.Guard.isElementNode(this)&&h.shadowTree_isConnected(this)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"ownerDocument\",{get:function(){return this._nodeType===s.NodeType.Document?null:this._nodeDocument},enumerable:!0,configurable:!0}),t.prototype.getRootNode=function(e){return h.tree_rootNode(this,!!e&&e.composed)},Object.defineProperty(t.prototype,\"parentNode\",{get:function(){return this._nodeType===s.NodeType.Attribute?null:this._parent},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"parentElement\",{get:function(){return this._parent&&l.Guard.isElementNode(this._parent)?this._parent:null},enumerable:!0,configurable:!0}),t.prototype.hasChildNodes=function(){return null!==this._firstChild},Object.defineProperty(t.prototype,\"childNodes\",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"firstChild\",{get:function(){return this._firstChild},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"lastChild\",{get:function(){return this._lastChild},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"previousSibling\",{get:function(){return this._previousSibling},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"nextSibling\",{get:function(){return this._nextSibling},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"nodeValue\",{get:function(){return l.Guard.isAttrNode(this)?this._value:l.Guard.isCharacterDataNode(this)?this._data:null},set:function(e){null===e&&(e=\"\"),l.Guard.isAttrNode(this)?h.attr_setAnExistingAttributeValue(this,e):l.Guard.isCharacterDataNode(this)&&h.characterData_replaceData(this,0,this._data.length,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"textContent\",{get:function(){return l.Guard.isDocumentFragmentNode(this)||l.Guard.isElementNode(this)?h.text_descendantTextContent(this):l.Guard.isAttrNode(this)?this._value:l.Guard.isCharacterDataNode(this)?this._data:null},set:function(e){null===e&&(e=\"\"),l.Guard.isDocumentFragmentNode(this)||l.Guard.isElementNode(this)?h.node_stringReplaceAll(e,this):l.Guard.isAttrNode(this)?h.attr_setAnExistingAttributeValue(this,e):l.Guard.isCharacterDataNode(this)&&h.characterData_replaceData(this,0,h.tree_nodeLength(this),e)},enumerable:!0,configurable:!0}),t.prototype.normalize=function(){for(var e,t,r,n,i=[],s=h.tree_getFirstDescendantNode(this,!1,!1,(function(e){return l.Guard.isExclusiveTextNode(e)}));null!==s;)i.push(s),s=h.tree_getNextDescendantNode(this,s,!1,!1,(function(e){return l.Guard.isExclusiveTextNode(e)}));for(var u=0;u<i.length;u++){var c=i[u];if(null!==c._parent){var p=h.tree_nodeLength(c);if(0!==p){var f=[],d=\"\";try{for(var m=(e=void 0,o(h.text_contiguousExclusiveTextNodes(c))),y=m.next();!y.done;y=m.next()){var v=y.value;f.push(v),d+=v._data}}catch(t){e={error:t}}finally{try{y&&!y.done&&(t=m.return)&&t.call(m)}finally{if(e)throw e.error}}if(h.characterData_replaceData(c,p,0,d),0!==a.dom.rangeList.size)for(var _=c._nextSibling;null!==_&&l.Guard.isExclusiveTextNode(_);){var g=_,b=h.tree_index(g);try{for(var x=(r=void 0,o(a.dom.rangeList)),w=x.next();!w.done;w=x.next()){var E=w.value;E._start[0]===g&&(E._start[0]=c,E._start[1]+=p),E._end[0]===g&&(E._end[0]=c,E._end[1]+=p),E._start[0]===g._parent&&E._start[1]===b&&(E._start[0]=c,E._start[1]=p),E._end[0]===g._parent&&E._end[1]===b&&(E._end[0]=c,E._end[1]=p)}}catch(e){r={error:e}}finally{try{w&&!w.done&&(n=x.return)&&n.call(x)}finally{if(r)throw r.error}}p+=h.tree_nodeLength(_),_=_._nextSibling}for(var D=0;D<f.length;D++){null!==(v=f[D])._parent&&h.mutation_remove(v,v._parent)}}else h.mutation_remove(c,c._parent)}}},t.prototype.cloneNode=function(e){if(void 0===e&&(e=!1),l.Guard.isShadowRoot(this))throw new c.NotSupportedError;return h.node_clone(this,null,e)},t.prototype.isEqualNode=function(e){return void 0===e&&(e=null),null!==e&&h.node_equals(this,e)},t.prototype.isSameNode=function(e){return void 0===e&&(e=null),this===e},t.prototype.compareDocumentPosition=function(e){if(e===this)return 0;var t=e,r=this,n=null,i=null;if(l.Guard.isAttrNode(t)&&(t=(n=t)._element),l.Guard.isAttrNode(r)&&(r=(i=r)._element,n&&t&&t===r))for(var o=0;o<r._attributeList.length;o++){var u=r._attributeList[o];if(h.node_equals(u,n))return s.Position.ImplementationSpecific|s.Position.Preceding;if(h.node_equals(u,i))return s.Position.ImplementationSpecific|s.Position.Following}return null===t||null===r||h.tree_rootNode(t)!==h.tree_rootNode(r)?s.Position.Disconnected|s.Position.ImplementationSpecific|(a.dom.compareCache.check(this,e)?s.Position.Preceding:s.Position.Following):!n&&h.tree_isAncestorOf(r,t)||i&&t===r?s.Position.Contains|s.Position.Preceding:!i&&h.tree_isDescendantOf(r,t)||n&&t===r?s.Position.ContainedBy|s.Position.Following:h.tree_isPreceding(r,t)?s.Position.Preceding:s.Position.Following},t.prototype.contains=function(e){return null!==e&&h.tree_isDescendantOf(this,e,!0)},t.prototype.lookupPrefix=function(e){return e?l.Guard.isElementNode(this)?h.node_locateANamespacePrefix(this,e):l.Guard.isDocumentNode(this)?null===this.documentElement?null:h.node_locateANamespacePrefix(this.documentElement,e):l.Guard.isDocumentTypeNode(this)||l.Guard.isDocumentFragmentNode(this)?null:l.Guard.isAttrNode(this)?null===this._element?null:h.node_locateANamespacePrefix(this._element,e):null!==this._parent&&l.Guard.isElementNode(this._parent)?h.node_locateANamespacePrefix(this._parent,e):null:null},t.prototype.lookupNamespaceURI=function(e){return h.node_locateANamespace(this,e||null)},t.prototype.isDefaultNamespace=function(e){return e||(e=null),h.node_locateANamespace(this,null)===e},t.prototype.insertBefore=function(e,t){return h.mutation_preInsert(e,this,t)},t.prototype.appendChild=function(e){return h.mutation_append(e,this)},t.prototype.replaceChild=function(e,t){return h.mutation_replace(t,e,this)},t.prototype.removeChild=function(e){return h.mutation_preRemove(e,this)},t.prototype._getTheParent=function(e){return l.Guard.isSlotable(this)&&h.shadowTree_isAssigned(this)?this._assignedSlot:this._parent},t.ELEMENT_NODE=1,t.ATTRIBUTE_NODE=2,t.TEXT_NODE=3,t.CDATA_SECTION_NODE=4,t.ENTITY_REFERENCE_NODE=5,t.ENTITY_NODE=6,t.PROCESSING_INSTRUCTION_NODE=7,t.COMMENT_NODE=8,t.DOCUMENT_NODE=9,t.DOCUMENT_TYPE_NODE=10,t.DOCUMENT_FRAGMENT_NODE=11,t.NOTATION_NODE=12,t.DOCUMENT_POSITION_DISCONNECTED=1,t.DOCUMENT_POSITION_PRECEDING=2,t.DOCUMENT_POSITION_FOLLOWING=4,t.DOCUMENT_POSITION_CONTAINS=8,t.DOCUMENT_POSITION_CONTAINED_BY=16,t.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC=32,t}(u.EventTargetImpl);t.NodeImpl=d,d.prototype._children=new l.EmptySet,f.idl_defineConst(d.prototype,\"ELEMENT_NODE\",1),f.idl_defineConst(d.prototype,\"ATTRIBUTE_NODE\",2),f.idl_defineConst(d.prototype,\"TEXT_NODE\",3),f.idl_defineConst(d.prototype,\"CDATA_SECTION_NODE\",4),f.idl_defineConst(d.prototype,\"ENTITY_REFERENCE_NODE\",5),f.idl_defineConst(d.prototype,\"ENTITY_NODE\",6),f.idl_defineConst(d.prototype,\"PROCESSING_INSTRUCTION_NODE\",7),f.idl_defineConst(d.prototype,\"COMMENT_NODE\",8),f.idl_defineConst(d.prototype,\"DOCUMENT_NODE\",9),f.idl_defineConst(d.prototype,\"DOCUMENT_TYPE_NODE\",10),f.idl_defineConst(d.prototype,\"DOCUMENT_FRAGMENT_NODE\",11),f.idl_defineConst(d.prototype,\"NOTATION_NODE\",12),f.idl_defineConst(d.prototype,\"DOCUMENT_POSITION_DISCONNECTED\",1),f.idl_defineConst(d.prototype,\"DOCUMENT_POSITION_PRECEDING\",2),f.idl_defineConst(d.prototype,\"DOCUMENT_POSITION_FOLLOWING\",4),f.idl_defineConst(d.prototype,\"DOCUMENT_POSITION_CONTAINS\",8),f.idl_defineConst(d.prototype,\"DOCUMENT_POSITION_CONTAINED_BY\",16),f.idl_defineConst(d.prototype,\"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\",32)},function(e,t){e.exports=function(e){if(null==e)throw TypeError(\"Can't call method on \"+e);return e}},function(e,t,r){var n=r(87),i=r(41),o=r(27),a=r(26),s=r(128),u=[].push,l=function(e){var t=1==e,r=2==e,l=3==e,c=4==e,h=6==e,p=5==e||h;return function(f,d,m,y){for(var v,_,g=o(f),b=i(g),x=n(d,m,3),w=a(b.length),E=0,D=y||s,S=t?D(f,w):r?D(f,0):void 0;w>E;E++)if((p||E in b)&&(_=x(v=b[E],E,g),e))if(t)S[E]=_;else if(_)switch(e){case 3:return!0;case 5:return v;case 6:return E;case 2:u.call(S,v)}else if(c)return!1;return h?-1:l||c?c:S}};e.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6)}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(6),s=r(9),u=r(2),l=r(3),c=r(1),h=r(7),p=r(73),f=r(17),d=r(172),m=r(72),y=r(51),v=r(30),_=r(106);function g(e,t,r){var i,o,a,l,c,h,p,d,m=t._nodeType,y=e._nodeType,v=r?r._nodeType:null;if(m!==u.NodeType.Document&&m!==u.NodeType.DocumentFragment&&m!==u.NodeType.Element)throw new s.HierarchyRequestError(\"Only document, document fragment and element nodes can contain child nodes. Parent node is \"+t.nodeName+\".\");if(f.tree_isHostIncludingAncestorOf(t,e,!0))throw new s.HierarchyRequestError(\"The node to be inserted cannot be an inclusive ancestor of parent node. Node is \"+e.nodeName+\", parent node is \"+t.nodeName+\".\");if(null!==r&&r._parent!==t)throw new s.NotFoundError(\"The reference child node cannot be found under parent node. Child node is \"+r.nodeName+\", parent node is \"+t.nodeName+\".\");if(y!==u.NodeType.DocumentFragment&&y!==u.NodeType.DocumentType&&y!==u.NodeType.Element&&y!==u.NodeType.Text&&y!==u.NodeType.ProcessingInstruction&&y!==u.NodeType.CData&&y!==u.NodeType.Comment)throw new s.HierarchyRequestError(\"Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is \"+e.nodeName+\".\");if(y===u.NodeType.Text&&m===u.NodeType.Document)throw new s.HierarchyRequestError(\"Cannot insert a text node as a child of a document node. Node is \"+e.nodeName+\".\");if(y===u.NodeType.DocumentType&&m!==u.NodeType.Document)throw new s.HierarchyRequestError(\"A document type node can only be inserted under a document node. Parent node is \"+t.nodeName+\".\");if(m===u.NodeType.Document)if(y===u.NodeType.DocumentFragment){var _=0;try{for(var g=n(e._children),b=g.next();!b.done;b=g.next()){var x=b.value;if(x._nodeType===u.NodeType.Element)_++;else if(x._nodeType===u.NodeType.Text)throw new s.HierarchyRequestError(\"Cannot insert text a node as a child of a document node. Node is \"+x.nodeName+\".\")}}catch(e){i={error:e}}finally{try{b&&!b.done&&(o=g.return)&&o.call(g)}finally{if(i)throw i.error}}if(_>1)throw new s.HierarchyRequestError(\"A document node can only have one document element node. Document fragment to be inserted has \"+_+\" element nodes.\");if(1===_){try{for(var w=n(t._children),E=w.next();!E.done;E=w.next()){if(E.value._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError(\"The document node already has a document element node.\")}}catch(e){a={error:e}}finally{try{E&&!E.done&&(l=w.return)&&l.call(w)}finally{if(a)throw a.error}}if(r){if(v===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Cannot insert an element node before a document type node.\");for(var D=r._nextSibling;D;){if(D._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Cannot insert an element node before a document type node.\");D=D._nextSibling}}}}else if(y===u.NodeType.Element){try{for(var S=n(t._children),C=S.next();!C.done;C=S.next()){if(C.value._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError(\"Document already has a document element node. Node is \"+e.nodeName+\".\")}}catch(e){c={error:e}}finally{try{C&&!C.done&&(h=S.return)&&h.call(S)}finally{if(c)throw c.error}}if(r){if(v===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Cannot insert an element node before a document type node. Node is \"+e.nodeName+\".\");for(D=r._nextSibling;D;){if(D._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Cannot insert an element node before a document type node. Node is \"+e.nodeName+\".\");D=D._nextSibling}}}else if(y===u.NodeType.DocumentType){try{for(var A=n(t._children),N=A.next();!N.done;N=A.next()){if(N.value._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Document already has a document type node. Node is \"+e.nodeName+\".\")}}catch(e){p={error:e}}finally{try{N&&!N.done&&(d=A.return)&&d.call(A)}finally{if(p)throw p.error}}if(r)for(var T=r._previousSibling;T;){if(T._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError(\"Cannot insert a document type node before an element node. Node is \"+e.nodeName+\".\");T=T._previousSibling}else for(T=t._firstChild;T;){if(T._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError(\"Cannot insert a document type node before an element node. Node is \"+e.nodeName+\".\");T=T._nextSibling}}}function b(e,t,r){g(e,t,r);var n=r;return n===e&&(n=e._nextSibling),_.document_adopt(e,t._nodeDocument),x(e,t,n),e}function x(e,t,r,i){var s,d;if(null!==r||e._nodeType===u.NodeType.DocumentFragment){var _=e._nodeType===u.NodeType.DocumentFragment?e._children.size:1;if(null!==r&&0!==a.dom.rangeList.size){var g=f.tree_index(r);try{for(var b=n(a.dom.rangeList),x=b.next();!x.done;x=b.next()){var E=x.value;E._start[0]===t&&E._start[1]>g&&(E._start[1]+=_),E._end[0]===t&&E._end[1]>g&&(E._end[1]+=_)}}catch(e){s={error:e}}finally{try{x&&!x.done&&(d=b.return)&&d.call(b)}finally{if(s)throw s.error}}}var D=e._nodeType===u.NodeType.DocumentFragment?new(Array.bind.apply(Array,o([void 0],e._children))):[e];if(e._nodeType===u.NodeType.DocumentFragment)for(;e._firstChild;)w(e._firstChild,e,!0);a.dom.features.mutationObservers&&e._nodeType===u.NodeType.DocumentFragment&&y.observer_queueTreeMutationRecord(e,[],D,null,null);for(var S=r?r._previousSibling:t._lastChild,C=null===r?-1:f.tree_index(r),A=0;A<D.length;A++){var N=D[A];if(l.Guard.isElementNode(N)&&(l.Guard.isDocumentNode(t)&&(t._documentElement=N),N._nodeDocument._hasNamespaces||null===N._namespace&&null===N._namespacePrefix||(N._nodeDocument._hasNamespaces=!0)),N._parent=t,null===r?h.set.append(t._children,N):(h.set.insert(t._children,N,C),C++),null===t._firstChild)N._previousSibling=null,N._nextSibling=null,t._firstChild=N,t._lastChild=N;else{var T=r?r._previousSibling:t._lastChild,O=r||null;N._previousSibling=T,N._nextSibling=O,T&&(T._nextSibling=N),O&&(O._previousSibling=N),T||(t._firstChild=N),O||(t._lastChild=N)}a.dom.features.slots&&null!==t._shadowRoot&&l.Guard.isSlotable(N)&&m.shadowTree_assignASlot(N),a.dom.features.steps&&l.Guard.isTextNode(N)&&v.dom_runChildTextContentChangeSteps(t),a.dom.features.slots&&l.Guard.isShadowRoot(f.tree_rootNode(t))&&l.Guard.isSlot(t)&&c.isEmpty(t._assignedNodes)&&m.shadowTree_signalASlotChange(t),a.dom.features.slots&&m.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));for(var F=f.tree_getFirstDescendantNode(N,!0,!0);null!==F;)a.dom.features.steps&&v.dom_runInsertionSteps(F),a.dom.features.customElements&&l.Guard.isElementNode(F)&&m.shadowTree_isConnected(F)&&(l.Guard.isCustomElementNode(F)?p.customElement_enqueueACustomElementCallbackReaction(F,\"connectedCallback\",[]):p.customElement_tryToUpgrade(F)),F=f.tree_getNextDescendantNode(N,F,!0,!0)}a.dom.features.mutationObservers&&(i||y.observer_queueTreeMutationRecord(t,D,[],S,r))}else!function(e,t,r){var n=t._lastChild;l.Guard.isElementNode(e)&&(l.Guard.isDocumentNode(t)&&(t._documentElement=e),e._nodeDocument._hasNamespaces||null===e._namespace&&null===e._namespacePrefix||(e._nodeDocument._hasNamespaces=!0));if(e._parent=t,t._children.add(e),null===t._firstChild)e._previousSibling=null,e._nextSibling=null,t._firstChild=e,t._lastChild=e;else{var i=t._lastChild;e._previousSibling=i,e._nextSibling=null,i&&(i._nextSibling=e),i||(t._firstChild=e),t._lastChild=e}a.dom.features.slots&&null!==t._shadowRoot&&l.Guard.isSlotable(e)&&m.shadowTree_assignASlot(e);a.dom.features.steps&&l.Guard.isTextNode(e)&&v.dom_runChildTextContentChangeSteps(t);a.dom.features.slots&&l.Guard.isShadowRoot(f.tree_rootNode(t))&&l.Guard.isSlot(t)&&c.isEmpty(t._assignedNodes)&&m.shadowTree_signalASlotChange(t);a.dom.features.slots&&m.shadowTree_assignSlotablesForATree(f.tree_rootNode(e));a.dom.features.steps&&v.dom_runInsertionSteps(e);a.dom.features.customElements&&l.Guard.isElementNode(e)&&m.shadowTree_isConnected(e)&&(l.Guard.isCustomElementNode(e)?p.customElement_enqueueACustomElementCallbackReaction(e,\"connectedCallback\",[]):p.customElement_tryToUpgrade(e));a.dom.features.mutationObservers&&(r||y.observer_queueTreeMutationRecord(t,[e],[],n,null))}(e,t,i)}function w(e,t,r){var i,o,s,u,h,_,g,b;if(0!==a.dom.rangeList.size){var x=f.tree_index(e);try{for(var w=n(a.dom.rangeList),E=w.next();!E.done;E=w.next()){var D=E.value;f.tree_isDescendantOf(e,D._start[0],!0)&&(D._start=[t,x]),f.tree_isDescendantOf(e,D._end[0],!0)&&(D._end=[t,x]),D._start[0]===t&&D._start[1]>x&&D._start[1]--,D._end[0]===t&&D._end[1]>x&&D._end[1]--}}catch(e){i={error:e}}finally{try{E&&!E.done&&(o=w.return)&&o.call(w)}finally{if(i)throw i.error}}try{for(var S=n(a.dom.rangeList),C=S.next();!C.done;C=S.next()){(D=C.value)._start[0]===t&&D._start[1]>x&&(D._start[1]-=1),D._end[0]===t&&D._end[1]>x&&(D._end[1]-=1)}}catch(e){s={error:e}}finally{try{C&&!C.done&&(u=S.return)&&u.call(S)}finally{if(s)throw s.error}}}if(a.dom.features.steps)try{for(var A=n(d.nodeIterator_iteratorList()),N=A.next();!N.done;N=A.next()){var T=N.value;T._root._nodeDocument===e._nodeDocument&&v.dom_runNodeIteratorPreRemovingSteps(T,e)}}catch(e){h={error:e}}finally{try{N&&!N.done&&(_=A.return)&&_.call(A)}finally{if(h)throw h.error}}var O=e._previousSibling,F=e._nextSibling;l.Guard.isDocumentNode(t)&&l.Guard.isElementNode(e)&&(t._documentElement=null),e._parent=null,t._children.delete(e);var k=e._previousSibling,P=e._nextSibling;(e._previousSibling=null,e._nextSibling=null,k&&(k._nextSibling=P),P&&(P._previousSibling=k),k||(t._firstChild=P),P||(t._lastChild=k),a.dom.features.slots&&l.Guard.isSlotable(e)&&null!==e._assignedSlot&&m.shadowTree_isAssigned(e)&&m.shadowTree_assignSlotables(e._assignedSlot),a.dom.features.slots&&l.Guard.isShadowRoot(f.tree_rootNode(t))&&l.Guard.isSlot(t)&&c.isEmpty(t._assignedNodes)&&m.shadowTree_signalASlotChange(t),a.dom.features.slots)&&(null!==f.tree_getFirstDescendantNode(e,!0,!1,(function(e){return l.Guard.isSlot(e)}))&&(m.shadowTree_assignSlotablesForATree(f.tree_rootNode(t)),m.shadowTree_assignSlotablesForATree(e)));a.dom.features.steps&&v.dom_runRemovingSteps(e,t),a.dom.features.customElements&&l.Guard.isCustomElementNode(e)&&p.customElement_enqueueACustomElementCallbackReaction(e,\"disconnectedCallback\",[]);for(var I=f.tree_getFirstDescendantNode(e,!1,!0);null!==I;)a.dom.features.steps&&v.dom_runRemovingSteps(I,e),a.dom.features.customElements&&l.Guard.isCustomElementNode(I)&&p.customElement_enqueueACustomElementCallbackReaction(I,\"disconnectedCallback\",[]),I=f.tree_getNextDescendantNode(e,I,!1,!0);if(a.dom.features.mutationObservers)for(var L=f.tree_getFirstAncestorNode(t,!0);null!==L;){try{for(var M=(g=void 0,n(L._registeredObserverList)),B=M.next();!B.done;B=M.next()){var j=B.value;j.options.subtree&&e._registeredObserverList.push({observer:j.observer,options:j.options,source:j})}}catch(e){g={error:e}}finally{try{B&&!B.done&&(b=M.return)&&b.call(M)}finally{if(g)throw g.error}}L=f.tree_getNextAncestorNode(t,L,!0)}a.dom.features.mutationObservers&&(r||y.observer_queueTreeMutationRecord(t,[],[e],O,F)),a.dom.features.steps&&l.Guard.isTextNode(e)&&v.dom_runChildTextContentChangeSteps(t)}t.mutation_ensurePreInsertionValidity=g,t.mutation_preInsert=b,t.mutation_insert=x,t.mutation_append=function(e,t){return b(e,t,null)},t.mutation_replace=function(e,t,r){var i,o,l,c,h,p,d,m;if(r._nodeType!==u.NodeType.Document&&r._nodeType!==u.NodeType.DocumentFragment&&r._nodeType!==u.NodeType.Element)throw new s.HierarchyRequestError(\"Only document, document fragment and element nodes can contain child nodes. Parent node is \"+r.nodeName+\".\");if(f.tree_isHostIncludingAncestorOf(r,t,!0))throw new s.HierarchyRequestError(\"The node to be inserted cannot be an ancestor of parent node. Node is \"+t.nodeName+\", parent node is \"+r.nodeName+\".\");if(e._parent!==r)throw new s.NotFoundError(\"The reference child node cannot be found under parent node. Child node is \"+e.nodeName+\", parent node is \"+r.nodeName+\".\");if(t._nodeType!==u.NodeType.DocumentFragment&&t._nodeType!==u.NodeType.DocumentType&&t._nodeType!==u.NodeType.Element&&t._nodeType!==u.NodeType.Text&&t._nodeType!==u.NodeType.ProcessingInstruction&&t._nodeType!==u.NodeType.CData&&t._nodeType!==u.NodeType.Comment)throw new s.HierarchyRequestError(\"Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is \"+t.nodeName+\".\");if(t._nodeType===u.NodeType.Text&&r._nodeType===u.NodeType.Document)throw new s.HierarchyRequestError(\"Cannot insert a text node as a child of a document node. Node is \"+t.nodeName+\".\");if(t._nodeType===u.NodeType.DocumentType&&r._nodeType!==u.NodeType.Document)throw new s.HierarchyRequestError(\"A document type node can only be inserted under a document node. Parent node is \"+r.nodeName+\".\");if(r._nodeType===u.NodeType.Document)if(t._nodeType===u.NodeType.DocumentFragment){var v=0;try{for(var g=n(t._children),b=g.next();!b.done;b=g.next()){var E=b.value;if(E._nodeType===u.NodeType.Element)v++;else if(E._nodeType===u.NodeType.Text)throw new s.HierarchyRequestError(\"Cannot insert text a node as a child of a document node. Node is \"+E.nodeName+\".\")}}catch(e){i={error:e}}finally{try{b&&!b.done&&(o=g.return)&&o.call(g)}finally{if(i)throw i.error}}if(v>1)throw new s.HierarchyRequestError(\"A document node can only have one document element node. Document fragment to be inserted has \"+v+\" element nodes.\");if(1===v){try{for(var D=n(r._children),S=D.next();!S.done;S=D.next()){if((F=S.value)._nodeType===u.NodeType.Element&&F!==e)throw new s.HierarchyRequestError(\"The document node already has a document element node.\")}}catch(e){l={error:e}}finally{try{S&&!S.done&&(c=D.return)&&c.call(D)}finally{if(l)throw l.error}}for(var C=e._nextSibling;C;){if(C._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Cannot insert an element node before a document type node.\");C=C._nextSibling}}}else if(t._nodeType===u.NodeType.Element){try{for(var A=n(r._children),N=A.next();!N.done;N=A.next()){if((F=N.value)._nodeType===u.NodeType.Element&&F!==e)throw new s.HierarchyRequestError(\"Document already has a document element node. Node is \"+t.nodeName+\".\")}}catch(e){h={error:e}}finally{try{N&&!N.done&&(p=A.return)&&p.call(A)}finally{if(h)throw h.error}}for(C=e._nextSibling;C;){if(C._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError(\"Cannot insert an element node before a document type node. Node is \"+t.nodeName+\".\");C=C._nextSibling}}else if(t._nodeType===u.NodeType.DocumentType){try{for(var T=n(r._children),O=T.next();!O.done;O=T.next()){var F;if((F=O.value)._nodeType===u.NodeType.DocumentType&&F!==e)throw new s.HierarchyRequestError(\"Document already has a document type node. Node is \"+t.nodeName+\".\")}}catch(e){d={error:e}}finally{try{O&&!O.done&&(m=T.return)&&m.call(T)}finally{if(d)throw d.error}}for(var k=e._previousSibling;k;){if(k._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError(\"Cannot insert a document type node before an element node. Node is \"+t.nodeName+\".\");k=k._previousSibling}}var P=e._nextSibling;P===t&&(P=t._nextSibling);var I=e._previousSibling;_.document_adopt(t,r._nodeDocument);var L=[];null!==e._parent&&(L.push(e),w(e,e._parent,!0));var M=[];return t._nodeType===u.NodeType.DocumentFragment?M=Array.from(t._children):M.push(t),x(t,r,P,!0),a.dom.features.mutationObservers&&y.observer_queueTreeMutationRecord(r,M,L,I,P),e},t.mutation_replaceAll=function(e,t){var r,i;null!==e&&_.document_adopt(e,t._nodeDocument);var o=Array.from(t._children),s=[];e&&e._nodeType===u.NodeType.DocumentFragment?s=Array.from(e._children):null!==e&&s.push(e);try{for(var l=n(o),c=l.next();!c.done;c=l.next()){w(c.value,t,!0)}}catch(e){r={error:e}}finally{try{c&&!c.done&&(i=l.return)&&i.call(l)}finally{if(r)throw r.error}}null!==e&&x(e,t,null,!0),a.dom.features.mutationObservers&&y.observer_queueTreeMutationRecord(t,s,o,null,null)},t.mutation_preRemove=function(e,t){if(e._parent!==t)throw new s.NotFoundError(\"The child node cannot be found under parent node. Child node is \"+e.nodeName+\", parent node is \"+t.nodeName+\".\");return w(e,t),e},t.mutation_remove=w},function(e,t,r){\"use strict\";function n(e){return null==e}e.exports.isNothing=n,e.exports.isObject=function(e){return\"object\"==typeof e&&null!==e},e.exports.toArray=function(e){return Array.isArray(e)?e:n(e)?[]:[e]},e.exports.repeat=function(e,t){var r,n=\"\";for(r=0;r<t;r+=1)n+=e;return n},e.exports.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},e.exports.extend=function(e,t){var r,n,i,o;if(t)for(r=0,n=(o=Object.keys(t)).length;r<n;r+=1)e[i=o[r]]=t[i];return e}},function(e,t,r){\"use strict\";var n=r(38),i=r(53),o=r(10);function a(e,t,r){var n=[];return e.include.forEach((function(e){r=a(e,t,r)})),e[t].forEach((function(e){r.forEach((function(t,r){t.tag===e.tag&&t.kind===e.kind&&n.push(r)})),r.push(e)})),r.filter((function(e,t){return-1===n.indexOf(t)}))}function s(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach((function(e){if(e.loadKind&&\"scalar\"!==e.loadKind)throw new i(\"There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.\")})),this.compiledImplicit=a(this,\"implicit\",[]),this.compiledExplicit=a(this,\"explicit\",[]),this.compiledTypeMap=function(){var e,t,r={scalar:{},sequence:{},mapping:{},fallback:{}};function n(e){r[e.kind][e.tag]=r.fallback[e.tag]=e}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(n);return r}(this.compiledImplicit,this.compiledExplicit)}s.DEFAULT=null,s.create=function(){var e,t;switch(arguments.length){case 1:e=s.DEFAULT,t=arguments[0];break;case 2:e=arguments[0],t=arguments[1];break;default:throw new i(\"Wrong number of arguments for Schema.create function\")}if(e=n.toArray(e),t=n.toArray(t),!e.every((function(e){return e instanceof s})))throw new i(\"Specified list of super schemas (or a single Schema object) contains a non-Schema object.\");if(!t.every((function(e){return e instanceof o})))throw new i(\"Specified list of YAML types (or a single Type object) contains a non-Type object.\");return new s({include:e,explicit:t})},e.exports=s},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){var n=r(8),i=r(42),o=\"\".split;e.exports=n((function(){return!Object(\"z\").propertyIsEnumerable(0)}))?function(e){return\"String\"==i(e)?o.call(e,\"\"):Object(e)}:Object},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t,r){var n,i,o,a=r(186),s=r(11),u=r(13),l=r(21),c=r(14),h=r(57),p=r(45),f=s.WeakMap;if(a){var d=new f,m=d.get,y=d.has,v=d.set;n=function(e,t){return v.call(d,e,t),t},i=function(e){return m.call(d,e)||{}},o=function(e){return y.call(d,e)}}else{var _=h(\"state\");p[_]=!0,n=function(e,t){return l(e,_,t),t},i=function(e){return c(e,_)?e[_]:{}},o=function(e){return c(e,_)}}e.exports={set:n,get:i,has:o,enforce:function(e){return o(e)?i(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=i(t)).type!==e)throw TypeError(\"Incompatible receiver, \"+e+\" required\");return r}}}},function(e,t){e.exports=!1},function(e,t){e.exports={}},function(e,t,r){var n=r(120),i=r(11),o=function(e){return\"function\"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(n[e])||o(i[e]):n[e]&&n[e][t]||i[e]&&i[e][t]}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t,r){\"use strict\";var n=r(8);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){throw 1},1)}))}},function(e,t){e.exports={}},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(220),r(64),r(19),r(65),r(20),r(68),r(66),r(92),r(144),r(22),r(94),r(23);var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(2),s=r(69),u=r(95),l=r(7),c=r(0),h=function(){function e(e){this.level=0,this._builderOptions=e}return e.prototype.declaration=function(e,t,r){},e.prototype.docType=function(e,t,r){},e.prototype.comment=function(e){},e.prototype.text=function(e){},e.prototype.instruction=function(e,t){},e.prototype.cdata=function(e){},e.prototype.openTagBegin=function(e){},e.prototype.openTagEnd=function(e,t,r){},e.prototype.closeTag=function(e){},e.prototype.attributes=function(e){var t,r;try{for(var i=n(e),o=i.next();!o.done;o=i.next()){var a=o.value;this.attribute(null===a[1]?a[2]:a[1]+\":\"+a[2],a[3])}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}},e.prototype.attribute=function(e,t){},e.prototype.beginElement=function(e){},e.prototype.endElement=function(e){},e.prototype.serializeNode=function(e,t){var r=void 0!==e._nodeDocument&&e._nodeDocument._hasNamespaces;if(this.level=0,this.currentNode=e,r){var n=new u.NamespacePrefixMap;n.set(\"xml\",l.namespace.XML);this._serializeNodeNS(e,null,n,{value:1},t)}else this._serializeNode(e,t)},e.prototype._serializeNodeNS=function(e,t,r,n,i){switch(this.currentNode=e,e.nodeType){case a.NodeType.Element:this._serializeElementNS(e,t,r,n,i);break;case a.NodeType.Document:this._serializeDocumentNS(e,t,r,n,i);break;case a.NodeType.Comment:this._serializeComment(e,i);break;case a.NodeType.Text:this._serializeText(e,i);break;case a.NodeType.DocumentFragment:this._serializeDocumentFragmentNS(e,t,r,n,i);break;case a.NodeType.DocumentType:this._serializeDocumentType(e,i);break;case a.NodeType.ProcessingInstruction:this._serializeProcessingInstruction(e,i);break;case a.NodeType.CData:this._serializeCData(e,i);break;default:throw new Error(\"Unknown node type: \"+e.nodeType)}},e.prototype._serializeNode=function(e,t){switch(this.currentNode=e,e.nodeType){case a.NodeType.Element:this._serializeElement(e,t);break;case a.NodeType.Document:this._serializeDocument(e,t);break;case a.NodeType.Comment:this._serializeComment(e,t);break;case a.NodeType.Text:this._serializeText(e,t);break;case a.NodeType.DocumentFragment:this._serializeDocumentFragment(e,t);break;case a.NodeType.DocumentType:this._serializeDocumentType(e,t);break;case a.NodeType.ProcessingInstruction:this._serializeProcessingInstruction(e,t);break;case a.NodeType.CData:this._serializeCData(e,t);break;default:throw new Error(\"Unknown node type: \"+e.nodeType)}},e.prototype._serializeElementNS=function(t,r,i,a,s){var u,h,p=[];if(s&&(-1!==t.localName.indexOf(\":\")||!c.xml_isName(t.localName)))throw new Error(\"Node local name contains invalid characters (well-formed required).\");var f=\"\",d=!1,m=!1,y=i.copy(),v={},_=this._recordNamespaceInformation(t,y,v),g=r,b=t.namespaceURI;if(g===b)null!==_&&(m=!0),f=b===l.namespace.XML?\"xml:\"+t.localName:t.localName,this.beginElement(f),this.openTagBegin(f);else{var x=t.prefix,w=null;if(null===x&&b===_||(w=y.get(x,b)),\"xmlns\"===x){if(s)throw new Error(\"An element cannot have the 'xmlns' prefix (well-formed required).\");w=x}null!==w?(f=w+\":\"+t.localName,null!==_&&_!==l.namespace.XML&&(g=_||null),this.beginElement(f),this.openTagBegin(f)):null!==x?(x in v&&(x=this._generatePrefix(b,y,a)),y.set(x,b),f+=x+\":\"+t.localName,this.beginElement(f),this.openTagBegin(f),p.push([null,\"xmlns\",x,this._serializeAttributeValue(b,s)]),null!==_&&(g=_||null)):null===_||null!==_&&_!==b?(m=!0,f+=t.localName,g=b,this.beginElement(f),this.openTagBegin(f),p.push([null,null,\"xmlns\",this._serializeAttributeValue(b,s)])):(f+=t.localName,g=b,this.beginElement(f),this.openTagBegin(f))}p.push.apply(p,o(this._serializeAttributesNS(t,y,a,v,m,s))),this.attributes(p);var E=b===l.namespace.HTML;if(E&&0===t.childNodes.length&&e._VoidElementNames.has(t.localName)?(this.openTagEnd(f,!0,!0),this.endElement(f),d=!0):E||0!==t.childNodes.length?this.openTagEnd(f,!1,!1):(this.openTagEnd(f,!0,!1),this.endElement(f),d=!0),!d){if(E&&\"template\"===t.localName);else try{for(var D=n(t.childNodes),S=D.next();!S.done;S=D.next()){var C=S.value;this.level++,this._serializeNodeNS(C,g,y,a,s),this.level--}}catch(e){u={error:e}}finally{try{S&&!S.done&&(h=D.return)&&h.call(D)}finally{if(u)throw u.error}}this.closeTag(f),this.endElement(f)}},e.prototype._serializeElement=function(e,t){var r,i;if(t&&(-1!==e.localName.indexOf(\":\")||!c.xml_isName(e.localName)))throw new Error(\"Node local name contains invalid characters (well-formed required).\");var o=!1,a=e.localName;this.beginElement(a),this.openTagBegin(a);var s=this._serializeAttributes(e,t);if(this.attributes(s),e.hasChildNodes()?this.openTagEnd(a,!1,!1):(this.openTagEnd(a,!0,!1),this.endElement(a),o=!0),!o){try{for(var u=n(e._children),l=u.next();!l.done;l=u.next()){var h=l.value;this.level++,this._serializeNode(h,t),this.level--}}catch(e){r={error:e}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}this.closeTag(a),this.endElement(a)}},e.prototype._serializeDocumentNS=function(e,t,r,i,o){var a,s;if(o&&null===e.documentElement)throw new Error(\"Missing document element (well-formed required).\");try{for(var u=n(e.childNodes),l=u.next();!l.done;l=u.next()){var c=l.value;this._serializeNodeNS(c,t,r,i,o)}}catch(e){a={error:e}}finally{try{l&&!l.done&&(s=u.return)&&s.call(u)}finally{if(a)throw a.error}}},e.prototype._serializeDocument=function(e,t){var r,i;if(t&&null===e.documentElement)throw new Error(\"Missing document element (well-formed required).\");try{for(var o=n(e._children),a=o.next();!a.done;a=o.next()){var s=a.value;this._serializeNode(s,t)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}},e.prototype._serializeComment=function(e,t){if(t&&(!c.xml_isLegalChar(e.data)||-1!==e.data.indexOf(\"--\")||e.data.endsWith(\"-\")))throw new Error(\"Comment data contains invalid characters (well-formed required).\");this.comment(e.data)},e.prototype._serializeText=function(e,t){if(t&&!c.xml_isLegalChar(e.data))throw new Error(\"Text data contains invalid characters (well-formed required).\");var r=e.data.replace(/(?!&([^&;]*);)&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");this.text(r)},e.prototype._serializeDocumentFragmentNS=function(e,t,r,i,o){var a,s;try{for(var u=n(e.childNodes),l=u.next();!l.done;l=u.next()){var c=l.value;this._serializeNodeNS(c,t,r,i,o)}}catch(e){a={error:e}}finally{try{l&&!l.done&&(s=u.return)&&s.call(u)}finally{if(a)throw a.error}}},e.prototype._serializeDocumentFragment=function(e,t){var r,i;try{for(var o=n(e._children),a=o.next();!a.done;a=o.next()){var s=a.value;this._serializeNode(s,t)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}},e.prototype._serializeDocumentType=function(e,t){if(t&&!c.xml_isPubidChar(e.publicId))throw new Error(\"DocType public identifier does not match PubidChar construct (well-formed required).\");if(t&&(!c.xml_isLegalChar(e.systemId)||-1!==e.systemId.indexOf('\"')&&-1!==e.systemId.indexOf(\"'\")))throw new Error(\"DocType system identifier contains invalid characters (well-formed required).\");this.docType(e.name,e.publicId,e.systemId)},e.prototype._serializeProcessingInstruction=function(e,t){if(t&&(-1!==e.target.indexOf(\":\")||/^xml$/i.test(e.target)))throw new Error(\"Processing instruction target contains invalid characters (well-formed required).\");if(t&&(!c.xml_isLegalChar(e.data)||-1!==e.data.indexOf(\"?>\")))throw new Error(\"Processing instruction data contains invalid characters (well-formed required).\");this.instruction(e.target,e.data)},e.prototype._serializeCData=function(e,t){if(t&&-1!==e.data.indexOf(\"]]>\"))throw new Error(\"CDATA contains invalid characters (well-formed required).\");this.cdata(e.data)},e.prototype._serializeAttributesNS=function(e,t,r,i,o,a){var u,h,p=[],f=a?new s.LocalNameSet:void 0;try{for(var d=n(e.attributes),m=d.next();!m.done;m=d.next()){var y=m.value;if(a||o||null!==y.namespaceURI){if(a&&f&&f.has(y.namespaceURI,y.localName))throw new Error(\"Element contains duplicate attributes (well-formed required).\");a&&f&&f.set(y.namespaceURI,y.localName);var v=y.namespaceURI,_=null;if(null!==v)if(_=t.get(y.prefix,v),v===l.namespace.XMLNS){if(y.value===l.namespace.XML||null===y.prefix&&o||null!==y.prefix&&(!(y.localName in i)||i[y.localName]!==y.value)&&t.has(y.localName,y.value))continue;if(a&&y.value===l.namespace.XMLNS)throw new Error(\"XMLNS namespace is reserved (well-formed required).\");if(a&&\"\"===y.value)throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).\");\"xmlns\"===y.prefix&&(_=\"xmlns\")}else null===_&&(_=null===y.prefix||t.hasPrefix(y.prefix)&&!t.has(y.prefix,v)?this._generatePrefix(v,t,r):y.prefix,p.push([null,\"xmlns\",_,this._serializeAttributeValue(v,a)]));if(null!==_&&_,a&&(-1!==y.localName.indexOf(\":\")||!c.xml_isName(y.localName)||\"xmlns\"===y.localName&&null===v))throw new Error(\"Attribute local name contains invalid characters (well-formed required).\");p.push([v,_,y.localName,this._serializeAttributeValue(y.value,a)])}else p.push([null,null,y.localName,this._serializeAttributeValue(y.value,a)])}}catch(e){u={error:e}}finally{try{m&&!m.done&&(h=d.return)&&h.call(d)}finally{if(u)throw u.error}}return p},e.prototype._serializeAttributes=function(e,t){var r,i,o=[],a=t?{}:void 0;try{for(var s=n(e.attributes),u=s.next();!u.done;u=s.next()){var l=u.value;if(t){if(t&&a&&l.localName in a)throw new Error(\"Element contains duplicate attributes (well-formed required).\");if(t&&a&&(a[l.localName]=!0),t&&(-1!==l.localName.indexOf(\":\")||!c.xml_isName(l.localName)))throw new Error(\"Attribute local name contains invalid characters (well-formed required).\");o.push([null,null,l.localName,this._serializeAttributeValue(l.value,t)])}else o.push([null,null,l.localName,this._serializeAttributeValue(l.value,t)])}}catch(e){r={error:e}}finally{try{u&&!u.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}return o},e.prototype._recordNamespaceInformation=function(e,t,r){var i,o,a=null;try{for(var s=n(e.attributes),u=s.next();!u.done;u=s.next()){var c=u.value,h=c.namespaceURI,p=c.prefix;if(h===l.namespace.XMLNS){if(null===p){a=c.value;continue}var f=c.localName,d=c.value;if(d===l.namespace.XML)continue;if(\"\"===d&&(d=null),t.has(f,d))continue;t.set(f,d),r[f]=d||\"\"}}}catch(e){i={error:e}}finally{try{u&&!u.done&&(o=s.return)&&o.call(s)}finally{if(i)throw i.error}}return a},e.prototype._generatePrefix=function(e,t,r){var n=\"ns\"+r.value.toString();return r.value++,t.set(n,e),n},e.prototype._serializeAttributeValue=function(e,t){if(t&&null!==e&&!c.xml_isLegalChar(e))throw new Error(\"Invalid characters in attribute value.\");return null===e?\"\":e.replace(/(?!&([^&;]*);)&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\")},e._VoidElementNames=new Set([\"area\",\"base\",\"basefont\",\"bgsound\",\"br\",\"col\",\"embed\",\"frame\",\"hr\",\"img\",\"input\",\"keygen\",\"link\",\"menuitem\",\"meta\",\"param\",\"source\",\"track\",\"wbr\"]),e}();t.BaseWriter=h},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(6),a=r(3),s=r(7),u=r(29),l=r(17),c=r(97);function h(){var e=o.dom.window;e._mutationObserverMicrotaskQueued||(e._mutationObserverMicrotaskQueued=!0,Promise.resolve().then((function(){p()})))}function p(){var e,t,r,i,u=o.dom.window;u._mutationObserverMicrotaskQueued=!1;var l=s.set.clone(u._mutationObservers),h=s.set.clone(u._signalSlots);s.set.empty(u._signalSlots);var p=function(e){var t=s.list.clone(e._recordQueue);s.list.empty(e._recordQueue);for(var r=0;r<e._nodeList.length;r++){var n=e._nodeList[r];s.list.remove(n._registeredObserverList,(function(t){return a.Guard.isTransientRegisteredObserver(t)&&t.observer===e}))}if(!s.list.isEmpty(t))try{e._callback.call(e,t,e)}catch(e){}};try{for(var f=n(l),d=f.next();!d.done;d=f.next()){p(d.value)}}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}if(o.dom.features.slots)try{for(var m=n(h),y=m.next();!y.done;y=m.next()){var v=y.value;c.event_fireAnEvent(\"slotchange\",v,void 0,{bubbles:!0})}}catch(e){r={error:e}}finally{try{y&&!y.done&&(i=m.return)&&i.call(m)}finally{if(r)throw r.error}}}function f(e,t,r,o,a,s,c,p,f){for(var d,m,y=new Map,v=l.tree_getFirstAncestorNode(t,!0);null!==v;){for(var _=0;_<v._registeredObserverList.length;_++){var g=v._registeredObserverList[_],b=g.options;if((v===t||b.subtree)&&((\"attributes\"!==e||b.attributes)&&(\"attributes\"!==e||!b.attributeFilter||b.attributeFilter.indexOf(r||\"\")&&null===o)&&(\"characterData\"!==e||b.characterData)&&(\"childList\"!==e||b.childList))){var x=g.observer;y.has(x)||y.set(x,null),(\"attributes\"===e&&b.attributeOldValue||\"characterData\"===e&&b.characterDataOldValue)&&y.set(x,a)}}v=l.tree_getNextAncestorNode(t,v,!0)}try{for(var w=n(y),E=w.next();!E.done;E=w.next()){var D=i(E.value,2),S=D[0],C=D[1],A=u.create_mutationRecord(e,t,u.create_nodeListStatic(t,s),u.create_nodeListStatic(t,c),p,f,r,o,C);S._recordQueue.push(A)}}catch(e){d={error:e}}finally{try{E&&!E.done&&(m=w.return)&&m.call(w)}finally{if(d)throw d.error}}h()}t.observer_queueAMutationObserverMicrotask=h,t.observer_notifyMutationObservers=p,t.observer_queueMutationRecord=f,t.observer_queueTreeMutationRecord=function(e,t,r,n,i){f(\"childList\",e,null,null,null,t,r,n,i)},t.observer_queueAttributeMutationRecord=function(e,t,r,n){f(\"attributes\",e,t,r,n,[],[],null,null)}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(6),i=r(7),o=r(3),a=r(9),s=r(29),u=r(73),l=r(51),c=r(30),h=r(37),p=r(106);function f(e,t,r){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(t,e._localName,e._namespace,e._value),n.dom.features.customElements&&o.Guard.isCustomElementNode(t)&&u.customElement_enqueueACustomElementCallbackReaction(t,\"attributeChangedCallback\",[e._localName,e._value,r,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(t,e._localName,e._value,r,e._namespace),e._value=r}function d(e,t){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(t,e._localName,e._namespace,null),n.dom.features.customElements&&o.Guard.isCustomElementNode(t)&&u.customElement_enqueueACustomElementCallbackReaction(t,\"attributeChangedCallback\",[e._localName,null,e._value,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(t,e._localName,null,e._value,e._namespace),t._attributeList._asArray().push(e),e._element=t,t._nodeDocument._hasNamespaces||null===e._namespace&&null===e._namespacePrefix&&\"xmlns\"!==e._localName||(t._nodeDocument._hasNamespaces=!0)}function m(e,t){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(t,e._localName,e._namespace,e._value),n.dom.features.customElements&&o.Guard.isCustomElementNode(t)&&u.customElement_enqueueACustomElementCallbackReaction(t,\"attributeChangedCallback\",[e._localName,e._value,null,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(t,e._localName,e._value,null,e._namespace);var r=t._attributeList._asArray().indexOf(e);t._attributeList._asArray().splice(r,1),e._element=null}function y(e,t,r){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(r,e._localName,e._namespace,e._value),n.dom.features.customElements&&o.Guard.isCustomElementNode(r)&&u.customElement_enqueueACustomElementCallbackReaction(r,\"attributeChangedCallback\",[e._localName,e._value,t._value,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(r,e._localName,e._value,t._value,e._namespace);var i=r._attributeList._asArray().indexOf(e);-1!==i&&(r._attributeList._asArray()[i]=t),e._element=null,t._element=r,r._nodeDocument._hasNamespaces||null===t._namespace&&null===t._namespacePrefix&&\"xmlns\"!==t._localName||(r._nodeDocument._hasNamespaces=!0)}function v(e,t){return t._namespace===i.namespace.HTML&&\"html\"===t._nodeDocument._type&&(e=e.toLowerCase()),t._attributeList._asArray().find((function(t){return t._qualifiedName===e}))||null}function _(e,t,r){var n=e||null;return r._attributeList._asArray().find((function(e){return e._namespace===n&&e._localName===t}))||null}t.element_has=function(e,t){return-1!==t._attributeList._asArray().indexOf(e)},t.element_change=f,t.element_append=d,t.element_remove=m,t.element_replace=y,t.element_getAnAttributeByName=v,t.element_getAnAttributeByNamespaceAndLocalName=_,t.element_getAnAttributeValue=function(e,t,r){void 0===r&&(r=\"\");var n=_(r,t,e);return null===n?\"\":n._value},t.element_setAnAttribute=function(e,t){if(null!==e._element&&e._element!==t)throw new a.InUseAttributeError(\"This attribute already exists in the document: \"+e._qualifiedName+\" as a child of \"+e._element._qualifiedName+\".\");var r=_(e._namespace||\"\",e._localName,t);return r===e?e:(null!==r?y(r,e,t):d(e,t),r)},t.element_setAnAttributeValue=function(e,t,r,n,i){void 0===n&&(n=null),void 0===i&&(i=null);var o=_(i||\"\",t,e);if(null===o){var a=s.create_attr(e._nodeDocument,t);return a._namespace=i,a._namespacePrefix=n,a._value=r,void d(a,e)}f(o,e,r)},t.element_removeAnAttributeByName=function(e,t){var r=v(e,t);return null!==r&&m(r,t),r},t.element_removeAnAttributeByNamespaceAndLocalName=function(e,t,r){var n=_(e,t,r);return null!==n&&m(n,r),n},t.element_createAnElement=function(e,t,r,o,l,c){void 0===o&&(o=null),void 0===l&&(l=null),void 0===c&&(c=!1);var h=null;if(!n.dom.features.customElements)return(h=s.create_element(e,t,r,o))._customElementState=\"uncustomized\",h._customElementDefinition=null,h._is=l,h;var f=u.customElement_lookUpACustomElementDefinition(e,r,t,l);if(null!==f&&f.name!==f.localName)(h=new(p.document_elementInterface(t,i.namespace.HTML)))._localName=t,h._namespace=i.namespace.HTML,h._namespacePrefix=o,h._customElementState=\"undefined\",h._customElementDefinition=null,h._is=l,h._nodeDocument=e,c?u.customElement_upgrade(f,h):u.customElement_enqueueACustomElementUpgradeReaction(h,f);else if(null!==f)if(c)try{var d=new(0,f.constructor);if(console.assert(void 0!==d._customElementState),console.assert(void 0!==d._customElementDefinition),console.assert(d._namespace===i.namespace.HTML),0!==d._attributeList.length)throw new a.NotSupportedError(\"Custom element already has attributes.\");if(0!==d._children.size)throw new a.NotSupportedError(\"Custom element already has child nodes.\");if(null!==d._parent)throw new a.NotSupportedError(\"Custom element already has a parent node.\");if(d._nodeDocument!==e)throw new a.NotSupportedError(\"Custom element is already in a document.\");if(d._localName!==t)throw new a.NotSupportedError(\"Custom element has a different local name.\");d._namespacePrefix=o,d._is=null}catch(r){(h=s.create_htmlUnknownElement(e,t,i.namespace.HTML,o))._customElementState=\"failed\",h._customElementDefinition=null,h._is=null}else(h=s.create_htmlElement(e,t,i.namespace.HTML,o))._customElementState=\"undefined\",h._customElementDefinition=null,h._is=null,u.customElement_enqueueACustomElementUpgradeReaction(h,f);else{(h=new(p.document_elementInterface(t,r)))._localName=t,h._namespace=r,h._namespacePrefix=o,h._customElementState=\"uncustomized\",h._customElementDefinition=null,h._is=l,h._nodeDocument=e,r!==i.namespace.HTML||null===l&&!u.customElement_isValidCustomElementName(t)||(h._customElementState=\"undefined\")}if(null===h)throw new Error(\"Unable to create element.\");return h},t.element_insertAdjacent=function(e,t,r){switch(t.toLowerCase()){case\"beforebegin\":return null===e._parent?null:h.mutation_preInsert(r,e._parent,e);case\"afterbegin\":return h.mutation_preInsert(r,e,e._firstChild);case\"beforeend\":return h.mutation_preInsert(r,e,null);case\"afterend\":return null===e._parent?null:h.mutation_preInsert(r,e._parent,e._nextSibling);default:throw new a.SyntaxError('Invalid \\'where\\' argument. \"beforebegin\", \"afterbegin\", \"beforeend\" or \"afterend\" expected')}}},function(e,t,r){\"use strict\";function n(e,t){Error.call(this),this.name=\"YAMLException\",this.reason=e,this.mark=t,this.message=(this.reason||\"(unknown reason)\")+(this.mark?\" \"+this.mark.toString():\"\"),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||\"\"}n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n.prototype.toString=function(e){var t=this.name+\": \";return t+=this.reason||\"(unknown reason)\",!e&&this.mark&&(t+=\" \"+this.mark.toString()),t},e.exports=n},function(e,t,r){\"use strict\";var n=r(39);e.exports=new n({include:[r(181)],implicit:[r(293),r(294)],explicit:[r(295),r(296),r(297),r(298)]})},function(e,t,r){var n=r(16),i=r(79),o=r(40),a=r(24),s=r(56),u=r(14),l=r(115),c=Object.getOwnPropertyDescriptor;t.f=n?c:function(e,t){if(e=a(e),t=s(t,!0),l)try{return c(e,t)}catch(e){}if(u(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,i;if(t&&\"function\"==typeof(r=e.toString)&&!n(i=r.call(e)))return i;if(\"function\"==typeof(r=e.valueOf)&&!n(i=r.call(e)))return i;if(!t&&\"function\"==typeof(r=e.toString)&&!n(i=r.call(e)))return i;throw TypeError(\"Can't convert object to primitive value\")}},function(e,t,r){var n=r(81),i=r(58),o=n(\"keys\");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return\"Symbol(\"+String(void 0===e?\"\":e)+\")_\"+(++r+n).toString(36)}},function(e,t,r){var n=r(42);e.exports=Array.isArray||function(e){return\"Array\"==n(e)}},function(e,t,r){var n,i=r(18),o=r(188),a=r(84),s=r(45),u=r(189),l=r(116),c=r(57),h=c(\"IE_PROTO\"),p=function(){},f=function(e){return\"<script>\"+e+\"<\\/script>\"},d=function(){try{n=document.domain&&new ActiveXObject(\"htmlfile\")}catch(e){}var e,t;d=n?function(e){e.write(f(\"\")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=l(\"iframe\")).style.display=\"none\",u.appendChild(t),t.src=String(\"javascript:\"),(e=t.contentWindow.document).open(),e.write(f(\"document.F=Object\")),e.close(),e.F);for(var r=a.length;r--;)delete d.prototype[a[r]];return d()};s[h]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(p.prototype=i(e),r=new p,p.prototype=null,r[h]=e):r=d(),void 0===t?r:o(r,t)}},function(e,t,r){var n=r(121),i=r(84);e.exports=Object.keys||function(e){return n(e,i)}},function(e,t,r){var n=r(15).f,i=r(14),o=r(5)(\"toStringTag\");e.exports=function(e,t,r){e&&!i(e=r?e:e.prototype,o)&&n(e,o,{configurable:!0,value:t})}},function(e,t,r){var n=r(8),i=r(5),o=r(129),a=i(\"species\");e.exports=function(e){return o>=51||!n((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,r){\"use strict\";var n=r(4),i=r(122).indexOf,o=r(48),a=r(28),s=[].indexOf,u=!!s&&1/[1].indexOf(1,-0)<0,l=o(\"indexOf\"),c=a(\"indexOf\",{ACCESSORS:!0,1:0});n({target:\"Array\",proto:!0,forced:u||!l||!c},{indexOf:function(e){return u?s.apply(this,arguments)||0:i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){var n=r(16),i=r(15).f,o=Function.prototype,a=o.toString,s=/^\\s*function ([^ (]*)/;n&&!(\"name\"in o)&&i(o,\"name\",{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(e){return\"\"}}})},function(e,t,r){\"use strict\";var n=r(25),i=r(18),o=r(8),a=r(136),s=RegExp.prototype,u=s.toString,l=o((function(){return\"/a/b\"!=u.call({source:\"a\",flags:\"b\"})})),c=\"toString\"!=u.name;(l||c)&&n(RegExp.prototype,\"toString\",(function(){var e=i(this),t=String(e.source),r=e.flags;return\"/\"+t+\"/\"+String(void 0===r&&e instanceof RegExp&&!(\"flags\"in s)?a.call(e):r)}),{unsafe:!0})},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(19),r(138),r(20),r(66),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(1),s=r(2),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n._writerOptions=a.applyDefaults(r,{format:\"object\",wellFormed:!1,group:!1,verbose:!1}),n}return i(t,e),t.prototype.serialize=function(e){return this._currentList=[],this._currentIndex=0,this._listRegister=[this._currentList],this.serializeNode(e,this._writerOptions.wellFormed),this._process(this._currentList,this._writerOptions)},t.prototype._process=function(e,t){var r,n,i,o,u,l,c;if(0===e.length)return{};for(var h={},p=!1,f=0,d=0,m=0,y=0,v=0;v<e.length;v++){var _=e[v];switch(I=Object.keys(_)[0]){case\"@\":continue;case\"#\":f++;break;case\"!\":d++;break;case\"?\":m++;break;case\"$\":y++;break;default:h[I]?p=!0:h[I]=!0}}var g=this._getAttrKey(),b=this._getNodeKey(s.NodeType.Text),x=this._getNodeKey(s.NodeType.Comment),w=this._getNodeKey(s.NodeType.ProcessingInstruction),E=this._getNodeKey(s.NodeType.CData);if(1===f&&1===e.length&&a.isString(e[0][\"#\"]))return e[0][\"#\"];if(p){var D={};for(v=0;v<e.length;v++){_=e[v];if(\"@\"===(I=Object.keys(_)[0])){var S=_[\"@\"];1===(L=Object.keys(S)).length?D[g+L[0]]=S[L[0]]:D[g]=_[\"@\"]}}var C=[];for(v=0;v<e.length;v++){_=e[v];switch(I=Object.keys(_)[0]){case\"@\":break;case\"#\":C.push(((r={})[b]=_[\"#\"],r));break;case\"!\":C.push(((n={})[x]=_[\"!\"],n));break;case\"?\":C.push(((i={})[w]=_[\"?\"],i));break;case\"$\":C.push(((o={})[E]=_.$,o));break;default:if(0!==(B=_)[I].length&&a.isArray(B[I][0])){for(var A=[],N=B[I],T=0;T<N.length;T++)A.push(this._process(N[T],t));C.push(((u={})[I]=A,u))}else t.verbose?C.push(((l={})[I]=[this._process(B[I],t)],l)):C.push(((c={})[I]=this._process(B[I],t),c))}}return D[b]=C,D}var O=1,F=1,k=1,P=1;for(D={},v=0;v<e.length;v++){var I;_=e[v];switch(I=Object.keys(_)[0]){case\"@\":S=_[\"@\"];var L=Object.keys(S);if(t.group&&1!==L.length)D[g]=S;else for(var M in S)D[g+M]=S[M];break;case\"#\":O=this._processSpecItem(_[\"#\"],D,t.group,b,f,O);break;case\"!\":F=this._processSpecItem(_[\"!\"],D,t.group,x,d,F);break;case\"?\":k=this._processSpecItem(_[\"?\"],D,t.group,w,m,k);break;case\"$\":P=this._processSpecItem(_.$,D,t.group,E,y,P);break;default:var B;if(0!==(B=_)[I].length&&a.isArray(B[I][0])){A=[],N=B[I];for(var j=0;j<N.length;j++)A.push(this._process(N[j],t));D[I]=A}else t.verbose?D[I]=[this._process(B[I],t)]:D[I]=this._process(B[I],t)}}return D},t.prototype._processSpecItem=function(e,t,r,n,i,s){var u,l;if(!r&&a.isArray(e)&&i+e.length>2)try{for(var c=o(e),h=c.next();!h.done;h=c.next()){var p=h.value;t[n+(s++).toString()]=p}}catch(e){u={error:e}}finally{try{h&&!h.done&&(l=c.return)&&l.call(c)}finally{if(u)throw u.error}}else t[i>1?n+(s++).toString():n]=e;return s},t.prototype.beginElement=function(e){var t,r,n=[];if(0===this._currentList.length)this._currentList.push(((t={})[e]=n,t));else{var i=this._currentList[this._currentList.length-1];if(this._isElementNode(i,e))if(0!==i[e].length&&a.isArray(i[e][0]))i[e].push(n);else i[e]=[i[e],n];else this._currentList.push(((r={})[e]=n,r))}this._currentIndex++,this._listRegister.length>this._currentIndex?this._listRegister[this._currentIndex]=n:this._listRegister.push(n),this._currentList=n},t.prototype.endElement=function(){this._currentList=this._listRegister[--this._currentIndex]},t.prototype.attribute=function(e,t){var r,n;if(0===this._currentList.length)this._currentList.push({\"@\":(r={},r[e]=t,r)});else{var i=this._currentList[this._currentList.length-1];this._isAttrNode(i)?i[\"@\"][e]=t:this._currentList.push({\"@\":(n={},n[e]=t,n)})}},t.prototype.comment=function(e){if(0===this._currentList.length)this._currentList.push({\"!\":e});else{var t=this._currentList[this._currentList.length-1];this._isCommentNode(t)?a.isArray(t[\"!\"])?t[\"!\"].push(e):t[\"!\"]=[t[\"!\"],e]:this._currentList.push({\"!\":e})}},t.prototype.text=function(e){if(0===this._currentList.length)this._currentList.push({\"#\":e});else{var t=this._currentList[this._currentList.length-1];this._isTextNode(t)?a.isArray(t[\"#\"])?t[\"#\"].push(e):t[\"#\"]=[t[\"#\"],e]:this._currentList.push({\"#\":e})}},t.prototype.instruction=function(e,t){var r=\"\"===t?e:e+\" \"+t;if(0===this._currentList.length)this._currentList.push({\"?\":r});else{var n=this._currentList[this._currentList.length-1];this._isInstructionNode(n)?a.isArray(n[\"?\"])?n[\"?\"].push(r):n[\"?\"]=[n[\"?\"],r]:this._currentList.push({\"?\":r})}},t.prototype.cdata=function(e){if(0===this._currentList.length)this._currentList.push({$:e});else{var t=this._currentList[this._currentList.length-1];this._isCDATANode(t)?a.isArray(t.$)?t.$.push(e):t.$=[t.$,e]:this._currentList.push({$:e})}},t.prototype._isAttrNode=function(e){return\"@\"in e},t.prototype._isTextNode=function(e){return\"#\"in e},t.prototype._isCommentNode=function(e){return\"!\"in e},t.prototype._isInstructionNode=function(e){return\"?\"in e},t.prototype._isCDATANode=function(e){return\"$\"in e},t.prototype._isElementNode=function(e,t){return t in e},t.prototype._getAttrKey=function(){return this._builderOptions.convert.att},t.prototype._getNodeKey=function(e){switch(e){case s.NodeType.Comment:return this._builderOptions.convert.comment;case s.NodeType.Text:return this._builderOptions.convert.text;case s.NodeType.ProcessingInstruction:return this._builderOptions.convert.ins;case s.NodeType.CData:return this._builderOptions.convert.cdata;default:throw new Error(\"Invalid node type.\")}},t}(r(50).BaseWriter);t.ObjectWriter=u},function(e,t,r){\"use strict\";var n=r(4),i=r(93);n({target:\"RegExp\",proto:!0,forced:/./.exec!==i},{exec:i})},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(){this._items={},this._nullItems={}}return e.prototype.set=function(e,t){null===e?this._nullItems[t]=!0:(this._items[e]||(this._items[e]={}),this._items[e][t]=!0)},e.prototype.has=function(e,t){return null===e?!0===this._nullItems[t]:!!this._items[e]&&!0===this._items[e][t]},e}();t.LocalNameSet=n},function(e,t,r){\"use strict\";var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(9),o=r(3),a=r(0),s=function(){function e(){}return Object.defineProperty(e.prototype,\"_eventListenerList\",{get:function(){return this.__eventListenerList||(this.__eventListenerList=[])},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"_eventHandlerMap\",{get:function(){return this.__eventHandlerMap||(this.__eventHandlerMap={})},enumerable:!0,configurable:!0}),e.prototype.addEventListener=function(e,t,r){void 0===r&&(r={passive:!1,once:!1,capture:!1});var i,s=n(a.eventTarget_flattenMore(r),3),u=s[0],l=s[1],c=s[2];t&&(i=o.Guard.isEventListener(t)?t:{handleEvent:t},a.eventTarget_addEventListener(this,{type:e,callback:i,capture:u,passive:l,once:c,removed:!1}))},e.prototype.removeEventListener=function(e,t,r){void 0===r&&(r={capture:!1});var n=a.eventTarget_flatten(r);if(t)for(var i=0;i<this._eventListenerList.length;i++){var s=this._eventListenerList[i];if(s.type===e&&s.capture===n){if(o.Guard.isEventListener(t)&&s.callback===t){a.eventTarget_removeEventListener(this,s,i);break}if(t&&s.callback.handleEvent===t){a.eventTarget_removeEventListener(this,s,i);break}}}},e.prototype.dispatchEvent=function(e){if(e._dispatchFlag||!e._initializedFlag)throw new i.InvalidStateError;return e._isTrusted=!1,a.event_dispatch(e,this)},e.prototype._getTheParent=function(e){return null},e}();t.EventTargetImpl=s},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(34),a=r(0),s=function(e){function t(t){var r=e.call(this)||this;return r._data=t,r}return i(t,e),Object.defineProperty(t.prototype,\"data\",{get:function(){return this._data},set:function(e){a.characterData_replaceData(this,0,this._data.length,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"length\",{get:function(){return this._data.length},enumerable:!0,configurable:!0}),t.prototype.substringData=function(e,t){return a.characterData_substringData(this,e,t)},t.prototype.appendData=function(e){return a.characterData_replaceData(this,this._data.length,0,e)},t.prototype.insertData=function(e,t){a.characterData_replaceData(this,e,0,t)},t.prototype.deleteData=function(e,t){a.characterData_replaceData(this,e,t,\"\")},t.prototype.replaceData=function(e,t,r){a.characterData_replaceData(this,e,t,r)},Object.defineProperty(t.prototype,\"previousElementSibling\",{get:function(){throw new Error(\"Mixin: NonDocumentTypeChildNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"nextElementSibling\",{get:function(){throw new Error(\"Mixin: NonDocumentTypeChildNode not implemented.\")},enumerable:!0,configurable:!0}),t.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.remove=function(){throw new Error(\"Mixin: ChildNode not implemented.\")},t}(o.NodeImpl);t.CharacterDataImpl=s},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(6),s=r(3),u=r(1),l=r(17),c=r(51);function h(e){a.dom.window._signalSlots.add(e),c.observer_queueAMutationObserverMicrotask()}function p(e,t){void 0===t&&(t=!1);var r=s.Cast.asNode(e)._parent;if(null===r)return null;var n=r._shadowRoot||null;if(null===n)return null;if(t&&\"open\"!==n._mode)return null;for(var i=l.tree_getFirstDescendantNode(n,!1,!0,(function(e){return s.Guard.isSlot(e)}));null!==i;){if(i._name===e._name)return i;i=l.tree_getNextDescendantNode(n,i,!1,!0,(function(e){return s.Guard.isSlot(e)}))}return null}function f(e){var t,r,i=[],o=l.tree_rootNode(e);if(!s.Guard.isShadowRoot(o))return i;var a=o._host;try{for(var u=n(a._children),c=u.next();!c.done;c=u.next()){var h=c.value;if(s.Guard.isSlotable(h))p(h)===e&&i.push(h)}}catch(e){t={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(t)throw t.error}}return i}function d(e){var t,r,i=f(e);if(i.length===e._assignedNodes.length){for(var o=!0,a=0;a<i.length;a++)if(i[a]!==e._assignedNodes[a]){o=!1;break}o||h(e)}e._assignedNodes=i;try{for(var s=n(i),u=s.next();!u.done;u=s.next()){u.value._assignedSlot=e}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}}t.shadowTree_signalASlotChange=h,t.shadowTree_isConnected=function(e){return s.Guard.isDocumentNode(l.tree_rootNode(e,!0))},t.shadowTree_isAssigned=function(e){return null!==e._assignedSlot},t.shadowTree_findASlot=p,t.shadowTree_findSlotables=f,t.shadowTree_findFlattenedSlotables=function e(t){var r,i,a,c,h=[],p=l.tree_rootNode(t);if(!s.Guard.isShadowRoot(p))return h;var d=f(t);if(u.isEmpty(d))try{for(var m=n(t._children),y=m.next();!y.done;y=m.next()){var v=y.value;s.Guard.isSlotable(v)&&d.push(v)}}catch(e){r={error:e}}finally{try{y&&!y.done&&(i=m.return)&&i.call(m)}finally{if(r)throw r.error}}try{for(var _=n(d),g=_.next();!g.done;g=_.next()){var b=g.value;if(s.Guard.isSlot(b)&&s.Guard.isShadowRoot(l.tree_rootNode(b))){var x=e(b);h.push.apply(h,o(x))}else h.push(b)}}catch(e){a={error:e}}finally{try{g&&!g.done&&(c=_.return)&&c.call(_)}finally{if(a)throw a.error}}return h},t.shadowTree_assignSlotables=d,t.shadowTree_assignSlotablesForATree=function(e){for(var t=l.tree_getFirstDescendantNode(e,!0,!1,(function(e){return s.Guard.isSlot(e)}));null!==t;)d(t),t=l.tree_getNextDescendantNode(e,t,!0,!1,(function(e){return s.Guard.isSlot(e)}))},t.shadowTree_assignASlot=function(e){var t=p(e);null!==t&&d(t)}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=/[a-z]([\\0-\\t\\x2D\\._a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*-([\\0-\\t\\x2D\\._a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*/,i=new Set([\"annotation-xml\",\"color-profile\",\"font-face\",\"font-face-src\",\"font-face-uri\",\"font-face-format\",\"font-face-name\",\"missing-glyph\"]),o=new Set([\"article\",\"aside\",\"blockquote\",\"body\",\"div\",\"footer\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"header\",\"main\",\"nav\",\"p\",\"section\",\"span\"]),a=new Set([\"area\",\"base\",\"basefont\",\"bgsound\",\"br\",\"col\",\"embed\",\"frame\",\"hr\",\"img\",\"input\",\"keygen\",\"link\",\"menuitem\",\"meta\",\"param\",\"source\",\"track\",\"wbr\"]),s=new Set([\"article\",\"aside\",\"blockquote\",\"body\",\"div\",\"footer\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"header\",\"main\",\"nav\",\"p\",\"section\",\"span\"]);t.customElement_isValidCustomElementName=function(e){return!!n.test(e)&&!i.has(e)},t.customElement_isValidElementName=function(e){return o.has(e)},t.customElement_isVoidElementName=function(e){return a.has(e)},t.customElement_isValidShadowHostName=function(e){return s.has(e)},t.customElement_enqueueACustomElementUpgradeReaction=function(e,t){},t.customElement_enqueueACustomElementCallbackReaction=function(e,t,r){},t.customElement_upgrade=function(e,t){},t.customElement_tryToUpgrade=function(e){},t.customElement_lookUpACustomElementDefinition=function(e,t,r,n){return null}},function(e,t,r){r(4)({target:\"String\",proto:!0},{repeat:r(259)})},function(e,t,r){\"use strict\";r(278),r(68),r(179),r(94),Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(109),i=function(){function e(e){this._builderOptions=e,e.parser&&Object.assign(this,e.parser)}return e.prototype._docType=function(e,t,r,n){return e.dtd({name:t,pubID:r,sysID:n})},e.prototype._comment=function(e,t){return e.com(t)},e.prototype._text=function(e,t){return e.txt(t)},e.prototype._instruction=function(e,t,r){return e.ins(t,r)},e.prototype._cdata=function(e,t){return e.dat(t)},e.prototype._element=function(e,t,r){return void 0===t?e.ele(r):e.ele(t,r)},e.prototype._attribute=function(e,t,r,n){return void 0===t?e.att(r,n):e.att(t,r,n)},e.prototype._sanitize=function(e){return n.sanitizeInput(e,this._builderOptions.invalidCharReplacement)},e.prototype._decodeText=function(t){return null==t?t:t.replace(/&(quot|amp|apos|lt|gt);/g,(function(t,r){return e._entityTable[r]})).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g,(function(e,t,r){return String.fromCodePoint(parseInt(t||r,t?16:10))}))},e.prototype._decodeAttributeValue=function(e){return this._decodeText(e)},e.prototype.parse=function(e,t){return this._parse(e,t)},e.prototype.docType=function(e,t,r,n){return this._docType(e,t,r,n)},e.prototype.comment=function(e,t){return this._comment(e,t)},e.prototype.text=function(e,t){return this._text(e,t)},e.prototype.instruction=function(e,t,r){return this._instruction(e,t,r)},e.prototype.cdata=function(e,t){return this._cdata(e,t)},e.prototype.element=function(e,t,r){return this._element(e,t,r)},e.prototype.attribute=function(e,t,r,n){return this._attribute(e,t,r,n)},e.prototype.sanitize=function(e){return this._sanitize(e)},e._entityTable={lt:\"<\",gt:\">\",amp:\"&\",quot:'\"',apos:\"'\"},e}();t.BaseReader=i},function(e,t,r){\"use strict\";var n=r(39);e.exports=n.DEFAULT=new n({include:[r(54)],explicit:[r(299),r(300),r(301)]})},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(185);t.XMLBuilderImpl=n.XMLBuilderImpl;var i=r(304);t.XMLBuilderCBImpl=i.XMLBuilderCBImpl;var o=r(183);t.builder=o.builder,t.create=o.create,t.fragment=o.fragment,t.convert=o.convert;var a=r(309);t.createCB=a.createCB,t.fragmentCB=a.fragmentCB},function(e,t){var r;r=function(){return this}();try{r=r||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(r=window)}e.exports=r},function(e,t,r){\"use strict\";var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!n.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:n},function(e,t,r){var n=r(11),i=r(21);e.exports=function(e,t){try{i(n,e,t)}catch(r){n[e]=t}return t}},function(e,t,r){var n=r(44),i=r(118);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})(\"versions\",[]).push({version:\"3.6.5\",mode:n?\"pure\":\"global\",copyright:\"© 2020 Denis Pushkarev (zloirock.ru)\"})},function(e,t,r){var n=r(121),i=r(84).concat(\"length\",\"prototype\");t.f=Object.getOwnPropertyNames||function(e){return n(e,i)}},function(e,t,r){var n=r(47),i=Math.max,o=Math.min;e.exports=function(e,t){var r=n(e);return r<0?i(r+t,0):o(r,t)}},function(e,t){e.exports=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"]},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(8);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(e,t,r){var n=r(127);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){\"use strict\";var n=r(4),i=r(195),o=r(132),a=r(133),s=r(62),u=r(21),l=r(25),c=r(5),h=r(44),p=r(49),f=r(131),d=f.IteratorPrototype,m=f.BUGGY_SAFARI_ITERATORS,y=c(\"iterator\"),v=function(){return this};e.exports=function(e,t,r,c,f,_,g){i(r,t,c);var b,x,w,E=function(e){if(e===f&&N)return N;if(!m&&e in C)return C[e];switch(e){case\"keys\":case\"values\":case\"entries\":return function(){return new r(this,e)}}return function(){return new r(this)}},D=t+\" Iterator\",S=!1,C=e.prototype,A=C[y]||C[\"@@iterator\"]||f&&C[f],N=!m&&A||E(f),T=\"Array\"==t&&C.entries||A;if(T&&(b=o(T.call(new e)),d!==Object.prototype&&b.next&&(h||o(b)===d||(a?a(b,d):\"function\"!=typeof b[y]&&u(b,y,v)),s(b,D,!0,!0),h&&(p[D]=v))),\"values\"==f&&A&&\"values\"!==A.name&&(S=!0,N=function(){return A.call(this)}),h&&!g||C[y]===N||u(C,y,N),p[t]=N,f)if(x={values:E(\"values\"),keys:_?N:E(\"keys\"),entries:E(\"entries\")},g)for(w in x)(m||S||!(w in C))&&l(C,w,x[w]);else n({target:t,proto:!0,forced:m||S},x);return x}},function(e,t,r){\"use strict\";var n=r(4),i=r(13),o=r(59),a=r(83),s=r(26),u=r(24),l=r(134),c=r(5),h=r(63),p=r(28),f=h(\"slice\"),d=p(\"slice\",{ACCESSORS:!0,0:0,1:2}),m=c(\"species\"),y=[].slice,v=Math.max;n({target:\"Array\",proto:!0,forced:!f||!d},{slice:function(e,t){var r,n,c,h=u(this),p=s(h.length),f=a(e,p),d=a(void 0===t?p:t,p);if(o(h)&&(\"function\"!=typeof(r=h.constructor)||r!==Array&&!o(r.prototype)?i(r)&&null===(r=r[m])&&(r=void 0):r=void 0,r===Array||void 0===r))return y.call(h,f,d);for(n=new(void 0===r?Array:r)(v(d-f,0)),c=0;f<d;f++,c++)f in h&&l(n,c,h[f]);return n.length=c,n}})},function(e,t,r){var n={};n[r(5)(\"toStringTag\")]=\"z\",e.exports=\"[object z]\"===String(n)},function(e,t,r){\"use strict\";r(19),r(138),r(20),r(92),r(22),r(23),Object.defineProperty(t,\"__esModule\",{value:!0}),t.DefaultBuilderOptions={version:\"1.0\",encoding:void 0,standalone:void 0,keepNullNodes:!1,keepNullAttributes:!1,ignoreConverters:!1,convert:{att:\"@\",ins:\"?\",text:\"#\",cdata:\"$\",comment:\"!\"},defaultNamespace:{ele:void 0,att:void 0},namespaceAlias:{html:\"http://www.w3.org/1999/xhtml\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\",xlink:\"http://www.w3.org/1999/xlink\"},invalidCharReplacement:void 0,parser:void 0},t.XMLBuilderOptionKeys=new Set(Object.keys(t.DefaultBuilderOptions)),t.DefaultXMLBuilderCBOptions={format:\"xml\",wellFormed:!1,prettyPrint:!1,indent:\"  \",newline:\"\\n\",offset:0,width:0,allowEmptyTags:!1,spaceBeforeSlash:!1,keepNullNodes:!1,keepNullAttributes:!1,ignoreConverters:!1,convert:{att:\"@\",ins:\"?\",text:\"#\",cdata:\"$\",comment:\"!\"},defaultNamespace:{ele:void 0,att:void 0},namespaceAlias:{html:\"http://www.w3.org/1999/xhtml\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\",xlink:\"http://www.w3.org/1999/xlink\"}}},function(e,t,r){\"use strict\";var n=r(139),i=r(143);e.exports=n(\"Set\",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),i)},function(e,t,r){\"use strict\";var n,i,o=r(136),a=r(221),s=RegExp.prototype.exec,u=String.prototype.replace,l=s,c=(n=/a/,i=/b*/g,s.call(n,\"a\"),s.call(i,\"a\"),0!==n.lastIndex||0!==i.lastIndex),h=a.UNSUPPORTED_Y||a.BROKEN_CARET,p=void 0!==/()??/.exec(\"\")[1];(c||p||h)&&(l=function(e){var t,r,n,i,a=this,l=h&&a.sticky,f=o.call(a),d=a.source,m=0,y=e;return l&&(-1===(f=f.replace(\"y\",\"\")).indexOf(\"g\")&&(f+=\"g\"),y=String(e).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&\"\\n\"!==e[a.lastIndex-1])&&(d=\"(?: \"+d+\")\",y=\" \"+y,m++),r=new RegExp(\"^(?:\"+d+\")\",f)),p&&(r=new RegExp(\"^\"+d+\"$(?!\\\\s)\",f)),c&&(t=a.lastIndex),n=s.call(l?r:a,y),l?n?(n.input=n.input.slice(m),n[0]=n[0].slice(m),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:c&&n&&(a.lastIndex=a.global?n.index+n[0].length:t),p&&n&&n.length>1&&u.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),e.exports=l},function(e,t,r){\"use strict\";var n=r(225),i=r(18),o=r(27),a=r(26),s=r(47),u=r(35),l=r(226),c=r(227),h=Math.max,p=Math.min,f=Math.floor,d=/\\$([$&'`]|\\d\\d?|<[^>]*>)/g,m=/\\$([$&'`]|\\d\\d?)/g;n(\"replace\",2,(function(e,t,r,n){var y=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,v=n.REPLACE_KEEPS_$0,_=y?\"$\":\"$0\";return[function(r,n){var i=u(this),o=null==r?void 0:r[e];return void 0!==o?o.call(r,i,n):t.call(String(i),r,n)},function(e,n){if(!y&&v||\"string\"==typeof n&&-1===n.indexOf(_)){var o=r(t,e,this,n);if(o.done)return o.value}var u=i(e),f=String(this),d=\"function\"==typeof n;d||(n=String(n));var m=u.global;if(m){var b=u.unicode;u.lastIndex=0}for(var x=[];;){var w=c(u,f);if(null===w)break;if(x.push(w),!m)break;\"\"===String(w[0])&&(u.lastIndex=l(f,a(u.lastIndex),b))}for(var E,D=\"\",S=0,C=0;C<x.length;C++){w=x[C];for(var A=String(w[0]),N=h(p(s(w.index),f.length),0),T=[],O=1;O<w.length;O++)T.push(void 0===(E=w[O])?E:String(E));var F=w.groups;if(d){var k=[A].concat(T,N,f);void 0!==F&&k.push(F);var P=String(n.apply(void 0,k))}else P=g(A,f,N,T,F,n);N>=S&&(D+=f.slice(S,N)+P,S=N+A.length)}return D+f.slice(S)}];function g(e,r,n,i,a,s){var u=n+e.length,l=i.length,c=m;return void 0!==a&&(a=o(a),c=d),t.call(s,c,(function(t,o){var s;switch(o.charAt(0)){case\"$\":return\"$\";case\"&\":return e;case\"`\":return r.slice(0,n);case\"'\":return r.slice(u);case\"<\":s=a[o.slice(1,-1)];break;default:var c=+o;if(0===c)return t;if(c>l){var h=f(c/10);return 0===h?t:h<=l?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):t}s=i[c-1]}return void 0===s?\"\":s}))}}))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(){this._items={},this._nullItems=[]}return e.prototype.copy=function(){var t=new e;for(var r in this._items)t._items[r]=this._items[r].slice(0);return t._nullItems=this._nullItems.slice(0),t},e.prototype.get=function(e,t){var r=null===t?this._nullItems:this._items[t]||null;if(null===r)return null;for(var n=null,i=0;i<r.length;i++)if((n=r[i])===e)return n;return n},e.prototype.has=function(e,t){var r=null===t?this._nullItems:this._items[t]||null;return null!==r&&-1!==r.indexOf(e)},e.prototype.hasPrefix=function(e){if(-1!==this._nullItems.indexOf(e))return!0;for(var t in this._items)if(-1!==this._items[t].indexOf(e))return!0;return!1},e.prototype.set=function(e,t){var r=null===t?this._nullItems:this._items[t]||null;null!==t&&null===r?this._items[t]=[e]:r.push(e)},e}();t.NamespacePrefixMap=n},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Surrogate=/[\\uD800-\\uDFFF]/,t.ScalarValue=/[\\uD800-\\uDFFF]/,t.NonCharacter=/[\\uFDD0-\\uFDEF\\uFFFE\\uFFFF]|[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]/,t.ASCIICodePoint=/[\\u0000-\\u007F]/,t.ASCIITabOrNewLine=/[\\t\\n\\r]/,t.ASCIIWhiteSpace=/[\\t\\n\\f\\r ]/,t.C0Control=/[\\u0000-\\u001F]/,t.C0ControlOrSpace=/[\\u0000-\\u001F ]/,t.Control=/[\\u0000-\\u001F\\u007F-\\u009F]/,t.ASCIIDigit=/[0-9]/,t.ASCIIUpperHexDigit=/[0-9A-F]/,t.ASCIILowerHexDigit=/[0-9a-f]/,t.ASCIIHexDigit=/[0-9A-Fa-f]/,t.ASCIIUpperAlpha=/[A-Z]/,t.ASCIILowerAlpha=/[a-z]/,t.ASCIIAlpha=/[A-Za-z]/,t.ASCIIAlphanumeric=/[0-9A-Za-z]/},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(6),s=r(2),u=r(3),l=r(171),c=r(104),h=r(9),p=r(17),f=r(72),d=r(30);function m(e,t){void 0===t&&(t=void 0),void 0===t&&(t=null);var r=y(e,t,new Date,{});return r._isTrusted=!0,r}function y(e,t,r,n){var i=new e(\"\");return i._initializedFlag=!0,i._timeStamp=r.getTime(),Object.assign(i,n),a.dom.features.steps&&d.dom_runEventConstructingSteps(i),i}function v(e,t,r,i){var o,a,l,c;void 0===r&&(r=!1),void 0===i&&(i={value:!1});var h=!1;e._dispatchFlag=!0;var d=t;if(r){var m=t._associatedDocument;u.Guard.isDocumentNode(m)&&(d=m)}var y=null,v=p.tree_retarget(e._relatedTarget,t);if(t!==v||t===e._relatedTarget){var b=[];try{for(var x=n(e._touchTargetList),w=x.next();!w.done;w=x.next()){var E=w.value;b.push(p.tree_retarget(E,t))}}catch(e){o={error:e}}finally{try{w&&!w.done&&(a=x.return)&&a.call(x)}finally{if(o)throw o.error}}_(e,t,d,v,b,!1);var D=u.Guard.isMouseEvent(e)&&\"click\"===e._type;D&&void 0!==t._activationBehavior&&(y=t);for(var S=u.Guard.isSlotable(t)&&f.shadowTree_isAssigned(t)?t:null,C=!1,A=t._getTheParent(e);null!==A&&u.Guard.isNode(A);){if(null!==S){if(!u.Guard.isSlot(A))throw new Error(\"Parent node of a slotable should be a slot.\");S=null;var N=p.tree_rootNode(A,!0);u.Guard.isShadowRoot(N)&&\"closed\"===N._mode&&(C=!0)}u.Guard.isSlotable(A)&&f.shadowTree_isAssigned(A)&&(S=A),v=p.tree_retarget(e._relatedTarget,A),b=[];try{for(var T=(l=void 0,n(e._touchTargetList)),O=T.next();!O.done;O=T.next()){E=O.value;b.push(p.tree_retarget(E,A))}}catch(e){l={error:e}}finally{try{O&&!O.done&&(c=T.return)&&c.call(T)}finally{if(l)throw l.error}}u.Guard.isWindow(A)||u.Guard.isNode(A)&&u.Guard.isNode(t)&&p.tree_isAncestorOf(p.tree_rootNode(t,!0),A,!0,!0)?(D&&e._bubbles&&null===y&&A._activationBehavior&&(y=A),_(e,A,null,v,b,C)):A===v?A=null:(t=A,D&&null===y&&t._activationBehavior&&(y=t),_(e,A,t,v,b,C)),null!==A&&(A=A._getTheParent(e)),C=!1}for(var F=null,k=e._path,P=k.length-1;P>=0;P--){if(null!==(L=k[P]).shadowAdjustedTarget){F=L;break}}if(null!==F)if(u.Guard.isNode(F.shadowAdjustedTarget)&&u.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget,!0)))h=!0;else if(u.Guard.isNode(F.relatedTarget)&&u.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget,!0)))h=!0;else for(var I=0;I<F.touchTargetList.length;I++){var L=F.touchTargetList[I];if(u.Guard.isNode(L)&&u.Guard.isShadowRoot(p.tree_rootNode(L,!0))){h=!0;break}}null!==y&&void 0!==y._legacyPreActivationBehavior&&y._legacyPreActivationBehavior(e);for(P=k.length-1;P>=0;P--){null!==(L=k[P]).shadowAdjustedTarget?e._eventPhase=s.EventPhase.AtTarget:e._eventPhase=s.EventPhase.Capturing,g(L,e,\"capturing\",i)}for(P=0;P<k.length;P++){if(null!==(L=k[P]).shadowAdjustedTarget)e._eventPhase=s.EventPhase.AtTarget;else{if(!e._bubbles)continue;e._eventPhase=s.EventPhase.Bubbling}g(L,e,\"bubbling\",i)}}return e._eventPhase=s.EventPhase.None,e._currentTarget=null,e._path=[],e._dispatchFlag=!1,e._stopPropagationFlag=!1,e._stopImmediatePropagationFlag=!1,h&&(e._target=null,e._relatedTarget=null,e._touchTargetList=[]),null!==y&&(e._canceledFlag||void 0===y._activationBehavior?void 0!==y._legacyCanceledActivationBehavior&&y._legacyCanceledActivationBehavior(e):y._activationBehavior(e)),!e._canceledFlag}function _(e,t,r,n,i,o){var a=!1;u.Guard.isNode(t)&&u.Guard.isShadowRoot(p.tree_rootNode(t))&&(a=!0);var s=!1;u.Guard.isShadowRoot(t)&&\"closed\"===t._mode&&(s=!0),e._path.push({invocationTarget:t,invocationTargetInShadowTree:a,shadowAdjustedTarget:r,relatedTarget:n,touchTargetList:i,rootOfClosedTree:s,slotInClosedTree:o})}function g(e,t,r,n){void 0===n&&(n={value:!1});for(var i=t._path,a=-1,s=0;s<i.length;s++)if(i[s]===e){a=s;break}if(-1!==a){var u=i[a];(null!==u.shadowAdjustedTarget||a>0&&null!==(u=i[a-1]).shadowAdjustedTarget)&&(t._target=u.shadowAdjustedTarget)}if(t._relatedTarget=e.relatedTarget,t._touchTargetList=e.touchTargetList,!t._stopPropagationFlag){t._currentTarget=e.invocationTarget;var l=t._currentTarget._eventListenerList,c=new(Array.bind.apply(Array,o([void 0],l)));if(!b(t,c,r,e,n)&&t._isTrusted){var h=t._type;\"animationend\"===h?t._type=\"webkitAnimationEnd\":\"animationiteration\"===h?t._type=\"webkitAnimationIteration\":\"animationstart\"===h?t._type=\"webkitAnimationStart\":\"transitionend\"===h&&(t._type=\"webkitTransitionEnd\"),b(t,c,r,e,n),t._type=h}}}function b(e,t,r,n,i){void 0===i&&(i={value:!1});for(var o=!1,a=0;a<t.length;a++){var s=t[a];if(!s.removed){if(e._type!==s.type)continue;if(o=!0,\"capturing\"===r&&!s.capture)continue;if(\"bubbling\"===r&&s.capture)continue;if(s.once&&null!==e._currentTarget){for(var l=e._currentTarget,c=-1,h=0;h<l._eventListenerList.length;h++)if(l._eventListenerList[h]===s){c=h;break}-1!==c&&l._eventListenerList.splice(c,1)}var p=void 0,f=void 0;u.Guard.isWindow(p)&&(f=p._currentEvent,!1===n.invocationTargetInShadowTree&&(p._currentEvent=e)),s.passive&&(e._inPassiveListenerFlag=!0);try{s.callback.handleEvent.call(e._currentTarget,e)}catch(e){i.value=!0}if(s.passive&&(e._inPassiveListenerFlag=!1),u.Guard.isWindow(p)&&(p._currentEvent=f),e._stopImmediatePropagationFlag)return o}}return o}function x(e,t){return null}function w(e,t){return null}function E(e,t){}function D(e,t){}t.event_setTheCanceledFlag=function(e){e._cancelable&&!e._inPassiveListenerFlag&&(e._canceledFlag=!0)},t.event_initialize=function(e,t,r,n){e._initializedFlag=!0,e._stopPropagationFlag=!1,e._stopImmediatePropagationFlag=!1,e._canceledFlag=!1,e._isTrusted=!1,e._target=null,e._type=t,e._bubbles=r,e._cancelable=n},t.event_createAnEvent=m,t.event_innerEventCreationSteps=y,t.event_dispatch=v,t.event_appendToAnEventPath=_,t.event_invoke=g,t.event_innerInvoke=b,t.event_fireAnEvent=function(e,t,r,n,i){void 0===r&&(r=c.EventImpl);var o=m(r);if(o._type=e,n)for(var a in n){o[a]=n[a]}return v(o,t,i)},t.event_createLegacyEvent=function(e){var t=null;switch(e.toLowerCase()){case\"beforeunloadevent\":case\"compositionevent\":break;case\"customevent\":t=l.CustomEventImpl;break;case\"devicemotionevent\":case\"deviceorientationevent\":case\"dragevent\":break;case\"event\":case\"events\":t=c.EventImpl}if(null===t)throw new h.NotSupportedError(\"Event constructor not found for interface \"+e+\".\");var r=new t(\"\");return r._type=\"\",r._timeStamp=(new Date).getTime(),r._isTrusted=!1,r._initializedFlag=!1,r},t.event_getterEventHandlerIDLAttribute=function(e,t){return null},t.event_setterEventHandlerIDLAttribute=function(e,t,r){},t.event_determineTheTargetOfAnEventHandler=x,t.event_getTheCurrentValueOfAnEventHandler=w,t.event_activateAnEventHandler=E,t.event_deactivateAnEventHandler=D},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},a=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(6),u=r(2),l=r(9),c=r(34),h=r(3),p=r(1),f=r(7),d=r(152),m=r(0),y=r(12),v=function(e){function t(){var t=e.call(this)||this;return t._children=new Set,t._encoding={name:\"UTF-8\",labels:[\"unicode-1-1-utf-8\",\"utf-8\",\"utf8\"]},t._contentType=\"application/xml\",t._URL={scheme:\"about\",username:\"\",password:\"\",host:null,port:null,path:[\"blank\"],query:null,fragment:null,_cannotBeABaseURLFlag:!0,_blobURLEntry:null},t._origin=null,t._type=\"xml\",t._mode=\"no-quirks\",t._documentElement=null,t._hasNamespaces=!1,t._nodeDocumentOverwrite=null,t}return i(t,e),Object.defineProperty(t.prototype,\"_nodeDocument\",{get:function(){return this._nodeDocumentOverwrite||this},set:function(e){this._nodeDocumentOverwrite=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"implementation\",{get:function(){return this._implementation||(this._implementation=m.create_domImplementation(this))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"URL\",{get:function(){return d.urlSerializer(this._URL)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"documentURI\",{get:function(){return this.URL},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"origin\",{get:function(){return\"null\"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"compatMode\",{get:function(){return\"quirks\"===this._mode?\"BackCompat\":\"CSS1Compat\"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"characterSet\",{get:function(){return this._encoding.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"charset\",{get:function(){return this._encoding.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"inputEncoding\",{get:function(){return this._encoding.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"contentType\",{get:function(){return this._contentType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"doctype\",{get:function(){var e,t;try{for(var r=o(this._children),n=r.next();!n.done;n=r.next()){var i=n.value;if(h.Guard.isDocumentTypeNode(i))return i}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"documentElement\",{get:function(){return this._documentElement},enumerable:!0,configurable:!0}),t.prototype.getElementsByTagName=function(e){return m.node_listOfElementsWithQualifiedName(e,this)},t.prototype.getElementsByTagNameNS=function(e,t){return m.node_listOfElementsWithNamespace(e,t,this)},t.prototype.getElementsByClassName=function(e){return m.node_listOfElementsWithClassNames(e,this)},t.prototype.createElement=function(e,t){if(!m.xml_isName(e))throw new l.InvalidCharacterError;\"html\"===this._type&&(e=e.toLowerCase());var r=null;void 0!==t&&(r=p.isString(t)?t:t.is);var n=\"html\"===this._type||\"application/xhtml+xml\"===this._contentType?f.namespace.HTML:null;return m.element_createAnElement(this,e,n,null,r,!0)},t.prototype.createElementNS=function(e,t,r){return m.document_internalCreateElementNS(this,e,t,r)},t.prototype.createDocumentFragment=function(){return m.create_documentFragment(this)},t.prototype.createTextNode=function(e){return m.create_text(this,e)},t.prototype.createCDATASection=function(e){if(\"html\"===this._type)throw new l.NotSupportedError;if(-1!==e.indexOf(\"]]>\"))throw new l.InvalidCharacterError;return m.create_cdataSection(this,e)},t.prototype.createComment=function(e){return m.create_comment(this,e)},t.prototype.createProcessingInstruction=function(e,t){if(!m.xml_isName(e))throw new l.InvalidCharacterError;if(-1!==t.indexOf(\"?>\"))throw new l.InvalidCharacterError;return m.create_processingInstruction(this,e,t)},t.prototype.importNode=function(e,t){if(void 0===t&&(t=!1),h.Guard.isDocumentNode(e)||h.Guard.isShadowRoot(e))throw new l.NotSupportedError;return m.node_clone(e,this,t)},t.prototype.adoptNode=function(e){if(h.Guard.isDocumentNode(e))throw new l.NotSupportedError;if(h.Guard.isShadowRoot(e))throw new l.HierarchyRequestError;return m.document_adopt(e,this),e},t.prototype.createAttribute=function(e){if(!m.xml_isName(e))throw new l.InvalidCharacterError;return\"html\"===this._type&&(e=e.toLowerCase()),m.create_attr(this,e)},t.prototype.createAttributeNS=function(e,t){var r=a(m.namespace_validateAndExtract(e,t),3),n=r[0],i=r[1],o=r[2],s=m.create_attr(this,o);return s._namespace=n,s._namespacePrefix=i,s},t.prototype.createEvent=function(e){return m.event_createLegacyEvent(e)},t.prototype.createRange=function(){var e=m.create_range();return e._start=[this,0],e._end=[this,0],e},t.prototype.createNodeIterator=function(e,t,r){void 0===t&&(t=u.WhatToShow.All),void 0===r&&(r=null);var n=m.create_nodeIterator(e,e,!0);return n._whatToShow=t,n._iteratorCollection=m.create_nodeList(e),p.isFunction(r)?(n._filter=m.create_nodeFilter(),n._filter.acceptNode=r):n._filter=r,n},t.prototype.createTreeWalker=function(e,t,r){void 0===t&&(t=u.WhatToShow.All),void 0===r&&(r=null);var n=m.create_treeWalker(e,e);return n._whatToShow=t,p.isFunction(r)?(n._filter=m.create_nodeFilter(),n._filter.acceptNode=r):n._filter=r,n},t.prototype._getTheParent=function(e){return\"load\"===e._type?null:s.dom.window},t.prototype.getElementById=function(e){throw new Error(\"Mixin: NonElementParentNode not implemented.\")},Object.defineProperty(t.prototype,\"children\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"firstElementChild\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"lastElementChild\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"childElementCount\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),t.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.querySelector=function(e){throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.querySelectorAll=function(e){throw new Error(\"Mixin: ParentNode not implemented.\")},t}(c.NodeImpl);t.DocumentImpl=v,y.idl_defineConst(v.prototype,\"_nodeType\",u.NodeType.Document)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},a=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(2),u=r(34),l=r(9),c=r(7),h=r(0),p=r(12),f=function(e){function t(){var t=e.call(this)||this;return t._children=new Set,t._namespace=null,t._namespacePrefix=null,t._localName=\"\",t._customElementState=\"undefined\",t._customElementDefinition=null,t._is=null,t._shadowRoot=null,t._attributeList=h.create_namedNodeMap(t),t._attributeChangeSteps=[],t._name=\"\",t._assignedSlot=null,t}return i(t,e),Object.defineProperty(t.prototype,\"namespaceURI\",{get:function(){return this._namespace},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"prefix\",{get:function(){return this._namespacePrefix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"localName\",{get:function(){return this._localName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"tagName\",{get:function(){return this._htmlUppercasedQualifiedName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"id\",{get:function(){return h.element_getAnAttributeValue(this,\"id\")},set:function(e){h.element_setAnAttributeValue(this,\"id\",e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"className\",{get:function(){return h.element_getAnAttributeValue(this,\"class\")},set:function(e){h.element_setAnAttributeValue(this,\"class\",e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"classList\",{get:function(){var e=h.element_getAnAttributeByName(\"class\",this);return null===e&&(e=h.create_attr(this._nodeDocument,\"class\")),h.create_domTokenList(this,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"slot\",{get:function(){return h.element_getAnAttributeValue(this,\"slot\")},set:function(e){h.element_setAnAttributeValue(this,\"slot\",e)},enumerable:!0,configurable:!0}),t.prototype.hasAttributes=function(){return 0!==this._attributeList.length},Object.defineProperty(t.prototype,\"attributes\",{get:function(){return this._attributeList},enumerable:!0,configurable:!0}),t.prototype.getAttributeNames=function(){var e,t,r=[];try{for(var n=o(this._attributeList),i=n.next();!i.done;i=n.next()){var a=i.value;r.push(a._qualifiedName)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return r},t.prototype.getAttribute=function(e){var t=h.element_getAnAttributeByName(e,this);return t?t._value:null},t.prototype.getAttributeNS=function(e,t){var r=h.element_getAnAttributeByNamespaceAndLocalName(e,t,this);return r?r._value:null},t.prototype.setAttribute=function(e,t){if(!h.xml_isName(e))throw new l.InvalidCharacterError;this._namespace===c.namespace.HTML&&\"html\"===this._nodeDocument._type&&(e=e.toLowerCase());for(var r=null,n=0;n<this._attributeList.length;n++){var i=this._attributeList[n];if(i._qualifiedName===e){r=i;break}}if(null===r)return(r=h.create_attr(this._nodeDocument,e))._value=t,void h.element_append(r,this);h.element_change(r,this,t)},t.prototype.setAttributeNS=function(e,t,r){var n=a(h.namespace_validateAndExtract(e,t),3),i=n[0],o=n[1],s=n[2];h.element_setAnAttributeValue(this,s,r,o,i)},t.prototype.removeAttribute=function(e){h.element_removeAnAttributeByName(e,this)},t.prototype.removeAttributeNS=function(e,t){h.element_removeAnAttributeByNamespaceAndLocalName(e,t,this)},t.prototype.hasAttribute=function(e){this._namespace===c.namespace.HTML&&\"html\"===this._nodeDocument._type&&(e=e.toLowerCase());for(var t=0;t<this._attributeList.length;t++){if(this._attributeList[t]._qualifiedName===e)return!0}return!1},t.prototype.toggleAttribute=function(e,t){if(!h.xml_isName(e))throw new l.InvalidCharacterError;this._namespace===c.namespace.HTML&&\"html\"===this._nodeDocument._type&&(e=e.toLowerCase());for(var r=null,n=0;n<this._attributeList.length;n++){var i=this._attributeList[n];if(i._qualifiedName===e){r=i;break}}return null===r?(void 0===t||!0===t)&&((r=h.create_attr(this._nodeDocument,e))._value=\"\",h.element_append(r,this),!0):void 0!==t&&!1!==t||(h.element_removeAnAttributeByName(e,this),!1)},t.prototype.hasAttributeNS=function(e,t){for(var r=e||null,n=0;n<this._attributeList.length;n++){var i=this._attributeList[n];if(i._namespace===r&&i._localName===t)return!0}return!1},t.prototype.getAttributeNode=function(e){return h.element_getAnAttributeByName(e,this)},t.prototype.getAttributeNodeNS=function(e,t){return h.element_getAnAttributeByNamespaceAndLocalName(e,t,this)},t.prototype.setAttributeNode=function(e){return h.element_setAnAttribute(e,this)},t.prototype.setAttributeNodeNS=function(e){return h.element_setAnAttribute(e,this)},t.prototype.removeAttributeNode=function(e){for(var t=!1,r=0;r<this._attributeList.length;r++){if(this._attributeList[r]===e){t=!0;break}}if(!t)throw new l.NotFoundError;return h.element_remove(e,this),e},t.prototype.attachShadow=function(e){if(this._namespace!==c.namespace.HTML)throw new l.NotSupportedError;if(!h.customElement_isValidCustomElementName(this._localName)&&!h.customElement_isValidShadowHostName(this._localName))throw new l.NotSupportedError;if(h.customElement_isValidCustomElementName(this._localName)||null!==this._is){var t=h.customElement_lookUpACustomElementDefinition(this._nodeDocument,this._namespace,this._localName,this._is);if(null!==t&&!0===t.disableShadow)throw new l.NotSupportedError}if(null!==this._shadowRoot)throw new l.NotSupportedError;var r=h.create_shadowRoot(this._nodeDocument,this);return r._mode=e.mode,this._shadowRoot=r,r},Object.defineProperty(t.prototype,\"shadowRoot\",{get:function(){var e=this._shadowRoot;return null===e||\"closed\"===e.mode?null:e},enumerable:!0,configurable:!0}),t.prototype.closest=function(e){throw new l.NotImplementedError},t.prototype.matches=function(e){throw new l.NotImplementedError},t.prototype.webkitMatchesSelector=function(e){return this.matches(e)},t.prototype.getElementsByTagName=function(e){return h.node_listOfElementsWithQualifiedName(e,this)},t.prototype.getElementsByTagNameNS=function(e,t){return h.node_listOfElementsWithNamespace(e,t,this)},t.prototype.getElementsByClassName=function(e){return h.node_listOfElementsWithClassNames(e,this)},t.prototype.insertAdjacentElement=function(e,t){return h.element_insertAdjacent(this,e,t)},t.prototype.insertAdjacentText=function(e,t){var r=h.create_text(this._nodeDocument,t);h.element_insertAdjacent(this,e,r)},Object.defineProperty(t.prototype,\"_qualifiedName\",{get:function(){return this._namespacePrefix?this._namespacePrefix+\":\"+this._localName:this._localName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"_htmlUppercasedQualifiedName\",{get:function(){var e=this._qualifiedName;return this._namespace===c.namespace.HTML&&\"html\"===this._nodeDocument._type&&(e=e.toUpperCase()),e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"children\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"firstElementChild\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"lastElementChild\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"childElementCount\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),t.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.querySelector=function(e){throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.querySelectorAll=function(e){throw new Error(\"Mixin: ParentNode not implemented.\")},Object.defineProperty(t.prototype,\"previousElementSibling\",{get:function(){throw new Error(\"Mixin: NonDocumentTypeChildNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"nextElementSibling\",{get:function(){throw new Error(\"Mixin: NonDocumentTypeChildNode not implemented.\")},enumerable:!0,configurable:!0}),t.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.remove=function(){throw new Error(\"Mixin: ChildNode not implemented.\")},Object.defineProperty(t.prototype,\"assignedSlot\",{get:function(){throw new Error(\"Mixin: Slotable not implemented.\")},enumerable:!0,configurable:!0}),t._create=function(e,r,n,i){void 0===n&&(n=null),void 0===i&&(i=null);var o=new t;return o._localName=r,o._namespace=n,o._namespacePrefix=i,o._nodeDocument=e,o},t}(u.NodeImpl);t.ElementImpl=f,p.idl_defineConst(f.prototype,\"_nodeType\",s.NodeType.Element)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(2),a=r(34),s=r(12),u=function(e){function t(t){void 0===t&&(t=null);var r=e.call(this)||this;return r._children=new Set,r._host=t,r}return i(t,e),t.prototype.getElementById=function(e){throw new Error(\"Mixin: NonElementParentNode not implemented.\")},Object.defineProperty(t.prototype,\"children\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"firstElementChild\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"lastElementChild\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"childElementCount\",{get:function(){throw new Error(\"Mixin: ParentNode not implemented.\")},enumerable:!0,configurable:!0}),t.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.querySelector=function(e){throw new Error(\"Mixin: ParentNode not implemented.\")},t.prototype.querySelectorAll=function(e){throw new Error(\"Mixin: ParentNode not implemented.\")},t._create=function(e,r){void 0===r&&(r=null);var n=new t(r);return n._nodeDocument=e,n},t}(a.NodeImpl);t.DocumentFragmentImpl=u,s.idl_defineConst(u.prototype,\"_nodeType\",o.NodeType.DocumentFragment)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(2),s=r(71),u=r(0),l=r(12),c=function(e){function t(t){void 0===t&&(t=\"\");var r=e.call(this,t)||this;return r._name=\"\",r._assignedSlot=null,r}return i(t,e),Object.defineProperty(t.prototype,\"wholeText\",{get:function(){var e,t,r=\"\";try{for(var n=o(u.text_contiguousTextNodes(this,!0)),i=n.next();!i.done;i=n.next()){r+=i.value._data}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return r},enumerable:!0,configurable:!0}),t.prototype.splitText=function(e){return u.text_split(this,e)},Object.defineProperty(t.prototype,\"assignedSlot\",{get:function(){throw new Error(\"Mixin: Slotable not implemented.\")},enumerable:!0,configurable:!0}),t._create=function(e,r){void 0===r&&(r=\"\");var n=new t(r);return n._nodeDocument=e,n},t}(s.CharacterDataImpl);t.TextImpl=c,l.idl_defineConst(c.prototype,\"_nodeType\",a.NodeType.Text)},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,\"_startNode\",{get:function(){return this._start[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"_startOffset\",{get:function(){return this._start[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"_endNode\",{get:function(){return this._end[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"_endOffset\",{get:function(){return this._end[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"_collapsed\",{get:function(){return this._start[0]===this._end[0]&&this._start[1]===this._end[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"startContainer\",{get:function(){return this._startNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"startOffset\",{get:function(){return this._startOffset},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"endContainer\",{get:function(){return this._endNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"endOffset\",{get:function(){return this._endOffset},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"collapsed\",{get:function(){return this._collapsed},enumerable:!0,configurable:!0}),e}();t.AbstractRangeImpl=n},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=function(){function e(e){this._activeFlag=!1,this._root=e,this._whatToShow=n.WhatToShow.All,this._filter=null}return Object.defineProperty(e.prototype,\"root\",{get:function(){return this._root},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"whatToShow\",{get:function(){return this._whatToShow},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"filter\",{get:function(){return this._filter},enumerable:!0,configurable:!0}),e}();t.TraverserImpl=i},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=r(0),o=r(12),a=function(){function e(e,t){this._target=null,this._relatedTarget=null,this._touchTargetList=[],this._path=[],this._currentTarget=null,this._eventPhase=n.EventPhase.None,this._stopPropagationFlag=!1,this._stopImmediatePropagationFlag=!1,this._canceledFlag=!1,this._inPassiveListenerFlag=!1,this._composedFlag=!1,this._initializedFlag=!1,this._dispatchFlag=!1,this._isTrusted=!1,this._bubbles=!1,this._cancelable=!1,this._type=e,t&&(this._bubbles=t.bubbles||!1,this._cancelable=t.cancelable||!1,this._composedFlag=t.composed||!1),this._initializedFlag=!0,this._timeStamp=(new Date).getTime()}return Object.defineProperty(e.prototype,\"type\",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"target\",{get:function(){return this._target},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"srcElement\",{get:function(){return this._target},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentTarget\",{get:function(){return this._currentTarget},enumerable:!0,configurable:!0}),e.prototype.composedPath=function(){var e=[],t=this._path;if(0===t.length)return e;var r=this._currentTarget;if(null===r)throw new Error(\"Event currentTarget is null.\");e.push(r);for(var n=0,i=0,o=t.length-1;o>=0;){if(t[o].rootOfClosedTree&&i++,t[o].invocationTarget===r){n=o;break}t[o].slotInClosedTree&&i--,o--}var a=i,s=i;for(o=n-1;o>=0;)t[o].rootOfClosedTree&&a++,a<=s&&e.unshift(t[o].invocationTarget),t[o].slotInClosedTree&&--a<s&&(s=a),o--;for(a=i,s=i,o=n+1;o<t.length;)t[o].slotInClosedTree&&a++,a<=s&&e.push(t[o].invocationTarget),t[o].rootOfClosedTree&&--a<s&&(s=a),o++;return e},Object.defineProperty(e.prototype,\"eventPhase\",{get:function(){return this._eventPhase},enumerable:!0,configurable:!0}),e.prototype.stopPropagation=function(){this._stopPropagationFlag=!0},Object.defineProperty(e.prototype,\"cancelBubble\",{get:function(){return this._stopPropagationFlag},set:function(e){e&&this.stopPropagation()},enumerable:!0,configurable:!0}),e.prototype.stopImmediatePropagation=function(){this._stopPropagationFlag=!0,this._stopImmediatePropagationFlag=!0},Object.defineProperty(e.prototype,\"bubbles\",{get:function(){return this._bubbles},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"cancelable\",{get:function(){return this._cancelable},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"returnValue\",{get:function(){return!this._canceledFlag},set:function(e){e||i.event_setTheCanceledFlag(this)},enumerable:!0,configurable:!0}),e.prototype.preventDefault=function(){i.event_setTheCanceledFlag(this)},Object.defineProperty(e.prototype,\"defaultPrevented\",{get:function(){return this._canceledFlag},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"composed\",{get:function(){return this._composedFlag},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"isTrusted\",{get:function(){return this._isTrusted},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"timeStamp\",{get:function(){return this._timeStamp},enumerable:!0,configurable:!0}),e.prototype.initEvent=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!1),this._dispatchFlag||i.event_initialize(this,e,t,r)},e.NONE=0,e.CAPTURING_PHASE=1,e.AT_TARGET=2,e.BUBBLING_PHASE=3,e}();t.EventImpl=a,o.idl_defineConst(a.prototype,\"NONE\",0),o.idl_defineConst(a.prototype,\"CAPTURING_PHASE\",1),o.idl_defineConst(a.prototype,\"AT_TARGET\",2),o.idl_defineConst(a.prototype,\"BUBBLING_PHASE\",3)},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=r(9);t.traversal_filter=function(e,t){if(e._activeFlag)throw new i.InvalidStateError;var r=1<<t._nodeType-1;if(0==(e.whatToShow&r))return n.FilterResult.Skip;if(!e.filter)return n.FilterResult.Accept;e._activeFlag=!0;var o=n.FilterResult.Reject;try{o=e.filter.acceptNode(t)}catch(t){throw e._activeFlag=!1,t}return e._activeFlag=!1,o}},function(e,t,r){\"use strict\";var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(6),a=r(3),s=r(1),u=r(99),l=r(73),c=r(17),h=r(173),p=r(30),f=r(52),d=r(37);t.document_elementInterface=function(e,t){return u.ElementImpl},t.document_internalCreateElementNS=function(e,t,r,i){var o=n(h.namespace_validateAndExtract(t,r),3),a=o[0],u=o[1],l=o[2],c=null;return void 0!==i&&(c=s.isString(i)?i:i.is),f.element_createAnElement(e,l,a,u,c,!0)},t.document_adopt=function(e,t){var r,n;if(e._nodeDocument!==t||null!==e._parent){var s=e._nodeDocument;if(e._parent&&d.mutation_remove(e,e._parent),t!==s)for(var u=c.tree_getFirstDescendantNode(e,!0,!0);null!==u;){if(u._nodeDocument=t,a.Guard.isElementNode(u))try{for(var h=(r=void 0,i(u._attributeList._asArray())),f=h.next();!f.done;f=h.next()){f.value._nodeDocument=t}}catch(e){r={error:e}}finally{try{f&&!f.done&&(n=h.return)&&n.call(h)}finally{if(r)throw r.error}}o.dom.features.customElements&&a.Guard.isElementNode(u)&&\"custom\"===u._customElementState&&l.customElement_enqueueACustomElementCallbackReaction(u,\"adoptedCallback\",[s,t]),o.dom.features.steps&&p.dom_runAdoptingSteps(u,s),u=c.tree_getNextDescendantNode(e,u,!0,!0)}}}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(3),a=r(9),s=r(17),u=r(51),l=r(30);t.characterData_replaceData=function(e,t,r,c){var h,p,f=s.tree_nodeLength(e);if(t>f)throw new a.IndexSizeError(\"Offset exceeds character data length. Offset: \"+t+\", Length: \"+f+\", Node is \"+e.nodeName+\".\");t+r>f&&(r=f-t),i.dom.features.mutationObservers&&u.observer_queueMutationRecord(\"characterData\",e,null,null,e._data,[],[],null,null);var d=e._data.substring(0,t)+c+e._data.substring(t+r);e._data=d;try{for(var m=n(i.dom.rangeList),y=m.next();!y.done;y=m.next()){var v=y.value;v._start[0]===e&&v._start[1]>t&&v._start[1]<=t+r&&(v._start[1]=t),v._end[0]===e&&v._end[1]>t&&v._end[1]<=t+r&&(v._end[1]=t),v._start[0]===e&&v._start[1]>t+r&&(v._start[1]+=c.length-r),v._end[0]===e&&v._end[1]>t+r&&(v._end[1]+=c.length-r)}}catch(e){h={error:e}}finally{try{y&&!y.done&&(p=m.return)&&p.call(m)}finally{if(h)throw h.error}}i.dom.features.steps&&o.Guard.isTextNode(e)&&null!==e._parent&&l.dom_runChildTextContentChangeSteps(e._parent)},t.characterData_substringData=function(e,t,r){var n=s.tree_nodeLength(e);if(t>n)throw new a.IndexSizeError(\"Offset exceeds character data length. Offset: \"+t+\", Length: \"+n+\", Node is \"+e.nodeName+\".\");return t+r>n?e._data.substr(t):e._data.substr(t,r)}},function(e,t,r){\"use strict\";var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e},o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(7);function s(e){var t=a.string.splitAStringOnASCIIWhitespace(e);return new Set(t)}function u(e){return i(e).join(\" \")}t.orderedSet_parse=s,t.orderedSet_serialize=u,t.orderedSet_sanitize=function(e){return u(s(e))},t.orderedSet_contains=function(e,t,r){var n,i,a,s;try{for(var u=o(t),l=u.next();!l.done;l=u.next()){var c=l.value,h=!1;try{for(var p=(a=void 0,o(e)),f=p.next();!f.done;f=p.next()){var d=f.value;if(r){if(d===c){h=!0;break}}else if(d.toUpperCase()===c.toUpperCase()){h=!0;break}}}catch(e){a={error:e}}finally{try{f&&!f.done&&(s=p.return)&&s.call(p)}finally{if(a)throw a.error}}if(!h)return!1}}catch(e){n={error:e}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}return!0}},function(e,t,r){\"use strict\";r(179),Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(262),i=r(110),o=r(1);i.dom.setFeatures(!1),t.createDocument=function(){var e=(new n.DOMImplementation).createDocument(null,\"root\",null);return e.documentElement&&e.removeChild(e.documentElement),e},t.sanitizeInput=function(e,t){if(null==e)return e;if(void 0===t)return e+\"\";var r=\"\";e+=\"\";for(var n=0;n<e.length;n++){var i=e.charCodeAt(n);if(9===i||10===i||13===i||i>=32&&i<=55295||i>=57344&&i<=65533)r+=e.charAt(n);else if(i>=55296&&i<=56319&&n<e.length-1){var a=e.charCodeAt(n+1);a>=56320&&a<=57343?(i=1024*(i-55296)+a-56320+65536,r+=String.fromCodePoint(i),n++):r+=o.isString(t)?t:t(e.charAt(n),n,e)}else r+=o.isString(t)?t:t(e.charAt(n),n,e)}return r}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1),i=r(153);t.AbortController=i.AbortControllerImpl;var o=r(154);t.AbortSignal=o.AbortSignalImpl;var a=r(102);t.AbstractRange=a.AbstractRangeImpl;var s=r(157);t.Attr=s.AttrImpl;var u=r(158);t.CDATASection=u.CDATASectionImpl;var l=r(71);t.CharacterData=l.CharacterDataImpl;var c=r(263),h=r(159);t.Comment=h.CommentImpl;var p=r(171);t.CustomEvent=p.CustomEventImpl;var f=r(100);t.DocumentFragment=f.DocumentFragmentImpl;var d=r(98);t.Document=d.DocumentImpl;var m=r(264),y=r(155);t.DocumentType=y.DocumentTypeImpl;var v=r(6);t.dom=v.dom;var _=r(148);t.DOMImplementation=_.DOMImplementationImpl;var g=r(170);t.DOMTokenList=g.DOMTokenListImpl;var b=r(99);t.Element=b.ElementImpl;var x=r(104);t.Event=x.EventImpl;var w=r(70);t.EventTarget=w.EventTargetImpl;var E=r(161);t.HTMLCollection=E.HTMLCollectionImpl;var D=r(265);t.MutationObserver=D.MutationObserverImpl;var S=r(169);t.MutationRecord=S.MutationRecordImpl;var C=r(164);t.NamedNodeMap=C.NamedNodeMapImpl;var A=r(168);t.NodeFilter=A.NodeFilterImpl;var N=r(34);t.Node=N.NodeImpl;var T=r(166);t.NodeIterator=T.NodeIteratorImpl;var O=r(162);t.NodeList=O.NodeListImpl;var F=r(163);t.NodeListStatic=F.NodeListStaticImpl;var k=r(266),P=r(267),I=r(268),L=r(160);t.ProcessingInstruction=L.ProcessingInstructionImpl;var M=r(165);t.Range=M.RangeImpl;var B=r(156);t.ShadowRoot=B.ShadowRootImpl;var j=r(269),R=r(270);t.StaticRange=R.StaticRangeImpl;var z=r(101);t.Text=z.TextImpl;var U=r(103);t.Traverser=U.TraverserImpl;var G=r(167);t.TreeWalker=G.TreeWalkerImpl;var X=r(149);t.Window=X.WindowImpl;var q=r(151);t.XMLDocument=q.XMLDocumentImpl,n.applyMixin(b.ElementImpl,c.ChildNodeImpl),n.applyMixin(l.CharacterDataImpl,c.ChildNodeImpl),n.applyMixin(y.DocumentTypeImpl,c.ChildNodeImpl),n.applyMixin(d.DocumentImpl,m.DocumentOrShadowRootImpl),n.applyMixin(B.ShadowRootImpl,m.DocumentOrShadowRootImpl),n.applyMixin(b.ElementImpl,k.NonDocumentTypeChildNodeImpl),n.applyMixin(l.CharacterDataImpl,k.NonDocumentTypeChildNodeImpl),n.applyMixin(d.DocumentImpl,P.NonElementParentNodeImpl),n.applyMixin(f.DocumentFragmentImpl,P.NonElementParentNodeImpl),n.applyMixin(d.DocumentImpl,I.ParentNodeImpl),n.applyMixin(f.DocumentFragmentImpl,I.ParentNodeImpl),n.applyMixin(b.ElementImpl,I.ParentNodeImpl),n.applyMixin(z.TextImpl,j.SlotableImpl),n.applyMixin(b.ElementImpl,j.SlotableImpl)},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.EOF=0]=\"EOF\",e[e.Declaration=1]=\"Declaration\",e[e.DocType=2]=\"DocType\",e[e.Element=3]=\"Element\",e[e.Text=4]=\"Text\",e[e.CDATA=5]=\"CDATA\",e[e.PI=6]=\"PI\",e[e.Comment=7]=\"Comment\",e[e.ClosingTag=8]=\"ClosingTag\"}(t.TokenType||(t.TokenType={}))},function(e,t,r){\"use strict\";r(64),r(20),r(66);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(1),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){var r=this,n=this._builderOptions,i=null;return o.isFunction(t)?i=this.parse(e,t.apply(this)):o.isArray(t)||o.isSet(t)?o.forEachArray(t,(function(t){return i=r.parse(e,t)}),this):o.isMap(t)||o.isObject(t)?o.forEachObject(t,(function(t,a){if(o.isFunction(a)&&(a=a.apply(r)),n.ignoreConverters||0!==t.indexOf(n.convert.att))if(n.ignoreConverters||0!==t.indexOf(n.convert.text))if(n.ignoreConverters||0!==t.indexOf(n.convert.cdata))if(n.ignoreConverters||0!==t.indexOf(n.convert.comment))if(n.ignoreConverters||0!==t.indexOf(n.convert.ins))if((o.isArray(a)||o.isSet(a))&&o.isEmpty(a));else if((o.isMap(a)||o.isObject(a))&&o.isEmpty(a))i=r.element(e,void 0,r.sanitize(t))||i;else if(n.keepNullNodes||null!=a)if(o.isArray(a)||o.isSet(a))o.forEachArray(a,(function(n){var o={};o[t]=n,i=r.parse(e,o)}),r);else if(o.isMap(a)||o.isObject(a)){(s=r.element(e,void 0,r.sanitize(t)))&&(i=s,r.parse(s,a))}else if(null!=a&&\"\"!==a){var s;(s=r.element(e,void 0,r.sanitize(t)))&&(i=s,r.text(s,r._decodeText(r.sanitize(a))))}else i=r.element(e,void 0,r.sanitize(t))||i;else;else if(o.isString(a)){var u=a.indexOf(\" \"),l=-1===u?a:a.substr(0,u),c=-1===u?\"\":a.substr(u+1);i=r.instruction(e,r.sanitize(l),r.sanitize(c))||i}else o.isArray(a)||o.isSet(a)?o.forEachArray(a,(function(t){var n=t.indexOf(\" \"),o=-1===n?t:t.substr(0,n),a=-1===n?\"\":t.substr(n+1);i=r.instruction(e,r.sanitize(o),r.sanitize(a))||i}),r):o.forEachObject(a,(function(t,n){return i=r.instruction(e,r.sanitize(t),r.sanitize(n))||i}),r);else o.isArray(a)||o.isSet(a)?o.forEachArray(a,(function(t){return i=r.comment(e,r.sanitize(t))||i}),r):i=r.comment(e,r.sanitize(a))||i;else o.isArray(a)||o.isSet(a)?o.forEachArray(a,(function(t){return i=r.cdata(e,r.sanitize(t))||i}),r):i=r.cdata(e,r.sanitize(a))||i;else i=o.isMap(a)||o.isObject(a)?r.parse(e,a):r.text(e,r._decodeText(r.sanitize(a)))||i;else if(t===n.convert.att){if(o.isArray(a)||o.isSet(a))throw new Error(\"Invalid attribute: \"+a.toString()+\". \"+e._debugInfo());o.forEachObject(a,(function(t,n){i=r.attribute(e,void 0,r.sanitize(t),r._decodeAttributeValue(r.sanitize(n)))||i}))}else i=r.attribute(e,void 0,r.sanitize(t.substr(n.convert.att.length)),r._decodeAttributeValue(r.sanitize(a)))||i}),this):(n.keepNullNodes||null!=t)&&(i=this.text(e,this._decodeText(this.sanitize(t)))||i),i||e},t}(r(75).BaseReader);t.ObjectReader=a},function(e,t,r){\"use strict\";var n=r(39);e.exports=new n({explicit:[r(286),r(287),r(288)]})},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(e){this.level=0,this._builderOptions=e,this._writerOptions=e};t.BaseCBWriter=n},function(e,t,r){var n=r(16),i=r(8),o=r(116);e.exports=!n&&!i((function(){return 7!=Object.defineProperty(o(\"div\"),\"a\",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(11),i=r(13),o=n.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,r){var n=r(118),i=Function.toString;\"function\"!=typeof n.inspectSource&&(n.inspectSource=function(e){return i.call(e)}),e.exports=n.inspectSource},function(e,t,r){var n=r(11),i=r(80),o=n[\"__core-js_shared__\"]||i(\"__core-js_shared__\",{});e.exports=o},function(e,t,r){var n=r(14),i=r(187),o=r(55),a=r(15);e.exports=function(e,t){for(var r=i(t),s=a.f,u=o.f,l=0;l<r.length;l++){var c=r[l];n(e,c)||s(e,c,u(t,c))}}},function(e,t,r){var n=r(11);e.exports=n},function(e,t,r){var n=r(14),i=r(24),o=r(122).indexOf,a=r(45);e.exports=function(e,t){var r,s=i(e),u=0,l=[];for(r in s)!n(a,r)&&n(s,r)&&l.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~o(l,r)||l.push(r));return l}},function(e,t,r){var n=r(24),i=r(26),o=r(83),a=function(e){return function(t,r,a){var s,u=n(t),l=i(u.length),c=o(a,l);if(e&&r!=r){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===r)return e||c||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t,r){var n=r(8),i=/#|\\.prototype\\./,o=function(e,t){var r=s[a(e)];return r==l||r!=u&&(\"function\"==typeof t?n(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,\".\").toLowerCase()},s=o.data={},u=o.NATIVE=\"N\",l=o.POLYFILL=\"P\";e.exports=o},function(e,t,r){var n=r(86);e.exports=n&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator},function(e,t,r){var n=r(5);t.f=n},function(e,t,r){var n=r(120),i=r(14),o=r(125),a=r(15).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});i(t,e)||a(t,e,{value:o.f(e)})}},function(e,t){e.exports=function(e){if(\"function\"!=typeof e)throw TypeError(String(e)+\" is not a function\");return e}},function(e,t,r){var n=r(13),i=r(59),o=r(5)(\"species\");e.exports=function(e,t){var r;return i(e)&&(\"function\"!=typeof(r=e.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[o])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},function(e,t,r){var n,i,o=r(11),a=r(193),s=o.process,u=s&&s.versions,l=u&&u.v8;l?i=(n=l.split(\".\"))[0]+n[1]:a&&(!(n=a.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\\/(\\d+)/))&&(i=n[1]),e.exports=i&&+i},function(e,t,r){var n=r(5),i=r(60),o=r(15),a=n(\"unscopables\"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),e.exports=function(e){s[a][e]=!0}},function(e,t,r){\"use strict\";var n,i,o,a=r(132),s=r(21),u=r(14),l=r(5),c=r(44),h=l(\"iterator\"),p=!1;[].keys&&(\"next\"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(n=i):p=!0),null==n&&(n={}),c||u(n,h)||s(n,h,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(e,t,r){var n=r(14),i=r(27),o=r(57),a=r(196),s=o(\"IE_PROTO\"),u=Object.prototype;e.exports=a?Object.getPrototypeOf:function(e){return e=i(e),n(e,s)?e[s]:\"function\"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,r){var n=r(18),i=r(197);e.exports=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,o){return n(r),i(o),t?e.call(r,o):r.__proto__=o,r}}():void 0)},function(e,t,r){\"use strict\";var n=r(56),i=r(15),o=r(40);e.exports=function(e,t,r){var a=n(t);a in e?i.f(e,a,o(0,r)):e[a]=r}},function(e,t,r){var n=r(90),i=r(42),o=r(5)(\"toStringTag\"),a=\"Arguments\"==i(function(){return arguments}());e.exports=n?i:function(e){var t,r,n;return void 0===e?\"Undefined\":null===e?\"Null\":\"string\"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:a?i(t):\"Object\"==(n=i(t))&&\"function\"==typeof t.callee?\"Arguments\":n}},function(e,t,r){\"use strict\";var n=r(18);e.exports=function(){var e=n(this),t=\"\";return e.global&&(t+=\"g\"),e.ignoreCase&&(t+=\"i\"),e.multiline&&(t+=\"m\"),e.dotAll&&(t+=\"s\"),e.unicode&&(t+=\"u\"),e.sticky&&(t+=\"y\"),t}},function(e,t,r){var n=r(47),i=r(35),o=function(e){return function(t,r){var o,a,s=String(i(t)),u=n(r),l=s.length;return u<0||u>=l?e?\"\":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):o:e?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)}},function(e,t,r){var n=r(4),i=r(27),o=r(61);n({target:\"Object\",stat:!0,forced:r(8)((function(){o(1)}))},{keys:function(e){return o(i(e))}})},function(e,t,r){\"use strict\";var n=r(4),i=r(11),o=r(123),a=r(25),s=r(140),u=r(141),l=r(142),c=r(13),h=r(8),p=r(208),f=r(62),d=r(209);e.exports=function(e,t,r){var m=-1!==e.indexOf(\"Map\"),y=-1!==e.indexOf(\"Weak\"),v=m?\"set\":\"add\",_=i[e],g=_&&_.prototype,b=_,x={},w=function(e){var t=g[e];a(g,e,\"add\"==e?function(e){return t.call(this,0===e?0:e),this}:\"delete\"==e?function(e){return!(y&&!c(e))&&t.call(this,0===e?0:e)}:\"get\"==e?function(e){return y&&!c(e)?void 0:t.call(this,0===e?0:e)}:\"has\"==e?function(e){return!(y&&!c(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(o(e,\"function\"!=typeof _||!(y||g.forEach&&!h((function(){(new _).entries().next()})))))b=r.getConstructor(t,e,m,v),s.REQUIRED=!0;else if(o(e,!0)){var E=new b,D=E[v](y?{}:-0,1)!=E,S=h((function(){E.has(1)})),C=p((function(e){new _(e)})),A=!y&&h((function(){for(var e=new _,t=5;t--;)e[v](t,t);return!e.has(-0)}));C||((b=t((function(t,r){l(t,b,e);var n=d(new _,t,b);return null!=r&&u(r,n[v],n,m),n}))).prototype=g,g.constructor=b),(S||A)&&(w(\"delete\"),w(\"has\"),m&&w(\"get\")),(A||D)&&w(v),y&&g.clear&&delete g.clear}return x[e]=b,n({global:!0,forced:b!=_},x),f(b,e),y||r.setStrong(b,e,m),b}},function(e,t,r){var n=r(45),i=r(13),o=r(14),a=r(15).f,s=r(58),u=r(204),l=s(\"meta\"),c=0,h=Object.isExtensible||function(){return!0},p=function(e){a(e,l,{value:{objectID:\"O\"+ ++c,weakData:{}}})},f=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!i(e))return\"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!o(e,l)){if(!h(e))return\"F\";if(!t)return\"E\";p(e)}return e[l].objectID},getWeakData:function(e,t){if(!o(e,l)){if(!h(e))return!0;if(!t)return!1;p(e)}return e[l].weakData},onFreeze:function(e){return u&&f.REQUIRED&&h(e)&&!o(e,l)&&p(e),e}};n[l]=!0},function(e,t,r){var n=r(18),i=r(205),o=r(26),a=r(87),s=r(206),u=r(207),l=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,t,r,c,h){var p,f,d,m,y,v,_,g=a(t,r,c?2:1);if(h)p=e;else{if(\"function\"!=typeof(f=s(e)))throw TypeError(\"Target is not iterable\");if(i(f)){for(d=0,m=o(e.length);m>d;d++)if((y=c?g(n(_=e[d])[0],_[1]):g(e[d]))&&y instanceof l)return y;return new l(!1)}p=f.call(e)}for(v=p.next;!(_=v.call(p)).done;)if(\"object\"==typeof(y=u(p,g,_.value,c))&&y&&y instanceof l)return y;return new l(!1)}).stop=function(e){return new l(!0,e)}},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError(\"Incorrect \"+(r?r+\" \":\"\")+\"invocation\");return e}},function(e,t,r){\"use strict\";var n=r(15).f,i=r(60),o=r(210),a=r(87),s=r(142),u=r(141),l=r(88),c=r(211),h=r(16),p=r(140).fastKey,f=r(43),d=f.set,m=f.getterFor;e.exports={getConstructor:function(e,t,r,l){var c=e((function(e,n){s(e,c,t),d(e,{type:t,index:i(null),first:void 0,last:void 0,size:0}),h||(e.size=0),null!=n&&u(n,e[l],e,r)})),f=m(t),y=function(e,t,r){var n,i,o=f(e),a=v(e,t);return a?a.value=r:(o.last=a={index:i=p(t,!0),key:t,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=a),n&&(n.next=a),h?o.size++:e.size++,\"F\"!==i&&(o.index[i]=a)),e},v=function(e,t){var r,n=f(e),i=p(t);if(\"F\"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key==t)return r};return o(c.prototype,{clear:function(){for(var e=f(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,h?e.size=0:this.size=0},delete:function(e){var t=f(this),r=v(this,e);if(r){var n=r.next,i=r.previous;delete t.index[r.index],r.removed=!0,i&&(i.next=n),n&&(n.previous=i),t.first==r&&(t.first=n),t.last==r&&(t.last=i),h?t.size--:this.size--}return!!r},forEach:function(e){for(var t,r=f(this),n=a(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!v(this,e)}}),o(c.prototype,r?{get:function(e){var t=v(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),h&&n(c.prototype,\"size\",{get:function(){return f(this).size}}),c},setStrong:function(e,t,r){var n=t+\" Iterator\",i=m(t),o=m(n);l(e,t,(function(e,t){d(this,{type:n,target:e,state:i(e),kind:t,last:void 0})}),(function(){for(var e=o(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?\"keys\"==t?{value:r.key,done:!1}:\"values\"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?\"entries\":\"values\",!r,!0),c(t)}}},function(e,t,r){\"use strict\";var n,i=r(4),o=r(55).f,a=r(26),s=r(222),u=r(35),l=r(224),c=r(44),h=\"\".endsWith,p=Math.min,f=l(\"endsWith\");i({target:\"String\",proto:!0,forced:!!(c||f||(n=o(String.prototype,\"endsWith\"),!n||n.writable))&&!f},{endsWith:function(e){var t=String(u(this));s(e);var r=arguments.length>1?arguments[1]:void 0,n=a(t.length),i=void 0===r?n:p(a(r),n),o=String(e);return h?h.call(t,o,i):t.slice(i-o.length,i)===o}})},function(e,t,r){\"use strict\";(function(e){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\nvar n=r(229),i=r(230),o=r(231);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError(\"Invalid typed array length\");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if(\"number\"==typeof e){if(\"string\"==typeof t)throw new Error(\"If encoding is specified then the first argument must be a string\");return h(this,e)}return l(this,e,t,r)}function l(e,t,r,n){if(\"number\"==typeof t)throw new TypeError('\"value\" argument must not be a number');return\"undefined\"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError(\"'offset' is out of bounds\");if(t.byteLength<r+(n||0))throw new RangeError(\"'length' is out of bounds\");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,r,n):\"string\"==typeof t?function(e,t,r){\"string\"==typeof r&&\"\"!==r||(r=\"utf8\");if(!u.isEncoding(r))throw new TypeError('\"encoding\" must be a valid string encoding');var n=0|d(t,r),i=(e=s(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|f(t.length);return 0===(e=s(e,r)).length||t.copy(e,0,0,r),e}if(t){if(\"undefined\"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||\"length\"in t)return\"number\"!=typeof t.length||(n=t.length)!=n?s(e,0):p(e,t);if(\"Buffer\"===t.type&&o(t.data))return p(e,t.data)}var n;throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\")}(e,t)}function c(e){if(\"number\"!=typeof e)throw new TypeError('\"size\" argument must be a number');if(e<0)throw new RangeError('\"size\" argument must not be negative')}function h(e,t){if(c(t),e=s(e,t<0?0:0|f(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|f(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function f(e){if(e>=a())throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+a().toString(16)+\" bytes\");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if(\"undefined\"!=typeof ArrayBuffer&&\"function\"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;\"string\"!=typeof e&&(e=\"\"+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case\"ascii\":case\"latin1\":case\"binary\":return r;case\"utf8\":case\"utf-8\":case void 0:return z(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*r;case\"hex\":return r>>>1;case\"base64\":return U(e).length;default:if(n)return z(e).length;t=(\"\"+t).toLowerCase(),n=!0}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return\"\";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return\"\";if((r>>>=0)<=(t>>>=0))return\"\";for(e||(e=\"utf8\");;)switch(e){case\"hex\":return T(this,t,r);case\"utf8\":case\"utf-8\":return C(this,t,r);case\"ascii\":return A(this,t,r);case\"latin1\":case\"binary\":return N(this,t,r);case\"base64\":return S(this,t,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return O(this,t,r);default:if(n)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase(),n=!0}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,i){if(0===e.length)return-1;if(\"string\"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if(\"string\"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:_(e,t,r,n,i);if(\"number\"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&\"function\"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):_(e,[t],r,n,i);throw new TypeError(\"val must be string, number or Buffer\")}function _(e,t,r,n,i){var o,a=1,s=e.length,u=t.length;if(void 0!==n&&(\"ucs2\"===(n=String(n).toLowerCase())||\"ucs-2\"===n||\"utf16le\"===n||\"utf-16le\"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var c=-1;for(o=r;o<s;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var h=!0,p=0;p<u;p++)if(l(e,o+p)!==l(t,p)){h=!1;break}if(h)return o}return-1}function g(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError(\"Invalid hex string\");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function b(e,t,r,n){return G(z(t,e.length-r),e,r,n)}function x(e,t,r,n){return G(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return x(e,t,r,n)}function E(e,t,r,n){return G(U(t),e,r,n)}function D(e,t,r,n){return G(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function S(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function C(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,u,l=e[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=r)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(u=(15&l)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=h}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r=\"\",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&\"function\"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return l(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,\"undefined\"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return c(t),t<=0?s(e,t):void 0!==r?\"string\"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError(\"Arguments must be Buffers\");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('\"list\" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!u.isBuffer(a))throw new TypeError('\"list\" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?\"\":0===arguments.length?C(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e=\"\",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString(\"hex\",0,r).match(/.{2}/g).join(\" \"),this.length>r&&(e+=\" ... \")),\"<Buffer \"+e+\">\"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError(\"out of range index\");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),l=this.slice(n,i),c=e.slice(t,r),h=0;h<s;++h)if(l[h]!==c[h]){o=l[h],a=c[h];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n=\"utf8\",r=this.length,t=0;else if(void 0===r&&\"string\"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");t|=0,isFinite(r)?(r|=0,void 0===n&&(n=\"utf8\")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError(\"Attempt to write outside buffer bounds\");n||(n=\"utf8\");for(var o=!1;;)switch(n){case\"hex\":return g(this,e,t,r);case\"utf8\":case\"utf-8\":return b(this,e,t,r);case\"ascii\":return x(this,e,t,r);case\"latin1\":case\"binary\":return w(this,e,t,r);case\"base64\":return E(this,e,t,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return D(this,e,t,r);default:if(o)throw new TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function A(e,t,r){var n=\"\";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function N(e,t,r){var n=\"\";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function T(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i=\"\",o=t;o<r;++o)i+=R(e[o]);return i}function O(e,t,r){for(var n=e.slice(t,r),i=\"\",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function F(e,t,r){if(e%1!=0||e<0)throw new RangeError(\"offset is not uint\");if(e+t>r)throw new RangeError(\"Trying to access beyond buffer length\")}function k(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('\"value\" argument is out of bounds');if(r+n>e.length)throw new RangeError(\"Index out of range\")}function P(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function I(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function L(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError(\"Index out of range\");if(r<0)throw new RangeError(\"Index out of range\")}function M(e,t,r,n,o){return o||L(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function B(e,t,r,n,o){return o||L(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||F(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||F(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||F(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||F(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||F(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||F(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||F(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||F(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||F(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||F(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||F(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||F(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||F(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||F(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||k(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||k(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):I(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);k(this,e,t,r,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);k(this,e,t,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):I(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return M(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return M(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return B(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return B(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError(\"targetStart out of bounds\");if(r<0||r>=this.length)throw new RangeError(\"sourceStart out of bounds\");if(n<0)throw new RangeError(\"sourceEnd out of bounds\");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},u.prototype.fill=function(e,t,r,n){if(\"string\"==typeof e){if(\"string\"==typeof t?(n=t,t=0,r=this.length):\"string\"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&\"string\"!=typeof n)throw new TypeError(\"encoding must be a string\");if(\"string\"==typeof n&&!u.isEncoding(n))throw new TypeError(\"Unknown encoding: \"+n)}else\"number\"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError(\"Out of range index\");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),\"number\"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=u.isBuffer(e)?e:z(new u(e,n).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var j=/[^+\\/0-9A-Za-z-_]/g;function R(e){return e<16?\"0\"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error(\"Invalid code point\");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\\s+|\\s+$/g,\"\")}(e).replace(j,\"\")).length<2)return\"\";for(;e.length%4!=0;)e+=\"=\";return e}(e))}function G(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(78))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.isASCIIByte=function(e){return e>=0&&e<=127}},function(e,t,r){\"use strict\";var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0}),t.length=function(e){return e.length},t.byteLowercase=function(e){for(var t=0;t<e.length;t++){var r=e[t];r>=65&&r<=90&&(e[t]=r+32)}},t.byteUppercase=function(e){for(var t=0;t<e.length;t++){var r=e[t];r>=97&&r<=122&&(e[t]=r-32)}},t.byteCaseInsensitiveMatch=function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++){var n=e[r],i=t[r];if(n>=65&&n<=90&&(n+=32),i>=65&&i<=90&&(i+=32),n!==i)return!1}return!0},t.startsWith=function(e,t){for(var r=0;;){if(r>=e.length)return!1;if(r>=t.length)return!0;if(e[r]!==t[r])return!1;r++}},t.byteLessThan=function(e,t){for(var r=0;;){if(r>=e.length)return!1;if(r>=t.length)return!0;var n=e[r],i=t[r];if(n<i)return!0;if(n>i)return!1;r++}},t.isomorphicDecode=function(e){return String.fromCodePoint.apply(String,i(e))}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(6),i=r(7),o=r(0),a=r(12),s=function(){function e(e){this._associatedDocument=e||n.dom.window.document}return e.prototype.createDocumentType=function(e,t,r){return o.namespace_validate(e),o.create_documentType(this._associatedDocument,e,t,r)},e.prototype.createDocument=function(e,t,r){void 0===r&&(r=null);var n=o.create_xmlDocument(),a=null;return t&&(a=o.document_internalCreateElementNS(n,e,t)),r&&n.appendChild(r),a&&n.appendChild(a),n._origin=this._associatedDocument._origin,e===i.namespace.HTML?n._contentType=\"application/xhtml+xml\":e===i.namespace.SVG?n._contentType=\"image/svg+xml\":n._contentType=\"application/xml\",n},e.prototype.createHTMLDocument=function(e){var t=o.create_document();t._type=\"html\",t._contentType=\"text/html\",t.appendChild(o.create_documentType(t,\"html\",\"\",\"\"));var r=o.element_createAnElement(t,\"html\",i.namespace.HTML);t.appendChild(r);var n=o.element_createAnElement(t,\"head\",i.namespace.HTML);if(r.appendChild(n),void 0!==e){var a=o.element_createAnElement(t,\"title\",i.namespace.HTML);n.appendChild(a);var s=o.create_text(t,e);a.appendChild(s)}var u=o.element_createAnElement(t,\"body\",i.namespace.HTML);return r.appendChild(u),t._origin=this._associatedDocument._origin,t},e.prototype.hasFeature=function(){return!0},e._create=function(t){return new e(t)},e}();t.DOMImplementationImpl=s,a.idl_defineConst(s.prototype,\"_ID\",\"@oozcitak/dom\")},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(70),a=r(1),s=r(0),u=function(e){function t(){var t=e.call(this)||this;return t._signalSlots=new Set,t._mutationObserverMicrotaskQueued=!1,t._mutationObservers=new Set,t._iteratorList=new a.FixedSizeSet,t._associatedDocument=s.create_document(),t}return i(t,e),Object.defineProperty(t.prototype,\"document\",{get:function(){return this._associatedDocument},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"event\",{get:function(){return this._currentEvent},enumerable:!0,configurable:!0}),t._create=function(){return new t},t}(o.EventTargetImpl);t.WindowImpl=u},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=function(){function e(){}return e.isNode=function(e){return!!e&&void 0!==e._nodeType},e.isDocumentNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Document},e.isDocumentTypeNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.DocumentType},e.isDocumentFragmentNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.DocumentFragment},e.isAttrNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Attribute},e.isCharacterDataNode=function(t){if(!e.isNode(t))return!1;var r=t._nodeType;return r===n.NodeType.Text||r===n.NodeType.ProcessingInstruction||r===n.NodeType.Comment||r===n.NodeType.CData},e.isTextNode=function(t){return e.isNode(t)&&(t._nodeType===n.NodeType.Text||t._nodeType===n.NodeType.CData)},e.isExclusiveTextNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Text},e.isCDATASectionNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.CData},e.isCommentNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Comment},e.isProcessingInstructionNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.ProcessingInstruction},e.isElementNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Element},e.isCustomElementNode=function(t){return e.isElementNode(t)&&\"custom\"===t._customElementState},e.isShadowRoot=function(e){return!!e&&void 0!==e.host},e.isMouseEvent=function(e){return!!e&&void 0!==e.screenX&&null!=e.screenY},e.isSlotable=function(t){return!!t&&void 0!==t._name&&void 0!==t._assignedSlot&&(e.isTextNode(t)||e.isElementNode(t))},e.isSlot=function(t){return!!t&&void 0!==t._name&&void 0!==t._assignedNodes&&e.isElementNode(t)},e.isWindow=function(e){return!!e&&void 0!==e.navigator},e.isEventListener=function(e){return!!e&&void 0!==e.handleEvent},e.isRegisteredObserver=function(e){return!!e&&void 0!==e.observer&&void 0!==e.options},e.isTransientRegisteredObserver=function(t){return!!t&&void 0!==t.source&&e.isRegisteredObserver(t)},e}();t.Guard=i},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(e){function t(){return e.call(this)||this}return i(t,e),t}(r(98).DocumentImpl);t.XMLDocumentImpl=o},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var o,a=r(1),s=r(243),u=r(7),l=r(244),c={ftp:21,file:null,http:80,https:443,ws:80,wss:443},h=/[\\0-\\x1F\\x7F-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/,p=/[ \"<>`]|[\\0-\\x1F\\x7F-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/,f=/[ \"<>`#?{}]|[\\0-\\x1F\\x7F-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/,d=/[ \"<>`#?{}/:;=@\\[\\]\\\\\\^\\|]|[\\0-\\x1F\\x7F-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/,m=/[0-9A-Za-z!\\$&-\\/:;=\\?@_~\\xA0-\\uD7FF\\uE000-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uD83E\\uD840-\\uD87E\\uD880-\\uD8BE\\uD8C0-\\uD8FE\\uD900-\\uD93E\\uD940-\\uD97E\\uD980-\\uD9BE\\uD9C0-\\uD9FE\\uDA00-\\uDA3E\\uDA40-\\uDA7E\\uDA80-\\uDABE\\uDAC0-\\uDAFE\\uDB00-\\uDB3E\\uDB40-\\uDB7E\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]/,y=/[\\0\\t\\f\\r #%/:?@\\[\\\\\\]]/;function v(e){void 0!==o&&o.call(null,\"Validation Error: \"+e)}function _(){return{scheme:\"\",username:\"\",password:\"\",host:null,port:null,path:[],query:null,fragment:null,_cannotBeABaseURLFlag:!1,_blobURLEntry:null}}function g(e){return e in c}function b(e){return g(e.scheme)}function x(e){return c[e]||null}function w(e){return\"\"!==e.username||\"\"!==e.password}function E(e,t){var r,i;void 0===t&&(t=!1);var o=e.scheme+\":\";if(null!==e.host?(o+=\"//\",w(e)&&(o+=e.username,\"\"!==e.password&&(o+=\":\"+e.password),o+=\"@\"),o+=D(e.host),null!==e.port&&(o+=\":\"+e.port)):null===e.host&&\"file\"===e.scheme&&(o+=\"//\"),e._cannotBeABaseURLFlag)o+=e.path[0];else try{for(var a=n(e.path),s=a.next();!s.done;s=a.next()){o+=\"/\"+s.value}}catch(e){r={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}return null!==e.query&&(o+=\"?\"+e.query),t||null===e.fragment||(o+=\"#\"+e.fragment),o}function D(e){return a.isNumber(e)?S(e):a.isArray(e)?\"[\"+C(e)+\"]\":e}function S(e){for(var t=\"\",r=e,n=1;n<=4;n++)t=(r%256).toString()+t,4!==n&&(t=\".\"+t),r=Math.floor(r/256);return t}function C(e){for(var t=\"\",r=null,n=-1,i=0,o=0,a=0;a<8;a++)if(0===e[a]){i=1;for(var s=a+1;s<8&&0===e[s];s++)i++;i>o&&(o=i,n=a)}o>1&&(r=n);for(var u=!1,l=0;l<8;l++)u&&0===e[l]||(u&&(u=!1),r!==l?(t+=e[l].toString(16),7!==l&&(t+=\":\")):(t+=0===l?\"::\":\":\",u=!0));return t}function A(e,t,r,i,o){var l,c,y,_;if(void 0===i){i={scheme:\"\",username:\"\",password:\"\",host:null,port:null,path:[],query:null,fragment:null,_cannotBeABaseURLFlag:!1,_blobURLEntry:null};var E=/^[\\u0000-\\u001F\\u0020]+/,D=/[\\u0000-\\u001F\\u0020]+$/;(E.test(e)||D.test(e))&&v(\"Input string contains leading or trailing control characters or space.\"),e=(e=e.replace(E,\"\")).replace(D,\"\")}var S=/[\\u0009\\u000A\\u000D]/g;S.test(e)&&v(\"Input string contains tab or newline characters.\"),e=e.replace(S,\"\");var C=void 0===o?s.ParserState.SchemeStart:o;void 0===t&&(t=null);for(var A=void 0===r||\"replacement\"===r||\"UTF-16BE\"===r||\"UTF-16LE\"===r?\"UTF-8\":r,L=\"\",M=!1,B=!1,j=!1,R=new a.StringWalker(e);;){switch(C){case s.ParserState.SchemeStart:if(u.codePoint.ASCIIAlpha.test(R.c()))L+=R.c().toLowerCase(),C=s.ParserState.Scheme;else{if(void 0!==o)return v(\"Invalid scheme start character.\"),null;C=s.ParserState.NoScheme,R.pointer--}break;case s.ParserState.Scheme:if(u.codePoint.ASCIIAlphanumeric.test(R.c())||\"+\"===R.c()||\"-\"===R.c()||\".\"===R.c())L+=R.c().toLowerCase();else{if(\":\"!==R.c()){if(void 0===o){L=\"\",C=s.ParserState.NoScheme,R.pointer=0;continue}return v(\"Invalid input string.\"),null}if(void 0!==o){if(g(i.scheme)&&!g(L))return i;if(!g(i.scheme)&&g(L))return i;if((w(i)||null!==i.port)&&\"file\"===L)return i;if(\"file\"===i.scheme&&(\"\"===i.host||null===i.host))return i}if(i.scheme=L,void 0!==o)return i.port===x(i.scheme)&&(i.port=null),i;L=\"\",\"file\"===i.scheme?(R.remaining().startsWith(\"//\")||v(\"Invalid file URL scheme, '//' expected.\"),C=s.ParserState.File):b(i)&&null!==t&&t.scheme===i.scheme?C=s.ParserState.SpecialRelativeOrAuthority:b(i)?C=s.ParserState.SpecialAuthoritySlashes:R.remaining().startsWith(\"/\")?(C=s.ParserState.PathOrAuthority,R.pointer++):(i._cannotBeABaseURLFlag=!0,i.path.push(\"\"),C=s.ParserState.CannotBeABaseURLPath)}break;case s.ParserState.NoScheme:if(null===t||t._cannotBeABaseURLFlag&&\"#\"!==R.c())return v(\"Invalid input string.\"),null;t._cannotBeABaseURLFlag&&\"#\"===R.c()?(i.scheme=t.scheme,i.path=u.list.clone(t.path),i.query=t.query,i.fragment=\"\",i._cannotBeABaseURLFlag=!0,C=s.ParserState.Fragment):\"file\"!==t.scheme?(C=s.ParserState.Relative,R.pointer--):(C=s.ParserState.File,R.pointer--);break;case s.ParserState.SpecialRelativeOrAuthority:\"/\"===R.c()&&R.remaining().startsWith(\"/\")?(C=s.ParserState.SpecialAuthorityIgnoreSlashes,R.pointer++):(v(\"Invalid input string.\"),C=s.ParserState.Relative,R.pointer--);break;case s.ParserState.PathOrAuthority:\"/\"===R.c()?C=s.ParserState.Authority:(C=s.ParserState.Path,R.pointer--);break;case s.ParserState.Relative:if(null===t)throw new Error(\"Invalid parser state. Base URL is null.\");switch(i.scheme=t.scheme,R.c()){case\"\":i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),i.query=t.query;break;case\"/\":C=s.ParserState.RelativeSlash;break;case\"?\":i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),i.query=\"\",C=s.ParserState.Query;break;case\"#\":i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),i.query=t.query,i.fragment=\"\",C=s.ParserState.Fragment;break;default:b(i)&&\"\\\\\"===R.c()?(v(\"Invalid input string.\"),C=s.ParserState.RelativeSlash):(i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),0!==i.path.length&&i.path.splice(i.path.length-1,1),C=s.ParserState.Path,R.pointer--)}break;case s.ParserState.RelativeSlash:if(!b(i)||\"/\"!==R.c()&&\"\\\\\"!==R.c())if(\"/\"===R.c())C=s.ParserState.Authority;else{if(null===t)throw new Error(\"Invalid parser state. Base URL is null.\");i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,C=s.ParserState.Path,R.pointer--}else\"\\\\\"===R.c()&&v(\"Invalid input string.\"),C=s.ParserState.SpecialAuthorityIgnoreSlashes;break;case s.ParserState.SpecialAuthoritySlashes:\"/\"===R.c()&&R.remaining().startsWith(\"/\")?(C=s.ParserState.SpecialAuthorityIgnoreSlashes,R.pointer++):(v(\"Expected '//'.\"),C=s.ParserState.SpecialAuthorityIgnoreSlashes,R.pointer--);break;case s.ParserState.SpecialAuthorityIgnoreSlashes:\"/\"!==R.c()&&\"\\\\\"!==R.c()?(C=s.ParserState.Authority,R.pointer--):v(\"Unexpected '/' or '\\\\'.\");break;case s.ParserState.Authority:if(\"@\"===R.c()){v(\"Unexpected '@'.\"),M&&(L=\"%40\"+L),M=!0;try{for(var U=(l=void 0,n(L)),G=U.next();!G.done;G=U.next()){var q=G.value;if(\":\"!==q||j){var W=X(q,d);j?i.password+=W:i.username+=W}else j=!0}}catch(e){l={error:e}}finally{try{G&&!G.done&&(c=U.return)&&c.call(U)}finally{if(l)throw l.error}}L=\"\"}else if(\"\"===R.c()||\"/\"===R.c()||\"?\"===R.c()||\"#\"===R.c()||b(i)&&\"\\\\\"===R.c()){if(M&&\"\"===L)return v(\"Invalid input string.\"),null;R.pointer-=L.length+1,L=\"\",C=s.ParserState.Host}else L+=R.c();break;case s.ParserState.Host:case s.ParserState.Hostname:if(void 0!==o&&\"file\"===i.scheme)R.pointer--,C=s.ParserState.FileHost;else if(\":\"!==R.c()||B)if(\"\"===R.c()||\"/\"===R.c()||\"?\"===R.c()||\"#\"===R.c()||b(i)&&\"\\\\\"===R.c()){if(R.pointer--,b(i)&&\"\"===L)return v(\"Invalid input string.\"),null;if(void 0!==o&&\"\"===L&&(w(i)||null!==i.port))return v(\"Invalid input string.\"),i;if(null===(J=I(L,!b(i))))return null;if(i.host=J,L=\"\",C=s.ParserState.PathStart,void 0!==o)return i}else\"[\"===R.c()&&(B=!0),\"]\"===R.c()&&(B=!1),L+=R.c();else{if(\"\"===L)return v(\"Invalid input string.\"),null;if(null===(J=I(L,!b(i))))return null;if(i.host=J,L=\"\",C=s.ParserState.Port,o===s.ParserState.Hostname)return i}break;case s.ParserState.Port:if(u.codePoint.ASCIIDigit.test(R.c()))L+=R.c();else{if(!(\"\"===R.c()||\"/\"===R.c()||\"?\"===R.c()||\"#\"===R.c()||b(i)&&\"\\\\\"===R.c()||o))return v(\"Invalid input string.\"),null;if(\"\"!==L&&\"\"!==L){var H=parseInt(L,10);if(H>Math.pow(2,16)-1)return v(\"Invalid port number.\"),null;i.port=H===x(i.scheme)?null:H,L=\"\"}if(void 0!==o)return i;C=s.ParserState.PathStart,R.pointer--}break;case s.ParserState.File:if(i.scheme=\"file\",\"/\"===R.c()||\"\\\\\"===R.c())\"\\\\\"===R.c()&&v(\"Invalid input string.\"),C=s.ParserState.FileSlash;else if(null!==t&&\"file\"===t.scheme)switch(R.c()){case\"\":i.host=t.host,i.path=u.list.clone(t.path),i.query=t.query;break;case\"?\":i.host=t.host,i.path=u.list.clone(t.path),i.query=\"\",C=s.ParserState.Query;break;case\"#\":i.host=t.host,i.path=u.list.clone(t.path),i.query=t.query,i.fragment=\"\",C=s.ParserState.Fragment;break;default:P(R.substring())?v(\"Unexpected windows drive letter in input string.\"):(i.host=t.host,i.path=u.list.clone(t.path),O(i)),C=s.ParserState.Path,R.pointer--}else C=s.ParserState.Path,R.pointer--;break;case s.ParserState.FileSlash:\"/\"===R.c()||\"\\\\\"===R.c()?(\"\\\\\"===R.c()&&v(\"Invalid input string.\"),C=s.ParserState.FileHost):(null===t||\"file\"!==t.scheme||P(R.substring())||(F(t.path[0])?i.path.push(t.path[0]):i.host=t.host),C=s.ParserState.Path,R.pointer--);break;case s.ParserState.FileHost:if(\"\"===R.c()||\"/\"===R.c()||\"\\\\\"===R.c()||\"?\"===R.c()||\"#\"===R.c())if(R.pointer--,void 0===o&&k(L))v(\"Unexpected windows drive letter in input string.\"),C=s.ParserState.Path;else if(\"\"===L){if(i.host=\"\",void 0!==o)return i;C=s.ParserState.PathStart}else{var J;if(null===(J=I(L,!b(i))))return null;if(\"localhost\"===J&&(J=\"\"),i.host=J,void 0!==o)return i;L=\"\",C=s.ParserState.PathStart}else L+=R.c();break;case s.ParserState.PathStart:b(i)?(\"\\\\\"===R.c()&&v(\"Invalid input string.\"),C=s.ParserState.Path,\"/\"!==R.c()&&\"\\\\\"!==R.c()&&R.pointer--):void 0===o&&\"?\"===R.c()?(i.query=\"\",C=s.ParserState.Query):void 0===o&&\"#\"===R.c()?(i.fragment=\"\",C=s.ParserState.Fragment):\"\"!==R.c()&&(C=s.ParserState.Path,\"/\"!==R.c()&&R.pointer--);break;case s.ParserState.Path:if(\"\"===R.c()||\"/\"===R.c()||b(i)&&\"\\\\\"===R.c()||void 0===o&&(\"?\"===R.c()||\"#\"===R.c())){if(b(i)&&\"\\\\\"===R.c()&&v(\"Invalid input string.\"),T(L))O(i),\"/\"===R.c()||b(i)&&\"\\\\\"===R.c()||i.path.push(\"\");else if(!N(L)||\"/\"===R.c()||b(i)&&\"\\\\\"===R.c()){if(!N(L)){if(\"file\"===i.scheme&&0===i.path.length&&k(L)){null!==i.host&&\"\"!==i.host&&(v(\"Invalid input string.\"),i.host=\"\");var Y=Array.from(L);L=Y.slice(0,1)+\":\"+Y.slice(2)}i.path.push(L)}}else i.path.push(\"\");if(L=\"\",\"file\"===i.scheme&&(\"\"===R.c()||\"?\"===R.c()||\"#\"===R.c()))for(;i.path.length>1&&\"\"===i.path[0];)v(\"Invalid input string.\"),i.path.splice(0,1);\"?\"===R.c()&&(i.query=\"\",C=s.ParserState.Query),\"#\"===R.c()&&(i.fragment=\"\",C=s.ParserState.Fragment)}else m.test(R.c())||\"%\"===R.c()||v(\"Character is not a URL code point or a percent encoded character.\"),\"%\"!==R.c()||/^[0-9a-fA-F][0-9a-fA-F]/.test(R.remaining())||v(\"Percent encoded character must be followed by two hex digits.\"),L+=X(R.c(),f);break;case s.ParserState.CannotBeABaseURLPath:\"?\"===R.c()?(i.query=\"\",C=s.ParserState.Query):\"#\"===R.c()?(i.fragment=\"\",C=s.ParserState.Fragment):(\"\"===R.c()||m.test(R.c())||\"%\"===R.c()||v(\"Character is not a URL code point or a percent encoded character.\"),\"%\"!==R.c()||/^[0-9a-fA-F][0-9a-fA-F]/.test(R.remaining())||v(\"Percent encoded character must be followed by two hex digits.\"),\"\"!==R.c()&&(i.path[0]+=X(R.c(),h)));break;case s.ParserState.Query:if(\"UTF-8\"===A||b(i)&&\"ws\"!==i.scheme&&\"wss\"!==i.scheme||(A=\"UTF-8\"),void 0===o&&\"#\"===R.c())i.fragment=\"\",C=s.ParserState.Fragment;else if(\"\"!==R.c()){if(m.test(R.c())||\"%\"===R.c()||v(\"Character is not a URL code point or a percent encoded character.\"),\"%\"!==R.c()||/^[0-9a-fA-F][0-9a-fA-F]/.test(R.remaining())||v(\"Percent encoded character must be followed by two hex digits.\"),\"UTF-8\"!==A.toUpperCase())throw new Error(\"Only UTF-8 encoding is supported.\");var V=a.utf8Encode(R.c());if(V.length>=3&&38===V[0]&&35===V[1]&&59===V[V.length-1])V=V.subarray(2,V.length-1),i.query+=\"%26%23\"+u.byteSequence.isomorphicDecode(V)+\"%3B\";else try{for(var K=(y=void 0,n(V)),$=K.next();!$.done;$=K.next()){var Q=$.value;Q<33||Q>126||34===Q||35===Q||60===Q||62===Q||39===Q&&b(i)?i.query+=z(Q):i.query+=String.fromCharCode(Q)}}catch(e){y={error:e}}finally{try{$&&!$.done&&(_=K.return)&&_.call(K)}finally{if(y)throw y.error}}}break;case s.ParserState.Fragment:\"\"===R.c()||(\"\\0\"===R.c()?v(\"NULL character in input string.\"):(m.test(R.c())||\"%\"===R.c()||v(\"Unexpected character in fragment string.\"),\"%\"!==R.c()||/^[A-Za-z0-9][A-Za-z0-9]/.test(R.remaining())||v(\"Unexpected character in fragment string.\"),i.fragment+=X(R.c(),p)))}if(R.eof)break;R.pointer++}return i}function N(e){return\".\"===e||\"%2e\"===e.toLowerCase()}function T(e){var t=e.toLowerCase();return\"..\"===t||\".%2e\"===t||\"%2e.\"===t||\"%2e%2e\"===t}function O(e){var t=e.path;0!==t.length&&(\"file\"===e.scheme&&1===t.length&&F(t[0])||e.path.splice(e.path.length-1,1))}function F(e){return e.length>=2&&u.codePoint.ASCIIAlpha.test(e[0])&&\":\"===e[1]}function k(e){return e.length>=2&&u.codePoint.ASCIIAlpha.test(e[0])&&(\":\"===e[1]||\"|\"===e[1])}function P(e){return e.length>=2&&k(e)&&(2===e.length||\"/\"===e[2]||\"\\\\\"===e[2]||\"?\"===e[2]||\"#\"===e[2])}function I(e,t){if(void 0===t&&(t=!1),e.startsWith(\"[\"))return e.endsWith(\"]\")?B(e.substring(1,e.length-1)):(v(\"Expected ']' after '['.\"),null);if(t)return j(e);var r=H(a.utf8Decode(G(e)));if(null===r)return v(\"Invalid domain.\"),null;if(y.test(r))return v(\"Invalid domain.\"),null;var n=M(r);return null===n||a.isNumber(n)?n:r}function L(e,t){void 0===t&&(t={value:!1});var r=10;return e.startsWith(\"0x\")||e.startsWith(\"0X\")?(t.value=!0,e=e.substr(2),r=16):e.length>=2&&\"0\"===e[0]&&(t.value=!0,e=e.substr(1),r=8),\"\"===e?0:(10===r?/^[0-9]+$/:16===r?/^[0-9A-Fa-f]+$/:/^[0-7]+$/).test(e)?parseInt(e,r):null}function M(e){var t,r,i,o,a={value:!1},s=e.split(\".\");if(\"\"===s[s.length-1]&&(a.value=!0,s.length>1&&s.pop()),s.length>4)return e;var u=[];try{for(var l=n(s),c=l.next();!c.done;c=l.next()){var h=c.value;if(\"\"===h)return e;if(null===(_=L(h,a)))return e;u.push(_)}}catch(e){t={error:e}}finally{try{c&&!c.done&&(r=l.return)&&r.call(l)}finally{if(t)throw t.error}}a.value&&v(\"Invalid IP v4 address.\");for(var p=0;p<u.length;p++){if(u[p]>255&&(v(\"Invalid IP v4 address.\"),p<u.length-1))return null}if(u[u.length-1]>=Math.pow(256,5-u.length))return v(\"Invalid IP v4 address.\"),null;var f=u[u.length-1];u.pop();var d=0;try{for(var m=n(u),y=m.next();!y.done;y=m.next()){var _;f+=(_=y.value)*Math.pow(256,3-d),d++}}catch(e){i={error:e}}finally{try{y&&!y.done&&(o=m.return)&&o.call(m)}finally{if(i)throw i.error}}return f}function B(e){var t,r=[0,0,0,0,0,0,0,0],n=0,o=null,s=new a.StringWalker(e);if(\":\"===s.c()){if(!s.remaining().startsWith(\":\"))return v(\"Invalid IP v6 address.\"),null;s.pointer+=2,o=n+=1}for(;\"\"!==s.c();){if(8===n)return v(\"Invalid IP v6 address.\"),null;if(\":\"!==s.c()){for(var l=0,c=0;c<4&&u.codePoint.ASCIIHexDigit.test(s.c());)l=16*l+parseInt(s.c(),16),s.pointer++,c++;if(\".\"===s.c()){if(0===c)return v(\"Invalid IP v6 address.\"),null;if(s.pointer-=c,n>6)return v(\"Invalid IP v6 address.\"),null;for(var h=0;\"\"!==s.c();){var p=null;if(h>0){if(!(\".\"===s.c()&&h<4))return v(\"Invalid IP v6 address.\"),null;s.pointer++}if(!u.codePoint.ASCIIDigit.test(s.c()))return v(\"Invalid IP v6 address.\"),null;for(;u.codePoint.ASCIIDigit.test(s.c());){var f=parseInt(s.c(),10);if(null===p)p=f;else{if(0===p)return v(\"Invalid IP v6 address.\"),null;p=10*p+f}if(p>255)return v(\"Invalid IP v6 address.\"),null;s.pointer++}if(null===p)return v(\"Invalid IP v6 address.\"),null;r[n]=256*r[n]+p,2!==++h&&4!==h||n++}if(4!==h)return v(\"Invalid IP v6 address.\"),null;break}if(\":\"===s.c()){if(s.pointer++,\"\"===s.c())return v(\"Invalid IP v6 address.\"),null}else if(\"\"!==s.c())return v(\"Invalid IP v6 address.\"),null;r[n]=l,n++}else{if(null!==o)return v(\"Invalid IP v6 address.\"),null;s.pointer++,o=++n}}if(null!==o){var d=n-o;for(n=7;0!==n&&d>0;)t=i([r[o+d-1],r[n]],2),r[n]=t[0],r[o+d-1]=t[1],n--,d--}else if(null===o&&8!==n)return v(\"Invalid IP v6 address.\"),null;return r}function j(e){var t,r;if(/[\\x00\\t\\f\\r #/:?@\\[\\\\\\]]/.test(e))return v(\"Invalid host string.\"),null;var i=\"\";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){i+=X(a.value,h)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return i}function R(e){return null}function z(e){return\"%\"+(\"00\"+e.toString(16).toUpperCase()).slice(-2)}function U(e){for(var t=function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},r=new Uint8Array(e.length),n=0,i=0;i<e.length;i++){var o=e[i];if(37!==o)r[n]=o,n++;else if(37===o&&i>=e.length-2)r[n]=o,n++;else if(37!==o||t(e[i+1])&&t(e[i+2])){var s=parseInt(a.utf8Decode(Uint8Array.of(e[i+1],e[i+2])),16);r[n]=s,n++,i+=2}else r[n]=o,n++}return r.subarray(0,n)}function G(e){return U(a.utf8Encode(e))}function X(e,t){var r,i;if(!t.test(e))return e;var o=a.utf8Encode(e),s=\"\";try{for(var u=n(o),l=u.next();!l.done;l=u.next()){s+=z(l.value)}}catch(e){r={error:e}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}return s}function q(e){var t,r,i,o,s=[],u=[];try{for(var l=n(e),c=l.next();!c.done;c=l.next()){var h=c.value;38===h?(s.push(Uint8Array.from(u)),u=[]):u.push(h)}}catch(e){t={error:e}}finally{try{c&&!c.done&&(r=l.return)&&r.call(l)}finally{if(t)throw t.error}}0!==u.length&&s.push(Uint8Array.from(u));var p=[];try{for(var f=n(s),d=f.next();!d.done;d=f.next()){var m=d.value;if(0!==m.length){for(var y=m.indexOf(61),v=-1!==y?m.slice(0,y):m,_=-1!==y?m.slice(y+1):new Uint8Array,g=0;g<v.length;g++)43===v[g]&&(v[g]=32);for(g=0;g<_.length;g++)43===_[g]&&(_[g]=32);var b=a.utf8Decode(v),x=a.utf8Decode(_);p.push([b,x])}}}catch(e){i={error:e}}finally{try{d&&!d.done&&(o=f.return)&&o.call(f)}finally{if(i)throw i.error}}return p}function W(e){var t,r,i=\"\";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value;i+=32===s?\"+\":42===s||45===s||46===s||s>=48&&s<=57||s>=65&&s<=90||95===s||s>=97&&s<=122?String.fromCodePoint(s):z(s)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return i}function H(e,t){void 0===t&&(t=!1);var r=l.domainToASCII(e);return\"\"===r?(v(\"Invalid domain name.\"),null):r}t.setValidationErrorCallback=function(e){o=e},t.newURL=_,t.isSpecialScheme=g,t.isSpecial=b,t.defaultPort=x,t.includesCredentials=w,t.cannotHaveAUsernamePasswordPort=function(e){return null===e.host||\"\"===e.host||e._cannotBeABaseURLFlag||\"file\"===e.scheme},t.urlSerializer=E,t.hostSerializer=D,t.iPv4Serializer=S,t.iPv6Serializer=C,t.urlParser=function(e,t,r){var n=A(e,t,r);return null===n?null:(\"blob\"!==n.scheme||(n._blobURLEntry=null),n)},t.basicURLParser=A,t.setTheUsername=function(e,t){var r,i,o=\"\";try{for(var a=n(t),s=a.next();!s.done;s=a.next()){o+=X(s.value,d)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}e.username=o},t.setThePassword=function(e,t){var r,i,o=\"\";try{for(var a=n(t),s=a.next();!s.done;s=a.next()){o+=X(s.value,d)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}e.password=o},t.isSingleDotPathSegment=N,t.isDoubleDotPathSegment=T,t.shorten=O,t.isNormalizedWindowsDriveLetter=F,t.isWindowsDriveLetter=k,t.startsWithAWindowsDriveLetter=P,t.hostParser=I,t.iPv4NumberParser=L,t.iPv4Parser=M,t.iPv6Parser=B,t.opaqueHostParser=j,t.resolveABlobURL=R,t.percentEncode=z,t.percentDecode=U,t.stringPercentDecode=G,t.utf8PercentEncode=X,t.hostEquals=function(e,t){return e===t},t.urlEquals=function(e,t,r){return void 0===r&&(r=!1),E(e,r)===E(t,r)},t.urlEncodedStringParser=function(e){return q(a.utf8Encode(e))},t.urlEncodedParser=q,t.urlEncodedByteSerializer=W,t.urlEncodedSerializer=function(e,t){var r,i;if(\"UTF-8\"!==(void 0===t||\"replacement\"===t||\"UTF-16BE\"===t||\"UTF-16LE\"===t?\"UTF-8\":t).toUpperCase())throw new Error(\"Only UTF-8 encoding is supported.\");var o=\"\";try{for(var s=n(e),u=s.next();!u.done;u=s.next()){var l=u.value,c=W(a.utf8Encode(l[0])),h=l[1];h=W(a.utf8Encode(h)),\"\"!==o&&(o+=\"&\"),o+=c+\"=\"+h}}catch(e){r={error:e}}finally{try{u&&!u.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}return o},t.origin=function e(t){switch(t.scheme){case\"blob\":t._blobURLEntry;var r=A(t.path[0]);return null===r?s.OpaqueOrigin:e(r);case\"ftp\":case\"http\":case\"https\":case\"ws\":case\"wss\":return[t.scheme,null===t.host?\"\":t.host,t.port,null];case\"file\":default:return s.OpaqueOrigin}},t.domainToASCII=H,t.domainToUnicode=function(e,t){void 0===t&&(t=!1);var r=l.domainToUnicode(e);return\"\"===r&&v(\"Invalid domain name.\"),r},t.asciiSerializationOfAnOrigin=function(e){if(\"\"===e[0]&&\"\"===e[1]&&null===e[2]&&null===e[3])return\"null\";var t=e[0]+\"://\"+D(e[1]);return null!==e[2]&&(t+=\":\"+e[2].toString()),t}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(0),i=function(){function e(){this._signal=n.create_abortSignal()}return Object.defineProperty(e.prototype,\"signal\",{get:function(){return this._signal},enumerable:!0,configurable:!0}),e.prototype.abort=function(){n.abort_signalAbort(this._signal)},e}();t.AbortControllerImpl=i},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(70),a=r(0),s=function(e){function t(){var t=e.call(this)||this;return t._abortedFlag=!1,t._abortAlgorithms=new Set,t}return i(t,e),Object.defineProperty(t.prototype,\"aborted\",{get:function(){return this._abortedFlag},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"onabort\",{get:function(){return a.event_getterEventHandlerIDLAttribute(this,\"onabort\")},set:function(e){a.event_setterEventHandlerIDLAttribute(this,\"onabort\",e)},enumerable:!0,configurable:!0}),t._create=function(){return new t},t}(o.EventTargetImpl);t.AbortSignalImpl=s},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(2),a=r(34),s=r(12),u=function(e){function t(t,r,n){var i=e.call(this)||this;return i._name=\"\",i._publicId=\"\",i._systemId=\"\",i._name=t,i._publicId=r,i._systemId=n,i}return i(t,e),Object.defineProperty(t.prototype,\"name\",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"publicId\",{get:function(){return this._publicId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"systemId\",{get:function(){return this._systemId},enumerable:!0,configurable:!0}),t.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error(\"Mixin: ChildNode not implemented.\")},t.prototype.remove=function(){throw new Error(\"Mixin: ChildNode not implemented.\")},t._create=function(e,r,n,i){void 0===n&&(n=\"\"),void 0===i&&(i=\"\");var o=new t(r,n,i);return o._nodeDocument=e,o},t}(a.NodeImpl);t.DocumentTypeImpl=u,s.idl_defineConst(u.prototype,\"_nodeType\",o.NodeType.DocumentType)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(100),a=r(1),s=r(0),u=function(e){function t(t,r){var n=e.call(this)||this;return n._host=t,n._mode=r,n}return i(t,e),Object.defineProperty(t.prototype,\"mode\",{get:function(){return this._mode},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"host\",{get:function(){return this._host},enumerable:!0,configurable:!0}),t.prototype._getTheParent=function(e){return e._composedFlag||a.isEmpty(e._path)||s.tree_rootNode(e._path[0].invocationTarget)!==this?this._host:null},t._create=function(e,r){return new t(r,\"closed\")},t}(o.DocumentFragmentImpl);t.ShadowRootImpl=u},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(2),a=r(34),s=r(0),u=r(12),l=function(e){function t(t){var r=e.call(this)||this;return r._namespace=null,r._namespacePrefix=null,r._element=null,r._value=\"\",r._localName=t,r}return i(t,e),Object.defineProperty(t.prototype,\"ownerElement\",{get:function(){return this._element},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"namespaceURI\",{get:function(){return this._namespace},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"prefix\",{get:function(){return this._namespacePrefix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"localName\",{get:function(){return this._localName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"name\",{get:function(){return this._qualifiedName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"value\",{get:function(){return this._value},set:function(e){s.attr_setAnExistingAttributeValue(this,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"_qualifiedName\",{get:function(){return null!==this._namespacePrefix?this._namespacePrefix+\":\"+this._localName:this._localName},enumerable:!0,configurable:!0}),t._create=function(e,r){var n=new t(r);return n._nodeDocument=e,n},t}(a.NodeImpl);t.AttrImpl=l,u.idl_defineConst(l.prototype,\"_nodeType\",o.NodeType.Attribute),u.idl_defineConst(l.prototype,\"specified\",!0)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(101),a=r(2),s=r(12),u=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t._create=function(e,r){void 0===r&&(r=\"\");var n=new t(r);return n._nodeDocument=e,n},t}(o.TextImpl);t.CDATASectionImpl=u,s.idl_defineConst(u.prototype,\"_nodeType\",a.NodeType.CData)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(2),a=r(71),s=r(12),u=function(e){function t(t){return void 0===t&&(t=\"\"),e.call(this,t)||this}return i(t,e),t._create=function(e,r){void 0===r&&(r=\"\");var n=new t(r);return n._nodeDocument=e,n},t}(a.CharacterDataImpl);t.CommentImpl=u,s.idl_defineConst(u.prototype,\"_nodeType\",o.NodeType.Comment)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(2),a=r(71),s=r(12),u=function(e){function t(t,r){var n=e.call(this,r)||this;return n._target=t,n}return i(t,e),Object.defineProperty(t.prototype,\"target\",{get:function(){return this._target},enumerable:!0,configurable:!0}),t._create=function(e,r,n){var i=new t(r,n);return i._nodeDocument=e,i},t}(a.CharacterDataImpl);t.ProcessingInstructionImpl=u,s.idl_defineConst(u.prototype,\"_nodeType\",o.NodeType.ProcessingInstruction)},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(7),i=r(0),o=r(3),a=r(1),s=function(){function e(e,t){return this._live=!0,this._root=e,this._filter=t,new Proxy(this,this)}return Object.defineProperty(e.prototype,\"length\",{get:function(){for(var e=this,t=0,r=i.tree_getFirstDescendantNode(this._root,!1,!1,(function(t){return o.Guard.isElementNode(t)&&e._filter(t)}));null!==r;)t++,r=i.tree_getNextDescendantNode(this._root,r,!1,!1,(function(t){return o.Guard.isElementNode(t)&&e._filter(t)}));return t},enumerable:!0,configurable:!0}),e.prototype.item=function(e){for(var t=this,r=0,n=i.tree_getFirstDescendantNode(this._root,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}));null!==n;){if(r===e)return n;r++,n=i.tree_getNextDescendantNode(this._root,n,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}))}return null},e.prototype.namedItem=function(e){var t=this;if(\"\"===e)return null;for(var r=i.tree_getFirstDescendantNode(this._root,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}));null!=r;){if(r._uniqueIdentifier===e)return r;if(r._namespace===n.namespace.HTML)for(var a=0;a<r._attributeList.length;a++){var s=r._attributeList[a];if(\"name\"===s._localName&&null===s._namespace&&null===s._namespacePrefix&&s._value===e)return r}r=i.tree_getNextDescendantNode(this._root,r,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}))}return null},e.prototype[Symbol.iterator]=function(){var e=this._root,t=this._filter,r=i.tree_getFirstDescendantNode(e,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t(e)}));return{next:function(){if(null===r)return{done:!0,value:null};var n={done:!1,value:r};return r=i.tree_getNextDescendantNode(e,r,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t(e)})),n}}},e.prototype.get=function(t,r,n){if(!a.isString(r)||-1!==e.reservedNames.indexOf(r))return Reflect.get(t,r,n);var i=Number(r);return isNaN(i)?t.namedItem(r)||void 0:t.item(i)||void 0},e.prototype.set=function(t,r,n,o){if(!a.isString(r)||-1!==e.reservedNames.indexOf(r))return Reflect.set(t,r,n,o);var s=Number(r),u=isNaN(s)?t.namedItem(r)||void 0:t.item(s)||void 0;return!(!u||!u._parent)&&(i.mutation_replace(u,n,u._parent),!0)},e._create=function(t,r){return void 0===r&&(r=function(){return!0}),new e(t,r)},e.reservedNames=[\"_root\",\"_live\",\"_filter\",\"length\",\"item\",\"namedItem\",\"get\",\"set\"],e}();t.HTMLCollectionImpl=s},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(1),a=r(0),s=function(){function e(e){return this._live=!0,this._filter=null,this._length=0,this._root=e,new Proxy(this,this)}return Object.defineProperty(e.prototype,\"length\",{get:function(){return this._root._children.size},enumerable:!0,configurable:!0}),e.prototype.item=function(e){if(e<0||e>this.length-1)return null;if(e<this.length/2){for(var t=0,r=this._root._firstChild;null!==r&&t!==e;)r=r._nextSibling,t++;return r}for(t=this.length-1,r=this._root._lastChild;null!==r&&t!==e;)r=r._previousSibling,t--;return r},e.prototype.keys=function(){var e;return(e={})[Symbol.iterator]=function(){var e=0;return{next:function(){return e===this.length?{done:!0,value:null}:{done:!1,value:e++}}.bind(this)}}.bind(this),e},e.prototype.values=function(){var e;return(e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator]();return{next:function(){return e.next()}}}.bind(this),e},e.prototype.entries=function(){var e;return(e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator](),t=0;return{next:function(){var r=e.next();return r.done?{done:!0,value:null}:{done:!1,value:[t++,r.value]}}}}.bind(this),e},e.prototype[Symbol.iterator]=function(){return this._root._children[Symbol.iterator]()},e.prototype.forEach=function(e,t){var r,o;void 0===t&&(t=i.dom.window);var a=0;try{for(var s=n(this._root._children),u=s.next();!u.done;u=s.next()){var l=u.value;e.call(t,l,a++,this)}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=s.return)&&o.call(s)}finally{if(r)throw r.error}}},e.prototype.get=function(e,t,r){if(!o.isString(t))return Reflect.get(e,t,r);var n=Number(t);return isNaN(n)?Reflect.get(e,t,r):e.item(n)||void 0},e.prototype.set=function(e,t,r,n){if(!o.isString(t))return Reflect.set(e,t,r,n);var i=Number(t);if(isNaN(i))return Reflect.set(e,t,r,n);var s=e.item(i)||void 0;return!!s&&(!!s._parent&&(a.mutation_replace(s,r,s._parent),!0))},e._create=function(t){return new e(t)},e}();t.NodeListImpl=s},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(1),a=function(){function e(e){return this._live=!1,this._items=[],this._length=0,this._root=e,this._items=[],this._filter=function(e){return!0},new Proxy(this,this)}return Object.defineProperty(e.prototype,\"length\",{get:function(){return this._items.length},enumerable:!0,configurable:!0}),e.prototype.item=function(e){return e<0||e>this.length-1?null:this._items[e]},e.prototype.keys=function(){var e;return(e={})[Symbol.iterator]=function(){var e=0;return{next:function(){return e===this.length?{done:!0,value:null}:{done:!1,value:e++}}.bind(this)}}.bind(this),e},e.prototype.values=function(){var e;return(e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator]();return{next:function(){return e.next()}}}.bind(this),e},e.prototype.entries=function(){var e;return(e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator](),t=0;return{next:function(){var r=e.next();return r.done?{done:!0,value:null}:{done:!1,value:[t++,r.value]}}}}.bind(this),e},e.prototype[Symbol.iterator]=function(){var e=this._items[Symbol.iterator]();return{next:function(){return e.next()}}},e.prototype.forEach=function(e,t){var r,o;void 0===t&&(t=i.dom.window);var a=0;try{for(var s=n(this._items),u=s.next();!u.done;u=s.next()){var l=u.value;e.call(t,l,a++,this)}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=s.return)&&o.call(s)}finally{if(r)throw r.error}}},e.prototype.get=function(e,t,r){if(!o.isString(t))return Reflect.get(e,t,r);var n=Number(t);return isNaN(n)?Reflect.get(e,t,r):e._items[n]||void 0},e.prototype.set=function(e,t,r,n){if(!o.isString(t))return Reflect.set(e,t,r,n);var i=Number(t);return isNaN(i)?Reflect.set(e,t,r,n):i>=0&&i<e._items.length&&(e._items[i]=r,!0)},e._create=function(t,r){var n=new e(t);return n._items=r,n},e}();t.NodeListStaticImpl=a},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(9),a=r(0),s=function(e){function t(r){var n=e.call(this)||this;return n._element=r,Object.setPrototypeOf(n,t.prototype),n}return i(t,e),t.prototype._asArray=function(){return this},t.prototype.item=function(e){return this[e]||null},t.prototype.getNamedItem=function(e){return a.element_getAnAttributeByName(e,this._element)},t.prototype.getNamedItemNS=function(e,t){return a.element_getAnAttributeByNamespaceAndLocalName(e||\"\",t,this._element)},t.prototype.setNamedItem=function(e){return a.element_setAnAttribute(e,this._element)},t.prototype.setNamedItemNS=function(e){return a.element_setAnAttribute(e,this._element)},t.prototype.removeNamedItem=function(e){var t=a.element_removeAnAttributeByName(e,this._element);if(null===t)throw new o.NotFoundError;return t},t.prototype.removeNamedItemNS=function(e,t){var r=a.element_removeAnAttributeByNamespaceAndLocalName(e||\"\",t,this._element);if(null===r)throw new o.NotFoundError;return r},t._create=function(e){return new t(e)},t}(Array);t.NamedNodeMapImpl=s},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(6),s=r(2),u=r(102),l=r(9),c=r(0),h=r(12),p=r(3),f=function(e){function t(){var t=e.call(this)||this,r=a.dom.window._associatedDocument;return t._start=[r,0],t._end=[r,0],a.dom.rangeList.add(t),t}return i(t,e),Object.defineProperty(t.prototype,\"commonAncestorContainer\",{get:function(){for(var e=this._start[0];!c.tree_isAncestorOf(this._end[0],e,!0);){if(null===e._parent)throw new Error(\"Parent node  is null.\");e=e._parent}return e},enumerable:!0,configurable:!0}),t.prototype.setStart=function(e,t){c.range_setTheStart(this,e,t)},t.prototype.setEnd=function(e,t){c.range_setTheEnd(this,e,t)},t.prototype.setStartBefore=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheStart(this,t,c.tree_index(e))},t.prototype.setStartAfter=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheStart(this,t,c.tree_index(e)+1)},t.prototype.setEndBefore=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheEnd(this,t,c.tree_index(e))},t.prototype.setEndAfter=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheEnd(this,t,c.tree_index(e)+1)},t.prototype.collapse=function(e){e?this._end=this._start:this._start=this._end},t.prototype.selectNode=function(e){c.range_select(e,this)},t.prototype.selectNodeContents=function(e){if(p.Guard.isDocumentTypeNode(e))throw new l.InvalidNodeTypeError;var t=c.tree_nodeLength(e);this._start=[e,0],this._end=[e,t]},t.prototype.compareBoundaryPoints=function(e,t){if(e!==s.HowToCompare.StartToStart&&e!==s.HowToCompare.StartToEnd&&e!==s.HowToCompare.EndToEnd&&e!==s.HowToCompare.EndToStart)throw new l.NotSupportedError;if(c.range_root(this)!==c.range_root(t))throw new l.WrongDocumentError;var r,n;switch(e){case s.HowToCompare.StartToStart:r=this._start,n=t._start;break;case s.HowToCompare.StartToEnd:r=this._end,n=t._start;break;case s.HowToCompare.EndToEnd:r=this._end,n=t._end;break;case s.HowToCompare.EndToStart:r=this._start,n=t._end;break;default:throw new l.NotSupportedError}var i=c.boundaryPoint_position(r,n);return i===s.BoundaryPosition.Before?-1:i===s.BoundaryPosition.After?1:0},t.prototype.deleteContents=function(){var e,t,r,n;if(!c.range_collapsed(this)){var i=this._startNode,a=this._startOffset,s=this._endNode,u=this._endOffset;if(i===s&&p.Guard.isCharacterDataNode(i))c.characterData_replaceData(i,a,u-a,\"\");else{var l,h,f=[];try{for(var d=o(c.range_getContainedNodes(this)),m=d.next();!m.done;m=d.next()){var y=(b=m.value)._parent;null!==y&&c.range_isContained(y,this)||f.push(b)}}catch(t){e={error:t}}finally{try{m&&!m.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}if(c.tree_isAncestorOf(s,i,!0))l=i,h=a;else{for(var v=i;null!==v._parent&&!c.tree_isAncestorOf(s,v._parent,!0);)v=v._parent;if(null===v._parent)throw new Error(\"Parent node is null.\");l=v._parent,h=c.tree_index(v)+1}p.Guard.isCharacterDataNode(i)&&c.characterData_replaceData(i,a,c.tree_nodeLength(i)-a,\"\");try{for(var _=o(f),g=_.next();!g.done;g=_.next()){var b;(b=g.value)._parent&&c.mutation_remove(b,b._parent)}}catch(e){r={error:e}}finally{try{g&&!g.done&&(n=_.return)&&n.call(_)}finally{if(r)throw r.error}}p.Guard.isCharacterDataNode(s)&&c.characterData_replaceData(s,0,u,\"\"),this._start=[l,h],this._end=[l,h]}}},t.prototype.extractContents=function(){return c.range_extract(this)},t.prototype.cloneContents=function(){return c.range_cloneTheContents(this)},t.prototype.insertNode=function(e){return c.range_insert(e,this)},t.prototype.surroundContents=function(e){var t,r;try{for(var n=o(c.range_getPartiallyContainedNodes(this)),i=n.next();!i.done;i=n.next()){var a=i.value;if(!p.Guard.isTextNode(a))throw new l.InvalidStateError}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}if(p.Guard.isDocumentNode(e)||p.Guard.isDocumentTypeNode(e)||p.Guard.isDocumentFragmentNode(e))throw new l.InvalidNodeTypeError;var s=c.range_extract(this);0!==e._children.size&&c.mutation_replaceAll(null,e),c.range_insert(e,this),c.mutation_append(s,e),c.range_select(e,this)},t.prototype.cloneRange=function(){return c.create_range(this._start,this._end)},t.prototype.detach=function(){a.dom.rangeList.delete(this)},t.prototype.isPointInRange=function(e,t){if(c.tree_rootNode(e)!==c.range_root(this))return!1;if(p.Guard.isDocumentTypeNode(e))throw new l.InvalidNodeTypeError;if(t>c.tree_nodeLength(e))throw new l.IndexSizeError;var r=[e,t];return c.boundaryPoint_position(r,this._start)!==s.BoundaryPosition.Before&&c.boundaryPoint_position(r,this._end)!==s.BoundaryPosition.After},t.prototype.comparePoint=function(e,t){if(c.tree_rootNode(e)!==c.range_root(this))throw new l.WrongDocumentError;if(p.Guard.isDocumentTypeNode(e))throw new l.InvalidNodeTypeError;if(t>c.tree_nodeLength(e))throw new l.IndexSizeError;var r=[e,t];return c.boundaryPoint_position(r,this._start)===s.BoundaryPosition.Before?-1:c.boundaryPoint_position(r,this._end)===s.BoundaryPosition.After?1:0},t.prototype.intersectsNode=function(e){if(c.tree_rootNode(e)!==c.range_root(this))return!1;var t=e._parent;if(null===t)return!0;var r=c.tree_index(e);return c.boundaryPoint_position([t,r],this._end)===s.BoundaryPosition.Before&&c.boundaryPoint_position([t,r+1],this._start)===s.BoundaryPosition.After},t.prototype.toString=function(){var e,t,r=\"\";if(this._startNode===this._endNode&&p.Guard.isTextNode(this._startNode))return this._startNode._data.substring(this._startOffset,this._endOffset);p.Guard.isTextNode(this._startNode)&&(r+=this._startNode._data.substring(this._startOffset));try{for(var n=o(c.range_getContainedNodes(this)),i=n.next();!i.done;i=n.next()){var a=i.value;p.Guard.isTextNode(a)&&(r+=a._data)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return p.Guard.isTextNode(this._endNode)&&(r+=this._endNode._data.substring(0,this._endOffset)),r},t._create=function(e,r){var n=new t;return e&&(n._start=e),r&&(n._end=r),n},t.START_TO_START=0,t.START_TO_END=1,t.END_TO_END=2,t.END_TO_START=3,t}(u.AbstractRangeImpl);t.RangeImpl=f,h.idl_defineConst(f.prototype,\"START_TO_START\",0),h.idl_defineConst(f.prototype,\"START_TO_END\",1),h.idl_defineConst(f.prototype,\"END_TO_END\",2),h.idl_defineConst(f.prototype,\"END_TO_START\",3)},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(103),a=r(0),s=function(e){function t(t,r,n){var i=e.call(this,t)||this;return i._iteratorCollection=void 0,i._reference=r,i._pointerBeforeReference=n,a.nodeIterator_iteratorList().add(i),i}return i(t,e),Object.defineProperty(t.prototype,\"referenceNode\",{get:function(){return this._reference},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,\"pointerBeforeReferenceNode\",{get:function(){return this._pointerBeforeReference},enumerable:!0,configurable:!0}),t.prototype.nextNode=function(){return a.nodeIterator_traverse(this,!0)},t.prototype.previousNode=function(){return a.nodeIterator_traverse(this,!1)},t.prototype.detach=function(){a.nodeIterator_iteratorList().delete(this)},t._create=function(e,r,n){return new t(e,r,n)},t}(o.TraverserImpl);t.NodeIteratorImpl=s},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(2),a=r(103),s=r(0),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n._current=r,n}return i(t,e),Object.defineProperty(t.prototype,\"currentNode\",{get:function(){return this._current},set:function(e){this._current=e},enumerable:!0,configurable:!0}),t.prototype.parentNode=function(){for(var e=this._current;null!==e&&e!==this._root;)if(null!==(e=e._parent)&&s.traversal_filter(this,e)===o.FilterResult.Accept)return this._current=e,e;return null},t.prototype.firstChild=function(){return s.treeWalker_traverseChildren(this,!0)},t.prototype.lastChild=function(){return s.treeWalker_traverseChildren(this,!1)},t.prototype.nextSibling=function(){return s.treeWalker_traverseSiblings(this,!0)},t.prototype.previousNode=function(){for(var e=this._current;e!==this._root;){for(var t=e._previousSibling;t;){e=t;for(var r=s.traversal_filter(this,e);r!==o.FilterResult.Reject&&e._lastChild;)e=e._lastChild,r=s.traversal_filter(this,e);if(r===o.FilterResult.Accept)return this._current=e,e;t=e._previousSibling}if(e===this._root||null===e._parent)return null;if(e=e._parent,s.traversal_filter(this,e)===o.FilterResult.Accept)return this._current=e,e}return null},t.prototype.previousSibling=function(){return s.treeWalker_traverseSiblings(this,!1)},t.prototype.nextNode=function(){for(var e=this._current,t=o.FilterResult.Accept;;){for(;t!==o.FilterResult.Reject&&e._firstChild;)if(e=e._firstChild,(t=s.traversal_filter(this,e))===o.FilterResult.Accept)return this._current=e,e;for(var r=null,n=e;null!==n;){if(n===this._root)return null;if(null!==(r=n._nextSibling)){e=r;break}n=n._parent}if((t=s.traversal_filter(this,e))===o.FilterResult.Accept)return this._current=e,e}},t._create=function(e,r){return new t(e,r)},t}(a.TraverserImpl);t.TreeWalkerImpl=u},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=r(12),o=function(){function e(){}return e.prototype.acceptNode=function(e){return n.FilterResult.Accept},e._create=function(){return new e},e.FILTER_ACCEPT=1,e.FILTER_REJECT=2,e.FILTER_SKIP=3,e.SHOW_ALL=4294967295,e.SHOW_ELEMENT=1,e.SHOW_ATTRIBUTE=2,e.SHOW_TEXT=4,e.SHOW_CDATA_SECTION=8,e.SHOW_ENTITY_REFERENCE=16,e.SHOW_ENTITY=32,e.SHOW_PROCESSING_INSTRUCTION=64,e.SHOW_COMMENT=128,e.SHOW_DOCUMENT=256,e.SHOW_DOCUMENT_TYPE=512,e.SHOW_DOCUMENT_FRAGMENT=1024,e.SHOW_NOTATION=2048,e}();t.NodeFilterImpl=o,i.idl_defineConst(o.prototype,\"FILTER_ACCEPT\",1),i.idl_defineConst(o.prototype,\"FILTER_REJECT\",2),i.idl_defineConst(o.prototype,\"FILTER_SKIP\",3),i.idl_defineConst(o.prototype,\"SHOW_ALL\",4294967295),i.idl_defineConst(o.prototype,\"SHOW_ELEMENT\",1),i.idl_defineConst(o.prototype,\"SHOW_ATTRIBUTE\",2),i.idl_defineConst(o.prototype,\"SHOW_TEXT\",4),i.idl_defineConst(o.prototype,\"SHOW_CDATA_SECTION\",8),i.idl_defineConst(o.prototype,\"SHOW_ENTITY_REFERENCE\",16),i.idl_defineConst(o.prototype,\"SHOW_ENTITY\",32),i.idl_defineConst(o.prototype,\"SHOW_PROCESSING_INSTRUCTION\",64),i.idl_defineConst(o.prototype,\"SHOW_COMMENT\",128),i.idl_defineConst(o.prototype,\"SHOW_DOCUMENT\",256),i.idl_defineConst(o.prototype,\"SHOW_DOCUMENT_TYPE\",512),i.idl_defineConst(o.prototype,\"SHOW_DOCUMENT_FRAGMENT\",1024),i.idl_defineConst(o.prototype,\"SHOW_NOTATION\",2048)},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(e,t,r,n,i,o,a,s,u){this._type=e,this._target=t,this._addedNodes=r,this._removedNodes=n,this._previousSibling=i,this._nextSibling=o,this._attributeName=a,this._attributeNamespace=s,this._oldValue=u}return Object.defineProperty(e.prototype,\"type\",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"target\",{get:function(){return this._target},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"addedNodes\",{get:function(){return this._addedNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"removedNodes\",{get:function(){return this._removedNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"previousSibling\",{get:function(){return this._previousSibling},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"nextSibling\",{get:function(){return this._nextSibling},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"attributeName\",{get:function(){return this._attributeName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"attributeNamespace\",{get:function(){return this._attributeNamespace},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"oldValue\",{get:function(){return this._oldValue},enumerable:!0,configurable:!0}),e._create=function(t,r,n,i,o,a,s,u,l){return new e(t,r,n,i,o,a,s,u,l)},e}();t.MutationRecordImpl=n},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(9),a=r(7),s=r(0),u=function(){function e(e,t){this._element=e,this._attribute=t,this._tokenSet=new Set;var r=t._localName,n=s.element_getAnAttributeValue(e,r),o=this;this._element._attributeChangeSteps.push((function(e,t,r,n,i){t===o._attribute._localName&&null===i&&(n?o._tokenSet=s.orderedSet_parse(n):o._tokenSet.clear())})),i.dom.features.steps&&s.dom_runAttributeChangeSteps(e,r,n,n,null)}return Object.defineProperty(e.prototype,\"length\",{get:function(){return this._tokenSet.size},enumerable:!0,configurable:!0}),e.prototype.item=function(e){var t,r,i=0;try{for(var o=n(this._tokenSet),a=o.next();!a.done;a=o.next()){var s=a.value;if(i===e)return s;i++}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return null},e.prototype.contains=function(e){return this._tokenSet.has(e)},e.prototype.add=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var u=n(r),l=u.next();!l.done;l=u.next()){var c=l.value;if(\"\"===c)throw new o.SyntaxError(\"Cannot add an empty token.\");if(a.codePoint.ASCIIWhiteSpace.test(c))throw new o.InvalidCharacterError(\"Token cannot contain whitespace.\");this._tokenSet.add(c)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=u.return)&&t.call(u)}finally{if(e)throw e.error}}s.tokenList_updateSteps(this)},e.prototype.remove=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var u=n(r),l=u.next();!l.done;l=u.next()){var c=l.value;if(\"\"===c)throw new o.SyntaxError(\"Cannot remove an empty token.\");if(a.codePoint.ASCIIWhiteSpace.test(c))throw new o.InvalidCharacterError(\"Token cannot contain whitespace.\");this._tokenSet.delete(c)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=u.return)&&t.call(u)}finally{if(e)throw e.error}}s.tokenList_updateSteps(this)},e.prototype.toggle=function(e,t){if(void 0===t&&(t=void 0),\"\"===e)throw new o.SyntaxError(\"Cannot toggle an empty token.\");if(a.codePoint.ASCIIWhiteSpace.test(e))throw new o.InvalidCharacterError(\"Token cannot contain whitespace.\");return this._tokenSet.has(e)?void 0!==t&&!1!==t||(this._tokenSet.delete(e),s.tokenList_updateSteps(this),!1):(void 0===t||!0===t)&&(this._tokenSet.add(e),s.tokenList_updateSteps(this),!0)},e.prototype.replace=function(e,t){if(\"\"===e||\"\"===t)throw new o.SyntaxError(\"Cannot replace an empty token.\");if(a.codePoint.ASCIIWhiteSpace.test(e)||a.codePoint.ASCIIWhiteSpace.test(t))throw new o.InvalidCharacterError(\"Token cannot contain whitespace.\");return!!this._tokenSet.has(e)&&(a.set.replace(this._tokenSet,e,t),s.tokenList_updateSteps(this),!0)},e.prototype.supports=function(e){return s.tokenList_validationSteps(this,e)},Object.defineProperty(e.prototype,\"value\",{get:function(){return s.tokenList_serializeSteps(this)},set:function(e){s.element_setAnAttributeValue(this._element,this._attribute._localName,e)},enumerable:!0,configurable:!0}),e.prototype[Symbol.iterator]=function(){var e=this._tokenSet[Symbol.iterator]();return{next:function(){return e.next()}}},e._create=function(t,r){return new e(t,r)},e}();t.DOMTokenListImpl=u},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(104),a=r(0),s=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n._detail=null,n._detail=r&&r.detail||null,n}return i(t,e),Object.defineProperty(t.prototype,\"detail\",{get:function(){return this._detail},enumerable:!0,configurable:!0}),t.prototype.initCustomEvent=function(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1),void 0===n&&(n=null),this._dispatchFlag||(a.event_initialize(this,e,t,r),this._detail=n)},t}(o.EventImpl);t.CustomEventImpl=s},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(6),i=r(2),o=r(105),a=r(17);t.nodeIterator_traverse=function(e,t){for(var r=e._reference,n=e._pointerBeforeReference;;){if(t)if(n)n=!1;else{var s=a.tree_getFollowingNode(e._root,r);if(!s)return null;r=s}else if(n){var u=a.tree_getPrecedingNode(e.root,r);if(!u)return null;r=u}else n=!0;if(o.traversal_filter(e,r)===i.FilterResult.Accept)break}return e._reference=r,e._pointerBeforeReference=n,r},t.nodeIterator_iteratorList=function(){return n.dom.window._iteratorList}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(9),i=r(7),o=r(174);function a(e){if(!o.xml_isName(e))throw new n.InvalidCharacterError(\"Invalid XML name: \"+e);if(!o.xml_isQName(e))throw new n.InvalidCharacterError(\"Invalid XML qualified name: \"+e+\".\")}t.namespace_validate=a,t.namespace_validateAndExtract=function(e,t){e||(e=null),a(t);var r=t.split(\":\"),o=2===r.length?r[0]:null,s=2===r.length?r[1]:t;if(o&&null===e)throw new n.NamespaceError(\"Qualified name includes a prefix but the namespace is null.\");if(\"xml\"===o&&e!==i.namespace.XML)throw new n.NamespaceError('Qualified name includes the \"xml\" prefix but the namespace is not the XML namespace.');if(e!==i.namespace.XMLNS&&(\"xmlns\"===o||\"xmlns\"===t))throw new n.NamespaceError('Qualified name includes the \"xmlns\" prefix but the namespace is not the XMLNS namespace.');if(e===i.namespace.XMLNS&&\"xmlns\"!==o&&\"xmlns\"!==t)throw new n.NamespaceError('Qualified name does not include the \"xmlns\" prefix but the namespace is the XMLNS namespace.');return[e,o,s]},t.namespace_extractQName=function(e){a(e);var t=e.split(\":\");return[2===t.length?t[0]:null,2===t.length?t[1]:e]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.xml_isName=function(e){for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(!(r>=97&&r<=122||r>=65&&r<=90||58===r||95===r||r>=192&&r<=214||r>=216&&r<=246||r>=248&&r<=767||r>=880&&r<=893||r>=895&&r<=8191||r>=8204&&r<=8205||r>=8304&&r<=8591||r>=11264&&r<=12271||r>=12289&&r<=55295||r>=63744&&r<=64975||r>=65008&&r<=65533)&&(0===t||!(45===r||46===r||r>=48&&r<=57||183===r||r>=768&&r<=879||r>=8255&&r<=8256))){if(r>=55296&&r<=56319&&t<e.length-1){var n=e.charCodeAt(t+1);if(n>=56320&&n<=57343&&(t++,(r=1024*(r-55296)+n-56320+65536)>=65536&&r<=983039))continue}return!1}}return!0},t.xml_isQName=function(e){for(var t=!1,r=0;r<e.length;r++){var n=e.charCodeAt(r);if(!(n>=97&&n<=122||n>=65&&n<=90||95===n||n>=192&&n<=214||n>=216&&n<=246||n>=248&&n<=767||n>=880&&n<=893||n>=895&&n<=8191||n>=8204&&n<=8205||n>=8304&&n<=8591||n>=11264&&n<=12271||n>=12289&&n<=55295||n>=63744&&n<=64975||n>=65008&&n<=65533)&&(0===r||!(45===n||46===n||n>=48&&n<=57||183===n||n>=768&&n<=879||n>=8255&&n<=8256))){if(0===r||58!==n){if(n>=55296&&n<=56319&&r<e.length-1){var i=e.charCodeAt(r+1);if(i>=56320&&i<=57343&&(r++,(n=1024*(n-55296)+i-56320+65536)>=65536&&n<=983039))continue}return!1}if(t)return!1;if(r===e.length-1)return!1;t=!0}}return!0},t.xml_isLegalChar=function(e){for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(!(9===r||10===r||13===r||r>=32&&r<=55295||r>=57344&&r<=65533)){if(r>=55296&&r<=56319&&t<e.length-1){var n=e.charCodeAt(t+1);if(n>=56320&&n<=57343&&(t++,(r=1024*(r-55296)+n-56320+65536)>=65536&&r<=1114111))continue}return!1}}return!0},t.xml_isPubidChar=function(e){for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(!(r>=97&&r<=122||r>=65&&r<=90||r>=39&&r<=59||32===r||13===r||10===r||r>=35&&r<=37||33===r||61===r||63===r||64===r||95===r))return!1}return!0}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=r(17);t.boundaryPoint_position=function e(t,r){var o=t[0],a=t[1],s=r[0],u=r[1];if(console.assert(i.tree_rootNode(o)===i.tree_rootNode(s),\"Boundary points must share the same root node.\"),o===s)return a===u?n.BoundaryPosition.Equal:a<u?n.BoundaryPosition.Before:n.BoundaryPosition.After;if(i.tree_isFollowing(s,o)){var l=e([s,u],[o,a]);if(l===n.BoundaryPosition.Before)return n.BoundaryPosition.After;if(l===n.BoundaryPosition.After)return n.BoundaryPosition.Before}if(i.tree_isAncestorOf(s,o)){for(var c=s;!i.tree_isChildOf(o,c);)null!==c._parent&&(c=c._parent);if(i.tree_index(c)<a)return n.BoundaryPosition.After}return n.BoundaryPosition.Before}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(3),a=r(7),s=r(29),u=r(108),l=r(30),c=r(37),h=r(52);t.node_stringReplaceAll=function(e,t){var r=null;\"\"!==e&&(r=s.create_text(t._nodeDocument,e)),c.mutation_replaceAll(r,t)},t.node_clone=function e(t,r,a){var u,p,f,d,m;if(void 0===r&&(r=null),void 0===a&&(a=!1),null===r&&(r=t._nodeDocument),o.Guard.isElementNode(t)){m=h.element_createAnElement(r,t._localName,t._namespace,t._namespacePrefix,t._is,!1);try{for(var y=n(t._attributeList),v=y.next();!v.done;v=y.next()){var _=e(v.value,r);h.element_append(_,m)}}catch(e){u={error:e}}finally{try{v&&!v.done&&(p=y.return)&&p.call(y)}finally{if(u)throw u.error}}}else if(o.Guard.isDocumentNode(t)){var g=s.create_document();g._encoding=t._encoding,g._contentType=t._contentType,g._URL=t._URL,g._origin=t._origin,g._type=t._type,g._mode=t._mode,m=g}else if(o.Guard.isDocumentTypeNode(t)){m=s.create_documentType(r,t._name,t._publicId,t._systemId)}else if(o.Guard.isAttrNode(t)){var b=s.create_attr(r,t.localName);b._namespace=t._namespace,b._namespacePrefix=t._namespacePrefix,b._value=t._value,m=b}else m=o.Guard.isExclusiveTextNode(t)?s.create_text(r,t._data):o.Guard.isCDATASectionNode(t)?s.create_cdataSection(r,t._data):o.Guard.isCommentNode(t)?s.create_comment(r,t._data):o.Guard.isProcessingInstructionNode(t)?s.create_processingInstruction(r,t._target,t._data):o.Guard.isDocumentFragmentNode(t)?s.create_documentFragment(r):Object.create(t);if(o.Guard.isDocumentNode(m)?(m._nodeDocument=m,r=m):m._nodeDocument=r,i.dom.features.steps&&l.dom_runCloningSteps(m,t,r,a),a)try{for(var x=n(t._children),w=x.next();!w.done;w=x.next()){var E=e(w.value,r,!0);c.mutation_append(E,m)}}catch(e){f={error:e}}finally{try{w&&!w.done&&(d=x.return)&&d.call(x)}finally{if(f)throw f.error}}return m},t.node_equals=function e(t,r){var i,a,s,u;if(t._nodeType!==r._nodeType)return!1;if(o.Guard.isDocumentTypeNode(t)&&o.Guard.isDocumentTypeNode(r)){if(t._name!==r._name||t._publicId!==r._publicId||t._systemId!==r._systemId)return!1}else if(o.Guard.isElementNode(t)&&o.Guard.isElementNode(r)){if(t._namespace!==r._namespace||t._namespacePrefix!==r._namespacePrefix||t._localName!==r._localName||t._attributeList.length!==r._attributeList.length)return!1}else if(o.Guard.isAttrNode(t)&&o.Guard.isAttrNode(r)){if(t._namespace!==r._namespace||t._localName!==r._localName||t._value!==r._value)return!1}else if(o.Guard.isProcessingInstructionNode(t)&&o.Guard.isProcessingInstructionNode(r)){if(t._target!==r._target||t._data!==r._data)return!1}else if(o.Guard.isCharacterDataNode(t)&&o.Guard.isCharacterDataNode(r)&&t._data!==r._data)return!1;if(o.Guard.isElementNode(t)&&o.Guard.isElementNode(r)){var l={};try{for(var c=n(t._attributeList),h=c.next();!h.done;h=c.next()){l[(d=h.value)._localName]=d}}catch(e){i={error:e}}finally{try{h&&!h.done&&(a=c.return)&&a.call(c)}finally{if(i)throw i.error}}try{for(var p=n(r._attributeList),f=p.next();!f.done;f=p.next()){var d,m=f.value;if(!(d=l[m._localName]))return!1;if(!e(d,m))return!1}}catch(e){s={error:e}}finally{try{f&&!f.done&&(u=p.return)&&u.call(p)}finally{if(s)throw s.error}}}if(t._children.size!==r._children.size)return!1;for(var y=t._children[Symbol.iterator](),v=r._children[Symbol.iterator](),_=y.next(),g=v.next();!_.done&&!g.done;){if(!e(_.value,g.value))return!1;_=y.next(),g=v.next()}return!0},t.node_listOfElementsWithQualifiedName=function(e,t){return\"*\"===e?s.create_htmlCollection(t):\"html\"===t._nodeDocument._type?s.create_htmlCollection(t,(function(t){return t._namespace===a.namespace.HTML&&t._qualifiedName===e.toLowerCase()||t._namespace!==a.namespace.HTML&&t._qualifiedName===e})):s.create_htmlCollection(t,(function(t){return t._qualifiedName===e}))},t.node_listOfElementsWithNamespace=function(e,t,r){return\"\"===e&&(e=null),\"*\"===e&&\"*\"===t?s.create_htmlCollection(r):\"*\"===e?s.create_htmlCollection(r,(function(e){return e._localName===t})):\"*\"===t?s.create_htmlCollection(r,(function(t){return t._namespace===e})):s.create_htmlCollection(r,(function(r){return r._localName===t&&r._namespace===e}))},t.node_listOfElementsWithClassNames=function(e,t){var r=u.orderedSet_parse(e);if(0===r.size)return s.create_htmlCollection(t,(function(){return!1}));var n=\"quirks\"!==t._nodeDocument._mode;return s.create_htmlCollection(t,(function(e){var t=e.classList;return u.orderedSet_contains(t._tokenSet,r,n)}))},t.node_locateANamespacePrefix=function e(t,r){if(t._namespace===r&&null!==t._namespacePrefix)return t._namespacePrefix;for(var n=0;n<t._attributeList.length;n++){var i=t._attributeList[n];if(\"xmlns\"===i._namespacePrefix&&i._value===r)return i._localName}return t._parent&&o.Guard.isElementNode(t._parent)?e(t._parent,r):null},t.node_locateANamespace=function e(t,r){if(o.Guard.isElementNode(t)){if(null!==t._namespace&&t._namespacePrefix===r)return t._namespace;for(var n=0;n<t._attributeList.length;n++){var i=t._attributeList[n];if(i._namespace===a.namespace.XMLNS&&\"xmlns\"===i._namespacePrefix&&i._localName===r)return i._value||null;if(null===r&&i._namespace===a.namespace.XMLNS&&null===i._namespacePrefix&&\"xmlns\"===i._localName)return i._value||null}return null===t.parentElement?null:e(t.parentElement,r)}return o.Guard.isDocumentNode(t)?null===t.documentElement?null:e(t.documentElement,r):o.Guard.isDocumentTypeNode(t)||o.Guard.isDocumentFragmentNode(t)?null:o.Guard.isAttrNode(t)?null===t._element?null:e(t._element,r):t._parent&&o.Guard.isElementNode(t._parent)?e(t._parent,r):null}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(3),a=r(9),s=r(29),u=r(17),l=r(107),c=r(37);t.text_contiguousTextNodes=function(e,t){var r;return void 0===t&&(t=!1),(r={})[Symbol.iterator]=function(){for(var r=e;r&&o.Guard.isTextNode(r._previousSibling);)r=r._previousSibling;return{next:function(){if(r&&!t&&r===e&&(r=o.Guard.isTextNode(r._nextSibling)?r._nextSibling:null),null===r)return{done:!0,value:null};var n={done:!1,value:r};return r=o.Guard.isTextNode(r._nextSibling)?r._nextSibling:null,n}}},r},t.text_contiguousExclusiveTextNodes=function(e,t){var r;return void 0===t&&(t=!1),(r={})[Symbol.iterator]=function(){for(var r=e;r&&o.Guard.isExclusiveTextNode(r._previousSibling);)r=r._previousSibling;return{next:function(){if(r&&!t&&r===e&&(r=o.Guard.isExclusiveTextNode(r._nextSibling)?r._nextSibling:null),null===r)return{done:!0,value:null};var n={done:!1,value:r};return r=o.Guard.isExclusiveTextNode(r._nextSibling)?r._nextSibling:null,n}}},r},t.text_descendantTextContent=function(e){for(var t=\"\",r=u.tree_getFirstDescendantNode(e,!1,!1,(function(e){return o.Guard.isTextNode(e)}));null!==r;)t+=r._data,r=u.tree_getNextDescendantNode(e,r,!1,!1,(function(e){return o.Guard.isTextNode(e)}));return t},t.text_split=function(e,t){var r,o,h=e._data.length;if(t>h)throw new a.IndexSizeError;var p=h-t,f=l.characterData_substringData(e,t,p),d=s.create_text(e._nodeDocument,f),m=e._parent;if(null!==m){c.mutation_insert(d,m,e._nextSibling);try{for(var y=n(i.dom.rangeList),v=y.next();!v.done;v=y.next()){var _=v.value;_._start[0]===e&&_._start[1]>t&&(_._start[0]=d,_._start[1]-=t),_._end[0]===e&&_._end[1]>t&&(_._end[0]=d,_._end[1]-=t);var g=u.tree_index(e);_._start[0]===m&&_._start[1]===g+1&&_._start[1]++,_._end[0]===m&&_._end[1]===g+1&&_._end[1]++}}catch(e){r={error:e}}finally{try{v&&!v.done&&(o=y.return)&&o.call(y)}finally{if(r)throw r.error}}}return l.characterData_replaceData(e,t,p,\"\"),d}},function(e,t,r){\"use strict\";var n=r(4),i=r(41),o=r(24),a=r(48),s=[].join,u=i!=Object,l=a(\"join\",\",\");n({target:\"Array\",proto:!0,forced:u||!l},{join:function(e){return s.call(o(this),void 0===e?\",\":e)}})},function(e,t,r){var n=r(4),i=r(83),o=String.fromCharCode,a=String.fromCodePoint;n({target:\"String\",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,a=0;n>a;){if(t=+arguments[a++],i(t,1114111)!==t)throw RangeError(t+\" is not a valid code point\");r.push(t<65536?o(t):o(55296+((t-=65536)>>10),t%1024+56320))}return r.join(\"\")}})},function(e,t,r){\"use strict\";var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(111),o=function(){function e(e,t){this._options={skipWhitespaceOnlyText:!1},this.err={line:-1,col:-1,index:-1,str:\"\"},this._str=e,this._index=0,this._length=e.length,t&&(this._options.skipWhitespaceOnlyText=t.skipWhitespaceOnlyText||!1)}return e.prototype.nextToken=function(){if(this.eof())return{type:i.TokenType.EOF};var t=this.skipIfStartsWith(\"<\")?this.openBracket():this.text();return this._options.skipWhitespaceOnlyText&&t.type===i.TokenType.Text&&e.isWhiteSpaceToken(t)&&(t=this.nextToken()),t},e.prototype.openBracket=function(){return this.skipIfStartsWith(\"?\")?this.skipIfStartsWith(\"xml\")?e.isSpace(this._str[this._index])?this.declaration():(this.seek(-3),this.pi()):this.pi():this.skipIfStartsWith(\"!\")?this.skipIfStartsWith(\"--\")?this.comment():this.skipIfStartsWith(\"[CDATA[\")?this.cdata():this.skipIfStartsWith(\"DOCTYPE\")?this.doctype():void this.throwError(\"Invalid '!' in opening tag.\"):this.skipIfStartsWith(\"/\")?this.closeTag():this.openTag()},e.prototype.declaration=function(){for(var e=\"\",t=\"\",r=\"\";!this.eof();){if(this.skipSpace(),this.skipIfStartsWith(\"?>\"))return{type:i.TokenType.Declaration,version:e,encoding:t,standalone:r};var o=n(this.attribute(),2),a=o[0],s=o[1];\"version\"===a?e=s:\"encoding\"===a?t=s:\"standalone\"===a?r=s:this.throwError(\"Invalid attribute name: \"+a)}this.throwError(\"Missing declaration end symbol `?>`\")},e.prototype.doctype=function(){var e=\"\",t=\"\";this.skipSpace();var r=this.takeUntil2(\"[\",\">\",!0);return this.skipSpace(),this.skipIfStartsWith(\"PUBLIC\")?(e=this.quotedString(),t=this.quotedString()):this.skipIfStartsWith(\"SYSTEM\")&&(t=this.quotedString()),this.skipSpace(),this.skipIfStartsWith(\"[\")&&(this.skipUntil(\"]\"),this.skipIfStartsWith(\"]\")||this.throwError(\"Missing end bracket of DTD internal subset\")),this.skipSpace(),this.skipIfStartsWith(\">\")||this.throwError(\"Missing doctype end symbol `>`\"),{type:i.TokenType.DocType,name:r,pubId:e,sysId:t}},e.prototype.pi=function(){var e=this.takeUntilStartsWith(\"?>\",!0);if(this.eof()&&this.throwError(\"Missing processing instruction end symbol `?>`\"),this.skipSpace(),this.skipIfStartsWith(\"?>\"))return{type:i.TokenType.PI,target:e,data:\"\"};var t=this.takeUntilStartsWith(\"?>\");return this.eof()&&this.throwError(\"Missing processing instruction end symbol `?>`\"),this.seek(2),{type:i.TokenType.PI,target:e,data:t}},e.prototype.text=function(){var e=this.takeUntil(\"<\");return{type:i.TokenType.Text,data:e}},e.prototype.comment=function(){var e=this.takeUntilStartsWith(\"--\\x3e\");return this.eof()&&this.throwError(\"Missing comment end symbol `--\\x3e`\"),this.seek(3),{type:i.TokenType.Comment,data:e}},e.prototype.cdata=function(){var e=this.takeUntilStartsWith(\"]]>\");return this.eof()&&this.throwError(\"Missing CDATA end symbol `]>`\"),this.seek(3),{type:i.TokenType.CDATA,data:e}},e.prototype.openTag=function(){this.skipSpace();var e=this.takeUntil2(\">\",\"/\",!0);if(this.skipSpace(),this.skipIfStartsWith(\">\"))return{type:i.TokenType.Element,name:e,attributes:[],selfClosing:!1};if(this.skipIfStartsWith(\"/>\"))return{type:i.TokenType.Element,name:e,attributes:[],selfClosing:!0};for(var t=[];!this.eof();){if(this.skipSpace(),this.skipIfStartsWith(\">\"))return{type:i.TokenType.Element,name:e,attributes:t,selfClosing:!1};if(this.skipIfStartsWith(\"/>\"))return{type:i.TokenType.Element,name:e,attributes:t,selfClosing:!0};var r=this.attribute();t.push(r)}this.throwError(\"Missing opening element tag end symbol `>`\")},e.prototype.closeTag=function(){this.skipSpace();var e=this.takeUntil(\">\",!0);return this.skipSpace(),this.skipIfStartsWith(\">\")||this.throwError(\"Missing closing element tag end symbol `>`\"),{type:i.TokenType.ClosingTag,name:e}},e.prototype.attribute=function(){this.skipSpace();var e=this.takeUntil(\"=\",!0);return this.skipSpace(),this.skipIfStartsWith(\"=\")||this.throwError(\"Missing equals sign before attribute value\"),[e,this.quotedString()]},e.prototype.quotedString=function(){this.skipSpace();var t=this.take(1);e.isQuote(t)||this.throwError(\"Missing start quote character before quoted value\");var r=this.takeUntil(t);return this.skipIfStartsWith(t)||this.throwError(\"Missing end quote character after quoted value\"),r},e.prototype.eof=function(){return this._index>=this._length},e.prototype.skipIfStartsWith=function(e){var t=e.length;if(1===t)return this._str[this._index]===e&&(this._index++,!0);for(var r=0;r<t;r++)if(this._str[this._index+r]!==e[r])return!1;return this._index+=t,!0},e.prototype.seek=function(e){this._index+=e,this._index<0&&(this._index=0),this._index>this._length&&(this._index=this._length)},e.prototype.skipSpace=function(){for(;!this.eof()&&e.isSpace(this._str[this._index]);)this._index++},e.prototype.take=function(e){if(1===e)return this._str[this._index++];var t=this._index;return this.seek(e),this._str.slice(t,this._index)},e.prototype.takeUntil=function(t,r){void 0===r&&(r=!1);for(var n=this._index;this._index<this._length;){var i=this._str[this._index];if(i===t||r&&e.isSpace(i))break;this._index++}return this._str.slice(n,this._index)},e.prototype.takeUntil2=function(t,r,n){void 0===n&&(n=!1);for(var i=this._index;this._index<this._length;){var o=this._str[this._index];if(o===t||o===r||n&&e.isSpace(o))break;this._index++}return this._str.slice(i,this._index)},e.prototype.takeUntilStartsWith=function(t,r){void 0===r&&(r=!1);for(var n=this._index,i=t.length;this._index<this._length;){for(var o=!0,a=0;a<i;a++){var s=this._str[this._index+a],u=t[a];if(r&&e.isSpace(s))return this._str.slice(n,this._index);if(s!==u){this._index++,o=!1;break}}if(o)return this._str.slice(n,this._index)}return this._index=this._length,this._str.slice(n)},e.prototype.skipUntil=function(e){for(;this._index<this._length;){if(this._str[this._index]===e)break;this._index++}},e.isWhiteSpaceToken=function(e){for(var t=e.data,r=0;r<t.length;r++){var n=t[r];if(\" \"!==n&&\"\\n\"!==n&&\"\\r\"!==n&&\"\\t\"!==n&&\"\\f\"!==n)return!1}return!0},e.isSpace=function(e){return\" \"===e||\"\\n\"===e||\"\\r\"===e||\"\\t\"===e},e.isQuote=function(e){return'\"'===e||\"'\"===e},e.prototype.throwError=function(e){for(var t=/\\r\\n|\\r|\\n/g,r=null,n=0,i=0,o=this._str.length;null!==(r=t.exec(this._str))&&null!==r;)if(n++,r.index<this._index&&(i=t.lastIndex),r.index>this._index){o=r.index;break}throw this.err={line:n,col:this._index-i,index:this._index,str:this._str.substring(i,o)},new Error(e+\"\\nIndex: \"+this.err.index+\"\\nLn: \"+this.err.line+\", Col: \"+this.err.col+\"\\nInput: \"+this.err.str)},e.prototype[Symbol.iterator]=function(){return this._index=0,{next:function(){var e=this.nextToken();return e.type===i.TokenType.EOF?{done:!0,value:null}:{done:!1,value:e}}.bind(this)}},e}();t.XMLStringLexer=o},function(e,t,r){\"use strict\";var n=r(39);e.exports=new n({include:[r(182)]})},function(e,t,r){\"use strict\";var n=r(39);e.exports=new n({include:[r(113)],implicit:[r(289),r(290),r(291),r(292)]})},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(91),i=r(1),o=r(3),a=r(77),s=r(109);function u(e,t){var r=c(void 0===e||l(e)?e:n.DefaultBuilderOptions),i=l(e)?t:e,o=s.createDocument();h(o,r);var u=new a.XMLBuilderImpl(o);return void 0!==i&&u.ele(i),u}function l(e){if(!i.isPlainObject(e))return!1;for(var t in e)if(e.hasOwnProperty(t)&&!n.XMLBuilderOptionKeys.has(t))return!1;return!0}function c(e){void 0===e&&(e={});var t=i.applyDefaults(e,n.DefaultBuilderOptions);if(0===t.convert.att.length||0===t.convert.ins.length||0===t.convert.text.length||0===t.convert.cdata.length||0===t.convert.comment.length)throw new Error(\"JS object converter strings cannot be zero length.\");return t}function h(e,t,r){var n=e;n._xmlBuilderOptions=t,n._isFragment=r}t.builder=function(e,t){var r=c(l(e)?e:n.DefaultBuilderOptions),s=o.Guard.isNode(e)||i.isArray(e)?e:t;if(void 0===s)throw new Error(\"Invalid arguments.\");if(i.isArray(s)){for(var u=[],h=0;h<s.length;h++){var p=new a.XMLBuilderImpl(s[h]);p.set(r),u.push(p)}return u}var f=new a.XMLBuilderImpl(s);return f.set(r),f},t.create=u,t.fragment=function(e,t){var r=c(void 0===e||l(e)?e:n.DefaultBuilderOptions),i=l(e)?t:e,o=s.createDocument();h(o,r,!0);var u=new a.XMLBuilderImpl(o.createDocumentFragment());return void 0!==i&&u.ele(i),u},t.convert=function(e,t,r){var i,o,a;return l(e)&&void 0!==t?(i=e,o=t,a=r):(i=n.DefaultBuilderOptions,o=e,a=t||void 0),u(i,o).end(a)}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(77);t.builder=n.builder,t.create=n.create,t.fragment=n.fragment,t.convert=n.convert,t.createCB=n.createCB,t.fragmentCB=n.fragmentCB},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(191),r(192),r(194),r(64),r(19),r(198),r(199),r(89),r(201),r(65),r(20),r(66),r(22),r(23);var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(91),a=r(1),s=r(217),u=r(2),l=r(3),c=r(0),h=r(109),p=r(7),f=r(276),d=function(){function e(e){this._domNode=e}return Object.defineProperty(e.prototype,\"node\",{get:function(){return this._domNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"options\",{get:function(){return this._options},enumerable:!0,configurable:!0}),e.prototype.set=function(e){return this._options=a.applyDefaults(a.applyDefaults(this._options,e,!0),o.DefaultBuilderOptions),this},e.prototype.ele=function(t,r,i){var o,s,u,l,p,d;if(a.isObject(t))return new f.ObjectReader(this._options).parse(this,t);if(null!==t&&/^\\s*</.test(t))return new f.XMLReader(this._options).parse(this,t);if(null!==t&&/^\\s*[\\{\\[]/.test(t))return new f.JSONReader(this._options).parse(this,t);if(null!==t&&/^(\\s*|(#.*)|(%.*))*---/.test(t))return new f.YAMLReader(this._options).parse(this,t);if((null===t||a.isString(t))&&a.isString(r))l=(o=n([t,r,i],3))[0],p=o[1],d=o[2];else{if(null===t)throw new Error(\"Element name cannot be null. \"+this._debugInfo());l=(s=n([void 0,t,a.isObject(r)?r:void 0],3))[0],p=s[1],d=s[2]}if(d&&(d=a.getValue(d)),l=(u=n(this._extractNamespace(h.sanitizeInput(l,this._options.invalidCharReplacement),h.sanitizeInput(p,this._options.invalidCharReplacement),!0),2))[0],p=u[1],void 0===l){var m=n(c.namespace_extractQName(p),1)[0];l=this.node.lookupNamespaceURI(m)}var y=null!=l?this._doc.createElementNS(l,p):this._doc.createElement(p);this.node.appendChild(y);var v=new e(y),_=this._doc.doctype;if(y===this._doc.documentElement&&null!==_){var g=this._doc.implementation.createDocumentType(this._doc.documentElement.tagName,_.publicId,_.systemId);this._doc.replaceChild(g,_)}return d&&!a.isEmpty(d)&&v.att(d),v},e.prototype.remove=function(){var e=this.up();return e.node.removeChild(this.node),e},e.prototype.att=function(e,t,r){var i,o,s,u,f,d,m=this;if(a.isMap(e)||a.isObject(e))return a.forEachObject(e,(function(e,t){return m.att(e,t)}),this),this;if(null!=e&&(e=a.getValue(e+\"\")),null!=t&&(t=a.getValue(t+\"\")),null!=r&&(r=a.getValue(r+\"\")),null!==e&&!a.isString(e)||!a.isString(t)||null!==r&&!a.isString(r)){if(!a.isString(e)||null!=t&&!a.isString(t))throw new Error(\"Attribute name and value not specified. \"+this._debugInfo());u=(o=n([void 0,e,t],3))[0],f=o[1],d=o[2]}else u=(i=n([e,t,r],3))[0],f=i[1],d=i[2];if(this._options.keepNullAttributes&&null==d)d=\"\";else if(null==d)return this;if(!l.Guard.isElementNode(this.node))throw new Error(\"An attribute can only be assigned to an element node.\");var y=this.node;u=(s=n(this._extractNamespace(u,f,!1),2))[0],f=s[1],f=h.sanitizeInput(f,this._options.invalidCharReplacement),u=h.sanitizeInput(u,this._options.invalidCharReplacement),d=h.sanitizeInput(d,this._options.invalidCharReplacement);var v=n(c.namespace_extractQName(f),2),_=v[0],g=v[1],b=n(c.namespace_extractQName(y.prefix?y.prefix+\":\"+y.localName:y.localName),1)[0],x=null;return\"xmlns\"===_?(u=p.namespace.XMLNS,null===y.namespaceURI&&b===g&&(x=d)):null===_&&\"xmlns\"===g&&null===b&&(u=p.namespace.XMLNS,x=d),null!==x&&(this._updateNamespace(x),y=this.node),void 0!==u?y.setAttributeNS(u,f,d):y.setAttribute(f,d),this},e.prototype.removeAtt=function(e,t){var r,n,i=this;if(!l.Guard.isElementNode(this.node))throw new Error(\"An attribute can only be removed from an element node.\");if(e=a.getValue(e),void 0!==t&&(t=a.getValue(t)),null!==e&&void 0===t)n=e;else{if(null!==e&&!a.isString(e)||void 0===t)throw new Error(\"Attribute namespace must be a string. \"+this._debugInfo());r=e,n=t}return a.isArray(n)||a.isSet(n)?a.forEachArray(n,(function(e){return void 0===r?i.removeAtt(e):i.removeAtt(r,e)}),this):void 0!==r?(n=h.sanitizeInput(n,this._options.invalidCharReplacement),r=h.sanitizeInput(r,this._options.invalidCharReplacement),this.node.removeAttributeNS(r,n)):(n=h.sanitizeInput(n,this._options.invalidCharReplacement),this.node.removeAttribute(n)),this},e.prototype.txt=function(e){if(null==e){if(!this._options.keepNullNodes)return this;e=\"\"}var t=this._doc.createTextNode(h.sanitizeInput(e,this._options.invalidCharReplacement));return this.node.appendChild(t),this},e.prototype.com=function(e){if(null==e){if(!this._options.keepNullNodes)return this;e=\"\"}var t=this._doc.createComment(h.sanitizeInput(e,this._options.invalidCharReplacement));return this.node.appendChild(t),this},e.prototype.dat=function(e){if(null==e){if(!this._options.keepNullNodes)return this;e=\"\"}var t=this._doc.createCDATASection(h.sanitizeInput(e,this._options.invalidCharReplacement));return this.node.appendChild(t),this},e.prototype.ins=function(e,t){var r=this;if(void 0===t&&(t=\"\"),null==t){if(!this._options.keepNullNodes)return this;t=\"\"}if(a.isArray(e)||a.isSet(e))a.forEachArray(e,(function(e){var t=(e+=\"\").indexOf(\" \"),n=-1===t?e:e.substr(0,t),i=-1===t?\"\":e.substr(t+1);r.ins(n,i)}),this);else if(a.isMap(e)||a.isObject(e))a.forEachObject(e,(function(e,t){return r.ins(e,t)}),this);else{var n=this._doc.createProcessingInstruction(h.sanitizeInput(e,this._options.invalidCharReplacement),h.sanitizeInput(t,this._options.invalidCharReplacement));this.node.appendChild(n)}return this},e.prototype.dec=function(e){return this._options.version=e.version||\"1.0\",this._options.encoding=e.encoding,this._options.standalone=e.standalone,this},e.prototype.dtd=function(e){var t=h.sanitizeInput(e&&e.name||(this._doc.documentElement?this._doc.documentElement.tagName:\"ROOT\"),this._options.invalidCharReplacement),r=h.sanitizeInput(e&&e.pubID||\"\",this._options.invalidCharReplacement),n=h.sanitizeInput(e&&e.sysID||\"\",this._options.invalidCharReplacement);if(null!==this._doc.documentElement&&t!==this._doc.documentElement.tagName)throw new Error(\"DocType name does not match document element name.\");var i=this._doc.implementation.createDocumentType(t,r,n);return null!==this._doc.doctype?this._doc.replaceChild(i,this._doc.doctype):this._doc.insertBefore(i,this._doc.documentElement),this},e.prototype.import=function(t){var r,o,a=this._domNode,s=this._doc,u=t.node;if(l.Guard.isDocumentNode(u)){var h=u.documentElement;if(null===h)throw new Error(\"Imported document has no document element node. \"+this._debugInfo());var p=s.importNode(h,!0);a.appendChild(p);var f=n(c.namespace_extractQName(p.prefix?p.prefix+\":\"+p.localName:p.localName),1)[0],d=a.lookupNamespaceURI(f);new e(p)._updateNamespace(d)}else if(l.Guard.isDocumentFragmentNode(u))try{for(var m=i(u.childNodes),y=m.next();!y.done;y=m.next()){var v=y.value;p=s.importNode(v,!0);if(a.appendChild(p),l.Guard.isElementNode(p)){f=n(c.namespace_extractQName(p.prefix?p.prefix+\":\"+p.localName:p.localName),1)[0],d=a.lookupNamespaceURI(f);new e(p)._updateNamespace(d)}}}catch(e){r={error:e}}finally{try{y&&!y.done&&(o=m.return)&&o.call(m)}finally{if(r)throw r.error}}else{p=s.importNode(u,!0);if(a.appendChild(p),l.Guard.isElementNode(p)){f=n(c.namespace_extractQName(p.prefix?p.prefix+\":\"+p.localName:p.localName),1)[0],d=a.lookupNamespaceURI(f);new e(p)._updateNamespace(d)}}return this},e.prototype.doc=function(){if(this._doc._isFragment){for(var t=this.node;t&&t.nodeType!==u.NodeType.DocumentFragment;)t=t.parentNode;if(null===t)throw new Error(\"Node has no parent node while searching for document fragment ancestor. \"+this._debugInfo());return new e(t)}return new e(this._doc)},e.prototype.root=function(){var t=this._doc.documentElement;if(!t)throw new Error(\"Document root element is null. \"+this._debugInfo());return new e(t)},e.prototype.up=function(){var t=this._domNode.parentNode;if(!t)throw new Error(\"Parent node is null. \"+this._debugInfo());return new e(t)},e.prototype.prev=function(){var t=this._domNode.previousSibling;if(!t)throw new Error(\"Previous sibling node is null. \"+this._debugInfo());return new e(t)},e.prototype.next=function(){var t=this._domNode.nextSibling;if(!t)throw new Error(\"Next sibling node is null. \"+this._debugInfo());return new e(t)},e.prototype.first=function(){var t=this._domNode.firstChild;if(!t)throw new Error(\"First child node is null. \"+this._debugInfo());return new e(t)},e.prototype.last=function(){var t=this._domNode.lastChild;if(!t)throw new Error(\"Last child node is null. \"+this._debugInfo());return new e(t)},e.prototype.each=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2]);t.call(i,new e(o[0]),o[1],o[2]),o=a}return this},e.prototype.map=function(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1);var i=[];return this.each((function(t,r,o){return i.push(e.call(n,t,r,o))}),t,r),i},e.prototype.reduce=function(e,t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);var o=t;return this.each((function(t,r,n){return o=e.call(i,o,t,r,n)}),r,n),o},e.prototype.find=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=new e(o[0]);if(t.call(i,a,o[1],o[2]))return a;o=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2])}},e.prototype.filter=function(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1);var i=[];return this.each((function(t,r,o){e.call(n,t,r,o)&&i.push(t)}),t,r),i},e.prototype.every=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=new e(o[0]);if(!t.call(i,a,o[1],o[2]))return!1;o=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2])}return!0},e.prototype.some=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=new e(o[0]);if(t.call(i,a,o[1],o[2]))return!0;o=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2])}return!1},e.prototype.toArray=function(e,t){void 0===e&&(e=!1),void 0===t&&(t=!1);var r=[];return this.each((function(e){return r.push(e)}),e,t),r},e.prototype.toString=function(e){return void 0===(e=e||{}).format&&(e.format=\"xml\"),this._serialize(e)},e.prototype.toObject=function(e){return void 0===(e=e||{}).format&&(e.format=\"object\"),this._serialize(e)},e.prototype.end=function(e){return void 0===(e=e||{}).format&&(e.format=\"xml\"),this.doc()._serialize(e)},e.prototype._getFirstDescendantNode=function(e,t,r){return t?[this._domNode,0,0]:r?this._getNextDescendantNode(e,e,r,0,0):[this._domNode.firstChild,0,1]},e.prototype._getNextDescendantNode=function(e,t,r,n,i){if(!r)return e===t?[t.firstChild,0,i+1]:[t.nextSibling,n+1,i];if(t.firstChild)return[t.firstChild,0,i+1];if(t===e)return[null,-1,-1];if(t.nextSibling)return[t.nextSibling,n+1,i];for(var o=t.parentNode;o&&o!==e;){if(o.nextSibling)return[o.nextSibling,c.tree_index(o.nextSibling),i-1];o=o.parentNode,i--}return[null,-1,-1]},e.prototype._serialize=function(e){if(\"xml\"===e.format)return new s.XMLWriter(this._options,e).serialize(this.node);if(\"map\"===e.format)return new s.MapWriter(this._options,e).serialize(this.node);if(\"object\"===e.format)return new s.ObjectWriter(this._options,e).serialize(this.node);if(\"json\"===e.format)return new s.JSONWriter(this._options,e).serialize(this.node);if(\"yaml\"===e.format)return new s.YAMLWriter(this._options,e).serialize(this.node);throw new Error(\"Invalid writer format: \"+e.format+\". \"+this._debugInfo())},e.prototype._extractNamespace=function(e,t,r){var n=t.indexOf(\"@\");if(n>0&&(void 0===e&&(e=t.slice(n+1)),t=t.slice(0,n)),void 0===e)e=r?this._options.defaultNamespace.ele:this._options.defaultNamespace.att;else if(null!==e&&\"@\"===e[0]){var i=e.slice(1);if(void 0===(e=this._options.namespaceAlias[i]))throw new Error(\"Namespace alias `\"+i+\"` is not defined. \"+this._debugInfo())}return[e,t]},e.prototype._updateNamespace=function(t){var r,o,a,s,u=this._domNode;if(l.Guard.isElementNode(u)&&null!==t&&u.namespaceURI!==t){var h=n(c.namespace_extractQName(u.prefix?u.prefix+\":\"+u.localName:u.localName),2),p=h[0],f=h[1],d=c.create_element(this._doc,f,t,p);try{for(var m=i(u.attributes),y=m.next();!y.done;y=m.next()){var v=y.value,_=v.prefix?v.prefix+\":\"+v.localName:v.localName,g=n(c.namespace_extractQName(_),1)[0],b=v.namespaceURI;null===b&&null!==g&&(b=u.lookupNamespaceURI(g)),null===b?d.setAttribute(_,v.value):d.setAttributeNS(b,_,v.value)}}catch(e){r={error:e}}finally{try{y&&!y.done&&(o=m.return)&&o.call(m)}finally{if(r)throw r.error}}var x=u.parentNode;if(null===x)throw new Error(\"Parent node is null.\"+this._debugInfo());x.replaceChild(d,u),this._domNode=d;try{for(var w=i(u.childNodes),E=w.next();!E.done;E=w.next()){var D=E.value.cloneNode(!0);if(d.appendChild(D),l.Guard.isElementNode(D)){var S=n(c.namespace_extractQName(D.prefix?D.prefix+\":\"+D.localName:D.localName),1)[0],C=d.lookupNamespaceURI(S);new e(D)._updateNamespace(C)}}}catch(e){a={error:e}}finally{try{E&&!E.done&&(s=w.return)&&s.call(w)}finally{if(a)throw a.error}}}},Object.defineProperty(e.prototype,\"_doc\",{get:function(){var e=this.node;if(l.Guard.isDocumentNode(e))return e;var t=e.ownerDocument;if(!t)throw new Error(\"Owner document is null. \"+this._debugInfo());return t},enumerable:!0,configurable:!0}),e.prototype._debugInfo=function(e){var t=this.node,r=t.parentNode;e=e||t.nodeName;var n=r?r.nodeName:\"\";return n?\"node: <\"+e+\">, parent: <\"+n+\">\":\"node: <\"+e+\">\"},Object.defineProperty(e.prototype,\"_options\",{get:function(){var e=this._doc;if(void 0===e._xmlBuilderOptions)throw new Error(\"Builder options is not set.\");return e._xmlBuilderOptions},set:function(e){this._doc._xmlBuilderOptions=e},enumerable:!0,configurable:!0}),e}();t.XMLBuilderImpl=d},function(e,t,r){var n=r(11),i=r(117),o=n.WeakMap;e.exports=\"function\"==typeof o&&/native code/.test(i(o))},function(e,t,r){var n=r(46),i=r(82),o=r(85),a=r(18);e.exports=n(\"Reflect\",\"ownKeys\")||function(e){var t=i.f(a(e)),r=o.f;return r?t.concat(r(e)):t}},function(e,t,r){var n=r(16),i=r(15),o=r(18),a=r(61);e.exports=n?Object.defineProperties:function(e,t){o(e);for(var r,n=a(t),s=n.length,u=0;s>u;)i.f(e,r=n[u++],t[r]);return e}},function(e,t,r){var n=r(46);e.exports=n(\"document\",\"documentElement\")},function(e,t,r){var n=r(24),i=r(82).f,o={}.toString,a=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&\"[object Window]\"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(n(e))}},function(e,t,r){\"use strict\";var n=r(4),i=r(36).every,o=r(48),a=r(28),s=o(\"every\"),u=a(\"every\");n({target:\"Array\",proto:!0,forced:!s||!u},{every:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){\"use strict\";var n=r(4),i=r(36).filter,o=r(63),a=r(28),s=o(\"filter\"),u=a(\"filter\");n({target:\"Array\",proto:!0,forced:!s||!u},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){var n=r(46);e.exports=n(\"navigator\",\"userAgent\")||\"\"},function(e,t,r){\"use strict\";var n=r(4),i=r(36).find,o=r(130),a=r(28),s=!0,u=a(\"find\");\"find\"in[]&&Array(1).find((function(){s=!1})),n({target:\"Array\",proto:!0,forced:s||!u},{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o(\"find\")},function(e,t,r){\"use strict\";var n=r(131).IteratorPrototype,i=r(60),o=r(40),a=r(62),s=r(49),u=function(){return this};e.exports=function(e,t,r){var l=t+\" Iterator\";return e.prototype=i(n,{next:o(1,r)}),a(e,l,!1,!0),s[l]=u,e}},function(e,t,r){var n=r(8);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError(\"Can't set \"+String(e)+\" as a prototype\");return e}},function(e,t,r){\"use strict\";var n=r(4),i=r(36).map,o=r(63),a=r(28),s=o(\"map\"),u=a(\"map\");n({target:\"Array\",proto:!0,forced:!s||!u},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){\"use strict\";var n=r(4),i=r(200).left,o=r(48),a=r(28),s=o(\"reduce\"),u=a(\"reduce\",{1:0});n({target:\"Array\",proto:!0,forced:!s||!u},{reduce:function(e){return i(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){var n=r(127),i=r(27),o=r(41),a=r(26),s=function(e){return function(t,r,s,u){n(r);var l=i(t),c=o(l),h=a(l.length),p=e?h-1:0,f=e?-1:1;if(s<2)for(;;){if(p in c){u=c[p],p+=f;break}if(p+=f,e?p<0:h<=p)throw TypeError(\"Reduce of empty array with no initial value\")}for(;e?p>=0:h>p;p+=f)p in c&&(u=r(u,c[p],p,l));return u}};e.exports={left:s(!1),right:s(!0)}},function(e,t,r){\"use strict\";var n=r(4),i=r(36).some,o=r(48),a=r(28),s=o(\"some\"),u=a(\"some\");n({target:\"Array\",proto:!0,forced:!s||!u},{some:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){\"use strict\";var n=r(90),i=r(135);e.exports=n?{}.toString:function(){return\"[object \"+i(this)+\"]\"}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,r){var n=r(8);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,r){var n=r(5),i=r(49),o=n(\"iterator\"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||a[o]===e)}},function(e,t,r){var n=r(135),i=r(49),o=r(5)(\"iterator\");e.exports=function(e){if(null!=e)return e[o]||e[\"@@iterator\"]||i[n(e)]}},function(e,t,r){var n=r(18);e.exports=function(e,t,r,i){try{return i?t(n(r)[0],r[1]):t(r)}catch(t){var o=e.return;throw void 0!==o&&n(o.call(e)),t}}},function(e,t,r){var n=r(5)(\"iterator\"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},e(o)}catch(e){}return r}},function(e,t,r){var n=r(13),i=r(133);e.exports=function(e,t,r){var o,a;return i&&\"function\"==typeof(o=t.constructor)&&o!==r&&n(a=o.prototype)&&a!==r.prototype&&i(e,a),e}},function(e,t,r){var n=r(25);e.exports=function(e,t,r){for(var i in t)n(e,i,t[i],r);return e}},function(e,t,r){\"use strict\";var n=r(46),i=r(15),o=r(5),a=r(16),s=o(\"species\");e.exports=function(e){var t=n(e),r=i.f;a&&t&&!t[s]&&r(t,s,{configurable:!0,get:function(){return this}})}},function(e,t,r){\"use strict\";var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(){function e(e){void 0===e&&(e=1e3),this._items=new Set,this._limit=e}return e.prototype.add=function(e){if(this._items.add(e),this._items.size>this._limit){var t=this._items.values().next();t.done||this._items.delete(t.value)}return this},e.prototype.delete=function(e){return this._items.delete(e)},e.prototype.has=function(e){return this._items.has(e)},e.prototype.clear=function(){this._items.clear()},Object.defineProperty(e.prototype,\"size\",{get:function(){return this._items.size},enumerable:!0,configurable:!0}),e.prototype.forEach=function(e,t){var r=this;this._items.forEach((function(n){return e.call(t,n,n,r)}))},e.prototype.keys=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items.keys())];case 1:return e.sent(),[2]}}))},e.prototype.values=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items.values())];case 1:return e.sent(),[2]}}))},e.prototype.entries=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items.entries())];case 1:return e.sent(),[2]}}))},e.prototype[Symbol.iterator]=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items)];case 1:return e.sent(),[2]}}))},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return\"FixedSizeSet\"},enumerable:!0,configurable:!0}),e}();t.FixedSizeSet=o},function(e,t,r){\"use strict\";var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(){function e(e){void 0===e&&(e=1e3),this._items=new Map,this._limit=e}return e.prototype.get=function(e){return this._items.get(e)},e.prototype.set=function(e,t){if(this._items.set(e,t),this._items.size>this._limit){var r=this._items.keys().next();r.done||this._items.delete(r.value)}},e.prototype.delete=function(e){return this._items.delete(e)},e.prototype.has=function(e){return this._items.has(e)},e.prototype.clear=function(){this._items.clear()},Object.defineProperty(e.prototype,\"size\",{get:function(){return this._items.size},enumerable:!0,configurable:!0}),e.prototype.forEach=function(e,t){this._items.forEach((function(r,n){return e.call(t,n,r)}))},e.prototype.keys=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items.keys())];case 1:return e.sent(),[2]}}))},e.prototype.values=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items.values())];case 1:return e.sent(),[2]}}))},e.prototype.entries=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items.entries())];case 1:return e.sent(),[2]}}))},e.prototype[Symbol.iterator]=function(){return n(this,(function(e){switch(e.label){case 0:return[5,i(this._items)];case 1:return e.sent(),[2]}}))},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return\"ObjectCache\"},enumerable:!0,configurable:!0}),e}();t.ObjectCache=o},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(e){void 0===e&&(e=1e3),this._items=new Map,this._limit=e}return e.prototype.check=function(e,t){if(this._items.get(e)===t)return!0;if(this._items.get(t)===e)return!1;var r=Math.random()<.5;if(r?this._items.set(e,t):this._items.set(t,e),this._items.size>this._limit){var n=this._items.keys().next();n.done||this._items.delete(n.value)}return r},e}();t.CompareCache=n},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(e){this._initialized=!1,this._value=void 0,this._initFunc=e}return Object.defineProperty(e.prototype,\"value\",{get:function(){return this._initialized||(this._value=this._initFunc(),this._initialized=!0),this._value},enumerable:!0,configurable:!0}),e}();t.Lazy=n},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(e){this._pointer=0,this._chars=Array.from(e),this._length=this._chars.length}return Object.defineProperty(e.prototype,\"eof\",{get:function(){return this._pointer>=this._length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"length\",{get:function(){return this._length},enumerable:!0,configurable:!0}),e.prototype.codePoint=function(){if(void 0===this._codePoint)if(this.eof)this._codePoint=-1;else{var e=this._chars[this._pointer].codePointAt(0);this._codePoint=void 0!==e?e:-1}return this._codePoint},e.prototype.c=function(){return void 0===this._c&&(this._c=this.eof?\"\":this._chars[this._pointer]),this._c},e.prototype.remaining=function(){return void 0===this._remaining&&(this._remaining=this.eof?\"\":this._chars.slice(this._pointer+1).join(\"\")),this._remaining},e.prototype.substring=function(){return void 0===this._substring&&(this._substring=this.eof?\"\":this._chars.slice(this._pointer).join(\"\")),this._substring},Object.defineProperty(e.prototype,\"pointer\",{get:function(){return this._pointer},set:function(e){e!==this._pointer&&(this._pointer=e,this._codePoint=void 0,this._c=void 0,this._remaining=void 0,this._substring=void 0)},enumerable:!0,configurable:!0}),e}();t.StringWalker=n},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(218);t.MapWriter=n.MapWriter;var i=r(258);t.XMLWriter=i.XMLWriter;var o=r(67);t.ObjectWriter=o.ObjectWriter;var a=r(260);t.JSONWriter=a.JSONWriter;var s=r(261);t.YAMLWriter=s.YAMLWriter},function(e,t,r){\"use strict\";r(19),r(219),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(1),a=r(67),s=function(e){function t(t,r){var n=e.call(this,t)||this;return n._writerOptions=o.applyDefaults(r,{format:\"map\",wellFormed:!1,group:!1,verbose:!1}),n}return i(t,e),t.prototype.serialize=function(e){var t=o.applyDefaults(this._writerOptions,{format:\"object\",wellFormed:!1,verbose:!1}),r=new a.ObjectWriter(this._builderOptions,t).serialize(e);return this._convertObject(r)},t.prototype._convertObject=function(e){if(o.isArray(e)){for(var t=0;t<e.length;t++)e[t]=this._convertObject(e[t]);return e}if(o.isObject(e)){var r=new Map;for(var n in e)r.set(n,this._convertObject(e[n]));return r}return e},t}(r(50).BaseWriter);t.MapWriter=s},function(e,t,r){\"use strict\";var n=r(139),i=r(143);e.exports=n(\"Map\",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),i)},function(e,t,r){\"use strict\";var n=r(4),i=r(8),o=r(59),a=r(13),s=r(27),u=r(26),l=r(134),c=r(128),h=r(63),p=r(5),f=r(129),d=p(\"isConcatSpreadable\"),m=f>=51||!i((function(){var e=[];return e[d]=!1,e.concat()[0]!==e})),y=h(\"concat\"),v=function(e){if(!a(e))return!1;var t=e[d];return void 0!==t?!!t:o(e)};n({target:\"Array\",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,i,o,a=s(this),h=c(a,0),p=0;for(t=-1,n=arguments.length;t<n;t++)if(v(o=-1===t?a:arguments[t])){if(p+(i=u(o.length))>9007199254740991)throw TypeError(\"Maximum allowed index exceeded\");for(r=0;r<i;r++,p++)r in o&&l(h,p,o[r])}else{if(p>=9007199254740991)throw TypeError(\"Maximum allowed index exceeded\");l(h,p++,o)}return h.length=p,h}})},function(e,t,r){\"use strict\";var n=r(8);function i(e,t){return RegExp(e,t)}t.UNSUPPORTED_Y=n((function(){var e=i(\"a\",\"y\");return e.lastIndex=2,null!=e.exec(\"abcd\")})),t.BROKEN_CARET=n((function(){var e=i(\"^r\",\"gy\");return e.lastIndex=2,null!=e.exec(\"str\")}))},function(e,t,r){var n=r(223);e.exports=function(e){if(n(e))throw TypeError(\"The method doesn't accept regular expressions\");return e}},function(e,t,r){var n=r(13),i=r(42),o=r(5)(\"match\");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[o])?!!t:\"RegExp\"==i(e))}},function(e,t,r){var n=r(5)(\"match\");e.exports=function(e){var t=/./;try{\"/./\"[e](t)}catch(r){try{return t[n]=!1,\"/./\"[e](t)}catch(e){}}return!1}},function(e,t,r){\"use strict\";r(68);var n=r(25),i=r(8),o=r(5),a=r(93),s=r(21),u=o(\"species\"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:\"7\"},e},\"7\"!==\"\".replace(e,\"$<a>\")})),c=\"$0\"===\"a\".replace(/./,\"$0\"),h=o(\"replace\"),p=!!/./[h]&&\"\"===/./[h](\"a\",\"$0\"),f=!i((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r=\"ab\".split(e);return 2!==r.length||\"a\"!==r[0]||\"b\"!==r[1]}));e.exports=function(e,t,r,h){var d=o(e),m=!i((function(){var t={};return t[d]=function(){return 7},7!=\"\"[e](t)})),y=m&&!i((function(){var t=!1,r=/a/;return\"split\"===e&&((r={}).constructor={},r.constructor[u]=function(){return r},r.flags=\"\",r[d]=/./[d]),r.exec=function(){return t=!0,null},r[d](\"\"),!t}));if(!m||!y||\"replace\"===e&&(!l||!c||p)||\"split\"===e&&!f){var v=/./[d],_=r(d,\"\"[e],(function(e,t,r,n,i){return t.exec===a?m&&!i?{done:!0,value:v.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),{REPLACE_KEEPS_$0:c,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),g=_[0],b=_[1];n(String.prototype,e,g),n(RegExp.prototype,d,2==t?function(e,t){return b.call(e,this,t)}:function(e){return b.call(e,this)})}h&&s(RegExp.prototype[d],\"sham\",!0)}},function(e,t,r){\"use strict\";var n=r(137).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},function(e,t,r){var n=r(42),i=r(93);e.exports=function(e,t){var r=e.exec;if(\"function\"==typeof r){var o=r.call(e,t);if(\"object\"!=typeof o)throw TypeError(\"RegExp exec method returned something other than an Object or null\");return o}if(\"RegExp\"!==n(e))throw TypeError(\"RegExp#exec called on incompatible receiver\");return i.call(e,t)}},function(e,t,r){\"use strict\";(function(e){Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(96);t.forgivingBase64Encode=function(t){return e.from(t).toString(\"base64\")},t.forgivingBase64Decode=function(t){return\"\"===t?\"\":((t=t.replace(n.ASCIIWhiteSpace,\"\")).length%4==0&&(t.endsWith(\"==\")?t=t.substr(0,t.length-2):t.endsWith(\"=\")&&(t=t.substr(0,t.length-1))),t.length%4==1?null:/[0-9A-Za-z+/]/.test(t)?e.from(t,\"base64\").toString(\"utf8\"):null)}}).call(this,r(145).Buffer)},function(e,t,r){\"use strict\";t.byteLength=function(e){var t=l(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=l(e),a=n[0],s=n[1],u=new o(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),c=0,h=s>0?a-4:a;for(r=0;r<h;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===s&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,u[c++]=255&t);1===s&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(c(e,a,a+16383>s?s:a+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+\"==\")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+\"=\"));return o.join(\"\")};for(var n=[],i=[],o=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",s=0,u=a.length;s<u;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var r=e.indexOf(\"=\");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,r){for(var i,o,a=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join(\"\")}i[\"-\".charCodeAt(0)]=62,i[\"_\".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,l=u>>1,c=-7,h=r?i-1:0,p=r?-1:1,f=e[t+h];for(h+=p,o=f&(1<<-c)-1,f>>=-c,c+=s;c>0;o=256*o+e[t+h],h+=p,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=n;c>0;a=256*a+e[t+h],h+=p,c-=8);if(0===o)o=1-l;else{if(o===u)return a?NaN:1/0*(f?-1:1);a+=Math.pow(2,n),o-=l}return(f?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:o-1,d=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(a++,u/=2),a+h>=c?(s=0,a=c):a+h>=1?(s=(t*u-1)*Math.pow(2,i),a+=h):(s=t*Math.pow(2,h-1)*Math.pow(2,i),a=0));i>=8;e[r+f]=255&s,f+=d,s/=256,i-=8);for(a=a<<i|s,l+=i;l>0;e[r+f]=255&a,f+=d,a/=256,l-=8);e[r+f-d]|=128*m}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return\"[object Array]\"==r.call(e)}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(1);function o(e){var t,r;if(null===e||i.isString(e)||i.isNumber(e))return e;if(i.isArray(e)){var a=new Array;try{for(var s=n(e),u=s.next();!u.done;u=s.next()){var l=u.value;a.push(o(l))}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}return a}if(i.isObject(e)){a=new Map;for(var c in e)if(e.hasOwnProperty(c)){var h=e[c];a.set(c,o(h))}return a}return e}t.parseJSONFromBytes=function(e){var t=i.utf8Decode(e);return JSON.parse.call(void 0,t)},t.serializeJSONToBytes=function(e){var t=JSON.stringify.call(void 0,e);return i.utf8Encode(t)},t.parseJSONIntoInfraValues=function(e){return o(JSON.parse.call(void 0,e))},t.convertAJSONDerivedJavaScriptValueToAnInfraValue=o},function(e,t,r){\"use strict\";var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e},a=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(1);t.append=function(e,t){e.push(t)},t.extend=function(e,t){e.push.apply(e,o(t))},t.prepend=function(e,t){e.unshift(t)},t.replace=function(e,t,r){var n,i,o=0;try{for(var u=a(e),l=u.next();!l.done;l=u.next()){var c=l.value;if(s.isFunction(t))t.call(null,c)&&(e[o]=r);else if(c===t)return void(e[o]=r);o++}}catch(e){n={error:e}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}},t.insert=function(e,t,r){e.splice(r,0,t)},t.remove=function(e,t){for(var r=e.length;r--;){var n=e[r];if(s.isFunction(t))t.call(null,n)&&e.splice(r,1);else if(n===t)return void e.splice(r,1)}},t.empty=function(e){e.length=0},t.contains=function(e,t){var r,n;try{for(var i=a(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(s.isFunction(t)){if(t.call(null,u))return!0}else if(u===t)return!0}}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return!1},t.size=function(e,t){var r,n;if(void 0===t)return e.length;var i=0;try{for(var o=a(e),s=o.next();!s.done;s=o.next()){var u=s.value;t.call(null,u)&&i++}}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return i},t.isEmpty=function(e){return 0===e.length},t.forEach=function(e,t){var r,i,o,s,u,l;return n(this,(function(n){switch(n.label){case 0:return void 0!==t?[3,2]:[5,a(e)];case 1:return n.sent(),[3,9];case 2:n.trys.push([2,7,8,9]),r=a(e),i=r.next(),n.label=3;case 3:return i.done?[3,6]:(o=i.value,t.call(null,o)?[4,o]:[3,5]);case 4:n.sent(),n.label=5;case 5:return i=r.next(),[3,3];case 6:return[3,9];case 7:return s=n.sent(),u={error:s},[3,9];case 8:try{i&&!i.done&&(l=r.return)&&l.call(r)}finally{if(u)throw u.error}return[7];case 9:return[2]}}))},t.clone=function(e){return new(Array.bind.apply(Array,o([void 0],e)))},t.sortInAscendingOrder=function(e,t){return e.sort((function(e,r){return t.call(null,e,r)?-1:1}))},t.sortInDescendingOrder=function(e,t){return e.sort((function(e,r){return t.call(null,e,r)?1:-1}))}},function(e,t,r){\"use strict\";var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},o=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(1);t.get=function(e,t){return e.get(t)},t.set=function(e,t,r){e.set(t,r)},t.remove=function(e,t){var r,n,o,a;if(s.isFunction(t)){var u=[];try{for(var l=i(e),c=l.next();!c.done;c=l.next()){var h=c.value;t.call(null,h)&&u.push(h[0])}}catch(e){r={error:e}}finally{try{c&&!c.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}try{for(var p=i(u),f=p.next();!f.done;f=p.next()){var d=f.value;e.delete(d)}}catch(e){o={error:e}}finally{try{f&&!f.done&&(a=p.return)&&a.call(p)}finally{if(o)throw o.error}}}else e.delete(t)},t.contains=function(e,t){var r,n;if(s.isFunction(t)){try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var u=a.value;if(t.call(null,u))return!0}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return!1}return e.has(t)},t.keys=function(e){return new Set(e.keys())},t.values=function(e){return a(e.values())},t.size=function(e,t){var r,n;if(void 0===t)return e.size;var o=0;try{for(var a=i(e),s=a.next();!s.done;s=a.next()){var u=s.value;t.call(null,u)&&o++}}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return o},t.isEmpty=function(e){return 0===e.size},t.forEach=function(e,t){var r,o,a,s,u,l;return n(this,(function(n){switch(n.label){case 0:return void 0!==t?[3,2]:[5,i(e)];case 1:return n.sent(),[3,9];case 2:n.trys.push([2,7,8,9]),r=i(e),o=r.next(),n.label=3;case 3:return o.done?[3,6]:(a=o.value,t.call(null,a)?[4,a]:[3,5]);case 4:n.sent(),n.label=5;case 5:return o=r.next(),[3,3];case 6:return[3,9];case 7:return s=n.sent(),u={error:s},[3,9];case 8:try{o&&!o.done&&(l=r.return)&&l.call(r)}finally{if(u)throw u.error}return[7];case 9:return[2]}}))},t.clone=function(e){return new Map(e)},t.sortInAscendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?-1:1})),new Map(r)},t.sortInDescendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?1:-1})),new Map(r)}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.HTML=\"http://www.w3.org/1999/xhtml\",t.XML=\"http://www.w3.org/XML/1998/namespace\",t.XMLNS=\"http://www.w3.org/2000/xmlns/\",t.MathML=\"http://www.w3.org/1998/Math/MathML\",t.SVG=\"http://www.w3.org/2000/svg\",t.XLink=\"http://www.w3.org/1999/xlink\"},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.enqueue=function(e,t){e.push(t)},t.dequeue=function(e){return e.shift()||null}},function(e,t,r){\"use strict\";var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},o=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(1);function u(e,t){var r,n;try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var s=a.value;if(!t.has(s))return!1}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return!0}t.append=function(e,t){e.add(t)},t.extend=function(e,t){t.forEach(e.add,e)},t.prepend=function(e,t){var r=new Set(e);e.clear(),e.add(t),r.forEach(e.add,e)},t.replace=function(e,t,r){var n,o,a=new Set;try{for(var u=i(e),l=u.next();!l.done;l=u.next()){var c=l.value;s.isFunction(t)?t.call(null,c)?a.add(r):a.add(c):c===t?a.add(r):a.add(c)}}catch(e){n={error:e}}finally{try{l&&!l.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}e.clear(),a.forEach(e.add,e)},t.insert=function(e,t,r){var n,o,a=new Set,s=0;try{for(var u=i(e),l=u.next();!l.done;l=u.next()){var c=l.value;s===r&&a.add(t),a.add(c),s++}}catch(e){n={error:e}}finally{try{l&&!l.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}e.clear(),a.forEach(e.add,e)},t.remove=function(e,t){var r,n,o,a;if(s.isFunction(t)){var u=[];try{for(var l=i(e),c=l.next();!c.done;c=l.next()){var h=c.value;t.call(null,h)&&u.push(h)}}catch(e){r={error:e}}finally{try{c&&!c.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}try{for(var p=i(u),f=p.next();!f.done;f=p.next()){var d=f.value;e.delete(d)}}catch(e){o={error:e}}finally{try{f&&!f.done&&(a=p.return)&&a.call(p)}finally{if(o)throw o.error}}}else e.delete(t)},t.empty=function(e){e.clear()},t.contains=function(e,t){var r,n;if(!s.isFunction(t))return e.has(t);try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var u=a.value;if(t.call(null,u))return!0}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return!1},t.size=function(e,t){var r,n;if(void 0===t)return e.size;var o=0;try{for(var a=i(e),s=a.next();!s.done;s=a.next()){var u=s.value;t.call(null,u)&&o++}}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return o},t.isEmpty=function(e){return 0===e.size},t.forEach=function(e,t){var r,o,a,s,u,l;return n(this,(function(n){switch(n.label){case 0:return void 0!==t?[3,2]:[5,i(e)];case 1:return n.sent(),[3,9];case 2:n.trys.push([2,7,8,9]),r=i(e),o=r.next(),n.label=3;case 3:return o.done?[3,6]:(a=o.value,t.call(null,a)?[4,a]:[3,5]);case 4:n.sent(),n.label=5;case 5:return o=r.next(),[3,3];case 6:return[3,9];case 7:return s=n.sent(),u={error:s},[3,9];case 8:try{o&&!o.done&&(l=r.return)&&l.call(r)}finally{if(u)throw u.error}return[7];case 9:return[2]}}))},t.clone=function(e){return new Set(e)},t.sortInAscendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?-1:1})),new Set(r)},t.sortInDescendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?1:-1})),new Set(r)},t.isSubsetOf=u,t.isSupersetOf=function(e,t){return u(t,e)},t.intersection=function(e,t){var r,n,o=new Set;try{for(var a=i(e),s=a.next();!s.done;s=a.next()){var u=s.value;t.has(u)&&o.add(u)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return o},t.union=function(e,t){var r=new Set(e);return t.forEach(r.add,r),r},t.range=function(e,t){for(var r=new Set,n=e;n<=t;n++)r.add(n);return r}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.push=function(e,t){e.push(t)},t.pop=function(e){return e.pop()||null}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(96),o=r(147),a=r(146),s=r(1);function u(e,t){for(var r=0;;){var n=r<e.length?e.charCodeAt(r):null,i=r<t.length?t.charCodeAt(r):null;if(null===n)return!0;if(n!==i)return!1;r++}}function l(e){var t,r,i=Array.from(e),o=new Uint8Array(i.length),a=0;try{for(var s=n(e),u=s.next();!u.done;u=s.next()){var l=u.value.codePointAt(0);console.assert(void 0!==l&&l<=255,\"isomorphicEncode requires string bytes to be less than or equal to 0x00FF.\"),void 0!==l&&l<=255&&(o[a++]=l)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}return o}function c(e){return/^[\\u0000-\\u007F]*$/.test(e)}function h(e){var t,r,i=\"\";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value,u=s.codePointAt(0);i+=void 0!==u&&u>=65&&u<=90?String.fromCodePoint(u+32):s}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return i}function p(e){return e.replace(/^[\\t\\n\\f\\r ]+/,\"\").replace(/[\\t\\n\\f\\r ]+$/,\"\")}function f(e,t,r){if(!s.isArray(t))return f(e,Array.from(t),r);for(var n=\"\";r.position<t.length&&e.call(null,t[r.position]);)n+=t[r.position],r.position++;return n}function d(e,t){f((function(e){return i.ASCIIWhiteSpace.test(e)}),e,t)}t.isCodeUnitPrefix=u,t.isCodeUnitLessThan=function(e,t){if(u(t,e))return!1;if(u(e,t))return!0;for(var r=0;r<Math.min(e.length,t.length);r++){var n=e.charCodeAt(r),i=t.charCodeAt(r);if(n!==i)return n<i}return!1},t.isomorphicEncode=l,t.isASCIIString=c,t.asciiLowercase=h,t.asciiUppercase=function(e){var t,r,i=\"\";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value,u=s.codePointAt(0);i+=void 0!==u&&u>=97&&u<=122?String.fromCodePoint(u-32):s}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return i},t.asciiCaseInsensitiveMatch=function(e,t){return h(e)===h(t)},t.asciiEncode=function(e){return console.assert(c(e),\"asciiEncode requires an ASCII string.\"),l(e)},t.asciiDecode=function(e){var t,r;try{for(var i=n(e),s=i.next();!s.done;s=i.next()){var u=s.value;console.assert(a.isASCIIByte(u),\"asciiDecode requires an ASCII byte sequence.\")}}catch(e){t={error:e}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return o.isomorphicDecode(e)},t.stripNewlines=function(e){return e.replace(/[\\n\\r]/g,\"\")},t.normalizeNewlines=function(e){return e.replace(/\\r\\n/g,\"\\n\").replace(/\\r/g,\"\\n\")},t.stripLeadingAndTrailingASCIIWhitespace=p,t.stripAndCollapseASCIIWhitespace=function(e){return p(e.replace(/[\\t\\n\\f\\r ]{2,}/g,\" \"))},t.collectASequenceOfCodePoints=f,t.skipASCIIWhitespace=d,t.strictlySplit=function e(t,r){if(!s.isArray(t))return e(Array.from(t),r);var n={position:0},i=[],o=f((function(e){return r!==e}),t,n);for(i.push(o);n.position<t.length;)console.assert(t[n.position]===r,\"strictlySplit found no delimiter in input string.\"),n.position++,o=f((function(e){return r!==e}),t,n),i.push(o);return i},t.splitAStringOnASCIIWhitespace=function e(t){if(!s.isArray(t))return e(Array.from(t));var r={position:0},n=[];for(d(t,r);r.position<t.length;){var o=f((function(e){return!i.ASCIIWhiteSpace.test(e)}),t,r);n.push(o),d(t,r)}return n},t.splitAStringOnCommas=function e(t){if(!s.isArray(t))return e(Array.from(t));for(var r={position:0},n=[];r.position<t.length;){var i=f((function(e){return\",\"!==e}),t,r);n.push(p(i)),r.position<t.length&&(console.assert(\",\"===t[r.position],\"splitAStringOnCommas found no delimiter in input string.\"),r.position++)}return n},t.concatenate=function(e,t){return void 0===t&&(t=\"\"),0===e.length?\"\":e.join(t)}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(97);t.abort_add=function(e,t){t._abortedFlag||t._abortAlgorithms.add(e)},t.abort_remove=function(e,t){t._abortAlgorithms.delete(e)},t.abort_signalAbort=function(e){var t,r;if(!e._abortedFlag){e._abortedFlag=!0;try{for(var o=n(e._abortAlgorithms),a=o.next();!a.done;a=o.next()){a.value.call(e)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}e._abortAlgorithms.clear(),i.event_fireAnEvent(\"abort\",e)}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(150),i=function(){function e(){}return e.asNode=function(e){if(n.Guard.isNode(e))return e;throw new Error(\"Invalid object. Node expected.\")},e}();t.Cast=i},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,\"size\",{get:function(){return 0},enumerable:!0,configurable:!0}),e.prototype.add=function(e){throw new Error(\"Cannot add to an empty set.\")},e.prototype.clear=function(){},e.prototype.delete=function(e){return!1},e.prototype.forEach=function(e,t){},e.prototype.has=function(e){return!1},e.prototype[Symbol.iterator]=function(){return new i},e.prototype.entries=function(){return new i},e.prototype.keys=function(){return new i},e.prototype.values=function(){return new i},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return\"EmptySet\"},enumerable:!0,configurable:!0}),e}();t.EmptySet=n;var i=function(){function e(){}return e.prototype[Symbol.iterator]=function(){return this},e.prototype.next=function(){return{done:!0,value:null}},e}()},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.SchemeStart=0]=\"SchemeStart\",e[e.Scheme=1]=\"Scheme\",e[e.NoScheme=2]=\"NoScheme\",e[e.SpecialRelativeOrAuthority=3]=\"SpecialRelativeOrAuthority\",e[e.PathOrAuthority=4]=\"PathOrAuthority\",e[e.Relative=5]=\"Relative\",e[e.RelativeSlash=6]=\"RelativeSlash\",e[e.SpecialAuthoritySlashes=7]=\"SpecialAuthoritySlashes\",e[e.SpecialAuthorityIgnoreSlashes=8]=\"SpecialAuthorityIgnoreSlashes\",e[e.Authority=9]=\"Authority\",e[e.Host=10]=\"Host\",e[e.Hostname=11]=\"Hostname\",e[e.Port=12]=\"Port\",e[e.File=13]=\"File\",e[e.FileSlash=14]=\"FileSlash\",e[e.FileHost=15]=\"FileHost\",e[e.PathStart=16]=\"PathStart\",e[e.Path=17]=\"Path\",e[e.CannotBeABaseURLPath=18]=\"CannotBeABaseURLPath\",e[e.Query=19]=\"Query\",e[e.Fragment=20]=\"Fragment\"}(t.ParserState||(t.ParserState={})),t.OpaqueOrigin=[\"\",\"\",null,null]},function(e,t,r){\"use strict\";var n=r(245),i=r(247);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=g,t.resolve=function(e,t){return g(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?g(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=g(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,l=[\"{\",\"}\",\"|\",\"\\\\\",\"^\",\"`\"].concat([\"<\",\">\",'\"',\"`\",\" \",\"\\r\",\"\\n\",\"\\t\"]),c=[\"'\"].concat(l),h=[\"%\",\"/\",\"?\",\";\",\"#\"].concat(c),p=[\"/\",\"?\",\"#\"],f=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,\"javascript:\":!0},y={javascript:!0,\"javascript:\":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,\"http:\":!0,\"https:\":!0,\"ftp:\":!0,\"gopher:\":!0,\"file:\":!0},_=r(248);function g(e,t,r){if(e&&i.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError(\"Parameter 'url' must be a string, not \"+typeof e);var o=e.indexOf(\"?\"),s=-1!==o&&o<e.indexOf(\"#\")?\"?\":\"#\",l=e.split(s);l[0]=l[0].replace(/\\\\/g,\"/\");var g=e=l.join(s);if(g=g.trim(),!r&&1===e.split(\"#\").length){var b=u.exec(g);if(b)return this.path=g,this.href=g,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?_.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search=\"\",this.query={}),this}var x=a.exec(g);if(x){var w=(x=x[0]).toLowerCase();this.protocol=w,g=g.substr(x.length)}if(r||x||g.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)){var E=\"//\"===g.substr(0,2);!E||x&&y[x]||(g=g.substr(2),this.slashes=!0)}if(!y[x]&&(E||x&&!v[x])){for(var D,S,C=-1,A=0;A<p.length;A++){-1!==(N=g.indexOf(p[A]))&&(-1===C||N<C)&&(C=N)}-1!==(S=-1===C?g.lastIndexOf(\"@\"):g.lastIndexOf(\"@\",C))&&(D=g.slice(0,S),g=g.slice(S+1),this.auth=decodeURIComponent(D)),C=-1;for(A=0;A<h.length;A++){var N;-1!==(N=g.indexOf(h[A]))&&(-1===C||N<C)&&(C=N)}-1===C&&(C=g.length),this.host=g.slice(0,C),g=g.slice(C),this.parseHost(),this.hostname=this.hostname||\"\";var T=\"[\"===this.hostname[0]&&\"]\"===this.hostname[this.hostname.length-1];if(!T)for(var O=this.hostname.split(/\\./),F=(A=0,O.length);A<F;A++){var k=O[A];if(k&&!k.match(f)){for(var P=\"\",I=0,L=k.length;I<L;I++)k.charCodeAt(I)>127?P+=\"x\":P+=k[I];if(!P.match(f)){var M=O.slice(0,A),B=O.slice(A+1),j=k.match(d);j&&(M.push(j[1]),B.unshift(j[2])),B.length&&(g=\"/\"+B.join(\".\")+g),this.hostname=M.join(\".\");break}}}this.hostname.length>255?this.hostname=\"\":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=n.toASCII(this.hostname));var R=this.port?\":\"+this.port:\"\",z=this.hostname||\"\";this.host=z+R,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),\"/\"!==g[0]&&(g=\"/\"+g))}if(!m[w])for(A=0,F=c.length;A<F;A++){var U=c[A];if(-1!==g.indexOf(U)){var G=encodeURIComponent(U);G===U&&(G=escape(U)),g=g.split(U).join(G)}}var X=g.indexOf(\"#\");-1!==X&&(this.hash=g.substr(X),g=g.slice(0,X));var q=g.indexOf(\"?\");if(-1!==q?(this.search=g.substr(q),this.query=g.substr(q+1),t&&(this.query=_.parse(this.query)),g=g.slice(0,q)):t&&(this.search=\"\",this.query={}),g&&(this.pathname=g),v[w]&&this.hostname&&!this.pathname&&(this.pathname=\"/\"),this.pathname||this.search){R=this.pathname||\"\";var W=this.search||\"\";this.path=R+W}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||\"\";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,\":\"),e+=\"@\");var t=this.protocol||\"\",r=this.pathname||\"\",n=this.hash||\"\",o=!1,a=\"\";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(\":\")?this.hostname:\"[\"+this.hostname+\"]\"),this.port&&(o+=\":\"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=_.stringify(this.query));var s=this.search||a&&\"?\"+a||\"\";return t&&\":\"!==t.substr(-1)&&(t+=\":\"),this.slashes||(!t||v[t])&&!1!==o?(o=\"//\"+(o||\"\"),r&&\"/\"!==r.charAt(0)&&(r=\"/\"+r)):o||(o=\"\"),n&&\"#\"!==n.charAt(0)&&(n=\"#\"+n),s&&\"?\"!==s.charAt(0)&&(s=\"?\"+s),t+o+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace(\"#\",\"%23\"))+n},o.prototype.resolve=function(e){return this.resolveObject(g(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var r=new o,n=Object.keys(this),a=0;a<n.length;a++){var s=n[a];r[s]=this[s]}if(r.hash=e.hash,\"\"===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),l=0;l<u.length;l++){var c=u[l];\"protocol\"!==c&&(r[c]=e[c])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname=\"/\"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var h=Object.keys(e),p=0;p<h.length;p++){var f=h[p];r[f]=e[f]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||y[e.protocol])r.pathname=e.pathname;else{for(var d=(e.pathname||\"\").split(\"/\");d.length&&!(e.host=d.shift()););e.host||(e.host=\"\"),e.hostname||(e.hostname=\"\"),\"\"!==d[0]&&d.unshift(\"\"),d.length<2&&d.unshift(\"\"),r.pathname=d.join(\"/\")}if(r.search=e.search,r.query=e.query,r.host=e.host||\"\",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||\"\",_=r.search||\"\";r.path=m+_}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var g=r.pathname&&\"/\"===r.pathname.charAt(0),b=e.host||e.pathname&&\"/\"===e.pathname.charAt(0),x=b||g||r.host&&e.pathname,w=x,E=r.pathname&&r.pathname.split(\"/\")||[],D=(d=e.pathname&&e.pathname.split(\"/\")||[],r.protocol&&!v[r.protocol]);if(D&&(r.hostname=\"\",r.port=null,r.host&&(\"\"===E[0]?E[0]=r.host:E.unshift(r.host)),r.host=\"\",e.protocol&&(e.hostname=null,e.port=null,e.host&&(\"\"===d[0]?d[0]=e.host:d.unshift(e.host)),e.host=null),x=x&&(\"\"===d[0]||\"\"===E[0])),b)r.host=e.host||\"\"===e.host?e.host:r.host,r.hostname=e.hostname||\"\"===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,E=d;else if(d.length)E||(E=[]),E.pop(),E=E.concat(d),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(D)r.hostname=r.host=E.shift(),(T=!!(r.host&&r.host.indexOf(\"@\")>0)&&r.host.split(\"@\"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift());return r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:\"\")+(r.search?r.search:\"\")),r.href=r.format(),r}if(!E.length)return r.pathname=null,r.search?r.path=\"/\"+r.search:r.path=null,r.href=r.format(),r;for(var S=E.slice(-1)[0],C=(r.host||e.host||E.length>1)&&(\".\"===S||\"..\"===S)||\"\"===S,A=0,N=E.length;N>=0;N--)\".\"===(S=E[N])?E.splice(N,1):\"..\"===S?(E.splice(N,1),A++):A&&(E.splice(N,1),A--);if(!x&&!w)for(;A--;A)E.unshift(\"..\");!x||\"\"===E[0]||E[0]&&\"/\"===E[0].charAt(0)||E.unshift(\"\"),C&&\"/\"!==E.join(\"/\").substr(-1)&&E.push(\"\");var T,O=\"\"===E[0]||E[0]&&\"/\"===E[0].charAt(0);D&&(r.hostname=r.host=O?\"\":E.length?E.shift():\"\",(T=!!(r.host&&r.host.indexOf(\"@\")>0)&&r.host.split(\"@\"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift()));return(x=x||r.host&&E.length)&&!O&&E.unshift(\"\"),E.length?r.pathname=E.join(\"/\"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:\"\")+(r.search?r.search:\"\")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(\":\"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,r){(function(e,n){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){t&&t.nodeType,e&&e.nodeType;var a=\"object\"==typeof n&&n;a.global!==a&&a.window!==a&&a.self;var s,u=2147483647,l=/^xn--/,c=/[^\\x20-\\x7E]/,h=/[\\x2E\\u3002\\uFF0E\\uFF61]/g,p={overflow:\"Overflow: input needs wider integers to process\",\"not-basic\":\"Illegal input >= 0x80 (not a basic code point)\",\"invalid-input\":\"Invalid input\"},f=Math.floor,d=String.fromCharCode;function m(e){throw new RangeError(p[e])}function y(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split(\"@\"),n=\"\";return r.length>1&&(n=r[0]+\"@\",e=r[1]),n+y((e=e.replace(h,\".\")).split(\".\"),t).join(\".\")}function _(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function g(e){return y(e,(function(e){var t=\"\";return e>65535&&(t+=d((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=d(e)})).join(\"\")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;n+=36)e=f(e/35);return f(n+36*e/(e+38))}function w(e){var t,r,n,i,o,a,s,l,c,h,p,d=[],y=e.length,v=0,_=128,b=72;for((r=e.lastIndexOf(\"-\"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&m(\"not-basic\"),d.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<y;){for(o=v,a=1,s=36;i>=y&&m(\"invalid-input\"),((l=(p=e.charCodeAt(i++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:36)>=36||l>f((u-v)/a))&&m(\"overflow\"),v+=l*a,!(l<(c=s<=b?1:s>=b+26?26:s-b));s+=36)a>f(u/(h=36-c))&&m(\"overflow\"),a*=h;b=x(v-o,t=d.length+1,0==o),f(v/t)>u-_&&m(\"overflow\"),_+=f(v/t),v%=t,d.splice(v++,0,_)}return g(d)}function E(e){var t,r,n,i,o,a,s,l,c,h,p,y,v,g,w,E=[];for(y=(e=_(e)).length,t=128,r=0,o=72,a=0;a<y;++a)(p=e[a])<128&&E.push(d(p));for(n=i=E.length,i&&E.push(\"-\");n<y;){for(s=u,a=0;a<y;++a)(p=e[a])>=t&&p<s&&(s=p);for(s-t>f((u-r)/(v=n+1))&&m(\"overflow\"),r+=(s-t)*v,t=s,a=0;a<y;++a)if((p=e[a])<t&&++r>u&&m(\"overflow\"),p==t){for(l=r,c=36;!(l<(h=c<=o?1:c>=o+26?26:c-o));c+=36)w=l-h,g=36-h,E.push(d(b(h+w%g,0))),l=f(w/g);E.push(d(b(l,0))),o=x(r,v,n==i),r=0,++n}++r,++t}return E.join(\"\")}s={version:\"1.4.1\",ucs2:{decode:_,encode:g},decode:w,encode:E,toASCII:function(e){return v(e,(function(e){return c.test(e)?\"xn--\"+E(e):e}))},toUnicode:function(e){return v(e,(function(e){return l.test(e)?w(e.slice(4).toLowerCase()):e}))}},void 0===(i=function(){return s}.call(t,r,t,e))||(e.exports=i)}()}).call(this,r(246)(e),r(78))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,\"loaded\",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,\"id\",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){\"use strict\";e.exports={isString:function(e){return\"string\"==typeof e},isObject:function(e){return\"object\"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,r){\"use strict\";t.decode=t.parse=r(249),t.encode=t.stringify=r(250)},function(e,t,r){\"use strict\";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,o){t=t||\"&\",r=r||\"=\";var a={};if(\"string\"!=typeof e||0===e.length)return a;var s=/\\+/g;e=e.split(t);var u=1e3;o&&\"number\"==typeof o.maxKeys&&(u=o.maxKeys);var l=e.length;u>0&&l>u&&(l=u);for(var c=0;c<l;++c){var h,p,f,d,m=e[c].replace(s,\"%20\"),y=m.indexOf(r);y>=0?(h=m.substr(0,y),p=m.substr(y+1)):(h=m,p=\"\"),f=decodeURIComponent(h),d=decodeURIComponent(p),n(a,f)?i(a[f])?a[f].push(d):a[f]=[a[f],d]:a[f]=d}return a};var i=Array.isArray||function(e){return\"[object Array]\"===Object.prototype.toString.call(e)}},function(e,t,r){\"use strict\";var n=function(e){switch(typeof e){case\"string\":return e;case\"boolean\":return e?\"true\":\"false\";case\"number\":return isFinite(e)?e:\"\";default:return\"\"}};e.exports=function(e,t,r,s){return t=t||\"&\",r=r||\"=\",null===e&&(e=void 0),\"object\"==typeof e?o(a(e),(function(a){var s=encodeURIComponent(n(a))+r;return i(e[a])?o(e[a],(function(e){return s+encodeURIComponent(n(e))})).join(t):s+encodeURIComponent(n(e[a]))})).join(t):s?encodeURIComponent(n(s))+r+encodeURIComponent(n(e)):\"\"};var i=Array.isArray||function(e){return\"[object Array]\"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var a=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(52);t.attr_setAnExistingAttributeValue=function(e,t){null===e._element?e._value=t:n.element_change(e,e._element,t)}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(108),i=r(30),o=r(52);t.tokenList_validationSteps=function(e,t){if(!i.dom_hasSupportedTokens(e._attribute._localName))throw new TypeError(\"There are no supported tokens defined for attribute name: '\"+e._attribute._localName+\"'.\");return i.dom_getSupportedTokens(e._attribute._localName).has(t.toLowerCase())},t.tokenList_updateSteps=function(e){(e._element.hasAttribute(e._attribute._localName)||0!==e._tokenSet.size)&&o.element_setAnAttributeValue(e._element,e._attribute._localName,n.orderedSet_serialize(e._tokenSet))},t.tokenList_serializeSteps=function(e){return o.element_getAnAttributeValue(e._element,e._attribute._localName)}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(1);function o(e){return i.isBoolean(e)?e:e.capture||!1}t.eventTarget_flatten=o,t.eventTarget_flattenMore=function(e){var t=o(e),r=!1,n=!1;return i.isBoolean(e)||(r=e.once||!1,n=e.passive||!1),[t,n,r]},t.eventTarget_addEventListener=function(e,t){if(null!==t.callback){for(var r=0;r<e._eventListenerList.length;r++){var n=e._eventListenerList[r];if(n.type===t.type&&n.callback.handleEvent===t.callback.handleEvent&&n.capture===t.capture)return}e._eventListenerList.push(t)}},t.eventTarget_removeEventListener=function(e,t,r){t.removed=!0,e._eventListenerList.splice(r,1)},t.eventTarget_removeAllEventListeners=function(e){var t,r;try{for(var i=n(e._eventListenerList),o=i.next();!o.done;o=i.next()){o.value.removed=!0}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}e._eventListenerList.length=0}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(1),o=r(29);t.parentNode_convertNodesIntoANode=function(e,t){for(var r,a,s=null,u=0;u<e.length;u++){var l=e[u];if(i.isString(l)){var c=o.create_text(t,l);e[u]=c}}if(1===e.length)s=e[0];else{var h=s=o.create_documentFragment(t);try{for(var p=n(e),f=p.next();!f.done;f=p.next()){l=f.value;h.appendChild(l)}}catch(e){r={error:e}}finally{try{f&&!f.done&&(a=p.return)&&a.call(p)}finally{if(r)throw r.error}}}return s}},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},i=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(2),s=r(9),u=r(3),l=r(29),c=r(17),h=r(175),p=r(107),f=r(176),d=r(37),m=r(177);function y(e){return e._startNode===e._endNode&&e._startOffset===e._endOffset}function v(e){return c.tree_rootNode(e._startNode)}function _(e,t){return c.tree_rootNode(e)===v(t)&&h.boundaryPoint_position([e,0],t._start)===a.BoundaryPosition.After&&h.boundaryPoint_position([e,c.tree_nodeLength(e)],t._end)===a.BoundaryPosition.Before}function g(e,t){var r=c.tree_isAncestorOf(t._startNode,e,!0),n=c.tree_isAncestorOf(t._endNode,e,!0);return r&&!n||!r&&n}function b(e){var t,r,i,a,h,m,v=l.create_documentFragment(e._startNode._nodeDocument);if(y(e))return v;var x=e._startNode,w=e._startOffset,E=e._endNode,D=e._endOffset;if(x===E&&u.Guard.isCharacterDataNode(x))return(R=f.node_clone(x))._data=p.characterData_substringData(x,w,D-w),d.mutation_append(R,v),p.characterData_replaceData(x,w,D-w,\"\"),v;for(var S=x;!c.tree_isAncestorOf(E,S,!0);){if(null===S._parent)throw new Error(\"Parent node  is null.\");S=S._parent}var C=null;if(!c.tree_isAncestorOf(E,x,!0))try{for(var A=n(S._children),N=A.next();!N.done;N=A.next()){if(g(k=N.value,e)){C=k;break}}}catch(e){t={error:e}}finally{try{N&&!N.done&&(r=A.return)&&r.call(A)}finally{if(t)throw t.error}}var T=null;if(!c.tree_isAncestorOf(x,E,!0))for(var O=o(S._children),F=O.length-1;F>0;F--){var k;if(g(k=O[F],e)){T=k;break}}var P,I,L=[];try{for(var M=n(S._children),B=M.next();!B.done;B=M.next()){if(_(X=B.value,e)){if(u.Guard.isDocumentTypeNode(X))throw new s.HierarchyRequestError;L.push(X)}}}catch(e){i={error:e}}finally{try{B&&!B.done&&(a=M.return)&&a.call(M)}finally{if(i)throw i.error}}if(c.tree_isAncestorOf(E,x,!0))P=x,I=w;else{for(var j=x;null!==j._parent&&!c.tree_isAncestorOf(E,j._parent);)j=j._parent;if(null===j._parent)throw new Error(\"Parent node is null.\");P=j._parent,I=1+c.tree_index(j)}if(u.Guard.isCharacterDataNode(C))(R=f.node_clone(x))._data=p.characterData_substringData(x,w,c.tree_nodeLength(x)-w),d.mutation_append(R,v),p.characterData_replaceData(x,w,c.tree_nodeLength(x)-w,\"\");else if(null!==C){var R=f.node_clone(C);d.mutation_append(R,v);var z=b(l.create_range([x,w],[C,c.tree_nodeLength(C)]));d.mutation_append(z,R)}try{for(var U=n(L),G=U.next();!G.done;G=U.next()){var X=G.value;d.mutation_append(X,v)}}catch(e){h={error:e}}finally{try{G&&!G.done&&(m=U.return)&&m.call(U)}finally{if(h)throw h.error}}if(u.Guard.isCharacterDataNode(T))(R=f.node_clone(E))._data=p.characterData_substringData(E,0,D),d.mutation_append(R,v),p.characterData_replaceData(E,0,D,\"\");else if(null!==T){R=f.node_clone(T);d.mutation_append(R,v);z=b(l.create_range([T,0],[E,D]));d.mutation_append(z,R)}return e._start=[P,I],e._end=[P,I],v}t.range_collapsed=y,t.range_root=v,t.range_isContained=_,t.range_isPartiallyContained=g,t.range_setTheStart=function(e,t,r){if(u.Guard.isDocumentTypeNode(t))throw new s.InvalidNodeTypeError;if(r>c.tree_nodeLength(t))throw new s.IndexSizeError;var n=[t,r];v(e)===c.tree_rootNode(t)&&h.boundaryPoint_position(n,e._end)!==a.BoundaryPosition.After||(e._end=n),e._start=n},t.range_setTheEnd=function(e,t,r){if(u.Guard.isDocumentTypeNode(t))throw new s.InvalidNodeTypeError;if(r>c.tree_nodeLength(t))throw new s.IndexSizeError;var n=[t,r];v(e)===c.tree_rootNode(t)&&h.boundaryPoint_position(n,e._start)!==a.BoundaryPosition.Before||(e._start=n),e._end=n},t.range_select=function(e,t){var r=e._parent;if(null===r)throw new s.InvalidNodeTypeError;var n=c.tree_index(e);t._start=[r,n],t._end=[r,n+1]},t.range_extract=b,t.range_cloneTheContents=function e(t){var r,i,a,h,m,v,x=l.create_documentFragment(t._startNode._nodeDocument);if(y(t))return x;var w=t._startNode,E=t._startOffset,D=t._endNode,S=t._endOffset;w===D&&u.Guard.isCharacterDataNode(w)&&((B=f.node_clone(w))._data=p.characterData_substringData(w,E,S-E),d.mutation_append(B,x));for(var C=w;!c.tree_isAncestorOf(D,C,!0);){if(null===C._parent)throw new Error(\"Parent node  is null.\");C=C._parent}var A=null;if(!c.tree_isAncestorOf(D,w,!0))try{for(var N=n(C._children),T=N.next();!T.done;T=N.next()){if(g(P=T.value,t)){A=P;break}}}catch(e){r={error:e}}finally{try{T&&!T.done&&(i=N.return)&&i.call(N)}finally{if(r)throw r.error}}var O=null;if(!c.tree_isAncestorOf(w,D,!0))for(var F=o(C._children),k=F.length-1;k>0;k--){var P;if(g(P=F[k],t)){O=P;break}}var I=[];try{for(var L=n(C._children),M=L.next();!M.done;M=L.next()){if(_(U=M.value,t)){if(u.Guard.isDocumentTypeNode(U))throw new s.HierarchyRequestError;I.push(U)}}}catch(e){a={error:e}}finally{try{M&&!M.done&&(h=L.return)&&h.call(L)}finally{if(a)throw a.error}}if(u.Guard.isCharacterDataNode(A))(B=f.node_clone(w))._data=p.characterData_substringData(w,E,c.tree_nodeLength(w)-E),d.mutation_append(B,x);else if(null!==A){var B=f.node_clone(A);d.mutation_append(B,x);var j=e(l.create_range([w,E],[A,c.tree_nodeLength(A)]));d.mutation_append(j,B)}try{for(var R=n(I),z=R.next();!z.done;z=R.next()){var U=z.value,B=f.node_clone(U);d.mutation_append(B,x)}}catch(e){m={error:e}}finally{try{z&&!z.done&&(v=R.return)&&v.call(R)}finally{if(m)throw m.error}}if(u.Guard.isCharacterDataNode(O))(B=f.node_clone(D))._data=p.characterData_substringData(D,0,S),d.mutation_append(B,x);else if(null!==O){B=f.node_clone(O);x.append(B);j=b(l.create_range([O,0],[D,S]));d.mutation_append(j,B)}return x},t.range_insert=function(e,t){var r,i;if(u.Guard.isProcessingInstructionNode(t._startNode)||u.Guard.isCommentNode(t._startNode)||u.Guard.isTextNode(t._startNode)&&null===t._startNode._parent||t._startNode===e)throw new s.HierarchyRequestError;var o,a=null;if(u.Guard.isTextNode(t._startNode))a=t._startNode;else{var l=0;try{for(var h=n(t._startNode._children),p=h.next();!p.done;p=h.next()){var f=p.value;if(l===t._startOffset){a=f;break}l++}}catch(e){r={error:e}}finally{try{p&&!p.done&&(i=h.return)&&i.call(h)}finally{if(r)throw r.error}}}if(null===a)o=t._startNode;else{if(null===a._parent)throw new Error(\"Parent node is null.\");o=a._parent}d.mutation_ensurePreInsertionValidity(e,o,a),u.Guard.isTextNode(t._startNode)&&(a=m.text_split(t._startNode,t._startOffset)),e===a&&(a=e._nextSibling),null!==e._parent&&d.mutation_remove(e,e._parent);var v=null===a?c.tree_nodeLength(o):c.tree_index(a);u.Guard.isDocumentFragmentNode(e)?v+=c.tree_nodeLength(e):v++,d.mutation_preInsert(e,o,a),y(t)&&(t._end=[o,v])},t.range_getContainedNodes=function(e){var t;return(t={})[Symbol.iterator]=function(){var t=e.commonAncestorContainer,r=c.tree_getFirstDescendantNode(t);return{next:function(){for(;r&&!_(r,e);)r=c.tree_getNextDescendantNode(t,r);if(null===r)return{done:!0,value:null};var n={done:!1,value:r};return r=c.tree_getNextDescendantNode(t,r),n}}},t},t.range_getPartiallyContainedNodes=function(e){var t;return(t={})[Symbol.iterator]=function(){var t=e.commonAncestorContainer,r=c.tree_getFirstDescendantNode(t);return{next:function(){for(;r&&!g(r,e);)r=c.tree_getNextDescendantNode(t,r);if(null===r)return{done:!0,value:null};var n={done:!1,value:r};return r=c.tree_getNextDescendantNode(t,r),n}}},t}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(9);t.selectors_scopeMatchASelectorsString=function(e,t){throw new n.NotSupportedError}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=r(105);t.treeWalker_traverseChildren=function(e,t){for(var r=t?e._current._firstChild:e._current._lastChild;null!==r;){var o=i.traversal_filter(e,r);if(o===n.FilterResult.Accept)return e._current=r,r;if(o===n.FilterResult.Skip){var a=t?r._firstChild:r._lastChild;if(null!==a){r=a;continue}}for(;null!==r;){var s=t?r._nextSibling:r._previousSibling;if(null!==s){r=s;break}var u=r._parent;if(null===u||u===e._root||u===e._current)return null;r=u}}return null},t.treeWalker_traverseSiblings=function(e,t){var r=e._current;if(r===e._root)return null;for(;;){for(var o=t?r._nextSibling:r._previousSibling;null!==o;){r=o;var a=i.traversal_filter(e,r);if(a===n.FilterResult.Accept)return e._current=r,r;o=t?r._firstChild:r._lastChild,a!==n.FilterResult.Reject&&null!==o||(o=t?r._nextSibling:r._previousSibling)}if(null===(r=r._parent)||r===e._root)return null;if(i.traversal_filter(e,r)===n.FilterResult.Accept)return null}}},function(e,t,r){\"use strict\";r(89),r(74);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(1),a=r(2),s=r(50),u=r(3),l=function(e){function t(t,r){var n=e.call(this,t)||this;return n._indentation={},n._lengthToLastNewline=0,n._writerOptions=o.applyDefaults(r,{wellFormed:!1,headless:!1,prettyPrint:!1,indent:\"  \",newline:\"\\n\",offset:0,width:0,allowEmptyTags:!1,indentTextOnlyNodes:!1,spaceBeforeSlash:!1}),n}return i(t,e),t.prototype.serialize=function(e){return this._refs={suppressPretty:!1,emptyNode:!1,markup:\"\"},e.nodeType!==a.NodeType.Document||this._writerOptions.headless||this.declaration(this._builderOptions.version,this._builderOptions.encoding,this._builderOptions.standalone),this.serializeNode(e,this._writerOptions.wellFormed),this._writerOptions.prettyPrint&&this._refs.markup.slice(-this._writerOptions.newline.length)===this._writerOptions.newline&&(this._refs.markup=this._refs.markup.slice(0,-this._writerOptions.newline.length)),this._refs.markup},t.prototype.declaration=function(e,t,r){this._beginLine(),this._refs.markup+='<?xml version=\"'+e+'\"',void 0!==t&&(this._refs.markup+=' encoding=\"'+t+'\"'),void 0!==r&&(this._refs.markup+=' standalone=\"'+(r?\"yes\":\"no\")+'\"'),this._refs.markup+=\"?>\",this._endLine()},t.prototype.docType=function(e,t,r){this._beginLine(),this._refs.markup+=t&&r?\"<!DOCTYPE \"+e+' PUBLIC \"'+t+'\" \"'+r+'\">':t?\"<!DOCTYPE \"+e+' PUBLIC \"'+t+'\">':r?\"<!DOCTYPE \"+e+' SYSTEM \"'+r+'\">':\"<!DOCTYPE \"+e+\">\",this._endLine()},t.prototype.openTagBegin=function(e){this._beginLine(),this._refs.markup+=\"<\"+e},t.prototype.openTagEnd=function(e,t,r){if(this._refs.suppressPretty=!1,this._refs.emptyNode=!1,this._writerOptions.prettyPrint&&!t&&!r){for(var n=!0,i=!0,o=this.currentNode.firstChild,a=0,s=0;o;){if(u.Guard.isExclusiveTextNode(o))s++;else{if(!u.Guard.isCDATASectionNode(o)){n=!1,i=!1;break}a++}\"\"!==o.data&&(i=!1),o=o.nextSibling}this._refs.suppressPretty=!this._writerOptions.indentTextOnlyNodes&&n&&(a<=1&&0===s||0===a),this._refs.emptyNode=i}(r||t||this._refs.emptyNode)&&this._writerOptions.allowEmptyTags?this._refs.markup+=\"></\"+e+\">\":this._refs.markup+=r?\" />\":t||this._refs.emptyNode?this._writerOptions.spaceBeforeSlash?\" />\":\"/>\":\">\",this._endLine()},t.prototype.closeTag=function(e){this._refs.emptyNode||(this._beginLine(),this._refs.markup+=\"</\"+e+\">\"),this._refs.suppressPretty=!1,this._refs.emptyNode=!1,this._endLine()},t.prototype.attribute=function(e,t){var r=e+'=\"'+t+'\"';this._writerOptions.prettyPrint&&this._writerOptions.width>0&&this._refs.markup.length-this._lengthToLastNewline+1+r.length>this._writerOptions.width?(this._endLine(),this._beginLine(),this._refs.markup+=this._indent(1)+r):this._refs.markup+=\" \"+r},t.prototype.text=function(e){\"\"!==e&&(this._beginLine(),this._refs.markup+=e,this._endLine())},t.prototype.cdata=function(e){\"\"!==e&&(this._beginLine(),this._refs.markup+=\"<![CDATA[\"+e+\"]]>\",this._endLine())},t.prototype.comment=function(e){this._beginLine(),this._refs.markup+=\"\\x3c!--\"+e+\"--\\x3e\",this._endLine()},t.prototype.instruction=function(e,t){this._beginLine(),this._refs.markup+=\"<?\"+(\"\"===t?e:e+\" \"+t)+\"?>\",this._endLine()},t.prototype._beginLine=function(){this._writerOptions.prettyPrint&&!this._refs.suppressPretty&&(this._refs.markup+=this._indent(this._writerOptions.offset+this.level))},t.prototype._endLine=function(){this._writerOptions.prettyPrint&&!this._refs.suppressPretty&&(this._refs.markup+=this._writerOptions.newline,this._lengthToLastNewline=this._refs.markup.length)},t.prototype._indent=function(e){if(e<=0)return\"\";if(void 0!==this._indentation[e])return this._indentation[e];var t=this._writerOptions.indent.repeat(e);return this._indentation[e]=t,t},t}(s.BaseWriter);t.XMLWriter=l},function(e,t,r){\"use strict\";var n=r(47),i=r(35);e.exports=\"\".repeat||function(e){var t=String(i(this)),r=\"\",o=n(e);if(o<0||o==1/0)throw RangeError(\"Wrong number of repetitions\");for(;o>0;(o>>>=1)&&(t+=t))1&o&&(r+=t);return r}},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(19),r(178),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(67),s=r(1),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n._writerOptions=s.applyDefaults(r,{wellFormed:!1,prettyPrint:!1,indent:\"  \",newline:\"\\n\",offset:0,group:!1,verbose:!1}),n}return i(t,e),t.prototype.serialize=function(e){var t=s.applyDefaults(this._writerOptions,{format:\"object\",wellFormed:!1}),r=new a.ObjectWriter(this._builderOptions,t).serialize(e);return this._beginLine(this._writerOptions,0)+this._convertObject(r,this._writerOptions)},t.prototype._convertObject=function(e,t,r){var n,i,a=this;void 0===r&&(r=0);var u=\"\",l=this._isLeafNode(e);if(s.isArray(e)){u+=\"[\";var c=e.length,h=0;try{for(var p=o(e),f=p.next();!f.done;f=p.next()){var d=f.value;u+=this._endLine(t,r+1)+this._beginLine(t,r+1)+this._convertObject(d,t,r+1),h<c-1&&(u+=\",\"),h++}}catch(e){n={error:e}}finally{try{f&&!f.done&&(i=p.return)&&i.call(p)}finally{if(n)throw n.error}}u+=this._endLine(t,r)+this._beginLine(t,r),u+=\"]\"}else if(s.isObject(e)){u+=\"{\";var m=s.objectLength(e),y=0;s.forEachObject(e,(function(e,n){l&&t.prettyPrint?u+=\" \":u+=a._endLine(t,r+1)+a._beginLine(t,r+1),u+=a._key(e),t.prettyPrint&&(u+=\" \"),u+=a._convertObject(n,t,r+1),y<m-1&&(u+=\",\"),y++}),this),l&&t.prettyPrint?u+=\" \":u+=this._endLine(t,r)+this._beginLine(t,r),u+=\"}\"}else u+=this._val(e);return u},t.prototype._beginLine=function(e,t){if(!e.prettyPrint)return\"\";var r=e.offset+t+1;return r>0?new Array(r).join(e.indent):\"\"},t.prototype._endLine=function(e,t){return e.prettyPrint?e.newline:\"\"},t.prototype._key=function(e){return'\"'+e+'\":'},t.prototype._val=function(e){return JSON.stringify(e)},t.prototype._isLeafNode=function(e){return this._descendantCount(e)<=1},t.prototype._descendantCount=function(e,t){var r=this;return void 0===t&&(t=0),s.isArray(e)?s.forEachArray(e,(function(e){return t+=r._descendantCount(e,t)}),this):s.isObject(e)?s.forEachObject(e,(function(e,n){return t+=r._descendantCount(n,t)}),this):t++,t},t}(r(50).BaseWriter);t.JSONWriter=u},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(19),r(178),r(89),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var a=r(67),s=r(1),u=function(e){function t(t,r){var n=e.call(this,t)||this;if(n._writerOptions=s.applyDefaults(r,{wellFormed:!1,indent:\"  \",newline:\"\\n\",offset:0,group:!1,verbose:!1}),n._writerOptions.indent.length<2)throw new Error(\"YAML indententation string must be at least two characters long.\");if(n._writerOptions.offset<0)throw new Error(\"YAML offset should be zero or a positive number.\");return n}return i(t,e),t.prototype.serialize=function(e){var t=s.applyDefaults(this._writerOptions,{format:\"object\",wellFormed:!1}),r=new a.ObjectWriter(this._builderOptions,t).serialize(e),n=this._beginLine(this._writerOptions,0)+\"---\"+this._endLine(this._writerOptions)+this._convertObject(r,this._writerOptions,0);return n.slice(-this._writerOptions.newline.length)===this._writerOptions.newline&&(n=n.slice(0,-this._writerOptions.newline.length)),n},t.prototype._convertObject=function(e,t,r,n){var i,a,u=this;void 0===n&&(n=!1);var l=\"\";if(s.isArray(e))try{for(var c=o(e),h=c.next();!h.done;h=c.next()){var p=h.value;l+=this._beginLine(t,r,!0),s.isObject(p)?s.isEmpty(p)?l+='\"\"'+this._endLine(t):l+=this._convertObject(p,t,r,!0):l+=this._val(p)+this._endLine(t)}}catch(e){i={error:e}}finally{try{h&&!h.done&&(a=c.return)&&a.call(c)}finally{if(i)throw i.error}}else s.forEachObject(e,(function(e,i){n?(l+=u._key(e),n=!1):l+=u._beginLine(t,r)+u._key(e),s.isObject(i)?s.isEmpty(i)?l+=' \"\"'+u._endLine(t):l+=u._endLine(t)+u._convertObject(i,t,r+1):l+=\" \"+u._val(i)+u._endLine(t)}),this);return l},t.prototype._beginLine=function(e,t,r){void 0===r&&(r=!1);var n=e.offset+t+1,i=new Array(n).join(e.indent);return r?i.substr(0,i.length-2)+\"-\"+i.substr(-1,1):i},t.prototype._endLine=function(e){return e.newline},t.prototype._key=function(e){return'\"'+e+'\":'},t.prototype._val=function(e){return JSON.stringify(e)},t}(r(50).BaseWriter);t.YAMLWriter=u},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(110).dom.setFeatures(!0);var n=r(110);t.DOMImplementation=n.DOMImplementation;var i=r(271);t.DOMParser=i.DOMParser;var o=r(274);t.XMLSerializer=o.XMLSerializer},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(3),i=r(0),o=function(){function e(){}return e.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.Cast.asNode(this),o=r._parent;if(null!==o){for(var a=r._previousSibling,s=!0;s&&a;){s=!1;for(var u=0;u<e.length;u++){var l=e[u];if(l===a){a=a._previousSibling,s=!0;break}}}var c=i.parentNode_convertNodesIntoANode(e,r._nodeDocument);a=null===a?o._firstChild:a._nextSibling,i.mutation_preInsert(c,o,a)}},e.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.Cast.asNode(this),o=r._parent;if(o){for(var a=r._nextSibling,s=!0;s&&a;){s=!1;for(var u=0;u<e.length;u++){var l=e[u];if(l===a){a=a._nextSibling,s=!0;break}}}var c=i.parentNode_convertNodesIntoANode(e,r._nodeDocument);i.mutation_preInsert(c,o,a)}},e.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.Cast.asNode(this),o=r._parent;if(o){for(var a=r._nextSibling,s=!0;s&&a;){s=!1;for(var u=0;u<e.length;u++){var l=e[u];if(l===a){a=a._nextSibling,s=!0;break}}}var c=i.parentNode_convertNodesIntoANode(e,r._nodeDocument);r._parent===o?i.mutation_replace(r,c,o):i.mutation_preInsert(c,o,a)}},e.prototype.remove=function(){var e=n.Cast.asNode(this),t=e._parent;t&&i.mutation_remove(e,t)},e}();t.ChildNodeImpl=o},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){};t.DocumentOrShadowRootImpl=n},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(6),o=r(3),a=r(7),s=function(){function e(e){this._nodeList=[],this._recordQueue=[],this._callback=e;var t=i.dom.window;a.set.append(t._mutationObservers,this)}return e.prototype.observe=function(e,t){var r,i;if(void 0===(t=t||{childList:!1,subtree:!1}).attributeOldValue&&void 0===t.attributeFilter||void 0!==t.attributes||(t.attributes=!0),void 0!==t.characterDataOldValue&&void 0===t.characterData&&(t.characterData=!0),!t.childList&&!t.attributes&&!t.characterData)throw new TypeError;if(t.attributeOldValue&&!t.attributes)throw new TypeError;if(void 0!==t.attributeFilter&&!t.attributes)throw new TypeError;if(t.characterDataOldValue&&!t.characterData)throw new TypeError;var s=!1,u=t,l=function(e){var t,r;if(e.observer===c){s=!0;try{for(var i=(t=void 0,n(c._nodeList)),l=i.next();!l.done;l=i.next()){var h=l.value;a.list.remove(h._registeredObserverList,(function(t){return o.Guard.isTransientRegisteredObserver(t)&&t.source===e}))}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}e.options=u}},c=this;try{for(var h=n(e._registeredObserverList),p=h.next();!p.done;p=h.next()){l(p.value)}}catch(e){r={error:e}}finally{try{p&&!p.done&&(i=h.return)&&i.call(h)}finally{if(r)throw r.error}}s||(e._registeredObserverList.push({observer:this,options:t}),this._nodeList.push(e))},e.prototype.disconnect=function(){var e,t,r=this;try{for(var i=n(this._nodeList),o=i.next();!o.done;o=i.next()){var s=o.value;a.list.remove(s._registeredObserverList,(function(e){return e.observer===r}))}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}this._recordQueue=[]},e.prototype.takeRecords=function(){var e=this._recordQueue;return this._recordQueue=[],e},e}();t.MutationObserverImpl=s},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(3),i=function(){function e(){}return Object.defineProperty(e.prototype,\"previousElementSibling\",{get:function(){for(var e=n.Cast.asNode(this)._previousSibling;e;){if(n.Guard.isElementNode(e))return e;e=e._previousSibling}return null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"nextElementSibling\",{get:function(){for(var e=n.Cast.asNode(this)._nextSibling;e;){if(n.Guard.isElementNode(e))return e;e=e._nextSibling}return null},enumerable:!0,configurable:!0}),e}();t.NonDocumentTypeChildNodeImpl=i},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(3),i=r(0),o=function(){function e(){}return e.prototype.getElementById=function(e){for(var t=i.tree_getFirstDescendantNode(n.Cast.asNode(this),!1,!1,(function(e){return n.Guard.isElementNode(e)}));null!==t;){if(t._uniqueIdentifier===e)return t;t=i.tree_getNextDescendantNode(n.Cast.asNode(this),t,!1,!1,(function(e){return n.Guard.isElementNode(e)}))}return null},e}();t.NonElementParentNodeImpl=o},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(3),o=r(0),a=function(){function e(){}return Object.defineProperty(e.prototype,\"children\",{get:function(){return o.create_htmlCollection(i.Cast.asNode(this))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"firstElementChild\",{get:function(){for(var e=i.Cast.asNode(this)._firstChild;e;){if(i.Guard.isElementNode(e))return e;e=e._nextSibling}return null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"lastElementChild\",{get:function(){for(var e=i.Cast.asNode(this)._lastChild;e;){if(i.Guard.isElementNode(e))return e;e=e._previousSibling}return null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"childElementCount\",{get:function(){var e,t,r=0;try{for(var o=n(i.Cast.asNode(this)._children),a=o.next();!a.done;a=o.next()){var s=a.value;i.Guard.isElementNode(s)&&r++}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return r},enumerable:!0,configurable:!0}),e.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.Cast.asNode(this),n=o.parentNode_convertNodesIntoANode(e,r._nodeDocument);o.mutation_preInsert(n,r,r._firstChild)},e.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.Cast.asNode(this),n=o.parentNode_convertNodesIntoANode(e,r._nodeDocument);o.mutation_append(n,r)},e.prototype.querySelector=function(e){var t=i.Cast.asNode(this),r=o.selectors_scopeMatchASelectorsString(e,t);return 0===r.length?null:r[0]},e.prototype.querySelectorAll=function(e){var t=i.Cast.asNode(this),r=o.selectors_scopeMatchASelectorsString(e,t);return o.create_nodeListStatic(t,r)},e}();t.ParentNodeImpl=a},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(0),i=function(){function e(){}return Object.defineProperty(e.prototype,\"_name\",{get:function(){return this.__name||\"\"},set:function(e){this.__name=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"_assignedSlot\",{get:function(){return this.__assignedSlot||null},set:function(e){this.__assignedSlot=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"assignedSlot\",{get:function(){return n.shadowTree_findASlot(this,!0)},enumerable:!0,configurable:!0}),e}();t.SlotableImpl=i},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(102),a=r(9),s=r(3),u=function(e){function t(t){var r=e.call(this)||this;if(s.Guard.isDocumentTypeNode(t.startContainer)||s.Guard.isAttrNode(t.startContainer)||s.Guard.isDocumentTypeNode(t.endContainer)||s.Guard.isAttrNode(t.endContainer))throw new a.InvalidNodeTypeError;return r._start=[t.startContainer,t.startOffset],r._end=[t.endContainer,t.endOffset],r}return i(t,e),t}(o.AbstractRangeImpl);t.StaticRangeImpl=u},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(272);t.DOMParser=n.DOMParserImpl},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(0),i=r(273),o=function(){function e(){}return e.prototype.parseFromString=function(e,t){if(\"text/html\"===t)throw new Error(\"HTML parser not implemented.\");try{return(r=(new i.XMLParserImpl).parse(e))._contentType=t,r}catch(e){var r,o=\"http://www.mozilla.org/newlayout/xml/parsererror.xml\",a=(r=n.create_xmlDocument()).createElementNS(o,\"parsererror\"),s=r.createElementNS(o,\"error\");return s.setAttribute(\"message\",e.message),a.appendChild(s),r.appendChild(a),r}},e}();t.DOMParserImpl=o},function(e,t,r){\"use strict\";var n=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(180),a=r(111),s=r(7),u=r(0),l=r(69),c=function(){function e(){}return e.prototype.parse=function(e){for(var t,r,c,h,p=new o.XMLStringLexer(e,{skipWhitespaceOnlyText:!0}),f=u.create_document(),d=f,m=p.nextToken();m.type!==a.TokenType.EOF;){switch(m.type){case a.TokenType.Declaration:var y=m;if(\"1.0\"!==y.version)throw new Error(\"Invalid xml version: \"+y.version);break;case a.TokenType.DocType:var v=m;if(!u.xml_isPubidChar(v.pubId))throw new Error(\"DocType public identifier does not match PubidChar construct.\");if(!u.xml_isLegalChar(v.sysId)||-1!==v.sysId.indexOf('\"')&&-1!==v.sysId.indexOf(\"'\"))throw new Error(\"DocType system identifier contains invalid characters.\");d.appendChild(f.implementation.createDocumentType(v.name,v.pubId,v.sysId));break;case a.TokenType.CDATA:var _=m;if(!u.xml_isLegalChar(_.data)||-1!==_.data.indexOf(\"]]>\"))throw new Error(\"CDATA contains invalid characters.\");d.appendChild(f.createCDATASection(_.data));break;case a.TokenType.Comment:var g=m;if(!u.xml_isLegalChar(g.data)||-1!==g.data.indexOf(\"--\")||g.data.endsWith(\"-\"))throw new Error(\"Comment data contains invalid characters.\");d.appendChild(f.createComment(g.data));break;case a.TokenType.PI:var b=m;if(-1!==b.target.indexOf(\":\")||/^xml$/i.test(b.target))throw new Error(\"Processing instruction target contains invalid characters.\");if(!u.xml_isLegalChar(b.data)||-1!==b.data.indexOf(\"?>\"))throw new Error(\"Processing instruction data contains invalid characters.\");d.appendChild(f.createProcessingInstruction(b.target,b.data));break;case a.TokenType.Text:var x=m;if(!u.xml_isLegalChar(x.data))throw new Error(\"Text data contains invalid characters.\");d.appendChild(f.createTextNode(this._decodeText(x.data)));break;case a.TokenType.Element:var w=m,E=n(u.namespace_extractQName(w.name),2),D=E[0],S=E[1];if(-1!==S.indexOf(\":\")||!u.xml_isName(S))throw new Error(\"Node local name contains invalid characters.\");if(\"xmlns\"===D)throw new Error(\"An element cannot have the 'xmlns' prefix.\");var C=d.lookupNamespaceURI(D),A={};try{for(var N=(t=void 0,i(w.attributes)),T=N.next();!T.done;T=N.next()){var O=n(T.value,2),F=O[0],k=O[1];if(\"xmlns\"===F)C=k;else{var P=n(u.namespace_extractQName(F),2),I=P[0],L=P[1];\"xmlns\"===I&&(L===D&&(C=k),A[L]=k)}}}catch(e){t={error:e}}finally{try{T&&!T.done&&(r=N.return)&&r.call(N)}finally{if(t)throw t.error}}var M=null!==C?f.createElementNS(C,w.name):f.createElement(w.name);d.appendChild(M);var B=new l.LocalNameSet;try{for(var j=(c=void 0,i(w.attributes)),R=j.next();!R.done;R=j.next()){var z=n(R.value,2),U=(F=z[0],k=z[1],n(u.namespace_extractQName(F),2)),G=(I=U[0],L=U[1],null);if(\"xmlns\"===I||null===I&&\"xmlns\"===L?G=s.namespace.XMLNS:null!==(G=M.lookupNamespaceURI(I))&&M.isDefaultNamespace(G)?G=null:null===G&&null!==I&&(G=A[I]||null),B.has(G,L))throw new Error(\"Element contains duplicate attributes.\");if(B.set(G,L),G===s.namespace.XMLNS&&k===s.namespace.XMLNS)throw new Error(\"XMLNS namespace is reserved.\");if(-1!==L.indexOf(\":\")||!u.xml_isName(L))throw new Error(\"Attribute local name contains invalid characters.\");if(\"xmlns\"===I&&\"\"===k)throw new Error(\"Empty XML namespace is not allowed.\");null!==G?M.setAttributeNS(G,F,this._decodeAttributeValue(k)):M.setAttribute(F,this._decodeAttributeValue(k))}}catch(e){c={error:e}}finally{try{R&&!R.done&&(h=j.return)&&h.call(j)}finally{if(c)throw c.error}}w.selfClosing||(d=M);break;case a.TokenType.ClosingTag:if(m.name!==d.nodeName)throw new Error(\"Closing tag name does not match opening tag name.\");d._parent&&(d=d._parent)}m=p.nextToken()}return f},e.prototype._decodeText=function(e){return null==e?e:e.replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\").replace(/&amp;/g,\"&\")},e.prototype._decodeAttributeValue=function(e){return null==e?e:e.replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\").replace(/&amp;/g,\"&\")},e}();t.XMLParserImpl=c},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(275);t.XMLSerializer=n.XMLSerializerImpl},function(e,t,r){\"use strict\";var n=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(2),o=r(69),a=r(95),s=r(9),u=r(7),l=r(0),c=function(){function e(){}return e.prototype.serializeToString=function(e){return this._xmlSerialization(e,!1)},e.prototype._xmlSerialization=function(e,t){if(void 0===e._nodeDocument||e._nodeDocument._hasNamespaces){var r=new a.NamespacePrefixMap;r.set(\"xml\",u.namespace.XML);try{return this._serializeNodeNS(e,null,r,{value:1},t)}catch(e){throw new s.InvalidStateError}}else try{return this._serializeNode(e,t)}catch(e){throw new s.InvalidStateError}},e.prototype._serializeNodeNS=function(e,t,r,n,o){switch(e.nodeType){case i.NodeType.Element:return this._serializeElementNS(e,t,r,n,o);case i.NodeType.Document:return this._serializeDocumentNS(e,t,r,n,o);case i.NodeType.Comment:return this._serializeComment(e,o);case i.NodeType.Text:return this._serializeText(e,o);case i.NodeType.DocumentFragment:return this._serializeDocumentFragmentNS(e,t,r,n,o);case i.NodeType.DocumentType:return this._serializeDocumentType(e,o);case i.NodeType.ProcessingInstruction:return this._serializeProcessingInstruction(e,o);case i.NodeType.CData:return this._serializeCData(e,o);default:throw new Error(\"Unknown node type: \"+e.nodeType)}},e.prototype._serializeNode=function(e,t){switch(e.nodeType){case i.NodeType.Element:return this._serializeElement(e,t);case i.NodeType.Document:return this._serializeDocument(e,t);case i.NodeType.Comment:return this._serializeComment(e,t);case i.NodeType.Text:return this._serializeText(e,t);case i.NodeType.DocumentFragment:return this._serializeDocumentFragment(e,t);case i.NodeType.DocumentType:return this._serializeDocumentType(e,t);case i.NodeType.ProcessingInstruction:return this._serializeProcessingInstruction(e,t);case i.NodeType.CData:return this._serializeCData(e,t);default:throw new Error(\"Unknown node type: \"+e.nodeType)}},e.prototype._serializeElementNS=function(t,r,i,o,a){var s,c;if(a&&(-1!==t.localName.indexOf(\":\")||!l.xml_isName(t.localName)))throw new Error(\"Node local name contains invalid characters (well-formed required).\");var h=\"<\",p=\"\",f=!1,d=!1,m=i.copy(),y={},v=this._recordNamespaceInformation(t,m,y),_=r,g=t.namespaceURI;if(_===g)null!==v&&(d=!0),h+=p=g===u.namespace.XML?\"xml:\"+t.localName:t.localName;else{var b=t.prefix,x=null;if(null===b&&g===v||(x=m.get(b,g)),\"xmlns\"===b){if(a)throw new Error(\"An element cannot have the 'xmlns' prefix (well-formed required).\");x=b}null!==x?(p=x+\":\"+t.localName,null!==v&&v!==u.namespace.XML&&(_=v||null),h+=p):null!==b?(b in y&&(b=this._generatePrefix(g,m,o)),m.set(b,g),h+=p+=b+\":\"+t.localName,h+=\" xmlns:\"+b+'=\"'+this._serializeAttributeValue(g,a)+'\"',null!==v&&(_=v||null)):null===v||null!==v&&v!==g?(d=!0,_=g,h+=p+=t.localName,h+=' xmlns=\"'+this._serializeAttributeValue(g,a)+'\"'):(_=g,h+=p+=t.localName)}h+=this._serializeAttributesNS(t,m,o,y,d,a);var w=g===u.namespace.HTML;if(w&&0===t.childNodes.length&&e._VoidElementNames.has(t.localName)?(h+=\" /\",f=!0):w||0!==t.childNodes.length||(h+=\"/\",f=!0),h+=\">\",f)return h;if(w&&\"template\"===t.localName);else try{for(var E=n(t._children||t.childNodes),D=E.next();!D.done;D=E.next()){var S=D.value;h+=this._serializeNodeNS(S,_,m,o,a)}}catch(e){s={error:e}}finally{try{D&&!D.done&&(c=E.return)&&c.call(E)}finally{if(s)throw s.error}}return h+=\"</\"+p+\">\"},e.prototype._serializeDocumentNS=function(e,t,r,i,o){var a,s;if(o&&null===e.documentElement)throw new Error(\"Missing document element (well-formed required).\");var u=\"\";try{for(var l=n(e._children||e.childNodes),c=l.next();!c.done;c=l.next()){var h=c.value;u+=this._serializeNodeNS(h,t,r,i,o)}}catch(e){a={error:e}}finally{try{c&&!c.done&&(s=l.return)&&s.call(l)}finally{if(a)throw a.error}}return u},e.prototype._serializeComment=function(e,t){if(t&&(!l.xml_isLegalChar(e.data)||-1!==e.data.indexOf(\"--\")||e.data.endsWith(\"-\")))throw new Error(\"Comment data contains invalid characters (well-formed required).\");return\"\\x3c!--\"+e.data+\"--\\x3e\"},e.prototype._serializeText=function(e,t){if(t&&!l.xml_isLegalChar(e.data))throw new Error(\"Text data contains invalid characters (well-formed required).\");for(var r=\"\",n=0;n<e.data.length;n++){var i=e.data[n];r+=\"&\"===i?\"&amp;\":\"<\"===i?\"&lt;\":\">\"===i?\"&gt;\":i}return r},e.prototype._serializeDocumentFragmentNS=function(e,t,r,i,o){var a,s,u=\"\";try{for(var l=n(e._children||e.childNodes),c=l.next();!c.done;c=l.next()){var h=c.value;u+=this._serializeNodeNS(h,t,r,i,o)}}catch(e){a={error:e}}finally{try{c&&!c.done&&(s=l.return)&&s.call(l)}finally{if(a)throw a.error}}return u},e.prototype._serializeDocumentType=function(e,t){if(t&&!l.xml_isPubidChar(e.publicId))throw new Error(\"DocType public identifier does not match PubidChar construct (well-formed required).\");if(t&&(!l.xml_isLegalChar(e.systemId)||-1!==e.systemId.indexOf('\"')&&-1!==e.systemId.indexOf(\"'\")))throw new Error(\"DocType system identifier contains invalid characters (well-formed required).\");return e.publicId&&e.systemId?\"<!DOCTYPE \"+e.name+' PUBLIC \"'+e.publicId+'\" \"'+e.systemId+'\">':e.publicId?\"<!DOCTYPE \"+e.name+' PUBLIC \"'+e.publicId+'\">':e.systemId?\"<!DOCTYPE \"+e.name+' SYSTEM \"'+e.systemId+'\">':\"<!DOCTYPE \"+e.name+\">\"},e.prototype._serializeProcessingInstruction=function(e,t){if(t&&(-1!==e.target.indexOf(\":\")||/^xml$/i.test(e.target)))throw new Error(\"Processing instruction target contains invalid characters (well-formed required).\");if(t&&(!l.xml_isLegalChar(e.data)||-1!==e.data.indexOf(\"?>\")))throw new Error(\"Processing instruction data contains invalid characters (well-formed required).\");return\"<?\"+(\"\"===e.data?e.target:e.target+\" \"+e.data)+\"?>\"},e.prototype._serializeCData=function(e,t){if(t&&-1!==e.data.indexOf(\"]]>\"))throw new Error(\"CDATA contains invalid characters (well-formed required).\");return\"<![CDATA[\"+e.data+\"]]>\"},e.prototype._serializeAttributesNS=function(e,t,r,i,a,s){var c,h,p=\"\",f=s?new o.LocalNameSet:void 0;try{for(var d=n(e.attributes),m=d.next();!m.done;m=d.next()){var y=m.value;if(a||s||null!==y.namespaceURI){if(s&&f&&f.has(y.namespaceURI,y.localName))throw new Error(\"Element contains duplicate attributes (well-formed required).\");s&&f&&f.set(y.namespaceURI,y.localName);var v=y.namespaceURI,_=null;if(null!==v)if(_=t.get(y.prefix,v),v===u.namespace.XMLNS){if(y.value===u.namespace.XML||null===y.prefix&&a||null!==y.prefix&&(!(y.localName in i)||i[y.localName]!==y.value)&&t.has(y.localName,y.value))continue;if(s&&y.value===u.namespace.XMLNS)throw new Error(\"XMLNS namespace is reserved (well-formed required).\");if(s&&\"\"===y.value)throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).\");\"xmlns\"===y.prefix&&(_=\"xmlns\")}else null===_&&(p+=\" xmlns:\"+(_=null===y.prefix||t.hasPrefix(y.prefix)&&!t.has(y.prefix,v)?this._generatePrefix(v,t,r):y.prefix)+'=\"'+this._serializeAttributeValue(v,s)+'\"');if(p+=\" \",null!==_&&(p+=_+\":\"),s&&(-1!==y.localName.indexOf(\":\")||!l.xml_isName(y.localName)||\"xmlns\"===y.localName&&null===v))throw new Error(\"Attribute local name contains invalid characters (well-formed required).\");p+=y.localName+'=\"'+this._serializeAttributeValue(y.value,s)+'\"'}else p+=\" \"+y.localName+'=\"'+this._serializeAttributeValue(y.value,s)+'\"'}}catch(e){c={error:e}}finally{try{m&&!m.done&&(h=d.return)&&h.call(d)}finally{if(c)throw c.error}}return p},e.prototype._recordNamespaceInformation=function(e,t,r){var i,o,a=null;try{for(var s=n(e.attributes),l=s.next();!l.done;l=s.next()){var c=l.value,h=c.namespaceURI,p=c.prefix;if(h===u.namespace.XMLNS){if(null===p){a=c.value;continue}var f=c.localName,d=c.value;if(d===u.namespace.XML)continue;if(\"\"===d&&(d=null),t.has(f,d))continue;t.set(f,d),r[f]=d||\"\"}}}catch(e){i={error:e}}finally{try{l&&!l.done&&(o=s.return)&&o.call(s)}finally{if(i)throw i.error}}return a},e.prototype._generatePrefix=function(e,t,r){var n=\"ns\"+r.value;return r.value++,t.set(n,e),n},e.prototype._serializeAttributeValue=function(e,t){if(t&&null!==e&&!l.xml_isLegalChar(e))throw new Error(\"Invalid characters in attribute value.\");if(null===e)return\"\";for(var r=\"\",n=0;n<e.length;n++){var i=e[n];r+='\"'===i?\"&quot;\":\"&\"===i?\"&amp;\":\"<\"===i?\"&lt;\":\">\"===i?\"&gt;\":i}return r},e.prototype._serializeElement=function(e,t){var r,i;if(t&&(-1!==e.localName.indexOf(\":\")||!l.xml_isName(e.localName)))throw new Error(\"Node local name contains invalid characters (well-formed required).\");var o=!1,a=e.localName,s=\"<\"+a;if(s+=this._serializeAttributes(e,t),0===e._children.size&&(s+=\"/\",o=!0),s+=\">\",o)return s;try{for(var u=n(e._children),c=u.next();!c.done;c=u.next()){var h=c.value;s+=this._serializeNode(h,t)}}catch(e){r={error:e}}finally{try{c&&!c.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}return s+=\"</\"+a+\">\"},e.prototype._serializeDocument=function(e,t){var r,i;if(t&&null===e.documentElement)throw new Error(\"Missing document element (well-formed required).\");var o=\"\";try{for(var a=n(e._children),s=a.next();!s.done;s=a.next()){var u=s.value;o+=this._serializeNode(u,t)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}return o},e.prototype._serializeDocumentFragment=function(e,t){var r,i,o=\"\";try{for(var a=n(e._children),s=a.next();!s.done;s=a.next()){var u=s.value;o+=this._serializeNode(u,t)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}return o},e.prototype._serializeAttributes=function(e,t){var r,i,o=\"\",a=t?{}:void 0;try{for(var s=n(e.attributes),u=s.next();!u.done;u=s.next()){var c=u.value;if(t&&a&&c.localName in a)throw new Error(\"Element contains duplicate attributes (well-formed required).\");if(t&&a&&(a[c.localName]=!0),t&&(-1!==c.localName.indexOf(\":\")||!l.xml_isName(c.localName)))throw new Error(\"Attribute local name contains invalid characters (well-formed required).\");o+=\" \"+c.localName+'=\"'+this._serializeAttributeValue(c.value,t)+'\"'}}catch(e){r={error:e}}finally{try{u&&!u.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}return o},e._VoidElementNames=new Set([\"area\",\"base\",\"basefont\",\"bgsound\",\"br\",\"col\",\"embed\",\"frame\",\"hr\",\"img\",\"input\",\"keygen\",\"link\",\"menuitem\",\"meta\",\"param\",\"source\",\"track\",\"wbr\"]),e}();t.XMLSerializerImpl=c},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(277);t.XMLReader=n.XMLReader;var i=r(112);t.ObjectReader=i.ObjectReader;var o=r(280);t.JSONReader=o.JSONReader;var a=r(281);t.YAMLReader=a.YAMLReader},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(19),r(65),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(180),u=r(111),l=r(7),c=r(0),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){for(var r,n,i,h,p=new s.XMLStringLexer(t,{skipWhitespaceOnlyText:!0}),f=e,d=e,m=p.nextToken();m.type!==u.TokenType.EOF;){switch(m.type){case u.TokenType.Declaration:var y=m,v=this.sanitize(y.version);if(\"1.0\"!==v)throw new Error(\"Invalid xml version: \"+v);var _={version:v};y.encoding&&(_.encoding=this.sanitize(y.encoding)),y.standalone&&(_.standalone=\"yes\"===this.sanitize(y.standalone)),d.set(_);break;case u.TokenType.DocType:var g=m;d=this.docType(d,this.sanitize(g.name),this.sanitize(g.pubId),this.sanitize(g.sysId))||d;break;case u.TokenType.CDATA:var b=m;d=this.cdata(d,this.sanitize(b.data))||d;break;case u.TokenType.Comment:var x=m;d=this.comment(d,this.sanitize(x.data))||d;break;case u.TokenType.PI:var w=m;d=this.instruction(d,this.sanitize(w.target),this.sanitize(w.data))||d;break;case u.TokenType.Text:var E=m;d=this.text(d,this._decodeText(this.sanitize(E.data)))||d;break;case u.TokenType.Element:var D=m,S=this.sanitize(D.name),C=o(c.namespace_extractQName(S),1)[0],A=d.node.lookupNamespaceURI(C),N={};try{for(var T=(r=void 0,a(D.attributes)),O=T.next();!O.done;O=T.next()){var F=o(O.value,2),k=F[0],P=F[1];if(k=this.sanitize(k),P=this.sanitize(P),\"xmlns\"===k)A=P;else{var I=o(c.namespace_extractQName(k),2),L=I[0],M=I[1];\"xmlns\"===L&&(M===C&&(A=P),N[M]=P)}}}catch(e){r={error:e}}finally{try{O&&!O.done&&(n=T.return)&&n.call(T)}finally{if(r)throw r.error}}var B=null!==A?this.element(d,A,S):this.element(d,void 0,S);if(void 0===B)break;d.node===e.node&&(f=B);try{for(var j=(i=void 0,a(D.attributes)),R=j.next();!R.done;R=j.next()){var z=o(R.value,2);k=z[0],P=z[1];k=this.sanitize(k),P=this.sanitize(P);var U=o(c.namespace_extractQName(k),2),G=(L=U[0],M=U[1],null);\"xmlns\"===L||null===L&&\"xmlns\"===M?G=l.namespace.XMLNS:null!==(G=B.node.lookupNamespaceURI(L))&&B.node.isDefaultNamespace(G)?G=null:null===G&&null!==L&&(G=N[L]||null),null!==G?this.attribute(B,G,k,this._decodeAttributeValue(P)):this.attribute(B,void 0,k,this._decodeAttributeValue(P))}}catch(e){i={error:e}}finally{try{R&&!R.done&&(h=j.return)&&h.call(j)}finally{if(i)throw i.error}}D.selfClosing||(d=B);break;case u.TokenType.ClosingTag:d.node.parentNode&&(d=d.up())}m=p.nextToken()}return f},t}(r(75).BaseReader);t.XMLReader=h},function(e,t,r){var n=r(4),i=r(279);n({target:\"Object\",stat:!0,forced:Object.assign!==i},{assign:i})},function(e,t,r){\"use strict\";var n=r(16),i=r(8),o=r(61),a=r(85),s=r(79),u=r(27),l=r(41),c=Object.assign,h=Object.defineProperty;e.exports=!c||i((function(){if(n&&1!==c({b:1},c(h({},\"a\",{enumerable:!0,get:function(){h(this,\"b\",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol();return e[r]=7,\"abcdefghijklmnopqrst\".split(\"\").forEach((function(e){t[e]=e})),7!=c({},e)[r]||\"abcdefghijklmnopqrst\"!=o(c({},t)).join(\"\")}))?function(e,t){for(var r=u(e),i=arguments.length,c=1,h=a.f,p=s.f;i>c;)for(var f,d=l(arguments[c++]),m=h?o(d).concat(h(d)):o(d),y=m.length,v=0;y>v;)f=m[v++],n&&!p.call(d,f)||(r[f]=d[f]);return r}:c},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(112),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){return new o.ObjectReader(this._builderOptions).parse(e,JSON.parse(t))},t}(r(75).BaseReader);t.JSONReader=a},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(112),a=r(75),s=r(282),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){var r=s.safeLoad(t);if(void 0===r)throw new Error(\"Unable to parse YAML document.\");return new o.ObjectReader(this._builderOptions).parse(e,r)},t}(a.BaseReader);t.YAMLReader=u},function(e,t,r){\"use strict\";var n=r(283);e.exports=n},function(e,t,r){\"use strict\";var n=r(284),i=r(303);function o(e){return function(){throw new Error(\"Function \"+e+\" is deprecated and cannot be used.\")}}e.exports.Type=r(10),e.exports.Schema=r(39),e.exports.FAILSAFE_SCHEMA=r(113),e.exports.JSON_SCHEMA=r(182),e.exports.CORE_SCHEMA=r(181),e.exports.DEFAULT_SAFE_SCHEMA=r(54),e.exports.DEFAULT_FULL_SCHEMA=r(76),e.exports.load=n.load,e.exports.loadAll=n.loadAll,e.exports.safeLoad=n.safeLoad,e.exports.safeLoadAll=n.safeLoadAll,e.exports.dump=i.dump,e.exports.safeDump=i.safeDump,e.exports.YAMLException=r(53),e.exports.MINIMAL_SCHEMA=r(113),e.exports.SAFE_SCHEMA=r(54),e.exports.DEFAULT_SCHEMA=r(76),e.exports.scan=o(\"scan\"),e.exports.parse=o(\"parse\"),e.exports.compose=o(\"compose\"),e.exports.addConstructor=o(\"addConstructor\")},function(e,t,r){\"use strict\";var n=r(38),i=r(53),o=r(285),a=r(54),s=r(76),u=Object.prototype.hasOwnProperty,l=/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/,c=/[\\x85\\u2028\\u2029]/,h=/[,\\[\\]\\{\\}]/,p=/^(?:!|!!|![a-z\\-]+!)$/i,f=/^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;function d(e){return Object.prototype.toString.call(e)}function m(e){return 10===e||13===e}function y(e){return 9===e||32===e}function v(e){return 9===e||32===e||10===e||13===e}function _(e){return 44===e||91===e||93===e||123===e||125===e}function g(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function b(e){return 48===e?\"\\0\":97===e?\"\u0007\":98===e?\"\\b\":116===e||9===e?\"\\t\":110===e?\"\\n\":118===e?\"\\v\":102===e?\"\\f\":114===e?\"\\r\":101===e?\"\u001b\":32===e?\" \":34===e?'\"':47===e?\"/\":92===e?\"\\\\\":78===e?\"\":95===e?\" \":76===e?\"\\u2028\":80===e?\"\\u2029\":\"\"}function x(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var w=new Array(256),E=new Array(256),D=0;D<256;D++)w[D]=b(D)?1:0,E[D]=b(D);function S(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||s,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}function C(e,t){return new i(t,new o(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function A(e,t){throw C(e,t)}function N(e,t){e.onWarning&&e.onWarning.call(null,C(e,t))}var T={YAML:function(e,t,r){var n,i,o;null!==e.version&&A(e,\"duplication of %YAML directive\"),1!==r.length&&A(e,\"YAML directive accepts exactly one argument\"),null===(n=/^([0-9]+)\\.([0-9]+)$/.exec(r[0]))&&A(e,\"ill-formed argument of the YAML directive\"),i=parseInt(n[1],10),o=parseInt(n[2],10),1!==i&&A(e,\"unacceptable YAML version of the document\"),e.version=r[0],e.checkLineBreaks=o<2,1!==o&&2!==o&&N(e,\"unsupported YAML version of the document\")},TAG:function(e,t,r){var n,i;2!==r.length&&A(e,\"TAG directive accepts exactly two arguments\"),n=r[0],i=r[1],p.test(n)||A(e,\"ill-formed tag handle (first argument) of the TAG directive\"),u.call(e.tagMap,n)&&A(e,'there is a previously declared suffix for \"'+n+'\" tag handle'),f.test(i)||A(e,\"ill-formed tag prefix (second argument) of the TAG directive\"),e.tagMap[n]=i}};function O(e,t,r,n){var i,o,a,s;if(t<r){if(s=e.input.slice(t,r),n)for(i=0,o=s.length;i<o;i+=1)9===(a=s.charCodeAt(i))||32<=a&&a<=1114111||A(e,\"expected valid JSON character\");else l.test(s)&&A(e,\"the stream contains non-printable characters\");e.result+=s}}function F(e,t,r,i){var o,a,s,l;for(n.isObject(r)||A(e,\"cannot merge mappings; the provided source object is unacceptable\"),s=0,l=(o=Object.keys(r)).length;s<l;s+=1)a=o[s],u.call(t,a)||(t[a]=r[a],i[a]=!0)}function k(e,t,r,n,i,o,a,s){var l,c;if(Array.isArray(i))for(l=0,c=(i=Array.prototype.slice.call(i)).length;l<c;l+=1)Array.isArray(i[l])&&A(e,\"nested arrays are not supported inside keys\"),\"object\"==typeof i&&\"[object Object]\"===d(i[l])&&(i[l]=\"[object Object]\");if(\"object\"==typeof i&&\"[object Object]\"===d(i)&&(i=\"[object Object]\"),i=String(i),null===t&&(t={}),\"tag:yaml.org,2002:merge\"===n)if(Array.isArray(o))for(l=0,c=o.length;l<c;l+=1)F(e,t,o[l],r);else F(e,t,o,r);else e.json||u.call(r,i)||!u.call(t,i)||(e.line=a||e.line,e.position=s||e.position,A(e,\"duplicated mapping key\")),t[i]=o,delete r[i];return t}function P(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):A(e,\"a line break is expected\"),e.line+=1,e.lineStart=e.position}function I(e,t,r){for(var n=0,i=e.input.charCodeAt(e.position);0!==i;){for(;y(i);)i=e.input.charCodeAt(++e.position);if(t&&35===i)do{i=e.input.charCodeAt(++e.position)}while(10!==i&&13!==i&&0!==i);if(!m(i))break;for(P(e),i=e.input.charCodeAt(e.position),n++,e.lineIndent=0;32===i;)e.lineIndent++,i=e.input.charCodeAt(++e.position)}return-1!==r&&0!==n&&e.lineIndent<r&&N(e,\"deficient indentation\"),n}function L(e){var t,r=e.position;return!(45!==(t=e.input.charCodeAt(r))&&46!==t||t!==e.input.charCodeAt(r+1)||t!==e.input.charCodeAt(r+2)||(r+=3,0!==(t=e.input.charCodeAt(r))&&!v(t)))}function M(e,t){1===t?e.result+=\" \":t>1&&(e.result+=n.repeat(\"\\n\",t-1))}function B(e,t){var r,n,i=e.tag,o=e.anchor,a=[],s=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=a),n=e.input.charCodeAt(e.position);0!==n&&45===n&&v(e.input.charCodeAt(e.position+1));)if(s=!0,e.position++,I(e,!0,-1)&&e.lineIndent<=t)a.push(null),n=e.input.charCodeAt(e.position);else if(r=e.line,z(e,t,3,!1,!0),a.push(e.result),I(e,!0,-1),n=e.input.charCodeAt(e.position),(e.line===r||e.lineIndent>t)&&0!==n)A(e,\"bad indentation of a sequence entry\");else if(e.lineIndent<t)break;return!!s&&(e.tag=i,e.anchor=o,e.kind=\"sequence\",e.result=a,!0)}function j(e){var t,r,n,i,o=!1,a=!1;if(33!==(i=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&A(e,\"duplication of a tag property\"),60===(i=e.input.charCodeAt(++e.position))?(o=!0,i=e.input.charCodeAt(++e.position)):33===i?(a=!0,r=\"!!\",i=e.input.charCodeAt(++e.position)):r=\"!\",t=e.position,o){do{i=e.input.charCodeAt(++e.position)}while(0!==i&&62!==i);e.position<e.length?(n=e.input.slice(t,e.position),i=e.input.charCodeAt(++e.position)):A(e,\"unexpected end of the stream within a verbatim tag\")}else{for(;0!==i&&!v(i);)33===i&&(a?A(e,\"tag suffix cannot contain exclamation marks\"):(r=e.input.slice(t-1,e.position+1),p.test(r)||A(e,\"named tag handle cannot contain such characters\"),a=!0,t=e.position+1)),i=e.input.charCodeAt(++e.position);n=e.input.slice(t,e.position),h.test(n)&&A(e,\"tag suffix cannot contain flow indicator characters\")}return n&&!f.test(n)&&A(e,\"tag name cannot contain such characters: \"+n),o?e.tag=n:u.call(e.tagMap,r)?e.tag=e.tagMap[r]+n:\"!\"===r?e.tag=\"!\"+n:\"!!\"===r?e.tag=\"tag:yaml.org,2002:\"+n:A(e,'undeclared tag handle \"'+r+'\"'),!0}function R(e){var t,r;if(38!==(r=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&A(e,\"duplication of an anchor property\"),r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!v(r)&&!_(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&A(e,\"name of an anchor node must contain at least one character\"),e.anchor=e.input.slice(t,e.position),!0}function z(e,t,r,i,o){var a,s,l,c,h,p,f,d,b=1,D=!1,S=!1;if(null!==e.listener&&e.listener(\"open\",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=s=l=4===r||3===r,i&&I(e,!0,-1)&&(D=!0,e.lineIndent>t?b=1:e.lineIndent===t?b=0:e.lineIndent<t&&(b=-1)),1===b)for(;j(e)||R(e);)I(e,!0,-1)?(D=!0,l=a,e.lineIndent>t?b=1:e.lineIndent===t?b=0:e.lineIndent<t&&(b=-1)):l=!1;if(l&&(l=D||o),1!==b&&4!==r||(f=1===r||2===r?t:t+1,d=e.position-e.lineStart,1===b?l&&(B(e,d)||function(e,t,r){var n,i,o,a,s,u=e.tag,l=e.anchor,c={},h={},p=null,f=null,d=null,m=!1,_=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=c),s=e.input.charCodeAt(e.position);0!==s;){if(n=e.input.charCodeAt(e.position+1),o=e.line,a=e.position,63!==s&&58!==s||!v(n)){if(!z(e,r,2,!1,!0))break;if(e.line===o){for(s=e.input.charCodeAt(e.position);y(s);)s=e.input.charCodeAt(++e.position);if(58===s)v(s=e.input.charCodeAt(++e.position))||A(e,\"a whitespace character is expected after the key-value separator within a block mapping\"),m&&(k(e,c,h,p,f,null),p=f=d=null),_=!0,m=!1,i=!1,p=e.tag,f=e.result;else{if(!_)return e.tag=u,e.anchor=l,!0;A(e,\"can not read an implicit mapping pair; a colon is missed\")}}else{if(!_)return e.tag=u,e.anchor=l,!0;A(e,\"can not read a block mapping entry; a multiline key may not be an implicit key\")}}else 63===s?(m&&(k(e,c,h,p,f,null),p=f=d=null),_=!0,m=!0,i=!0):m?(m=!1,i=!0):A(e,\"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line\"),e.position+=1,s=n;if((e.line===o||e.lineIndent>t)&&(z(e,t,4,!0,i)&&(m?f=e.result:d=e.result),m||(k(e,c,h,p,f,d,o,a),p=f=d=null),I(e,!0,-1),s=e.input.charCodeAt(e.position)),e.lineIndent>t&&0!==s)A(e,\"bad indentation of a mapping entry\");else if(e.lineIndent<t)break}return m&&k(e,c,h,p,f,null),_&&(e.tag=u,e.anchor=l,e.kind=\"mapping\",e.result=c),_}(e,d,f))||function(e,t){var r,n,i,o,a,s,u,l,c,h,p=!0,f=e.tag,d=e.anchor,m={};if(91===(h=e.input.charCodeAt(e.position)))i=93,s=!1,n=[];else{if(123!==h)return!1;i=125,s=!0,n={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=n),h=e.input.charCodeAt(++e.position);0!==h;){if(I(e,!0,t),(h=e.input.charCodeAt(e.position))===i)return e.position++,e.tag=f,e.anchor=d,e.kind=s?\"mapping\":\"sequence\",e.result=n,!0;p||A(e,\"missed comma between flow collection entries\"),c=null,o=a=!1,63===h&&v(e.input.charCodeAt(e.position+1))&&(o=a=!0,e.position++,I(e,!0,t)),r=e.line,z(e,t,1,!1,!0),l=e.tag,u=e.result,I(e,!0,t),h=e.input.charCodeAt(e.position),!a&&e.line!==r||58!==h||(o=!0,h=e.input.charCodeAt(++e.position),I(e,!0,t),z(e,t,1,!1,!0),c=e.result),s?k(e,n,m,l,u,c):o?n.push(k(e,null,m,l,u,c)):n.push(u),I(e,!0,t),44===(h=e.input.charCodeAt(e.position))?(p=!0,h=e.input.charCodeAt(++e.position)):p=!1}A(e,\"unexpected end of the stream within a flow collection\")}(e,f)?S=!0:(s&&function(e,t){var r,i,o,a,s,u=1,l=!1,c=!1,h=t,p=0,f=!1;if(124===(a=e.input.charCodeAt(e.position)))i=!1;else{if(62!==a)return!1;i=!0}for(e.kind=\"scalar\",e.result=\"\";0!==a;)if(43===(a=e.input.charCodeAt(++e.position))||45===a)1===u?u=43===a?3:2:A(e,\"repeat of a chomping mode identifier\");else{if(!((o=48<=(s=a)&&s<=57?s-48:-1)>=0))break;0===o?A(e,\"bad explicit indentation width of a block scalar; it cannot be less than one\"):c?A(e,\"repeat of an indentation width identifier\"):(h=t+o-1,c=!0)}if(y(a)){do{a=e.input.charCodeAt(++e.position)}while(y(a));if(35===a)do{a=e.input.charCodeAt(++e.position)}while(!m(a)&&0!==a)}for(;0!==a;){for(P(e),e.lineIndent=0,a=e.input.charCodeAt(e.position);(!c||e.lineIndent<h)&&32===a;)e.lineIndent++,a=e.input.charCodeAt(++e.position);if(!c&&e.lineIndent>h&&(h=e.lineIndent),m(a))p++;else{if(e.lineIndent<h){3===u?e.result+=n.repeat(\"\\n\",l?1+p:p):1===u&&l&&(e.result+=\"\\n\");break}for(i?y(a)?(f=!0,e.result+=n.repeat(\"\\n\",l?1+p:p)):f?(f=!1,e.result+=n.repeat(\"\\n\",p+1)):0===p?l&&(e.result+=\" \"):e.result+=n.repeat(\"\\n\",p):e.result+=n.repeat(\"\\n\",l?1+p:p),l=!0,c=!0,p=0,r=e.position;!m(a)&&0!==a;)a=e.input.charCodeAt(++e.position);O(e,r,e.position,!1)}}return!0}(e,f)||function(e,t){var r,n,i;if(39!==(r=e.input.charCodeAt(e.position)))return!1;for(e.kind=\"scalar\",e.result=\"\",e.position++,n=i=e.position;0!==(r=e.input.charCodeAt(e.position));)if(39===r){if(O(e,n,e.position,!0),39!==(r=e.input.charCodeAt(++e.position)))return!0;n=e.position,e.position++,i=e.position}else m(r)?(O(e,n,i,!0),M(e,I(e,!1,t)),n=i=e.position):e.position===e.lineStart&&L(e)?A(e,\"unexpected end of the document within a single quoted scalar\"):(e.position++,i=e.position);A(e,\"unexpected end of the stream within a single quoted scalar\")}(e,f)||function(e,t){var r,n,i,o,a,s,u;if(34!==(s=e.input.charCodeAt(e.position)))return!1;for(e.kind=\"scalar\",e.result=\"\",e.position++,r=n=e.position;0!==(s=e.input.charCodeAt(e.position));){if(34===s)return O(e,r,e.position,!0),e.position++,!0;if(92===s){if(O(e,r,e.position,!0),m(s=e.input.charCodeAt(++e.position)))I(e,!1,t);else if(s<256&&w[s])e.result+=E[s],e.position++;else if((a=120===(u=s)?2:117===u?4:85===u?8:0)>0){for(i=a,o=0;i>0;i--)(a=g(s=e.input.charCodeAt(++e.position)))>=0?o=(o<<4)+a:A(e,\"expected hexadecimal character\");e.result+=x(o),e.position++}else A(e,\"unknown escape sequence\");r=n=e.position}else m(s)?(O(e,r,n,!0),M(e,I(e,!1,t)),r=n=e.position):e.position===e.lineStart&&L(e)?A(e,\"unexpected end of the document within a double quoted scalar\"):(e.position++,n=e.position)}A(e,\"unexpected end of the stream within a double quoted scalar\")}(e,f)?S=!0:!function(e){var t,r,n;if(42!==(n=e.input.charCodeAt(e.position)))return!1;for(n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!v(n)&&!_(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&A(e,\"name of an alias node must contain at least one character\"),r=e.input.slice(t,e.position),e.anchorMap.hasOwnProperty(r)||A(e,'unidentified alias \"'+r+'\"'),e.result=e.anchorMap[r],I(e,!0,-1),!0}(e)?function(e,t,r){var n,i,o,a,s,u,l,c,h=e.kind,p=e.result;if(v(c=e.input.charCodeAt(e.position))||_(c)||35===c||38===c||42===c||33===c||124===c||62===c||39===c||34===c||37===c||64===c||96===c)return!1;if((63===c||45===c)&&(v(n=e.input.charCodeAt(e.position+1))||r&&_(n)))return!1;for(e.kind=\"scalar\",e.result=\"\",i=o=e.position,a=!1;0!==c;){if(58===c){if(v(n=e.input.charCodeAt(e.position+1))||r&&_(n))break}else if(35===c){if(v(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&L(e)||r&&_(c))break;if(m(c)){if(s=e.line,u=e.lineStart,l=e.lineIndent,I(e,!1,-1),e.lineIndent>=t){a=!0,c=e.input.charCodeAt(e.position);continue}e.position=o,e.line=s,e.lineStart=u,e.lineIndent=l;break}}a&&(O(e,i,o,!1),M(e,e.line-s),i=o=e.position,a=!1),y(c)||(o=e.position+1),c=e.input.charCodeAt(++e.position)}return O(e,i,o,!1),!!e.result||(e.kind=h,e.result=p,!1)}(e,f,1===r)&&(S=!0,null===e.tag&&(e.tag=\"?\")):(S=!0,null===e.tag&&null===e.anchor||A(e,\"alias node should not have any properties\")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===b&&(S=l&&B(e,d))),null!==e.tag&&\"!\"!==e.tag)if(\"?\"===e.tag){for(null!==e.result&&\"scalar\"!==e.kind&&A(e,'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"'+e.kind+'\"'),c=0,h=e.implicitTypes.length;c<h;c+=1)if((p=e.implicitTypes[c]).resolve(e.result)){e.result=p.construct(e.result),e.tag=p.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else u.call(e.typeMap[e.kind||\"fallback\"],e.tag)?(p=e.typeMap[e.kind||\"fallback\"][e.tag],null!==e.result&&p.kind!==e.kind&&A(e,\"unacceptable node kind for !<\"+e.tag+'> tag; it should be \"'+p.kind+'\", not \"'+e.kind+'\"'),p.resolve(e.result)?(e.result=p.construct(e.result),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):A(e,\"cannot resolve a node with !<\"+e.tag+\"> explicit tag\")):A(e,\"unknown tag !<\"+e.tag+\">\");return null!==e.listener&&e.listener(\"close\",e),null!==e.tag||null!==e.anchor||S}function U(e){var t,r,n,i,o=e.position,a=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};0!==(i=e.input.charCodeAt(e.position))&&(I(e,!0,-1),i=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==i));){for(a=!0,i=e.input.charCodeAt(++e.position),t=e.position;0!==i&&!v(i);)i=e.input.charCodeAt(++e.position);for(n=[],(r=e.input.slice(t,e.position)).length<1&&A(e,\"directive name must not be less than one character in length\");0!==i;){for(;y(i);)i=e.input.charCodeAt(++e.position);if(35===i){do{i=e.input.charCodeAt(++e.position)}while(0!==i&&!m(i));break}if(m(i))break;for(t=e.position;0!==i&&!v(i);)i=e.input.charCodeAt(++e.position);n.push(e.input.slice(t,e.position))}0!==i&&P(e),u.call(T,r)?T[r](e,r,n):N(e,'unknown document directive \"'+r+'\"')}I(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,I(e,!0,-1)):a&&A(e,\"directives end mark is expected\"),z(e,e.lineIndent-1,4,!1,!0),I(e,!0,-1),e.checkLineBreaks&&c.test(e.input.slice(o,e.position))&&N(e,\"non-ASCII line breaks are interpreted as content\"),e.documents.push(e.result),e.position===e.lineStart&&L(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,I(e,!0,-1)):e.position<e.length-1&&A(e,\"end of the stream or a document separator is expected\")}function G(e,t){t=t||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+=\"\\n\"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var r=new S(e,t),n=e.indexOf(\"\\0\");for(-1!==n&&(r.position=n,A(r,\"null byte is not allowed in input\")),r.input+=\"\\0\";32===r.input.charCodeAt(r.position);)r.lineIndent+=1,r.position+=1;for(;r.position<r.length-1;)U(r);return r.documents}function X(e,t,r){null!==t&&\"object\"==typeof t&&void 0===r&&(r=t,t=null);var n=G(e,r);if(\"function\"!=typeof t)return n;for(var i=0,o=n.length;i<o;i+=1)t(n[i])}function q(e,t){var r=G(e,t);if(0!==r.length){if(1===r.length)return r[0];throw new i(\"expected a single document in the stream, but found more\")}}e.exports.loadAll=X,e.exports.load=q,e.exports.safeLoadAll=function(e,t,r){return\"object\"==typeof t&&null!==t&&void 0===r&&(r=t,t=null),X(e,t,n.extend({schema:a},r))},e.exports.safeLoad=function(e,t){return q(e,n.extend({schema:a},t))}},function(e,t,r){\"use strict\";var n=r(38);function i(e,t,r,n,i){this.name=e,this.buffer=t,this.position=r,this.line=n,this.column=i}i.prototype.getSnippet=function(e,t){var r,i,o,a,s;if(!this.buffer)return null;for(e=e||4,t=t||75,r=\"\",i=this.position;i>0&&-1===\"\\0\\r\\n\\u2028\\u2029\".indexOf(this.buffer.charAt(i-1));)if(i-=1,this.position-i>t/2-1){r=\" ... \",i+=5;break}for(o=\"\",a=this.position;a<this.buffer.length&&-1===\"\\0\\r\\n\\u2028\\u2029\".indexOf(this.buffer.charAt(a));)if((a+=1)-this.position>t/2-1){o=\" ... \",a-=5;break}return s=this.buffer.slice(i,a),n.repeat(\" \",e)+r+s+o+\"\\n\"+n.repeat(\" \",e+this.position-i+r.length)+\"^\"},i.prototype.toString=function(e){var t,r=\"\";return this.name&&(r+='in \"'+this.name+'\" '),r+=\"at line \"+(this.line+1)+\", column \"+(this.column+1),e||(t=this.getSnippet())&&(r+=\":\\n\"+t),r},e.exports=i},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:str\",{kind:\"scalar\",construct:function(e){return null!==e?e:\"\"}})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:seq\",{kind:\"sequence\",construct:function(e){return null!==e?e:[]}})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:map\",{kind:\"mapping\",construct:function(e){return null!==e?e:{}}})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:null\",{kind:\"scalar\",resolve:function(e){if(null===e)return!0;var t=e.length;return 1===t&&\"~\"===e||4===t&&(\"null\"===e||\"Null\"===e||\"NULL\"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return\"~\"},lowercase:function(){return\"null\"},uppercase:function(){return\"NULL\"},camelcase:function(){return\"Null\"}},defaultStyle:\"lowercase\"})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:bool\",{kind:\"scalar\",resolve:function(e){if(null===e)return!1;var t=e.length;return 4===t&&(\"true\"===e||\"True\"===e||\"TRUE\"===e)||5===t&&(\"false\"===e||\"False\"===e||\"FALSE\"===e)},construct:function(e){return\"true\"===e||\"True\"===e||\"TRUE\"===e},predicate:function(e){return\"[object Boolean]\"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?\"true\":\"false\"},uppercase:function(e){return e?\"TRUE\":\"FALSE\"},camelcase:function(e){return e?\"True\":\"False\"}},defaultStyle:\"lowercase\"})},function(e,t,r){\"use strict\";var n=r(38),i=r(10);function o(e){return 48<=e&&e<=55}function a(e){return 48<=e&&e<=57}e.exports=new i(\"tag:yaml.org,2002:int\",{kind:\"scalar\",resolve:function(e){if(null===e)return!1;var t,r,n=e.length,i=0,s=!1;if(!n)return!1;if(\"-\"!==(t=e[i])&&\"+\"!==t||(t=e[++i]),\"0\"===t){if(i+1===n)return!0;if(\"b\"===(t=e[++i])){for(i++;i<n;i++)if(\"_\"!==(t=e[i])){if(\"0\"!==t&&\"1\"!==t)return!1;s=!0}return s&&\"_\"!==t}if(\"x\"===t){for(i++;i<n;i++)if(\"_\"!==(t=e[i])){if(!(48<=(r=e.charCodeAt(i))&&r<=57||65<=r&&r<=70||97<=r&&r<=102))return!1;s=!0}return s&&\"_\"!==t}for(;i<n;i++)if(\"_\"!==(t=e[i])){if(!o(e.charCodeAt(i)))return!1;s=!0}return s&&\"_\"!==t}if(\"_\"===t)return!1;for(;i<n;i++)if(\"_\"!==(t=e[i])){if(\":\"===t)break;if(!a(e.charCodeAt(i)))return!1;s=!0}return!(!s||\"_\"===t)&&(\":\"!==t||/^(:[0-5]?[0-9])+$/.test(e.slice(i)))},construct:function(e){var t,r,n=e,i=1,o=[];return-1!==n.indexOf(\"_\")&&(n=n.replace(/_/g,\"\")),\"-\"!==(t=n[0])&&\"+\"!==t||(\"-\"===t&&(i=-1),t=(n=n.slice(1))[0]),\"0\"===n?0:\"0\"===t?\"b\"===n[1]?i*parseInt(n.slice(2),2):\"x\"===n[1]?i*parseInt(n,16):i*parseInt(n,8):-1!==n.indexOf(\":\")?(n.split(\":\").forEach((function(e){o.unshift(parseInt(e,10))})),n=0,r=1,o.forEach((function(e){n+=e*r,r*=60})),i*n):i*parseInt(n,10)},predicate:function(e){return\"[object Number]\"===Object.prototype.toString.call(e)&&e%1==0&&!n.isNegativeZero(e)},represent:{binary:function(e){return e>=0?\"0b\"+e.toString(2):\"-0b\"+e.toString(2).slice(1)},octal:function(e){return e>=0?\"0\"+e.toString(8):\"-0\"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?\"0x\"+e.toString(16).toUpperCase():\"-0x\"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:\"decimal\",styleAliases:{binary:[2,\"bin\"],octal:[8,\"oct\"],decimal:[10,\"dec\"],hexadecimal:[16,\"hex\"]}})},function(e,t,r){\"use strict\";var n=r(38),i=r(10),o=new RegExp(\"^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*|[-+]?\\\\.(?:inf|Inf|INF)|\\\\.(?:nan|NaN|NAN))$\");var a=/^[-+]?[0-9]+e/;e.exports=new i(\"tag:yaml.org,2002:float\",{kind:\"scalar\",resolve:function(e){return null!==e&&!(!o.test(e)||\"_\"===e[e.length-1])},construct:function(e){var t,r,n,i;return r=\"-\"===(t=e.replace(/_/g,\"\").toLowerCase())[0]?-1:1,i=[],\"+-\".indexOf(t[0])>=0&&(t=t.slice(1)),\".inf\"===t?1===r?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:\".nan\"===t?NaN:t.indexOf(\":\")>=0?(t.split(\":\").forEach((function(e){i.unshift(parseFloat(e,10))})),t=0,n=1,i.forEach((function(e){t+=e*n,n*=60})),r*t):r*parseFloat(t,10)},predicate:function(e){return\"[object Number]\"===Object.prototype.toString.call(e)&&(e%1!=0||n.isNegativeZero(e))},represent:function(e,t){var r;if(isNaN(e))switch(t){case\"lowercase\":return\".nan\";case\"uppercase\":return\".NAN\";case\"camelcase\":return\".NaN\"}else if(Number.POSITIVE_INFINITY===e)switch(t){case\"lowercase\":return\".inf\";case\"uppercase\":return\".INF\";case\"camelcase\":return\".Inf\"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case\"lowercase\":return\"-.inf\";case\"uppercase\":return\"-.INF\";case\"camelcase\":return\"-.Inf\"}else if(n.isNegativeZero(e))return\"-0.0\";return r=e.toString(10),a.test(r)?r.replace(\"e\",\".e\"):r},defaultStyle:\"lowercase\"})},function(e,t,r){\"use strict\";var n=r(10),i=new RegExp(\"^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$\"),o=new RegExp(\"^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\\\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\\\.([0-9]*))?(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$\");e.exports=new n(\"tag:yaml.org,2002:timestamp\",{kind:\"scalar\",resolve:function(e){return null!==e&&(null!==i.exec(e)||null!==o.exec(e))},construct:function(e){var t,r,n,a,s,u,l,c,h=0,p=null;if(null===(t=i.exec(e))&&(t=o.exec(e)),null===t)throw new Error(\"Date resolve error\");if(r=+t[1],n=+t[2]-1,a=+t[3],!t[4])return new Date(Date.UTC(r,n,a));if(s=+t[4],u=+t[5],l=+t[6],t[7]){for(h=t[7].slice(0,3);h.length<3;)h+=\"0\";h=+h}return t[9]&&(p=6e4*(60*+t[10]+ +(t[11]||0)),\"-\"===t[9]&&(p=-p)),c=new Date(Date.UTC(r,n,a,s,u,l,h)),p&&c.setTime(c.getTime()-p),c},instanceOf:Date,represent:function(e){return e.toISOString()}})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:merge\",{kind:\"scalar\",resolve:function(e){return\"<<\"===e||null===e}})},function(e,t,r){\"use strict\";var n;try{n=r(145).Buffer}catch(e){}var i=r(10),o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r\";e.exports=new i(\"tag:yaml.org,2002:binary\",{kind:\"scalar\",resolve:function(e){if(null===e)return!1;var t,r,n=0,i=e.length,a=o;for(r=0;r<i;r++)if(!((t=a.indexOf(e.charAt(r)))>64)){if(t<0)return!1;n+=6}return n%8==0},construct:function(e){var t,r,i=e.replace(/[\\r\\n=]/g,\"\"),a=i.length,s=o,u=0,l=[];for(t=0;t<a;t++)t%4==0&&t&&(l.push(u>>16&255),l.push(u>>8&255),l.push(255&u)),u=u<<6|s.indexOf(i.charAt(t));return 0===(r=a%4*6)?(l.push(u>>16&255),l.push(u>>8&255),l.push(255&u)):18===r?(l.push(u>>10&255),l.push(u>>2&255)):12===r&&l.push(u>>4&255),n?n.from?n.from(l):new n(l):l},predicate:function(e){return n&&n.isBuffer(e)},represent:function(e){var t,r,n=\"\",i=0,a=e.length,s=o;for(t=0;t<a;t++)t%3==0&&t&&(n+=s[i>>18&63],n+=s[i>>12&63],n+=s[i>>6&63],n+=s[63&i]),i=(i<<8)+e[t];return 0===(r=a%3)?(n+=s[i>>18&63],n+=s[i>>12&63],n+=s[i>>6&63],n+=s[63&i]):2===r?(n+=s[i>>10&63],n+=s[i>>4&63],n+=s[i<<2&63],n+=s[64]):1===r&&(n+=s[i>>2&63],n+=s[i<<4&63],n+=s[64],n+=s[64]),n}})},function(e,t,r){\"use strict\";var n=r(10),i=Object.prototype.hasOwnProperty,o=Object.prototype.toString;e.exports=new n(\"tag:yaml.org,2002:omap\",{kind:\"sequence\",resolve:function(e){if(null===e)return!0;var t,r,n,a,s,u=[],l=e;for(t=0,r=l.length;t<r;t+=1){if(n=l[t],s=!1,\"[object Object]\"!==o.call(n))return!1;for(a in n)if(i.call(n,a)){if(s)return!1;s=!0}if(!s)return!1;if(-1!==u.indexOf(a))return!1;u.push(a)}return!0},construct:function(e){return null!==e?e:[]}})},function(e,t,r){\"use strict\";var n=r(10),i=Object.prototype.toString;e.exports=new n(\"tag:yaml.org,2002:pairs\",{kind:\"sequence\",resolve:function(e){if(null===e)return!0;var t,r,n,o,a,s=e;for(a=new Array(s.length),t=0,r=s.length;t<r;t+=1){if(n=s[t],\"[object Object]\"!==i.call(n))return!1;if(1!==(o=Object.keys(n)).length)return!1;a[t]=[o[0],n[o[0]]]}return!0},construct:function(e){if(null===e)return[];var t,r,n,i,o,a=e;for(o=new Array(a.length),t=0,r=a.length;t<r;t+=1)n=a[t],i=Object.keys(n),o[t]=[i[0],n[i[0]]];return o}})},function(e,t,r){\"use strict\";var n=r(10),i=Object.prototype.hasOwnProperty;e.exports=new n(\"tag:yaml.org,2002:set\",{kind:\"mapping\",resolve:function(e){if(null===e)return!0;var t,r=e;for(t in r)if(i.call(r,t)&&null!==r[t])return!1;return!0},construct:function(e){return null!==e?e:{}}})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:js/undefined\",{kind:\"scalar\",resolve:function(){return!0},construct:function(){},predicate:function(e){return void 0===e},represent:function(){return\"\"}})},function(e,t,r){\"use strict\";var n=r(10);e.exports=new n(\"tag:yaml.org,2002:js/regexp\",{kind:\"scalar\",resolve:function(e){if(null===e)return!1;if(0===e.length)return!1;var t=e,r=/\\/([gim]*)$/.exec(e),n=\"\";if(\"/\"===t[0]){if(r&&(n=r[1]),n.length>3)return!1;if(\"/\"!==t[t.length-n.length-1])return!1}return!0},construct:function(e){var t=e,r=/\\/([gim]*)$/.exec(e),n=\"\";return\"/\"===t[0]&&(r&&(n=r[1]),t=t.slice(1,t.length-n.length-1)),new RegExp(t,n)},predicate:function(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)},represent:function(e){var t=\"/\"+e.source+\"/\";return e.global&&(t+=\"g\"),e.multiline&&(t+=\"m\"),e.ignoreCase&&(t+=\"i\"),t}})},function(e,t,r){\"use strict\";var n;try{n=r(302)}catch(e){\"undefined\"!=typeof window&&(n=window.esprima)}var i=r(10);e.exports=new i(\"tag:yaml.org,2002:js/function\",{kind:\"scalar\",resolve:function(e){if(null===e)return!1;try{var t=\"(\"+e+\")\",r=n.parse(t,{range:!0});return\"Program\"===r.type&&1===r.body.length&&\"ExpressionStatement\"===r.body[0].type&&(\"ArrowFunctionExpression\"===r.body[0].expression.type||\"FunctionExpression\"===r.body[0].expression.type)}catch(e){return!1}},construct:function(e){var t,r=\"(\"+e+\")\",i=n.parse(r,{range:!0}),o=[];if(\"Program\"!==i.type||1!==i.body.length||\"ExpressionStatement\"!==i.body[0].type||\"ArrowFunctionExpression\"!==i.body[0].expression.type&&\"FunctionExpression\"!==i.body[0].expression.type)throw new Error(\"Failed to resolve function\");return i.body[0].expression.params.forEach((function(e){o.push(e.name)})),t=i.body[0].expression.body.range,\"BlockStatement\"===i.body[0].expression.body.type?new Function(o,r.slice(t[0]+1,t[1]-1)):new Function(o,\"return \"+r.slice(t[0],t[1]))},predicate:function(e){return\"[object Function]\"===Object.prototype.toString.call(e)},represent:function(e){return e.toString()}})},function(e,t,r){var n;n=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}return r.m=e,r.c=t,r.p=\"\",r(0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1),i=r(3),o=r(8),a=r(15);function s(e,t,r){var a=null,s=function(e,t){r&&r(e,t),a&&a.visit(e,t)},u=\"function\"==typeof r?s:null,l=!1;if(t){l=\"boolean\"==typeof t.comment&&t.comment;var c=\"boolean\"==typeof t.attachComment&&t.attachComment;(l||c)&&((a=new n.CommentHandler).attach=c,t.comment=!0,u=s)}var h,p=!1;t&&\"string\"==typeof t.sourceType&&(p=\"module\"===t.sourceType),h=t&&\"boolean\"==typeof t.jsx&&t.jsx?new i.JSXParser(e,t,u):new o.Parser(e,t,u);var f=p?h.parseModule():h.parseScript();return l&&a&&(f.comments=a.comments),h.config.tokens&&(f.tokens=h.tokens),h.config.tolerant&&(f.errors=h.errorHandler.errors),f}t.parse=s,t.parseModule=function(e,t,r){var n=t||{};return n.sourceType=\"module\",s(e,n,r)},t.parseScript=function(e,t,r){var n=t||{};return n.sourceType=\"script\",s(e,n,r)},t.tokenize=function(e,t,r){var n,i=new a.Tokenizer(e,t);n=[];try{for(;;){var o=i.getNextToken();if(!o)break;r&&(o=r(o)),n.push(o)}}catch(e){i.errorHandler.tolerate(e)}return i.errorHandler.tolerant&&(n.errors=i.errors()),n};var u=r(2);t.Syntax=u.Syntax,t.version=\"4.0.1\"},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return e.prototype.insertInnerComments=function(e,t){if(e.type===n.Syntax.BlockStatement&&0===e.body.length){for(var r=[],i=this.leading.length-1;i>=0;--i){var o=this.leading[i];t.end.offset>=o.start&&(r.unshift(o.comment),this.leading.splice(i,1),this.trailing.splice(i,1))}r.length&&(e.innerComments=r)}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var r=this.trailing.length-1;r>=0;--r){var n=this.trailing[r];n.start>=e.end.offset&&t.unshift(n.comment)}return this.trailing.length=0,t}var i=this.stack[this.stack.length-1];if(i&&i.node.trailingComments){var o=i.node.trailingComments[0];o&&o.range[0]>=e.end.offset&&(t=i.node.trailingComments,delete i.node.trailingComments)}return t},e.prototype.findLeadingComments=function(e){for(var t,r=[];this.stack.length>0&&((o=this.stack[this.stack.length-1])&&o.start>=e.start.offset);)t=o.node,this.stack.pop();if(t){for(var n=(t.leadingComments?t.leadingComments.length:0)-1;n>=0;--n){var i=t.leadingComments[n];i.range[1]<=e.start.offset&&(r.unshift(i),t.leadingComments.splice(n,1))}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,r}for(n=this.leading.length-1;n>=0;--n){var o;(o=this.leading[n]).start<=e.start.offset&&(r.unshift(o.comment),this.leading.splice(n,1))}return r},e.prototype.visitNode=function(e,t){if(!(e.type===n.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var r=this.findTrailingComments(t),i=this.findLeadingComments(t);i.length>0&&(e.leadingComments=i),r.length>0&&(e.trailingComments=r),this.stack.push({node:e,start:t.start.offset})}},e.prototype.visitComment=function(e,t){var r=\"L\"===e.type[0]?\"Line\":\"Block\",n={type:r,value:e.value};if(e.range&&(n.range=e.range),e.loc&&(n.loc=e.loc),this.comments.push(n),this.attach){var i={comment:{type:r,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(i.comment.loc=e.loc),e.type=r,this.leading.push(i),this.trailing.push(i)}},e.prototype.visit=function(e,t){\"LineComment\"===e.type||\"BlockComment\"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t)},e}();t.CommentHandler=i},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Syntax={AssignmentExpression:\"AssignmentExpression\",AssignmentPattern:\"AssignmentPattern\",ArrayExpression:\"ArrayExpression\",ArrayPattern:\"ArrayPattern\",ArrowFunctionExpression:\"ArrowFunctionExpression\",AwaitExpression:\"AwaitExpression\",BlockStatement:\"BlockStatement\",BinaryExpression:\"BinaryExpression\",BreakStatement:\"BreakStatement\",CallExpression:\"CallExpression\",CatchClause:\"CatchClause\",ClassBody:\"ClassBody\",ClassDeclaration:\"ClassDeclaration\",ClassExpression:\"ClassExpression\",ConditionalExpression:\"ConditionalExpression\",ContinueStatement:\"ContinueStatement\",DoWhileStatement:\"DoWhileStatement\",DebuggerStatement:\"DebuggerStatement\",EmptyStatement:\"EmptyStatement\",ExportAllDeclaration:\"ExportAllDeclaration\",ExportDefaultDeclaration:\"ExportDefaultDeclaration\",ExportNamedDeclaration:\"ExportNamedDeclaration\",ExportSpecifier:\"ExportSpecifier\",ExpressionStatement:\"ExpressionStatement\",ForStatement:\"ForStatement\",ForOfStatement:\"ForOfStatement\",ForInStatement:\"ForInStatement\",FunctionDeclaration:\"FunctionDeclaration\",FunctionExpression:\"FunctionExpression\",Identifier:\"Identifier\",IfStatement:\"IfStatement\",ImportDeclaration:\"ImportDeclaration\",ImportDefaultSpecifier:\"ImportDefaultSpecifier\",ImportNamespaceSpecifier:\"ImportNamespaceSpecifier\",ImportSpecifier:\"ImportSpecifier\",Literal:\"Literal\",LabeledStatement:\"LabeledStatement\",LogicalExpression:\"LogicalExpression\",MemberExpression:\"MemberExpression\",MetaProperty:\"MetaProperty\",MethodDefinition:\"MethodDefinition\",NewExpression:\"NewExpression\",ObjectExpression:\"ObjectExpression\",ObjectPattern:\"ObjectPattern\",Program:\"Program\",Property:\"Property\",RestElement:\"RestElement\",ReturnStatement:\"ReturnStatement\",SequenceExpression:\"SequenceExpression\",SpreadElement:\"SpreadElement\",Super:\"Super\",SwitchCase:\"SwitchCase\",SwitchStatement:\"SwitchStatement\",TaggedTemplateExpression:\"TaggedTemplateExpression\",TemplateElement:\"TemplateElement\",TemplateLiteral:\"TemplateLiteral\",ThisExpression:\"ThisExpression\",ThrowStatement:\"ThrowStatement\",TryStatement:\"TryStatement\",UnaryExpression:\"UnaryExpression\",UpdateExpression:\"UpdateExpression\",VariableDeclaration:\"VariableDeclaration\",VariableDeclarator:\"VariableDeclarator\",WhileStatement:\"WhileStatement\",WithStatement:\"WithStatement\",YieldExpression:\"YieldExpression\"}},function(e,t,r){\"use strict\";var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(4),a=r(5),s=r(6),u=r(7),l=r(8),c=r(13),h=r(14);function p(e){var t;switch(e.type){case s.JSXSyntax.JSXIdentifier:t=e.name;break;case s.JSXSyntax.JSXNamespacedName:var r=e;t=p(r.namespace)+\":\"+p(r.name);break;case s.JSXSyntax.JSXMemberExpression:var n=e;t=p(n.object)+\".\"+p(n.property)}return t}c.TokenName[100]=\"JSXIdentifier\",c.TokenName[101]=\"JSXText\";var f=function(e){function t(t,r,n){return e.call(this,t,r,n)||this}return i(t,e),t.prototype.parsePrimaryExpression=function(){return this.match(\"<\")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column},t.prototype.finishJSX=function(){this.nextToken()},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX(\"}\"),this.config.tokens&&this.tokens.pop()},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t=\"&\",r=!0,n=!1,i=!1,a=!1;!this.scanner.eof()&&r&&!n;){var s=this.scanner.source[this.scanner.index];if(s===e)break;if(n=\";\"===s,t+=s,++this.scanner.index,!n)switch(t.length){case 2:i=\"#\"===s;break;case 3:i&&(r=(a=\"x\"===s)||o.Character.isDecimalDigit(s.charCodeAt(0)),i=i&&!a);break;default:r=(r=r&&!(i&&!o.Character.isDecimalDigit(s.charCodeAt(0))))&&!(a&&!o.Character.isHexDigit(s.charCodeAt(0)))}}if(r&&n&&t.length>2){var u=t.substr(1,t.length-2);i&&u.length>1?t=String.fromCharCode(parseInt(u.substr(1),10)):a&&u.length>2?t=String.fromCharCode(parseInt(\"0\"+u.substr(1),16)):i||a||!h.XHTMLEntities[u]||(t=h.XHTMLEntities[u])}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return{type:7,value:s=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,r=this.scanner.source[this.scanner.index++],n=\"\";!this.scanner.eof()&&(u=this.scanner.source[this.scanner.index++])!==r;)n+=\"&\"===u?this.scanXHTMLEntity(r):u;return{type:8,value:n,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var i=this.scanner.source.charCodeAt(this.scanner.index+1),a=this.scanner.source.charCodeAt(this.scanner.index+2),s=46===i&&46===a?\"...\":\".\";return t=this.scanner.index,this.scanner.index+=s.length,{type:7,value:s,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return{type:10,value:\"\",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(o.Character.isIdentifierStart(e)&&92!==e){for(t=this.scanner.index,++this.scanner.index;!this.scanner.eof();){var u=this.scanner.source.charCodeAt(this.scanner.index);if(o.Character.isIdentifierPart(u)&&92!==u)++this.scanner.index;else{if(45!==u)break;++this.scanner.index}}return{type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t=\"\";!this.scanner.eof();){var r=this.scanner.source[this.scanner.index];if(\"{\"===r||\"<\"===r)break;++this.scanner.index,t+=r,o.Character.isLineTerminator(r.charCodeAt(0))&&(++this.scanner.lineNumber,\"\\r\"===r&&\"\\n\"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var n={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(n)),n},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new a.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(\":\")){var r=t;this.expectJSX(\":\");var n=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXNamespacedName(r,n))}else if(this.matchJSX(\".\"))for(;this.matchJSX(\".\");){var i=t;this.expectJSX(\".\");var o=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXMemberExpression(i,o))}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),r=this.parseJSXIdentifier();if(this.matchJSX(\":\")){var n=r;this.expectJSX(\":\");var i=this.parseJSXIdentifier();e=this.finalize(t,new a.JSXNamespacedName(n,i))}else e=r;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var r=this.getTokenRaw(t);return this.finalize(e,new u.Literal(t.value,r))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX(\"{\"),this.finishJSX(),this.match(\"}\")&&this.tolerateError(\"JSX attributes must only be assigned a non-empty expression\");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX(\"{\")?this.parseJSXExpressionAttribute():this.matchJSX(\"<\")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),r=null;return this.matchJSX(\"=\")&&(this.expectJSX(\"=\"),r=this.parseJSXAttributeValue()),this.finalize(e,new a.JSXAttribute(t,r))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX(\"{\"),this.expectJSX(\"...\"),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX(\"/\")&&!this.matchJSX(\">\");){var t=this.matchJSX(\"{\")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t)}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX(\"<\");var t=this.parseJSXElementName(),r=this.parseJSXAttributes(),n=this.matchJSX(\"/\");return n&&this.expectJSX(\"/\"),this.expectJSX(\">\"),this.finalize(e,new a.JSXOpeningElement(t,n,r))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX(\"<\"),this.matchJSX(\"/\")){this.expectJSX(\"/\");var t=this.parseJSXElementName();return this.expectJSX(\">\"),this.finalize(e,new a.JSXClosingElement(t))}var r=this.parseJSXElementName(),n=this.parseJSXAttributes(),i=this.matchJSX(\"/\");return i&&this.expectJSX(\"/\"),this.expectJSX(\">\"),this.finalize(e,new a.JSXOpeningElement(r,i,n))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new a.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX(\"{\"),this.matchJSX(\"}\")?(e=this.parseJSXEmptyExpression(),this.expectJSX(\"}\")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new a.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),r=this.nextJSXText();if(r.start<r.end){var n=this.getTokenRaw(r),i=this.finalize(t,new a.JSXText(r.value,n));e.push(i)}if(\"{\"!==this.scanner.source[this.scanner.index])break;var o=this.parseJSXExpressionContainer();e.push(o)}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var r=this.createJSXChildNode(),n=this.parseJSXBoundaryElement();if(n.type===s.JSXSyntax.JSXOpeningElement){var i=n;if(i.selfClosing){var o=this.finalize(r,new a.JSXElement(i,[],null));e.children.push(o)}else t.push(e),e={node:r,opening:i,closing:null,children:[]}}if(n.type===s.JSXSyntax.JSXClosingElement){e.closing=n;var u=p(e.opening.name);if(u!==p(e.closing.name)&&this.tolerateError(\"Expected corresponding JSX closing tag for %0\",u),!(t.length>0))break;o=this.finalize(e.node,new a.JSXElement(e.opening,e.children,e.closing)),(e=t[t.length-1]).children.push(o),t.pop()}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),r=[],n=null;if(!t.selfClosing){var i=this.parseComplexJSXElement({node:e,opening:t,closing:n,children:r});r=i.children,n=i.closing}return this.finalize(e,new a.JSXElement(t,r,n))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match(\"<\")},t}(l.Parser);t.JSXParser=f},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r={NonAsciiIdentifierStart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,NonAsciiIdentifierPart:/[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&r.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&r.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(6),i=function(e){this.type=n.JSXSyntax.JSXClosingElement,this.name=e};t.JSXClosingElement=i;var o=function(e,t,r){this.type=n.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=r};t.JSXElement=o;var a=function(){this.type=n.JSXSyntax.JSXEmptyExpression};t.JSXEmptyExpression=a;var s=function(e){this.type=n.JSXSyntax.JSXExpressionContainer,this.expression=e};t.JSXExpressionContainer=s;var u=function(e){this.type=n.JSXSyntax.JSXIdentifier,this.name=e};t.JSXIdentifier=u;var l=function(e,t){this.type=n.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t};t.JSXMemberExpression=l;var c=function(e,t){this.type=n.JSXSyntax.JSXAttribute,this.name=e,this.value=t};t.JSXAttribute=c;var h=function(e,t){this.type=n.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t};t.JSXNamespacedName=h;var p=function(e,t,r){this.type=n.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=r};t.JSXOpeningElement=p;var f=function(e){this.type=n.JSXSyntax.JSXSpreadAttribute,this.argument=e};t.JSXSpreadAttribute=f;var d=function(e,t){this.type=n.JSXSyntax.JSXText,this.value=e,this.raw=t};t.JSXText=d},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.JSXSyntax={JSXAttribute:\"JSXAttribute\",JSXClosingElement:\"JSXClosingElement\",JSXElement:\"JSXElement\",JSXEmptyExpression:\"JSXEmptyExpression\",JSXExpressionContainer:\"JSXExpressionContainer\",JSXIdentifier:\"JSXIdentifier\",JSXMemberExpression:\"JSXMemberExpression\",JSXNamespacedName:\"JSXNamespacedName\",JSXOpeningElement:\"JSXOpeningElement\",JSXSpreadAttribute:\"JSXSpreadAttribute\",JSXText:\"JSXText\"}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(2),i=function(e){this.type=n.Syntax.ArrayExpression,this.elements=e};t.ArrayExpression=i;var o=function(e){this.type=n.Syntax.ArrayPattern,this.elements=e};t.ArrayPattern=o;var a=function(e,t,r){this.type=n.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=r,this.async=!1};t.ArrowFunctionExpression=a;var s=function(e,t,r){this.type=n.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=r};t.AssignmentExpression=s;var u=function(e,t){this.type=n.Syntax.AssignmentPattern,this.left=e,this.right=t};t.AssignmentPattern=u;var l=function(e,t,r){this.type=n.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=r,this.async=!0};t.AsyncArrowFunctionExpression=l;var c=function(e,t,r){this.type=n.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=r,this.generator=!1,this.expression=!1,this.async=!0};t.AsyncFunctionDeclaration=c;var h=function(e,t,r){this.type=n.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=r,this.generator=!1,this.expression=!1,this.async=!0};t.AsyncFunctionExpression=h;var p=function(e){this.type=n.Syntax.AwaitExpression,this.argument=e};t.AwaitExpression=p;var f=function(e,t,r){var i=\"||\"===e||\"&&\"===e;this.type=i?n.Syntax.LogicalExpression:n.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=r};t.BinaryExpression=f;var d=function(e){this.type=n.Syntax.BlockStatement,this.body=e};t.BlockStatement=d;var m=function(e){this.type=n.Syntax.BreakStatement,this.label=e};t.BreakStatement=m;var y=function(e,t){this.type=n.Syntax.CallExpression,this.callee=e,this.arguments=t};t.CallExpression=y;var v=function(e,t){this.type=n.Syntax.CatchClause,this.param=e,this.body=t};t.CatchClause=v;var _=function(e){this.type=n.Syntax.ClassBody,this.body=e};t.ClassBody=_;var g=function(e,t,r){this.type=n.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=r};t.ClassDeclaration=g;var b=function(e,t,r){this.type=n.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=r};t.ClassExpression=b;var x=function(e,t){this.type=n.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t};t.ComputedMemberExpression=x;var w=function(e,t,r){this.type=n.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=r};t.ConditionalExpression=w;var E=function(e){this.type=n.Syntax.ContinueStatement,this.label=e};t.ContinueStatement=E;var D=function(){this.type=n.Syntax.DebuggerStatement};t.DebuggerStatement=D;var S=function(e,t){this.type=n.Syntax.ExpressionStatement,this.expression=e,this.directive=t};t.Directive=S;var C=function(e,t){this.type=n.Syntax.DoWhileStatement,this.body=e,this.test=t};t.DoWhileStatement=C;var A=function(){this.type=n.Syntax.EmptyStatement};t.EmptyStatement=A;var N=function(e){this.type=n.Syntax.ExportAllDeclaration,this.source=e};t.ExportAllDeclaration=N;var T=function(e){this.type=n.Syntax.ExportDefaultDeclaration,this.declaration=e};t.ExportDefaultDeclaration=T;var O=function(e,t,r){this.type=n.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=r};t.ExportNamedDeclaration=O;var F=function(e,t){this.type=n.Syntax.ExportSpecifier,this.exported=t,this.local=e};t.ExportSpecifier=F;var k=function(e){this.type=n.Syntax.ExpressionStatement,this.expression=e};t.ExpressionStatement=k;var P=function(e,t,r){this.type=n.Syntax.ForInStatement,this.left=e,this.right=t,this.body=r,this.each=!1};t.ForInStatement=P;var I=function(e,t,r){this.type=n.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=r};t.ForOfStatement=I;var L=function(e,t,r,i){this.type=n.Syntax.ForStatement,this.init=e,this.test=t,this.update=r,this.body=i};t.ForStatement=L;var M=function(e,t,r,i){this.type=n.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=r,this.generator=i,this.expression=!1,this.async=!1};t.FunctionDeclaration=M;var B=function(e,t,r,i){this.type=n.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=r,this.generator=i,this.expression=!1,this.async=!1};t.FunctionExpression=B;var j=function(e){this.type=n.Syntax.Identifier,this.name=e};t.Identifier=j;var R=function(e,t,r){this.type=n.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=r};t.IfStatement=R;var z=function(e,t){this.type=n.Syntax.ImportDeclaration,this.specifiers=e,this.source=t};t.ImportDeclaration=z;var U=function(e){this.type=n.Syntax.ImportDefaultSpecifier,this.local=e};t.ImportDefaultSpecifier=U;var G=function(e){this.type=n.Syntax.ImportNamespaceSpecifier,this.local=e};t.ImportNamespaceSpecifier=G;var X=function(e,t){this.type=n.Syntax.ImportSpecifier,this.local=e,this.imported=t};t.ImportSpecifier=X;var q=function(e,t){this.type=n.Syntax.LabeledStatement,this.label=e,this.body=t};t.LabeledStatement=q;var W=function(e,t){this.type=n.Syntax.Literal,this.value=e,this.raw=t};t.Literal=W;var H=function(e,t){this.type=n.Syntax.MetaProperty,this.meta=e,this.property=t};t.MetaProperty=H;var J=function(e,t,r,i,o){this.type=n.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=r,this.kind=i,this.static=o};t.MethodDefinition=J;var Y=function(e){this.type=n.Syntax.Program,this.body=e,this.sourceType=\"module\"};t.Module=Y;var V=function(e,t){this.type=n.Syntax.NewExpression,this.callee=e,this.arguments=t};t.NewExpression=V;var K=function(e){this.type=n.Syntax.ObjectExpression,this.properties=e};t.ObjectExpression=K;var $=function(e){this.type=n.Syntax.ObjectPattern,this.properties=e};t.ObjectPattern=$;var Q=function(e,t,r,i,o,a){this.type=n.Syntax.Property,this.key=t,this.computed=r,this.value=i,this.kind=e,this.method=o,this.shorthand=a};t.Property=Q;var Z=function(e,t,r,i){this.type=n.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:r,flags:i}};t.RegexLiteral=Z;var ee=function(e){this.type=n.Syntax.RestElement,this.argument=e};t.RestElement=ee;var te=function(e){this.type=n.Syntax.ReturnStatement,this.argument=e};t.ReturnStatement=te;var re=function(e){this.type=n.Syntax.Program,this.body=e,this.sourceType=\"script\"};t.Script=re;var ne=function(e){this.type=n.Syntax.SequenceExpression,this.expressions=e};t.SequenceExpression=ne;var ie=function(e){this.type=n.Syntax.SpreadElement,this.argument=e};t.SpreadElement=ie;var oe=function(e,t){this.type=n.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t};t.StaticMemberExpression=oe;var ae=function(){this.type=n.Syntax.Super};t.Super=ae;var se=function(e,t){this.type=n.Syntax.SwitchCase,this.test=e,this.consequent=t};t.SwitchCase=se;var ue=function(e,t){this.type=n.Syntax.SwitchStatement,this.discriminant=e,this.cases=t};t.SwitchStatement=ue;var le=function(e,t){this.type=n.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t};t.TaggedTemplateExpression=le;var ce=function(e,t){this.type=n.Syntax.TemplateElement,this.value=e,this.tail=t};t.TemplateElement=ce;var he=function(e,t){this.type=n.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t};t.TemplateLiteral=he;var pe=function(){this.type=n.Syntax.ThisExpression};t.ThisExpression=pe;var fe=function(e){this.type=n.Syntax.ThrowStatement,this.argument=e};t.ThrowStatement=fe;var de=function(e,t,r){this.type=n.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=r};t.TryStatement=de;var me=function(e,t){this.type=n.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0};t.UnaryExpression=me;var ye=function(e,t,r){this.type=n.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=r};t.UpdateExpression=ye;var ve=function(e,t){this.type=n.Syntax.VariableDeclaration,this.declarations=e,this.kind=t};t.VariableDeclaration=ve;var _e=function(e,t){this.type=n.Syntax.VariableDeclarator,this.id=e,this.init=t};t.VariableDeclarator=_e;var ge=function(e,t){this.type=n.Syntax.WhileStatement,this.test=e,this.body=t};t.WhileStatement=ge;var be=function(e,t){this.type=n.Syntax.WithStatement,this.object=e,this.body=t};t.WithStatement=be;var xe=function(e,t){this.type=n.Syntax.YieldExpression,this.argument=e,this.delegate=t};t.YieldExpression=xe},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(9),i=r(10),o=r(11),a=r(7),s=r(12),u=r(2),l=r(13),c=function(){function e(e,t,r){void 0===t&&(t={}),this.config={range:\"boolean\"==typeof t.range&&t.range,loc:\"boolean\"==typeof t.loc&&t.loc,source:null,tokens:\"boolean\"==typeof t.tokens&&t.tokens,comment:\"boolean\"==typeof t.comment&&t.comment,tolerant:\"boolean\"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=r,this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new s.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={\")\":0,\";\":0,\",\":0,\"=\":0,\"]\":0,\"||\":1,\"&&\":2,\"|\":3,\"^\":4,\"&\":5,\"==\":6,\"!=\":6,\"===\":6,\"!==\":6,\"<\":7,\">\":7,\"<=\":7,\">=\":7,\"<<\":8,\">>\":8,\">>>\":8,\"+\":9,\"-\":9,\"*\":11,\"/\":11,\"%\":11},this.lookahead={type:2,value:\"\",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}return e.prototype.throwError=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var i=Array.prototype.slice.call(arguments,1),o=e.replace(/%(\\d)/g,(function(e,t){return n.assert(t<i.length,\"Message reference must be in range\"),i[t]})),a=this.lastMarker.index,s=this.lastMarker.line,u=this.lastMarker.column+1;throw this.errorHandler.createError(a,s,u,o)},e.prototype.tolerateError=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var i=Array.prototype.slice.call(arguments,1),o=e.replace(/%(\\d)/g,(function(e,t){return n.assert(t<i.length,\"Message reference must be in range\"),i[t]})),a=this.lastMarker.index,s=this.scanner.lineNumber,u=this.lastMarker.column+1;this.errorHandler.tolerateError(a,s,u,o)},e.prototype.unexpectedTokenError=function(e,t){var r,n=t||o.Messages.UnexpectedToken;if(e?(t||(n=2===e.type?o.Messages.UnexpectedEOS:3===e.type?o.Messages.UnexpectedIdentifier:6===e.type?o.Messages.UnexpectedNumber:8===e.type?o.Messages.UnexpectedString:10===e.type?o.Messages.UnexpectedTemplate:o.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?n=o.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(n=o.Messages.StrictReservedWord))),r=e.value):r=\"ILLEGAL\",n=n.replace(\"%0\",r),e&&\"number\"==typeof e.lineNumber){var i=e.start,a=e.lineNumber,s=this.lastMarker.index-this.lastMarker.column,u=e.start-s+1;return this.errorHandler.createError(i,a,u,n)}return i=this.lastMarker.index,a=this.lastMarker.line,u=this.lastMarker.column+1,this.errorHandler.createError(i,a,u,n)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t))},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var r=e[t],n=void 0;n={type:r.multiLine?\"BlockComment\":\"LineComment\",value:this.scanner.source.slice(r.slice[0],r.slice[1])},this.config.range&&(n.range=r.range),this.config.loc&&(n.loc=r.loc);var i={start:{line:r.loc.start.line,column:r.loc.start.column,offset:r.range[0]},end:{line:r.loc.end.line,column:r.loc.end.column,offset:r.range[1]}};this.delegate(n,i)}}else this.scanner.scanComments()},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:l.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var r=e.pattern,n=e.flags;t.regex={pattern:r,flags:n}}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e,t){void 0===t&&(t=0);var r=e.start-e.lineStart,n=e.lineNumber;return r<0&&(r+=t,n--),{index:e.start,line:n,column:r}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var r={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,r)}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&\",\"===e.value?this.nextToken():7===e.type&&\";\"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,o.Messages.UnexpectedToken)}else this.expect(\",\")},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return!1;var e=this.lookahead.value;return\"=\"===e||\"*=\"===e||\"**=\"===e||\"/=\"===e||\"%=\"===e||\"+=\"===e||\"-=\"===e||\"<<=\"===e||\">>=\"===e||\">>>=\"===e||\"&=\"===e||\"^=\"===e||\"|=\"===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,r=this.context.isAssignmentTarget,n=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=r,this.context.firstCoverInitializedNameError=n,i},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,r=this.context.isAssignmentTarget,n=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&r,this.context.firstCoverInitializedNameError=n||this.context.firstCoverInitializedNameError,i},e.prototype.consumeSemicolon=function(){this.match(\";\")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match(\"}\")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column)},e.prototype.parsePrimaryExpression=function(){var e,t,r,n=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&\"await\"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(n,new a.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,o.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.Literal(t.value,r));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.Literal(\"true\"===t.value,r));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.Literal(null,r));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case\"(\":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case\"[\":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case\"{\":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case\"/\":case\"/=\":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.RegexLiteral(t.regex,r,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken())}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword(\"yield\")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword(\"let\")?e=this.finalize(n,new a.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword(\"function\")?e=this.parseFunctionExpression():this.matchKeyword(\"this\")?(this.nextToken(),e=this.finalize(n,new a.ThisExpression)):e=this.matchKeyword(\"class\")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken())}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect(\"...\");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new a.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect(\"[\");!this.match(\"]\");)if(this.match(\",\"))this.nextToken(),t.push(null);else if(this.match(\"...\")){var r=this.parseSpreadElement();this.match(\"]\")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(\",\")),t.push(r)}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match(\"]\")||this.expect(\",\");return this.expect(\"]\"),this.finalize(e,new a.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,r=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var n=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=r,n},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters(),n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,r=this.context.await;this.context.allowYield=!1,this.context.await=!0;var n=this.parseFormalParameters(),i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.context.await=r,this.finalize(e,new a.AsyncFunctionExpression(null,n.params,i))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),r=this.nextToken();switch(r.type){case 8:case 6:this.context.strict&&r.octal&&this.tolerateUnexpectedToken(r,o.Messages.StrictOctalLiteral);var n=this.getTokenRaw(r);e=this.finalize(t,new a.Literal(r.value,n));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new a.Identifier(r.value));break;case 7:\"[\"===r.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect(\"]\")):e=this.throwUnexpectedToken(r);break;default:e=this.throwUnexpectedToken(r)}return e},e.prototype.isPropertyKey=function(e,t){return e.type===u.Syntax.Identifier&&e.name===t||e.type===u.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,r=this.createNode(),n=this.lookahead,i=null,s=null,u=!1,l=!1,c=!1,h=!1;if(3===n.type){var p=n.value;this.nextToken(),u=this.match(\"[\"),i=(h=!(this.hasLineTerminator||\"async\"!==p||this.match(\":\")||this.match(\"(\")||this.match(\"*\")||this.match(\",\")))?this.parseObjectPropertyKey():this.finalize(r,new a.Identifier(p))}else this.match(\"*\")?this.nextToken():(u=this.match(\"[\"),i=this.parseObjectPropertyKey());var f=this.qualifiedPropertyName(this.lookahead);if(3===n.type&&!h&&\"get\"===n.value&&f)t=\"get\",u=this.match(\"[\"),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,s=this.parseGetterMethod();else if(3===n.type&&!h&&\"set\"===n.value&&f)t=\"set\",u=this.match(\"[\"),i=this.parseObjectPropertyKey(),s=this.parseSetterMethod();else if(7===n.type&&\"*\"===n.value&&f)t=\"init\",u=this.match(\"[\"),i=this.parseObjectPropertyKey(),s=this.parseGeneratorMethod(),l=!0;else if(i||this.throwUnexpectedToken(this.lookahead),t=\"init\",this.match(\":\")&&!h)!u&&this.isPropertyKey(i,\"__proto__\")&&(e.value&&this.tolerateError(o.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),s=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match(\"(\"))s=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0;else if(3===n.type)if(p=this.finalize(r,new a.Identifier(n.value)),this.match(\"=\")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),c=!0;var d=this.isolateCoverGrammar(this.parseAssignmentExpression);s=this.finalize(r,new a.AssignmentPattern(p,d))}else c=!0,s=p;else this.throwUnexpectedToken(this.nextToken());return this.finalize(r,new a.Property(t,i,u,s,l,c))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect(\"{\");for(var t=[],r={value:!1};!this.match(\"}\");)t.push(this.parseObjectProperty(r)),this.match(\"}\")||this.expectCommaSeparator();return this.expect(\"}\"),this.finalize(e,new a.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){n.assert(this.lookahead.head,\"Template literal must start with a template head\");var e=this.createNode(),t=this.nextToken(),r=t.value,i=t.cooked;return this.finalize(e,new a.TemplateElement({raw:r,cooked:i},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),r=t.value,n=t.cooked;return this.finalize(e,new a.TemplateElement({raw:r,cooked:n},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],r=[],n=this.parseTemplateHead();for(r.push(n);!n.tail;)t.push(this.parseExpression()),n=this.parseTemplateElement(),r.push(n);return this.finalize(e,new a.TemplateLiteral(r,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case u.Syntax.Identifier:case u.Syntax.MemberExpression:case u.Syntax.RestElement:case u.Syntax.AssignmentPattern:break;case u.Syntax.SpreadElement:e.type=u.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case u.Syntax.ArrayExpression:e.type=u.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case u.Syntax.ObjectExpression:for(e.type=u.Syntax.ObjectPattern,t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case u.Syntax.AssignmentExpression:e.type=u.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left)}},e.prototype.parseGroupExpression=function(){var e;if(this.expect(\"(\"),this.match(\")\"))this.nextToken(),this.match(\"=>\")||this.expect(\"=>\"),e={type:\"ArrowParameterPlaceHolder\",params:[],async:!1};else{var t=this.lookahead,r=[];if(this.match(\"...\"))e=this.parseRestElement(r),this.expect(\")\"),this.match(\"=>\")||this.expect(\"=>\"),e={type:\"ArrowParameterPlaceHolder\",params:[e],async:!1};else{var n=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(\",\")){var i=[];for(this.context.isAssignmentTarget=!1,i.push(e);2!==this.lookahead.type&&this.match(\",\");){if(this.nextToken(),this.match(\")\")){this.nextToken();for(var o=0;o<i.length;o++)this.reinterpretExpressionAsPattern(i[o]);n=!0,e={type:\"ArrowParameterPlaceHolder\",params:i,async:!1}}else if(this.match(\"...\")){for(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),i.push(this.parseRestElement(r)),this.expect(\")\"),this.match(\"=>\")||this.expect(\"=>\"),this.context.isBindingElement=!1,o=0;o<i.length;o++)this.reinterpretExpressionAsPattern(i[o]);n=!0,e={type:\"ArrowParameterPlaceHolder\",params:i,async:!1}}else i.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(n)break}n||(e=this.finalize(this.startNode(t),new a.SequenceExpression(i)))}if(!n){if(this.expect(\")\"),this.match(\"=>\")&&(e.type===u.Syntax.Identifier&&\"yield\"===e.name&&(n=!0,e={type:\"ArrowParameterPlaceHolder\",params:[e],async:!1}),!n)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===u.Syntax.SequenceExpression)for(o=0;o<e.expressions.length;o++)this.reinterpretExpressionAsPattern(e.expressions[o]);else this.reinterpretExpressionAsPattern(e);e={type:\"ArrowParameterPlaceHolder\",params:e.type===u.Syntax.SequenceExpression?e.expressions:[e],async:!1}}this.context.isBindingElement=!1}}}return e},e.prototype.parseArguments=function(){this.expect(\"(\");var e=[];if(!this.match(\")\"))for(;;){var t=this.match(\"...\")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(\")\"))break;if(this.expectCommaSeparator(),this.match(\")\"))break}return this.expect(\")\"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new a.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),r=this.parseIdentifierName();if(n.assert(\"new\"===r.name,\"New expression must start with `new`\"),this.match(\".\"))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&\"target\"===this.lookahead.value){var i=this.parseIdentifierName();e=new a.MetaProperty(r,i)}else this.throwUnexpectedToken(this.lookahead);else{var o=this.isolateCoverGrammar(this.parseLeftHandSideExpression),s=this.match(\"(\")?this.parseArguments():[];e=new a.NewExpression(o,s),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect(\"(\");var e=[];if(!this.match(\")\"))for(;;){var t=this.match(\"...\")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(\")\"))break;if(this.expectCommaSeparator(),this.match(\")\"))break}return this.expect(\")\"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,r=this.matchContextualKeyword(\"async\"),n=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword(\"super\")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new a.Super),this.match(\"(\")||this.match(\".\")||this.match(\"[\")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword(\"new\")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(\".\")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(\".\");var i=this.parseIdentifierName();e=this.finalize(this.startNode(t),new a.StaticMemberExpression(e,i))}else if(this.match(\"(\")){var o=r&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var s=o?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new a.CallExpression(e,s)),o&&this.match(\"=>\")){for(var u=0;u<s.length;++u)this.reinterpretExpressionAsPattern(s[u]);e={type:\"ArrowParameterPlaceHolder\",params:s,async:!0}}}else if(this.match(\"[\"))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(\"[\"),i=this.isolateCoverGrammar(this.parseExpression),this.expect(\"]\"),e=this.finalize(this.startNode(t),new a.ComputedMemberExpression(e,i));else{if(10!==this.lookahead.type||!this.lookahead.head)break;var l=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new a.TaggedTemplateExpression(e,l))}return this.context.allowIn=n,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword(\"super\"),this.match(\"[\")||this.match(\".\")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new a.Super)},e.prototype.parseLeftHandSideExpression=function(){n.assert(this.context.allowIn,\"callee of new expression always allow in keyword.\");for(var e=this.startNode(this.lookahead),t=this.matchKeyword(\"super\")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword(\"new\")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(\"[\")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(\"[\");var r=this.isolateCoverGrammar(this.parseExpression);this.expect(\"]\"),t=this.finalize(e,new a.ComputedMemberExpression(t,r))}else if(this.match(\".\"))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(\".\"),r=this.parseIdentifierName(),t=this.finalize(e,new a.StaticMemberExpression(t,r));else{if(10!==this.lookahead.type||!this.lookahead.head)break;var i=this.parseTemplateLiteral();t=this.finalize(e,new a.TaggedTemplateExpression(t,i))}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match(\"++\")||this.match(\"--\")){var r=this.startNode(t),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(o.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(o.Messages.InvalidLHSInAssignment);var i=!0;e=this.finalize(r,new a.UpdateExpression(n.value,e,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match(\"++\")||this.match(\"--\"))){this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(o.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(o.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var s=this.nextToken().value;i=!1,e=this.finalize(this.startNode(t),new a.UpdateExpression(s,e,i))}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new a.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match(\"+\")||this.match(\"-\")||this.match(\"~\")||this.match(\"!\")||this.matchKeyword(\"delete\")||this.matchKeyword(\"void\")||this.matchKeyword(\"typeof\")){var t=this.startNode(this.lookahead),r=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new a.UnaryExpression(r.value,e)),this.context.strict&&\"delete\"===e.operator&&e.argument.type===u.Syntax.Identifier&&this.tolerateError(o.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else e=this.context.await&&this.matchContextualKeyword(\"await\")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==u.Syntax.UnaryExpression&&this.match(\"**\")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var r=t,n=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new a.BinaryExpression(\"**\",r,n))}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&(\"instanceof\"===t||this.context.allowIn&&\"in\"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),r=this.lookahead,n=this.binaryPrecedence(r);if(n>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var i=[e,this.lookahead],o=t,s=this.isolateCoverGrammar(this.parseExponentiationExpression),u=[o,r.value,s],l=[n];!((n=this.binaryPrecedence(this.lookahead))<=0);){for(;u.length>2&&n<=l[l.length-1];){s=u.pop();var c=u.pop();l.pop(),o=u.pop(),i.pop();var h=this.startNode(i[i.length-1]);u.push(this.finalize(h,new a.BinaryExpression(c,o,s)))}u.push(this.nextToken().value),l.push(n),i.push(this.lookahead),u.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var p=u.length-1;t=u[p];for(var f=i.pop();p>1;){var d=i.pop(),m=f&&f.lineStart;h=this.startNode(d,m),c=u[p-1],t=this.finalize(h,new a.BinaryExpression(c,u[p-2],t)),p-=2,f=d}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match(\"?\")){this.nextToken();var r=this.context.allowIn;this.context.allowIn=!0;var n=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=r,this.expect(\":\");var i=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new a.ConditionalExpression(t,n,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case u.Syntax.Identifier:this.validateParam(e,t,t.name);break;case u.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case u.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case u.Syntax.ArrayPattern:for(var r=0;r<t.elements.length;r++)null!==t.elements[r]&&this.checkPatternParam(e,t.elements[r]);break;case u.Syntax.ObjectPattern:for(r=0;r<t.properties.length;r++)this.checkPatternParam(e,t.properties[r].value)}e.simple=e.simple&&t instanceof a.Identifier},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,r=[e],n=!1;switch(e.type){case u.Syntax.Identifier:break;case\"ArrowParameterPlaceHolder\":r=e.params,n=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var i=0;i<r.length;++i)(a=r[i]).type===u.Syntax.AssignmentPattern?a.right.type===u.Syntax.YieldExpression&&(a.right.argument&&this.throwUnexpectedToken(this.lookahead),a.right.type=u.Syntax.Identifier,a.right.name=\"yield\",delete a.right.argument,delete a.right.delegate):n&&a.type===u.Syntax.Identifier&&\"await\"===a.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,a),r[i]=a;if(this.context.strict||!this.context.allowYield)for(i=0;i<r.length;++i){var a;(a=r[i]).type===u.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(t.message===o.Messages.StrictParamDupe){var s=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(s,t.message)}return{simple:t.simple,params:r,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword(\"yield\"))e=this.parseYieldExpression();else{var t=this.lookahead,r=t;if(e=this.parseConditionalExpression(),3===r.type&&r.lineNumber===this.lookahead.lineNumber&&\"async\"===r.value&&(3===this.lookahead.type||this.matchKeyword(\"yield\"))){var n=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(n),e={type:\"ArrowParameterPlaceHolder\",params:[n],async:!0}}if(\"ArrowParameterPlaceHolder\"===e.type||this.match(\"=>\")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var i=e.async,s=this.reinterpretAsCoverFormalsList(e);if(s){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var l=this.context.strict,c=this.context.allowStrictDirective;this.context.allowStrictDirective=s.simple;var h=this.context.allowYield,p=this.context.await;this.context.allowYield=!0,this.context.await=i;var f=this.startNode(t);this.expect(\"=>\");var d=void 0;if(this.match(\"{\")){var m=this.context.allowIn;this.context.allowIn=!0,d=this.parseFunctionSourceElements(),this.context.allowIn=m}else d=this.isolateCoverGrammar(this.parseAssignmentExpression);var y=d.type!==u.Syntax.BlockStatement;this.context.strict&&s.firstRestricted&&this.throwUnexpectedToken(s.firstRestricted,s.message),this.context.strict&&s.stricted&&this.tolerateUnexpectedToken(s.stricted,s.message),e=i?this.finalize(f,new a.AsyncArrowFunctionExpression(s.params,d,y)):this.finalize(f,new a.ArrowFunctionExpression(s.params,d,y)),this.context.strict=l,this.context.allowStrictDirective=c,this.context.allowYield=h,this.context.await=p}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(o.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===u.Syntax.Identifier){var v=e;this.scanner.isRestrictedWord(v.name)&&this.tolerateUnexpectedToken(r,o.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(v.name)&&this.tolerateUnexpectedToken(r,o.Messages.StrictReservedWord)}this.match(\"=\")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var _=(r=this.nextToken()).value,g=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new a.AssignmentExpression(_,e,g)),this.context.firstCoverInitializedNameError=null}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(\",\")){var r=[];for(r.push(t);2!==this.lookahead.type&&this.match(\",\");)this.nextToken(),r.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new a.SequenceExpression(r))}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case\"export\":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,o.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case\"import\":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,o.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case\"const\":e=this.parseLexicalDeclaration({inFor:!1});break;case\"function\":e=this.parseFunctionDeclaration();break;case\"class\":e=this.parseClassDeclaration();break;case\"let\":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement()}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect(\"{\");for(var t=[];!this.match(\"}\");)t.push(this.parseStatementListItem());return this.expect(\"}\"),this.finalize(e,new a.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var r=this.createNode(),n=this.parsePattern([],e);this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(o.Messages.StrictVarName);var i=null;return\"const\"===e?this.matchKeyword(\"in\")||this.matchContextualKeyword(\"of\")||(this.match(\"=\")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(o.Messages.DeclarationMissingInitializer,\"const\")):(!t.inFor&&n.type!==u.Syntax.Identifier||this.match(\"=\"))&&(this.expect(\"=\"),i=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(r,new a.VariableDeclarator(n,i))},e.prototype.parseBindingList=function(e,t){for(var r=[this.parseLexicalBinding(e,t)];this.match(\",\");)this.nextToken(),r.push(this.parseLexicalBinding(e,t));return r},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&\"[\"===t.value||7===t.type&&\"{\"===t.value||4===t.type&&\"let\"===t.value||4===t.type&&\"yield\"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),r=this.nextToken().value;n.assert(\"let\"===r||\"const\"===r,\"Lexical declaration must be either let or const\");var i=this.parseBindingList(r,e);return this.consumeSemicolon(),this.finalize(t,new a.VariableDeclaration(i,r))},e.prototype.parseBindingRestElement=function(e,t){var r=this.createNode();this.expect(\"...\");var n=this.parsePattern(e,t);return this.finalize(r,new a.RestElement(n))},e.prototype.parseArrayPattern=function(e,t){var r=this.createNode();this.expect(\"[\");for(var n=[];!this.match(\"]\");)if(this.match(\",\"))this.nextToken(),n.push(null);else{if(this.match(\"...\")){n.push(this.parseBindingRestElement(e,t));break}n.push(this.parsePatternWithDefault(e,t)),this.match(\"]\")||this.expect(\",\")}return this.expect(\"]\"),this.finalize(r,new a.ArrayPattern(n))},e.prototype.parsePropertyPattern=function(e,t){var r,n,i=this.createNode(),o=!1,s=!1;if(3===this.lookahead.type){var u=this.lookahead;r=this.parseVariableIdentifier();var l=this.finalize(i,new a.Identifier(u.value));if(this.match(\"=\")){e.push(u),s=!0,this.nextToken();var c=this.parseAssignmentExpression();n=this.finalize(this.startNode(u),new a.AssignmentPattern(l,c))}else this.match(\":\")?(this.expect(\":\"),n=this.parsePatternWithDefault(e,t)):(e.push(u),s=!0,n=l)}else o=this.match(\"[\"),r=this.parseObjectPropertyKey(),this.expect(\":\"),n=this.parsePatternWithDefault(e,t);return this.finalize(i,new a.Property(\"init\",r,o,n,!1,s))},e.prototype.parseObjectPattern=function(e,t){var r=this.createNode(),n=[];for(this.expect(\"{\");!this.match(\"}\");)n.push(this.parsePropertyPattern(e,t)),this.match(\"}\")||this.expect(\",\");return this.expect(\"}\"),this.finalize(r,new a.ObjectPattern(n))},e.prototype.parsePattern=function(e,t){var r;return this.match(\"[\")?r=this.parseArrayPattern(e,t):this.match(\"{\")?r=this.parseObjectPattern(e,t):(!this.matchKeyword(\"let\")||\"const\"!==t&&\"let\"!==t||this.tolerateUnexpectedToken(this.lookahead,o.Messages.LetInLexicalBinding),e.push(this.lookahead),r=this.parseVariableIdentifier(t)),r},e.prototype.parsePatternWithDefault=function(e,t){var r=this.lookahead,n=this.parsePattern(e,t);if(this.match(\"=\")){this.nextToken();var i=this.context.allowYield;this.context.allowYield=!0;var o=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=i,n=this.finalize(this.startNode(r),new a.AssignmentPattern(n,o))}return n},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),r=this.nextToken();return 4===r.type&&\"yield\"===r.value?this.context.strict?this.tolerateUnexpectedToken(r,o.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(r):3!==r.type?this.context.strict&&4===r.type&&this.scanner.isStrictModeReservedWord(r.value)?this.tolerateUnexpectedToken(r,o.Messages.StrictReservedWord):(this.context.strict||\"let\"!==r.value||\"var\"!==e)&&this.throwUnexpectedToken(r):(this.context.isModule||this.context.await)&&3===r.type&&\"await\"===r.value&&this.tolerateUnexpectedToken(r),this.finalize(t,new a.Identifier(r.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),r=this.parsePattern([],\"var\");this.context.strict&&r.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(o.Messages.StrictVarName);var n=null;return this.match(\"=\")?(this.nextToken(),n=this.isolateCoverGrammar(this.parseAssignmentExpression)):r.type===u.Syntax.Identifier||e.inFor||this.expect(\"=\"),this.finalize(t,new a.VariableDeclarator(r,n))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},r=[];for(r.push(this.parseVariableDeclaration(t));this.match(\",\");)this.nextToken(),r.push(this.parseVariableDeclaration(t));return r},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword(\"var\");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new a.VariableDeclaration(t,\"var\"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(\";\"),this.finalize(e,new a.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword(\"function\")&&this.tolerateError(o.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),r=null;this.expectKeyword(\"if\"),this.expect(\"(\");var n=this.parseExpression();return!this.match(\")\")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(\")\"),e=this.parseIfClause(),this.matchKeyword(\"else\")&&(this.nextToken(),r=this.parseIfClause())),this.finalize(t,new a.IfStatement(n,e,r))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword(\"do\");var t=this.context.inIteration;this.context.inIteration=!0;var r=this.parseStatement();this.context.inIteration=t,this.expectKeyword(\"while\"),this.expect(\"(\");var n=this.parseExpression();return!this.match(\")\")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(\")\"),this.match(\";\")&&this.nextToken()),this.finalize(e,new a.DoWhileStatement(r,n))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword(\"while\"),this.expect(\"(\");var r=this.parseExpression();if(!this.match(\")\")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement);else{this.expect(\")\");var n=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=n}return this.finalize(t,new a.WhileStatement(r,e))},e.prototype.parseForStatement=function(){var e,t,r,n=null,i=null,s=null,l=!0,c=this.createNode();if(this.expectKeyword(\"for\"),this.expect(\"(\"),this.match(\";\"))this.nextToken();else if(this.matchKeyword(\"var\")){n=this.createNode(),this.nextToken();var h=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=h,1===p.length&&this.matchKeyword(\"in\")){var f=p[0];f.init&&(f.id.type===u.Syntax.ArrayPattern||f.id.type===u.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(o.Messages.ForInOfLoopInitializer,\"for-in\"),n=this.finalize(n,new a.VariableDeclaration(p,\"var\")),this.nextToken(),e=n,t=this.parseExpression(),n=null}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword(\"of\")?(n=this.finalize(n,new a.VariableDeclaration(p,\"var\")),this.nextToken(),e=n,t=this.parseAssignmentExpression(),n=null,l=!1):(n=this.finalize(n,new a.VariableDeclaration(p,\"var\")),this.expect(\";\"))}else if(this.matchKeyword(\"const\")||this.matchKeyword(\"let\")){n=this.createNode();var d=this.nextToken().value;this.context.strict||\"in\"!==this.lookahead.value?(h=this.context.allowIn,this.context.allowIn=!1,p=this.parseBindingList(d,{inFor:!0}),this.context.allowIn=h,1===p.length&&null===p[0].init&&this.matchKeyword(\"in\")?(n=this.finalize(n,new a.VariableDeclaration(p,d)),this.nextToken(),e=n,t=this.parseExpression(),n=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword(\"of\")?(n=this.finalize(n,new a.VariableDeclaration(p,d)),this.nextToken(),e=n,t=this.parseAssignmentExpression(),n=null,l=!1):(this.consumeSemicolon(),n=this.finalize(n,new a.VariableDeclaration(p,d)))):(n=this.finalize(n,new a.Identifier(d)),this.nextToken(),e=n,t=this.parseExpression(),n=null)}else{var m=this.lookahead;if(h=this.context.allowIn,this.context.allowIn=!1,n=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=h,this.matchKeyword(\"in\"))this.context.isAssignmentTarget&&n.type!==u.Syntax.AssignmentExpression||this.tolerateError(o.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(n),e=n,t=this.parseExpression(),n=null;else if(this.matchContextualKeyword(\"of\"))this.context.isAssignmentTarget&&n.type!==u.Syntax.AssignmentExpression||this.tolerateError(o.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(n),e=n,t=this.parseAssignmentExpression(),n=null,l=!1;else{if(this.match(\",\")){for(var y=[n];this.match(\",\");)this.nextToken(),y.push(this.isolateCoverGrammar(this.parseAssignmentExpression));n=this.finalize(this.startNode(m),new a.SequenceExpression(y))}this.expect(\";\")}}if(void 0===e&&(this.match(\";\")||(i=this.parseExpression()),this.expect(\";\"),this.match(\")\")||(s=this.parseExpression())),!this.match(\")\")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),r=this.finalize(this.createNode(),new a.EmptyStatement);else{this.expect(\")\");var v=this.context.inIteration;this.context.inIteration=!0,r=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=v}return void 0===e?this.finalize(c,new a.ForStatement(n,i,s,r)):l?this.finalize(c,new a.ForInStatement(e,t,r)):this.finalize(c,new a.ForOfStatement(e,t,r))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword(\"continue\");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var r=this.parseVariableIdentifier();t=r;var n=\"$\"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,n)||this.throwError(o.Messages.UnknownLabel,r.name)}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(o.Messages.IllegalContinue),this.finalize(e,new a.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword(\"break\");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var r=this.parseVariableIdentifier(),n=\"$\"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,n)||this.throwError(o.Messages.UnknownLabel,r.name),t=r}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(o.Messages.IllegalBreak),this.finalize(e,new a.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(o.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword(\"return\");var t=(this.match(\";\")||this.match(\"}\")||this.hasLineTerminator||2===this.lookahead.type)&&8!==this.lookahead.type&&10!==this.lookahead.type?null:this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(o.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword(\"with\"),this.expect(\"(\");var r=this.parseExpression();return!this.match(\")\")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(\")\"),e=this.parseStatement()),this.finalize(t,new a.WithStatement(r,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword(\"default\")?(this.nextToken(),e=null):(this.expectKeyword(\"case\"),e=this.parseExpression()),this.expect(\":\");for(var r=[];!(this.match(\"}\")||this.matchKeyword(\"default\")||this.matchKeyword(\"case\"));)r.push(this.parseStatementListItem());return this.finalize(t,new a.SwitchCase(e,r))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword(\"switch\"),this.expect(\"(\");var t=this.parseExpression();this.expect(\")\");var r=this.context.inSwitch;this.context.inSwitch=!0;var n=[],i=!1;for(this.expect(\"{\");!this.match(\"}\");){var s=this.parseSwitchCase();null===s.test&&(i&&this.throwError(o.Messages.MultipleDefaultsInSwitch),i=!0),n.push(s)}return this.expect(\"}\"),this.context.inSwitch=r,this.finalize(e,new a.SwitchStatement(t,n))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),r=this.parseExpression();if(r.type===u.Syntax.Identifier&&this.match(\":\")){this.nextToken();var n=r,i=\"$\"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)&&this.throwError(o.Messages.Redeclaration,\"Label\",n.name),this.context.labelSet[i]=!0;var s=void 0;if(this.matchKeyword(\"class\"))this.tolerateUnexpectedToken(this.lookahead),s=this.parseClassDeclaration();else if(this.matchKeyword(\"function\")){var l=this.lookahead,c=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(l,o.Messages.StrictFunction):c.generator&&this.tolerateUnexpectedToken(l,o.Messages.GeneratorInLegacyContext),s=c}else s=this.parseStatement();delete this.context.labelSet[i],e=new a.LabeledStatement(n,s)}else this.consumeSemicolon(),e=new a.ExpressionStatement(r);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword(\"throw\"),this.hasLineTerminator&&this.throwError(o.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword(\"catch\"),this.expect(\"(\"),this.match(\")\")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],r=this.parsePattern(t),n={},i=0;i<t.length;i++){var s=\"$\"+t[i].value;Object.prototype.hasOwnProperty.call(n,s)&&this.tolerateError(o.Messages.DuplicateBinding,t[i].value),n[s]=!0}this.context.strict&&r.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(o.Messages.StrictCatchVariable),this.expect(\")\");var l=this.parseBlock();return this.finalize(e,new a.CatchClause(r,l))},e.prototype.parseFinallyClause=function(){return this.expectKeyword(\"finally\"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword(\"try\");var t=this.parseBlock(),r=this.matchKeyword(\"catch\")?this.parseCatchClause():null,n=this.matchKeyword(\"finally\")?this.parseFinallyClause():null;return r||n||this.throwError(o.Messages.NoCatchOrFinally),this.finalize(e,new a.TryStatement(t,r,n))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword(\"debugger\"),this.consumeSemicolon(),this.finalize(e,new a.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e=\"{\"===t?this.parseBlock():\"(\"===t?this.parseExpressionStatement():\";\"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case\"break\":e=this.parseBreakStatement();break;case\"continue\":e=this.parseContinueStatement();break;case\"debugger\":e=this.parseDebuggerStatement();break;case\"do\":e=this.parseDoWhileStatement();break;case\"for\":e=this.parseForStatement();break;case\"function\":e=this.parseFunctionDeclaration();break;case\"if\":e=this.parseIfStatement();break;case\"return\":e=this.parseReturnStatement();break;case\"switch\":e=this.parseSwitchStatement();break;case\"throw\":e=this.parseThrowStatement();break;case\"try\":e=this.parseTryStatement();break;case\"var\":e=this.parseVariableStatement();break;case\"while\":e=this.parseWhileStatement();break;case\"with\":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement()}break;default:e=this.throwUnexpectedToken(this.lookahead)}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect(\"{\");var t=this.parseDirectivePrologues(),r=this.context.labelSet,n=this.context.inIteration,i=this.context.inSwitch,o=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match(\"}\");)t.push(this.parseStatementListItem());return this.expect(\"}\"),this.context.labelSet=r,this.context.inIteration=n,this.context.inSwitch=i,this.context.inFunctionBody=o,this.finalize(e,new a.BlockStatement(t))},e.prototype.validateParam=function(e,t,r){var n=\"$\"+r;this.context.strict?(this.scanner.isRestrictedWord(r)&&(e.stricted=t,e.message=o.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,n)&&(e.stricted=t,e.message=o.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(r)?(e.firstRestricted=t,e.message=o.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(r)?(e.firstRestricted=t,e.message=o.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,n)&&(e.stricted=t,e.message=o.Messages.StrictParamDupe)),\"function\"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,n,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[n]=!0},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect(\"...\");var r=this.parsePattern(e);return this.match(\"=\")&&this.throwError(o.Messages.DefaultRestParameter),this.match(\")\")||this.throwError(o.Messages.ParameterAfterRestParameter),this.finalize(t,new a.RestElement(r))},e.prototype.parseFormalParameter=function(e){for(var t=[],r=this.match(\"...\")?this.parseRestElement(t):this.parsePatternWithDefault(t),n=0;n<t.length;n++)this.validateParam(e,t[n],t[n].value);e.simple=e.simple&&r instanceof a.Identifier,e.params.push(r)},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect(\"(\"),!this.match(\")\"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(\")\"))&&(this.expect(\",\"),!this.match(\")\")););return this.expect(\")\"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword(\"async\");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var r=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===r.lineNumber&&4===r.type&&\"function\"===r.value}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),r=this.matchContextualKeyword(\"async\");r&&this.nextToken(),this.expectKeyword(\"function\");var n,i=!r&&this.match(\"*\");i&&this.nextToken();var s=null,u=null;if(!e||!this.match(\"(\")){var l=this.lookahead;s=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(l.value)&&this.tolerateUnexpectedToken(l,o.Messages.StrictFunctionName):this.scanner.isRestrictedWord(l.value)?(u=l,n=o.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(l.value)&&(u=l,n=o.Messages.StrictReservedWord)}var c=this.context.await,h=this.context.allowYield;this.context.await=r,this.context.allowYield=!i;var p=this.parseFormalParameters(u),f=p.params,d=p.stricted;u=p.firstRestricted,p.message&&(n=p.message);var m=this.context.strict,y=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var v=this.parseFunctionSourceElements();return this.context.strict&&u&&this.throwUnexpectedToken(u,n),this.context.strict&&d&&this.tolerateUnexpectedToken(d,n),this.context.strict=m,this.context.allowStrictDirective=y,this.context.await=c,this.context.allowYield=h,r?this.finalize(t,new a.AsyncFunctionDeclaration(s,f,v)):this.finalize(t,new a.FunctionDeclaration(s,f,v,i))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword(\"async\");t&&this.nextToken(),this.expectKeyword(\"function\");var r,n=!t&&this.match(\"*\");n&&this.nextToken();var i,s=null,u=this.context.await,l=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!n,!this.match(\"(\")){var c=this.lookahead;s=this.context.strict||n||!this.matchKeyword(\"yield\")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,o.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(i=c,r=o.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(i=c,r=o.Messages.StrictReservedWord)}var h=this.parseFormalParameters(i),p=h.params,f=h.stricted;i=h.firstRestricted,h.message&&(r=h.message);var d=this.context.strict,m=this.context.allowStrictDirective;this.context.allowStrictDirective=h.simple;var y=this.parseFunctionSourceElements();return this.context.strict&&i&&this.throwUnexpectedToken(i,r),this.context.strict&&f&&this.tolerateUnexpectedToken(f,r),this.context.strict=d,this.context.allowStrictDirective=m,this.context.await=u,this.context.allowYield=l,t?this.finalize(e,new a.AsyncFunctionExpression(s,p,y)):this.finalize(e,new a.FunctionExpression(s,p,y,n))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),r=this.parseExpression(),n=r.type===u.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,n?new a.Directive(r,n):new a.ExpressionStatement(r))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var r=this.lookahead;if(8!==r.type)break;var n=this.parseDirective();t.push(n);var i=n.directive;if(\"string\"!=typeof i)break;\"use strict\"===i?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,o.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(r,o.Messages.IllegalLanguageModeDirective)):!e&&r.octal&&(e=r)}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return!0;case 7:return\"[\"===e.value}return!1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters();r.params.length>0&&this.tolerateError(o.Messages.BadGetterArity);var n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters();1!==r.params.length?this.tolerateError(o.Messages.BadSetterArity):r.params[0]instanceof a.RestElement&&this.tolerateError(o.Messages.BadSetterRestParameter);var n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters();this.context.allowYield=!1;var n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e=\"[\"===t||\"(\"===t||\"{\"===t||\"+\"===t||\"-\"===t||\"!\"===t||\"~\"===t||\"++\"===t||\"--\"===t||\"/\"===t||\"/=\"===t;break;case 4:e=\"class\"===t||\"delete\"===t||\"function\"===t||\"let\"===t||\"new\"===t||\"super\"===t||\"this\"===t||\"typeof\"===t||\"void\"===t||\"yield\"===t}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword(\"yield\");var t=null,r=!1;if(!this.hasLineTerminator){var n=this.context.allowYield;this.context.allowYield=!1,(r=this.match(\"*\"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=n}return this.finalize(e,new a.YieldExpression(t,r))},e.prototype.parseClassElement=function(e){var t=this.lookahead,r=this.createNode(),n=\"\",i=null,s=null,u=!1,l=!1,c=!1,h=!1;if(this.match(\"*\"))this.nextToken();else if(u=this.match(\"[\"),\"static\"===(i=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match(\"*\"))&&(t=this.lookahead,c=!0,u=this.match(\"[\"),this.match(\"*\")?this.nextToken():i=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&\"async\"===t.value){var p=this.lookahead.value;\":\"!==p&&\"(\"!==p&&\"*\"!==p&&(h=!0,t=this.lookahead,i=this.parseObjectPropertyKey(),3===t.type&&\"constructor\"===t.value&&this.tolerateUnexpectedToken(t,o.Messages.ConstructorIsAsync))}var f=this.qualifiedPropertyName(this.lookahead);return 3===t.type?\"get\"===t.value&&f?(n=\"get\",u=this.match(\"[\"),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,s=this.parseGetterMethod()):\"set\"===t.value&&f&&(n=\"set\",u=this.match(\"[\"),i=this.parseObjectPropertyKey(),s=this.parseSetterMethod()):7===t.type&&\"*\"===t.value&&f&&(n=\"init\",u=this.match(\"[\"),i=this.parseObjectPropertyKey(),s=this.parseGeneratorMethod(),l=!0),!n&&i&&this.match(\"(\")&&(n=\"init\",s=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0),n||this.throwUnexpectedToken(this.lookahead),\"init\"===n&&(n=\"method\"),u||(c&&this.isPropertyKey(i,\"prototype\")&&this.throwUnexpectedToken(t,o.Messages.StaticPrototype),!c&&this.isPropertyKey(i,\"constructor\")&&((\"method\"!==n||!l||s&&s.generator)&&this.throwUnexpectedToken(t,o.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,o.Messages.DuplicateConstructor):e.value=!0,n=\"constructor\")),this.finalize(r,new a.MethodDefinition(i,u,s,n,c))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect(\"{\");!this.match(\"}\");)this.match(\";\")?this.nextToken():e.push(this.parseClassElement(t));return this.expect(\"}\"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new a.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),r=this.context.strict;this.context.strict=!0,this.expectKeyword(\"class\");var n=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),i=null;this.matchKeyword(\"extends\")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var o=this.parseClassBody();return this.context.strict=r,this.finalize(t,new a.ClassDeclaration(n,i,o))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword(\"class\");var r=3===this.lookahead.type?this.parseVariableIdentifier():null,n=null;this.matchKeyword(\"extends\")&&(this.nextToken(),n=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var i=this.parseClassBody();return this.context.strict=t,this.finalize(e,new a.ClassExpression(r,n,i))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0,this.scanner.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(o.Messages.InvalidModuleSpecifier);var t=this.nextToken(),r=this.getTokenRaw(t);return this.finalize(e,new a.Literal(t.value,r))},e.prototype.parseImportSpecifier=function(){var e,t,r=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword(\"as\")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword(\"as\")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(r,new a.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect(\"{\");for(var e=[];!this.match(\"}\");)e.push(this.parseImportSpecifier()),this.match(\"}\")||this.expect(\",\");return this.expect(\"}\"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new a.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect(\"*\"),this.matchContextualKeyword(\"as\")||this.throwError(o.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new a.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(o.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword(\"import\");var r=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else{if(this.match(\"{\")?r=r.concat(this.parseNamedImports()):this.match(\"*\")?r.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword(\"default\")?(r.push(this.parseImportDefaultSpecifier()),this.match(\",\")&&(this.nextToken(),this.match(\"*\")?r.push(this.parseImportNamespaceSpecifier()):this.match(\"{\")?r=r.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword(\"from\")){var n=this.lookahead.value?o.Messages.UnexpectedToken:o.Messages.MissingFromClause;this.throwError(n,this.lookahead.value)}this.nextToken(),e=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(t,new a.ImportDeclaration(r,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),r=t;return this.matchContextualKeyword(\"as\")&&(this.nextToken(),r=this.parseIdentifierName()),this.finalize(e,new a.ExportSpecifier(t,r))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(o.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword(\"export\"),this.matchKeyword(\"default\"))if(this.nextToken(),this.matchKeyword(\"function\")){var r=this.parseFunctionDeclaration(!0);e=this.finalize(t,new a.ExportDefaultDeclaration(r))}else this.matchKeyword(\"class\")?(r=this.parseClassDeclaration(!0),e=this.finalize(t,new a.ExportDefaultDeclaration(r))):this.matchContextualKeyword(\"async\")?(r=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression(),e=this.finalize(t,new a.ExportDefaultDeclaration(r))):(this.matchContextualKeyword(\"from\")&&this.throwError(o.Messages.UnexpectedToken,this.lookahead.value),r=this.match(\"{\")?this.parseObjectInitializer():this.match(\"[\")?this.parseArrayInitializer():this.parseAssignmentExpression(),this.consumeSemicolon(),e=this.finalize(t,new a.ExportDefaultDeclaration(r)));else if(this.match(\"*\")){if(this.nextToken(),!this.matchContextualKeyword(\"from\")){var n=this.lookahead.value?o.Messages.UnexpectedToken:o.Messages.MissingFromClause;this.throwError(n,this.lookahead.value)}this.nextToken();var i=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new a.ExportAllDeclaration(i))}else if(4===this.lookahead.type){switch(r=void 0,this.lookahead.value){case\"let\":case\"const\":r=this.parseLexicalDeclaration({inFor:!1});break;case\"var\":case\"class\":case\"function\":r=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}e=this.finalize(t,new a.ExportNamedDeclaration(r,[],null))}else if(this.matchAsyncFunction())r=this.parseFunctionDeclaration(),e=this.finalize(t,new a.ExportNamedDeclaration(r,[],null));else{var s=[],u=null,l=!1;for(this.expect(\"{\");!this.match(\"}\");)l=l||this.matchKeyword(\"default\"),s.push(this.parseExportSpecifier()),this.match(\"}\")||this.expect(\",\");this.expect(\"}\"),this.matchContextualKeyword(\"from\")?(this.nextToken(),u=this.parseModuleSpecifier(),this.consumeSemicolon()):l?(n=this.lookahead.value?o.Messages.UnexpectedToken:o.Messages.MissingFromClause,this.throwError(n,this.lookahead.value)):this.consumeSemicolon(),e=this.finalize(t,new a.ExportNamedDeclaration(null,s,u))}return e},e}();t.Parser=c},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.assert=function(e,t){if(!e)throw new Error(\"ASSERT: \"+t)}},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=function(){function e(){this.errors=[],this.tolerant=!1}return e.prototype.recordError=function(e){this.errors.push(e)},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e)},e.prototype.constructError=function(e,t){var r=new Error(e);try{throw r}catch(e){Object.create&&Object.defineProperty&&(r=Object.create(e),Object.defineProperty(r,\"column\",{value:t}))}return r},e.prototype.createError=function(e,t,r,n){var i=\"Line \"+t+\": \"+n,o=this.constructError(i,r);return o.index=e,o.lineNumber=t,o.description=n,o},e.prototype.throwError=function(e,t,r,n){throw this.createError(e,t,r,n)},e.prototype.tolerateError=function(e,t,r,n){var i=this.createError(e,t,r,n);if(!this.tolerant)throw i;this.recordError(i)},e}();t.ErrorHandler=r},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Messages={BadGetterArity:\"Getter must not have any formal parameters\",BadSetterArity:\"Setter must have exactly one formal parameter\",BadSetterRestParameter:\"Setter function argument must not be a rest parameter\",ConstructorIsAsync:\"Class constructor may not be an async method\",ConstructorSpecialMethod:\"Class constructor may not be an accessor\",DeclarationMissingInitializer:\"Missing initializer in %0 declaration\",DefaultRestParameter:\"Unexpected token =\",DuplicateBinding:\"Duplicate binding %0\",DuplicateConstructor:\"A class may only have one constructor\",DuplicateProtoProperty:\"Duplicate __proto__ fields are not allowed in object literals\",ForInOfLoopInitializer:\"%0 loop variable declaration may not have an initializer\",GeneratorInLegacyContext:\"Generator declarations are not allowed in legacy contexts\",IllegalBreak:\"Illegal break statement\",IllegalContinue:\"Illegal continue statement\",IllegalExportDeclaration:\"Unexpected token\",IllegalImportDeclaration:\"Unexpected token\",IllegalLanguageModeDirective:\"Illegal 'use strict' directive in function with non-simple parameter list\",IllegalReturn:\"Illegal return statement\",InvalidEscapedReservedWord:\"Keyword must not contain escaped characters\",InvalidHexEscapeSequence:\"Invalid hexadecimal escape sequence\",InvalidLHSInAssignment:\"Invalid left-hand side in assignment\",InvalidLHSInForIn:\"Invalid left-hand side in for-in\",InvalidLHSInForLoop:\"Invalid left-hand side in for-loop\",InvalidModuleSpecifier:\"Unexpected token\",InvalidRegExp:\"Invalid regular expression\",LetInLexicalBinding:\"let is disallowed as a lexically bound name\",MissingFromClause:\"Unexpected token\",MultipleDefaultsInSwitch:\"More than one default clause in switch statement\",NewlineAfterThrow:\"Illegal newline after throw\",NoAsAfterImportNamespace:\"Unexpected token\",NoCatchOrFinally:\"Missing catch or finally after try\",ParameterAfterRestParameter:\"Rest parameter must be last formal parameter\",Redeclaration:\"%0 '%1' has already been declared\",StaticPrototype:\"Classes may not have static property named prototype\",StrictCatchVariable:\"Catch variable may not be eval or arguments in strict mode\",StrictDelete:\"Delete of an unqualified identifier in strict mode.\",StrictFunction:\"In strict mode code, functions can only be declared at top level or inside a block\",StrictFunctionName:\"Function name may not be eval or arguments in strict mode\",StrictLHSAssignment:\"Assignment to eval or arguments is not allowed in strict mode\",StrictLHSPostfix:\"Postfix increment/decrement may not have eval or arguments operand in strict mode\",StrictLHSPrefix:\"Prefix increment/decrement may not have eval or arguments operand in strict mode\",StrictModeWith:\"Strict mode code may not include a with statement\",StrictOctalLiteral:\"Octal literals are not allowed in strict mode.\",StrictParamDupe:\"Strict mode function may not have duplicate parameter names\",StrictParamName:\"Parameter name eval or arguments is not allowed in strict mode\",StrictReservedWord:\"Use of future reserved word in strict mode\",StrictVarName:\"Variable name may not be eval or arguments in strict mode\",TemplateOctalLiteral:\"Octal literals are not allowed in template strings.\",UnexpectedEOS:\"Unexpected end of input\",UnexpectedIdentifier:\"Unexpected identifier\",UnexpectedNumber:\"Unexpected number\",UnexpectedReserved:\"Unexpected reserved word\",UnexpectedString:\"Unexpected string\",UnexpectedTemplate:\"Unexpected quasi %0\",UnexpectedToken:\"Unexpected token %0\",UnexpectedTokenIllegal:\"Unexpected token ILLEGAL\",UnknownLabel:\"Undefined label '%0'\",UnterminatedRegExp:\"Invalid regular expression: missing /\"}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(9),i=r(4),o=r(11);function a(e){return\"0123456789abcdef\".indexOf(e.toLowerCase())}function s(e){return\"01234567\".indexOf(e)}var u=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.isModule=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return e.prototype.saveState=function(){return{index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=o.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=o.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.skipSingleLineComment=function(e){var t,r,n=[];for(this.trackComment&&(n=[],t=this.index-e,r={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var o=this.source.charCodeAt(this.index);if(++this.index,i.Character.isLineTerminator(o)){if(this.trackComment){r.end={line:this.lineNumber,column:this.index-this.lineStart-1};var a={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:r};n.push(a)}return 13===o&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,n}}return this.trackComment&&(r.end={line:this.lineNumber,column:this.index-this.lineStart},a={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:r},n.push(a)),n},e.prototype.skipMultiLineComment=function(){var e,t,r=[];for(this.trackComment&&(r=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var n=this.source.charCodeAt(this.index);if(i.Character.isLineTerminator(n))13===n&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===n){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var o={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};r.push(o)}return r}++this.index}else++this.index}return this.trackComment&&(t.end={line:this.lineNumber,column:this.index-this.lineStart},o={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t},r.push(o)),this.tolerateUnexpectedToken(),r},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var r=this.source.charCodeAt(this.index);if(i.Character.isWhiteSpace(r))++this.index;else if(i.Character.isLineTerminator(r))++this.index,13===r&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===r)if(47===(r=this.source.charCodeAt(this.index+1))){this.index+=2;var n=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(n)),t=!0}else{if(42!==r)break;this.index+=2,n=this.skipMultiLineComment(),this.trackComment&&(e=e.concat(n))}else if(t&&45===r){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3,n=this.skipSingleLineComment(3),this.trackComment&&(e=e.concat(n))}else{if(60!==r||this.isModule)break;if(\"!--\"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4,n=this.skipSingleLineComment(4),this.trackComment&&(e=e.concat(n))}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case\"enum\":case\"export\":case\"import\":case\"super\":return!0;default:return!1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case\"implements\":case\"interface\":case\"package\":case\"private\":case\"protected\":case\"public\":case\"static\":case\"yield\":case\"let\":return!0;default:return!1}},e.prototype.isRestrictedWord=function(e){return\"eval\"===e||\"arguments\"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return\"if\"===e||\"in\"===e||\"do\"===e;case 3:return\"var\"===e||\"for\"===e||\"new\"===e||\"try\"===e||\"let\"===e;case 4:return\"this\"===e||\"else\"===e||\"case\"===e||\"void\"===e||\"with\"===e||\"enum\"===e;case 5:return\"while\"===e||\"break\"===e||\"catch\"===e||\"throw\"===e||\"const\"===e||\"yield\"===e||\"class\"===e||\"super\"===e;case 6:return\"return\"===e||\"typeof\"===e||\"delete\"===e||\"switch\"===e||\"export\"===e||\"import\"===e;case 7:return\"default\"===e||\"finally\"===e||\"extends\"===e;case 8:return\"function\"===e||\"continue\"===e||\"debugger\"===e;case 10:return\"instanceof\"===e;default:return!1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var r=this.source.charCodeAt(e+1);r>=56320&&r<=57343&&(t=1024*(t-55296)+r-56320+65536)}return t},e.prototype.scanHexEscape=function(e){for(var t=\"u\"===e?4:2,r=0,n=0;n<t;++n){if(this.eof()||!i.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;r=16*r+a(this.source[this.index++])}return String.fromCharCode(r)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for(\"}\"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],i.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+a(e);return(t>1114111||\"}\"!==e)&&this.throwUnexpectedToken(),i.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!i.Character.isIdentifierPart(t))break;++this.index}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),r=i.Character.fromCodePoint(t);for(this.index+=r.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,\"{\"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape(\"u\"))&&\"\\\\\"!==e&&i.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),r=e);!this.eof()&&(t=this.codePointAt(this.index),i.Character.isIdentifierPart(t));)r+=e=i.Character.fromCodePoint(t),this.index+=e.length,92===t&&(r=r.substr(0,r.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,\"{\"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape(\"u\"))&&\"\\\\\"!==e&&i.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),r+=e);return r},e.prototype.octalToDecimal=function(e){var t=\"0\"!==e,r=s(e);return!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,r=8*r+s(this.source[this.index++]),\"0123\".indexOf(e)>=0&&!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(r=8*r+s(this.source[this.index++]))),{code:r,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,r=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!=(e=1===r.length?3:this.isKeyword(r)?4:\"null\"===r?5:\"true\"===r||\"false\"===r?1:3)&&t+r.length!==this.index){var n=this.index;this.index=t,this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord),this.index=n}return{type:e,value:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case\"(\":case\"{\":\"{\"===t&&this.curlyStack.push(\"{\"),++this.index;break;case\".\":++this.index,\".\"===this.source[this.index]&&\".\"===this.source[this.index+1]&&(this.index+=2,t=\"...\");break;case\"}\":++this.index,this.curlyStack.pop();break;case\")\":case\";\":case\",\":case\"[\":case\"]\":case\":\":case\"?\":case\"~\":++this.index;break;default:\">>>=\"===(t=this.source.substr(this.index,4))?this.index+=4:\"===\"===(t=t.substr(0,3))||\"!==\"===t||\">>>\"===t||\"<<=\"===t||\">>=\"===t||\"**=\"===t?this.index+=3:\"&&\"===(t=t.substr(0,2))||\"||\"===t||\"==\"===t||\"!=\"===t||\"+=\"===t||\"-=\"===t||\"*=\"===t||\"/=\"===t||\"++\"===t||\"--\"===t||\"<<\"===t||\">>\"===t||\"&=\"===t||\"|=\"===t||\"^=\"===t||\"%=\"===t||\"<=\"===t||\">=\"===t||\"=>\"===t||\"**\"===t?this.index+=2:(t=this.source[this.index],\"<>=!+-*%&|^/\".indexOf(t)>=0&&++this.index)}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t=\"\";!this.eof()&&i.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt(\"0x\"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,r=\"\";!this.eof()&&(\"0\"===(t=this.source[this.index])||\"1\"===t);)r+=this.source[this.index++];return 0===r.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(i.Character.isIdentifierStart(t)||i.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(r,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var r=\"\",n=!1;for(i.Character.isOctalDigit(e.charCodeAt(0))?(n=!0,r=\"0\"+this.source[this.index++]):++this.index;!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];return n||0!==r.length||this.throwUnexpectedToken(),(i.Character.isIdentifierStart(this.source.charCodeAt(this.index))||i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(r,8),octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if(\"8\"===t||\"9\"===t)return!1;if(!i.Character.isOctalDigit(t.charCodeAt(0)))return!0}return!0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];n.assert(i.Character.isDecimalDigit(t.charCodeAt(0))||\".\"===t,\"Numeric literal must start with a decimal digit or a decimal point\");var r=\"\";if(\".\"!==t){if(r=this.source[this.index++],t=this.source[this.index],\"0\"===r){if(\"x\"===t||\"X\"===t)return++this.index,this.scanHexLiteral(e);if(\"b\"===t||\"B\"===t)return++this.index,this.scanBinaryLiteral(e);if(\"o\"===t||\"O\"===t)return this.scanOctalLiteral(t,e);if(t&&i.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];t=this.source[this.index]}if(\".\"===t){for(r+=this.source[this.index++];i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];t=this.source[this.index]}if(\"e\"===t||\"E\"===t)if(r+=this.source[this.index++],\"+\"!==(t=this.source[this.index])&&\"-\"!==t||(r+=this.source[this.index++]),i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];else this.throwUnexpectedToken();return i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(r),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];n.assert(\"'\"===t||'\"'===t,\"String literal must starts with a quote\"),++this.index;for(var r=!1,a=\"\";!this.eof();){var s=this.source[this.index++];if(s===t){t=\"\";break}if(\"\\\\\"===s)if((s=this.source[this.index++])&&i.Character.isLineTerminator(s.charCodeAt(0)))++this.lineNumber,\"\\r\"===s&&\"\\n\"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(s){case\"u\":if(\"{\"===this.source[this.index])++this.index,a+=this.scanUnicodeCodePointEscape();else{var u=this.scanHexEscape(s);null===u&&this.throwUnexpectedToken(),a+=u}break;case\"x\":var l=this.scanHexEscape(s);null===l&&this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence),a+=l;break;case\"n\":a+=\"\\n\";break;case\"r\":a+=\"\\r\";break;case\"t\":a+=\"\\t\";break;case\"b\":a+=\"\\b\";break;case\"f\":a+=\"\\f\";break;case\"v\":a+=\"\\v\";break;case\"8\":case\"9\":a+=s,this.tolerateUnexpectedToken();break;default:if(s&&i.Character.isOctalDigit(s.charCodeAt(0))){var c=this.octalToDecimal(s);r=c.octal||r,a+=String.fromCharCode(c.code)}else a+=s}else{if(i.Character.isLineTerminator(s.charCodeAt(0)))break;a+=s}}return\"\"!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:a,octal:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e=\"\",t=!1,r=this.index,n=\"`\"===this.source[r],a=!1,s=2;for(++this.index;!this.eof();){var u=this.source[this.index++];if(\"`\"===u){s=1,a=!0,t=!0;break}if(\"$\"===u){if(\"{\"===this.source[this.index]){this.curlyStack.push(\"${\"),++this.index,t=!0;break}e+=u}else if(\"\\\\\"===u)if(u=this.source[this.index++],i.Character.isLineTerminator(u.charCodeAt(0)))++this.lineNumber,\"\\r\"===u&&\"\\n\"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(u){case\"n\":e+=\"\\n\";break;case\"r\":e+=\"\\r\";break;case\"t\":e+=\"\\t\";break;case\"u\":if(\"{\"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else{var l=this.index,c=this.scanHexEscape(u);null!==c?e+=c:(this.index=l,e+=u)}break;case\"x\":var h=this.scanHexEscape(u);null===h&&this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence),e+=h;break;case\"b\":e+=\"\\b\";break;case\"f\":e+=\"\\f\";break;case\"v\":e+=\"\\v\";break;default:\"0\"===u?(i.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral),e+=\"\\0\"):i.Character.isOctalDigit(u.charCodeAt(0))?this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral):e+=u}else i.Character.isLineTerminator(u.charCodeAt(0))?(++this.lineNumber,\"\\r\"===u&&\"\\n\"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+=\"\\n\"):e+=u}return t||this.throwUnexpectedToken(),n||this.curlyStack.pop(),{type:10,value:this.source.slice(r+1,this.index-s),cooked:e,head:n,tail:a,lineNumber:this.lineNumber,lineStart:this.lineStart,start:r,end:this.index}},e.prototype.testRegExp=function(e,t){var r=e,n=this;t.indexOf(\"u\")>=0&&(r=r.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g,(function(e,t,r){var i=parseInt(t||r,16);return i>1114111&&n.throwUnexpectedToken(o.Messages.InvalidRegExp),i<=65535?String.fromCharCode(i):\"￿\"})).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\"￿\"));try{RegExp(r)}catch(e){this.throwUnexpectedToken(o.Messages.InvalidRegExp)}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];n.assert(\"/\"===e,\"Regular expression literal must start with a slash\");for(var t=this.source[this.index++],r=!1,a=!1;!this.eof();)if(t+=e=this.source[this.index++],\"\\\\\"===e)e=this.source[this.index++],i.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(o.Messages.UnterminatedRegExp),t+=e;else if(i.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);else if(r)\"]\"===e&&(r=!1);else{if(\"/\"===e){a=!0;break}\"[\"===e&&(r=!0)}return a||this.throwUnexpectedToken(o.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e=\"\";!this.eof();){var t=this.source[this.index];if(!i.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,\"\\\\\"!==t||this.eof())e+=t;else if(\"u\"===(t=this.source[this.index])){++this.index;var r=this.index,n=this.scanHexEscape(\"u\");if(null!==n)for(e+=n;r<this.index;++r)this.source[r];else this.index=r,e+=\"u\";this.tolerateUnexpectedToken()}else this.tolerateUnexpectedToken()}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),r=this.scanRegExpFlags();return{type:9,value:\"\",pattern:t,flags:r,regex:this.testRegExp(t,r),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return{type:2,value:\"\",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return i.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?i.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():i.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&\"${\"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&i.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=u},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TokenName={},t.TokenName[1]=\"Boolean\",t.TokenName[2]=\"<end>\",t.TokenName[3]=\"Identifier\",t.TokenName[4]=\"Keyword\",t.TokenName[5]=\"Null\",t.TokenName[6]=\"Numeric\",t.TokenName[7]=\"Punctuator\",t.TokenName[8]=\"String\",t.TokenName[9]=\"RegularExpression\",t.TokenName[10]=\"Template\"},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.XHTMLEntities={quot:'\"',amp:\"&\",apos:\"'\",gt:\">\",nbsp:\" \",iexcl:\"¡\",cent:\"¢\",pound:\"£\",curren:\"¤\",yen:\"¥\",brvbar:\"¦\",sect:\"§\",uml:\"¨\",copy:\"©\",ordf:\"ª\",laquo:\"«\",not:\"¬\",shy:\"­\",reg:\"®\",macr:\"¯\",deg:\"°\",plusmn:\"±\",sup2:\"²\",sup3:\"³\",acute:\"´\",micro:\"µ\",para:\"¶\",middot:\"·\",cedil:\"¸\",sup1:\"¹\",ordm:\"º\",raquo:\"»\",frac14:\"¼\",frac12:\"½\",frac34:\"¾\",iquest:\"¿\",Agrave:\"À\",Aacute:\"Á\",Acirc:\"Â\",Atilde:\"Ã\",Auml:\"Ä\",Aring:\"Å\",AElig:\"Æ\",Ccedil:\"Ç\",Egrave:\"È\",Eacute:\"É\",Ecirc:\"Ê\",Euml:\"Ë\",Igrave:\"Ì\",Iacute:\"Í\",Icirc:\"Î\",Iuml:\"Ï\",ETH:\"Ð\",Ntilde:\"Ñ\",Ograve:\"Ò\",Oacute:\"Ó\",Ocirc:\"Ô\",Otilde:\"Õ\",Ouml:\"Ö\",times:\"×\",Oslash:\"Ø\",Ugrave:\"Ù\",Uacute:\"Ú\",Ucirc:\"Û\",Uuml:\"Ü\",Yacute:\"Ý\",THORN:\"Þ\",szlig:\"ß\",agrave:\"à\",aacute:\"á\",acirc:\"â\",atilde:\"ã\",auml:\"ä\",aring:\"å\",aelig:\"æ\",ccedil:\"ç\",egrave:\"è\",eacute:\"é\",ecirc:\"ê\",euml:\"ë\",igrave:\"ì\",iacute:\"í\",icirc:\"î\",iuml:\"ï\",eth:\"ð\",ntilde:\"ñ\",ograve:\"ò\",oacute:\"ó\",ocirc:\"ô\",otilde:\"õ\",ouml:\"ö\",divide:\"÷\",oslash:\"ø\",ugrave:\"ù\",uacute:\"ú\",ucirc:\"û\",uuml:\"ü\",yacute:\"ý\",thorn:\"þ\",yuml:\"ÿ\",OElig:\"Œ\",oelig:\"œ\",Scaron:\"Š\",scaron:\"š\",Yuml:\"Ÿ\",fnof:\"ƒ\",circ:\"ˆ\",tilde:\"˜\",Alpha:\"Α\",Beta:\"Β\",Gamma:\"Γ\",Delta:\"Δ\",Epsilon:\"Ε\",Zeta:\"Ζ\",Eta:\"Η\",Theta:\"Θ\",Iota:\"Ι\",Kappa:\"Κ\",Lambda:\"Λ\",Mu:\"Μ\",Nu:\"Ν\",Xi:\"Ξ\",Omicron:\"Ο\",Pi:\"Π\",Rho:\"Ρ\",Sigma:\"Σ\",Tau:\"Τ\",Upsilon:\"Υ\",Phi:\"Φ\",Chi:\"Χ\",Psi:\"Ψ\",Omega:\"Ω\",alpha:\"α\",beta:\"β\",gamma:\"γ\",delta:\"δ\",epsilon:\"ε\",zeta:\"ζ\",eta:\"η\",theta:\"θ\",iota:\"ι\",kappa:\"κ\",lambda:\"λ\",mu:\"μ\",nu:\"ν\",xi:\"ξ\",omicron:\"ο\",pi:\"π\",rho:\"ρ\",sigmaf:\"ς\",sigma:\"σ\",tau:\"τ\",upsilon:\"υ\",phi:\"φ\",chi:\"χ\",psi:\"ψ\",omega:\"ω\",thetasym:\"ϑ\",upsih:\"ϒ\",piv:\"ϖ\",ensp:\" \",emsp:\" \",thinsp:\" \",zwnj:\"‌\",zwj:\"‍\",lrm:\"‎\",rlm:\"‏\",ndash:\"–\",mdash:\"—\",lsquo:\"‘\",rsquo:\"’\",sbquo:\"‚\",ldquo:\"“\",rdquo:\"”\",bdquo:\"„\",dagger:\"†\",Dagger:\"‡\",bull:\"•\",hellip:\"…\",permil:\"‰\",prime:\"′\",Prime:\"″\",lsaquo:\"‹\",rsaquo:\"›\",oline:\"‾\",frasl:\"⁄\",euro:\"€\",image:\"ℑ\",weierp:\"℘\",real:\"ℜ\",trade:\"™\",alefsym:\"ℵ\",larr:\"←\",uarr:\"↑\",rarr:\"→\",darr:\"↓\",harr:\"↔\",crarr:\"↵\",lArr:\"⇐\",uArr:\"⇑\",rArr:\"⇒\",dArr:\"⇓\",hArr:\"⇔\",forall:\"∀\",part:\"∂\",exist:\"∃\",empty:\"∅\",nabla:\"∇\",isin:\"∈\",notin:\"∉\",ni:\"∋\",prod:\"∏\",sum:\"∑\",minus:\"−\",lowast:\"∗\",radic:\"√\",prop:\"∝\",infin:\"∞\",ang:\"∠\",and:\"∧\",or:\"∨\",cap:\"∩\",cup:\"∪\",int:\"∫\",there4:\"∴\",sim:\"∼\",cong:\"≅\",asymp:\"≈\",ne:\"≠\",equiv:\"≡\",le:\"≤\",ge:\"≥\",sub:\"⊂\",sup:\"⊃\",nsub:\"⊄\",sube:\"⊆\",supe:\"⊇\",oplus:\"⊕\",otimes:\"⊗\",perp:\"⊥\",sdot:\"⋅\",lceil:\"⌈\",rceil:\"⌉\",lfloor:\"⌊\",rfloor:\"⌋\",loz:\"◊\",spades:\"♠\",clubs:\"♣\",hearts:\"♥\",diams:\"♦\",lang:\"⟨\",rang:\"⟩\"}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(10),i=r(12),o=r(13),a=function(){function e(){this.values=[],this.curly=this.paren=-1}return e.prototype.beforeFunctionExpression=function(e){return[\"(\",\"{\",\"[\",\"in\",\"typeof\",\"instanceof\",\"new\",\"return\",\"case\",\"delete\",\"throw\",\"void\",\"=\",\"+=\",\"-=\",\"*=\",\"**=\",\"/=\",\"%=\",\"<<=\",\">>=\",\">>>=\",\"&=\",\"|=\",\"^=\",\",\",\"+\",\"-\",\"*\",\"**\",\"/\",\"%\",\"++\",\"--\",\"<<\",\">>\",\">>>\",\"&\",\"|\",\"^\",\"!\",\"~\",\"&&\",\"||\",\"?\",\":\",\"===\",\"==\",\">=\",\"<=\",\"<\",\">\",\"!=\",\"!==\"].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case\"this\":case\"]\":t=!1;break;case\")\":var r=this.values[this.paren-1];t=\"if\"===r||\"while\"===r||\"for\"===r||\"with\"===r;break;case\"}\":if(t=!1,\"function\"===this.values[this.curly-3])t=!!(n=this.values[this.curly-4])&&!this.beforeFunctionExpression(n);else if(\"function\"===this.values[this.curly-4]){var n;t=!(n=this.values[this.curly-5])||!this.beforeFunctionExpression(n)}}return t},e.prototype.push=function(e){7===e.type||4===e.type?(\"{\"===e.value?this.curly=this.values.length:\"(\"===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null)},e}(),s=function(){function e(e,t){this.errorHandler=new n.ErrorHandler,this.errorHandler.tolerant=!!t&&\"boolean\"==typeof t.tolerant&&t.tolerant,this.scanner=new i.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&\"boolean\"==typeof t.comment&&t.comment,this.trackRange=!!t&&\"boolean\"==typeof t.range&&t.range,this.trackLoc=!!t&&\"boolean\"==typeof t.loc&&t.loc,this.buffer=[],this.reader=new a}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var r=e[t],n=this.scanner.source.slice(r.slice[0],r.slice[1]),i={type:r.multiLine?\"BlockComment\":\"LineComment\",value:n};this.trackRange&&(i.range=r.range),this.trackLoc&&(i.loc=r.loc),this.buffer.push(i)}if(!this.scanner.eof()){var a=void 0;this.trackLoc&&(a={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var s=\"/\"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(s);var u={type:o.TokenName[s.type],value:this.scanner.source.slice(s.start,s.end)};if(this.trackRange&&(u.range=[s.start,s.end]),this.trackLoc&&(a.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},u.loc=a),9===s.type){var l=s.pattern,c=s.flags;u.regex={pattern:l,flags:c}}this.buffer.push(u)}}return this.buffer.shift()},e}();t.Tokenizer=s}])},e.exports=n()},function(e,t,r){\"use strict\";var n=r(38),i=r(53),o=r(76),a=r(54),s=Object.prototype.toString,u=Object.prototype.hasOwnProperty,l={0:\"\\\\0\",7:\"\\\\a\",8:\"\\\\b\",9:\"\\\\t\",10:\"\\\\n\",11:\"\\\\v\",12:\"\\\\f\",13:\"\\\\r\",27:\"\\\\e\",34:'\\\\\"',92:\"\\\\\\\\\",133:\"\\\\N\",160:\"\\\\_\",8232:\"\\\\L\",8233:\"\\\\P\"},c=[\"y\",\"Y\",\"yes\",\"Yes\",\"YES\",\"on\",\"On\",\"ON\",\"n\",\"N\",\"no\",\"No\",\"NO\",\"off\",\"Off\",\"OFF\"];function h(e){var t,r,o;if(t=e.toString(16).toUpperCase(),e<=255)r=\"x\",o=2;else if(e<=65535)r=\"u\",o=4;else{if(!(e<=4294967295))throw new i(\"code point within a string may not be greater than 0xFFFFFFFF\");r=\"U\",o=8}return\"\\\\\"+r+n.repeat(\"0\",o-t.length)+t}function p(e){this.schema=e.schema||o,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=n.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,t){var r,n,i,o,a,s,l;if(null===t)return{};for(r={},i=0,o=(n=Object.keys(t)).length;i<o;i+=1)a=n[i],s=String(t[a]),\"!!\"===a.slice(0,2)&&(a=\"tag:yaml.org,2002:\"+a.slice(2)),(l=e.compiledTypeMap.fallback[a])&&u.call(l.styleAliases,s)&&(s=l.styleAliases[s]),r[a]=s;return r}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result=\"\",this.duplicates=[],this.usedDuplicates=null}function f(e,t){for(var r,i=n.repeat(\" \",t),o=0,a=-1,s=\"\",u=e.length;o<u;)-1===(a=e.indexOf(\"\\n\",o))?(r=e.slice(o),o=u):(r=e.slice(o,a+1),o=a+1),r.length&&\"\\n\"!==r&&(s+=i),s+=r;return s}function d(e,t){return\"\\n\"+n.repeat(\" \",e.indent*t)}function m(e){return 32===e||9===e}function y(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function v(e,t){return y(e)&&65279!==e&&44!==e&&91!==e&&93!==e&&123!==e&&125!==e&&58!==e&&(35!==e||t&&function(e){return y(e)&&!m(e)&&65279!==e&&13!==e&&10!==e}(t))}function _(e){return/^\\n* /.test(e)}function g(e,t,r,n,i){var o,a,s,u,l=!1,c=!1,h=-1!==n,p=-1,f=y(u=e.charCodeAt(0))&&65279!==u&&!m(u)&&45!==u&&63!==u&&58!==u&&44!==u&&91!==u&&93!==u&&123!==u&&125!==u&&35!==u&&38!==u&&42!==u&&33!==u&&124!==u&&61!==u&&62!==u&&39!==u&&34!==u&&37!==u&&64!==u&&96!==u&&!m(e.charCodeAt(e.length-1));if(t)for(o=0;o<e.length;o++){if(!y(a=e.charCodeAt(o)))return 5;s=o>0?e.charCodeAt(o-1):null,f=f&&v(a,s)}else{for(o=0;o<e.length;o++){if(10===(a=e.charCodeAt(o)))l=!0,h&&(c=c||o-p-1>n&&\" \"!==e[p+1],p=o);else if(!y(a))return 5;s=o>0?e.charCodeAt(o-1):null,f=f&&v(a,s)}c=c||h&&o-p-1>n&&\" \"!==e[p+1]}return l||c?r>9&&_(e)?5:c?4:3:f&&!i(e)?1:2}function b(e,t,r,n){e.dump=function(){if(0===t.length)return\"''\";if(!e.noCompatMode&&-1!==c.indexOf(t))return\"'\"+t+\"'\";var o=e.indent*Math.max(1,r),a=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-o),s=n||e.flowLevel>-1&&r>=e.flowLevel;switch(g(t,s,e.indent,a,(function(t){return function(e,t){var r,n;for(r=0,n=e.implicitTypes.length;r<n;r+=1)if(e.implicitTypes[r].resolve(t))return!0;return!1}(e,t)}))){case 1:return t;case 2:return\"'\"+t.replace(/'/g,\"''\")+\"'\";case 3:return\"|\"+x(t,e.indent)+w(f(t,o));case 4:return\">\"+x(t,e.indent)+w(f(function(e,t){var r,n,i=/(\\n+)([^\\n]*)/g,o=(s=e.indexOf(\"\\n\"),s=-1!==s?s:e.length,i.lastIndex=s,E(e.slice(0,s),t)),a=\"\\n\"===e[0]||\" \"===e[0];var s;for(;n=i.exec(e);){var u=n[1],l=n[2];r=\" \"===l[0],o+=u+(a||r||\"\"===l?\"\":\"\\n\")+E(l,t),a=r}return o}(t,a),o));case 5:return'\"'+function(e){for(var t,r,n,i=\"\",o=0;o<e.length;o++)(t=e.charCodeAt(o))>=55296&&t<=56319&&(r=e.charCodeAt(o+1))>=56320&&r<=57343?(i+=h(1024*(t-55296)+r-56320+65536),o++):(n=l[t],i+=!n&&y(t)?e[o]:n||h(t));return i}(t)+'\"';default:throw new i(\"impossible error: invalid scalar style\")}}()}function x(e,t){var r=_(e)?String(t):\"\",n=\"\\n\"===e[e.length-1];return r+(n&&(\"\\n\"===e[e.length-2]||\"\\n\"===e)?\"+\":n?\"\":\"-\")+\"\\n\"}function w(e){return\"\\n\"===e[e.length-1]?e.slice(0,-1):e}function E(e,t){if(\"\"===e||\" \"===e[0])return e;for(var r,n,i=/ [^ ]/g,o=0,a=0,s=0,u=\"\";r=i.exec(e);)(s=r.index)-o>t&&(n=a>o?a:s,u+=\"\\n\"+e.slice(o,n),o=n+1),a=s;return u+=\"\\n\",e.length-o>t&&a>o?u+=e.slice(o,a)+\"\\n\"+e.slice(a+1):u+=e.slice(o),u.slice(1)}function D(e,t,r){var n,o,a,l,c,h;for(a=0,l=(o=r?e.explicitTypes:e.implicitTypes).length;a<l;a+=1)if(((c=o[a]).instanceOf||c.predicate)&&(!c.instanceOf||\"object\"==typeof t&&t instanceof c.instanceOf)&&(!c.predicate||c.predicate(t))){if(e.tag=r?c.tag:\"?\",c.represent){if(h=e.styleMap[c.tag]||c.defaultStyle,\"[object Function]\"===s.call(c.represent))n=c.represent(t,h);else{if(!u.call(c.represent,h))throw new i(\"!<\"+c.tag+'> tag resolver accepts not \"'+h+'\" style');n=c.represent[h](t,h)}e.dump=n}return!0}return!1}function S(e,t,r,n,o,a){e.tag=null,e.dump=r,D(e,r,!1)||D(e,r,!0);var u=s.call(e.dump);n&&(n=e.flowLevel<0||e.flowLevel>t);var l,c,h=\"[object Object]\"===u||\"[object Array]\"===u;if(h&&(c=-1!==(l=e.duplicates.indexOf(r))),(null!==e.tag&&\"?\"!==e.tag||c||2!==e.indent&&t>0)&&(o=!1),c&&e.usedDuplicates[l])e.dump=\"*ref_\"+l;else{if(h&&c&&!e.usedDuplicates[l]&&(e.usedDuplicates[l]=!0),\"[object Object]\"===u)n&&0!==Object.keys(e.dump).length?(!function(e,t,r,n){var o,a,s,u,l,c,h=\"\",p=e.tag,f=Object.keys(r);if(!0===e.sortKeys)f.sort();else if(\"function\"==typeof e.sortKeys)f.sort(e.sortKeys);else if(e.sortKeys)throw new i(\"sortKeys must be a boolean or a function\");for(o=0,a=f.length;o<a;o+=1)c=\"\",n&&0===o||(c+=d(e,t)),u=r[s=f[o]],S(e,t+1,s,!0,!0,!0)&&((l=null!==e.tag&&\"?\"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&10===e.dump.charCodeAt(0)?c+=\"?\":c+=\"? \"),c+=e.dump,l&&(c+=d(e,t)),S(e,t+1,u,!0,l)&&(e.dump&&10===e.dump.charCodeAt(0)?c+=\":\":c+=\": \",h+=c+=e.dump));e.tag=p,e.dump=h||\"{}\"}(e,t,e.dump,o),c&&(e.dump=\"&ref_\"+l+e.dump)):(!function(e,t,r){var n,i,o,a,s,u=\"\",l=e.tag,c=Object.keys(r);for(n=0,i=c.length;n<i;n+=1)s=\"\",0!==n&&(s+=\", \"),e.condenseFlow&&(s+='\"'),a=r[o=c[n]],S(e,t,o,!1,!1)&&(e.dump.length>1024&&(s+=\"? \"),s+=e.dump+(e.condenseFlow?'\"':\"\")+\":\"+(e.condenseFlow?\"\":\" \"),S(e,t,a,!1,!1)&&(u+=s+=e.dump));e.tag=l,e.dump=\"{\"+u+\"}\"}(e,t,e.dump),c&&(e.dump=\"&ref_\"+l+\" \"+e.dump));else if(\"[object Array]\"===u){var p=e.noArrayIndent&&t>0?t-1:t;n&&0!==e.dump.length?(!function(e,t,r,n){var i,o,a=\"\",s=e.tag;for(i=0,o=r.length;i<o;i+=1)S(e,t+1,r[i],!0,!0)&&(n&&0===i||(a+=d(e,t)),e.dump&&10===e.dump.charCodeAt(0)?a+=\"-\":a+=\"- \",a+=e.dump);e.tag=s,e.dump=a||\"[]\"}(e,p,e.dump,o),c&&(e.dump=\"&ref_\"+l+e.dump)):(!function(e,t,r){var n,i,o=\"\",a=e.tag;for(n=0,i=r.length;n<i;n+=1)S(e,t,r[n],!1,!1)&&(0!==n&&(o+=\",\"+(e.condenseFlow?\"\":\" \")),o+=e.dump);e.tag=a,e.dump=\"[\"+o+\"]\"}(e,p,e.dump),c&&(e.dump=\"&ref_\"+l+\" \"+e.dump))}else{if(\"[object String]\"!==u){if(e.skipInvalid)return!1;throw new i(\"unacceptable kind of an object to dump \"+u)}\"?\"!==e.tag&&b(e,e.dump,t,a)}null!==e.tag&&\"?\"!==e.tag&&(e.dump=\"!<\"+e.tag+\"> \"+e.dump)}return!0}function C(e,t){var r,n,i=[],o=[];for(function e(t,r,n){var i,o,a;if(null!==t&&\"object\"==typeof t)if(-1!==(o=r.indexOf(t)))-1===n.indexOf(o)&&n.push(o);else if(r.push(t),Array.isArray(t))for(o=0,a=t.length;o<a;o+=1)e(t[o],r,n);else for(i=Object.keys(t),o=0,a=i.length;o<a;o+=1)e(t[i[o]],r,n)}(e,i,o),r=0,n=o.length;r<n;r+=1)t.duplicates.push(i[o[r]]);t.usedDuplicates=new Array(n)}function A(e,t){var r=new p(t=t||{});return r.noRefs||C(e,r),S(r,0,e,!0,!0)?r.dump+\"\\n\":\"\"}e.exports.dump=A,e.exports.safeDump=function(e,t){return A(e,n.extend({schema:a},t))}},function(e,t,r){\"use strict\";r(31),r(32),r(33),r(64),r(19),r(65),r(20),r(68),r(92),r(144),r(22),r(94),r(23);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},a=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,\"__esModule\",{value:!0});var s=r(91),u=r(1),l=r(183),c=r(0),h=r(7),p=r(95),f=r(69),d=r(3),m=r(305),y=r(306),v=r(307),_=function(e){function t(t,r){void 0===r&&(r=!1);var n=e.call(this)||this;return n._hasDeclaration=!1,n._docTypeName=\"\",n._hasDocumentElement=!1,n._currentElementSerialized=!1,n._openTags=[],n._ended=!1,n._fragment=r,n._options=u.applyDefaults(t||{},s.DefaultXMLBuilderCBOptions),n._builderOptions={defaultNamespace:n._options.defaultNamespace,namespaceAlias:n._options.namespaceAlias},\"json\"===n._options.format?n._writer=new y.JSONCBWriter(n._options):\"yaml\"===n._options.format?n._writer=new v.YAMLCBWriter(n._options):n._writer=new m.XMLCBWriter(n._options),void 0!==n._options.data&&n.on(\"data\",n._options.data),void 0!==n._options.end&&n.on(\"end\",n._options.end),void 0!==n._options.error&&n.on(\"error\",n._options.error),n._prefixMap=new p.NamespacePrefixMap,n._prefixMap.set(\"xml\",h.namespace.XML),n._prefixIndex={value:1},n._push(n._writer.frontMatter()),n}return i(t,e),t.prototype.ele=function(e,t,r){var n,i;if(u.isObject(e)||u.isString(e)&&(/^\\s*</.test(e)||/^\\s*[\\{\\[]/.test(e)||/^(\\s*|(#.*)|(%.*))*---/.test(e))){var a=l.fragment().set(this._options);try{a.ele(e)}catch(e){return this.emit(\"error\",e),this}try{for(var s=o(a.node.childNodes),c=s.next();!c.done;c=s.next()){var h=c.value;this._fromNode(h)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}return this}if(this._serializeOpenTag(!0),!this._fragment&&this._hasDocumentElement&&0===this._writer.level)return this.emit(\"error\",new Error(\"Document cannot have multiple document element nodes.\")),this;try{this._currentElement=l.fragment(this._builderOptions).ele(e,t,r)}catch(e){return this.emit(\"error\",e),this}return this._fragment||this._hasDocumentElement||\"\"===this._docTypeName||this._currentElement.node._qualifiedName===this._docTypeName?(this._currentElementSerialized=!1,this._fragment||(this._hasDocumentElement=!0),this):(this.emit(\"error\",new Error(\"Document element name does not match DocType declaration name.\")),this)},t.prototype.att=function(e,t,r){if(void 0===this._currentElement)return this.emit(\"error\",new Error(\"Cannot insert an attribute node as child of a document node.\")),this;try{this._currentElement.att(e,t,r)}catch(e){return this.emit(\"error\",e),this}return this},t.prototype.com=function(e){var t;this._serializeOpenTag(!0);try{t=l.fragment(this._builderOptions).com(e).first().node}catch(e){return this.emit(\"error\",e),this}return!this._options.wellFormed||c.xml_isLegalChar(t.data)&&-1===t.data.indexOf(\"--\")&&!t.data.endsWith(\"-\")?(this._push(this._writer.comment(t.data)),this):(this.emit(\"error\",new Error(\"Comment data contains invalid characters (well-formed required).\")),this)},t.prototype.txt=function(e){if(!this._fragment&&void 0===this._currentElement)return this.emit(\"error\",new Error(\"Cannot insert a text node as child of a document node.\")),this;var t;this._serializeOpenTag(!0);try{t=l.fragment(this._builderOptions).txt(e).first().node}catch(e){return this.emit(\"error\",e),this}if(this._options.wellFormed&&!c.xml_isLegalChar(t.data))return this.emit(\"error\",new Error(\"Text data contains invalid characters (well-formed required).\")),this;var r=t.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");return this._push(this._writer.text(r)),this},t.prototype.ins=function(e,t){var r;void 0===t&&(t=\"\"),this._serializeOpenTag(!0);try{r=l.fragment(this._builderOptions).ins(e,t).first().node}catch(e){return this.emit(\"error\",e),this}return this._options.wellFormed&&(-1!==r.target.indexOf(\":\")||/^xml$/i.test(r.target))?(this.emit(\"error\",new Error(\"Processing instruction target contains invalid characters (well-formed required).\")),this):this._options.wellFormed&&!c.xml_isLegalChar(r.data)?(this.emit(\"error\",Error(\"Processing instruction data contains invalid characters (well-formed required).\")),this):(this._push(this._writer.instruction(r.target,r.data)),this)},t.prototype.dat=function(e){var t;this._serializeOpenTag(!0);try{t=l.fragment(this._builderOptions).dat(e).first().node}catch(e){return this.emit(\"error\",e),this}return this._push(this._writer.cdata(t.data)),this},t.prototype.dec=function(e){return void 0===e&&(e={version:\"1.0\"}),this._fragment?(this.emit(\"error\",Error(\"Cannot insert an XML declaration into a document fragment.\")),this):this._hasDeclaration?(this.emit(\"error\",Error(\"XML declaration is already inserted.\")),this):(this._push(this._writer.declaration(e.version||\"1.0\",e.encoding,e.standalone)),this._hasDeclaration=!0,this)},t.prototype.dtd=function(e){if(this._fragment)return this.emit(\"error\",Error(\"Cannot insert a DocType declaration into a document fragment.\")),this;if(\"\"!==this._docTypeName)return this.emit(\"error\",new Error(\"DocType declaration is already inserted.\")),this;if(this._hasDocumentElement)return this.emit(\"error\",new Error(\"Cannot insert DocType declaration after document element.\")),this;var t;try{t=l.create().dtd(e).first().node}catch(e){return this.emit(\"error\",e),this}return this._options.wellFormed&&!c.xml_isPubidChar(t.publicId)?(this.emit(\"error\",new Error(\"DocType public identifier does not match PubidChar construct (well-formed required).\")),this):this._options.wellFormed&&(!c.xml_isLegalChar(t.systemId)||-1!==t.systemId.indexOf('\"')&&-1!==t.systemId.indexOf(\"'\"))?(this.emit(\"error\",new Error(\"DocType system identifier contains invalid characters (well-formed required).\")),this):(this._docTypeName=e.name,this._push(this._writer.docType(e.name,t.publicId,t.systemId)),this)},t.prototype.import=function(e){var t,r,n=l.fragment().set(this._options);try{n.import(e)}catch(e){return this.emit(\"error\",e),this}try{for(var i=o(n.node.childNodes),a=i.next();!a.done;a=i.next()){var s=a.value;this._fromNode(s)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return this},t.prototype.up=function(){return this._serializeOpenTag(!1),this._serializeCloseTag(),this},t.prototype.end=function(){for(this._serializeOpenTag(!1);this._openTags.length>0;)this._serializeCloseTag();return this._push(null),this},t.prototype._serializeOpenTag=function(e){if(!this._currentElementSerialized&&void 0!==this._currentElement){var r=this._currentElement.node;if(!this._options.wellFormed||-1===r.localName.indexOf(\":\")&&c.xml_isName(r.localName)){var n=\"\",i=!1,o=this._prefixMap.copy(),a={},s=this._recordNamespaceInformation(r,o,a),u=0===this._openTags.length?null:this._openTags[this._openTags.length-1][1],l=r.namespaceURI;if(null===l&&(l=u),u===l)null!==s&&(i=!0),n=l===h.namespace.XML?\"xml:\"+r.localName:r.localName,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n));else{var p=r.prefix,f=null;if(null===p&&l===s||(f=o.get(p,l)),\"xmlns\"===p){if(this._options.wellFormed)return void this.emit(\"error\",new Error(\"An element cannot have the 'xmlns' prefix (well-formed required).\"));f=p}null!==f?(n=f+\":\"+r.localName,null!==s&&s!==h.namespace.XML&&(u=s||null),this._writer.beginElement(n),this._push(this._writer.openTagBegin(n))):null!==p?(p in a&&(p=this._generatePrefix(l,o,this._prefixIndex)),o.set(p,l),n+=p+\":\"+r.localName,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n)),this._push(this._writer.attribute(\"xmlns:\"+p,this._serializeAttributeValue(l,this._options.wellFormed))),null!==s&&(u=s||null)):null===s||null!==s&&s!==l?(i=!0,n+=r.localName,u=l,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n)),this._push(this._writer.attribute(\"xmlns\",this._serializeAttributeValue(l,this._options.wellFormed)))):(n+=r.localName,u=l,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n)))}this._serializeAttributes(r,o,this._prefixIndex,a,i,this._options.wellFormed);var d=l===h.namespace.HTML;d&&!e&&t._VoidElementNames.has(r.localName)?(this._push(this._writer.openTagEnd(n,!0,!0)),this._writer.endElement(n)):d||e?this._push(this._writer.openTagEnd(n,!1,!1)):(this._push(this._writer.openTagEnd(n,!0,!1)),this._writer.endElement(n)),this._currentElementSerialized=!0,this._openTags.push([n,u,this._prefixMap,e]),this._isPrefixMapModified(this._prefixMap,o)&&(this._prefixMap=o),this._writer.level++}else this.emit(\"error\",new Error(\"Node local name contains invalid characters (well-formed required).\"))}},t.prototype._serializeCloseTag=function(){this._writer.level--;var e=this._openTags.pop();if(void 0!==e){var t=a(e,4),r=t[0],n=(t[1],t[2]),i=t[3];this._prefixMap=n,i&&(this._push(this._writer.closeTag(r)),this._writer.endElement(r))}else this.emit(\"error\",new Error(\"Last element is undefined.\"))},t.prototype._push=function(e){null===e?(this._ended=!0,this.emit(\"end\")):this._ended?this.emit(\"error\",new Error(\"Cannot push to ended stream.\")):0!==e.length&&(this._writer.hasData=!0,this.emit(\"data\",e,this._writer.level))},t.prototype._fromNode=function(e){var t,r,n,i;if(d.Guard.isElementNode(e)){var a=e.prefix?e.prefix+\":\"+e.localName:e.localName;null!==e.namespaceURI?this.ele(e.namespaceURI,a):this.ele(a);try{for(var s=o(e.attributes),u=s.next();!u.done;u=s.next()){var l=u.value,c=l.prefix?l.prefix+\":\"+l.localName:l.localName;null!==l.namespaceURI?this.att(l.namespaceURI,c,l.value):this.att(c,l.value)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}try{for(var h=o(e.childNodes),p=h.next();!p.done;p=h.next()){var f=p.value;this._fromNode(f)}}catch(e){n={error:e}}finally{try{p&&!p.done&&(i=h.return)&&i.call(h)}finally{if(n)throw n.error}}this.up()}else d.Guard.isExclusiveTextNode(e)&&e.data?this.txt(e.data):d.Guard.isCommentNode(e)?this.com(e.data):d.Guard.isCDATASectionNode(e)?this.dat(e.data):d.Guard.isProcessingInstructionNode(e)&&this.ins(e.target,e.data)},t.prototype._serializeAttributes=function(e,t,r,n,i,a){var s,u,l=a?new f.LocalNameSet:void 0;try{for(var p=o(e.attributes),d=p.next();!d.done;d=p.next()){var m=d.value;if(a||i||null!==m.namespaceURI){if(a&&l&&l.has(m.namespaceURI,m.localName))return void this.emit(\"error\",new Error(\"Element contains duplicate attributes (well-formed required).\"));a&&l&&l.set(m.namespaceURI,m.localName);var y=m.namespaceURI,v=null;if(null!==y)if(v=t.get(m.prefix,y),y===h.namespace.XMLNS){if(m.value===h.namespace.XML||null===m.prefix&&i||null!==m.prefix&&(!(m.localName in n)||n[m.localName]!==m.value)&&t.has(m.localName,m.value))continue;if(a&&m.value===h.namespace.XMLNS)return void this.emit(\"error\",new Error(\"XMLNS namespace is reserved (well-formed required).\"));if(a&&\"\"===m.value)return void this.emit(\"error\",new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).\"));\"xmlns\"===m.prefix&&(v=\"xmlns\")}else null===v&&(v=null===m.prefix||t.hasPrefix(m.prefix)&&!t.has(m.prefix,y)?this._generatePrefix(y,t,r):m.prefix,this._push(this._writer.attribute(\"xmlns:\"+v,this._serializeAttributeValue(y,this._options.wellFormed))));if(a&&(-1!==m.localName.indexOf(\":\")||!c.xml_isName(m.localName)||\"xmlns\"===m.localName&&null===y))return void this.emit(\"error\",new Error(\"Attribute local name contains invalid characters (well-formed required).\"));this._push(this._writer.attribute((null!==v?v+\":\":\"\")+m.localName,this._serializeAttributeValue(m.value,this._options.wellFormed)))}else this._push(this._writer.attribute(m.localName,this._serializeAttributeValue(m.value,this._options.wellFormed)))}}catch(e){s={error:e}}finally{try{d&&!d.done&&(u=p.return)&&u.call(p)}finally{if(s)throw s.error}}},t.prototype._serializeAttributeValue=function(e,t){return t&&null!==e&&!c.xml_isLegalChar(e)?(this.emit(\"error\",new Error(\"Invalid characters in attribute value.\")),\"\"):null===e?\"\":e.replace(/(?!&(lt|gt|amp|apos|quot);)&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\")},t.prototype._recordNamespaceInformation=function(e,t,r){var n,i,a=null;try{for(var s=o(e.attributes),u=s.next();!u.done;u=s.next()){var l=u.value,c=l.namespaceURI,p=l.prefix;if(c===h.namespace.XMLNS){if(null===p){a=l.value;continue}var f=l.localName,d=l.value;if(d===h.namespace.XML)continue;if(\"\"===d&&(d=null),t.has(f,d))continue;t.set(f,d),r[f]=d||\"\"}}}catch(e){n={error:e}}finally{try{u&&!u.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}return a},t.prototype._generatePrefix=function(e,t,r){var n=\"ns\"+r.value;return r.value++,t.set(n,e),n},t.prototype._isPrefixMapModified=function(e,t){var r=e._items,n=t._items,i=e._nullItems,o=t._nullItems;for(var a in n){var s=r[a];if(void 0===s)return!0;var u=n[a];if(s.length!==u.length)return!0;for(var l=0;l<s.length;l++)if(s[l]!==u[l])return!0}if(i.length!==o.length)return!0;for(l=0;l<i.length;l++)if(i[l]!==o[l])return!0;return!1},t._VoidElementNames=new Set([\"area\",\"base\",\"basefont\",\"bgsound\",\"br\",\"col\",\"embed\",\"frame\",\"hr\",\"img\",\"input\",\"keygen\",\"link\",\"menuitem\",\"meta\",\"param\",\"source\",\"track\",\"wbr\"]),t}(r(308).EventEmitter);t.XMLBuilderCBImpl=_},function(e,t,r){\"use strict\";r(74);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(e){function t(t){var r=e.call(this,t)||this;return r._lineLength=0,r}return i(t,e),t.prototype.frontMatter=function(){return\"\"},t.prototype.declaration=function(e,t,r){var n=this._beginLine()+\"<?xml\";return n+=' version=\"'+e+'\"',void 0!==t&&(n+=' encoding=\"'+t+'\"'),void 0!==r&&(n+=' standalone=\"'+(r?\"yes\":\"no\")+'\"'),n+=\"?>\"},t.prototype.docType=function(e,t,r){var n=this._beginLine();return n+=t&&r?\"<!DOCTYPE \"+e+' PUBLIC \"'+t+'\" \"'+r+'\">':t?\"<!DOCTYPE \"+e+' PUBLIC \"'+t+'\">':r?\"<!DOCTYPE \"+e+' SYSTEM \"'+r+'\">':\"<!DOCTYPE \"+e+\">\"},t.prototype.comment=function(e){return this._beginLine()+\"\\x3c!--\"+e+\"--\\x3e\"},t.prototype.text=function(e){return this._beginLine()+e},t.prototype.instruction=function(e,t){return t?this._beginLine()+\"<?\"+e+\" \"+t+\"?>\":this._beginLine()+\"<?\"+e+\"?>\"},t.prototype.cdata=function(e){return this._beginLine()+\"<![CDATA[\"+e+\"]]>\"},t.prototype.openTagBegin=function(e){return this._lineLength+=1+e.length,this._beginLine()+\"<\"+e},t.prototype.openTagEnd=function(e,t,r){return r?\" />\":t?this._writerOptions.allowEmptyTags?\"></\"+e+\">\":this._writerOptions.spaceBeforeSlash?\" />\":\"/>\":\">\"},t.prototype.closeTag=function(e){return this._beginLine()+\"</\"+e+\">\"},t.prototype.attribute=function(e,t){var r=e+'=\"'+t+'\"';return this._writerOptions.prettyPrint&&this._writerOptions.width>0&&this._lineLength+1+r.length>this._writerOptions.width?(r=this._beginLine()+this._indent(1)+r,this._lineLength=r.length,r):(this._lineLength+=1+r.length,\" \"+r)},t.prototype.beginElement=function(e){},t.prototype.endElement=function(e){},t.prototype._beginLine=function(){if(this._writerOptions.prettyPrint){var e=(this.hasData?this._writerOptions.newline:\"\")+this._indent(this._writerOptions.offset+this.level);return this._lineLength=e.length,e}return\"\"},t.prototype._indent=function(e){return e<=0?\"\":this._writerOptions.indent.repeat(e)},t}(r(114).BaseCBWriter);t.XMLCBWriter=o},function(e,t,r){\"use strict\";r(74);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(e){function t(t){var r=e.call(this,t)||this;return r._hasChildren=[],r._additionalLevel=0,r}return i(t,e),t.prototype.frontMatter=function(){return\"\"},t.prototype.declaration=function(e,t,r){return\"\"},t.prototype.docType=function(e,t,r){return\"\"},t.prototype.comment=function(e){return this._comma()+this._beginLine()+\"{\"+this._sep()+this._key(this._builderOptions.convert.comment)+this._sep()+this._val(e)+this._sep()+\"}\"},t.prototype.text=function(e){return this._comma()+this._beginLine()+\"{\"+this._sep()+this._key(this._builderOptions.convert.text)+this._sep()+this._val(e)+this._sep()+\"}\"},t.prototype.instruction=function(e,t){return this._comma()+this._beginLine()+\"{\"+this._sep()+this._key(this._builderOptions.convert.ins)+this._sep()+this._val(t?e+\" \"+t:e)+this._sep()+\"}\"},t.prototype.cdata=function(e){return this._comma()+this._beginLine()+\"{\"+this._sep()+this._key(this._builderOptions.convert.cdata)+this._sep()+this._val(e)+this._sep()+\"}\"},t.prototype.attribute=function(e,t){return this._comma()+this._beginLine(1)+\"{\"+this._sep()+this._key(this._builderOptions.convert.att+e)+this._sep()+this._val(t)+this._sep()+\"}\"},t.prototype.openTagBegin=function(e){var t=this._comma()+this._beginLine()+\"{\"+this._sep()+this._key(e)+this._sep()+\"{\";return this._additionalLevel++,this.hasData=!0,t+=this._beginLine()+this._key(this._builderOptions.convert.text)+this._sep()+\"[\",this._hasChildren.push(!1),t},t.prototype.openTagEnd=function(e,t,r){if(t){var n=this._sep()+\"]\";return this._additionalLevel--,n+=this._beginLine()+\"}\"+this._sep()+\"}\"}return\"\"},t.prototype.closeTag=function(e){var t=this._beginLine()+\"]\";return this._additionalLevel--,t+=this._beginLine()+\"}\"+this._sep()+\"}\"},t.prototype.beginElement=function(e){},t.prototype.endElement=function(e){this._hasChildren.pop()},t.prototype._beginLine=function(e){return void 0===e&&(e=0),this._writerOptions.prettyPrint?(this.hasData?this._writerOptions.newline:\"\")+this._indent(this._writerOptions.offset+this.level+e):\"\"},t.prototype._indent=function(e){return e+this._additionalLevel<=0?\"\":this._writerOptions.indent.repeat(e+this._additionalLevel)},t.prototype._comma=function(){var e=this._hasChildren[this._hasChildren.length-1]?\",\":\"\";return this._hasChildren.length>0&&(this._hasChildren[this._hasChildren.length-1]=!0),e},t.prototype._sep=function(){return this._writerOptions.prettyPrint?\" \":\"\"},t.prototype._key=function(e){return'\"'+e+'\":'},t.prototype._val=function(e){return JSON.stringify(e)},t}(r(114).BaseCBWriter);t.JSONCBWriter=o},function(e,t,r){\"use strict\";r(74);var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(e){function t(t){var r=e.call(this,t)||this;if(r._rootWritten=!1,r._additionalLevel=0,t.indent.length<2)throw new Error(\"YAML indententation string must be at least two characters long.\");if(t.offset<0)throw new Error(\"YAML offset should be zero or a positive number.\");return r}return i(t,e),t.prototype.frontMatter=function(){return this._beginLine()+\"---\"},t.prototype.declaration=function(e,t,r){return\"\"},t.prototype.docType=function(e,t,r){return\"\"},t.prototype.comment=function(e){return this._beginLine()+this._key(this._builderOptions.convert.comment)+\" \"+this._val(e)},t.prototype.text=function(e){return this._beginLine()+this._key(this._builderOptions.convert.text)+\" \"+this._val(e)},t.prototype.instruction=function(e,t){return this._beginLine()+this._key(this._builderOptions.convert.ins)+\" \"+this._val(t?e+\" \"+t:e)},t.prototype.cdata=function(e){return this._beginLine()+this._key(this._builderOptions.convert.cdata)+\" \"+this._val(e)},t.prototype.attribute=function(e,t){this._additionalLevel++;var r=this._beginLine()+this._key(this._builderOptions.convert.att+e)+\" \"+this._val(t);return this._additionalLevel--,r},t.prototype.openTagBegin=function(e){var t=this._beginLine()+this._key(e);return this._rootWritten||(this._rootWritten=!0),this.hasData=!0,this._additionalLevel++,t+=this._beginLine(!0)+this._key(this._builderOptions.convert.text)},t.prototype.openTagEnd=function(e,t,r){return t?\" \"+this._val(\"\"):\"\"},t.prototype.closeTag=function(e){return this._additionalLevel--,\"\"},t.prototype.beginElement=function(e){},t.prototype.endElement=function(e){},t.prototype._beginLine=function(e){return void 0===e&&(e=!1),(this.hasData?this._writerOptions.newline:\"\")+this._indent(this._writerOptions.offset+this.level,e)},t.prototype._indent=function(e,t){if(e+this._additionalLevel<=0)return\"\";var r=this._writerOptions.indent.repeat(e+this._additionalLevel);return!t&&this._rootWritten?r.substr(0,r.length-2)+\"-\"+r.substr(-1,1):r},t.prototype._key=function(e){return'\"'+e+'\":'},t.prototype._val=function(e){return JSON.stringify(e)},t}(r(114).BaseCBWriter);t.YAMLCBWriter=o},function(e,t,r){\"use strict\";var n,i=\"object\"==typeof Reflect?Reflect:null,o=i&&\"function\"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&\"function\"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function l(e){if(\"function\"!=typeof e)throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function h(e,t,r,n){var i,o,a,s;if(l(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit(\"newListener\",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if(\"function\"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error(\"Possible EventEmitter memory leak detected. \"+a.length+\" \"+String(t)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");u.name=\"MaxListenersExceededWarning\",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=p.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:\"function\"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):y(i,i.length)}function m(e){var t=this._events;if(void 0!==t){var r=t[e];if(\"function\"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(s,\"defaultMaxListeners\",{enumerable:!0,get:function(){return u},set:function(e){if(\"number\"!=typeof e||e<0||a(e))throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\");u=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||a(e))throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n=\"error\"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error(\"Unhandled error.\"+(a?\" (\"+a.message+\")\":\"\"));throw s.context=a,s}var u=i[e];if(void 0===u)return!1;if(\"function\"==typeof u)o(u,this,t);else{var l=u.length,c=y(u,l);for(r=0;r<l;++r)o(c[r],this,t)}return!0},s.prototype.addListener=function(e,t){return h(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return h(this,e,t,!0)},s.prototype.once=function(e,t){return l(t),this.on(e,f(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,f(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,i,o,a;if(l(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit(\"removeListener\",e,r.listener||t));else if(\"function\"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit(\"removeListener\",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)\"removeListener\"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners(\"removeListener\"),this._events=Object.create(null),this._eventsCount=0,this}if(\"function\"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return d(this,e,!0)},s.prototype.rawListeners=function(e){return d(this,e,!1)},s.listenerCount=function(e,t){return\"function\"==typeof e.listenerCount?e.listenerCount(t):m.call(e,t)},s.prototype.listenerCount=m,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(77);t.createCB=function(e){return new n.XMLBuilderCBImpl(e)},t.fragmentCB=function(e){return new n.XMLBuilderCBImpl(e,!0)}}])}));","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    // Be careful not to mutate an array owned by the user!\n    var m = tz.length, a = 0, b = m;\n    while (tz[a] <= x0) ++a;\n    while (tz[b - 1] > x1) --b;\n    if (a || b < m) tz = tz.slice(a, b), m = b - a;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : constant(Array.isArray(_) ? slice.call(_) : _), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n","export function blur(values, r) {\n  if (!((r = +r) >= 0)) throw new RangeError(\"invalid r\");\n  let length = values.length;\n  if (!((length = Math.floor(length)) >= 0)) throw new RangeError(\"invalid length\");\n  if (!length || !r) return values;\n  const blur = blurf(r);\n  const temp = values.slice();\n  blur(values, temp, 0, length, 1);\n  blur(temp, values, 0, length, 1);\n  blur(values, temp, 0, length, 1);\n  return values;\n}\n\nexport const blur2 = Blur2(blurf);\n\nexport const blurImage = Blur2(blurfImage);\n\nfunction Blur2(blur) {\n  return function(data, rx, ry = rx) {\n    if (!((rx = +rx) >= 0)) throw new RangeError(\"invalid rx\");\n    if (!((ry = +ry) >= 0)) throw new RangeError(\"invalid ry\");\n    let {data: values, width, height} = data;\n    if (!((width = Math.floor(width)) >= 0)) throw new RangeError(\"invalid width\");\n    if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0)) throw new RangeError(\"invalid height\");\n    if (!width || !height || (!rx && !ry)) return data;\n    const blurx = rx && blur(rx);\n    const blury = ry && blur(ry);\n    const temp = values.slice();\n    if (blurx && blury) {\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    } else if (blurx) {\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n    } else if (blury) {\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    }\n    return data;\n  };\n}\n\nfunction blurh(blur, T, S, w, h) {\n  for (let y = 0, n = w * h; y < n;) {\n    blur(T, S, y, y += w, 1);\n  }\n}\n\nfunction blurv(blur, T, S, w, h) {\n  for (let x = 0, n = w * h; x < w; ++x) {\n    blur(T, S, x, x + n, w);\n  }\n}\n\nfunction blurfImage(radius) {\n  const blur = blurf(radius);\n  return (T, S, start, stop, step) => {\n    start <<= 2, stop <<= 2, step <<= 2;\n    blur(T, S, start + 0, stop + 0, step);\n    blur(T, S, start + 1, stop + 1, step);\n    blur(T, S, start + 2, stop + 2, step);\n    blur(T, S, start + 3, stop + 3, step);\n  };\n}\n\n// Given a target array T, a source array S, sets each value T[i] to the average\n// of {S[i - r], …, S[i], …, S[i + r]}, where r = ⌊radius⌋, start <= i < stop,\n// for each i, i + step, i + 2 * step, etc., and where S[j] is clamped between\n// S[start] (inclusive) and S[stop] (exclusive). If the given radius is not an\n// integer, S[i - r - 1] and S[i + r + 1] are added to the sum, each weighted\n// according to r - ⌊radius⌋.\nfunction blurf(radius) {\n  const radius0 = Math.floor(radius);\n  if (radius0 === radius) return bluri(radius);\n  const t = radius - radius0;\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius0 * S[start];\n    const s0 = step * radius0;\n    const s1 = s0 + step;\n    for (let i = start, j = start + s0; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s0)];\n      T[i] = (sum + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;\n      sum -= S[Math.max(start, i - s0)];\n    }\n  };\n}\n\n// Like blurf, but optimized for integer radius.\nfunction bluri(radius) {\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius * S[start];\n    const s = step * radius;\n    for (let i = start, j = start + s; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s)];\n      T[i] = sum / w;\n      sum -= S[Math.max(start, i - s)];\n    }\n  };\n}\n","export default function constant(x) {\n  return () => x;\n}\n","export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n","function length(array) {\n  return array.length | 0;\n}\n\nfunction empty(length) {\n  return !(length > 0);\n}\n\nfunction arrayify(values) {\n  return typeof values !== \"object\" || \"length\" in values ? values : Array.from(values);\n}\n\nfunction reducer(reduce) {\n  return values => reduce(...values);\n}\n\nexport default function cross(...values) {\n  const reduce = typeof values[values.length - 1] === \"function\" && reducer(values.pop());\n  values = values.map(arrayify);\n  const lengths = values.map(length);\n  const j = values.length - 1;\n  const index = new Array(j + 1).fill(0);\n  const product = [];\n  if (j < 0 || lengths.some(empty)) return product;\n  while (true) {\n    product.push(index.map((j, i) => values[i][j]));\n    let i = j;\n    while (++index[i] === lengths[i]) {\n      if (i === 0) return reduce ? product.map(reduce) : product;\n      index[i--] = 0;\n    }\n  }\n}\n","export default function cumsum(values, valueof) {\n  var sum = 0, index = 0;\n  return Float64Array.from(values, valueof === undefined\n    ? v => (sum += +v || 0)\n    : v => (sum += +valueof(v, index++, values) || 0));\n}","export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n","import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n","import {InternSet} from \"internmap\";\n\nexport default function difference(values, ...others) {\n  values = new InternSet(values);\n  for (const other of others) {\n    for (const value of other) {\n      values.delete(value);\n    }\n  }\n  return values;\n}\n","import {InternSet} from \"internmap\";\n\nexport default function disjoint(values, other) {\n  const iterator = other[Symbol.iterator](), set = new InternSet();\n  for (const v of values) {\n    if (set.has(v)) return false;\n    let value, done;\n    while (({value, done} = iterator.next())) {\n      if (done) break;\n      if (Object.is(v, value)) return false;\n      set.add(value);\n    }\n  }\n  return true;\n}\n","export default function every(values, test) {\n  if (typeof test !== \"function\") throw new TypeError(\"test is not a function\");\n  let index = -1;\n  for (const value of values) {\n    if (!test(value, ++index, values)) {\n      return false;\n    }\n  }\n  return true;\n}\n","export default function extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","export default function filter(values, test) {\n  if (typeof test !== \"function\") throw new TypeError(\"test is not a function\");\n  const array = [];\n  let index = -1;\n  for (const value of values) {\n    if (test(value, ++index, values)) {\n      array.push(value);\n    }\n  }\n  return array;\n}\n","// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n","import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n","import ascending from \"./ascending.js\";\nimport maxIndex from \"./maxIndex.js\";\n\nexport default function greatestIndex(values, compare = ascending) {\n  if (compare.length === 1) return maxIndex(values, compare);\n  let maxValue;\n  let max = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (max < 0\n        ? compare(value, value) === 0\n        : compare(value, maxValue) > 0) {\n      maxValue = value;\n      max = index;\n    }\n  }\n  return max;\n}\n","import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nfunction flatten(groups, keys) {\n  for (let i = 1, n = keys.length; i < n; ++i) {\n    groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));\n  }\n  return groups;\n}\n\nexport function flatGroup(values, ...keys) {\n  return flatten(groups(values, ...keys), keys);\n}\n\nexport function flatRollup(values, reduce, ...keys) {\n  return flatten(rollups(values, reduce, ...keys), keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n","import ascending from \"./ascending.js\";\nimport group, {rollup} from \"./group.js\";\nimport sort from \"./sort.js\";\n\nexport default function groupSort(values, reduce, key) {\n  return (reduce.length !== 2\n    ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)))\n    : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))))\n    .map(([key]) => key);\n}\n","export default function identity(x) {\n  return x;\n}\n","export {default as bisect, bisectRight, bisectLeft, bisectCenter} from \"./bisect.js\";\nexport {default as ascending} from \"./ascending.js\";\nexport {default as bisector} from \"./bisector.js\";\nexport {blur, blur2, blurImage} from \"./blur.js\";\nexport {default as count} from \"./count.js\";\nexport {default as cross} from \"./cross.js\";\nexport {default as cumsum} from \"./cumsum.js\";\nexport {default as descending} from \"./descending.js\";\nexport {default as deviation} from \"./deviation.js\";\nexport {default as extent} from \"./extent.js\";\nexport {Adder, fsum, fcumsum} from \"./fsum.js\";\nexport {default as group, flatGroup, flatRollup, groups, index, indexes, rollup, rollups} from \"./group.js\";\nexport {default as groupSort} from \"./groupSort.js\";\nexport {default as bin, default as histogram} from \"./bin.js\"; // Deprecated; use bin.\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis.js\";\nexport {default as thresholdScott} from \"./threshold/scott.js\";\nexport {default as thresholdSturges} from \"./threshold/sturges.js\";\nexport {default as max} from \"./max.js\";\nexport {default as maxIndex} from \"./maxIndex.js\";\nexport {default as mean} from \"./mean.js\";\nexport {default as median, medianIndex} from \"./median.js\";\nexport {default as merge} from \"./merge.js\";\nexport {default as min} from \"./min.js\";\nexport {default as minIndex} from \"./minIndex.js\";\nexport {default as mode} from \"./mode.js\";\nexport {default as nice} from \"./nice.js\";\nexport {default as pairs} from \"./pairs.js\";\nexport {default as permute} from \"./permute.js\";\nexport {default as quantile, quantileIndex, quantileSorted} from \"./quantile.js\";\nexport {default as quickselect} from \"./quickselect.js\";\nexport {default as range} from \"./range.js\";\nexport {default as rank} from \"./rank.js\";\nexport {default as least} from \"./least.js\";\nexport {default as leastIndex} from \"./leastIndex.js\";\nexport {default as greatest} from \"./greatest.js\";\nexport {default as greatestIndex} from \"./greatestIndex.js\";\nexport {default as scan} from \"./scan.js\"; // Deprecated; use leastIndex.\nexport {default as shuffle, shuffler} from \"./shuffle.js\";\nexport {default as sum} from \"./sum.js\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks.js\";\nexport {default as transpose} from \"./transpose.js\";\nexport {default as variance} from \"./variance.js\";\nexport {default as zip} from \"./zip.js\";\nexport {default as every} from \"./every.js\";\nexport {default as some} from \"./some.js\";\nexport {default as filter} from \"./filter.js\";\nexport {default as map} from \"./map.js\";\nexport {default as reduce} from \"./reduce.js\";\nexport {default as reverse} from \"./reverse.js\";\nexport {default as sort} from \"./sort.js\";\nexport {default as difference} from \"./difference.js\";\nexport {default as disjoint} from \"./disjoint.js\";\nexport {default as intersection} from \"./intersection.js\";\nexport {default as subset} from \"./subset.js\";\nexport {default as superset} from \"./superset.js\";\nexport {default as union} from \"./union.js\";\nexport {InternMap, InternSet} from \"internmap\";\n","import {InternSet} from \"internmap\";\n\nexport default function intersection(values, ...others) {\n  values = new InternSet(values);\n  others = others.map(set);\n  out: for (const value of values) {\n    for (const other of others) {\n      if (!other.has(value)) {\n        values.delete(value);\n        continue out;\n      }\n    }\n  }\n  return values;\n}\n\nfunction set(values) {\n  return values instanceof InternSet ? values : new InternSet(values);\n}\n","import ascending from \"./ascending.js\";\n\nexport default function least(values, compare = ascending) {\n  let min;\n  let defined = false;\n  if (compare.length === 1) {\n    let minValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, minValue) < 0\n          : ascending(value, value) === 0) {\n        min = element;\n        minValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, min) < 0\n          : compare(value, value) === 0) {\n        min = value;\n        defined = true;\n      }\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\nimport minIndex from \"./minIndex.js\";\n\nexport default function leastIndex(values, compare = ascending) {\n  if (compare.length === 1) return minIndex(values, compare);\n  let minValue;\n  let min = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (min < 0\n        ? compare(value, value) === 0\n        : compare(value, minValue) < 0) {\n      minValue = value;\n      min = index;\n    }\n  }\n  return min;\n}\n","export default function map(values, mapper) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  if (typeof mapper !== \"function\") throw new TypeError(\"mapper is not a function\");\n  return Array.from(values, (value, index) => mapper(value, index, values));\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function maxIndex(values, valueof) {\n  let max;\n  let maxIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  }\n  return maxIndex;\n}\n","export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n","import quantile, {quantileIndex} from \"./quantile.js\";\n\nexport default function median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n\nexport function medianIndex(values, valueof) {\n  return quantileIndex(values, 0.5, valueof);\n}\n","function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","export default function minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n","import {InternMap} from \"internmap\";\n\nexport default function mode(values, valueof) {\n  const counts = new InternMap();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  }\n  let modeValue;\n  let modeCount = 0;\n  for (const [value, count] of counts) {\n    if (count > modeCount) {\n      modeCount = count;\n      modeValue = value;\n    }\n  }\n  return modeValue;\n}\n","import {tickIncrement} from \"./ticks.js\";\n\nexport default function nice(start, stop, count) {\n  let prestep;\n  while (true) {\n    const step = tickIncrement(start, stop, count);\n    if (step === prestep || step === 0 || !isFinite(step)) {\n      return [start, stop];\n    } else if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n    }\n    prestep = step;\n  }\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n}\n","export default function permute(source, keys) {\n  return Array.from(keys, key => source[key]);\n}\n","import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\nimport {ascendingDefined} from \"./sort.js\";\nimport greatest from \"./greatest.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileIndex(values, p, valueof = number) {\n  if (isNaN(p = +p)) return;\n  numbers = Float64Array.from(values, (_, i) => number(valueof(values[i], i, values)));\n  if (p <= 0) return minIndex(numbers);\n  if (p >= 1) return maxIndex(numbers);\n  var numbers,\n      index = Uint32Array.from(values, (_, i) => i),\n      j = numbers.length - 1,\n      i = Math.floor(j * p);\n  quickselect(index, i, 0, j, (i, j) => ascendingDefined(numbers[i], numbers[j]));\n  i = greatest(index.subarray(0, i + 1), (i) => numbers[i]);\n  return i >= 0 ? i : -1;\n}\n","import {ascendingDefined, compareDefined} from \"./sort.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = Infinity, compare) {\n  k = Math.floor(k);\n  left = Math.floor(Math.max(0, left));\n  right = Math.floor(Math.min(array.length - 1, right));\n\n  if (!(left <= k && k <= right)) return array;\n\n  compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import ascending from \"./ascending.js\";\nimport {ascendingDefined, compareDefined} from \"./sort.js\";\n\nexport default function rank(values, valueof = ascending) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  let V = Array.from(values);\n  const R = new Float64Array(V.length);\n  if (valueof.length !== 2) V = V.map(valueof), valueof = ascending;\n  const compareIndex = (i, j) => valueof(V[i], V[j]);\n  let k, r;\n  values = Uint32Array.from(V, (_, i) => i);\n  // Risky chaining due to Safari 14 https://github.com/d3/d3-array/issues/123\n  values.sort(valueof === ascending ? (i, j) => ascendingDefined(V[i], V[j]) : compareDefined(compareIndex));\n  values.forEach((j, i) => {\n      const c = compareIndex(j, k === undefined ? j : k);\n      if (c >= 0) {\n        if (k === undefined || c > 0) k = j, r = i;\n        R[j] = r;\n      } else {\n        R[j] = NaN;\n      }\n    });\n  return R;\n}\n","export default function reduce(values, reducer, value) {\n  if (typeof reducer !== \"function\") throw new TypeError(\"reducer is not a function\");\n  const iterator = values[Symbol.iterator]();\n  let done, next, index = -1;\n  if (arguments.length < 3) {\n    ({done, value} = iterator.next());\n    if (done) return;\n    ++index;\n  }\n  while (({done, value: next} = iterator.next()), !done) {\n    value = reducer(value, next, ++index, values);\n  }\n  return value;\n}\n","export default function reverse(values) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  return Array.from(values).reverse();\n}\n","import leastIndex from \"./leastIndex.js\";\n\nexport default function scan(values, compare) {\n  const index = leastIndex(values, compare);\n  return index < 0 ? undefined : index;\n}\n","export default shuffler(Math.random);\n\nexport function shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n    while (m) {\n      const i = random() * m-- | 0, t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n    return array;\n  };\n}\n","export default function some(values, test) {\n  if (typeof test !== \"function\") throw new TypeError(\"test is not a function\");\n  let index = -1;\n  for (const value of values) {\n    if (test(value, ++index, values)) {\n      return true;\n    }\n  }\n  return false;\n}\n","import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n","import superset from \"./superset.js\";\n\nexport default function subset(values, other) {\n  return superset(other, values);\n}\n","export default function sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n","export default function superset(values, other) {\n  const iterator = values[Symbol.iterator](), set = new Set();\n  for (const o of other) {\n    const io = intern(o);\n    if (set.has(io)) continue;\n    let value, done;\n    while (({value, done} = iterator.next())) {\n      if (done) return false;\n      const ivalue = intern(value);\n      set.add(ivalue);\n      if (Object.is(io, ivalue)) break;\n    }\n  }\n  return true;\n}\n\nfunction intern(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n","import count from \"../count.js\";\nimport quantile from \"../quantile.js\";\n\nexport default function thresholdFreedmanDiaconis(values, min, max) {\n  const c = count(values), d = quantile(values, 0.75) - quantile(values, 0.25);\n  return c && d ? Math.ceil((max - min) / (2 * d * Math.pow(c, -1 / 3))) : 1;\n}\n","import count from \"../count.js\";\nimport deviation from \"../deviation.js\";\n\nexport default function thresholdScott(values, min, max) {\n  const c = count(values), d = deviation(values);\n  return c && d ? Math.ceil((max - min) * Math.cbrt(c) / (3.49 * d)) : 1;\n}\n","import count from \"../count.js\";\n\nexport default function thresholdSturges(values) {\n  return Math.max(1, Math.ceil(Math.log(count(values)) / Math.LN2) + 1);\n}\n","const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n","import min from \"./min.js\";\n\nexport default function transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import {InternSet} from \"internmap\";\n\nexport default function union(...others) {\n  const set = new InternSet();\n  for (const other of others) {\n    for (const o of other) {\n      set.add(o);\n    }\n  }\n  return set;\n}\n","export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","export {default as color, rgb, hsl} from \"./color.js\";\nexport {default as lab, hcl, lch, gray} from \"./lab.js\";\nexport {default as cubehelix} from \"./cubehelix.js\";\n","import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\n// https://observablehq.com/@mbostock/lab-and-rgb\nconst K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) return hcl2lab(o);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n  if (r === g && g === b) x = z = y; else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nexport function gray(l, opacity) {\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\n}\n\nexport default function lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nexport function Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * degrees;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nexport function lch(l, c, h, opacity) {\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nfunction hcl2lab(o) {\n  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n  var h = o.h * radians;\n  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb() {\n    return hcl2lab(this).rgb();\n  }\n}));\n","export const radians = Math.PI / 180;\nexport const degrees = 180 / Math.PI;\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","export {default as formatDefaultLocale, format, formatPrefix} from \"./defaultLocale.js\";\nexport {default as formatLocale} from \"./locale.js\";\nexport {default as formatSpecifier, FormatSpecifier} from \"./formatSpecifier.js\";\nexport {default as precisionFixed} from \"./precisionFixed.js\";\nexport {default as precisionPrefix} from \"./precisionPrefix.js\";\nexport {default as precisionRound} from \"./precisionRound.js\";\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","export default x => () => x;\n","import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","export default function(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n","import {hcl as colorHcl} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction hcl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n        c = color(start.c, end.c),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.c = c(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hcl(hue);\nexport var hclLong = hcl(color);\n","import {hsl as colorHsl} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction hsl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n        s = color(start.s, end.s),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.s = s(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hsl(hue);\nexport var hslLong = hsl(color);\n","import {hue} from \"./color.js\";\n\nexport default function(a, b) {\n  var i = hue(+a, +b);\n  return function(t) {\n    var x = i(t);\n    return x - 360 * Math.floor(x / 360);\n  };\n}\n","export {default as interpolate} from \"./value.js\";\nexport {default as interpolateArray} from \"./array.js\";\nexport {default as interpolateBasis} from \"./basis.js\";\nexport {default as interpolateBasisClosed} from \"./basisClosed.js\";\nexport {default as interpolateDate} from \"./date.js\";\nexport {default as interpolateDiscrete} from \"./discrete.js\";\nexport {default as interpolateHue} from \"./hue.js\";\nexport {default as interpolateNumber} from \"./number.js\";\nexport {default as interpolateNumberArray} from \"./numberArray.js\";\nexport {default as interpolateObject} from \"./object.js\";\nexport {default as interpolateRound} from \"./round.js\";\nexport {default as interpolateString} from \"./string.js\";\nexport {interpolateTransformCss, interpolateTransformSvg} from \"./transform/index.js\";\nexport {default as interpolateZoom} from \"./zoom.js\";\nexport {default as interpolateRgb, rgbBasis as interpolateRgbBasis, rgbBasisClosed as interpolateRgbBasisClosed} from \"./rgb.js\";\nexport {default as interpolateHsl, hslLong as interpolateHslLong} from \"./hsl.js\";\nexport {default as interpolateLab} from \"./lab.js\";\nexport {default as interpolateHcl, hclLong as interpolateHclLong} from \"./hcl.js\";\nexport {default as interpolateCubehelix, cubehelixLong as interpolateCubehelixLong} from \"./cubehelix.js\";\nexport {default as piecewise} from \"./piecewise.js\";\nexport {default as quantize} from \"./quantize.js\";\n","import {lab as colorLab} from \"d3-color\";\nimport color from \"./color.js\";\n\nexport default function lab(start, end) {\n  var l = color((start = colorLab(start)).l, (end = colorLab(end)).l),\n      a = color(start.a, end.a),\n      b = color(start.b, end.b),\n      opacity = color(start.opacity, end.opacity);\n  return function(t) {\n    start.l = l(t);\n    start.a = a(t);\n    start.b = b(t);\n    start.opacity = opacity(t);\n    return start + \"\";\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import {default as value} from \"./value.js\";\n\nexport default function piecewise(interpolate, values) {\n  if (values === undefined) values = interpolate, interpolate = value;\n  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\n  while (i < n) I[i] = interpolate(v, v = values[++i]);\n  return function(t) {\n    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n    return I[i](t - i);\n  };\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","var epsilon2 = 1e-12;\n\nfunction cosh(x) {\n  return ((x = Math.exp(x)) + 1 / x) / 2;\n}\n\nfunction sinh(x) {\n  return ((x = Math.exp(x)) - 1 / x) / 2;\n}\n\nfunction tanh(x) {\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n}\n\nexport default (function zoomRho(rho, rho2, rho4) {\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function zoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000 * rho / Math.SQRT2;\n\n    return i;\n  }\n\n  zoom.rho = function(_) {\n    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;\n    return zoomRho(_1, _2, _4);\n  };\n\n  return zoom;\n})(Math.SQRT2, 2, 4);\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init.js\";\nimport ordinal from \"./ordinal.js\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","import {interpolate, interpolateRound, piecewise} from \"d3-interpolate\";\nimport {identity} from \"./continuous.js\";\nimport {initInterpolator} from \"./init.js\";\nimport {linearish} from \"./linear.js\";\nimport {loggish} from \"./log.js\";\nimport {copy} from \"./sequential.js\";\nimport {symlogish} from \"./symlog.js\";\nimport {powish} from \"./pow.js\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      s = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1, r2;\n      return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n    };\n  }\n\n  scale.range = range(interpolate);\n\n  scale.rangeRound = range(interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n    return scale;\n  };\n}\n\nexport default function diverging() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingLog() {\n  var scale = loggish(transformer()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n","import {linearish} from \"./linear.js\";\nimport number from \"./number.js\";\n\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? Array.from(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n","export {\n  default as scaleBand,\n  point as scalePoint\n} from \"./band.js\";\n\nexport {\n  default as scaleIdentity\n} from \"./identity.js\";\n\nexport {\n  default as scaleLinear\n} from \"./linear.js\";\n\nexport {\n  default as scaleLog\n} from \"./log.js\";\n\nexport {\n  default as scaleSymlog\n} from \"./symlog.js\";\n\nexport {\n  default as scaleOrdinal,\n  implicit as scaleImplicit\n} from \"./ordinal.js\";\n\nexport {\n  default as scalePow,\n  sqrt as scaleSqrt\n} from \"./pow.js\";\n\nexport {\n  default as scaleRadial\n} from \"./radial.js\";\n\nexport {\n  default as scaleQuantile\n} from \"./quantile.js\";\n\nexport {\n  default as scaleQuantize\n} from \"./quantize.js\";\n\nexport {\n  default as scaleThreshold\n} from \"./threshold.js\";\n\nexport {\n  default as scaleTime\n} from \"./time.js\";\n\nexport {\n  default as scaleUtc\n} from \"./utcTime.js\";\n\nexport {\n  default as scaleSequential,\n  sequentialLog as scaleSequentialLog,\n  sequentialPow as scaleSequentialPow,\n  sequentialSqrt as scaleSequentialSqrt,\n  sequentialSymlog as scaleSequentialSymlog\n} from \"./sequential.js\";\n\nexport {\n  default as scaleSequentialQuantile\n} from \"./sequentialQuantile.js\";\n\nexport {\n  default as scaleDiverging,\n  divergingLog as scaleDivergingLog,\n  divergingPow as scaleDivergingPow,\n  divergingSqrt as scaleDivergingSqrt,\n  divergingSymlog as scaleDivergingSymlog\n} from \"./diverging.js\";\n\nexport {\n  default as tickFormat\n} from \"./tickFormat.js\";\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {ticks} from \"d3-array\";\nimport {format, formatSpecifier} from \"d3-format\";\nimport nice from \"./nice.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : x => Math.pow(base, x);\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), x => Math.log(x) / base);\n}\n\nfunction reflect(f) {\n  return (x, k) => -f(-x, k);\n}\n\nexport function loggish(transform) {\n  const scale = transform(transformLog, transformExp);\n  const domain = scale.domain;\n  let base = 10;\n  let logs;\n  let pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = count => {\n    const d = domain();\n    let u = d[0];\n    let v = d[d.length - 1];\n    const r = v < u;\n\n    if (r) ([u, v] = [v, u]);\n\n    let i = logs(u);\n    let j = logs(v);\n    let k;\n    let t;\n    const n = count == null ? 10 : +count;\n    let z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1; k < base; ++k) {\n          t = i < 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1; k >= 1; --k) {\n          t = i > 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = ticks(u, v, n);\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = (count, specifier) => {\n    if (count == null) count = 10;\n    if (specifier == null) specifier = base === 10 ? \"s\" : \",\";\n    if (typeof specifier !== \"function\") {\n      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;\n      specifier = format(specifier);\n    }\n    if (count === Infinity) return specifier;\n    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return d => {\n      let i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = () => {\n    return domain(nice(domain(), {\n      floor: x => pows(Math.floor(logs(x))),\n      ceil: x => pows(Math.ceil(logs(x)))\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  const scale = loggish(transformer()).domain([1, 10]);\n  scale.copy = () => copy(scale, log()).base(scale.base());\n  initRange.apply(scale, arguments);\n  return scale;\n}\n","export default function nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","export default function number(x) {\n  return +x;\n}\n","import {InternMap} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, identity, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nexport function powish(transform) {\n  var scale = transform(identity, identity),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity, identity)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nexport default function pow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nexport function sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n","import {ascending, bisect, quantileSorted as threshold} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {linearish} from \"./linear.js\";\nimport {initRange} from \"./init.js\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n","import continuous from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport {linearish} from \"./linear.js\";\nimport number from \"./number.js\";\n\nfunction square(x) {\n  return Math.sign(x) * x * x;\n}\n\nfunction unsquare(x) {\n  return Math.sign(x) * Math.sqrt(Math.abs(x));\n}\n\nexport default function radial() {\n  var squared = continuous(),\n      range = [0, 1],\n      round = false,\n      unknown;\n\n  function scale(x) {\n    var y = unsquare(squared(x));\n    return isNaN(y) ? unknown : round ? Math.round(y) : y;\n  }\n\n  scale.invert = function(y) {\n    return squared.invert(square(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (squared.domain(_), scale) : squared.domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (squared.range((range = Array.from(_, number)).map(square)), scale) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return scale.range(_).round(true);\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, scale) : round;\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return radial(squared.domain(), range)\n        .round(round)\n        .clamp(squared.clamp())\n        .unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {interpolate, interpolateRound} from \"d3-interpolate\";\nimport {identity} from \"./continuous.js\";\nimport {initInterpolator} from \"./init.js\";\nimport {linearish} from \"./linear.js\";\nimport {loggish} from \"./log.js\";\nimport {symlogish} from \"./symlog.js\";\nimport {powish} from \"./pow.js\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1;\n      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n    };\n  }\n\n  scale.range = range(interpolate);\n\n  scale.rangeRound = range(interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport default function sequential() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialLog() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n","import {ascending, bisect, quantile} from \"d3-array\";\nimport {identity} from \"./continuous.js\";\nimport {initInterpolator} from \"./init.js\";\n\nexport default function sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (x != null && !isNaN(x = +x)) return interpolator((bisect(domain, x, 1) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.range = function() {\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n  };\n\n  scale.quantiles = function(n) {\n    return Array.from({length: n + 1}, (_, i) => quantile(domain, i / n));\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nexport function symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nexport default function symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeTicks, timeTickInterval} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport nice from \"./nice.js\";\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {\n  var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval) {\n    var d = domain();\n    if (!interval || typeof interval.range !== \"function\") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);\n    return interval ? domain(nice(d, interval)) : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));\n  };\n\n  return scale;\n}\n\nexport default function time() {\n  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n","import {utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcTicks, utcTickInterval} from \"d3-time\";\nimport {utcFormat} from \"d3-time-format\";\nimport {calendar} from \"./time.js\";\nimport {initRange} from \"./init.js\";\n\nexport default function utcTime() {\n  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","export {default as timeFormatDefaultLocale, timeFormat, timeParse, utcFormat, utcParse} from \"./defaultLocale.js\";\nexport {default as timeFormatLocale} from \"./locale.js\";\nexport {default as isoFormat} from \"./isoFormat.js\";\nexport {default as isoParse} from \"./isoParse.js\";\n","import {utcFormat} from \"./defaultLocale.js\";\n\nexport var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString\n    ? formatIsoNative\n    : utcFormat(isoSpecifier);\n\nexport default formatIso;\n","import {isoSpecifier} from \"./isoFormat.js\";\nimport {utcParse} from \"./defaultLocale.js\";\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n    ? parseIsoNative\n    : utcParse(isoSpecifier);\n\nexport default parseIso;\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newDate(y, m, d) {\n  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"g\": formatYearISO,\n    \"G\": formatFullYearISO,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"q\": formatQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"g\": formatUTCYearISO,\n    \"G\": formatUTCFullYearISO,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"q\": formatUTCQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"g\": parseYear,\n    \"G\": parseFullYear,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"q\": parseQuarter,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, Z) {\n    return function(string) {\n      var d = newDate(1900, undefined, 1),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n      if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\n\n      // If this is utcParse, never use the local timezone.\n      if (Z && !(\"Z\" in d)) d.Z = 0;\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // If the month was not specified, inherit from the quarter.\n      if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return localDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatQuarter(d) {\n    return 1 + ~~(d.getMonth() / 3);\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  function formatUTCQuarter(d) {\n    return 1 + ~~(d.getUTCMonth() / 3);\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", false);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier += \"\", true);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  return new Map(names.map((name, i) => [name.toLowerCase(), i]));\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseQuarter(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.s = +n[0], i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction dISO(d) {\n  var day = d.getDay();\n  return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  d = dISO(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatYearISO(d, p) {\n  d = dISO(d);\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatFullYearISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction UTCdISO(d) {\n  var day = d.getUTCDay();\n  return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  d = UTCdISO(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCYearISO(d, p) {\n  d = UTCdISO(d);\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCFullYearISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","import {timeInterval} from \"./interval.js\";\nimport {durationDay, durationMinute} from \"./duration.js\";\n\nexport const timeDay = timeInterval(\n  date => date.setHours(0, 0, 0, 0),\n  (date, step) => date.setDate(date.getDate() + step),\n  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,\n  date => date.getDate() - 1\n);\n\nexport const timeDays = timeDay.range;\n\nexport const utcDay = timeInterval((date) => {\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCDate(date.getUTCDate() + step);\n}, (start, end) => {\n  return (end - start) / durationDay;\n}, (date) => {\n  return date.getUTCDate() - 1;\n});\n\nexport const utcDays = utcDay.range;\n\nexport const unixDay = timeInterval((date) => {\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCDate(date.getUTCDate() + step);\n}, (start, end) => {\n  return (end - start) / durationDay;\n}, (date) => {\n  return Math.floor(date / durationDay);\n});\n\nexport const unixDays = unixDay.range;\n","export const durationSecond = 1000;\nexport const durationMinute = durationSecond * 60;\nexport const durationHour = durationMinute * 60;\nexport const durationDay = durationHour * 24;\nexport const durationWeek = durationDay * 7;\nexport const durationMonth = durationDay * 30;\nexport const durationYear = durationDay * 365;\n","import {timeInterval} from \"./interval.js\";\nimport {durationHour, durationMinute, durationSecond} from \"./duration.js\";\n\nexport const timeHour = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}, (date, step) => {\n  date.setTime(+date + step * durationHour);\n}, (start, end) => {\n  return (end - start) / durationHour;\n}, (date) => {\n  return date.getHours();\n});\n\nexport const timeHours = timeHour.range;\n\nexport const utcHour = timeInterval((date) => {\n  date.setUTCMinutes(0, 0, 0);\n}, (date, step) => {\n  date.setTime(+date + step * durationHour);\n}, (start, end) => {\n  return (end - start) / durationHour;\n}, (date) => {\n  return date.getUTCHours();\n});\n\nexport const utcHours = utcHour.range;\n","export {\n  timeInterval\n} from \"./interval.js\";\n\nexport {\n  millisecond as utcMillisecond,\n  milliseconds as utcMilliseconds,\n  millisecond as timeMillisecond,\n  milliseconds as timeMilliseconds\n} from \"./millisecond.js\";\n\nexport {\n  second as utcSecond,\n  seconds as utcSeconds,\n  second as timeSecond,\n  seconds as timeSeconds\n} from \"./second.js\";\n\nexport {\n  timeMinute,\n  timeMinutes,\n  utcMinute,\n  utcMinutes\n} from \"./minute.js\";\n\nexport {\n  timeHour,\n  timeHours,\n  utcHour,\n  utcHours\n} from \"./hour.js\";\n\nexport {\n  timeDay,\n  timeDays,\n  utcDay,\n  utcDays,\n  unixDay,\n  unixDays\n} from \"./day.js\";\n\nexport {\n  timeSunday as timeWeek,\n  timeSundays as timeWeeks,\n  timeSunday,\n  timeSundays,\n  timeMonday,\n  timeMondays,\n  timeTuesday,\n  timeTuesdays,\n  timeWednesday,\n  timeWednesdays,\n  timeThursday,\n  timeThursdays,\n  timeFriday,\n  timeFridays,\n  timeSaturday,\n  timeSaturdays,\n  utcSunday as utcWeek,\n  utcSundays as utcWeeks,\n  utcSunday,\n  utcSundays,\n  utcMonday,\n  utcMondays,\n  utcTuesday,\n  utcTuesdays,\n  utcWednesday,\n  utcWednesdays,\n  utcThursday,\n  utcThursdays,\n  utcFriday,\n  utcFridays,\n  utcSaturday,\n  utcSaturdays\n} from \"./week.js\";\n\nexport {\n  timeMonth,\n  timeMonths,\n  utcMonth,\n  utcMonths\n} from \"./month.js\";\n\nexport {\n  timeYear,\n  timeYears,\n  utcYear,\n  utcYears\n} from \"./year.js\";\n\nexport {\n  utcTicks,\n  utcTickInterval,\n  timeTicks,\n  timeTickInterval\n} from \"./ticks.js\";\n","const t0 = new Date, t1 = new Date;\n\nexport function timeInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = (date) => {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = (date) => {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = (date) => {\n    const d0 = interval(date), d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = (date, step) => {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = (start, stop, step) => {\n    const range = [];\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    let previous;\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = (test) => {\n    return timeInterval((date) => {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, (date, step) => {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = (start, end) => {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = (step) => {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? (d) => field(d) % step === 0\n              : (d) => interval.count(0, d) % step === 0);\n    };\n  }\n\n  return interval;\n}\n","import {timeInterval} from \"./interval.js\";\n\nexport const millisecond = timeInterval(() => {\n  // noop\n}, (date, step) => {\n  date.setTime(+date + step);\n}, (start, end) => {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = (k) => {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return timeInterval((date) => {\n    date.setTime(Math.floor(date / k) * k);\n  }, (date, step) => {\n    date.setTime(+date + step * k);\n  }, (start, end) => {\n    return (end - start) / k;\n  });\n};\n\nexport const milliseconds = millisecond.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationMinute, durationSecond} from \"./duration.js\";\n\nexport const timeMinute = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n}, (date, step) => {\n  date.setTime(+date + step * durationMinute);\n}, (start, end) => {\n  return (end - start) / durationMinute;\n}, (date) => {\n  return date.getMinutes();\n});\n\nexport const timeMinutes = timeMinute.range;\n\nexport const utcMinute = timeInterval((date) => {\n  date.setUTCSeconds(0, 0);\n}, (date, step) => {\n  date.setTime(+date + step * durationMinute);\n}, (start, end) => {\n  return (end - start) / durationMinute;\n}, (date) => {\n  return date.getUTCMinutes();\n});\n\nexport const utcMinutes = utcMinute.range;\n","import {timeInterval} from \"./interval.js\";\n\nexport const timeMonth = timeInterval((date) => {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setMonth(date.getMonth() + step);\n}, (start, end) => {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, (date) => {\n  return date.getMonth();\n});\n\nexport const timeMonths = timeMonth.range;\n\nexport const utcMonth = timeInterval((date) => {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, (start, end) => {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, (date) => {\n  return date.getUTCMonth();\n});\n\nexport const utcMonths = utcMonth.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationSecond} from \"./duration.js\";\n\nexport const second = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds());\n}, (date, step) => {\n  date.setTime(+date + step * durationSecond);\n}, (start, end) => {\n  return (end - start) / durationSecond;\n}, (date) => {\n  return date.getUTCSeconds();\n});\n\nexport const seconds = second.range;\n","import {bisector, tickStep} from \"d3-array\";\nimport {durationDay, durationHour, durationMinute, durationMonth, durationSecond, durationWeek, durationYear} from \"./duration.js\";\nimport {millisecond} from \"./millisecond.js\";\nimport {second} from \"./second.js\";\nimport {timeMinute, utcMinute} from \"./minute.js\";\nimport {timeHour, utcHour} from \"./hour.js\";\nimport {timeDay, unixDay} from \"./day.js\";\nimport {timeSunday, utcSunday} from \"./week.js\";\nimport {timeMonth, utcMonth} from \"./month.js\";\nimport {timeYear, utcYear} from \"./year.js\";\n\nfunction ticker(year, month, week, day, hour, minute) {\n\n  const tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function ticks(start, stop, count) {\n    const reverse = stop < start;\n    if (reverse) [start, stop] = [stop, start];\n    const interval = count && typeof count.range === \"function\" ? count : tickInterval(start, stop, count);\n    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop\n    return reverse ? ticks.reverse() : ticks;\n  }\n\n  function tickInterval(start, stop, count) {\n    const target = Math.abs(stop - start) / count;\n    const i = bisector(([,, step]) => step).right(tickIntervals, target);\n    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));\n    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));\n    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n    return t.every(step);\n  }\n\n  return [ticks, tickInterval];\n}\n\nconst [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);\nconst [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);\n\nexport {utcTicks, utcTickInterval, timeTicks, timeTickInterval};\n","import {timeInterval} from \"./interval.js\";\nimport {durationMinute, durationWeek} from \"./duration.js\";\n\nfunction timeWeekday(i) {\n  return timeInterval((date) => {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setDate(date.getDate() + step * 7);\n  }, (start, end) => {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport const timeSunday = timeWeekday(0);\nexport const timeMonday = timeWeekday(1);\nexport const timeTuesday = timeWeekday(2);\nexport const timeWednesday = timeWeekday(3);\nexport const timeThursday = timeWeekday(4);\nexport const timeFriday = timeWeekday(5);\nexport const timeSaturday = timeWeekday(6);\n\nexport const timeSundays = timeSunday.range;\nexport const timeMondays = timeMonday.range;\nexport const timeTuesdays = timeTuesday.range;\nexport const timeWednesdays = timeWednesday.range;\nexport const timeThursdays = timeThursday.range;\nexport const timeFridays = timeFriday.range;\nexport const timeSaturdays = timeSaturday.range;\n\nfunction utcWeekday(i) {\n  return timeInterval((date) => {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, (start, end) => {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport const utcSunday = utcWeekday(0);\nexport const utcMonday = utcWeekday(1);\nexport const utcTuesday = utcWeekday(2);\nexport const utcWednesday = utcWeekday(3);\nexport const utcThursday = utcWeekday(4);\nexport const utcFriday = utcWeekday(5);\nexport const utcSaturday = utcWeekday(6);\n\nexport const utcSundays = utcSunday.range;\nexport const utcMondays = utcMonday.range;\nexport const utcTuesdays = utcTuesday.range;\nexport const utcWednesdays = utcWednesday.range;\nexport const utcThursdays = utcThursday.range;\nexport const utcFridays = utcFriday.range;\nexport const utcSaturdays = utcSaturday.range;\n","import {timeInterval} from \"./interval.js\";\n\nexport const timeYear = timeInterval((date) => {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setFullYear(date.getFullYear() + step);\n}, (start, end) => {\n  return end.getFullYear() - start.getFullYear();\n}, (date) => {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\ntimeYear.every = (k) => {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport const timeYears = timeYear.range;\n\nexport const utcYear = timeInterval((date) => {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, (start, end) => {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, (date) => {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = (k) => {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport const utcYears = utcYear.range;\n","export class InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nexport class InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(key);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n"],"names":[],"sourceRoot":""}