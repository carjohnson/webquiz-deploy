{"version":3,"file":"vendors-node_modules_itk-wasm_dist_index_js.js","mappingszJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1CA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7IA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Ccast-image.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Ccopy-image.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cmesh-to-poly-data.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cpoly-data-to-mesh.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-dicom-tags-array-buffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-dicom-tags.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-image-array-buffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-image-blob.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-image-dicom-array-buffer-series.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-image-dicom-file-series.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-image-file-series.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-image-file.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-mesh-array-buffer.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cdeprecated%5Cread-mesh-file.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cget-file-extension.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cget-matrix-element.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cimage-shared-buffer-or-copy.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cindex-common.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cimage-type.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cimage.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cindex-common.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cmesh-type.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cmesh.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cpixel-types.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cpoly-data-type.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cinterface-types%5Cpoly-data.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Ccreate-web-worker.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Ccreate-worker-proxy.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Cdefault-web-worker.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Cindex-common.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Cinternal%5Cload-emscripten-module-main-thread.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Cpipeline-worker-url.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Cpipelines-base-url.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cpipeline%5Crun-pipeline.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cset-matrix-element.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cstack-images.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cversion.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cworker-pool%5Cindex.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Citk-wasm%5Cdist%5Cworker-pool%5Cworker-pool.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif%5Cnode_modules%5Cwasm-feature-detect%5Cdist%5Cesm%5Cindex.js"],"sourcesContent":["import Image from './interface-types/image.js';\nimport PixelTypes from './interface-types/pixel-types.js';\nimport IntTypes from './interface-types/int-types.js';\nimport FloatTypes from './interface-types/float-types.js';\n/**\n * Cast an image to another PixelType and/or ComponentType\n *\n * @param {Image} image - The input image\n * @param {CastImageOptions} options - specify the componentType and/or pixelType of the output\n */\nfunction castImage(inputImage, options) {\n    const outputImageType = { ...inputImage.imageType };\n    if (typeof options !== 'undefined' && typeof options.pixelType !== 'undefined') {\n        outputImageType.pixelType = options.pixelType;\n        if (options.pixelType === PixelTypes.Scalar && outputImageType.components !== 1) {\n            throw new Error('Cannot cast multi-component image to a scalar image');\n        }\n    }\n    if (typeof options !== 'undefined' && typeof options.componentType !== 'undefined' && options.componentType !== inputImage.imageType.componentType) {\n        outputImageType.componentType = options.componentType;\n    }\n    const outputImage = new Image(outputImageType);\n    outputImage.name = inputImage.name;\n    outputImage.origin = Array.from(inputImage.origin);\n    outputImage.spacing = Array.from(inputImage.spacing);\n    outputImage.direction = inputImage.direction.slice();\n    outputImage.size = Array.from(inputImage.size);\n    // Deep copy the map\n    outputImage.metadata = new Map(JSON.parse(JSON.stringify(Array.from(inputImage.metadata))));\n    if (inputImage.data !== null) {\n        if (typeof options !== 'undefined' && typeof options.componentType !== 'undefined' && options.componentType !== inputImage.imageType.componentType) {\n            switch (inputImage.imageType.componentType) {\n                case IntTypes.UInt8:\n                case IntTypes.Int8:\n                case IntTypes.UInt16:\n                case IntTypes.Int16:\n                case IntTypes.UInt32:\n                case IntTypes.Int32:\n                case FloatTypes.Float32:\n                case FloatTypes.Float64:\n                    switch (outputImage.imageType.componentType) {\n                        case IntTypes.UInt8:\n                            outputImage.data = new Uint8Array(inputImage.data);\n                            break;\n                        case IntTypes.Int8:\n                            outputImage.data = new Int8Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt16:\n                            outputImage.data = new Uint16Array(inputImage.data);\n                            break;\n                        case IntTypes.Int16:\n                            outputImage.data = new Int16Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt32:\n                            outputImage.data = new Uint32Array(inputImage.data);\n                            break;\n                        case IntTypes.Int32:\n                            outputImage.data = new Int32Array(inputImage.data);\n                            break;\n                        case FloatTypes.Float32:\n                            outputImage.data = new Float32Array(inputImage.data);\n                            break;\n                        case FloatTypes.Float64:\n                            outputImage.data = new Float64Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt64:\n                            outputImage.data = new BigUint64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = BigInt.asIntN(64, BigInt(inputImage.data[idx]));\n                            }\n                            break;\n                        case IntTypes.Int64:\n                            outputImage.data = new BigInt64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = BigInt.asUintN(64, BigInt(inputImage.data[idx]));\n                            }\n                            break;\n                    }\n                    break;\n                case IntTypes.UInt64:\n                case IntTypes.Int64:\n                    switch (outputImage.imageType.componentType) {\n                        case IntTypes.UInt8:\n                            outputImage.data = new Uint8Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int8:\n                            outputImage.data = new Int8Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt16:\n                            outputImage.data = new Uint16Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int16:\n                            outputImage.data = new Int16Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt32:\n                            outputImage.data = new Uint32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int32:\n                            outputImage.data = new Int32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case FloatTypes.Float32:\n                            outputImage.data = new Float32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case FloatTypes.Float64:\n                            outputImage.data = new Float64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt64:\n                            outputImage.data = new BigUint64Array(inputImage.data);\n                            break;\n                        case IntTypes.Int64:\n                            outputImage.data = new BigInt64Array(inputImage.data);\n                            break;\n                    }\n                    break;\n            }\n        }\n        else {\n            // copy\n            const CTor = inputImage.data.constructor;\n            outputImage.data = new CTor(inputImage.data.length);\n            if (outputImage.data != null) {\n                // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'\n                outputImage.data.set(inputImage.data, 0);\n            }\n        }\n    }\n    return outputImage;\n}\nexport default castImage;\n//# sourceMappingURL=cast-image.js.map","import Image from './interface-types/image.js';\nfunction copyImage(image) {\n    const copy = new Image(image.imageType);\n    copy.name = image.name;\n    copy.origin = Array.from(image.origin);\n    copy.spacing = Array.from(image.spacing);\n    copy.direction = image.direction.slice();\n    copy.size = Array.from(image.size);\n    if (image.data !== null) {\n        const CTor = image.data.constructor;\n        copy.data = new CTor(image.data.length);\n        if (copy.data != null) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'\n            copy.data.set(image.data, 0);\n        }\n    }\n    return copy;\n}\nexport default copyImage;\n//# sourceMappingURL=copy-image.js.map","import readDICOMTags from './read-dicom-tags.js';\nimport readDICOMTagsArrayBuffer from './read-dicom-tags-array-buffer.js';\nimport readImageDICOMFileSeries from './read-image-dicom-file-series.js';\nimport readImageDICOMArrayBufferSeries from './read-image-dicom-array-buffer-series.js';\nimport meshToPolyData from './mesh-to-poly-data.js';\nimport polyDataToMesh from './poly-data-to-mesh.js';\nimport readImageArrayBuffer from './read-image-array-buffer.js';\nimport readImageBlob from './read-image-blob.js';\nimport readImageFile from './read-image-file.js';\nimport readImageFileSeries from './read-image-file-series.js';\nimport readMeshArrayBuffer from './read-mesh-array-buffer.js';\nimport readMeshFile from './read-mesh-file.js';\nexport { readDICOMTags };\nexport { readDICOMTagsArrayBuffer };\nexport { readImageDICOMFileSeries };\nexport { readImageDICOMArrayBufferSeries };\nexport { meshToPolyData };\nexport { polyDataToMesh };\nexport { readImageArrayBuffer };\nexport { readImageBlob };\nexport { readImageFile };\nexport { readImageFileSeries };\nexport { readMeshArrayBuffer };\nexport { readMeshFile };\n//# sourceMappingURL=index.js.map","// @ts-nocheck\n/**\n * @deprecated Use meshToPolyData from @itk-wasm/mesh-to-poly-data instead\n */\nasync function meshToPolyData(webWorker, mesh) {\n    throw new Error('This function has been migrated to the @itk-wasm/mesh-to-poly-data package.');\n}\nexport default meshToPolyData;\n//# sourceMappingURL=mesh-to-poly-data.js.map","// @ts-nocheck\n/**\n * @deprecated Use polyDataToMesh from @itk-wasm/mesh-to-poly-data instead\n */\nasync function polyDataToMesh(webWorker, polyData) {\n    throw new Error('This function has been migrated to the @itk-wasm/mesh-to-poly-data package.');\n}\nexport default polyDataToMesh;\n//# sourceMappingURL=poly-data-to-mesh.js.map","// @ts-nocheck\n/**\n *\n * @deprecated Use readDicomTags from @itk-wasm/dicom instead\n */\nasync function readDICOMTagsArrayBuffer(webWorker, arrayBuffer, tags = null) {\n    throw new Error('readDICOMTagsArrayBuffer is deprecated. Use readDicomTags from @itk-wasm/dicom instead.');\n}\nexport default readDICOMTagsArrayBuffer;\n//# sourceMappingURL=read-dicom-tags-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readDicomTags from @itk-wasm/dicom instead\n */\nasync function readDICOMTags(webWorker, file, tags = null) {\n    throw new Error('readDICOMTags is deprecated. Use readDicomTags from @itk-wasm/dicom instead.');\n}\nexport default readDICOMTags;\n//# sourceMappingURL=read-dicom-tags.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageArrayBuffer from @itk-wasm/image-io instead\n */\nasync function readImageArrayBuffer(webWorker, arrayBuffer, fileName, options) {\n    throw new Error('readImageArrayBuffer is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageArrayBuffer;\n//# sourceMappingURL=read-image-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageBlob from @itk-wasm/image-io instead\n */\nasync function readImageBlob(webWorker, blob, fileName, options) {\n    throw new Error('readImageBlob is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageBlob;\n//# sourceMappingURL=read-image-blob.js.map","// @ts-nocheck\n/**\n *\n * @deprecated Use readImageDicomFileSeries from @itk-wasm/dicom instead\n */\nconst readImageDICOMArrayBufferSeries = async (arrayBuffers, options, fileNamesBackwardsCompatibility) => {\n    throw new Error('readImageDICOMArrayBufferSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.');\n};\nexport default readImageDICOMArrayBufferSeries;\n//# sourceMappingURL=read-image-dicom-array-buffer-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageDicomFileSeries from @itk-wasm/dicom instead\n */\nconst readImageDICOMFileSeries = async (fileList, options) => {\n    throw new Error('readImageDICOMFileSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.');\n};\nexport default readImageDICOMFileSeries;\n//# sourceMappingURL=read-image-dicom-file-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageFileSeries from @itk-wasm/image-io instead\n */\nasync function readImageFileSeries(fileList, options, zOriginBackwardsCompatibility, sortedSeriesBackwardsCompatibility) {\n    throw new Error('readImageFileSeries is deprecated. Use readImageFileSeries from @itk-wasm/image-io instead.');\n}\nexport default readImageFileSeries;\n//# sourceMappingURL=read-image-file-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageFile from @itk-wasm/image-io instead\n */\nasync function readImageFile(webWorker, file, options) {\n    throw new Error('readImageFile is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageFile;\n//# sourceMappingURL=read-image-file.js.map","// @ts-nocheck\n/**\n * @deprecated Use readMeshArrayBuffer from @itk-wasm/image-io instead\n */\nasync function readMeshArrayBuffer(webWorker, arrayBuffer, fileName, mimeType) {\n    throw new Error('readMeshArrayBuffer is deprecated. Use readMeshFile from @itk-wasm/mesh-io instead.');\n}\nexport default readMeshArrayBuffer;\n//# sourceMappingURL=read-mesh-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readMeshFile from @itk-wasm/mesh-io instead\n */\nasync function readMeshFile(webWorker, file) {\n    throw new Error('readMeshFile is deprecated. Use readMeshFile from @itk-wasm/mesh-io instead.');\n}\nexport default readMeshFile;\n//# sourceMappingURL=read-mesh-file.js.map","function getFileExtension(filePath) {\n    let extension = filePath.slice((filePath.lastIndexOf('.') - 1 >>> 0) + 2);\n    if (extension.toLowerCase() === 'gz') {\n        const index = filePath.slice(0, -3).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'cbor') {\n        const index = filePath.slice(0, -5).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'zst') {\n        // .iwi.cbor.zstd\n        const index = filePath.slice(0, -10).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'zip') {\n        const index = filePath.slice(0, -4).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    return extension;\n}\nexport default getFileExtension;\n//# sourceMappingURL=get-file-extension.js.map","function getMatrixElement(matrixData, columns, row, column) {\n    return matrixData[column + row * columns];\n}\nexport default getMatrixElement;\n//# sourceMappingURL=get-matrix-element.js.map","import copyImage from './copy-image.js';\nconst haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function';\n/** If SharedArrayBuffer's are available, ensure an itk.Image's buffer is a\n * SharedArrayBuffer. If SharedArrayBuffer's are not available, return a copy.\n * */\nfunction imageSharedBufferOrCopy(image) {\n    if (image.data === null) {\n        return image;\n    }\n    if (haveSharedArrayBuffer) {\n        if (image.data.buffer instanceof SharedArrayBuffer) { // eslint-disable-line\n            return image;\n        }\n        const sharedBuffer = new SharedArrayBuffer(image.data.buffer.byteLength); // eslint-disable-line\n        const CTor = image.data.constructor;\n        const sharedTypedArray = new CTor(sharedBuffer);\n        if (sharedTypedArray !== null) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'.\n            sharedTypedArray.set(image.data, 0);\n        }\n        image.data = sharedTypedArray;\n        return image;\n    }\n    else {\n        return copyImage(image);\n    }\n}\nexport default imageSharedBufferOrCopy;\n//# sourceMappingURL=image-shared-buffer-or-copy.js.map","// Core API interfaces, data structures, and functions\nexport { default as version } from './version.js';\nexport { default as bufferToTypedArray } from './buffer-to-typed-array.js';\nexport { default as imageSharedBufferOrCopy } from './image-shared-buffer-or-copy.js';\nexport { default as copyImage } from './copy-image.js';\nexport { default as stackImages } from './stack-images.js';\nexport { default as getFileExtension } from './get-file-extension.js';\nexport { default as getMatrixElement } from './get-matrix-element.js';\nexport { default as castImage } from './cast-image.js';\nexport * from './worker-pool/index.js';\nexport * from './interface-types/index-common.js';\nexport * from './pipeline/index-common.js';\n// export * from './deprecated/index-common.js'\n//# sourceMappingURL=index-common.js.map","// itk-wasm Browser API interfaces, data structures, and functions\nexport * from './index-common.js';\nexport * from './pipeline/index.js';\nexport * from './worker-pool/index.js';\nexport * from './deprecated/index.js';\n//# sourceMappingURL=index.js.map","import IntTypes from './int-types.js';\nimport PixelTypes from './pixel-types.js';\nclass ImageType {\n    dimension;\n    componentType;\n    pixelType;\n    components;\n    constructor(dimension = 2, componentType = IntTypes.UInt8, pixelType = PixelTypes.Scalar, components = 1) {\n        this.dimension = dimension;\n        this.componentType = componentType;\n        this.pixelType = pixelType;\n        this.components = components;\n    }\n}\nexport default ImageType;\n//# sourceMappingURL=image-type.js.map","import ImageType from './image-type.js';\nimport setMatrixElement from '../set-matrix-element.js';\nclass Image {\n    imageType;\n    name = 'image';\n    origin;\n    spacing;\n    direction;\n    size;\n    metadata;\n    data;\n    constructor(imageType = new ImageType()) {\n        this.imageType = imageType;\n        const dimension = imageType.dimension;\n        this.origin = new Array(dimension);\n        this.origin.fill(0.0);\n        this.spacing = new Array(dimension);\n        this.spacing.fill(1.0);\n        this.direction = new Float64Array(dimension * dimension);\n        this.direction.fill(0.0);\n        for (let ii = 0; ii < dimension; ii++) {\n            setMatrixElement(this.direction, dimension, ii, ii, 1.0);\n        }\n        this.size = new Array(dimension);\n        this.size.fill(0);\n        this.metadata = new Map();\n        this.data = null;\n    }\n}\nexport default Image;\n//# sourceMappingURL=image.js.map","// itk-wasm interface types\nexport { default as IntTypes } from './int-types.js';\nexport { default as FloatTypes } from './float-types.js';\nexport { default as PixelTypes } from './pixel-types.js';\nexport { default as Image } from './image.js';\nexport { default as ImageType } from './image-type.js';\nexport { default as Mesh } from './mesh.js';\nexport { default as MeshType } from './mesh-type.js';\nexport { default as PolyData } from './poly-data.js';\nexport { default as PolyDataType } from './poly-data-type.js';\nexport { default as InterfaceTypes } from './interface-types.js';\n//# sourceMappingURL=index-common.js.map","import IntTypes from './int-types.js';\nimport FloatTypes from './float-types.js';\nimport PixelTypes from './pixel-types.js';\nclass MeshType {\n    dimension;\n    pointComponentType;\n    pointPixelComponentType;\n    pointPixelType;\n    pointPixelComponents;\n    cellComponentType;\n    cellPixelComponentType;\n    cellPixelType;\n    cellPixelComponents;\n    constructor(dimension = 2, pointComponentType = FloatTypes.Float32, pointPixelComponentType = FloatTypes.Float32, pointPixelType = PixelTypes.Scalar, pointPixelComponents = 1, cellComponentType = IntTypes.Int32, cellPixelComponentType = FloatTypes.Float32, cellPixelType = PixelTypes.Scalar, cellPixelComponents = 1) {\n        this.dimension = dimension;\n        this.pointComponentType = pointComponentType;\n        this.pointPixelComponentType = pointPixelComponentType;\n        this.pointPixelType = pointPixelType;\n        this.pointPixelComponents = pointPixelComponents;\n        this.cellComponentType = cellComponentType;\n        this.cellPixelComponentType = cellPixelComponentType;\n        this.cellPixelType = cellPixelType;\n        this.cellPixelComponents = cellPixelComponents;\n    }\n}\nexport default MeshType;\n//# sourceMappingURL=mesh-type.js.map","import MeshType from './mesh-type.js';\nclass Mesh {\n    mt;\n    meshType;\n    name = 'mesh';\n    numberOfPoints;\n    points;\n    numberOfPointPixels;\n    pointData;\n    numberOfCells;\n    cells;\n    cellBufferSize;\n    numberOfCellPixels;\n    cellData;\n    constructor(mt = new MeshType()) {\n        this.mt = mt;\n        this.meshType = mt;\n        this.name = 'mesh';\n        this.numberOfPoints = 0;\n        this.points = null;\n        this.numberOfPointPixels = 0;\n        this.pointData = null;\n        this.numberOfCells = 0;\n        this.cellBufferSize = 0;\n        this.cells = null;\n        this.numberOfCellPixels = 0;\n        this.cellData = null;\n    }\n}\nexport default Mesh;\n//# sourceMappingURL=mesh.js.map","const PixelTypes = {\n    Unknown: 'Unknown',\n    Scalar: 'Scalar',\n    RGB: 'RGB',\n    RGBA: 'RGBA',\n    Offset: 'Offset',\n    Vector: 'Vector',\n    Point: 'Point',\n    CovariantVector: 'CovariantVector',\n    SymmetricSecondRankTensor: 'SymmetricSecondRankTensor',\n    DiffusionTensor3D: 'DiffusionTensor3D',\n    Complex: 'Complex',\n    FixedArray: 'FixedArray',\n    Array: 'Array',\n    Matrix: 'Matrix',\n    VariableLengthVector: 'VariableLengthVector',\n    VariableSizeMatrix: 'VariableSizeMatrix'\n};\nexport default PixelTypes;\n//# sourceMappingURL=pixel-types.js.map","import FloatTypes from './float-types.js';\nimport PixelTypes from './pixel-types.js';\nclass PolyDataType {\n    pointPixelComponentType;\n    pointPixelType;\n    pointPixelComponents;\n    cellPixelComponentType;\n    cellPixelType;\n    cellPixelComponents;\n    constructor(pointPixelComponentType = FloatTypes.Float32, pointPixelType = PixelTypes.Scalar, pointPixelComponents = 1, cellPixelComponentType = FloatTypes.Float32, cellPixelType = PixelTypes.Scalar, cellPixelComponents = 1) {\n        this.pointPixelComponentType = pointPixelComponentType;\n        this.pointPixelType = pointPixelType;\n        this.pointPixelComponents = pointPixelComponents;\n        this.cellPixelComponentType = cellPixelComponentType;\n        this.cellPixelType = cellPixelType;\n        this.cellPixelComponents = cellPixelComponents;\n    }\n}\nexport default PolyDataType;\n//# sourceMappingURL=poly-data-type.js.map","import PolyDataType from './poly-data-type.js';\nclass PolyData {\n    polyDataType;\n    name = 'PolyData';\n    numberOfPoints;\n    points;\n    verticesBufferSize;\n    vertices;\n    linesBufferSize;\n    lines;\n    polygonsBufferSize;\n    polygons;\n    triangleStripsBufferSize;\n    triangleStrips;\n    numberOfPointPixels;\n    pointData;\n    numberOfCellPixels;\n    cellData;\n    constructor(polyDataType = new PolyDataType()) {\n        this.polyDataType = polyDataType;\n        this.polyDataType = polyDataType;\n        this.name = 'PolyData';\n        this.numberOfPoints = 0;\n        this.points = new Float32Array();\n        this.verticesBufferSize = 0;\n        this.vertices = null;\n        this.linesBufferSize = 0;\n        this.lines = null;\n        this.polygonsBufferSize = 0;\n        this.polygons = null;\n        this.triangleStripsBufferSize = 0;\n        this.triangleStrips = null;\n        this.numberOfPointPixels = 0;\n        this.pointData = null;\n        this.numberOfCellPixels = 0;\n        this.cellData = null;\n    }\n}\nexport default PolyData;\n//# sourceMappingURL=poly-data.js.map","import axios from 'axios';\nasync function createWebWorker(pipelineWorkerUrl) {\n    const workerUrl = pipelineWorkerUrl;\n    let worker = null;\n    if (workerUrl === null) {\n        // Use the version built with the bundler\n        //\n        // Bundlers, e.g. WebPack, Vite, Rollup, see these paths at build time\n        worker = new Worker(new URL('./web-workers/itk-wasm-pipeline.worker.js', import.meta.url), { type: 'module' });\n    }\n    else {\n        if (workerUrl.startsWith('http')) {\n            const response = await axios.get(workerUrl, { responseType: 'blob' });\n            const workerObjectUrl = URL.createObjectURL(response.data);\n            worker = new Worker(workerObjectUrl, { type: 'module' });\n        }\n        else {\n            worker = new Worker(workerUrl, { type: 'module' });\n        }\n    }\n    return worker;\n}\nexport default createWebWorker;\n//# sourceMappingURL=create-web-worker.js.map","import * as Comlink from 'comlink';\nimport createWebWorker from './create-web-worker.js';\nfunction workerToWorkerProxy(worker) {\n    const workerProxy = Comlink.wrap(worker);\n    const itkWebWorker = worker;\n    itkWebWorker.terminated = false;\n    itkWebWorker.workerProxy = workerProxy;\n    itkWebWorker.originalTerminate = itkWebWorker.terminate;\n    itkWebWorker.terminate = () => {\n        itkWebWorker.terminated = true;\n        itkWebWorker.workerProxy[Comlink.releaseProxy]();\n        itkWebWorker.originalTerminate();\n    };\n    return { workerProxy, worker: itkWebWorker };\n}\n// Internal function to create a web worker proxy\nasync function createWorkerProxy(existingWorker, pipelineWorkerUrl) {\n    let workerProxy;\n    if (existingWorker != null) {\n        // See if we have a worker promise attached the worker, if so reuse it. This ensures\n        // that we can safely reuse the worker without issues.\n        const itkWebWorker = existingWorker;\n        if (itkWebWorker.workerProxy !== undefined) {\n            workerProxy = itkWebWorker.workerProxy;\n            return { workerProxy, worker: itkWebWorker };\n        }\n        else {\n            return workerToWorkerProxy(existingWorker);\n        }\n    }\n    const worker = await createWebWorker(pipelineWorkerUrl);\n    return workerToWorkerProxy(worker);\n}\nexport default createWorkerProxy;\n//# sourceMappingURL=create-worker-proxy.js.map","let defaultWebWorker = null;\n/**\n * Set the default web worker for functions in a bundle defined with itk-wasm bindgen.\n *\n * Must be created with `createWebWorker`.\n **/\nexport function setDefaultWebWorker(webWorker) {\n    defaultWebWorker = webWorker;\n}\n/**\n * Get the default web worker for functions in a bundle defined with itk-wasm bindgen.\n *\n * A value of `null` indicates that the default web worker has not been set and the default web worker for the\n * bindgen package will be used.\n **/\nexport function getDefaultWebWorker() {\n    return defaultWebWorker;\n}\n//# sourceMappingURL=default-web-worker.js.map","export {};\n//# sourceMappingURL=index-common.js.map","// itk-wasm Browser pipeline functions\nexport { default as runPipeline } from './run-pipeline.js';\nexport { default as createWebWorker } from './create-web-worker.js';\nexport * from './pipeline-worker-url.js';\nexport * from './pipelines-base-url.js';\nexport * from './default-web-worker.js';\n//# sourceMappingURL=index.js.map","import axios from 'axios';\nasync function loadEmscriptenModuleMainThread(moduleRelativePathOrURL, baseUrl) {\n    let modulePrefix = 'unknown';\n    if (typeof moduleRelativePathOrURL !== 'string') {\n        modulePrefix = moduleRelativePathOrURL.href;\n    }\n    else if (moduleRelativePathOrURL.startsWith('http')) {\n        modulePrefix = moduleRelativePathOrURL;\n    }\n    else {\n        modulePrefix = typeof baseUrl !== 'undefined' ? `${baseUrl}/${moduleRelativePathOrURL}` : moduleRelativePathOrURL;\n    }\n    if (modulePrefix.endsWith('.js')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);\n    }\n    if (modulePrefix.endsWith('.wasm')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);\n    }\n    const wasmBinaryPath = `${modulePrefix}.wasm`;\n    const response = await axios.get(wasmBinaryPath, { responseType: 'arraybuffer' });\n    const wasmBinary = response.data;\n    const fullModulePath = `${modulePrefix}.js`;\n    const result = await import(/* webpackIgnore: true */ /* @vite-ignore */ fullModulePath);\n    const instantiated = result.default({ wasmBinary });\n    return instantiated;\n}\nexport default loadEmscriptenModuleMainThread;\n//# sourceMappingURL=load-emscripten-module-main-thread.js.map","let pipelineWorkerUrl;\nexport function setPipelineWorkerUrl(workerUrl) {\n    pipelineWorkerUrl = workerUrl;\n}\nexport function getPipelineWorkerUrl() {\n    return pipelineWorkerUrl;\n}\n//# sourceMappingURL=pipeline-worker-url.js.map","let pipelinesBaseUrl;\nexport function setPipelinesBaseUrl(baseUrl) {\n    pipelinesBaseUrl = baseUrl;\n}\nexport function getPipelinesBaseUrl() {\n    return pipelinesBaseUrl;\n}\n//# sourceMappingURL=pipelines-base-url.js.map","import * as Comlink from 'comlink';\nimport createWorkerProxy from './create-worker-proxy.js';\nimport loadEmscriptenModuleMainThread from './internal/load-emscripten-module-main-thread.js';\nimport { simd } from 'wasm-feature-detect';\nimport InterfaceTypes from '../interface-types/interface-types.js';\nimport runPipelineEmscripten from './internal/run-pipeline-emscripten.js';\nimport getTransferables from '../get-transferables.js';\nimport imageTransferables from './internal/image-transferables.js';\nimport meshTransferables from './internal/mesh-transferables.js';\nimport polyDataTransferables from './internal/poly-data-transferables.js';\nimport { getPipelinesBaseUrl } from './pipelines-base-url.js';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\n// To cache loaded pipeline modules\nconst pipelineToModule = new Map();\nfunction defaultPipelineWorkerUrl() {\n    let result = getPipelineWorkerUrl();\n    if (typeof result === 'undefined') {\n        result = null;\n    }\n    return result;\n}\nfunction defaultPipelinesBaseUrl() {\n    let result = getPipelinesBaseUrl();\n    if (typeof result === 'undefined') {\n        result = new URL('/pipelines', document.location.origin).href;\n    }\n    return result;\n}\nasync function loadPipelineModule(pipelinePath, pipelineBaseUrl) {\n    let moduleRelativePathOrURL = pipelinePath;\n    let pipeline = pipelinePath;\n    if (typeof pipelinePath !== 'string') {\n        moduleRelativePathOrURL = new URL(pipelinePath.href);\n        pipeline = moduleRelativePathOrURL.href;\n    }\n    if (pipelineToModule.has(pipeline)) {\n        return pipelineToModule.get(pipeline);\n    }\n    else {\n        const pipelineModule = (await loadEmscriptenModuleMainThread(pipelinePath, pipelineBaseUrl?.toString() ?? defaultPipelinesBaseUrl()));\n        pipelineToModule.set(pipeline, pipelineModule);\n        return pipelineModule;\n    }\n}\nasync function runPipeline(pipelinePath, args, outputs, inputs, options) {\n    if (!await simd()) {\n        const simdErrorMessage = 'WebAssembly SIMD support is required -- please update your browser.';\n        alert(simdErrorMessage);\n        throw new Error(simdErrorMessage);\n    }\n    const webWorker = options?.webWorker ?? null;\n    if (webWorker === false) {\n        const pipelineModule = await loadPipelineModule(pipelinePath.toString(), options?.pipelineBaseUrl);\n        const result = runPipelineEmscripten(pipelineModule, args, outputs, inputs);\n        return result;\n    }\n    let worker = webWorker;\n    const pipelineWorkerUrl = options?.pipelineWorkerUrl ?? defaultPipelineWorkerUrl();\n    const pipelineWorkerUrlString = typeof pipelineWorkerUrl !== 'string' && typeof pipelineWorkerUrl?.href !== 'undefined' ? pipelineWorkerUrl.href : pipelineWorkerUrl;\n    const { workerProxy, worker: usedWorker } = await createWorkerProxy(worker, pipelineWorkerUrlString);\n    worker = usedWorker;\n    const transferables = [];\n    if (!(inputs == null) && inputs.length > 0) {\n        inputs.forEach(function (input) {\n            if (input.type === InterfaceTypes.BinaryStream) {\n                // Binary data\n                const dataArray = input.data.data;\n                transferables.push(dataArray);\n            }\n            else if (input.type === InterfaceTypes.BinaryFile) {\n                // Binary data\n                const dataArray = input.data.data;\n                transferables.push(dataArray);\n            }\n            else if (input.type === InterfaceTypes.Image) {\n                // Image data\n                const image = input.data;\n                if (image.data !== null) {\n                    transferables.push(...imageTransferables(image));\n                }\n            }\n            else if (input.type === InterfaceTypes.Mesh) {\n                // Mesh data\n                const mesh = input.data;\n                transferables.push(...meshTransferables(mesh));\n            }\n            else if (input.type === InterfaceTypes.PolyData) {\n                // PolyData data\n                const polyData = input.data;\n                transferables.push(...polyDataTransferables(polyData));\n            }\n        });\n    }\n    const pipelineBaseUrl = options?.pipelineBaseUrl ?? defaultPipelinesBaseUrl();\n    const pipelineBaseUrlString = typeof pipelineBaseUrl !== 'string' && typeof pipelineBaseUrl?.href !== 'undefined' ? pipelineBaseUrl.href : pipelineBaseUrl;\n    const transferedInputs = (inputs != null) ? Comlink.transfer(inputs, getTransferables(transferables, options?.noCopy)) : null;\n    const result = await workerProxy.runPipeline(pipelinePath.toString(), pipelineBaseUrlString, args, outputs, transferedInputs);\n    return {\n        returnValue: result.returnValue,\n        stdout: result.stdout,\n        stderr: result.stderr,\n        outputs: result.outputs,\n        webWorker: worker\n    };\n}\nexport default runPipeline;\n//# sourceMappingURL=run-pipeline.js.map","function setMatrixElement(matrixData, columns, row, column, value) {\n    matrixData[column + row * columns] = value;\n}\nexport default setMatrixElement;\n//# sourceMappingURL=set-matrix-element.js.map","import Image from './interface-types/image.js';\n/** Join an array of sequential image slabs into a single image */\nfunction stackImages(images) {\n    if (images.length < 1) {\n        throw Error('At least one images is required.');\n    }\n    const firstImage = images[0];\n    if (firstImage.data === null) {\n        throw Error('Image data is null.');\n    }\n    const result = new Image(firstImage.imageType);\n    result.origin = Array.from(firstImage.origin);\n    result.spacing = Array.from(firstImage.spacing);\n    const dimension = result.imageType.dimension;\n    result.direction = firstImage.direction.slice();\n    const stackOn = dimension - 1;\n    result.size = Array.from(firstImage.size);\n    const stackedSize = images.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue.size[stackOn];\n    }, 0);\n    result.size[stackOn] = stackedSize;\n    const dataSize = result.size.reduce((accumulator, currentValue) => { return accumulator * currentValue; }, 1) * result.imageType.components;\n    const CTor = firstImage.data.constructor;\n    result.data = new CTor(dataSize);\n    let offsetBase = result.imageType.components;\n    for (let subIndex = 0; subIndex < result.size.length - 1; subIndex++) {\n        offsetBase *= result.size[subIndex];\n    }\n    let stackIndex = 0;\n    if (result.data != null) {\n        for (let index = 0; index < images.length; index++) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'.\n            result.data.set(images[index].data, offsetBase * stackIndex);\n            stackIndex += images[index].size[stackOn];\n        }\n    }\n    else {\n        throw Error('Could not create result image data.');\n    }\n    return result;\n}\nexport default stackImages;\n//# sourceMappingURL=stack-images.js.map","const version = \"1.0.0-b.165\";\nexport default version;\n//# sourceMappingURL=version.js.map","// itk-wasm WebWorker API interfaces, data structures, and functions\nexport { default as WorkerPool } from './worker-pool.js';\n//# sourceMappingURL=index.js.map","/* eslint-disable  @typescript-eslint/no-non-null-assertion */\nclass WorkerPool {\n    fcn;\n    workerQueue;\n    runInfo;\n    /*\n     * poolSize is the maximum number of web workers to create in the pool.\n     *\n     * The function, `fcn,` must accept in its last argument an options object with a\n     * `webWorker` property that is a web worker to use for computation. The\n     * function must also return a promise that resolves to an object with the\n     * with the results of the computation and the used worker in the `webWorker`\n     * property.\n     *\n     **/\n    constructor(poolSize, fcn) {\n        this.fcn = fcn;\n        this.workerQueue = new Array(poolSize);\n        this.workerQueue.fill(null);\n        this.runInfo = [];\n    }\n    /*\n     * Run the tasks specified by the arguments in the taskArgsArray that will\n     * be passed to the pool fcn.\n     *\n     * An optional progressCallback will be called with the number of complete\n     * tasks and the total number of tasks as arguments every time a task has\n     * completed.\n     *\n     * Returns an object containing a promise ('promise') to communicate results\n     * as well as an id ('runId') which can be used to cancel any remaining pending\n     * tasks before they complete.\n     */\n    runTasks(taskArgsArray, progressCallback = null) {\n        const info = {\n            taskQueue: [],\n            results: [],\n            addingTasks: false,\n            postponed: false,\n            runningWorkers: 0,\n            index: 0,\n            completedTasks: 0,\n            progressCallback,\n            canceled: false\n        };\n        this.runInfo.push(info);\n        info.index = this.runInfo.length - 1;\n        return {\n            promise: new Promise((resolve, reject) => {\n                info.resolve = resolve;\n                info.reject = reject;\n                info.results = new Array(taskArgsArray.length);\n                info.completedTasks = 0;\n                info.addingTasks = true;\n                taskArgsArray.forEach((taskArg, index) => {\n                    this.addTask(info.index, index, taskArg);\n                });\n                info.addingTasks = false;\n            }),\n            runId: info.index\n        };\n    }\n    terminateWorkers() {\n        for (let index = 0; index < this.workerQueue.length; index++) {\n            const worker = this.workerQueue[index];\n            if (worker != null) {\n                worker.terminate();\n            }\n            this.workerQueue[index] = null;\n        }\n    }\n    cancel(runId) {\n        const info = this.runInfo[runId];\n        if (info !== null && info !== undefined) {\n            info.canceled = true;\n        }\n    }\n    addTask(infoIndex, resultIndex, taskArgs) {\n        const info = this.runInfo[infoIndex];\n        if (info?.canceled === true) {\n            info.reject('Remaining tasks canceled');\n            this.clearTask(info.index);\n            return;\n        }\n        if (this.workerQueue.length > 0) {\n            const worker = this.workerQueue.pop();\n            info.runningWorkers++;\n            taskArgs[taskArgs.length - 1].webWorker = worker;\n            // @ts-expect-error: TS7031: Binding element 'webWorker' implicitly has an 'any' type.\n            this.fcn(...taskArgs).then(({ webWorker, ...result }) => {\n                this.workerQueue.push(webWorker);\n                // Check if this task was canceled while it was getting done\n                if (this.runInfo[infoIndex] !== null) {\n                    info.runningWorkers--;\n                    info.results[resultIndex] = result;\n                    info.completedTasks++;\n                    if (info.progressCallback != null) {\n                        info.progressCallback(info.completedTasks, info.results.length);\n                    }\n                    if (info.taskQueue.length > 0) {\n                        const reTask = info.taskQueue.shift();\n                        this.addTask(infoIndex, reTask[0], reTask[1]);\n                    }\n                    else if (!info.addingTasks && info.runningWorkers === 0) {\n                        const results = info.results;\n                        info.resolve(results);\n                        this.clearTask(info.index);\n                    }\n                }\n                // @ts-expect-error: TS7006: Parameter 'error' implicitly has an 'any' type.\n            }).catch((error) => {\n                info.reject(error);\n                this.clearTask(info.index);\n            });\n        }\n        else {\n            if (info.runningWorkers !== 0 || info.postponed) {\n                // At least one worker is working on these tasks, and it will pick up\n                // the next item in the taskQueue when done.\n                info.taskQueue.push([resultIndex, taskArgs]);\n            }\n            else {\n                // Try again later.\n                info.postponed = true;\n                setTimeout(() => {\n                    info.postponed = false;\n                    this.addTask(info.index, resultIndex, taskArgs);\n                }, 50);\n            }\n        }\n    }\n    clearTask(clearIndex) {\n        this.runInfo[clearIndex].results = [];\n        this.runInfo[clearIndex].taskQueue = [];\n        this.runInfo[clearIndex].progressCallback = null;\n        this.runInfo[clearIndex].canceled = null;\n        this.runInfo[clearIndex].reject = () => { };\n        this.runInfo[clearIndex].resolve = () => { };\n    }\n}\nexport default WorkerPool;\n//# sourceMappingURL=worker-pool.js.map","export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),exceptionsFinal=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABBAFgAAADAgEAChABDgACaR9AAQMAAAsACxoL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})(),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jsStringBuiltins=()=>(async()=>{try{return await WebAssembly.instantiate(Uint8Array.from(atob(\"AGFzbQEAAAABBgFgAW8BfwIXAQ53YXNtOmpzLXN0cmluZwR0ZXN0AAA=\"),(e=>e.codePointAt(0))),{},{builtins:[\"js-string\"]}),!0}catch(e){return!1}})(),jspi=()=>(async()=>\"Suspending\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)(),typedFunctionReferences=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABEANgAX8Bf2ABZAABf2AAAX8DBAMBAAIJBQEDAAEBChwDCwBBCkEqIAAUAGoLBwAgAEEBagsGANIBEAAL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})();\n"],"names":[],"sourceRoot":""}